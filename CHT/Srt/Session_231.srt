00:00:20.087 --> 00:00:24.458 
Cocoa Touch最優方案講座

00:00:33.934 --> 00:00:38.805 
大家好 非常感謝你們來參加
Cocoa Touch最優方案講座

00:00:39.573 --> 00:00:42.442 
我叫 盧克·黑斯特曼
是UIKit一名工程師

00:00:42.676 --> 00:00:45.412 
今天我很榮幸爲你演示一些

00:00:45.479 --> 00:00:49.583 
巧妙的程序片段和各種實用的建議

00:00:49.850 --> 00:00:52.152 
現在和將來你都可以在所

00:00:52.419 --> 00:00:54.855 
編寫的應用程序中直接地進行應用

00:00:56.123 --> 00:01:00.694 
所以我將向你展示一系列主題

00:01:00.761 --> 00:01:03.230 
這些主題都是和
開發Cocoa Touch應用程序

00:01:03.297 --> 00:01:04.897 
密切相關的每個主題

00:01:05.299 --> 00:01:10.604 
我都會教你們一系列的最佳實用技巧

00:01:11.538 --> 00:01:16.977 
那些主題分別爲
第一 應用程序生命週期

00:01:17.678 --> 00:01:21.215 
之後是視圖和視圖控制器 自動佈局

00:01:21.982 --> 00:01:24.551 
最後一個是表格和集合視圖

00:01:25.219 --> 00:01:27.421 
當我講這些主題的時候

00:01:27.821 --> 00:01:31.592 
有一系列的目標我會隨着我要講授的

00:01:32.159 --> 00:01:35.162 
巧妙的程序片段傳授給你們

00:01:35.562 --> 00:01:36.396 
因爲...

00:01:37.164 --> 00:01:41.201 
我們所作的一切
其目標都是要完成幾個基本理念

00:01:41.268 --> 00:01:43.136 
而一定也都是你希望
應用程序所能體現的

00:01:43.203 --> 00:01:46.440 
第一 你要想辦法讓你的應用程序
實現峯值性能

00:01:46.673 --> 00:01:48.542 
你要你的應用程序如絲般順滑

00:01:48.709 --> 00:01:50.511 
看起來就像一個
搖滾明星程序開發員

00:01:50.577 --> 00:01:52.079 
並且人人都喜歡你

00:01:53.714 --> 00:01:57.317 
你也想讓你所開發
應用程序提供一流的用戶體驗

00:01:57.751 --> 00:01:59.186 
那樣 每人都會覺得

00:01:59.253 --> 00:02:01.221 
你開發的應用程序看起來
精美且令人讚歎

00:02:01.922 --> 00:02:05.359 
最後 你還要把你的程序代碼寫好

00:02:05.425 --> 00:02:07.327 
使之能夠最大程度地適應未來的發展

00:02:07.594 --> 00:02:10.597 
這樣當未來版本的iOS 推出時
你需要寫比較少的

00:02:10.663 --> 00:02:14.701 
代碼就能使你的應用程序
適應於這些新版本的iOS

00:02:15.402 --> 00:02:16.803 
那些就是我們講解這些主題時

00:02:16.870 --> 00:02:18.005 
心中要牢記的目標

00:02:18.438 --> 00:02:21.141 
而現在我首先要
談到應用程序的生命週期

00:02:22.109 --> 00:02:26.280 
我要向你們講授的第一個最優方案

00:02:26.547 --> 00:02:29.750 
與使用者第一次使用應用軟件體驗有關

00:02:29.816 --> 00:02:31.718 
也就是軟件啓動時的體驗

00:02:32.019 --> 00:02:35.756 
因此與應用軟件有關的
第一個最優方案是要使之能夠快速啓動

00:02:36.690 --> 00:02:40.060 
這也就是在用戶點擊你的圖標時
你的應用如何能夠顯得有反應

00:02:40.127 --> 00:02:43.263 
而且你的應用也能做好準備
馬上即可與用戶進行互動

00:02:43.330 --> 00:02:45.999 
而使你能夠快速啓動一個應用程序
的方法其實非常簡單

00:02:46.066 --> 00:02:49.770 
就是要能夠迅速從
ApplicationDidFinishLaunching

00:02:49.903 --> 00:02:51.572 
這一用戶界面應用程序委託事件返回

00:02:52.272 --> 00:02:54.741 
這個在做法上實在簡單

00:02:54.808 --> 00:02:56.944 
我肯定你們全都知道如何去做了

00:02:57.878 --> 00:03:01.715 
給所有運行時間
長的工作設置一個應用程序

00:03:01.782 --> 00:03:04.618 
從ApplicationDidFinishLaunching
中挪到他處發派以實現延遲執行

00:03:04.685 --> 00:03:07.888 
因爲要完成儘可能少的工作就返回

00:03:08.288 --> 00:03:11.325 
你要建立起一個基本的用戶界面
使你的用戶可以與之互動

00:03:11.725 --> 00:03:16.930 
然後返回
無論從一個數據庫或者網絡來加載數據

00:03:17.364 --> 00:03:19.366 
ApplicationDidFinishLaunching
來延遲完成其執行

00:03:21.268 --> 00:03:24.037 
如果需要太多時間啓動
當然你的應用程序將被中止

00:03:24.104 --> 00:03:26.173 
因爲你的程序看起來
已在系統中停止了運行

00:03:26.240 --> 00:03:29.910 
所以你確實需要從那個狀態儘快返回

00:03:30.277 --> 00:03:32.980 
做出一個反應良好的應用程序

00:03:33.180 --> 00:03:35.015 
不是能做到啓動快就可以了

00:03:35.249 --> 00:03:38.519 
我們要完成的比這要多
我們要讓我們的應用程序一直反應良好

00:03:39.386 --> 00:03:42.189 
所以我要深入到這一技術中來講解

00:03:42.256 --> 00:03:45.759 
反應良好總的來講意味着什麼
這樣我們才能構造

00:03:45.826 --> 00:03:48.195 
一種技術方法做到不只
在應用程序啓動時能快速完成

00:03:48.262 --> 00:03:50.264 
而且在該程序的整個
生命週期中都會反應良好

00:03:50.330 --> 00:03:52.666 
所以 儘管我剛剛談過將所有這些工作

00:03:52.733 --> 00:03:55.536 
從ApplicationDidFinishLaunching
去除挪到他處推遲完成執行

00:03:55.602 --> 00:03:57.237 
但是有關最優方案

00:03:57.304 --> 00:03:59.306 
我真正想說的並不只是異步執行

00:04:00.040 --> 00:04:02.342 
真正要做的關鍵是
要將運行時間長的工作區別對待

00:04:02.609 --> 00:04:04.545 
將它們放到某個後臺隊列中異步執行

00:04:04.912 --> 00:04:06.947 
如果你需要從某個數據庫加載數據

00:04:07.014 --> 00:04:08.015 
或者你需要連接網絡

00:04:08.382 --> 00:04:10.417 
那些都是可以放到後臺進行的工作

00:04:10.918 --> 00:04:13.954 
所以如果我們再考慮
ApplicationDidFinishLaunching

00:04:14.021 --> 00:04:16.255 
這一方法
而我們有這種非常簡單的方法

00:04:16.322 --> 00:04:18.858 
來調用一個單純的
ApplicationDidFinishLaunching

00:04:20.127 --> 00:04:24.164 
你知道我們通過Application
DidFinishLaunching直接加載數據

00:04:24.231 --> 00:04:25.699 
而我剛剛說過 推遲執行這一任務

00:04:25.766 --> 00:04:27.835 
好吧所以我們可以簡單地完成這一步

00:04:28.135 --> 00:04:31.471 
我們將其發派出去 就算做完了

00:04:31.538 --> 00:04:33.941 
這個任務就不在
ApplicationDidFinishLaunching中了

00:04:34.007 --> 00:04:37.578 
我們就能夠迅速啓動
而啓動時一切也就會更好

00:04:37.945 --> 00:04:43.417 
但是那樣仍會產生
隨後阻斷總執行隊列的可能性

00:04:43.483 --> 00:04:45.519 
且會因此阻斷與用戶之間的互動

00:04:46.019 --> 00:04:49.323 
事實上最好的
做法是時將那個工作轉移到

00:04:49.389 --> 00:04:53.160 
一個後臺執行隊列中
這樣當那個任務開始執行時

00:04:53.594 --> 00:04:55.696 
與用戶之間的互動可以繼續進行

00:04:55.996 --> 00:04:58.365 
而你的應用程序看起來也總是反應良好

00:04:59.266 --> 00:05:02.603 
所以這種講任務通過
後臺執行隊列發派的技術

00:05:02.669 --> 00:05:06.773 
可以在應用程序執行的任何時候應用
而不僅僅限於啓動之時

00:05:07.641 --> 00:05:11.044 
然後 你把那項
在後臺進行的數據有關的工作

00:05:11.311 --> 00:05:12.279 
而當那個工作完成時

00:05:12.346 --> 00:05:14.581 
其執行就回到主執行隊列

00:05:14.648 --> 00:05:17.317 
與像視圖和視圖啓動器這樣的
UIKit 元素進行互動

00:05:18.552 --> 00:05:20.254 
所以這樣纔是真的反應良好

00:05:20.587 --> 00:05:22.789 
接着你要做的是

00:05:22.856 --> 00:05:28.328 
除了在用戶第一次啓動 應用程序時
你要保證程序反應良好之外

00:05:28.829 --> 00:05:30.931 
還要保證在用戶第二次啓動
程序仍然反應良好

00:05:31.231 --> 00:05:32.933 
而要實現這一目標就要使

00:05:32.999 --> 00:05:37.104 
在用戶退出你的程序時
該應用程序並不簡單的結束

00:05:37.171 --> 00:05:39.806 
而是進入一種iOS上的暫停執行狀態

00:05:40.407 --> 00:05:44.111 
所以要在用戶第二次打開你的程序時
想要特別快的話

00:05:44.711 --> 00:05:47.181 
只需要讓你的程序能從
上次的暫停狀態繼續執行就行

00:05:47.514 --> 00:05:50.717 
而這需要那個應用程序仍在內存中

00:05:51.451 --> 00:05:54.655 
所以 我們要看看系統內存的情況

00:05:55.155 --> 00:05:57.424 
我們確定系統內存的一部分
是由被操作系統內核

00:05:57.491 --> 00:05:59.092 
和各種操作系統的進程所佔用

00:05:59.693 --> 00:06:02.796 
系統內存的一大塊將會是
由前臺應用程序所佔用

00:06:03.830 --> 00:06:07.835 
之後 還有不少會是由後臺應用所佔用

00:06:08.869 --> 00:06:11.405 
現在 你會注意到在整個圖像中

00:06:11.471 --> 00:06:13.407 
會有某個後臺
應用程序佔用比其他任何進程

00:06:13.473 --> 00:06:14.875 
都多的內存

00:06:15.609 --> 00:06:18.078 
你的應用程序不要成爲那樣否則

00:06:18.545 --> 00:06:20.714 
你不像這樣的原因是

00:06:21.315 --> 00:06:25.752 
程序會第一個結束運行
當應用程序需要額外的內存時

00:06:26.486 --> 00:06:30.858 
所以你要讓你的應用程序
使用用戶界面應用程序

00:06:30.924 --> 00:06:33.660 
的委託方法獲知何時
自己要進入後臺運行

00:06:34.127 --> 00:06:36.363 
之後就要釋放不需要的內存資源

00:06:36.430 --> 00:06:40.434 
使其進入後臺運行時所需的內存量
能夠儘可能的小在使用拆分視圖時

00:06:40.901 --> 00:06:42.436 
更加重要的是

00:06:42.736 --> 00:06:47.608 
同時運行會有多個前臺應用程序

00:06:48.175 --> 00:06:50.811 
當第二個前臺應用程序啓動時

00:06:51.078 --> 00:06:53.947 
那種佔用很多內存的應用程序
不會繼續存在下去

00:06:54.815 --> 00:06:56.149 
所以你不想你的程序是那樣的

00:06:57.017 --> 00:06:59.653 
所以這就是怎樣
保證做到超級反應良好

00:06:59.720 --> 00:07:02.155 
且考慮你的應用程序在其
整個生命週期中的性能表現

00:07:02.289 --> 00:07:05.893 
我想要談的與一般應用程序編程

00:07:05.959 --> 00:07:07.694 
有關的最優方案是

00:07:07.761 --> 00:07:08.962 
利用各種框架

00:07:10.030 --> 00:07:14.101 
這也許是我能給你的最基本的最優方案

00:07:14.168 --> 00:07:15.235 
這就是：去做！

00:07:15.302 --> 00:07:17.304 
一定要利用Apple提供的各種框架

00:07:17.905 --> 00:07:21.041 
經年累月地努力以構建優良的框架結構

00:07:21.141 --> 00:07:23.010 
使你能夠在其上開發應用程序

00:07:23.410 --> 00:07:25.846 
這樣做有幾個基本優勢

00:07:25.913 --> 00:07:27.181 
我相信你對此已經熟悉

00:07:27.714 --> 00:07:29.583 
它可以降低你的維護負擔

00:07:29.816 --> 00:07:33.587 
你知道嗎？例如如果你使用
用戶界面導航控制器

00:07:33.921 --> 00:07:37.391 
當新的版本推出時
你就不需要維護那一導航控制器

00:07:37.691 --> 00:07:40.394 
但如果你建造你自己的導航控制器
那就必須自己對其維護升級

00:07:40.460 --> 00:07:43.997 
且當我們對那部分進行改進升級時
你會免費獲得那些改進升級

00:07:44.331 --> 00:07:45.365 
例如你們知道

00:07:45.432 --> 00:07:49.002 
兩個版本以前導航控制器增加了一個

00:07:49.303 --> 00:07:51.271 
使用滑動手勢的新的功能

00:07:51.672 --> 00:07:54.842 
在導航控制器上建立的應用
都免費獲得了這一改進的功能

00:07:55.342 --> 00:07:57.578 
如果你用自己的導航控制器
你就必須自己去實現它

00:07:57.644 --> 00:08:00.981 
否則 你的應用程序就會感覺起來
與系統的其餘部分不相符合

00:08:01.515 --> 00:08:05.252 
所以 你需要這樣做因爲你需要能夠

00:08:05.319 --> 00:08:09.056 
集中精力於把什麼能使你的應用程序
真正特別的地方做好

00:08:09.122 --> 00:08:10.123 
這是我們都想看到的

00:08:10.190 --> 00:08:13.660 
想要你利用時間寫出神奇的應用程序

00:08:13.927 --> 00:08:17.397 
而不是花費你的寶貴時間做本來
可以留給我們的構架很好地完成的事情

00:08:17.731 --> 00:08:19.299 
這就是我們要鼓勵你做的事情

00:08:20.501 --> 00:08:22.135 
當然在你集中精力做那些時

00:08:22.202 --> 00:08:25.439 
你需要時刻牢記的是

00:08:25.506 --> 00:08:27.574 
怎樣進行版本控制

00:08:27.875 --> 00:08:30.344 
所以我們常被問到的最大的問題是：

00:08:30.644 --> 00:08:33.780 
我們的應用應該能夠部署
在多少不同的版本上？

00:08:34.181 --> 00:08:36.183 
我們給你的建議是

00:08:36.517 --> 00:08:40.419 
以兩個最重要的iOS版本爲目標

00:08:40.821 --> 00:08:43.690 
所以 從今秋當iOS 9推出時起

00:08:43.756 --> 00:08:46.126 
這兩個版本就意味着iOS 8和9

00:08:46.693 --> 00:08:49.563 
這種做法會讓你獲得這一最佳組合

00:08:49.630 --> 00:08:53.300 
你既能獲得大量的用戶
又不需要擔負過重的維護負擔而

00:08:53.734 --> 00:08:56.103 
必須爲過去的好幾個
iOS版本而進行部署

00:08:56.170 --> 00:08:57.638 
還不得不處理的有關的之中事宜

00:08:58.839 --> 00:09:02.342 
在這個過程中您可能會發現你自己

00:09:02.743 --> 00:09:06.513 
有時需要用特別
的程序邏輯來檢查程序是在

00:09:06.580 --> 00:09:07.781 
哪個版本的系統上運行

00:09:08.315 --> 00:09:11.485 
而另一個的最佳實做法是要確保

00:09:11.552 --> 00:09:16.223 
你的程序中包含基於
不同系統版本的回退應變功能

00:09:16.590 --> 00:09:19.693 
這意味着絕對不要編寫這樣的代碼

00:09:19.760 --> 00:09:22.095 
你先檢查某個特定的版本

00:09:22.162 --> 00:09:24.565 
比如iOS 9然後才做某事

00:09:24.998 --> 00:09:26.366 
如果你做一個這樣的檢查

00:09:26.433 --> 00:09:28.869 
就肯定會給你的程序
帶來一個缺陷

00:09:29.169 --> 00:09:31.505 
因爲當比如iOS 9.1

00:09:31.672 --> 00:09:34.608 
發佈時就會使這一檢查返回失敗的結果

00:09:35.275 --> 00:09:39.046 
與此不同
你應該知道iOS 9中的一切

00:09:39.112 --> 00:09:44.418 
都將會在未來的版本之中得以保存
在iOS 9版本中實現的任何邏輯

00:09:44.484 --> 00:09:47.921 
都要在該版本及其後的版本中得以保留

00:09:48.689 --> 00:09:51.592 
甚至更好
如果你是在用Swift來編程

00:09:51.859 --> 00:09:55.229 
你就可以利用的
其新的帶有＃號的新的表達法

00:09:55.462 --> 00:09:59.533 
把您所有的有關版本的
代碼放到一個代碼塊中

00:09:59.600 --> 00:10:02.402 
編譯器就可以理解並辨明並最終告知你

00:10:02.469 --> 00:10:05.906 
你的程序是否對某個版本
來講編譯器可以理解和解釋的塊

00:10:06.840 --> 00:10:09.710 
把所有特定版本的編碼轉換成
無論你最終使用了哪一種技術

00:10:09.776 --> 00:10:12.212 
都要考慮清楚
你是否需要一個Else子句

00:10:12.579 --> 00:10:14.348 
因爲你不想犯一些

00:10:14.414 --> 00:10:16.950 
控鍵邏輯錯誤

00:10:17.150 --> 00:10:20.387 
而這又是應用程序系統的核心部分

00:10:20.587 --> 00:10:25.859 
但是倘若版本不符
將導致必要的工作無法進展

00:10:26.059 --> 00:10:31.198 
同時還會在該版本中出現
你意料不到的故障

00:10:32.232 --> 00:10:35.302 
這對於一般的應用程序的
壽命週期而言是基本的最優方案

00:10:35.903 --> 00:10:38.839 
下面我們來說一下視圖和視圖
控制器的最優方案

00:10:39.506 --> 00:10:42.042 
我第一個要提出的想法是關於

00:10:42.109 --> 00:10:44.912 
現代設備的佈局的

00:10:46.246 --> 00:10:49.016 
大家都知到去年秋天
我們推出了iPhone 6

00:10:49.283 --> 00:10:52.452 
和iPhone 6 Plus
我敢保證你們也都知道

00:10:52.519 --> 00:10:55.889 
這次我們運用了全新的四維視圖效果

00:10:56.190 --> 00:11:00.093 
在iOS設備中的手機應用軟件

00:11:00.160 --> 00:11:01.328 
是沒有這個視覺效果的

00:11:02.329 --> 00:11:06.166 
當你把這個維度效果添加到蘋果手機上

00:11:06.233 --> 00:11:09.937 
而早前這項技術已運用到iPad上

00:11:10.070 --> 00:11:13.140 
可能手機軟件也需要四維視圖效果

00:11:13.207 --> 00:11:16.476 
就要運用矩陣
在iPad Air 2上拆分視圖時

00:11:17.644 --> 00:11:19.379 
它的矩陣是相當大的

00:11:19.479 --> 00:11:21.949 
因此 再建立佈局就沒有意義了

00:11:22.015 --> 00:11:25.853 
那是用於建立特殊維度的

00:11:25.919 --> 00:11:27.955 
你的視圖控制器已經存在了

00:11:28.288 --> 00:11:33.861 
相反 作爲基礎需求佈局比例早就完成

00:11:34.528 --> 00:11:38.098 
我們要專門避免
在我們的視圖和視圖管理器的

00:11:38.432 --> 00:11:40.634 
佈局中的硬編碼值

00:11:41.468 --> 00:11:45.839 
如果我們只是想象一下視圖
簡單地在視圖裏加入一個標籤

00:11:46.406 --> 00:11:51.778 
如果只是簡單把佈局設
成260點寬其餘頁邊距爲30點

00:11:51.845 --> 00:11:56.717 
那麼早在幾十年以前就擁有這個技術了

00:11:58.118 --> 00:12:01.021 
我們沒有這麼做是因爲我們想要考慮

00:12:01.455 --> 00:12:02.856 
清楚維度比例

00:12:02.923 --> 00:12:04.324 
任何一個維度都要精確地計算

00:12:04.391 --> 00:12:07.728 
如果寬度計算了佈局遭到破壞

00:12:07.794 --> 00:12:11.365 
還是無法正常運轉
是因爲相位差沒有意義了

00:12:11.965 --> 00:12:15.369 
所以如果把這個想成一個居中的標籤

00:12:15.903 --> 00:12:18.705 
那麼在維數增加的情況下是有意義的

00:12:18.805 --> 00:12:21.608 
我們還會提到這個例子 在我講

00:12:21.675 --> 00:12:23.243 
關於“自動佈局”最優方案時

00:12:24.811 --> 00:12:28.982 
我想提一下有關我們在iOS8中

00:12:29.049 --> 00:12:31.752 
提到的應用程序界面
它能幫你成比例的佈局

00:12:32.286 --> 00:12:34.655 
原因是一定程度上爲了摒棄

00:12:34.721 --> 00:12:36.823 
屏幕旋轉的想法

00:12:37.257 --> 00:12:40.827 
你們知道
我們想讓你們不再考慮屏幕旋轉的問題

00:12:41.195 --> 00:12:43.230 
事實上我想要告訴你們的是

00:12:43.297 --> 00:12:45.832 
如果你們在設計app時 有這種想法

00:12:45.899 --> 00:12:48.635 
考慮橫豎屏的問題

00:12:48.702 --> 00:12:50.404 
或者和設計師討論這個問題

00:12:50.470 --> 00:12:52.406 
“橫屏”“豎屏”都是他們想出來的

00:12:53.106 --> 00:12:54.741 
那你就大錯特錯了

00:12:55.108 --> 00:12:57.311 
我們只從尺寸的角度考慮問題

00:12:58.212 --> 00:13:00.581 
所以尺寸類別就是爲了幫助我們

00:13:02.182 --> 00:13:05.485 
從尺寸的角度考慮問題
進而成比例地佈局

00:13:06.019 --> 00:13:08.622 
同時我們也意識到並接受

00:13:09.356 --> 00:13:11.425 
存在一些關於尺寸的閥值

00:13:12.059 --> 00:13:15.696 
原因是我們的基本用戶界面改變了

00:13:16.029 --> 00:13:19.099 
如iPhone 4S中的設置選項

00:13:19.166 --> 00:13:21.268 
是一個很簡易的單欄桌面視圖

00:13:22.069 --> 00:13:26.240 
到了iPhone 5
仍然是一個桌面視圖 只是高了一點兒

00:13:26.773 --> 00:13:29.343 
同樣iPhone6的也只是高了一點
寬了一點

00:13:29.443 --> 00:13:30.811 
但基本上還是一個桌面視圖

00:13:31.011 --> 00:13:33.380 
而iPhone6 Plus
也只是更大了一些

00:13:34.047 --> 00:13:36.149 
可是在我們把它過渡到iPad時

00:13:36.717 --> 00:13:39.520 
我們跨越了一定的寬度閥值

00:13:40.020 --> 00:13:44.925 
因此這個視圖完全變了樣

00:13:44.992 --> 00:13:48.762 
現在變成了兩欄的滾動內容

00:13:49.096 --> 00:13:51.098 
因此我們在這方面有所突破

00:13:51.298 --> 00:13:55.435 
實際上你會發現我們跨越了同樣的閥值

00:13:55.636 --> 00:13:57.371 
在我們看iPhone6時

00:13:57.437 --> 00:13:59.406 
而且可能我得用髒話來形容這個閥值

00:14:03.443 --> 00:14:06.013 
豎屏模式尺寸類別
也就是我們說的應用程序界面

00:14:06.280 --> 00:14:08.749 
對於我們蘋果公司
爲了與你們的app銜接

00:14:09.183 --> 00:14:11.985 
就會跨過那些基本閥值

00:14:12.486 --> 00:14:16.924 
而這也是爲了讓你們能應對閥值並考慮

00:14:16.990 --> 00:14:19.693 
使用一個徹底改變的用戶界面

00:14:19.760 --> 00:14:20.627 
來應對那些閥值

00:14:20.861 --> 00:14:23.997 
你將收到那些閾值改變的通知

00:14:24.064 --> 00:14:28.902 
因爲規格類打包在對象中
UITraitCollection

00:14:28.969 --> 00:14:31.038 
視圖控制器可訪問這些對象

00:14:32.105 --> 00:14:33.240 
所以這就是佈局

00:14:33.507 --> 00:14:35.809 
我要傳授給你的下一個最優方案是

00:14:35.876 --> 00:14:37.678 
在類中使用屬性

00:14:37.744 --> 00:14:40.714 
作爲UI視圖標籤的替代

00:14:41.148 --> 00:14:45.152 
所以我的意思是
如果你正在使用帶有標籤的視圖

00:14:45.219 --> 00:14:47.921 
或設置UI視圖標籤的應用程序接口
且正在裝載代碼

00:14:47.988 --> 00:14:50.691 
我要鼓勵你拋棄這些

00:14:51.391 --> 00:14:53.393 
原因就是

00:14:55.262 --> 00:14:59.032 
謝謝
我真的很高興有人爲此而開心

00:15:02.202 --> 00:15:04.505 
所以我的意思是 原因很顯然

00:15:04.571 --> 00:15:08.542 
它只是一個整數
它與其他代碼有潛在的衝突

00:15:08.609 --> 00:15:10.244 
也許它是你所寫的其它代碼

00:15:10.310 --> 00:15:12.179 
也許它是你團隊中的新成員

00:15:12.246 --> 00:15:14.448 
他還不知道你認真管理的整數

00:15:14.882 --> 00:15:18.018 
也許它是你所使用的框架

00:15:18.085 --> 00:15:20.020 
你卻看不到

00:15:21.054 --> 00:15:22.689 
無論這些衝突何時發生

00:15:22.756 --> 00:15:24.825 
你都接收不到
編譯器發出的有關警告信息

00:15:25.058 --> 00:15:26.226 
編譯器無法推斷出

00:15:26.293 --> 00:15:27.594 
你的整數管理

00:15:28.629 --> 00:15:31.965 
如果你既沒有收到編譯器的警告信息

00:15:32.299 --> 00:15:35.035 
也沒有收到運行錯誤

00:15:35.102 --> 00:15:36.770 
無法說明
帶標籤視圖使用上的信息

00:15:36.837 --> 00:15:40.140 
你最多可以收到
由未被認出的選擇符導致的崩潰

00:15:40.407 --> 00:15:41.909 
你無法知道發生了什麼

00:15:42.809 --> 00:15:47.614 
作爲替代 聲明類屬性

00:15:47.881 --> 00:15:51.885 
這樣你就可以與之後需要使用
的那些視圖產生實質性的聯繫

00:15:52.553 --> 00:15:58.125 
舉一個簡單的代碼示例
假設我寫了一些代碼

00:15:58.192 --> 00:16:00.994 
來生成圖像視圖
然後以一千這個標籤跟蹤這段代碼

00:16:01.061 --> 00:16:02.863 
因爲我以我所有的聰明才智確信

00:16:02.930 --> 00:16:07.100 
別人絕不會用到一千這個標籤

00:16:08.802 --> 00:16:11.638 
但是這之後我看了我的演講
我說不不

00:16:12.105 --> 00:16:14.508 
讓我創建一個實際屬性

00:16:14.842 --> 00:16:16.476 
將它聲明爲UI圖像視圖

00:16:16.543 --> 00:16:19.179 
然後我保持一個指向這個視圖的引用

00:16:19.513 --> 00:16:22.482 
這個引用也有更好的類型信息

00:16:22.649 --> 00:16:25.886 
因爲只帶有標籤的視圖是類型UI視圖

00:16:26.353 --> 00:16:29.122 
由於使用定義屬性類型的UI圖像視圖

00:16:29.323 --> 00:16:31.558 
編譯器事實上可以推斷出我做了什麼

00:16:31.625 --> 00:16:33.527 
並且在出現錯誤時幫我解決問題

00:16:34.061 --> 00:16:35.829 
請注意

00:16:36.363 --> 00:16:39.266 
視圖和視圖控制器的最優方案是

00:16:39.333 --> 00:16:41.768 
時間設定具備決定性意義

00:16:43.036 --> 00:16:47.007 
也就是說
對於你們那些已經處於某種位置

00:16:47.107 --> 00:16:51.879 
可以做一些事情沿着系統動畫去做

00:16:52.379 --> 00:16:55.582 
或者你有些工作想要做

00:16:55.649 --> 00:16:58.185 
而動畫已經完成 所以你只能

00:16:58.252 --> 00:17:02.456 
乖乖地去猜到底那個動畫要花多長時間

00:17:02.523 --> 00:17:04.691 
也許實施起來
就像一個NSTimer定時器

00:17:05.025 --> 00:17:07.027 
老老實實地爲你守時

00:17:07.661 --> 00:17:09.496 
好吧 你並不想那樣做 因爲

00:17:09.563 --> 00:17:12.031 
那樣的話 App裏會產生不確定性

00:17:12.098 --> 00:17:14.134 
尤其是關於可能性

00:17:14.201 --> 00:17:17.037 
動畫的時間設置可能每一集都不同

00:17:17.570 --> 00:17:19.540 
你真的是不過時的反義詞

00:17:19.606 --> 00:17:21.108 
如果你真的在做這些事相反

00:17:21.575 --> 00:17:25.179 
利用UI視圖過渡協調器

00:17:25.479 --> 00:17:30.284 
在UI視圖控制器的API
去了解何爲時間設定

00:17:30.350 --> 00:17:31.785 
你所擁有的動畫有何時間設定

00:17:32.319 --> 00:17:33.453 
這能夠讓你

00:17:33.520 --> 00:17:35.255 
做你想要的任何動畫 隨便你想要的

00:17:35.322 --> 00:17:38.025 
視圖控制器過渡

00:17:39.293 --> 00:17:43.330 
你當然知道何時那種過渡會完成

00:17:44.131 --> 00:17:47.935 
其中內置支持可撤銷動畫

00:17:48.302 --> 00:17:49.803 
和交互動畫

00:17:50.070 --> 00:17:52.940 
如果你再想象導航輕掃手勢一下

00:17:53.373 --> 00:17:56.310 
用戶可以前後移動手掌來

00:17:56.376 --> 00:18:01.849 
改變速度、方向 甚至決定不要
彈出視圖控制器並全部取消

00:18:02.516 --> 00:18:06.253 
如果你使用過渡協調器 
那麼你準備好要處理所有這些

00:18:07.554 --> 00:18:09.723 
我們來談一談自動佈局的最優方案

00:18:10.991 --> 00:18:13.727 
自動佈局是一種工具
我敢肯定大家很多人都知道 也喜歡用

00:18:13.794 --> 00:18:17.064 
它是一種內置的設計上是

00:18:17.130 --> 00:18:20.300 
要幫助你適應

00:18:20.767 --> 00:18:23.770 
並以你的代碼實現不過時
我們打算現在要談一談這方面

00:18:23.837 --> 00:18:26.540 
不過時是一個目標
是自動佈局工具的目標之一

00:18:27.274 --> 00:18:29.209 
但首先 我要簡短說一下

00:18:29.276 --> 00:18:33.280 
有一些最優方案可以帶來高性能
給你的自動佈局工具帶來高性能

00:18:33.680 --> 00:18:37.184 
這就要有個開頭管理你自己的約束
從這裏開始

00:18:37.384 --> 00:18:39.152 
用最高效的方式去管理
效率越高越好

00:18:40.254 --> 00:18:45.659 
你做事的方式就是把所有約束想象出來
想象到你的視圖裏

00:18:45.993 --> 00:18:51.131 
然後識別這些約束
它們在視圖的整個生命時間都可能變化

00:18:52.032 --> 00:18:54.601 
當識別到發生什麼變化時有意義的就是

00:18:55.102 --> 00:18:59.039 
你就會能夠做出有目標的變化

00:19:00.174 --> 00:19:03.043 
而不是改變事物
不是改變不必改變的事物

00:19:03.110 --> 00:19:06.280 
因爲當你保持一些事情恆定不變時

00:19:06.680 --> 00:19:09.683 
你就讓自動佈局引擎來最優化這些事情

00:19:09.750 --> 00:19:12.719 
這些不會變化的事情

00:19:12.786 --> 00:19:16.557 
因而自動佈局工具不必進行若干計算
而你的app佈局也更快速

00:19:16.623 --> 00:19:18.659 
這一點尤其重要

00:19:18.725 --> 00:19:21.695 
如果你在卷軸期間重新佈局的話

00:19:21.762 --> 00:19:23.330 
或者其他有些事情用戶交互

00:19:24.665 --> 00:19:27.401 
部分用戶交互 確定無疑的最優方案

00:19:27.467 --> 00:19:29.703 
而這是最糟實踐而最優方案是

00:19:29.770 --> 00:19:31.371 
要避免最糟實踐

00:19:31.872 --> 00:19:34.308 
把所有約束從視圖中清除出去

00:19:35.209 --> 00:19:38.545 
這點不僅對於App執行自動佈局引擎

00:19:38.612 --> 00:19:40.547 
的性能表現不好

00:19:40.614 --> 00:19:42.516 
在做盡可能多工作時

00:19:43.050 --> 00:19:46.486 
它同時還是潛在的兼容性問題

00:19:46.553 --> 00:19:51.058 
因爲未來版本iOS可能有額外的約束

00:19:51.124 --> 00:19:53.527 
框架已經添加了這些額外的約束

00:19:53.594 --> 00:19:55.295 
你只要調用刪除所有約束 就可以刪除

00:19:55.796 --> 00:19:58.365 
你想要避免調用“刪除所有約束”

00:19:58.432 --> 00:20:00.200 
在視圖上儘量避免 越多越好

00:20:01.835 --> 00:20:05.472 
把這些捆綁在一起這種做法就是能夠

00:20:05.539 --> 00:20:07.474 
高效地管理約束

00:20:07.541 --> 00:20:10.043 
通過用同樣的策略明確地表達

00:20:10.110 --> 00:20:14.581 
我們剛剛談過通過替換視圖標籤

00:20:14.882 --> 00:20:18.585 
讓實際屬性指出這些視圖

00:20:18.652 --> 00:20:20.454 
或你可能需要的約束

00:20:20.521 --> 00:20:22.823 
在視圖的整個生命期進行改變

00:20:23.590 --> 00:20:26.360 
那麼讓我們看一下這個非常簡單的實例

00:20:26.693 --> 00:20:29.997 
是關於如何寫入更新視圖的約束碼

00:20:30.330 --> 00:20:32.699 
而且這使最簡單的事成爲可能

00:20:32.933 --> 00:20:35.836 
這是在說嘿 我需要更新我的約束

00:20:36.036 --> 00:20:37.471 
讓我只是將它們全部移除

00:20:37.738 --> 00:20:39.406 
然後我會重新計算 並把它們添加回去

00:20:40.841 --> 00:20:41.775 
我們並不想這麼做

00:20:41.842 --> 00:20:43.243 
這不是最佳實用方法

00:20:43.610 --> 00:20:47.915 
最佳實用方法是如果我們有一個約束

00:20:48.248 --> 00:20:51.351 
如它需要被更改的話 可以移除它

00:20:52.519 --> 00:20:56.089 
僅需重建那個約束 然後把它添加回去

00:20:56.790 --> 00:20:59.193 
自動佈局引擎
再次識別到無法更改的約束

00:20:59.293 --> 00:21:02.196 
而且它可爲我們優化

00:21:03.931 --> 00:21:07.401 
因此我爲您們設計了下一組最佳方法

00:21:07.467 --> 00:21:09.703 
關於約束是圍繞這一思想

00:21:09.770 --> 00:21:13.807 
就是當您描述約束時您有多具體

00:21:14.374 --> 00:21:16.710 
總之 您想要您的約束

00:21:16.777 --> 00:21:21.315 
儘可能準確描述您的佈局

00:21:21.648 --> 00:21:23.884 
也就是說
您要說出若要獲取您想要的佈局

00:21:23.951 --> 00:21:27.154 
需要做什麼
以及您不想要又該怎麼做

00:21:27.221 --> 00:21:29.022 
換句話說您說的要詳盡

00:21:30.023 --> 00:21:35.963 
而且關於這個特殊性問題

00:21:36.029 --> 00:21:40.200 
雙方也存在潛在問題
我將在此一一講解

00:21:40.267 --> 00:21:43.003 
第一個就是執行問題

00:21:43.437 --> 00:21:48.208 
因此第一個就是
添加雙重約束到您的視圖中

00:21:48.575 --> 00:21:52.579 
雙重視圖約束指的是當你刪除它們時

00:21:53.080 --> 00:21:55.048 
佈局將會完全相同

00:21:55.115 --> 00:21:58.252 
因爲它們已經隱含在那裏

00:21:58.952 --> 00:22:01.188 
而且當您使用它時
它就會引發佈局引擎

00:22:01.255 --> 00:22:03.323 
去完成更多的工作
因爲它正在爲

00:22:03.390 --> 00:22:05.225 
這些約束解決問題
因爲它們在那裏

00:22:05.292 --> 00:22:06.960 
但它不需要實際解決

00:22:08.128 --> 00:22:11.698 
可以在簡單的佈局中看到這一實例

00:22:12.299 --> 00:22:14.468 
我在超級視圖中獲取了一些視圖

00:22:15.269 --> 00:22:21.408 
首先我會通過做一個縱軸描述這個佈局

00:22:21.775 --> 00:22:26.146 
並且說 嘿
在我的頂視圖和底視圖之間有些邊界

00:22:26.480 --> 00:22:29.183 
我在對齊選項中賦值以指明

00:22:29.249 --> 00:22:31.919 
這兩個視圖的左側也是對齊的

00:22:32.719 --> 00:22:35.322 
然後我說
好的 讓我們進入橫向維度

00:22:35.689 --> 00:22:39.193 
我爲頂視圖提供了一些間距

00:22:39.526 --> 00:22:41.895 
因此現在我瞭解它的左邊界是什麼

00:22:42.362 --> 00:22:45.065 
然後我想 好的
我已經指定好這個底視圖

00:22:45.132 --> 00:22:48.101 
同時我也指定好底視圖的邊界

00:22:48.869 --> 00:22:52.005 
但是我剛纔在按鈕視圖的左邊界製造了

00:22:52.072 --> 00:22:55.642 
我並不需要的邊界

00:22:56.176 --> 00:22:58.846 
已知頂部視圖的邊界

00:22:59.379 --> 00:23:02.416 
我也知道 按鈕的左邊界

00:23:02.482 --> 00:23:04.885 
並且頂部視圖將對齊

00:23:05.485 --> 00:23:09.356 
如果我沒有指定按鈕視圖的左邊界

00:23:09.423 --> 00:23:14.094 
這個視圖層將準確的成爲相同的佈局

00:23:14.428 --> 00:23:17.064 
所以外部約束只會導致

00:23:17.130 --> 00:23:18.332 
引擎做不需要它做的事

00:23:19.333 --> 00:23:21.034 
解決了這個問題之後我們可以更快

00:23:22.603 --> 00:23:24.805 
下一個問題是

00:23:24.872 --> 00:23:27.241 
過度設定約束將導致

00:23:27.307 --> 00:23:30.744 
的實際不是性能問題而是適用性問題

00:23:30.811 --> 00:23:32.846 
這對應用是個潛在的隱患

00:23:33.280 --> 00:23:35.749 
在約束不夠靈活時就會發生適用性問題

00:23:36.416 --> 00:23:40.354 
如果我們考慮硬編碼值
我們知道我們不想這麼做

00:23:40.988 --> 00:23:42.389 
讓我們回到這個例子

00:23:42.456 --> 00:23:46.393 
回到視圖中的標籤

00:23:47.160 --> 00:23:51.365 
我們可以再一次描述它的約束條件爲

00:23:51.431 --> 00:23:55.903 
距離左邊有30點寬260點

00:23:56.336 --> 00:23:58.172 
但是這些硬編碼值

00:23:58.705 --> 00:24:02.409 
讓我們看起來死板和僵化

00:24:02.476 --> 00:24:04.545 
與作爲面向未來的先進工具

00:24:04.811 --> 00:24:07.214 
的自動佈局技術的整體思路相違背

00:24:08.182 --> 00:24:11.785 
我們真正想做的是用視圖所在

00:24:11.852 --> 00:24:13.687 
本地座標系中
的位置和大小定義約束條件

00:24:14.188 --> 00:24:18.792 
所以應該使用父視圖
在本地座標系的位置和大小

00:24:19.059 --> 00:24:22.596 
來定義視圖邊界的最小約束條件

00:24:24.398 --> 00:24:27.968 
所以來討論定義約束條件的另一面

00:24:28.168 --> 00:24:30.671 
設定不足的約束

00:24:30.737 --> 00:24:33.907 
你也不會想這麼做的
肯定想已經設定好了所有你需要的約束

00:24:34.608 --> 00:24:38.045 
考慮下 會發生什麼？

00:24:38.111 --> 00:24:41.582 
如果設定不足約束 我們會引入歧義

00:24:42.249 --> 00:24:46.053 
讓我們回到將要設定的約束

00:24:46.119 --> 00:24:49.890 
如果我設定這個標籤的左右邊界

00:24:50.390 --> 00:24:54.194 
然後再設定一個上邊界有些東西不見了

00:24:54.261 --> 00:24:55.963 
非常明顯

00:24:56.230 --> 00:24:58.632 
我們沒有設定底部邊界 原本應該設的

00:24:59.032 --> 00:25:03.036 
因此我們引入了歧義

00:25:04.104 --> 00:25:06.173 
這意味着我的視圖

00:25:06.240 --> 00:25:09.576 
在不同時間運行
程序時將以不同的方式出現

00:25:09.643 --> 00:25:11.411 
假設這是一個表單元

00:25:11.478 --> 00:25:13.247 
當我調用刷新數據時

00:25:13.313 --> 00:25:14.715 
它變了 我很迷惑

00:25:15.249 --> 00:25:17.584 
它可能隨IOS不同版本發生變化

00:25:17.651 --> 00:25:21.555 
或者因爲不同宇宙射線擊中手機設備

00:25:22.022 --> 00:25:22.923 
誰知道呢？

00:25:23.190 --> 00:25:25.492 
我們不想要未定義的行爲

00:25:25.826 --> 00:25:28.295 
我們不想要我們的視圖看起來這樣

00:25:28.862 --> 00:25:30.697 
我們想要它按照我們設定的高度

00:25:32.165 --> 00:25:34.735 
所以請確定你完全定義了你的約束條件

00:25:35.435 --> 00:25:37.504 
我想以練習的形式給你一個

00:25:37.738 --> 00:25:39.673 
調試自動佈局代碼的最優方案

00:25:40.807 --> 00:25:44.945 
你可以使用佈局歧義檢測的UI視圖

00:25:45.312 --> 00:25:47.514 
如果你想在調試時找出

00:25:47.581 --> 00:25:51.285 
視圖未能正確佈局的原因

00:25:51.752 --> 00:25:53.253 
調用佈局歧義檢測

00:25:53.687 --> 00:25:56.590 
它幫你找到視圖中存在的歧義

00:25:57.724 --> 00:26:00.894 
你還可以在窗口調用這個方法

00:26:01.495 --> 00:26:05.966 
它會告訴你視圖樹上
的任意視圖是否有歧義佈局

00:26:06.500 --> 00:26:07.701 
這非常方便

00:26:09.036 --> 00:26:11.805 
你可以調用自動佈局跟蹤的UI視圖

00:26:12.406 --> 00:26:16.410 
得到一張包含視圖樹所有約束的圖片

00:26:17.110 --> 00:26:19.880 
使用那些約束去找到歧義

00:26:21.715 --> 00:26:23.584 
真正有趣的最優方案是

00:26:23.951 --> 00:26:28.689 
用正確方式的去使用這些方法
把它們放在單元實驗中

00:26:29.823 --> 00:26:35.929 
你可以想象在你的應用中的每個視圖樹
每個基本的活動

00:26:36.797 --> 00:26:40.734 
都可以調用佈局歧義檢測窗口

00:26:41.468 --> 00:26:43.737 
如果它有佈局歧義

00:26:44.071 --> 00:26:47.140 
你可以調用UI視圖自動佈局

00:26:47.608 --> 00:26:51.578 
跟蹤找到存在歧義的約束條件

00:26:52.045 --> 00:26:54.181 
將它們打包到報告

00:26:54.314 --> 00:26:58.652 
這既能讓你知道這個實驗中

00:26:58.719 --> 00:27:01.088 
什麼時候存在歧義

00:27:01.321 --> 00:27:04.558 
也能爲後來學習並發現問題的人
提供調試信息

00:27:05.158 --> 00:27:07.794 
這就是自動佈局apps

00:27:07.861 --> 00:27:08.829 
最優方案

00:27:16.336 --> 00:27:17.171 
好的

00:27:17.237 --> 00:27:21.508 
我將轉到我們最後一個最優方案的話題

00:27:21.775 --> 00:27:23.577 
關於表視圖和聚合視圖

00:27:24.011 --> 00:27:29.516 
我知道這對幾乎所有IOS應用都重要

00:27:29.850 --> 00:27:31.852 
當然它對我也很重要

00:27:32.286 --> 00:27:36.089 
最優方案的第一步
是使用自適應大小單元格

00:27:36.156 --> 00:27:40.260 
當你需要單元格中的內容
可以變化的時候

00:27:40.327 --> 00:27:42.829 
或者需要一個隨內容變化大小的單元格

00:27:44.264 --> 00:27:49.269 
我相信你們大多數人在開發生涯中都

00:27:49.469 --> 00:27:50.871 
會遇到這樣的場景

00:27:51.138 --> 00:27:55.008 
在已有內容的基礎表視圖中

00:27:55.209 --> 00:27:56.577 
你突然意識到 哦...

00:27:57.177 --> 00:28:00.347 
根據不同的內容每一個單元格都需要
不同的高度

00:28:00.414 --> 00:28:03.016 
我不能讓每個單元格只有一個高度

00:28:04.084 --> 00:28:06.687 
iOS8中引入的自適應大小單元格

00:28:06.753 --> 00:28:10.290 
將會使這些轉換工作變得簡單

00:28:10.591 --> 00:28:14.228 
自適應大小單元格在表視圖中
可以根據內容變化高度

00:28:15.195 --> 00:28:18.131 
現在我將開始講解這個最優方案

00:28:18.365 --> 00:28:21.068 
告訴你如何在你的應用中使用它

00:28:21.802 --> 00:28:23.504 
它就像我們剛纔在

00:28:23.570 --> 00:28:25.439 
自動佈局中說到的那樣啓動

00:28:25.772 --> 00:28:27.741 
需要完全設定你的約束

00:28:28.809 --> 00:28:31.945 
如果你想使用所有我講過的技巧

00:28:32.446 --> 00:28:37.084 
考慮到自動佈局系統

00:28:37.451 --> 00:28:41.522 
將寬度作爲輸入

00:28:42.222 --> 00:28:44.725 
因爲表視圖是固定寬度

00:28:44.925 --> 00:28:46.527 
所以你的單元格將會是這個寬度

00:28:47.227 --> 00:28:50.797 
隨後自動佈局系統會輸出單元格高度值

00:28:51.532 --> 00:28:54.134 
如果未完全設定約束條件

00:28:54.201 --> 00:28:56.270 
這裏會存在歧義

00:28:56.336 --> 00:28:58.906 
就不會得到你想要的那個高度

00:29:01.008 --> 00:29:03.844 
如果我們使用表視圖單元格的簡單例子

00:29:04.111 --> 00:29:05.179 
它真的很簡單

00:29:05.646 --> 00:29:09.016 
我們只需要設定我們內容的邊界

00:29:09.082 --> 00:29:10.751 
在這個例子中只是個標籤

00:29:11.084 --> 00:29:12.853 
它具有固定的內容尺寸

00:29:12.920 --> 00:29:15.055 
所以當我們設定它的邊界時

00:29:15.255 --> 00:29:18.725 
完全定義了這個單元格的約束條件

00:29:18.792 --> 00:29:21.628 
我們將得到我們要的尺寸

00:29:23.330 --> 00:29:26.433 
你可能還有一些更復雜的單元格

00:29:26.500 --> 00:29:28.368 
我認爲這是一個簡單的例子

00:29:29.002 --> 00:29:33.273 
然而有時你會發現 嘿

00:29:33.540 --> 00:29:35.042 
我已經設定了我所有的約束條件

00:29:35.108 --> 00:29:37.344 
但是我沒有得到我想要的高度

00:29:38.212 --> 00:29:40.380 
這裏有個技巧

00:29:40.647 --> 00:29:43.450 
關於增加內容視圖的約束條件的技巧

00:29:43.750 --> 00:29:45.919 
這個約束條件用來設定內容視圖的高度

00:29:45.986 --> 00:29:47.654 
實際上你正在使用

00:29:47.921 --> 00:29:49.990 
內容視圖的高度約束條件

00:29:50.457 --> 00:29:52.693 
然後你就能以
內容的形式設定約束條件了

00:29:52.759 --> 00:29:56.129 
這裏我要說 嘿
內容視圖的高度應當等於

00:29:56.196 --> 00:29:59.633 
標籤高度加上我的頂和按鈕的邊界

00:30:00.367 --> 00:30:02.936 
在這裏 這是重複工作

00:30:03.003 --> 00:30:05.038 
我不需要這樣做

00:30:05.372 --> 00:30:07.040 
我會得到同樣的東西

00:30:07.441 --> 00:30:10.410 
但是如果你的應用中
你沒得到你想要的結果

00:30:11.111 --> 00:30:13.847 
並且你在視圖上加了一個高度約束

00:30:14.348 --> 00:30:18.085 
導致單元格高度變化

00:30:18.919 --> 00:30:20.921 
這表明你的約束條件

00:30:22.256 --> 00:30:26.827 
不符合你所需效果的設計邏輯

00:30:27.261 --> 00:30:30.497 
這有個偉大的工具
你可以用它來找到錯誤

00:30:31.465 --> 00:30:35.169 
現在 你可以考慮

00:30:35.235 --> 00:30:38.906 
如何讓單元格變化以動畫的方式呈現
你知道

00:30:40.174 --> 00:30:42.976 
使用自適應大小單元格和自動佈局

00:30:44.111 --> 00:30:48.982 
現在你可以想象你如果有一些單元格

00:30:49.049 --> 00:30:52.986 
需要根據內容變化
你可能採取非常原始的方法

00:30:53.420 --> 00:30:56.456 
更新你的模型然後調用刷新數據

00:30:57.724 --> 00:30:59.560 
如果你這樣做 單元格會變成這樣

00:30:59.626 --> 00:31:02.563 
它會出現在表格的新位置

00:31:02.863 --> 00:31:08.402 
確實達到了目的 但是這不符合

00:31:08.468 --> 00:31:09.536 
你想要的用戶體驗

00:31:09.603 --> 00:31:11.705 
它看上去不那麼精美和平滑

00:31:12.573 --> 00:31:16.877 
你想要的是
單元格高度的變化的動畫效果

00:31:17.211 --> 00:31:20.180 
單元格周圍的東西應該以動畫的方式

00:31:20.681 --> 00:31:23.350 
平滑的移動到它們的位置

00:31:23.417 --> 00:31:24.985 
必須讓用戶能理解發生了什麼

00:31:26.653 --> 00:31:28.655 
讓我們演示下如何做

00:31:29.323 --> 00:31:30.457 
謝天謝地 它非常簡單

00:31:31.491 --> 00:31:34.661 
任何時候你想要一個類變換

00:31:34.728 --> 00:31:36.997 
在表視圖中以動畫顯示

00:31:37.364 --> 00:31:43.470 
可用表視圖API來開始更新和更新塊

00:31:43.537 --> 00:31:47.074 
第一步是調用表視圖開始更新

00:31:47.407 --> 00:31:50.110 
不管你是否使用
自適應大小單元格都要做這一步

00:31:50.177 --> 00:31:53.313 
這是在表視圖中
實現類變換動畫效果的通用步驟

00:31:54.481 --> 00:31:56.116 
然後更新你的模型

00:31:56.850 --> 00:31:57.851 
很簡單

00:31:59.052 --> 00:32:02.856 
第三步
如果你在改變一個屏幕單元格的高度

00:32:03.357 --> 00:32:05.692 
你可以點擊這個單元格

00:32:05.759 --> 00:32:08.061 
觸發索引路徑行的表視圖單元格

00:32:08.595 --> 00:32:10.364 
然後改變單元格的內容

00:32:10.430 --> 00:32:12.366 
需要的話還可以改變約束條件

00:32:12.633 --> 00:32:13.800 
有些時候人們認爲需要

00:32:13.867 --> 00:32:16.403 
調用重新加載索引路徑行

00:32:16.470 --> 00:32:17.604 
不需要這樣做

00:32:17.671 --> 00:32:20.507 
它不會給你良好的體驗

00:32:20.974 --> 00:32:23.010 
實際上你只需要點擊單元格

00:32:23.076 --> 00:32:24.111 
並改變它的內容

00:32:24.811 --> 00:32:25.946 
做完這些後

00:32:26.580 --> 00:32:28.916 
點表視圖結束更新

00:32:29.516 --> 00:32:33.820 
表視圖此時重新計算所有行的類

00:32:34.354 --> 00:32:36.423 
包括調用所有的在屏幕上的行

00:32:36.490 --> 00:32:38.926 
以從自動佈局信息獲得它們高度

00:32:39.459 --> 00:32:42.429 
如你所見 所有的東西以動畫效果呈現

00:32:42.829 --> 00:32:45.933 
開始更新 結束更新是關鍵

00:32:48.168 --> 00:32:51.638 
最後一個我想分享給你的最優方案是

00:32:51.705 --> 00:32:56.910 
自定義聚合視圖佈局

00:32:56.977 --> 00:33:00.614 
自己失效 然後非常快的重新繪製

00:33:01.148 --> 00:33:03.116 
我知道很多人

00:33:03.183 --> 00:33:05.552 
會寫自定義聚合視圖佈局

00:33:05.853 --> 00:33:08.222 
在用戶滾動的時候 對視圖本身

00:33:08.288 --> 00:33:10.591 
做做這個 改改那個

00:33:10.691 --> 00:33:13.560 
它們很難跟上佈局的改變

00:33:14.161 --> 00:33:17.030 
恩 我將告訴你圖形應用如何

00:33:17.097 --> 00:33:21.101 
完成這個工作 然後你就能把這項技術

00:33:21.201 --> 00:33:24.004 
應用到你的自定義佈局中了

00:33:25.372 --> 00:33:28.909 
圖形佈局有這樣的頭部

00:33:28.976 --> 00:33:31.912 
爲聚合視圖的輔助視圖

00:33:32.513 --> 00:33:35.616 
當用戶滾屏 甚至單元格移動時

00:33:35.682 --> 00:33:39.953 
頭視圖留在屏幕原來的位置上

00:33:41.121 --> 00:33:44.124 
這是我所知道的很多人

00:33:44.191 --> 00:33:46.293 
在聚合視圖中完成上述工作的基本思路

00:33:46.760 --> 00:33:50.264 
圖形佈局可以

00:33:50.564 --> 00:33:54.635 
UI CollectionView
無效上下文實例做到這個

00:33:54.701 --> 00:33:58.572 
UI CollectionView
中有這個API

00:34:00.040 --> 00:34:02.809 
這個步驟非常簡單

00:34:03.310 --> 00:34:04.878 
第一步非常明顯

00:34:05.846 --> 00:34:08.715 
座標改變後圖片視圖佈局重新繪製

00:34:08.782 --> 00:34:10.817 
所以用戶滾屏時

00:34:11.552 --> 00:34:13.253 
圖形佈局重新繪製

00:34:13.620 --> 00:34:15.322 
就變得輕而易舉這是簡單的部分

00:34:15.389 --> 00:34:17.925 
問題是我們如何讓它變快

00:34:17.991 --> 00:34:24.063 
答案是圖形佈局建立目標視圖重繪過程

00:34:24.598 --> 00:34:28.235 
讓聚合視圖知道只有頭視圖

00:34:29.101 --> 00:34:32.539 
會進行重繪

00:34:32.840 --> 00:34:37.543 
而其它的單元格不會重繪

00:34:37.844 --> 00:34:41.681 
這讓聚合視圖能儘快的完成整個操作

00:34:42.081 --> 00:34:45.953 
它如此快 這個操作只在

00:34:46.119 --> 00:34:48.455 
幀速率很快的時候重複

00:34:48.522 --> 00:34:52.092 
儘管每一幀佈局都會重繪

00:34:52.525 --> 00:34:55.395 
所以如果你在使用自定義佈局時

00:34:55.728 --> 00:34:57.531 
有性能要求

00:34:58.398 --> 00:35:00.901 
你可以在佈局時使用這項技術

00:35:01.235 --> 00:35:02.503 
總的來說

00:35:02.569 --> 00:35:04.938 
UI CollectionView
無效上下文是

00:35:05.005 --> 00:35:08.075 
克服性能問題的關鍵

00:35:08.208 --> 00:35:10.177 
所以我建議你用用這個API

00:35:12.045 --> 00:35:18.385 
好了 我已經講了一整套最優方案

00:35:19.253 --> 00:35:23.590 
我們討論了性能以及
如何讓你的應用啓動時快速響應

00:35:23.657 --> 00:35:25.659 
在它的生命週期內如何

00:35:25.993 --> 00:35:28.529 
讓你的自動佈局儘可能的快

00:35:29.630 --> 00:35:32.900 
我們討論了用戶體驗是你的最大目標

00:35:32.966 --> 00:35:36.937 
跨越無數不同設備實現

00:35:37.004 --> 00:35:39.273 
表視圖的動畫效果

00:35:39.840 --> 00:35:45.345 
我還分享瞭如何編寫
面向未來版本

00:35:45.412 --> 00:35:49.049 
代碼的技巧

00:35:50.017 --> 00:35:53.487 
現在我建議你以這些話爲參考

00:35:53.754 --> 00:35:57.457 
你可以回頭看看這些視頻
在你構建你未來的應用時

00:35:57.524 --> 00:36:01.328 
這裏有非常多的最優方案
你可以用它們

00:36:01.395 --> 00:36:05.265 
作爲進入相關文檔的跳板

00:36:05.532 --> 00:36:08.202 
查找我提到的API的相關文檔

00:36:08.468 --> 00:36:13.540 
你將能將這些最優方案
部署到你未來的應用中

00:36:13.807 --> 00:36:16.243 
謝謝

00:36:16.677 --> 00:36:18.812 
很高興在WWDC與你們分享

00:36:18.879 --> 00:36:21.381 
希望今天下午你們能得到充分休息