Core Location中有什么新料
下午好 欢迎参加“Core Location中有什么新料”
我的名字是亚当·德里斯科尔我是Core Location
框架团队的一名工程师
今天我很高兴为你们呈现这次会议
这是因为现在事情越来越复杂了
正如你所知道的我们现在有了Apple Watch和iPhone
因此我们认为我们应该重点关注简化
我们怎样才能简化你们的任务
今天我们想给你们准备了一些好东西
你们中可能有人是第一次接触到Core Location这个框架
我想我要先来给你们一个概述看看我们做的事
看看我们的一系列API
用户也就是购买你们的apps的人了解
Core Location决定你们能否使用它的也正是用户
你不能冒险访问他们的位置
你需要请求权限 我们也有API可以让你请求权限
之后我们还有“生活必需品”也就是位置更新信息
你用来获取用户当前的位置的就是API的这一部分
自从iOS 8开始我们引入了室内获取地址的能力
这里的室内可以是像机场购物中心这样的大型场所
并且我们还有统称为监视APIs
这些APIs可以允许你指定一件你感兴趣的事件
这样当这个事件发生时即使你的应用程序没有处于
运行状态也可以运行起来以便获取相关的信息
第一个API是一个区域监视
这个API允许你指定一个地理区域或者指定一个
基于iBeacon的区域这样当用户进入或者离开
那个区域时你的应用程序就可以后台启动
我们还有访问监视这是一种互补技术
这个API可以允许你指定当用户到达或者离开某个位置时通知到你
而你无需提前知道这个位置是什么
它可以提醒多种类型的事项如果访问监视设为
日志类型的事项时那么当我靠近一个商店时就会提醒我买牛奶
我想知道我今天都去了哪些地方做了哪些事情
我们还有其他APIs、位置、地理编码
我今天就不展开讲了
我们也对许多这些区域API做了改进
不过我想专门提一提室内位置
室内位置更精确了
检测楼层的变化也更快了
最重要的是示例也被重写了
使用了MapKit因此就更简便了
如果你认为这个与你的用户有关系
那就去看看吧对你来说把它用起来应该是很容易的
我们会把会议的大部分时间用来谈论其中的两点
即授权以及位置更新
具体来说我们今天会分成四部分来讲
第一部分是后台位置
你可以用我们的API的这一部分来记录
用户到过的位置
你可能开发了一款跑步追踪app你的用户想要
得到一张他们的轨迹地图或者是一款导航app
你想通过开启方向给他们指路
针对其它的位置使用案例我们有了一些新的API
你只需要知道用户当前的位置即可
你不想有绘图能力但是却希望用他们的当前
位置信息告诉他们最近的商店在哪里
诸如此类的事情
然后我们要讲讲授权讲讲授权在OS 8上的变更
讲一讲现在有了AppleWatch它又该怎么用
最后我们会深入讲一讲针对Apple Watch的最佳实践的
具体细节希望如果你开始用的话能给你提供诸多帮助
好 背景位置更新
我们决定不要了
开个玩笑
在iOS 2或者3上幻灯片看起来是这样的
如果你是iOS 2或者3的用户那么你就记得当你在跑步时
如果你想获得一张轨迹地图你必须让手机在你的口袋内处于激活解锁状态
自从iOS 4开始借助于我们称之为
“后台方式”的操作方式我们对此做了很大的改进
你的应用程序默认仍然是仅在前台运行
不过现在你可以在Xcode中使用这个便利的功能标签
说你想在后台保持保持活跃状态
不被挂起以便于接受位置更新信息
然后它会在你的信息plist中设置一个数值键
静态用于整个app这个键就是UI后台方式
那么之后会发生什么呢？
我们稍后会来看一个视频
不过在那之前让我们看看...
让我来列出视频中需要留意的地方
它可以允许你...当用户使用你的应用程序时启动位置更新
然后假如说用户感到无聊了
他们又去查看了邮箱他们的音乐一个小的演示
也许他们会盯着主屏幕盯上一阵
但是在此期间你还是可以访问用户的位置
之后用户重新启动了你的app
你就可以停止会话停止访问他们的位置
这样就可以避免因为使用GPS而损耗他们的电量
视频来了
用户启动了我们的app
中间那里有一个按钮表明他们希望我们
开始记录位置那我们就开始了
看视力表注意看正在计算数字
他们去过哪里
用户把我们的app切换到了后台
你可以看到现在顶部那里就是我们称为蓝条的东西
蓝条表明我们的示例app现在仍然处于运行中
这样用户就可以通过点击这个蓝条返回app
用户刚刚点了蓝条
注意看视力表中的数字变大了
当然在视力表中还不算大
这就表明我们持续接收到了位置更新信息
这是统计了我们接收到的位置更新信息
我们持续在后台接收到了位置更新信息
用户要求我们停下来那我们就返回到起点
App开发者已经用这个打造了
很多很棒的体验
然后我们在想我们能否再做些什么来对它进行优化
这里是否还有优化的空间？
在简化这个主题下你可以看到
一旦用户在你的应用程序中选择了这项功能
那么它就有了一项责任因为如果你持续在后台运行
用户就可能不知道这个还在运行
那么如果出现一个bug或者在你的UI中发生一个
极端状况那么你就会在用户没有意识到的情况下用去大量的电量
我们认为这个风险很高我们想要降低风险
这样一个bug或者一个意料之外的状况的后果也可以降低
你现在需要立即做的一件事我们想要改进的一件事
就是当你的app进入或者退出前台的时候
你必须与你的app经历的转移
进行紧密的耦合
一旦你选择开始运行并且在后台使用用户的位置时
你必须告诉我们你不想去后台
也只有在这之后你才会进到后台中
然后就到了我们在视频这里看到的这个视图
你在你的app中可能已经看过这个视图了
我们对示例做了修改在委托回调中
停用了位置更新以便表明
它进到了后台中蓝条一闪而过然后消失了
这可能会让用户感到困惑
你可以注意到这里的统一特征是
你注册要求能够以一种连续的方式在后台校验
访问用户的位置但是这个却是以一种
全权委托的方式为你的整个app永久实现的。
实际上你也仅仅希望在特定时候这么做
仅仅当用户在后台积极使用你的app时这么做
自从iOS 9开始我们就有了一个新的API可以帮你进行表达
这个API叫做“允许后台位置更新”
这是一项你可以在你的位置管理器中设置的属性
如果你有多个位置管理器那么在适当的时候
你就得分别对它们进行设置
你可以设置不同的位置管理器为不同的值
设置好后起什么作用？
如果你把这个属性设置为“是”
那么你就选择了在你的信息plist中
你请求的那种行为
如果你说你想要继续在后台运行这种权限
你把这个设置为“是”然后启动了位置更新
那么你就会保持在后台运行并接受那些位置更新
而如果你把它设置为“否”你就不会在后台继续运行
好的 那么关键的问题来了默认值是什么？
设置时我们怎样才能知道？
默认值是“否”
我想再说一遍
这里的默认值是“否”
如果你的应用程序需要后台运行
以便记录位置轨迹或者以便进行导航
那么当你采用iOS 9时你就必须进行变更才行
你必须到app中看看用户是否同意你做这个
看看用户是否真的想让你在后台记录一个会话
然后在那里把这项属性设置为“是”
当用户停止后把它设置回“否”
一旦你设置好后你就无需担心出现
直接案例时如何从前台过度到后台
这样当你被切换到后台时你就无需急匆匆关掉
位置更新因为那时你已经配置成了
继续后台运行或者停止后台运行
好 因此如果你的app使用了后台位置更新
那么你就必须进行变更
兼容性怎么样呢？
App Store中的app会被中断么?
不会App Store中的app都不受新规定的约束
但是当你采用iOS 9 SDK时你还是需要尽快完成变更
如果你想支持那些不是最新最棒的iOS上面的用户又该怎么办？
他们可能仍然在运行iOS 8
对此你可以按标准方式处理
在你的app上设置一个最低部署目标然后运行时进行校验
对选择器做出响应，
看看你当前运行时遵循的位置管理器
是否有这项属性
在Objective-C中看起来是这个样子
Swift中对选择器做出响应
我们在Swift中有了一个新的高档属性
可以对此做出响应
如果运行时你的位置管理器懂得
与这项属性相关的知识你可以把它设置为“是”
否则你就可以假定它已经设置成了“是”
你无需再设置它了
坏消息是这也意味着你无法把它设置为“否”
以便获取额外的保护
好 再简单讲讲侧边栏因为我知道你们中的很多人
都对这种带有听觉提示的后台位置更新感兴趣
当用户把他们的手机放在 臂环上或者放置在他们的仪表板上时
，这或许是与他们进行沟通的首选方式
自从 iOS 9开始core audio团队就引入了这个新的
长文件名的选项
它的作用就是你可以使用这个选项来表明
你即将进行语音输出
这样系统就可以把你和用户可能有的其它输出混合起来
这样不会把你混淆起来但是可以把你和音乐混合起来
请去看看“Core Audio中有什么新料”
就是昨天举行的如果适合你的话请去看看
后台位置
如果你不需要持续访问用户的位置时
那么，又该怎么办呢？
你不是想为他们绘制一幅地图
你只是想要告诉他们他们当前所处的位置
自从iOS 9开始我们就为此引入了一项新的方法
叫做“请求位置”
从根本上说它就是把你过去为了实现
这个目标需要完成的过程给自动化了
如果你接触过Core Location
那么你可能已经知道了规矩
你开始更新位置了
你看到那些更新信息进到你的委托中来了
你可以注意到这些信息一开始进来的很快
但是精度却不是最高
那么你就需要密切关注精确度等级了
弄明确什么时候精度足够了什么时候没有获取更高的
精度的空间了在继续等待和获得收敛精度
并使用那个精度的位置之间进行正确的权衡获得了位置后
不要忘记停掉位置更新
我们会自动替你停掉位置更新
当你调用请求位置时
我们会开始自动获取位置更新
但是我们不会把它们给到你的委托回调中
我们会根据你要求的精度在内部取得它们的阈值
然后我们会用你需要的位置信息回调一次你的委托
它会使用你的逻辑确定最佳位置是什么
在那个时候我们会自动为你停掉
位置更新这样你就没用忘掉停掉它
或者在那里出现bug的风险
好的 那么...
我对它的工作原理对如何解释我们在幕后
所做的事有了一个较为直观的了解
你不能通过使用这个API来生成它
别忘了我们仅仅给了你一次委托回调
来看看它是什么样的
那个响铃表示的是你设置的期望的精确度
你可以把它当成一个直径来看
你想要的固定精度应该比这个更严格
当更新信息进来时我们要在地图顶部这里用曲线图来表示
现在你可以看到某个位置的中心是用一个
看起来像是地图的黑色圆圈来表示
精确度等级是用一个大直径半透明的圆
来表示我们马上就可以看到
注意看随时间而发生的变化
第一个位置很快进来了但是精确度不敢恭维
随时间推移越来越精确了
当精确度等级足够高时我们就会接受这个精确度
给到你的委托回调的就是这个位置
好 我之前已经提到过这个是可以配置的
可以配置你期望的精确度
那么该怎么设置呢？
好消息是我们已经在位置管理器上有了一项叫做
“期望精确度”的属性
你可能已经熟悉了这项属性
你可以用它来控制开始更新位置时
你期望的精确度是什么类型的
它也同样适用于请求位置
让我们略微调低下
把它缩小精确度更高
现在可能又太高了
我们重新运行下模拟器看看会发生什么
第一个位置我们可以看到继续在收敛
有时候你的收敛会出现回归
不过整体趋势是收窄直到你达到某种平衡点
在这一点注意看我们尚未真正满足
精度标准
我们的精度没法再继续提高了
那么此时我们就会把这个返回你的委托回调中
这就意味着当你在你的请求位置中设置了一个期望的精确度时
你得到的位置的精确度可能会更高
对于精确度来说是一个更小的值
或者视我们获取的方式不同精确度也可能更低
你可能运气好遇到了第一种情况
也可能出现了第二种情况遇到了具有挑战性的情况
它们是在这个委托回调上发送给你的
位置管理器的位置管理器会对位置进行更新
记住最后一个参数是一个阵列
我们只会给你一个位置
因此它就是阵列中的零元素
另一方面如果用户做了任何他们想做的事
如果你请求位置的环境
是我们没法建立用户位置的环境
可能是在煤矿底部我们就会在位置管理器上
回调失败错误
因此我们向你保证
只要你不中断请求位置你一定会得到
这两种回调中的一种
这样如果你愿意的话你就可以断开
某些应用程序逻辑
你从错误回调中得到的错误是“KCL错误位置未知”
请求位置时还有两件事要记住
第一件事是开始更新位置是和它互相排斥的
因为我们使用的是相同的委托回调
如果你已经有了一个开始更新会话已经开始了
并且没有停掉那么请求位置就会被忽略掉
另一方面如果你有一个活跃的请求位置
但是我们仍在收敛我们尚未为你选定一个位置
而你又调用了开始更新那么它就会接管过去
请求就会被取消
你也就会开始向委托回调发送定期更新
互相排斥 你一次只能有一个
开始有效地更新位置享有优先权
此外就是你可以使用停止更新位置
来取消一个请求
如果用户从你之前已经请求了他们的位置的
地方开始导航我们希望你停止更新位置
你对它们不再感兴趣了我们也可以省点电
很好 我们今天为你们准备的就是这两个APIs
这就是我们首先要讲的两点
那么我们现在再来谈论一个
你们都非常感兴趣的话题
也就是你们到这里要看的
就是Apple Watch
关于Apple Watch要知道的第一件事就真的离不开
Apple Watch和iPhone
这两种设备它们是一对的
它们彼此之间有直接的关系
我们想让它们密切配合
以便获得尽可能好的用户体验
还有一件事在某种程度上反映了这种情况就是你把你的apps交付给
你的用户的方式
现在你可以编写watchOSapps了 但是用户并不是通过一个
watchOS App Store来得到它们的用户是通过现有的App Store
在他们的iPhone上得到一个包
当他们这样做的时候如果他们配置系统来这么做
或者他们选择这么做iOS就会把那个元件
送到Apple Watch上
你从中可以学到的就是你的watchOS元件
和你的iPhone元件之间同样也有紧密的关系
对于Core Location来说它们就是一个相同的授权身份
因此如果你有了授权无论是什么类型的授权
无论你处于什么样的状态它都适用于两者
好 这是它的一个子话题
第一个授权有一些难题
我们会遇上的
第二个是协作
既然我们有了两种设备你的app分成了两块
那么我们怎样让它们一起工作呢？这里有一些最佳实践可以降低复杂性
好的 我们来快速小结下确保我们在授权方面的了解是一致的
用户知道他们掌控着一切
因此你需要请求访问用户位置的权限
要么是通过使用中授权请求
要么是通过始终授权请求
“使用中”和“始终”
这些都是iOS 8上的新名词
它们是什么意思呢？
当你使用这些不同类型的授权时
你使用位置的能力会发生怎样的改变呢？
希望这个表格可以帮助回答那个问题
在iOS上我们会考虑哪个app请求了使用中授权
并且被授予了权限哪个app请求了
始终授权并且被授予了权限
先讲一下当你在测试上签名后得到的三点东西
如果你有这些中的某种授权
并且用户点击了你的app
那么你能访问他们的位置吗？
答案是“能”
毫无疑问你已经知道这个了
那么我们来个稍微复杂点的例子
这个并不适用于需要“始终”授权的apps
因此此类apps中没有事务
用户也没有预期
如果你请求“始终”授权
你基本上就是在请求全权委托
当你访问他们的位置时用户并不期待知道这一点
我们不会给用户提示线索
好的 在这个例子中我就是间歇地在后台中调用了
此时你就是通过后台来访问用户的位置的
不过这与前台启动或者与用例中已知的其它情况无关
这是一个后台app刷新启动
或者一个区域监视启动
在这个例子中要访问用户的位置
你就需要“始终”授权
这是因为用户并不知道
如果期待用户在“使用中”考虑你时
他们就不能直观地理解当前的情况
因此如果是“使用中”授权你就无法访问Swift
好的  简单再现了下监视API就是为了我们看到的这个
有个事实鲜为人知即在两个例子中
你都可以访问监控程序API区域监视
在使用UI本地通知时如果你是“始终”授权
或者“使用中”授权那么你就可以访问它
这里的通知包括一个触发事件CL区域
无论你何时进入或者退出那个区域
用户都会得到通知他们就可以决定是否让你通过
用户的消息很灵通
他们可以毫无保留地知道当前的情况
那么对于watchOS来说又会发生什么改变呢？
记住我们谈论的仅仅是你的app的watchOS元件
而不是iPhone app和Watch app的复合体
那么在Apple Watch上你能做什么？
当用户在你的Watch app上翻看时你可以访问他们的位置吗？
可以 但是还是需要延伸到后台
我们仅在watchOS上提供这个请求位置API
你可以访问用户的单一位置
但是你不能启动一个后台追踪会话
你也不能在前台进行追踪会话
为什么？
Apple Watch是专门围绕快速浏览而优化的
我们并不希望当用户在街区散步时
坐到那里举着他们的胳膊盯着看很长时间让他们疲惫不堪
在Apple Watch上使用请求位置API再合适不过了
这并不意味着你不能通过Apple Watch
启动一个后台会话而是指用户不能仅仅
通过与Apple Watch的交互就可以记录他们的跑步轨迹
我们还需要iPhone的配合我们来谈谈到底该怎样做
后台间发
你的watch app可以在后台运行的情况并不多
如果你发现你是在后台运行
那么只有你获得了“始终”授权你才访问用户的位置
watchOS最常见的情况最常用的表最相关的行中都没有
监控程序API不能用
你无法...我们无法在Apple Watch中
后台启动你的app
不然要这些APIs就没有意义了
好 我多次提到了“使用中”这个概念
我们来深挖下看看它具体指什么
如果是在前台那么你的app就被认为是在“使用中”
对于iPhone和Apple Watch来说都是如此
如果用户是正在活跃地翻看它
不过因为这种情况不多不需要持续更新
没有后台追踪Apple Watch只在这种情况下才被认为是“使用中”
但是在iPhone上如果你有蓝条那么你也可以被认为是“使用中”
蓝条意味着你启动了一个会话并且会话仍在继续
那么这里统一的特征是什么？
我们怎样才能扩展到Apple Watch中？
这两者都代表不同类型的你对用户可见
是的 更具体地说就是用户意识到了你在那里处于运行中
正在代表他们做一些事
如果用户仅仅使用了Apple Watch
Apple Watch就会给iPhone发一条消息
让后者代替它做一些事此时
即使iPhone位于用户的口袋内用户没有使用iPhone
使用状态也会传送到iPhone app上
他们使用的是两者的聚集体整个复合体
授权是在复合层面进行处理的
你需要使用一个API发送消息从而实现这一点
关于这个API我们稍后再讲
当你在iPhone上处理来自Apple Watch的工作时
你就会认为是在“使用中”
那么首先你是怎样得到授权的呢？
授权是需求你请求的
我之前提到的两个API请求“使用中”授权
或者请求“始终”授权
你可以通过iPhone来实现么？通过Apple Watch来实现么？
还是两者都不行呢？
这些都很无趣
那么这个在iPhone上看起来是什么样的呢？
用户会启动你的app
然后他们会做一些事表明
你需要访问他们的位置
然后你会意识到你还没有获得授权
你会调用请求“使用中”授权
你可以在对话框的顶部看到
发送给用户的请求
下面是你的使用描述键
你可以在你的apps信息plist中对此进行设置
解释一下你使用用户位置的目的
我们希望你能认真解释一下
这样用户可以理解他们为什么需要授权你们这项权限
用户可以理解你的设计折衷
在这个例子中你可以看到
这里的目的是为了演示
这个理由就很充分
此时就让我们允许授权
你可以立即看到位置更新启动了
好 停止后让我们把这个发送到后台
总结下我们看到了什么
当你通过iPhone请求位置授权时
iPhone会显示一个提示这个提示你们都已经习惯了
不过要注意下AppleWatch却什么也没显示
它在那里闲着没事
这是因为当用户使用他们的手机时
他们不太可能同时使用他们的Watch
如果他们确实是在使用Watch想看看时间
或者看看那里的那个app我们不想阻止它
那么那时又该怎么做？
你可以通过Apple Watch请求位置授权吗？
是的 你也可以这么做
它的行为略有不同因此你只有在特定的
环境中才这么做在其它环境中则不然
我们来看看这么做会发生什么
用户启动了你的app
然后他们导航到了你需要位置授权
才能满足用户的要求的地方
假设我们没有收到过授权这是一次新的启动
你可以请求“使用中”授权
iPhone和AppleWatch上出现了一个提示
Apple Watch出现了一个告警
Apple Watch上的告警说到“看看你的iPhone
你需要在那里处理一条提示”
上面也有一个关闭按钮
用户可以点它关闭告警
它不是模态的
当你有一个未处理的请求时你应该期待看到用户
正在和app互动
这对iOS来说是陌生的
这并不算是对提示问题做出了回答
用户并没有放弃他们在这里做出决定的能力
他们只是说“别挡路”
还是为了演示起见用户来到他们的手机上授权给了我们
然后它很快就重置了
看起来并没有重置不过如果你快速看一下我们得到了一个位置
你可以反复运行直到你得到一个位置
那么我们都看到了什么？
什么情况呢？
Apple Watch在AppleWatch上启动了一个请求
Apple Watch显示了一条报警这样用户就知道发生了什么
用户就理解了这个工作流程需要被中断
无论他们想继续什么他们都需要先答复这个授权
同你已经习惯了的一样iPhone会显示一条提示
重要的是用户需要在iPhone上答复这条提示
好的
这个看起来有点不便那么我们为什么这么做呢？
两条充分的理由
第一条我们真的需要你在那个
用途描述键中认真解释下你的用途
如果你解释过了那就意味着用户需要在Apple Watch滚动查看
这个用户体验可不好
我们宁愿把这条提示的大型屏幕真实状况显示在iPhone
我们想要让用户控制授权的用户体验很棒
现在iPhone就是总体控制
位置授权以及隐私授权的根目录
我们想把所有的交互都集中到iPhone上
这样用户就不会感到意外
如果用户愿意的话他们之后就可以到设置中
隐私中位置服务中对设置机进行变更
好的 之前我提到过请求位置就是我们现在
在watchOS上提供的直接通过watchOS读取用户的交互的API
那么你可以期待什么类型的精确度呢？
如果你在Apple Watch上发出了请求
那么视你手边是否有iPhone
如果你有那么你可以得到一切信息
甚至包括精确到米的室内位置
另一方面如果你没有那么你可以据此制作原型
理解用户的预期就像假如你指明了
一个请求的位置一样
请求期望的KCL一百米位置精确度
这个位置精确度不是最佳的但是要记住
它的精确度往往要大于一百米
事实上如果环境理想的话你甚至可以用它来绘制跑步轨迹
现在没有更新所以不要试
这里还有一件事要知道即“最佳努力”
因为Apple Watch的网络连接状况不是很好
它可以处于假如说一个异常位置
用户对它的期望不高
甚至无法在用户的环境中确定用户的位置
没问题 这是最佳努力的免责声明
不过还是很努力了
当我们手边有iPhone时我们就可以加倍努力
使用iPhone来更多地了解环境
缓存一段较长的距离
比如说用户跑步那么除非
他们跑的步很远否则就没问题
不过当你试图为你的用户确定用途时
要把这点考虑进去
无论期望用户是否随身携带iPhone
如果用户是在他们的家工作场所或者某个他们
熟悉的场所附近使用你的app
那么大概他们就不需要携带
另一方面如果你期待用户在旅行中使用你的app
或者任何用户关闭他们的流量套餐 避免收到
天价话费账单时使用你的app
你都需要鼓励用户随时携带iPhone
哪怕他们关掉了流量
让我们假设我们手边有一台iPhone
如果你需要持续的位置更新
这在后台中很常见或者你需要区域监视
或者为了任何你能在iOS上用 但是却不能
在watchOS上用的事情你就需要你的iPhone进行协作来实现了
那么我们该怎么做呢？
有一个很棒的会议实际上就是在今天的
这场会议之前在这里举行的就是午饭之前举行的
不幸的是它已经结束了
不过你可以去苹果全球开发者大会app上面看视频
如果你之前参加了 很好
那么这就有点像是一个概述了
这是一个框架的一部分与“位置”有很大的关系
首先是WC会话
这个类代表了Apple Watch和iPhone
之间的连接
上面有两个方法与我们的关系很大
第一个是SendMessage回复处理程序出错处理程序
第二个是“更新应用上下文”
SendMessage回复处理程序出错处理程序是双向的
你可以从任意一方发送
“更新应用上下文”则必须通过iPhone启动
我们来看看它们在实际上是如何为我们工作的
我们首先要使用SendMessage回复处理程序出错处理程序
来从Watch app向我们的iPhone app
进行通讯
用户导航到了app中我们需要另一端
提供帮助的地方
他们要求我们启动起来
我们把那个消息发送过去你可以看到app启动了
蓝条也出现在了视频中
表明它可以进行持续的后台位置会话了
它可以把那个信息发送回去了
你就可以看到更新显示到了
watch显示器上如果不是太小的话
我们把它停下来把东西都收起来
可以了吧？然后我们就可以回头看看那里发生了什么
关键一点如果你给iPhoneapp发送了一条消息
而app当时不是处于运行状态那么如有必要的话
它就可以通过Apple Watch到iPhone的SendMessage启动起来
因此你就无需担心让用户启动app
他们可以把手机放到他们的口袋中
一切事情都会自动搞定
注意“使用中”状态传送出去了
我之前提到过这点你刚才看到它起作用了
因为用户正在使用Watch正在使用你的app
这就意味着它就有权在
iPhone上启动一个后台位置追踪持续会话
这就意味着要考虑到这一点
允许位置更新标记属性
如果你想要启动一个持续后台位置会话
那就把它设为“是”如果不想
则把它设为“否”
当用户掏出他们的手机并且在他们使用他们的
watch时偶然看到手机的话他们就不会看到那个神秘的
蓝条进进出出
换个方向会怎样呢？
也就是从iPhone到Apple Watch
我们还是可以使用SendMessage回复处理程序出错处理程序
因为它是一个双向的API
当我们这样做的时候你可以看到我们出了问题
我们的消息没有发送出去
实际上 在这个例子中发生的就是
因为Watch app尚未运行我们每次这样做的时候
都要在我们的委托上
调用出错处理程序
SendMessage回复处理程序出错处理程序是在app到手机
这种情况下启动的而不是在手机到watch
这种情况下启动的
也许我们应该看看我之前提到的其他API
“更新应用上下文”
这个就是手机到watch
我们可以使用这个API
当我们这样做的时候就发生了一些不同的事情
我们的Apple Watchapp仍然没有运行
但是我们发送的消息挂出了
尤其是最后一条消息挂出了
你不想使用这种方法
来发送三角点更新但是你想要
发送状态更新整个上下文更新
当你这么做的时候系统会为你保持它
直到用户进行更新启动了你的app
好的你的app就运行了并且得到了
一直期待的更新
你可以看到如果你自己看它已经知道启动了
你可以稍后通过你的phone app发送持续
定期更新更新UI
初始状态已经就位了
更新应用上下文同样也适合
用来进行后续通信
好的 就整条从iPhone到Apple Watch的路径来说
有一件事要提一提看看我们引入iOS 6上面的
Core Location的这个API叫做
“推迟位置更新直到行程超时”
这个API就是系统的某种天然补码
因为当用户不看Apple Watch时
你就无需让它进行实时更新
你只要让它进行某种程度的更新即可
实现这一点的最佳方式是对更新进行批量处理
偶然发送一次即可
这样你就无需让用户的蓝牙广播时刻运行
我们也可以省点电
对于iOS来说你可以在手机上把这个API
用于Core Location以便表明
当前你运行在这样一种延迟容忍模式
除非用户经过了一段特定的距离或者经过了一段
特定的时间否则你都无需被唤醒
也许他们走了一英里 这是他们的步幅
如果按照距离计算你超时了
已经过去了五分钟
或者你想要给你的AppleWatch发送一个更新
好的 就是这个
我们已经允许了后台位置更新这是一项新的属性
你需要对此采取行动但是它可以让你免去
紧耦合和高风险的麻烦
之后我们得到了请求位置
这是一个新的方法位于C位置管理器上
它可以允许你删去一些样本
你们可能都用样本并且在你仅需要一个位置时让你获取到
同时使用这两种设备的主题就是协作
好消息是我很高兴告诉大家
我们有了一个示例叫做potluck
其中演示了我们今天讲的所有的东西
实际上那个app就是我们用来给这些视频做演示的
你可以自己安装然后运行它
希望如果你正在编写的app不工作了
potluck会帮到你你可以找到问题
弄清楚是哪里出了错
这里有很多信息
我相信你们可以很快记一下
首先是当然也可能是最重要的看看potluck
你可以通过这个链接看到示例代码
向下滚动直到你到达P节那就是potluck
有一些会议我想它们都与你们密切相关
这些会议都已经结束了不过它们的视频都在网上
待会儿你可以去看看
尤其是从顶端介绍WatchKIt 2.0
以及介绍 Watch Connectivity
我最后提到的API就是它
没错。
我希望你们都去看看
我迫不及待想看看你们可以用OS 9 watchOS 2
以及Core Location能打造出什么东西继续加油