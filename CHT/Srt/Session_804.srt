00:00:28.495 --> 00:00:29.329 
嗨 大家好

00:00:29.997 --> 00:00:31.665 
我叫
安東尼奧安東尼奧·卡瑞多尼

00:00:31.865 --> 00:00:35.402 
我是San Francisco字體
設計小組的一名成員

00:00:35.502 --> 00:00:37.971 
很榮幸在此爲
大家介紹這種字體

00:00:39.039 --> 00:00:42.543 
在今天的介紹中我們將會瞭解到
San Francisco字體

00:00:43.744 --> 00:00:46.380 
它們的設計過程及這些字體對我們
的平臺具有哪些意義

00:00:47.047 --> 00:00:48.916 
我們將會看到若干新功能

00:00:49.183 --> 00:00:52.152 
並學習如何利用這些功能讓你
所設計的app應用變得更出色

00:00:52.386 --> 00:00:54.688 
這種變化將體現在
代碼和設計兩個層面上

00:00:56.056 --> 00:00:59.960 
最後我們會講到在app應用中

00:01:00.494 --> 00:01:04.697 
加入這些新字體時
可能會遇到的 API 隱患

00:01:05.799 --> 00:01:06.834 
現在開始進入正題

00:01:09.369 --> 00:01:10.504 
文字隨處可見

00:01:12.806 --> 00:01:17.311 
而文字存在的前提則是字體

00:01:19.346 --> 00:01:20.981 
其實字體本身也具有表現力

00:01:23.517 --> 00:01:29.356 
好字體能讓你的app應用
內容和用戶界面更加美觀

00:01:29.823 --> 00:01:31.358 
它們看起來會更順眼

00:01:34.228 --> 00:01:36.597 
你無時無刻不在閱讀字體

00:01:37.464 --> 00:01:41.502 
在不同的屏幕上
在不同的設備上

00:01:42.503 --> 00:01:43.804 
閱讀不同磅值的字體

00:01:44.538 --> 00:01:46.707 
另外你在閱讀時的視覺環境也不盡相同

00:01:46.773 --> 00:01:49.676 
有時是明亮環境
有時是遠距離環境

00:01:50.010 --> 00:01:51.912 
還有各種屏幕尺寸和分辨率

00:01:52.613 --> 00:01:58.585 
因此我們有必要改善平臺上的字體樣式

00:01:59.152 --> 00:02:03.390 
於是全新字體
San Francisco便應運而生了

00:02:05.392 --> 00:02:11.999 
San Francisco是加州Apple
公司設計的一款全新字體樣式

00:02:13.367 --> 00:02:17.104 
外觀風格簡單而優美

00:02:18.539 --> 00:02:23.477 
San Francisco以其連續
流暢的字形表現力和易讀性

00:02:24.077 --> 00:02:25.846 
實現了整個平臺的高度統一

00:02:26.747 --> 00:02:28.615 
這是它的外觀

00:02:30.284 --> 00:02:33.787 
San Francisco
在字體樣式中屬於grotesque

00:02:33.854 --> 00:02:35.956 
Grotesque也稱爲
sans serif

00:02:37.224 --> 00:02:39.626 
請看字體分類圖

00:02:40.427 --> 00:02:43.063 
San Francisco設計
包含兩個子類別

00:02:44.331 --> 00:02:47.367 
其中SF用於iOS和OS X

00:02:47.835 --> 00:02:49.770 
SF Compact
用於蘋果的手錶系統

00:02:51.371 --> 00:02:56.443 
這兩個類別又各自包含兩種字體
“文字”類和“顯示”類

00:02:56.510 --> 00:02:57.978 
兩者都屬於視覺尺寸

00:02:58.045 --> 00:02:59.813 
稍後我會具體介紹

00:03:00.881 --> 00:03:04.251 
其中文字類字體共有6種字重

00:03:04.718 --> 00:03:07.588 
顯示類字體共有9種字重

00:03:08.422 --> 00:03:12.593 
剛纔我說過
SF用於iOS和OS X

00:03:13.327 --> 00:03:15.963 
而SF Compact是
用在蘋果的手錶系統

00:03:18.031 --> 00:03:20.200 
現在我們瞭解一下兩者的不同之處

00:03:22.102 --> 00:03:26.406 
SF和SF Compact
在設計上採用了孿生理念

00:03:26.507 --> 00:03:28.141 
也就是說它們相似而不相同

00:03:28.809 --> 00:03:32.613 
二者的主要區別在於
對圓形部分的處理方式

00:03:34.548 --> 00:03:38.819 
SF字體是完全圓滑的
SF Compact則略帶扁平效果

00:03:39.586 --> 00:03:41.555 
這樣的設計能達到雙重目的

00:03:42.022 --> 00:03:46.593 
前者實現了風格化
而更重要的是後者具備了功能性

00:03:46.994 --> 00:03:52.499 
這些扁平的側面提供了更大的字母間距
在文字較小時更容易閱讀

00:03:53.300 --> 00:04:00.174 
當這個看似不起眼的功能
在文字中一遍又一遍地重複時

00:04:00.407 --> 00:04:02.042 
就能帶來明顯的效果

00:04:03.777 --> 00:04:06.380 
現在我們來看比例問題

00:04:06.446 --> 00:04:09.183 
SF和SF Compact
的比例區別並不明顯

00:04:09.616 --> 00:04:11.285 
所以我就以SF爲例解釋一下

00:04:12.452 --> 00:04:16.322 
我會提到一些字體方面的專業的詞彙
大家可能對這些詞彙已經很熟悉了

00:04:17.257 --> 00:04:21.528 
拉丁文的設計以基準線作爲標準

00:04:22.996 --> 00:04:26.934 
小寫字母的對齊
標準叫做x height

00:04:27.000 --> 00:04:28.802 
即小寫x的高度

00:04:29.703 --> 00:04:31.672 
大寫字母以大寫X作爲對齊標準

00:04:33.140 --> 00:04:39.680 
此外還有一個概念叫“下伸部分”
它是基準線以下小寫字母的對齊位置

00:04:42.316 --> 00:04:44.985 
在比例問題上

00:04:45.252 --> 00:04:51.458 
SF字族可以兼容我們之前
發佈的所有UI字體量度

00:04:51.792 --> 00:04:55.796 
因此你的app應用不會出現
明顯的垂直迴流問題

00:04:55.863 --> 00:04:58.365 
實際上垂直迴流問題根本不會出現

00:04:59.700 --> 00:05:04.271 
在這些所兼容的垂直量度中
我們進行了比例上的細微改動

00:05:04.738 --> 00:05:08.141 
比方說我們把大寫字母變得短了一些

00:05:08.775 --> 00:05:12.045 
這樣做是爲了
改善大小寫混合設置的顯示效果

00:05:13.714 --> 00:05:17.351 
與此同時我們還把
x height的高度增加了一些

00:05:17.718 --> 00:05:20.187 
從而使小寫字母和大寫字母更接近

00:05:20.921 --> 00:05:22.723 
這樣不但大小寫混合設置的效果更好

00:05:22.823 --> 00:05:24.525 
還能讓小寫字母看起來更大一些

00:05:24.591 --> 00:05:28.562 
這就是大家平時看到的
更加清晰易讀的效果

00:05:29.563 --> 00:05:32.065 
最後一點
數字是與大寫字母對齊的

00:05:36.803 --> 00:05:41.508 
SF屬於一種泛歐洲字體
它包含了拉丁文

00:05:41.975 --> 00:05:47.347 
而拉丁文又包含着
波蘭語 冰島語 匈牙利文語

00:05:47.681 --> 00:05:50.951 
甚至像越南語那樣
需要疊加音的語言

00:05:51.718 --> 00:05:57.524 
另外它還包含俄語裏所使用的
西里爾文以及希臘文

00:06:01.094 --> 00:06:02.596 
這就是San Francisco

00:06:03.063 --> 00:06:07.201 
這就是我們在加州Apple
公司設計的一款全新字體

00:06:10.204 --> 00:06:13.240 
iOS和OS X採用的字體類別
叫做 SF

00:06:14.274 --> 00:06:16.577 
蘋果手錶系統採用的是
SF Compact

00:06:18.312 --> 00:06:21.281 
這兩種字體類別有着不同的比例
對不起 是相似的比例

00:06:22.249 --> 00:06:23.650 
但它們在設計上卻有所不同

00:06:24.351 --> 00:06:29.556 
今天大家就可以下載到這兩種字體

00:06:30.157 --> 00:06:31.158 
其實現在就可以

00:06:31.825 --> 00:06:37.297 
在Apple網站的字體頁面上
developer.apple.com/fonts

00:06:38.232 --> 00:06:39.900 
請注意
這些字體目前還只是預覽版

00:06:40.901 --> 00:06:43.670 
等到OS系統最終確定
以後纔會發佈最終版本

00:06:46.340 --> 00:06:47.608 
在繼續講解

00:06:48.809 --> 00:06:53.680 
San Francisco字體
的優秀創意 “視覺尺寸”之前

00:06:54.181 --> 00:06:56.750 
我想先爲大家介紹
一些設計領域的基本原理

00:06:59.720 --> 00:07:02.556 
視覺感知基本上屬於錯覺

00:07:03.457 --> 00:07:04.992 
在理解這句話的時候

00:07:05.592 --> 00:07:08.262 
請設想在你眼前有兩個形狀
一個方形和一個圓形

00:07:09.029 --> 00:07:13.433 
爲了讓兩個形狀看起來高度相等

00:07:15.068 --> 00:07:18.505 
需要把它們並列排放
上下準確對齊

00:07:19.139 --> 00:07:21.909 
但實際上
圓形看起來很短

00:07:22.743 --> 00:07:25.679 
爲了彌補這一缺陷就要
使用一點迷惑性的手段

00:07:26.280 --> 00:07:29.750 
也就是說
要讓圓形更大些

00:07:30.517 --> 00:07:33.554 
在字體領域裏我們會說
用圓形“衝越”方形

00:07:35.489 --> 00:07:41.995 
換句話說 想讓兩個形狀看起來相似
通常要讓它們相異

00:07:43.030 --> 00:07:45.399 
這個原理不僅適用於形狀本身

00:07:46.133 --> 00:07:49.069 
還適用於形狀周圍的空間

00:07:49.136 --> 00:07:51.071 
我用刻度標記的方式
讓大家看得更清楚些

00:07:51.572 --> 00:07:57.711 
大家會看到
在屏幕中間插入文字時

00:07:58.212 --> 00:07:59.546 
文字的位置看起來會很低

00:08:00.380 --> 00:08:01.215 
正如剛纔所講到的

00:08:02.015 --> 00:08:04.885 
想要形狀看起來相似
需要進行差異化處理

00:08:06.153 --> 00:08:09.156 
順便普及一個小知識
你們知道這個字符是什麼嗎？

00:08:09.256 --> 00:08:10.390 
它叫什麼？

00:08:11.191 --> 00:08:12.960 
英鎊符號還是井號？

00:08:13.360 --> 00:08:16.296 
意大利語叫cancelletto
意思是“小門”

00:08:17.064 --> 00:08:18.966 
當然它屬於數字符號

00:08:20.067 --> 00:08:25.672 
由四條線相交組成的數字符號

00:08:26.039 --> 00:08:27.574 
而這四條線的交匯處

00:08:28.475 --> 00:08:30.577 
中間的這部分區域
當字體尺寸較小的時候

00:08:30.644 --> 00:08:33.246 
該區域會變得很暗
甚至是一團黑

00:08:33.580 --> 00:08:35.883 
所以當字體較小時你很難看到它

00:08:36.616 --> 00:08:41.522 
這時還是需要調整一下

00:08:41.955 --> 00:08:47.461 
不必去動四條線的交匯處
只要讓中間的方塊變大一點

00:08:48.395 --> 00:08:52.733 
這就是San Francisco
字體的重磅值井字符

00:08:53.066 --> 00:08:55.569 
以上是我們在字體
設計中經常採用方法

00:08:58.038 --> 00:09:00.574 
這就是剛纔所說的
視覺感知即與錯覺相關

00:09:01.575 --> 00:09:05.379 
明白了這個道理
我們再來講視覺尺寸

00:09:06.547 --> 00:09:09.850 
在剛纔看到的分類圖中
它在這個分支上

00:09:12.052 --> 00:09:16.423 
假設有一小段文字
用兩種不同的字體尺寸顯示出來

00:09:16.823 --> 00:09:18.792 
順便說一下
這個單詞沒有任何實際意義

00:09:19.092 --> 00:09:23.830 
它只是字體設計人員用來查看字體
及其組合樣態

00:09:23.897 --> 00:09:25.699 
因爲其中包含着一些扁形和圓形

00:09:26.567 --> 00:09:32.272 
當你看着它的時候你會發現
這段文字在小字號狀態下清晰度不好

00:09:32.339 --> 00:09:35.375 
這是因爲對於grotesque
這種字體樣式

00:09:35.442 --> 00:09:37.778 
它的字母顯示正常並且字母間距很小

00:09:38.512 --> 00:09:41.148 
如果我用模糊處理
來模擬低清晰度效果的話

00:09:41.448 --> 00:09:42.482 
較小的字體...

00:09:43.750 --> 00:09:46.587 
在較小的這部分字母
開始變得混淆不清了 對嗎？

00:09:47.354 --> 00:09:50.691 
這種情況下
我們想要的效果應該是這樣的

00:09:51.558 --> 00:09:54.695 
也就是說要微調一下
以便讓小字體也能清晰顯示

00:09:56.129 --> 00:09:59.266 
大家可能覺得我只不過是讓它動了起來
並稍微增加了一些寬度

00:09:59.666 --> 00:10:03.136 
其實我是在變換字體
所呈現給你的整體印象

00:10:04.872 --> 00:10:10.310 
在解釋“顯示”和“文字”
這兩種字體的區別之前

00:10:10.711 --> 00:10:14.081 
請記住
此處的“顯示”並非指顯示器屏幕

00:10:14.147 --> 00:10:16.550 
它在字形領域代表字體大小
而“文字”是指文本的大小

00:10:16.650 --> 00:10:20.320 
所以“顯示”字體用於較大的字號
“文字”字體用於較小的字號

00:10:21.321 --> 00:10:24.157 
在解釋兩者區別之前
我首先介紹負空間的概念

00:10:24.525 --> 00:10:27.861 
負空間是指字母內側 周圍

00:10:28.929 --> 00:10:30.297 
和輪廓內部的空間

00:10:30.998 --> 00:10:35.035 
負空間是分辨形狀
和閱讀形狀的關鍵之處

00:10:36.036 --> 00:10:37.971 
在剛纔的示例下方區域中

00:10:39.039 --> 00:10:44.711 
對於文字來說 其周邊空間的面積
幾乎是字體顯示面積的兩倍

00:10:46.246 --> 00:10:50.684 
因此包括San Francisco
在內的grotesque字體樣式

00:10:50.851 --> 00:10:51.818 
都面臨着同一個問題

00:10:52.085 --> 00:10:54.922 
它們的形狀在足夠大時看起來確實漂亮

00:10:56.557 --> 00:10:59.393 
但在結構上卻過於相似
所以很容易造成混淆

00:10:59.893 --> 00:11:01.128 
如果將兩者疊加起來

00:11:02.863 --> 00:11:06.133 
你會發現它們的整體形態是完全相同的

00:11:06.200 --> 00:11:09.837 
在頂部和底部都有彎曲部分

00:11:10.671 --> 00:11:14.174 
它們都含有兩個這樣的區域
我們稱之爲反向對稱區

00:11:15.075 --> 00:11:18.312 
反向對稱區的位置基本大小基本一致

00:11:19.179 --> 00:11:21.381 
另外在中間位置還有這樣的半橫區

00:11:22.449 --> 00:11:26.119 
半橫區的形狀實際上
是由這些圓圈所界定的

00:11:26.820 --> 00:11:29.756 
如果空氣能夠進入到字母裏面的話
那麼氣流就是從這些圓圈進去的

00:11:30.958 --> 00:11:33.527 
在改變顯示字體時

00:11:33.727 --> 00:11:37.331 
文字字體和顯示字體
具體處理過程是這樣的

00:11:37.531 --> 00:11:39.066 
我們舉例說明

00:11:42.803 --> 00:11:44.304 
以小寫字母a爲例

00:11:44.471 --> 00:11:46.406 
其實要改變的是衝越部分

00:11:46.473 --> 00:11:48.876 
因爲當字體尺寸較小時

00:11:48.942 --> 00:11:52.379 
我們要讓圓邊部分
能夠從x height上突顯出來

00:11:53.180 --> 00:11:54.982 
同時還要打開此處的圓圈

00:11:56.650 --> 00:11:59.253 
對小寫g的底部區域
也採取同樣的處理方式

00:12:02.256 --> 00:12:05.292 
小寫s
也是打開這裏的圓圈

00:12:06.927 --> 00:12:12.366 
處理字母r時
我們把它右上角的彎轉部分加大

00:12:13.433 --> 00:12:16.737 
小寫f和小寫t也有類似的形狀區域

00:12:16.803 --> 00:12:18.805 
因此處理方法相同
但這兩個字母更大 更高一些

00:12:19.907 --> 00:12:21.275 
小寫i就比較有趣了

00:12:21.341 --> 00:12:25.746 
因爲當字號很小時
i頭頂上的圓點看起來

00:12:25.812 --> 00:12:29.483 
好像和下半部分的豎線頂撞在一起

00:12:29.550 --> 00:12:32.486 
所以我們就把它調大 調高一些

00:12:34.054 --> 00:12:38.292 
SF和SF Compact
有兩種截然不同的字族

00:12:38.492 --> 00:12:42.329 
分別叫做“顯示”和“字體”
它們用於不同的字體磅值

00:12:42.729 --> 00:12:47.134 
系統能夠在這兩個字族之間自動轉換
所以不需要用戶自己選擇

00:12:48.435 --> 00:12:50.137 
這就是視覺尺寸

00:12:52.072 --> 00:12:52.906 
謝謝

00:12:58.579 --> 00:13:03.383 
San Francisco
有兩種視覺尺寸 文字和顯示

00:13:03.851 --> 00:13:05.919 
系統會在20磅時
自動切換文字和顯示字體

00:13:06.486 --> 00:13:09.756 
這一點對平臺的代碼編寫
不會產生任何影響

00:13:09.990 --> 00:13:13.193 
不過對於app設計而言
還是很有必要了解這一點

00:13:13.260 --> 00:13:17.064 
因爲Photoshop Sketch
或其他類似的軟件程序

00:13:17.130 --> 00:13:18.365 
不會自動執行字體切換

00:13:18.532 --> 00:13:20.701 
這種情況下
你就要自己更改字體

00:13:22.903 --> 00:13:26.473 
講完了視覺尺寸

00:13:27.307 --> 00:13:31.178 
我想介紹一下和文字尺寸有關的
另一個概念 字間距

00:13:33.413 --> 00:13:37.784 
字間距在字母的負空間裏起到調節作用

00:13:38.785 --> 00:13:42.523 
看屏幕上的動畫演示 大家可能會認爲
哦 原來是字符串的偶距變了

00:13:42.890 --> 00:13:46.827 
沒錯 基本上就是這樣
字間距和字偶距的區別很小

00:13:47.728 --> 00:13:49.263 
字間距是

00:13:49.329 --> 00:13:55.235 
正向或反向調節所有字符

00:13:56.036 --> 00:14:00.574 
而字偶距只是調節兩字母之間的距離
也就是相鄰字母的距離

00:14:01.808 --> 00:14:03.343 
這就是兩者的區別所在

00:14:04.711 --> 00:14:07.314 
字間距是普遍調整
字偶距是局部調整

00:14:11.185 --> 00:14:13.921 
San Francisco
的每種字體都內置一個字間距表

00:14:15.189 --> 00:14:21.495 
該字間距錶帶有具體的字符尺寸
並且定義了磅值和字間距值

00:14:22.329 --> 00:14:24.198 
就是這種效果 對吧？

00:14:24.264 --> 00:14:28.802 
它能讓較小的文字更寬鬆
也能讓較大的文字更緊湊

00:14:30.003 --> 00:14:32.840 
就像剛纔我說的那樣

00:14:32.906 --> 00:14:35.876 
若使用新San Francisco
字體進行編碼 可以不用瞭解上述原理

00:14:35.943 --> 00:14:38.912 
如果使用Photoshop
繪製app應用的話

00:14:39.046 --> 00:14:41.014 
再次記住軟件本身不會自動切換字體

00:14:43.483 --> 00:14:46.720 
這時就可以下載這樣一份
帶有系統字體的字間距表

00:14:47.387 --> 00:14:49.122 
下載地址和我剛纔
給出的頁面地址一樣

00:14:52.059 --> 00:14:53.460 
以上是關於字間距的內容

00:14:56.163 --> 00:15:00.334 
接下來我要講的是字重

00:15:04.671 --> 00:15:10.511 
字重這一概念用來描述
字母筆畫的粗細程度

00:15:12.379 --> 00:15:16.016 
在San Francisco
和SF Compact字族裏

00:15:16.083 --> 00:15:20.821 
兩者的文字字體都有6種字重

00:15:21.355 --> 00:15:25.425 
另外再加上斜體
就構成了9種顯示字體

00:15:25.893 --> 00:15:31.198 
大家可能會問
爲什麼顯示字體字重比文字字體重更多

00:15:32.199 --> 00:15:36.870 
這是因爲極粗字體
其實只是爲了標題而設計的

00:15:37.571 --> 00:15:40.774 
所以在20磅以下使用
就沒有多大意義可言了

00:15:43.110 --> 00:15:47.047 
有些字重是新增加到平臺上的

00:15:47.114 --> 00:15:48.215 
以前幾乎找不到它們

00:15:50.083 --> 00:15:53.554 
即便原有的字重也很難獲取

00:15:53.921 --> 00:15:58.659 
現在我們提供了新的API
大家可以從中獲取所有字重和系統字體

00:15:59.326 --> 00:16:01.228 
它們都包含在UIKit
和AppKit裏

00:16:01.295 --> 00:16:05.232 
且已是systemFontOfSize
裏面的一個新參數

00:16:08.001 --> 00:16:10.771 
這些是它們使用的引數

00:16:12.639 --> 00:16:16.710 
有了這些字重
接下來的問題的就是如何使用它們

00:16:16.910 --> 00:16:19.413 
我指的不是在編碼方面
而是在設計方面

00:16:20.681 --> 00:16:23.884 
通過使用字重
可以實現三個主要目標

00:16:24.251 --> 00:16:25.485 
首先是差異化

00:16:25.552 --> 00:16:28.989 
你可以讓一段文字產生差別
並製作層級效果

00:16:30.190 --> 00:16:31.925 
第二個目標是相似性

00:16:33.327 --> 00:16:35.395 
第三個是實現風格化效果

00:16:35.462 --> 00:16:37.698 
這樣文字就具備了表現力

00:16:38.465 --> 00:16:39.433 
請看屏幕

00:16:41.802 --> 00:16:43.136 
假設有一段文字

00:16:43.437 --> 00:16:45.072 
現在要將其中的某個單詞突出顯示

00:16:45.606 --> 00:16:48.475 
把它設成動態 鏈接或強調效果

00:16:48.775 --> 00:16:50.644 
這時字重就能派上用場了

00:16:52.613 --> 00:16:55.716 
另外 它還可以爲列表製作層級效果

00:16:55.782 --> 00:17:02.556 
比如我想把第一行文字做成列表的標題
而下面的部分是列表的具體內容

00:17:03.891 --> 00:17:07.761 
字重還有一個巧妙的功能
製作相似效果

00:17:08.595 --> 00:17:09.896 
請看這個示例

00:17:09.963 --> 00:17:13.599 
Apple手錶系統的
Glances模擬界面

00:17:13.800 --> 00:17:16.869 
上面是一個較大的數字
下面是幾個較小的文字

00:17:17.771 --> 00:17:22.309 
如果把它們設成相同字重
看起來會有頭重腳輕的感覺

00:17:22.910 --> 00:17:25.546 
如果要製作相似效果
讓其產生平衡感

00:17:25.612 --> 00:17:28.214 
就需要使用不同的字重
以此來達到相似的目的

00:17:29.116 --> 00:17:32.619 
所以我們下面的字體從light
變成regular 效果就好多了

00:17:34.621 --> 00:17:35.856 
記住這個方法

00:17:35.923 --> 00:17:38.992 
字號大時 字重調重一些
字號小時 字重調輕一些

00:17:39.359 --> 00:17:44.331 
這樣一來就能達到
相似而協調的理想效果

00:17:46.567 --> 00:17:48.969 
最後 字重還能幫助提高文字的表現力

00:17:49.136 --> 00:17:52.005 
爲了解釋這個問題
我製作了一款新式app應用

00:17:52.840 --> 00:17:54.408 
叫做“蜜蜂天氣預報”

00:17:54.842 --> 00:17:57.377 
一款蜜蜂風格的小軟件

00:17:58.011 --> 00:18:02.516 
我想讓它看起來簡單粗獷一些

00:18:03.016 --> 00:18:06.653 
但我想說的是
如果保持界面佈局不變

00:18:06.987 --> 00:18:09.323 
在佈局不變的情況下
只改動字重

00:18:09.990 --> 00:18:13.026 
整個界面在風格上將會截然不同
表現力完全不一樣

00:18:13.861 --> 00:18:17.264 
如果你覺得
哦 肯定是顏色的問題

00:18:17.931 --> 00:18:19.633 
沒關係
我還做了一個斑馬版的

00:18:20.167 --> 00:18:22.769 
這個就完全能證明我是對的

00:18:24.137 --> 00:18:27.374 
雖然字重能改變風格和效果

00:18:28.909 --> 00:18:31.044 
但別忘了

00:18:31.945 --> 00:18:37.050 
文字是有字體的
易讀性最重要

00:18:38.452 --> 00:18:41.088 
你可以製作層級效果
清晰連貫的層級效果

00:18:42.089 --> 00:18:43.690 
如果不喜歡自己做的話

00:18:43.991 --> 00:18:45.959 
可以使用iOS準備
的一套現成系統

00:18:46.493 --> 00:18:50.531 
裏面已經設置了層級
以及字體尺寸和字重

00:18:51.031 --> 00:18:52.699 
它們就是文字樣式API

00:18:52.966 --> 00:18:56.537 
主要用於功能很多的
Dynamic Type

00:18:57.070 --> 00:18:59.873 
用戶可以進入它的偏好設置

00:19:00.274 --> 00:19:03.577 
改變字體大小
然後app應用就會做出相應改變

00:19:05.345 --> 00:19:07.614 
在使用字重時請記住

00:19:07.714 --> 00:19:11.985 
iOS和watchOS系統
中都有一個設定選項

00:19:12.419 --> 00:19:16.290 
用於改變用戶設備上的字重

00:19:16.890 --> 00:19:20.394 
如果你使用的字體很粗

00:19:20.928 --> 00:19:23.463 
那很可能已經達到了極限

00:19:24.231 --> 00:19:28.902 
相反 如果你使用的字體很細
那麼文字的易讀性就會好一些

00:19:29.403 --> 00:19:33.607 
字重的使用沒有固定的標準方法

00:19:34.341 --> 00:19:38.879 
但這些基本原理還是能
起到一些拋磚引玉的作用

00:19:40.647 --> 00:19:44.051 
以上講的是
San Francisco字族的字重

00:19:45.185 --> 00:19:49.656 
還有更多的字重
和包含字重的API供大家使用

00:19:51.258 --> 00:19:54.461 
剛纔介紹的易讀性
層級和精細質量效果

00:19:54.761 --> 00:19:57.631 
等基本原理同樣
適用於這些字重和API

00:20:01.068 --> 00:20:07.808 
下面是San Francisco
字族的另一個功能 字形功能

00:20:11.512 --> 00:20:17.518 
功能賦予字體生命力
因爲它們是嵌入字體內部的行爲片段

00:20:19.052 --> 00:20:22.055 
其主要作用是用來表達複雜文字

00:20:22.756 --> 00:20:26.527 
同時也可以通過它們
來獲得字體的外延形狀

00:20:27.294 --> 00:20:29.329 
對獲取外延形狀來說
有時字形功能是唯一途徑

00:20:29.396 --> 00:20:32.099 
有時字形功能是更加便捷的途徑

00:20:33.133 --> 00:20:35.068 
我們通過示例來瞭解
它們功能的實際作用

00:20:35.636 --> 00:20:37.704 
首先看分數的顯示

00:20:38.539 --> 00:20:41.208 
比如在設計過程中
需要把它加到app應用裏

00:20:41.542 --> 00:20:42.409 
這時你會想

00:20:43.343 --> 00:20:46.213 
肯定可以在Unicode找到該符號

00:20:46.747 --> 00:20:50.617 
但不知道San Francisco裏面有沒有

00:20:50.884 --> 00:20:52.786 
於是你找了一下還真找到了
直接把它打出來

00:20:53.020 --> 00:20:53.854 
很好

00:20:54.488 --> 00:20:56.690 
不過要是這種情況的話又該怎麼辦呢？

00:20:57.357 --> 00:20:59.226 
字體裏面沒有
Unicode裏也沒有

00:21:00.027 --> 00:21:06.867 
你可以用迭代法
用這個字符串來寫代碼

00:21:07.234 --> 00:21:08.302 
然後複製成其它形狀

00:21:09.169 --> 00:21:12.973 
再把這些形狀逐個排好位置

00:21:13.807 --> 00:21:18.879 
必要時調整一下字重
讓整體效果看起來更加相似 勻稱

00:21:19.479 --> 00:21:22.349 
也許你會想到字體裏面是有分號線的

00:21:22.416 --> 00:21:24.585 
那就到San Francisco裏面去找一找
找到了

00:21:24.651 --> 00:21:25.485 
直接放進去

00:21:26.353 --> 00:21:29.857 
就這樣你寫了一大堆代碼
其實根本不用這麼麻煩

00:21:29.957 --> 00:21:35.262 
因爲分數功能會
自動執行這一操作

00:21:36.430 --> 00:21:39.132 
該功能適用於任意分數

00:21:40.067 --> 00:21:41.802 
就像這個數字

00:21:41.935 --> 00:21:47.641 
我不可能設計出
一個65/324這麼大的連字符

00:21:48.141 --> 00:21:53.447 
實際上它是由小號數字和分號線組成的
系統能夠根據實際字體

00:21:54.448 --> 00:21:58.185 
將數字和分號線組合在一起

00:21:58.852 --> 00:22:04.525 
這樣做的好處在於
它們都是獨立的形狀 可以調整字間距

00:22:05.926 --> 00:22:08.529 
功能的種類還有很多

00:22:08.629 --> 00:22:11.031 
大家可以在Typography面板
裏啓用這些功能

00:22:11.098 --> 00:22:14.301 
該面板是OS X字體
面板中的一個用戶界面

00:22:15.602 --> 00:22:19.339 
另外也可以通過代碼來啓用功能
畢竟在座各位使用代碼的時候比較多

00:22:20.307 --> 00:22:26.713 
我用新的systemFontOfSize
字重API實現了輕字重效果

00:22:27.848 --> 00:22:29.716 
這是字體描述符

00:22:30.617 --> 00:22:34.688 
找到以後就可以爲它添加各種屬性

00:22:35.155 --> 00:22:37.791 
某些屬性本身就是字形功能

00:22:38.458 --> 00:22:41.695 
每次可以打開一個功能
或者關閉一個功能

00:22:41.762 --> 00:22:44.398 
也可以批量處理多個功能

00:22:45.265 --> 00:22:48.402 
有了字體描述符
就可以用它創建另一個UIFont

00:22:49.036 --> 00:22:49.870 
或者NSFont

00:22:51.738 --> 00:22:54.942 
此外還有其他功能供大家使用

00:22:55.008 --> 00:22:59.613 
比如高體字和上角標
或者矮體字和下角表

00:23:01.882 --> 00:23:07.187 
或在數字和大寫字母之間輸入數學符號

00:23:07.254 --> 00:23:10.224 
或其它符號時所使用的大寫形式

00:23:11.925 --> 00:23:15.362 
San Francisco字體的
某些功能在設計上確實非常特殊

00:23:15.562 --> 00:23:16.797 
我來具體解釋一下

00:23:17.965 --> 00:23:20.100 
首先是垂直居中冒號

00:23:21.502 --> 00:23:25.839 
默認狀態下它是與小寫字母對齊的
所以頂靠在基準線上

00:23:26.206 --> 00:23:30.711 
但在對時間顯示進行排版設計時
我們希望它能垂直居中於數字之間

00:23:31.445 --> 00:23:34.882 
因此我們在iOS的錶盤設計中
全部採用了這種居中垂直法

00:23:35.315 --> 00:23:39.319 
既用在OS X的標題欄
也用在啊Apple手錶系統

00:23:39.920 --> 00:23:41.788 
還用在秒錶程序上

00:23:42.489 --> 00:23:48.562 
後來我們決定把該功能設成自動生效
這樣能爲UI設計的時間顯示帶來便利

00:23:51.298 --> 00:23:54.334 
當然必要時
你也可以退出該功能

00:23:54.401 --> 00:23:58.272 
退出的功能代碼和
和啓用代碼基本是一樣的

00:23:59.206 --> 00:24:03.110 
另外一個功能是6和9的替代形狀

00:24:03.944 --> 00:24:08.682 
這兩個形狀當字體較大時看起來很漂亮
採用的是grotesque字體

00:24:09.283 --> 00:24:12.653 
但是它們卻存在視覺混淆問題

00:24:12.986 --> 00:24:16.957 
當它們以小字體並列顯示
或者與8並列示時就會變得混淆不清

00:24:18.225 --> 00:24:23.931 
因此我們在San Francisco字體
中設計了6和9的替代形狀

00:24:24.164 --> 00:24:25.566 
看起來更加平直化

00:24:26.200 --> 00:24:30.170 
這種設計被應用在
Apple手錶系統的小錶盤上

00:24:30.604 --> 00:24:33.941 
以及Apple手錶背面的序列號上

00:24:34.408 --> 00:24:37.711 
其實在任何序列號不易分辨的情況下
你都可以使用這一功能

00:24:37.978 --> 00:24:39.179 
讓6和9顯示地更加清晰

00:24:40.047 --> 00:24:42.783 
因爲使用時要取決其它數字的實際大小

00:24:43.083 --> 00:24:45.686 
所以我們沒有把該功能設爲自動開啓

00:24:46.620 --> 00:24:50.224 
如果需要的話可以使用
這段功能代碼來啓動它

00:24:53.360 --> 00:24:55.729 
接下來
我要把兩種理念結合起來

00:24:55.796 --> 00:24:58.298 
第一種是我們剛剛看到的字形功能

00:24:58.732 --> 00:25:00.834 
第二種是我們先前講過的視覺尺寸

00:25:02.836 --> 00:25:05.572 
顯示字體和文字字體
在設計上的區別很大

00:25:05.639 --> 00:25:10.010 
因此我們不得不將
磅值納入到考慮範圍內

00:25:10.544 --> 00:25:12.813 
在設計過程中
如果用顯示字體來表達分數

00:25:12.880 --> 00:25:15.082 
那麼使用捲曲形的6不會有任何問題

00:25:15.482 --> 00:25:19.253 
但如果是文字字體的話
最好能換成另一種形狀

00:25:19.319 --> 00:25:22.222 
因爲如果將磅值設爲12

00:25:22.456 --> 00:25:24.525 
那麼分數部分的磅值就應該是6
對吧？

00:25:25.092 --> 00:25:26.660 
所以我們採取了不同的設計方式

00:25:26.994 --> 00:25:28.762 
並且讓它們間隔更遠一些

00:25:29.196 --> 00:25:32.733 
我們在 San Francisco字體中
專門進行了很多這樣形狀的處理

00:25:32.799 --> 00:25:39.406 
目的就是將文本和顯示區別開來
從而讓文字更加美觀或者更加易讀

00:25:42.209 --> 00:25:44.178 
這些就是字形功能

00:25:44.778 --> 00:25:46.914 
它們是被嵌入文字內部的行爲作用

00:25:48.448 --> 00:25:52.085 
有些功能是由系統字體默認開啓的

00:25:52.819 --> 00:25:55.656 
而其它功能則需要大家自己啓用

00:25:59.092 --> 00:26:02.996 
接下來我們談談數字

00:26:03.163 --> 00:26:06.366 
不是app裏面的數字
而是字體裏面的數字

00:26:07.601 --> 00:26:12.239 
字體設計人員花費大量
時間去研究數字的形狀

00:26:12.306 --> 00:26:15.309 
想讓數字更加美觀 實用更加完善

00:26:16.310 --> 00:26:19.146 
不過我想談談數字的間距

00:26:19.213 --> 00:26:20.147 
它們的寬度問題

00:26:21.949 --> 00:26:23.417 
默認狀態下
對於我們的平臺而言

00:26:23.483 --> 00:26:27.120 
數字採用的是等寬式設計
就是說它們的寬度完全相同

00:26:28.789 --> 00:26:33.594 
對於編排表格之類的設計非常適用

00:26:33.961 --> 00:26:37.164 
等寬數字簡單方便
因爲它們很容易對齊

00:26:37.798 --> 00:26:40.801 
而且還可以用來製作多行樣式

00:26:42.436 --> 00:26:45.672 
但它並非San Francisco
字體中唯一的數字形式

00:26:46.139 --> 00:26:49.042 
我們還設計了一種比例數字

00:26:49.376 --> 00:26:53.080 
使每個數字都有其“自然”寬度

00:26:54.248 --> 00:26:58.919 
某些情況下
我們的確需要等寬數字

00:27:01.388 --> 00:27:06.426 
比如像這樣有小數的時候

00:27:06.493 --> 00:27:10.531 
會有擺動效果
等寬數字能保持靜止不動

00:27:11.865 --> 00:27:16.870 
當然有時也需要在靜態標籤裏使用數字

00:27:16.937 --> 00:27:20.774 
比如說一條數據 一個電話號碼

00:27:21.341 --> 00:27:26.880 
收件箱閱讀提示
或者Email地址以及URL網址

00:27:27.347 --> 00:27:31.285 
這時最好使用比例數字

00:27:32.653 --> 00:27:37.858 
現在我們用數字內容比較多的
日曆程序來做個演示

00:27:39.126 --> 00:27:42.462 
請看我們在這款應用中所使用的數字
以及我們的編排設計方式

00:27:42.796 --> 00:27:47.034 
它們沒有任何對齊標準
只與文字保持一致

00:27:47.267 --> 00:27:52.506 
也就是說 我們可以使用
應該使用 也確實使用了比例數字

00:27:55.709 --> 00:27:58.745 
瞭解這一點
我們就能實現質的飛躍

00:27:59.413 --> 00:28:02.082 
就能改變我們的平臺默認樣式

00:28:02.182 --> 00:28:07.154 
爲大家提供默認狀態下的比例數字
並將等寬數字設爲可選功能

00:28:08.422 --> 00:28:11.358 
Apple手錶已經率先
採用了這種設計方式

00:28:11.825 --> 00:28:14.027 
系統默認使用比例數字

00:28:15.295 --> 00:28:17.531 
但這畢竟是一次重大變更
可能會對佈局產生影響

00:28:17.831 --> 00:28:21.235 
有鑑於此
我們制定了一些規則

00:28:22.736 --> 00:28:25.639 
如果app應用
未鏈接到iOS 10.11

00:28:25.873 --> 00:28:28.041 
對不起
是OS X 10.11和iOS 9

00:28:28.342 --> 00:28:32.513 
默認使用的仍是等寬數字
系統會自動啓用等寬數字

00:28:34.081 --> 00:28:38.886 
但如果是重新編譯
則會使用比例數字

00:28:39.987 --> 00:28:45.325 
在AppKit中有款新的快捷API
它提取了這一功能代碼

00:28:45.526 --> 00:28:48.395 
就是剛纔給大家看的那段代碼
所以用起來會更方便

00:28:52.099 --> 00:28:55.068 
最後我們來瞭解一下潛在隱患的問題

00:28:55.135 --> 00:28:59.139 
我們的字體API
同時包含了新舊字體

00:29:01.775 --> 00:29:04.578 
細心的人可能會留意到

00:29:04.645 --> 00:29:08.048 
在預覽版的OS X和iOS系統中

00:29:08.515 --> 00:29:12.753 
SF字體的名稱前面有一個小點

00:29:13.587 --> 00:29:17.191 
這個小點是用來告訴大家
該字體是Apple的獨家字體

00:29:17.558 --> 00:29:20.294 
所以不要過於相信它的穩定性

00:29:22.329 --> 00:29:25.098 
我們曾經見過一些框架開發人員

00:29:25.199 --> 00:29:27.067 
使用他們自己的字體加載代碼

00:29:27.134 --> 00:29:29.469 
比如遊戲框架的開發人員就是這樣

00:29:29.970 --> 00:29:32.206 
之所以這樣做是因爲

00:29:32.539 --> 00:29:35.843 
他們覺得字體就存放在文件系統中
的某個具體位置上

00:29:36.343 --> 00:29:37.477 
這種想法是很危險的

00:29:37.878 --> 00:29:43.584 
我們希望大家在字體路徑
的處理方式上能寬泛一些

00:29:43.650 --> 00:29:47.688 
就是說可以通過
Core text訪問字體文件

00:29:47.754 --> 00:29:51.024 
而不必到文件系統裏面查找

00:29:52.960 --> 00:29:56.830 
另外如果要通過
名稱來獲取字體文件的話

00:29:57.431 --> 00:30:00.300 
可以使用fontWithName API
裏面全都是用戶字體

00:30:00.367 --> 00:30:03.136 
如果你有自己的字體
可以這樣寫出來完全沒問題

00:30:03.637 --> 00:30:05.339 
但如果你對某個系統字體執行了實例化

00:30:05.572 --> 00:30:09.109 
然後再提取它的名稱
並嘗試建立另外一個字體

00:30:09.610 --> 00:30:13.413 
這時會導致所有的
系統自動設置完全退出

00:30:13.480 --> 00:30:18.552 
自動功能 字體大小行爲
自動間距等等都會退出

00:30:18.619 --> 00:30:20.921 
所以建議大家不要這樣操作

00:30:21.455 --> 00:30:23.991 
其實我們可以調用字體描述符

00:30:24.458 --> 00:30:29.396 
用它來實現某個字體功能

00:30:29.463 --> 00:30:32.699 
這是使用字體對象的推薦方案

00:30:35.169 --> 00:30:37.104 
最後在視覺尺寸問題上

00:30:37.171 --> 00:30:42.442 
我們仍然在挑戰一些
字體顯示方面的舊觀念

00:30:42.809 --> 00:30:46.113 
比如在設計過程中
把一個單詞的磅值設爲15

00:30:46.380 --> 00:30:51.585 
將其比例放大後
再重新使用相同的字體對象

00:30:51.919 --> 00:30:57.824 
這時你可能在用
比如說120磅來顯示15磅的字體

00:30:58.425 --> 00:31:03.497 
那麼就要對120磅的字體
重新執行實例化

00:31:03.564 --> 00:31:05.465 
這樣才能得到正確的字體行爲

00:31:08.769 --> 00:31:13.941 
希望大家能把字體當作一種寬泛的對象
並使用系統API來獲取字體

00:31:15.375 --> 00:31:18.846 
具備了視覺屬性
字體便能夠打破舊有觀念

00:31:20.214 --> 00:31:25.819 
基於系統字體的API將會
一直提供正確的字體行爲

00:31:25.886 --> 00:31:28.288 
所以大家儘管放心使用

00:31:30.090 --> 00:31:32.226 
以上就是今天的全部內容

00:31:32.292 --> 00:31:34.261 
我們介紹了
新的San Francisco字體

00:31:34.328 --> 00:31:38.165 
及San Francisco的優秀創意 視覺尺寸
還有其它一些概念

00:31:38.732 --> 00:31:42.870 
介紹了自動字符間距和字體字重
及San Francisco的各種功能

00:31:43.337 --> 00:31:46.573 
還有即將在平臺上普及的
數字顯示方面的重大變更

00:31:46.640 --> 00:31:50.143 
這將使用比例數字作爲默認顯示

00:31:50.511 --> 00:31:53.814 
最後我們介紹了API的潛在隱患

00:31:54.648 --> 00:31:58.485 
如果您有任何問題
可以聯繫 邁克 或 柯特

00:31:59.052 --> 00:32:00.954 
或者訪問我們的開發者網站

00:32:02.623 --> 00:32:05.225 
稍後的演講是手錶設計的要訣和技巧

00:32:05.592 --> 00:32:08.395 
之後是文字與字體實驗室
屆時會有答疑環節

00:32:08.962 --> 00:32:10.564 
謝謝大家