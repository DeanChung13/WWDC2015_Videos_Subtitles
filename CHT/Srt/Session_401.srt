00:00:19.820 --> 00:00:23.824 
Swift和Objective-C
互操作性

00:00:25.459 --> 00:00:27.961 
大家下午好 我是約旦·羅斯

00:00:33.867 --> 00:00:35.302 
哇 謝謝你們我還什麼都沒做

00:00:36.336 --> 00:00:37.237 
我是約旦·羅斯

00:00:37.304 --> 00:00:39.540 
過會兒道格·格雷戈爾也會加入我們

00:00:39.907 --> 00:00:44.745 
我們想要和你們分享一年來我們在
Swift和Objective-C語言的改進

00:00:45.012 --> 00:00:47.514 
特別是在互操作性方面的變化

00:00:48.182 --> 00:00:51.385 
因爲Objective-C
和Swift的類庫都相同

00:00:51.652 --> 00:00:53.020 
所以這很重要

00:00:53.820 --> 00:00:56.023 
在Xcode 7中我們更容易看到

00:00:56.089 --> 00:00:57.758 
這個映射是如何工作的

00:00:58.125 --> 00:00:59.860 
來到Objective-C的頭文件

00:01:00.160 --> 00:01:02.496 
在頂部靠左的位置

00:01:02.696 --> 00:01:03.864 
選擇顯示關聯項按鈕

00:01:04.263 --> 00:01:06.300 
會跳出關聯項菜單

00:01:06.366 --> 00:01:09.303 
其中一個是生成的接口

00:01:09.837 --> 00:01:12.873 
這會顯示SWIFT的對於
這個頭文件的映射

00:01:13.974 --> 00:01:16.009 
這和Xcode 6中用”調到定義

00:01:16.076 --> 00:01:19.446 
場景中的視圖是完全一樣的

00:01:19.780 --> 00:01:22.916 
但是現在你可以很容易的在對象中的
任意頭文件中得到這個映射關係

00:01:24.952 --> 00:01:26.220 
今天我們將會講到多種

00:01:26.286 --> 00:01:28.989 
在Swif
和Objective-C混編中

00:01:29.056 --> 00:01:32.359 
和在Objective-C中的
開發的新特性

00:01:32.960 --> 00:01:35.495 
我們將從一些Swif
和Objective-C混編

00:01:35.562 --> 00:01:36.997 
的基本特性開始重點

00:01:37.664 --> 00:01:40.667 
討論新的錯誤處理特性和這種特性

00:01:40.734 --> 00:01:41.969 
跨語言工作原理

00:01:42.402 --> 00:01:43.403 
然後我們將會

00:01:43.470 --> 00:01:45.772 
講在過去一年中關於
Objective-C的3個

00:01:45.839 --> 00:01:47.941 
主要改進包括“可空性註釋”

00:01:48.041 --> 00:01:50.711 
“輕量通用類型”和“種類型”

00:01:52.212 --> 00:01:53.881 
我們從Swift端開始

00:01:54.548 --> 00:01:57.184 
我們會看到將
Objective-C APIs

00:01:57.251 --> 00:01:58.886 
嵌入Swift有多容易

00:01:59.653 --> 00:02:01.622 
但是問題來了

00:02:01.989 --> 00:02:05.125 
什麼時候把Swift暴露給
Objective-C代碼

00:02:06.460 --> 00:02:08.495 
讓我們複習一下規則

00:02:09.930 --> 00:02:12.499 
如果你有一個NSObject的子類

00:02:12.966 --> 00:02:16.670 
那麼默認的它的方法和屬性暴露
給Objective-C代碼

00:02:17.271 --> 00:02:19.740 
在這個例子中我們有一個
我的控制器類是

00:02:19.806 --> 00:02:21.542 
UIViewController的
子類

00:02:21.608 --> 00:02:23.810 
那是NSObject的非直接子類

00:02:24.211 --> 00:02:28.115 
所以這個刷新方法將暴露給
Objective-C

00:02:29.750 --> 00:02:32.719 
然而如果你把這個方法標記爲私有的

00:02:33.120 --> 00:02:35.689 
這意味着它僅在當前文件中可見

00:02:36.256 --> 00:02:39.159 
所以在這裏默認情況下
Swift不會將這個方法暴露

00:02:39.226 --> 00:02:41.028 
給Objective-C

00:02:42.062 --> 00:02:44.431 
另外如果你僅僅使用

00:02:44.531 --> 00:02:48.902 
如果使用一些Swift專用的特性

00:02:49.436 --> 00:02:52.706 
就沒有辦法把這個方法
暴露給Objective-C

00:02:52.806 --> 00:02:54.208 
Swift甚至試都不會試

00:02:56.009 --> 00:03:00.113 
最後如果不是NSObject的子類

00:03:00.547 --> 00:03:03.483 
僅粗略的符合
Objective-C協議

00:03:04.051 --> 00:03:05.719 
那麼你必須格外注意

00:03:05.786 --> 00:03:08.856 
你的方法必須完全的滿足協議要求

00:03:09.256 --> 00:03:11.758 
在Xcode 7你會得到這樣的告警

00:03:12.125 --> 00:03:16.029 
在這裏 “頁面視圖開始加載”
不是objc

00:03:16.296 --> 00:03:18.465 
它不能滿足

00:03:18.699 --> 00:03:20.834 
“UI web視圖代理協議”的要求

00:03:22.870 --> 00:03:24.271 
這涵蓋了默認值

00:03:24.771 --> 00:03:26.340 
你把這些默認行爲

00:03:26.540 --> 00:03:27.841 
變成這樣時會發生什麼？

00:03:28.742 --> 00:03:31.278 
讓我們回到具有刷新
方法的我的控制器版本

00:03:31.345 --> 00:03:34.615 
我想把它暴露給
Objective-C

00:03:35.415 --> 00:03:36.383 
但是它依賴於

00:03:36.450 --> 00:03:40.621 
我下一步想做什麼依賴於我需要
用刷新方法做什麼

00:03:41.288 --> 00:03:45.158 
所以如果我想要

00:03:45.225 --> 00:03:49.229 
用接口生成器或是核心數據屬性

00:03:49.530 --> 00:03:51.331 
我們有專用屬性

00:03:51.398 --> 00:03:53.734 
你所要做的就是添加這些屬性

00:03:54.234 --> 00:03:56.970 
所以如果你使用現在
展示的IBAction屬性

00:03:58.472 --> 00:04:02.743 
你只需要在i接口生成器中
將刷新方法設置爲有效行爲

00:04:04.211 --> 00:04:06.547 
相似的如果你正在使用

00:04:06.747 --> 00:04:09.016 
全系統基礎關鍵值屬性

00:04:09.249 --> 00:04:10.450 
或者是Cocoa綁定屬性

00:04:11.018 --> 00:04:13.787 
你只要添加動態調整器就可以了

00:04:14.254 --> 00:04:16.757 
這將告訴Swift
這個屬性實施過程中

00:04:17.024 --> 00:04:18.659 
通過全系統關鍵值

00:04:18.892 --> 00:04:20.627 
可以在線調整

00:04:22.062 --> 00:04:24.865 
但是如果你想要將某個特殊方法

00:04:24.932 --> 00:04:26.733 
或是屬性暴露給
Objective-C

00:04:27.000 --> 00:04:30.170 
你總是可以使用plain-old
at-objc調整器

00:04:30.971 --> 00:04:35.843 
或是objc 屬性 對不起
這將會把方法或

00:04:36.009 --> 00:04:38.111 
objective暴露給
Objective-C

00:04:38.178 --> 00:04:39.947 
這不需要任何附加語義

00:04:41.448 --> 00:04:44.151 
這個objc屬性在其它事情上也有用

00:04:44.418 --> 00:04:46.920 
在Objective-C中
這個objc屬性會

00:04:46.987 --> 00:04:48.956 
爲你指出一些不可見的事物

00:04:49.389 --> 00:04:51.792 
如果我想要非尋常返回類型

00:04:51.859 --> 00:04:54.061 
的跨版本刷新

00:04:54.494 --> 00:04:56.864 
那麼我將會看到錯誤信息
“因爲返結果類型不能在

00:04:56.930 --> 00:04:58.465 
Objective-C中體現

00:04:58.899 --> 00:05:01.768 
所以該方法無法在objc中標識”

00:05:03.337 --> 00:05:06.673 
所有這些規則都包含在
“用cocoa使用Swift

00:05:06.740 --> 00:05:09.576 
and Objective-C”
手冊這本手冊中

00:05:09.643 --> 00:05:12.346 
可以訪問
developer.apple.com/Swift在線查找

00:05:13.814 --> 00:05:16.550 
現在我們已經介紹了默認值

00:05:16.617 --> 00:05:19.019 
還介紹瞭如何重新定義這些默認值

00:05:19.453 --> 00:05:21.321 
以便讓我們的代碼更加符合ObjC

00:05:21.922 --> 00:05:23.524 
但是如果你碰到相反的問題呢？

00:05:24.992 --> 00:05:27.528 
讓我們來看看這個類：計算器控制器

00:05:28.095 --> 00:05:30.597 
它有兩個方法：“執行 操作”

00:05:31.231 --> 00:05:32.866 
其中一個有一種類型的封閉包

00:05:33.033 --> 00:05:34.735 
另外一種有不同種類的封閉包

00:05:35.636 --> 00:05:36.470 
好吧

00:05:36.570 --> 00:05:40.274 
Swift能夠基於參數類型快速區分
這兩個方法

00:05:41.074 --> 00:05:42.843 
但是Objective-C
不是這樣工作的

00:05:42.910 --> 00:05:45.345 
在Objective-C中
不能通過類型

00:05:45.412 --> 00:05:47.247 
只能通過名稱區分方法

00:05:48.649 --> 00:05:51.285 
在這裏Swift知道這是個問題

00:05:51.351 --> 00:05:52.819 
它會給你發送錯誤信息

00:05:54.021 --> 00:05:57.257 
現在你總是可以使用ObjC
屬性的選擇器形式

00:05:57.324 --> 00:05:58.959 
來修正這個錯誤

00:05:59.526 --> 00:06:03.430 
所以如果我編寫了這個代碼
那麼當我從Objective-C接入它時

00:06:03.697 --> 00:06:05.465 
我就將按鈕方法

00:06:05.866 --> 00:06:08.001 
重命名爲執行二進制操作

00:06:08.635 --> 00:06:11.538 
頂部的方法還是名爲執行操作

00:06:13.273 --> 00:06:16.643 
在Xcode 7中爲這類問題
我們添加了其它解決方案

00:06:16.877 --> 00:06:18.779 
即non-ObjC屬性

00:06:19.179 --> 00:06:20.447 
就像你所想到的

00:06:20.614 --> 00:06:23.417 
這會使用一些非正常
暴露給Objective-C的東西

00:06:23.817 --> 00:06:26.620 
並且防止它被這樣暴露

00:06:27.020 --> 00:06:29.790 
你可以將
non-ObjC賦予任何方法

00:06:30.224 --> 00:06:32.626 
屬性子腳本或初始化器

00:06:34.862 --> 00:06:37.364 
那是數量非常龐大的
Objective-C和方法

00:06:37.698 --> 00:06:39.499 
但是低級語言怎麼辦？

00:06:40.667 --> 00:06:41.668 
來看看C語言

00:06:43.470 --> 00:06:45.472 
這裏有些人不太高興了

00:06:45.539 --> 00:06:47.407 
我們有一個函數指針的幻燈片

00:06:49.643 --> 00:06:52.746 
函數指針是C語言用戶用來回調的

00:06:53.547 --> 00:06:55.883 
這意味着它們類似於閉包

00:06:56.416 --> 00:06:58.685 
但是它們不能攜帶任何附加狀態

00:06:59.319 --> 00:07:00.454 
我說的是什麼意思呢？

00:07:01.455 --> 00:07:03.056 
我用Swift試圖

00:07:03.123 --> 00:07:05.526 
調用C函數開放函數

00:07:05.759 --> 00:07:07.361 
它有很多的參數

00:07:07.427 --> 00:07:08.695 
你不需要知道所有的參數

00:07:09.129 --> 00:07:10.297 
其中一個是回調參數

00:07:11.164 --> 00:07:16.670 
在這個回調中我做自調用

00:07:16.737 --> 00:07:22.309 
所以它必須儲存在這個閉包
後面訪問的某個部分

00:07:23.177 --> 00:07:25.479 
這是我們所謂的攜帶狀態的閉包

00:07:25.946 --> 00:07:28.115 
當你試圖使用這個閉包

00:07:28.382 --> 00:07:30.817 
用這個API你收到一個錯誤信息

00:07:32.319 --> 00:07:36.490 
現在在Swift1.2中
函數指針不是非常有用

00:07:36.957 --> 00:07:39.359 
在頂部顯示的是C類型

00:07:39.560 --> 00:07:43.297 
它透明的進入Swift
C函數指針類型

00:07:43.630 --> 00:07:46.733 
你可以把它傳過來
但是不能再做更多的東西了

00:07:47.768 --> 00:07:50.971 
Swift 2.0中我們只是增加了
標識爲convention-C

00:07:51.104 --> 00:07:53.607 
標識爲
convention-C的閉包

00:07:54.007 --> 00:07:55.609 
你能在Swift中創建傳遞它們

00:07:55.676 --> 00:07:57.678 
甚至是調用它們

00:07:58.111 --> 00:08:00.214 
這意味着你可以在Swift中

00:08:00.514 --> 00:08:02.382 
訪問全部的C APIs

00:08:02.482 --> 00:08:03.617 
以前你可不行

00:08:11.158 --> 00:08:14.494 
所以我們做了
兩件小事以提升Swift

00:08:14.561 --> 00:08:17.464 
C和Objective-C
之間的橋接能力

00:08:18.465 --> 00:08:20.634 
但是今年我們還有非常重要的新特性

00:08:20.701 --> 00:08:22.202 
在語言橋接方面

00:08:22.269 --> 00:08:23.370 
具有非常巨大的影響

00:08:24.571 --> 00:08:26.673 
最重要的當然是錯誤處理

00:08:28.175 --> 00:08:29.443 
如果你還沒聽說過

00:08:29.510 --> 00:08:33.280 
錯誤處理模型我們準備了很多

00:08:33.347 --> 00:08:37.384 
關於Cocoa的NSError
樣式和規則的課程

00:08:37.451 --> 00:08:39.152 
以及圍繞這些話題的約定

00:08:39.753 --> 00:08:41.421 
並分享我們從建立這樣一個新特性

00:08:41.688 --> 00:08:43.090 
中學到的知識

00:08:43.190 --> 00:08:45.259 
這個新特性用
“throws“關鍵字表示

00:08:46.093 --> 00:08:48.362 
這會覆蓋今天上午課程的許多內容

00:08:48.428 --> 00:08:49.763 
“有什麼新Swift”

00:08:50.130 --> 00:08:53.267 
如果你還沒有使用它

00:08:53.500 --> 00:08:55.569 
我強烈的建議你以後試試

00:08:55.636 --> 00:08:58.605 
看看錯誤處理機制是如何工作的

00:09:00.140 --> 00:09:04.211 
但是我重點要講的是它在兩種語言

00:09:04.278 --> 00:09:05.879 
混編時的應用

00:09:06.513 --> 00:09:11.151 
你要明白這並不是僅僅從
Objective-C映射到Swift

00:09:11.585 --> 00:09:15.756 
這也是Swift類庫
如何暴露給Objective-C

00:09:16.423 --> 00:09:18.292 
這是雙向映射

00:09:20.060 --> 00:09:22.329 
讓我們仔細看看這裏的返回類型

00:09:23.063 --> 00:09:26.233 
在Objective-C中錯誤約定爲

00:09:26.466 --> 00:09:30.838 
返回無效值視爲發生錯誤

00:09:31.338 --> 00:09:33.774 
當填寫“out error“參數時

00:09:33.841 --> 00:09:34.842 
會這樣

00:09:36.043 --> 00:09:38.512 
然而在Swift中這完全
包含在錯誤處理模型中了

00:09:38.579 --> 00:09:41.648 
所以在Swift返回類型中你會看到

00:09:41.715 --> 00:09:45.018 
非選擇性的對象類型

00:09:46.720 --> 00:09:50.591 
相似的在Objective-C
當沒有事務被視爲失敗事務時

00:09:51.058 --> 00:09:53.293 
你將得到一個布爾返回值

00:09:53.527 --> 00:09:56.730 
同樣的在Swift的錯誤處理中也有

00:09:56.997 --> 00:09:59.399 
你將得到一個void返回類型

00:10:01.134 --> 00:10:03.904 
現在在這些
Objective-C的例子中

00:10:03.971 --> 00:10:06.106 
既有多參數的

00:10:06.173 --> 00:10:07.941 
也有隻有一個錯誤參數的

00:10:08.509 --> 00:10:11.044 
但是還有一些case中的
方法只有一個參數

00:10:11.245 --> 00:10:12.412 
你將得到像

00:10:12.846 --> 00:10:15.415 
“請檢查資源可查到並返回錯誤”
這樣的提示

00:10:16.216 --> 00:10:18.752 
在Swift中如你所見
既然我們已經知道

00:10:18.819 --> 00:10:20.387 
使用“throws”關鍵字

00:10:20.687 --> 00:10:22.055 
方法可以返回錯誤

00:10:22.322 --> 00:10:24.024 
我們將砍下最後三個單詞

00:10:24.091 --> 00:10:25.459 
只爲你!!!

00:10:27.761 --> 00:10:30.731 
現在所有的都會有的

00:10:30.797 --> 00:10:33.600 
當你使用
NSError-star-star類型

00:10:33.967 --> 00:10:35.802 
當你真正的使用NSError約定

00:10:35.869 --> 00:10:37.704 
的基本格式

00:10:38.105 --> 00:10:39.406 
其它情況下會發生什麼？

00:10:39.973 --> 00:10:42.276 
我們只是讓事情保持像這樣

00:10:42.643 --> 00:10:45.546 
在Objective-C如果你有
NSError參數通常

00:10:45.612 --> 00:10:48.315 
它會以可選的NSError
參數出現在Swift中

00:10:48.615 --> 00:10:50.350 
你爲正在使用的任何API

00:10:50.517 --> 00:10:52.085 
來恰當的處理它

00:10:53.153 --> 00:10:56.990 
記住NSError參數符合
Swift錯誤類型協議

00:10:57.291 --> 00:11:00.761 
所以你也可以用Swift自己的
處理機制使用NSError參數

00:11:02.696 --> 00:11:05.132 
這些都顯示Swift已經準備好處理

00:11:05.499 --> 00:11:08.035 
所有來自Objective-C的報錯

00:11:09.303 --> 00:11:12.072 
但是如果我從
Objective-C調用一個方法

00:11:12.840 --> 00:11:15.943 
並且它是一個Swift方法
產生的Swift錯誤呢

00:11:18.245 --> 00:11:19.680 
現在當然了我們需要這個

00:11:19.913 --> 00:11:21.315 
然我們看看它的原理

00:11:22.783 --> 00:11:24.952 
這裏我有一個名爲“請求錯誤”
的錯誤類型

00:11:25.419 --> 00:11:28.422 
它是一個用Swift的錯誤
系統定義的新類型

00:11:28.622 --> 00:11:31.625 
它符合錯誤類型協議在這個案例中

00:11:31.758 --> 00:11:35.529 
它是一個枚舉只有一種可能性

00:11:36.864 --> 00:11:39.466 
在方法中使用這個錯誤很容易

00:11:40.100 --> 00:11:42.269 
我再定義一個“發送請求”方法

00:11:42.569 --> 00:11:44.304 
用“throws”關鍵字標識它表示

00:11:44.805 --> 00:11:48.408 
它可以失敗然後當我觸發失敗條件時

00:11:48.475 --> 00:11:50.911 
實際調用了“throw”

00:11:52.679 --> 00:11:55.015 
現在我要在
Objective-C調用這個方法

00:11:55.249 --> 00:11:56.416 
它應該能行

00:11:56.850 --> 00:11:58.085 
怎麼樣

00:12:00.187 --> 00:12:02.055 
首先是方法的名字

00:12:02.122 --> 00:12:03.423 
發生了變化

00:12:03.757 --> 00:12:05.292 
不再只是“發送請求

00:12:05.526 --> 00:12:07.694 
現在是發送請求錯誤”了

00:12:08.428 --> 00:12:09.596 
就是你將使用的名稱

00:12:09.663 --> 00:12:12.699 
前提是你的Objective-C
代碼從“發送請求這個方法開始

00:12:13.333 --> 00:12:17.104 
另外在此基礎上我們剛剛使用了

00:12:17.171 --> 00:12:19.840 
plain-old NSError
類型以及我們在Swift

00:12:19.907 --> 00:12:21.308 
中產生的錯誤

00:12:22.776 --> 00:12:26.813 
除此之外錯誤類型確實包括有用的信息

00:12:27.147 --> 00:12:30.117 
如果我們輸出帶着這個錯誤的域和代碼

00:12:30.584 --> 00:12:33.754 
我們將會知道它原來是類型

00:12:33.820 --> 00:12:36.089 
以及我們以前看到的
enum類型的原始值

00:12:38.458 --> 00:12:40.460 
現在這裏將會有一個
更加有趣的事情發生

00:12:41.028 --> 00:12:43.797 
我用ObjC 屬性去標記
enum類型的數據

00:12:44.264 --> 00:12:46.934 
這是我們添加在
Xcode 6.3的一個功能

00:12:47.267 --> 00:12:50.003 
如果你在enum上用
ObjC 屬性標記

00:12:50.504 --> 00:12:53.006 
然後它就會輸出到你所產生的頭文件上

00:12:53.607 --> 00:12:57.611 
這個頭文件暴露了swift類的
Objective-C的一面

00:12:59.580 --> 00:13:01.882 
在Xcode...抱歉
在Xcode 7中

00:13:02.182 --> 00:13:04.218 
我們已經添加了一個更有趣的
小功能在這兒

00:13:04.651 --> 00:13:07.521 
這是一個包含錯誤類型協議的enum

00:13:08.121 --> 00:13:12.392 
因此我們也將會產生一個字符串常量
去表示錯誤域

00:13:14.695 --> 00:13:17.598 
現在所有比較的大的
錯誤都已經被你在swift中標定了

00:13:17.865 --> 00:13:19.900 
你可能想爲自己的類去使用和運行這個

00:13:19.967 --> 00:13:23.136 
但是隨後從 Cocoa

00:13:23.203 --> 00:13:25.839 
回到其餘的SDKs

00:13:25.973 --> 00:13:27.140 
感到不足的錯誤

00:13:28.108 --> 00:13:30.444 
但是別擔心我們將會全力幫助你的

00:13:31.345 --> 00:13:33.080 
因此如果你出席今天早些時候的演示

00:13:33.146 --> 00:13:35.082 
你可能已經見過這種

00:13:35.482 --> 00:13:38.185 
檢查資源的可達性

00:13:38.418 --> 00:13:40.587 
並且捕捉不同錯誤情況的預檢措施

00:13:41.154 --> 00:13:43.090 
現在錯誤的類型之一

00:13:43.156 --> 00:13:46.293 
已經被列爲
“NSURLError文件不存在”

00:13:47.127 --> 00:13:49.096 
那是一個來自Cocoa的錯誤

00:13:49.696 --> 00:13:52.199 
爲什麼要使用快速符號去顯示？

00:13:53.367 --> 00:13:56.136 
好了我們已經在整個SDKS中
使用了最常見的錯誤類型

00:13:56.203 --> 00:13:58.872 
這樣可以讓你利用

00:13:58.939 --> 00:14:00.941 
Swift自己的捕捉語法去使用它們

00:14:01.508 --> 00:14:03.544 
因此在這兒你可以使用各種各樣的錯誤

00:14:03.911 --> 00:14:05.946 
你應當遠離的通常的想法就是

00:14:06.380 --> 00:14:10.017 
當你在使用Objective-C中的時候
錯誤就應該會就像NSError

00:14:10.350 --> 00:14:13.187 
而當你在使用swift的時候
它們也就應該想swift的錯誤

00:14:13.253 --> 00:14:14.221 
事情應該只是工作

00:14:16.056 --> 00:14:18.559 
因此這只是在過去的一年中

00:14:18.659 --> 00:14:21.461 
我們在互操作性所做的一些改進

00:14:21.995 --> 00:14:24.965 
所以說到我們在Objective-C
方面所做到的改進

00:14:25.265 --> 00:14:26.533 
我想把它交給 道格

00:14:34.308 --> 00:14:35.142 
謝謝你 約旦

00:14:36.076 --> 00:14:37.678 
那麼今天我們將會討論

00:14:37.978 --> 00:14:40.848 
我們這一年添加在
Objective-C方面的三個特性

00:14:41.715 --> 00:14:42.583 
這些特性能夠讓你

00:14:42.649 --> 00:14:44.384 
更好的使用
Objective-C去編程

00:14:44.451 --> 00:14:46.053 
能夠讓Objective-C 
APIs更加的優秀

00:14:46.119 --> 00:14:47.754 
讓他們更好的映入到swift中

00:14:47.921 --> 00:14:50.724 
同時提高你在使用
Objective-C的靜態類型的安全性

00:14:51.358 --> 00:14:52.759 
我們將要討論的第一件事情就是

00:14:52.993 --> 00:14:55.028 
Objective-C的
nullability

00:14:55.929 --> 00:14:58.732 
來觀察一段
Objective-C的代碼

00:14:59.700 --> 00:15:00.601 
有很多的指針

00:15:01.301 --> 00:15:02.736 
這裏面哪一個可以是零？

00:15:04.304 --> 00:15:05.372 
代碼不會告訴你

00:15:06.473 --> 00:15:07.941 
如果你繼續去閱讀文檔

00:15:08.108 --> 00:15:10.711 
如果你今天幸運的話
它今天可能會告訴你

00:15:11.945 --> 00:15:13.380 
你應當去寫一些測試

00:15:13.447 --> 00:15:16.683 
看看它可能的表現的
行爲或者可能的猜測

00:15:16.750 --> 00:15:18.185 
但是那並不是一個好的方法

00:15:18.252 --> 00:15:19.786 
在這些地方可能會缺少一些信息

00:15:20.687 --> 00:15:22.322 
當我們去年推出swift的時候

00:15:22.656 --> 00:15:25.592 
在這些實質上意味着我們不知道的

00:15:26.260 --> 00:15:28.562 
默認打開的選項中

00:15:29.263 --> 00:15:30.797 
信息的缺乏表現的更加的明顯

00:15:30.864 --> 00:15:32.332 
在swift的一面它可能是零

00:15:34.101 --> 00:15:35.469 
所以我們並沒有感到太高興

00:15:35.969 --> 00:15:39.173 
在發佈Swift 1.0之後

00:15:39.373 --> 00:15:41.975 
我們在自己的核心框架內

00:15:42.042 --> 00:15:46.380 
編寫了成千的指針

00:15:46.747 --> 00:15:48.482 
去告訴那些指針可能爲零的編譯器

00:15:48.916 --> 00:15:51.718 
經過編輯之後的接口變得更加的簡潔

00:15:52.352 --> 00:15:54.888 
現在我們使用可選擇的類型

00:15:54.988 --> 00:15:57.291 
零是你確實必須處理的一件事情

00:15:58.091 --> 00:15:59.526 
其它的一切都是不可選擇的

00:16:01.228 --> 00:16:02.596 
這仍然不是那樣的美好

00:16:02.663 --> 00:16:04.531 
因爲這些知識被編譯成編譯器

00:16:04.598 --> 00:16:06.200 
這不是你所能完成的事情

00:16:07.034 --> 00:16:11.605 
所以對Xcode 6.3來說我們爲
Objective-C引入了可空限定符

00:16:13.040 --> 00:16:15.209 
所以你可以把可空限定符

00:16:15.442 --> 00:16:17.477 
添加到C/Objective-C
的指針中

00:16:17.578 --> 00:16:19.446 
去描述是否可以接受零狀態

00:16:20.514 --> 00:16:22.416 
當然你的應用程序

00:16:22.783 --> 00:16:24.418 
確實可以做更好的通訊

00:16:24.484 --> 00:16:25.586 
它接受零麼？

00:16:25.652 --> 00:16:26.854 
這說的通麼？

00:16:27.688 --> 00:16:29.890 
它能夠幫助我們的工具

00:16:29.957 --> 00:16:32.259 
做出更好的靜態檢查去
捕捉運行時表現出來的bug

00:16:32.826 --> 00:16:35.429 
它能夠在你的
Objective-C APIs中

00:16:35.662 --> 00:16:37.064 
讓你的swift表現的更好

00:16:39.499 --> 00:16:41.602 
現在這兒有三個可空限定符

00:16:42.503 --> 00:16:45.205 
Nullable
這表明可能是空的指針

00:16:46.373 --> 00:16:48.342 
這個當然映射到一個Swift選項中

00:16:49.510 --> 00:16:50.477 
然後那兒有一個非零

00:16:50.811 --> 00:16:55.549 
這就表明零並不是一個有意義的值

00:16:57.317 --> 00:16:59.887 
現在對於一個非零指針來說

00:17:00.521 --> 00:17:02.055 
它可能最終在Objective-C
程序中最終變成0

00:17:02.122 --> 00:17:04.992 
可能它就是因爲某些時候
我們在傳遞0的時候

00:17:05.058 --> 00:17:06.292 
零通過傳遞

00:17:07.160 --> 00:17:08.694 
而這個時候已經開始運行過了

00:17:08.996 --> 00:17:11.365 
編譯器並不會因爲非空的註釋

00:17:11.531 --> 00:17:13.233 
改變它生成代碼的方式

00:17:13.567 --> 00:17:16.136 
這就表明了應用程序作者的意圖就是

00:17:16.203 --> 00:17:17.771 
零在這兒不合情理

00:17:19.573 --> 00:17:23.010 
我們也有三分之一的
null-unspecified限定符

00:17:23.877 --> 00:17:28.015 
這在無論是nullable還是
非零的情況下實際上都是正確的事情

00:17:28.549 --> 00:17:30.117 
如果我們對於指針一無所知

00:17:30.417 --> 00:17:32.786 
我們把這些映射到
那些你就可能會得到的

00:17:32.920 --> 00:17:34.855 
相同的默認打開的選項中

00:17:36.790 --> 00:17:38.492 
關於可空限定符
最重要的事情就是

00:17:38.559 --> 00:17:42.062 
我們已經在我們整個SDKs去推出了

00:17:43.363 --> 00:17:45.832 
好 所以不是
單純的覆蓋幾個核心框架

00:17:45.899 --> 00:17:48.302 
我們已經覆蓋了 SDKs的絕大部分

00:17:48.802 --> 00:17:51.738 
所以這給出了一個非常好的

00:17:51.905 --> 00:17:54.241 
在其他地方都有關係和
non-optionals

00:17:54.308 --> 00:17:56.210 
正確optionals的
swift經驗

00:17:56.944 --> 00:17:59.213 
對於你的
Objective-C代碼來說

00:17:59.279 --> 00:18:01.048 
這意味着你已經開始看到

00:18:01.114 --> 00:18:02.916 
已經被誤用的APIs的新的警告

00:18:03.584 --> 00:18:09.323 
因此 比如你看到一個你已經把
零傳送到你並不期望的路徑的警告

00:18:09.389 --> 00:18:11.091 
這不是應用程序協議的一部分

00:18:12.125 --> 00:18:14.528 
現在可能傳遞過一個以前運行過的零

00:18:14.962 --> 00:18:16.330 
它可能會繼續工作

00:18:16.830 --> 00:18:18.165 
但是你應當注意這些警告

00:18:18.232 --> 00:18:20.234 
因爲這些應用程序的作者已經告訴過你

00:18:20.334 --> 00:18:22.636 
你不應當在這兒傳遞零這裏必須要小心

00:18:22.703 --> 00:18:24.171 
因爲它將來可能會改變

00:18:26.540 --> 00:18:29.877 
現在,比方說你想添加
可空限定符到你的頭文件中去

00:18:30.210 --> 00:18:33.080 
這個開始的地方就是被編輯的區域

00:18:33.647 --> 00:18:36.483 
因此這些將會被“NS-assume
 non-null begin”

00:18:36.550 --> 00:18:37.885 
所描述
NS-假設非空結束

00:18:38.519 --> 00:18:41.121 
包括你用的這些宏的頭文件

00:18:42.122 --> 00:18:44.057 
這樣做就是允許編譯器

00:18:44.124 --> 00:18:46.860 
對未註明的指針

00:18:46.927 --> 00:18:48.529 
去採用默認的假設

00:18:49.263 --> 00:18:51.665 
所以如果你有一個單級指針

00:18:51.732 --> 00:18:54.468 
那麼將會被假定爲非空
因爲我們發現

00:18:54.535 --> 00:18:57.738 
對於我們絕大多數的APIs來說
零並不是一個有意義的值

00:18:59.573 --> 00:19:01.475 
另一個有趣的特殊情況下就是

00:19:01.542 --> 00:19:03.177 
這裏是一個
NSError-star-star

00:19:03.243 --> 00:19:06.213 
參數當你在對Objective-C
的錯誤進行處理的時候

00:19:06.446 --> 00:19:08.448 
這些可以在兩個級別上被認爲是空的

00:19:08.515 --> 00:19:11.285 
因爲這是你和他們爲空性工作的方式

00:19:12.719 --> 00:19:15.022 
現在默認是良好的
他們應該承擔大部分的情況下

00:19:15.556 --> 00:19:18.292 
但是這就意味着
你必須去註釋異常的情況

00:19:18.759 --> 00:19:22.029 
所以我們把這些超視圖的
屬性標記爲nullable

00:19:22.429 --> 00:19:24.698 
當然不是每個視圖都有一個超視圖

00:19:24.831 --> 00:19:25.799 
零在這兒是有意義的

00:19:27.067 --> 00:19:29.536 
衝擊測試的時間有個可空參數

00:19:30.170 --> 00:19:32.573 
你不需要通過一個事件去做衝擊測試

00:19:32.873 --> 00:19:34.274 
當然結果是可空

00:19:34.641 --> 00:19:36.443 
因爲零在這個地方是有意義的

00:19:36.510 --> 00:19:37.978 
這意味着我們沒有擊中任何東西

00:19:40.080 --> 00:19:42.716 
現在這就是null-unspecified
出現的地方

00:19:43.050 --> 00:19:44.318 
說你正在編輯一個頭文件

00:19:45.419 --> 00:19:50.524 
你將會遇見一些
一直都存在的很奇怪的事情

00:19:50.891 --> 00:19:52.659 
你不知道它

00:19:53.193 --> 00:19:54.628 
它沒有被記錄下來

00:19:55.195 --> 00:19:57.798 
可能它正在做一些特別有趣的事情

00:19:57.865 --> 00:20:00.300 
這些事情傳遞着可能會或者不會工作

00:20:00.367 --> 00:20:02.236 
它五年之前退役時才能回答的零

00:20:03.737 --> 00:20:05.372 
仍然有使用空未指明的很大空間

00:20:06.039 --> 00:20:07.641 
只是要把它標記成空未指明

00:20:07.841 --> 00:20:11.545 
這就意味着“我考慮過這個問題
但是我沒有得出答案”

00:20:11.879 --> 00:20:15.949 
最好的事情就是在swift中
保持它默認未開的選擇

00:20:17.451 --> 00:20:18.685 
保持它是空未指明的

00:20:18.919 --> 00:20:20.254 
你可以稍後再回來

00:20:20.487 --> 00:20:21.788 
所以當編輯的時候嗎你確實像

00:20:22.055 --> 00:20:23.624 
更早的得到一些好的廣度

00:20:23.857 --> 00:20:26.426 
去讓你的 APIs 更好更快

00:20:28.662 --> 00:20:31.698 
現在 當你去到C

00:20:31.965 --> 00:20:33.734 
事情就會變得有點模糊

00:20:34.501 --> 00:20:36.837 
所以我們有了所有相同限定符

00:20:36.904 --> 00:20:38.639 
但是他們之前需要下劃線

00:20:39.840 --> 00:20:42.843 
現在這些雙下劃線的關鍵字這些限定符

00:20:42.910 --> 00:20:45.179 
可以被用於任何地方任何指針

00:20:45.746 --> 00:20:50.551 
這個地方有個重要的規則就是

00:20:51.318 --> 00:20:54.188 
限定符適用於右指針

00:20:54.254 --> 00:20:56.857 
constor或者volatile
將會去應用那個指針

00:20:57.758 --> 00:21:00.827 
這對於這樣的
參數外指針是nullable的

00:21:00.961 --> 00:21:02.796 
參數外指針值是nullable的

00:21:03.363 --> 00:21:05.999 
多級指針是非常重要的

00:21:06.767 --> 00:21:10.437 
因爲只要參數num的值也是
零你就可以在這個參數中傳遞零

00:21:12.606 --> 00:21:15.876 
內部指針是空的因爲當你傳遞數組時

00:21:15.943 --> 00:21:19.847 
所有的使用CF數組的值

00:21:19.913 --> 00:21:21.081 
都必須是非空的

00:21:25.118 --> 00:21:26.653 
這就是我們要講的關於可空的東西

00:21:27.421 --> 00:21:29.389 
今年我們已經把它推送到
我們的 SDKs 中

00:21:29.456 --> 00:21:30.757 
所以你能夠在

00:21:30.824 --> 00:21:32.960 
在Objective-C 和
Swift中獲得更好的體驗

00:21:33.260 --> 00:21:35.329 
我們強烈的推薦你使用它

00:21:35.395 --> 00:21:37.865 
去提高你自己的
Objective-C APIs

00:21:37.931 --> 00:21:40.067 
特別是爲了一個更好的
Swift 體驗

00:21:42.336 --> 00:21:44.271 
好了 讓我們開始下一個特性

00:21:44.671 --> 00:21:45.506 
這是一個大的

00:21:47.608 --> 00:21:49.543 
對於Objective-C來說
是一個重量級的泛型

00:21:51.044 --> 00:21:52.479 
現在這個特性的原型

00:21:52.713 --> 00:21:54.581 
它其實是相當容易去激勵的

00:21:55.015 --> 00:21:55.849 
集合

00:21:57.050 --> 00:21:59.686 
這裏我們有
subviews的NSArray

00:22:01.555 --> 00:22:02.422 
數組中的是什麼？

00:22:03.257 --> 00:22:04.625 
我們不說在數組中的東西

00:22:05.058 --> 00:22:07.561 
我們把這個拿入到 Swift中你說

00:22:07.761 --> 00:22:09.463 
嗯 這是任何對象的數組

00:22:09.563 --> 00:22:11.465 
它仍然沒有告訴我任何事情

00:22:13.600 --> 00:22:15.269 
我已經投了很多 那就是他告訴我的

00:22:15.903 --> 00:22:19.873 
當然我們有這種常見的

00:22:19.940 --> 00:22:21.475 
請求類型的集合

00:22:22.242 --> 00:22:25.112 
因爲人們總是說想說
我有一個數組的觀點

00:22:25.479 --> 00:22:27.347 
我有一個從字符串關鍵字映射到

00:22:27.414 --> 00:22:29.583 
與圖片相關的關鍵字的字典

00:22:30.551 --> 00:22:32.986 
這可能是過去十年當中

00:22:33.053 --> 00:22:34.988 
要求最高的
Objective-C特性

00:22:35.756 --> 00:22:37.691 
所以現在我們最終推出

00:22:38.125 --> 00:22:39.826 
重量級泛型的Objective-C

00:22:40.327 --> 00:22:42.663 
所以這是一個可以改善
你的APIs的表達性

00:22:42.729 --> 00:22:44.965 
的一個最通用的語言特性

00:22:45.799 --> 00:22:48.769 
這讓集合的方式更容易去使用

00:22:48.836 --> 00:22:51.972 
現在我們有了所有靜態安全集合類型

00:22:53.607 --> 00:22:54.474 
讓我們看一看

00:22:55.542 --> 00:22:57.344 
所以這是我們的
subviews的屬性

00:22:58.545 --> 00:23:00.581 
這是一組UI視圖

00:23:01.081 --> 00:23:04.885 
我們只是把UI-view-star
UIV指針放置在尖括號中

00:23:05.219 --> 00:23:07.454 
相同的語法你已經看到過了
哎喲 抱歉

00:23:15.262 --> 00:23:17.998 
相同的語法你
可能從swift和C++

00:23:18.065 --> 00:23:20.601 
或者C-Sharp等語言當中看到過

00:23:20.801 --> 00:23:21.969 
是的 我們完全清楚

00:23:22.035 --> 00:23:24.071 
尖角括號是引用協議限定符

00:23:24.271 --> 00:23:25.305 
別擔心 我們知道這一點

00:23:28.709 --> 00:23:31.945 
所以這就向 Object-C 中
引入了更多的類型信息

00:23:32.346 --> 00:23:33.981 
當然這一點反映到Swift中

00:23:34.047 --> 00:23:36.049 
就有了更多優雅的類型信息

00:23:36.383 --> 00:23:38.485 
但我真正想談談
其對Objective-C的影響

00:23:38.585 --> 00:23:41.288 
因爲這一功能對於
Objective-C來講確實有用

00:23:41.755 --> 00:23:43.690 
現在我們來談談類型安全

00:23:46.059 --> 00:23:46.894 
下面是一個例子

00:23:47.361 --> 00:23:50.998 
所以我要取得任何一個
URL 或 NSURL 的路徑組件

00:23:51.064 --> 00:23:53.166 
然後將其放入
進入一個陣列的 URLs 之中

00:23:54.034 --> 00:23:56.904 
如果我不知道這個應用編程接口
這種做法看起來就近乎是合理的

00:23:57.404 --> 00:23:59.773 
而且要等一段時間我才能
得到運行錯誤的信息

00:23:59.840 --> 00:24:02.109 
一個無法確認的選擇器會指出不對

00:24:02.176 --> 00:24:04.645 
我在使用路徑組件的方式上
犯了一個很大的錯誤

00:24:05.412 --> 00:24:07.147 
有了類型集合體並且 當然

00:24:07.214 --> 00:24:09.816 
我們在我們的整個軟件開發包中
推出了很多類型集合體

00:24:10.384 --> 00:24:12.686 
現在你就會及時得到一個警告
在錯誤發生時

00:24:13.020 --> 00:24:14.288 
告訴你到底你做錯了什麼

00:24:16.490 --> 00:24:19.726 
還有許多其他情況比如說
我要建立一個 NS 字符串組成的

00:24:19.860 --> 00:24:24.498 
不可變陣列可我傻傻地又要
往那個陣列中加個東西

00:24:24.731 --> 00:24:26.667 
卻沒有先把它變成一個字符串

00:24:27.768 --> 00:24:29.770 
編譯器將會告訴我不對

00:24:29.837 --> 00:24:31.338 
你不能把一個 NSNumber

00:24:31.405 --> 00:24:33.073 
放到這個 NS 可變字符串陣列中

00:24:33.340 --> 00:24:34.474 
這不合理

00:24:36.210 --> 00:24:38.579 
實際上編譯器
對於此處與 Cocoa 集合體有關

00:24:39.079 --> 00:24:42.216 
的語義有着相當深入的瞭解

00:24:42.983 --> 00:24:46.320 
現在我們看看這裏的例子
我們有一個視圖陣列

00:24:46.954 --> 00:24:48.155 
我們還有一個應答陣列

00:24:48.222 --> 00:24:50.757 
我們將視圖陣列中的元素
一個個分配到應答陣列中

00:24:51.758 --> 00:24:54.261 
沒有問題 因爲每個視圖也是一個應答

00:24:54.328 --> 00:24:55.262 
看起來挺好

00:24:55.863 --> 00:24:56.697 
沒有問題

00:24:58.265 --> 00:25:00.901 
讓我們用一個可變的變式
來做同樣的事情

00:25:02.336 --> 00:25:04.872 
所以我們用那個存儲的可變
視圖陣列將其元素分配給

00:25:05.706 --> 00:25:09.443 
存儲的可變應答陣列

00:25:11.144 --> 00:25:11.979 
這裏有個陷阱

00:25:12.679 --> 00:25:14.147 
這個陷阱是 當然 我可以對

00:25:14.214 --> 00:25:17.050 
我所存儲的應答進行轉換

00:25:17.518 --> 00:25:20.320 
在其中放一些不是視圖的應答元素

00:25:21.822 --> 00:25:24.391 
這樣對之後的某個過程
事情就會變得非常混亂

00:25:24.491 --> 00:25:26.159 
那個它正在查看的視圖陣列

00:25:26.793 --> 00:25:28.562 
中有個一個視圖控制器元素不是視圖

00:25:29.930 --> 00:25:31.331 
編譯器也瞭解這一點

00:25:31.532 --> 00:25:33.934 
它會在程序初始化時抱怨在這裏

00:25:34.201 --> 00:25:37.137 
雖然用不可變陣列來完成這一任務

00:25:37.371 --> 00:25:40.774 
很安全因爲他們不會

00:25:40.874 --> 00:25:43.210 
在你不注意時改變可用其變體可變陣列

00:25:43.310 --> 00:25:44.344 
來做這些就不安全

00:25:46.380 --> 00:25:49.016 
好你其實已經親眼見過你需要的一切

00:25:49.316 --> 00:25:50.951 
使你能夠在你的整個應用程序中

00:25:51.018 --> 00:25:53.120 
使用輕量泛型且類型化的集合體

00:25:53.520 --> 00:25:55.789 
但是現在來看看
我們怎樣在Foundation 中

00:25:55.856 --> 00:25:57.257 
使用這一方法

00:25:58.458 --> 00:26:00.360 
來實際上創造類型化的集合體

00:26:00.460 --> 00:26:02.229 
因爲這裏的該功能是泛型的

00:26:02.829 --> 00:26:04.431 
類型化的集合體是其結果之一

00:26:04.731 --> 00:26:07.201 
所以在這裏我們有 NSArray
因爲你習慣於見到它

00:26:08.435 --> 00:26:11.305 
現在我們要
基於存儲在 NSArray 中的

00:26:12.472 --> 00:26:13.907 
對象的類型將其參數化

00:26:14.641 --> 00:26:15.976 
這次我們又要使用尖角括號

00:26:16.043 --> 00:26:17.377 
這裏我們只是引入一個名字

00:26:18.045 --> 00:26:19.847 
這一名稱 我們可以在整個界面上使用

00:26:20.147 --> 00:26:23.417 
當然索引處是對象
返回的也會是對象類型

00:26:24.117 --> 00:26:26.320 
如果我們在這裏添加其他的方法

00:26:27.054 --> 00:26:29.389 
當你用一些對象來將你的陣列初始化

00:26:29.456 --> 00:26:32.025 
那個 C 陣列就會包含對象

00:26:32.960 --> 00:26:34.194 
通過添加對象來使用陣列

00:26:34.261 --> 00:26:36.897 
你放入一個新的對象
你獲得一個NSArray陣列的對象

00:26:36.964 --> 00:26:38.465 
所以它的組造非常非常順利

00:26:39.633 --> 00:26:42.436 
當然這也適用於類別和擴展

00:26:43.470 --> 00:26:46.340 
在這裏我們有一個NSDictionary
類別以密匙類型和對象類型

00:26:46.406 --> 00:26:49.176 
進行參數化而且我們還在這裏

00:26:49.243 --> 00:26:52.079 
使用對象類型替代密匙類型
在這裏接受一個密鑰類型

00:26:52.379 --> 00:26:55.349 
返回一個可以爲 null 
的對象類型 因爲這裏

00:26:55.582 --> 00:26:58.085 
當然空值是有意義的
因而我們要使我們的應用程序接口中

00:26:58.151 --> 00:26:59.052 
包含這一信息

00:27:00.521 --> 00:27:04.124 
現在當然還有一些
現有的在 NSDictionary

00:27:04.191 --> 00:27:07.694 
和NSArray等等基礎上定義的
類別也許你自己就會有一些

00:27:08.095 --> 00:27:09.930 
那些會和過去一樣可以繼續使用

00:27:10.330 --> 00:27:12.966 
他們不能以任何方式訪問類型參數

00:27:13.834 --> 00:27:15.969 
但他們也根本不會改變行爲

00:27:16.036 --> 00:27:17.671 
他們將會像過去一樣繼續發揮作用

00:27:19.273 --> 00:27:22.042 
這使我想到了向後兼容性

00:27:23.410 --> 00:27:26.013 
所以整個輕量泛型功能都基於

00:27:26.079 --> 00:27:27.281 
一個類型擦除模式之上

00:27:27.681 --> 00:27:29.383 
這意味着編譯器擁有全部這些

00:27:29.449 --> 00:27:31.985 
豐富的靜態類型信息但當編譯器要

00:27:32.052 --> 00:27:34.121 
生成代碼時它就會清除這些信息

00:27:34.988 --> 00:27:37.291 
這對 Objective-C 來講
有很大的好處

00:27:37.624 --> 00:27:39.893 
我們不需要對
Objective-C 的運行

00:27:39.960 --> 00:27:43.297 
進行任何更改就可實現這一功能

00:27:43.931 --> 00:27:46.099 
這意味着我們可以在類型集合體中

00:27:46.166 --> 00:27:48.335 
推出泛型你可以在你的所有
應用程序中採用之

00:27:48.402 --> 00:27:52.172 
這不會影響你將你的應用
部署回各種現有的

00:27:52.239 --> 00:27:54.274 
操作系統上的能力

00:28:03.050 --> 00:28:04.852 
這些從那個描述中看起來不太明顯

00:28:04.918 --> 00:28:06.653 
當然我們也不會

00:28:06.987 --> 00:28:08.822 
以任何方式改變程序共同生成

00:28:08.889 --> 00:28:11.124 
我們不會在Objective-C中
添加運行中的檢查

00:28:11.191 --> 00:28:13.293 
這種做法在
Objective-C中沒有意義

00:28:13.861 --> 00:28:16.163 
我們只是要保持
完全的二進制碼兼容性

00:28:16.230 --> 00:28:19.132 
因此採用此功能用好那些警告
因爲他們能幫助你

00:28:19.199 --> 00:28:20.601 
避免犯下可怕的錯誤

00:28:23.403 --> 00:28:27.975 
你可以非常 非常 非常緩慢地採用之

00:28:28.509 --> 00:28:30.677 
我覺得這是最好的說法

00:28:31.512 --> 00:28:33.280 
所以除了二進制代碼的兼容性之外

00:28:33.347 --> 00:28:35.282 
我們還要提供源代碼的兼容性

00:28:35.616 --> 00:28:38.018 
因爲我們是通過我們的
軟件開發包來推出這些功能的

00:28:38.085 --> 00:28:40.687 
我們不想讓你不得不
更新你所有的源代碼

00:28:40.754 --> 00:28:42.356 
以便在各處都使用這一功能

00:28:42.656 --> 00:28:44.091 
我們希望你逐步採用它

00:28:44.191 --> 00:28:45.726 
哪裏你覺得合理你就在那裏使用它

00:28:46.059 --> 00:28:48.662 
因此我們在該語言中
提供這些隱式轉換

00:28:49.029 --> 00:28:52.266 
使你可以添加類型參數或將其去除

00:28:54.168 --> 00:28:56.136 
好嗎？另外這樣做
不會帶來任何運行成本

00:28:56.537 --> 00:28:59.506 
但在你需要時 它可以讓你
進入和離開泛型系統

00:28:59.806 --> 00:29:01.842 
因此你所有的新代碼都可以
用泛型來編寫

00:29:01.942 --> 00:29:03.477 
而且如果你不想要去碰你舊的代碼

00:29:03.577 --> 00:29:05.379 
那完全沒有問題這不會改變

00:29:07.514 --> 00:29:10.817 
好吧 我們還要談談最後的一個功能
這一功能比較酷

00:29:12.819 --> 00:29:14.454 
是這種的類型

00:29:17.224 --> 00:29:19.693 
實際上來自於我們
在輕量泛型方面所作的工作

00:29:20.360 --> 00:29:22.262 
於是我們起步之處當然是

00:29:22.930 --> 00:29:25.599 
將不具類型的集合體用於子視圖

00:29:26.200 --> 00:29:28.869 
也有這樣的代碼先去抓取一個視圖

00:29:28.936 --> 00:29:30.337 
之後向其發送一些信息

00:29:31.171 --> 00:29:32.940 
此代碼是好的今天仍能運行

00:29:34.541 --> 00:29:37.010 
我們進行下一步做了這些註釋說 好吧

00:29:37.077 --> 00:29:41.515 
子視圖包含用戶界面視圖
所以我們被警告了

00:29:44.051 --> 00:29:45.886 
編譯器完全有正當理由

00:29:45.953 --> 00:29:46.987 
來發出這一警告

00:29:48.088 --> 00:29:51.859 
它現在知道
第一個子視圖是個用戶界面視圖

00:29:52.893 --> 00:29:56.463 
它不可能知道
你知道那是一個用戶界面按鈕

00:29:56.763 --> 00:29:58.432 
且會實際上對這一選擇器做出反應

00:29:59.499 --> 00:30:02.970 
因此雖然編譯器是正確的

00:30:03.270 --> 00:30:05.072 
可對所有這些代碼

00:30:05.439 --> 00:30:07.040 
發出警告並不一定有什麼用處

00:30:07.107 --> 00:30:09.676 
你會得到大量的警告
其中大部分都是良性的

00:30:09.743 --> 00:30:11.545 
你會需要在各處使用各種轉換

00:30:12.613 --> 00:30:14.681 
這真的迫使我們考慮 ID

00:30:14.848 --> 00:30:17.384 
以及如何將它作爲
一個應用程序接口合同

00:30:18.752 --> 00:30:20.521 
所以我們在這方面舉個小的簡單的示例

00:30:20.587 --> 00:30:23.257 
讓我們來談談 NSApp
這是 Cocoa 中的那個全球變量

00:30:23.323 --> 00:30:25.993 
使你能夠訪問
你的NSApplication實例

00:30:26.927 --> 00:30:32.799 
現在這真正的意味是NSApp
是NSApplication的

00:30:32.966 --> 00:30:34.034 
一個子類別

00:30:34.168 --> 00:30:35.903 
但我們無法向類型系統解釋這一點

00:30:36.803 --> 00:30:40.574 
使用 kindof 類型我們可以
在Objective-C中準確表達這一點

00:30:43.043 --> 00:30:44.011 
這意味着什麼？

00:30:44.945 --> 00:30:47.247 
這意味着NSApp是某種應用程序

00:30:47.581 --> 00:30:51.852 
所以我們要賦予它
一些有限的行爲 如ID

00:30:53.353 --> 00:30:56.723 
所以我有了一個NSApp當然我可以
將它轉換成一個 NSObject

00:30:56.924 --> 00:30:59.960 
因爲每個NSApplication
都是一個 NSObject

00:31:00.460 --> 00:31:02.729 
在這裏重要的部分
也就是類似 ID 的行爲

00:31:02.996 --> 00:31:05.666 
是將 NSApplication
隱式向下轉換成

00:31:06.133 --> 00:31:08.001 
你的
MyApplication子類別

00:31:09.102 --> 00:31:09.937 
這樣好

00:31:10.003 --> 00:31:13.040 
我們想要這種行爲模式是因爲
這就是NSApp一直的工作模式

00:31:13.707 --> 00:31:16.310 
現在我們不會允許的
是一些愚蠢的交叉轉換

00:31:16.410 --> 00:31:19.446 
您試過在一個字符串中
使用 NSApp 嗎？

00:31:19.513 --> 00:31:22.049 
這不是一個NSApplication
且永遠也不會是

00:31:22.249 --> 00:31:23.650 
所以你可以在那裏提出一個警告

00:31:25.185 --> 00:31:27.354 
當然與此同來的是一種想法

00:31:27.421 --> 00:31:30.824 
你可以與NSApp交換信息 並
得到NSApplication中的

00:31:31.091 --> 00:31:33.927 
所有方法其各種超類別和其各種子類別

00:31:35.796 --> 00:31:37.731 
現在使用kindof類型
我們實際上發現

00:31:37.965 --> 00:31:39.366 
這比 ID 更有用的多

00:31:39.700 --> 00:31:43.537 
因爲它會在應用程序接口合同中
給你更多的類型信息

00:31:44.104 --> 00:31:46.707 
這一點對 Swift 和 
Objective-C來講都很好

00:31:47.074 --> 00:31:49.343 
所以在這裏我們有這個
NSTableView 方法

00:31:49.409 --> 00:31:51.311 
有列行和
 makeIfNecessary

00:31:51.612 --> 00:31:52.746 
它總是返回到 ID

00:31:52.813 --> 00:31:54.648 
因爲這一隱含的向下轉換類型的行爲

00:31:54.715 --> 00:31:55.549 
是重要的

00:31:56.416 --> 00:31:59.386 
那麼現在我們可以將其重
寫成一個kindof NSView

00:31:59.553 --> 00:32:03.857 
所以返回某種NSView
而從 Swift 來講

00:32:04.191 --> 00:32:06.460 
現在我們要返回
一個選擇性的 NSView

00:32:06.827 --> 00:32:09.196 
這對 Swift 來講 是個正確的

00:32:09.963 --> 00:32:12.132 
應用程序接口且它可以在
Objective-C中完美地工作

00:32:12.399 --> 00:32:13.834 
讓我們將其帶回我們最初的

00:32:13.901 --> 00:32:15.068 
有關輕量泛型的例子

00:32:15.602 --> 00:32:20.874 
這裏我們有我們的各種子視圖稱爲
UIViews的一個NSArray

00:32:21.208 --> 00:32:25.345 
好吧現在我們可以說它是
一個NSArray的kindof UIViews

00:32:25.946 --> 00:32:28.182 
這樣我們就在Object-C和
Swift中得到了一個更強大的

00:32:28.248 --> 00:32:29.349 
應用程序接口

00:32:30.217 --> 00:32:32.986 
獲知這一屬性是什麼會容易很多

00:32:34.288 --> 00:32:37.391 
但你不會造成任何虛假
的警告 因爲你依舊會有

00:32:37.457 --> 00:32:39.993 
從 ID 而來的好的隱式的
向下類型轉換行爲

00:32:42.296 --> 00:32:43.830 
希望這一點兒會讓你提出一個問題

00:32:46.200 --> 00:32:48.535 
我真的該在應用編程
接口中使用 ID 嗎？

00:32:50.037 --> 00:32:52.573 
多年以來我們實際上
一直在推出很多功能

00:32:52.639 --> 00:32:56.210 
在各種重要的情況下
比 ID 能夠給出

00:32:56.276 --> 00:32:59.046 
更爲具體的類型信息

00:33:00.047 --> 00:33:01.782 
且在我們推出Arc 的同一年

00:33:01.882 --> 00:33:03.383 
我們推出了 instance 類型

00:33:04.117 --> 00:33:06.386 
用於讓你調用的方法
返回與 self 相同的

00:33:06.453 --> 00:33:08.322 
動態類型

00:33:09.990 --> 00:33:11.692 
今年我們正在推出類型集合體

00:33:11.758 --> 00:33:14.161 
這將消除 ID 的很多用途

00:33:14.595 --> 00:33:17.197 
從我們自己的應用編程接口我們
一直在推出這些功能

00:33:17.531 --> 00:33:20.234 
當然當你採用這一功能時
在你自己的應用編程接口上也是一樣

00:33:21.101 --> 00:33:24.204 
我們現在從 kindof X
通過隱式向下轉換

00:33:24.371 --> 00:33:26.073 
談談 X 的任何子類別

00:33:26.773 --> 00:33:29.176 
所以你可以保持你代碼繼續工作

00:33:29.576 --> 00:33:32.446 
起碼所有那些實際上
起着作用又沒表現怪異的代碼

00:33:33.180 --> 00:33:34.815 
但是會有一個更好應用編程接口合同

00:33:35.415 --> 00:33:38.185 
而且各種協議已存在於
Objective-C中很長一段兒時間

00:33:38.252 --> 00:33:41.855 
而使用某個協議的 ID是明白地說

00:33:41.922 --> 00:33:43.357 
我不在乎一個類別的類型是什麼

00:33:43.423 --> 00:33:44.992 
它只是必須要符合這一協定

00:33:46.627 --> 00:33:49.696 
所以有一個大類的用途適合於 ID

00:33:50.130 --> 00:33:51.231 
那是當你真正的意思

00:33:51.298 --> 00:33:53.867 
確實是一個任何類型的對象

00:33:54.234 --> 00:33:56.537 
那就沒有任何靜態類型
信息可以把這一點

00:33:56.603 --> 00:33:57.638 
表達得更好

00:33:58.605 --> 00:34:02.776 
這樣這方面的一個典型的例子
是用戶信息字典

00:34:03.143 --> 00:34:07.881 
你用字符串做密匙且
你用 ID 做值

00:34:08.681 --> 00:34:09.683 
這完全合理

00:34:09.750 --> 00:34:12.286 
因爲對不同的密鑰其值會有

00:34:12.351 --> 00:34:14.521 
不同的類型而這種類型你只能夠

00:34:14.588 --> 00:34:15.589 
動態地確定

00:34:19.960 --> 00:34:20.793 
讓我們總結一下

00:34:21.061 --> 00:34:24.864 
所以我們對Swift和
Objective-C都做了大的改進

00:34:25.032 --> 00:34:27.501 
這些語言是一起設計並一起進化

00:34:27.935 --> 00:34:29.636 
以使其可以完美地一起工作

00:34:30.404 --> 00:34:33.607 
而Xcode和其支持工具將會幫助你

00:34:34.007 --> 00:34:37.978 
在這兩種語言之間遊移
這是對你的工作流最好的方法

00:34:39.446 --> 00:34:42.081 
我們已經爲Objective-C
推出了很多強大的功能

00:34:42.149 --> 00:34:44.083 
我們強烈建議你
使你的使用Objective-C的

00:34:44.150 --> 00:34:44.985 
情況現代化

00:34:45.518 --> 00:34:48.121 
這些新的語言功能
給你提供好得多的應用編程接口

00:34:48.188 --> 00:34:51.091 
你會在我們的應用編程接口和你自己
應用編程接口中看到這一點

00:34:51.158 --> 00:34:53.527 
這些新功能還會讓你的程序
具有更好的類型安全性

00:34:53.594 --> 00:34:55.529 
讓你能夠儘早找出問題
而不用等他們在程序

00:34:55.596 --> 00:34:57.865 
運行時以可怕的無法
確認的選擇器的形式表現出來

00:34:59.166 --> 00:35:01.535 
且使用這些功能可以
真的使你在 Swift 中的

00:35:01.602 --> 00:35:03.437 
Objective-C接口變得優美

00:35:03.504 --> 00:35:06.673 
從而讓你編程時
獲得最好的 Swift 體驗

00:35:08.175 --> 00:35:12.613 
如需更多的信息請聯繫我們的傳道人

00:35:12.713 --> 00:35:15.048 
Stefan Lesser
查找相關文檔

00:35:15.115 --> 00:35:16.783 
或者通過我們的網上論壇與我們聯繫

00:35:18.485 --> 00:35:19.653 
還有很多有關的課程講授

00:35:19.720 --> 00:35:21.655 
Swift 和 Cocoa 中
有什麼新的東西

00:35:21.855 --> 00:35:23.790 
這裏有很多很棒的Swift課程

00:35:24.391 --> 00:35:25.225 
謝謝