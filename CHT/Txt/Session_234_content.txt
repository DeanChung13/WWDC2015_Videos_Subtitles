構建基於文檔的app
謝謝
下午好
我是邁克·赫斯一名來自iOSApps和框架團隊的軟件工程師
今天我和約翰尼斯·福特曼一起
在這裏給大家講講怎樣讓你的基於文檔的app脫穎而出
今天我們給你們寫了一些示例代碼會展示給你們
如何構建一個基於文檔的app的兩個主要元件
首先我們要向你演示如何構建一個很棒的“文檔瀏覽器”
這樣你的用戶就可以很快找到他們感興趣的文檔
需要處理的文檔
其次我們要向你們演示如何構建一個能夠和文檔正確進行交互
協調處理併發閱讀程序和寫入程序比如iCloud驅動守護進程
這樣一個很棒的文檔編輯器
我們稍後會深入講一下iCloud驅動守護進程
首先我們來看看“文檔瀏覽器”
那麼什麼是基於文檔的app？
我們認爲一個文檔就是一個單一的獨立的實體
用戶也把它理解爲一個單一的實體
那麼基於文檔的app就是一個能夠管理這些文檔列表、
把文檔展示給用戶以便用戶對它們進行
查看 編輯 重命名的這樣一個app
比如說Keynote就可以對Keynote文檔列表
進行管理
而Numbers這個應用程序就可以管理Numbers電子表格文檔列表
就連Garage Band也可以對Garage Band歌曲文檔進行管理
我們把這些都看作基於文檔的app
現在我們就來深入講一講我們如何構建我們的“文檔瀏覽器”
一個很棒的“文檔瀏覽器”有四個主要元件
首先我們希望能夠以對我們的用戶
有意義的方式列出我們的文檔就像我們在這個
示例代碼中這樣根據文檔名對文檔進行了分類
我們的用戶就可以理解我們的app的流程
其次我們認爲你應該使用縮略圖這樣文檔可見性
可以很棒你的用戶只需要一瞥
就可以快速找出他們感興趣的文檔
需要處理的文檔
第三我們想要展示我們的app中所有可用的文檔
包括位於其它app的容器內的文檔
比如示例中的這個文檔它是位於
共享iCloud Drive容器上
第四，我們認爲保存一個最近訪問的文檔列表
是個不錯的主意這樣用戶就可以快速返回
他們當前正在處理的文檔
現在我們看看怎樣找出我們的
“文檔瀏覽器”上的文檔
一個笨辦法可能是使用NSFileManager嘗試列出
你在雲端的文檔
但是這些結果是不完整的
比如說在iCloud有一個文檔的概念
文檔位於那裏 但是內容還沒有實現
本地可見的文檔就是說
還沒有下載到磁盤上的文檔
NSFileManager並不能正確獲得這些文檔
此外如果你試圖通過NSFileManager來列出你的文檔
那麼外部文檔就不會包括進來
那麼你列出的也就不是你的app可用的所有的文檔
我們來快速看一下
假如說你用的是NSFileManager API
如果你用的是NSFileManager你可能會獲得文檔一
以及這裏的文檔二它們都已經完整下載到了
我們的app的容器的硬盤上
但是你遺漏了位於iCloud的
文檔三這個文檔
並且你也遺漏了位於另一個app容器上的文檔四
而我們的用戶已經授予了你的app訪問那個文檔的權限
因此當你列出你的文檔時你肯定不會想用NSFileManager API
你想用的肯定是NSMetadataQuery
我們來看看NSMetadataQuery的工作原理
NSMetadataQuery會獲得所有你的app可用的文檔
包括位於iCloud的文檔三
以及位於另一個app的容器但是用戶已經授權了我們的
app查看那個文檔權限的文檔四
重點要注意的是這裏還有個文檔五同樣位於另一個app的容器
但是用戶並未授予我們的app查看那個文檔的權限
文檔五並沒有包括在NSMetadataQuery結果中
因爲如果我們把那個文檔展示給用戶
那就構成了隱私泄漏
讓我們用NSMetadataQuery
找出我們位於雲端的文檔
那麼流程是怎樣的呢？
首先你要創建你的NSMetadataQuery
然後NSMetadataQuery就會經過一個初始收集階段
列出所有當前對你的app可用的文檔
初始收集階段完成後
你會得到一條通知然後你只需要在你的app的UI
主線程上把這些初始文檔顯示出來就可以了
但是NSMetadataQuery並不是到此就完事了
此外當雲端狀態發生變更時你會收到更新通知
比如在這裏iCloud Drive守護程序
向我們的app的容器內下載了一個新文檔
我們就在我們的NSMetadataQuery
上收到了關於這個文檔的通知
然後你只需要計算變更動畫
比如在這裏我們可能想要向我們的CollectionView
插入一個CollectionView單元
然後只需要把這個更新過的UI顯示在我們的主線程上
既然我們已經知道了怎樣找出我們的文檔
我們再來看看怎樣用文檔縮略圖
讓我們的UI更棒
我們認爲在你的UI顯示縮略圖是一個不錯的主意
因爲它可以給你的用戶提供視覺語境
這樣你的用戶只需要一瞥就可以找到他們感興趣的文檔
需要處理的文檔因爲他們有了不錯的縮略圖
他們就可以很快找到文檔
iOS 9上有項新特性會自動爲你創建某些特定的
通用文檔類型的縮略圖
比如說大的圖像文件舉個例子
現在我們再來看看你加載你的縮略圖
顯示在你的app的UI的工作流程
這裏要重點注意的是
加載縮略圖涉及向內存中加載數量可能很大的數據
可能會很慢因此加載你的縮略圖數據時你肯定不想阻塞你的主線程
首先讓我們看一個工作流程實例應該可以
這就是我們的示例代碼app的工作流程
首先在我們的示例代碼中我們有一個CollectionView
CollectionView讓我們加載一個CollectionView單元
我們要通過一個後臺進程安排讀取縮略圖
因爲我們尚未緩存完畢縮略圖
現在我們並不會等待完成讀取縮略圖
我們要立即返回一個帶有佔位圖像的
CollectionView單元這樣用戶就知道那裏有圖像
之後某個時間完成讀取縮略圖後
我們會通知我們的CollectionView
需要重新加載那個單元
然後我們只要在我們的UI的那個單元上顯示我們的縮略圖就可以了
好的 然我們已經知道了怎樣找出文檔怎樣用漂亮的縮略圖
把它們顯示出來我們再來看看怎樣管理最近列表
我們認爲你可能想用最近列表
因爲最近訪問的文檔通常就是用戶
正在處理的文檔
因此存儲這些文檔的這樣一個列表是個不錯的主意
這樣你的用戶就可以快速返回文檔中
同樣地一個笨辦法可能是使用NSURLs來存儲一個
最近訪問的文檔的最近列表
但是像之前NSFileManager已經出現的那樣
這樣有很多缺陷
我們來快速看一下
假如說我們向最近訪問的文檔存儲一個NSURLs列表
但是在我們的app不運行時iCloud Drive守護程序移動了文檔
比如像這樣移動到了一個新文件夾
現在NSURL就成了一個受損引用沒法解算我們的文檔
在磁盤上更改後的位置
因此我們不能靠它來存儲我們的最近列表
存儲最近列表的正確方法是使用安全範圍書籤
這裏如果我們向這個文檔存儲了一個安全範圍書籤
而iCloud Drive守護程序再次把這個文檔
移動到了一個文件夾那麼書籤就會自動更新
解算文檔在磁盤上的新位置因此當我們管理我們的最近列表時
我們應該使用安全範圍書籤
我想快速做個演示
看看我們如何管理我們的最近列表
如何加載縮略圖
好的讓我們在這裏啓動我們的示例代碼
我們尚未向我們的app中加載縮略圖
但是舉例來說如果我使用新的多任務處理
功能打開iCloud Driveapp 我們就可以看到
這些文檔的縮略圖已經在那裏了
我們只需要加載它們顯示到我們的app的UI上即可
我們來看看它在代碼中是什麼樣的
好的 首先我們來講講如何在代碼中管理我們的最近列表
這裏有件重要的事情
當我們在這裏保存對象時我們使用了
“標記帶有選項數據”的方法來進行標記
這裏重要的是要傳遞“適合標記文檔”選項
這樣我們就可以稍後進行解算
我們的app啓動後我們使用書籤
調用了“經由解算標記數據”NSURL構造符方法
這是我們之前保存的然後我們得到了一個URL
就是我們的文檔在磁盤上的更新後的位置
這裏重要的是有了這個返回的URL
我們需要調用“開始訪問資源的安全範圍”
防止這個文檔是另一個app的容器內的文檔
否則我們就無法讀取這個文檔因爲...這個文檔的讀屬性
因爲這樣就會讓我們的沙盒
訪問到這個文檔
那麼對於縮略圖來說我們已經爲你在示例代碼中
寫好了這個很棒的縮略圖緩存類
可以爲我們的app緩存我們的縮略圖
這會讓我們如釋重負
比如調度在後臺進程中加載縮略圖等等
然後通知我們的CollectionView
我們需要重新加載單元
我們最後一個沒有實現的
是這裏的這個代碼塊
它會從磁盤上加載我們的縮略圖
我們只需要在帶有一個縮略圖字典鍵的URL上
調用“獲取鍵的承諾項目資源值”這個NSURL方法
然後我們就會得到一本縮略圖字典
然後我們只需要從字典上抽出UIImage然後把它返回到
我們的縮略圖類這樣我們就可以顯示它
這裏重要的是使用“獲取鍵的承諾項目資源值”
來代替“獲取鍵的資源值”
因爲文檔可能還沒有實現內容本地可用
這樣即使尚未下載我們也可以展示我們的縮略圖
我們需要做的就是重新部署下
這樣我們的app裏就有了一些很棒的縮略圖
是在後臺加載的這樣當我們示例代碼中
滾動時它們就不會阻塞我們的滾動
好的讓我們回到幻燈片
關於構建一個“文檔瀏覽器”我們學到了什麼？
首先我們學到了我們應該使用
NSMetadataQuery而不是其它方法來找出我們的文檔
這樣我們就可以找到所有我們的app可用的文檔
其次我們學到了我們應該在我們的app的UI展示縮略圖
這樣我們就可以構建一些很棒的UI
我們的用戶也可以很快找到他們正在處理的文檔
最後我們學到了我們應該使用書籤
而不是其它方法來存儲我們的最近列表
這樣用戶就可以快速回到
他們正在處理的文檔
那麼我想請約翰尼斯·福特曼上臺來
給你們講講如何構建文檔編輯器
謝謝 邁克
邁克剛纔向你們展示了
如何在你的應用程序內構建一個漂亮的“文檔瀏覽器”
當然這會讓我們的app非常漂亮
但是同等重要的
甚至可能更重要的是你的應用程序中
你的用戶可以加載編輯文檔的那一部分
畢竟用戶就是爲了這個目的而試圖使用你的應用程序
在我們開始講整個加載寫入變更文檔之前
我們先來快速看看一個叫做
文件的協調性的概念
我在這裏講的是什麼？
在我們新的現代基於多任務處理的世界中
這個概念指的是多個app訪問顯示同一文件
舉個例子我們可以在iCloudDrive app顯示
你的文檔容器內的全部文件的概述的同時
讓你的app運行並且讓用戶編輯這個文檔
或者還有一種更保守的方法
即使你的用戶沒有使用這個兩個在前多任務處理視圖
也可能經常出現iCloudDrive同步守護程序
可能想要訪問這個文檔進行雲端同步
而同時你的用戶正在編輯這個文檔
實際上這是一種非常常見的情況
因爲用戶正在編輯這個文檔
他們把這個文檔保存到了磁盤
這個文檔當然就發生了變化因此iCloud Drive守護程序
就想確保它在雲端也進行更新了
因此這是一種常見的情況
我們來看看你的用戶正在磁盤上
編輯這個文檔這一具體案例
當然你的app看起來正在運行中
用戶正在進行編輯
同時你的應用程序正在
自動保存定期把這個文檔寫入磁盤
這樣我們在某一時刻有一個寫入操作
然後之後某個時刻我們又有用戶編輯
變更文檔的這樣一個操作然後我們又有一個寫入操作
很好 我們假設在某個時刻我們的用戶充分利用了
這個多任務處理功能也就是說
當他們編輯這個文檔時他們還同時
運行着另外一個應用程序
這個其它應用程序可能之前對這個文檔有一個引用
並不會立即進行狀態恢復
舉例來說即試圖從磁盤上讀取這個文檔
現在你可以看到這種情況很糟糕
因爲當我們讀取這個文檔時同時還有
另外一個應用程序對它進行寫入操作
這實際上就是我們的應用程序
我們得到的就是這個不一致的讀取
當然這很不幸
我們正在寫入這個文檔但是同時
另一個應用程序又正在讀取這個文檔
數據僅僅寫了一半到磁盤另一半還沒有寫入
出現這種怪異的不一致的數據時
其它app可能就不知道應該怎麼做
這種情況很糟糕
同樣地即使我們設法挺了過去
我們第二次寫入後別忘了
我們現在仍然正在第一個應用程序中編輯這個文檔
其它應用程序現在仍然正在顯示你的文檔
其它應用程序現在正在顯示你的文檔的舊版本
我們就遇到了過時顯示這樣一個問題
當然出現這種情況很不幸
這裏我們給你們準備了兩個方便的解決方法
首先我們有了這個文件的協調性的概念
文件的協調性是一種分佈式閱讀程序/寫入程序加鎖機制
這就意味着雖然任何時候多個閱讀程序
都可以讀取同一個文檔但是每次卻只能有一個寫入程序
這個寫入程序會禁止其它任何閱讀程序進行讀取
這就意味着如果我們的應用程序
就像使用UIDocument那樣使用正確的文件的協調性
這些機制就會生效
我們的讀取操作就會被推遲到我們的寫入操作完成後
這樣我們就能始終保持
這個文檔一致的形象
非常棒
我向你們保證這裏還有一個機制
這裏的這個機制是NSFilePresentation
NSFilePresentation是一種分佈式修改機制
這就意味着我們的文件的協調性會
自動告訴所有其它的文件提出器
你的文檔已經登記過了已經寫入了磁盤
文件提出器需要對自身進行更新
這樣在我們的第二次寫入後我們就可以立即得到一個通知
我們就可以放心地更新我們的UI了
很好我們就是這樣來確認我們的文檔總是保存一致的形象
但是文檔是什麼？
當然我們首先需要創建一些文檔
這樣纔可以顯示文檔讓用戶編輯文檔
我們來看看這個
我們創建這些文檔的目的是什麼？
讓我們想象下當我們實現我們的示例app時
我們在右上角有這樣一個小的“加號”按鈕
這是個加號按鈕用戶點擊下
我們可能會彈出一個示例對話或是類似的東西
不過我們總會在某個時刻創建一個文檔
在這裏我們的主要目的是
給用戶一個一致的顯示
並且這個顯示總是最新的
如果用戶點擊這個小加號按鈕那就沒什麼大用
我們現在並不會在我們的“文檔瀏覽器”內得到更新
用戶就會困惑不解不知道發生了什麼
用戶可能會再點擊幾次這個加號按鈕
現在我們有了五個不同的新文檔這可不太妙
如果不使用文件的協調性我們最後就可能出現
現在這種情況當然了這是因爲...
這就意味着我們在磁盤上創建了一個文檔
之後某個時刻iCloudDrive守護程序注意到了
這個新文檔然後通知我們的app
這個延遲可能在半秒左右
如果守護程序現在正忙延遲時間可能會更長
我們正是想要避免這種延遲
如果你使用文件的協調性那現在就很方便了
會直接替你完成
協同運行會與你用來在你的瀏覽器中顯示文檔的
NSMetadataQuery一起
協力也就是在協調完成後
進行迴路循環立即告訴
你正在運行的查詢出現了
一個新的更新後的文檔
這樣我們就幹掉了這個令人厭惡的延遲
當然這裏還是要提醒你們一件事
因爲我們是在磁盤上進行寫入
無論我們往磁盤上寫入什麼都需要時間
當然了在主線程上執行任何需要
時間的操作都很不幸
因爲它會阻塞主線程讓你的應用程序在用戶看來
就像成了一個結巴
當然瞭解決這個也很容易
我們要使用一個後臺進程
來發送這一協同運行來確保
我們的操作不會阻塞主線程
幸運的是我們仍然...
因爲我們仍然在用這個協同運行
我們就仍然可以在我們的UI上得到立即更新的顯示
這是因爲我們的NSMetadataQuery
仍然是直接更新的
你甚至都不需要把這個信息彈回給主線程
這是因爲我們是在直接更新
NSMetadataQuery
很好 另一個常用的操作是刪除某個文檔
對於你的用戶來說這是再正常不過的事
這個文檔他們不用了他們想把這個文檔刪掉
這樣就不會弄亂他們的工作區
刪除文檔背後的基本理念仍然是一模一樣的
我們會通過我們的後臺線程協調某個寫入操作
在本次寫入時執行刪除操作然後通過NSMetadataQuery
回送給主線程及時進行更新
很好 你就是這樣通過你們的後臺進程對創建刪除文檔進行管理的
我們來看看你到底想用這些文檔幹什麼
當然你想顯示這些文檔
也就是說你想讀寫這些文檔
現在我們強烈推薦你使用
UIDocument來讀寫文檔
UIDocument會實現NSFileCoordination調用
這樣可以確保你在任何時候進行讀寫文檔時
都是以一種協調的方式進行
此外它還會實現NSFilePresentation
確保會立即通知這個文檔發生了變更
可以在你的顯示中立即更新了
我們來看看怎樣讀取一個文檔
你創建一個UIDocument對象然後在這個UIDocument實例中
簡單調用這個“完成後打開”方法
這種方法會通過一個後臺工作隊列
取出一個協調讀取
這樣你的應用程序就可以保持完美的性能和響應性
同時你的文檔可以對自身進行讀入
那麼現在你需要做的
就是實現“通過內容載入”這個方法
這種方法會在協調讀入中簡單調用
因此就被這個協調讀入給封裝了
這就意味着在那裏讀入任何你想要的東西
都是絕對安全的 請聽清楚是來自那個文檔
那麼你需要做的就是取出內容
然後把它們填入你的文檔數據
現在這裏還有一種方法
你也可以選擇實現這種方法
它會取出一個NSURL而不是一大堆數據
你也可以把這個方法用於舉例來說流文檔
有時候你可能更有理由這麼做
這是因爲舉例來說磁盤上的文檔格式與你在內存中想要的格式完全不同
完成後我們只需要回送給主隊列
然後調用你提供給我們的完成塊
在那個完成塊中你可以舉例來說
爲你的文檔推送更新你的新界面
很好讀入一個文檔的原理就是這樣的
不過別忘了麥克告訴過你們
這個概念叫做“約定”
一項“約定”指的是iCloud Drive守護程序允諾給你的app
某個文檔就在那裏但是還沒有進行下載
這就意味着對這個文檔進行讀入
就可能會觸發一次下載
當然瞭如果你像我們一樣
生活在真實的世界中很明顯下載有時候會很慢
依據你的文檔大小下載可能
需要一段時間
你的用戶可能把這次下載歸咎於你的app出了問題
這很不公平這不是你的錯
本次下載所處的網絡連接很慢需要一點時間
我們在iOS 9中爲你準備了一項新特性我們公開了一種通過
新的NSProgressReporting協議
在UIDocuments上顯示進度的方法
實現這個非常簡單
NSProgressReporting協議在你的UIDocument實例上公開了一項
進度屬性這項進度屬性是我們填寫的顯示給你我們的進度如何了
基本上這就是下載狀態的一項簡單的百分比
我們現在通過一個狀態變換公開了這項NSProgress屬性
這樣你就可以把它顯示爲你在你的文檔狀態上
監聽到的狀態變換通知
當狀態發生變換時你就可以看到帶有下列內容的新標誌
“你好我在這裏公開了一條進度”
然後你只要顯示這個進度就可以了
舉例來說在一個UIProgress視圖上顯示一個進度
過去往往比較複雜
這是因爲它公開了一項你需要把值觀測鍵入
這個進度視圖的屬性
當然我們也意識到了這一點還是在iOS 9上
我們在UIProgress視圖新公開了一項觀測進度屬性
你就可以直接把NSProgress弄到進度視圖
你只需要把NSProgress分配給
進度視圖的“觀測進度”屬性
它就會自動更新它的計數
對你來說這非常方便
謝謝 那麼你只需要監聽下次狀態變換
監聽這樣的信號：“你好我們把這個進度搞完了”
此時你可能想取消顯示你的UIProgress視圖
準備顯示新的文檔控制器
很好 這就是讀入文檔
當然我們還想寫入文檔
寫入文檔和讀入文檔是對稱的
我們寫入文檔的方式就是在一條後臺進程上
取出一個協調文件的協調性
這個略微有點不同不是由你來啓動它
而是由UIDocument自動通知說現在非常適合
保存文檔
比如說因爲有一陣沒有編輯進來
或者因爲文檔上次保存後已經過去了一段時間
或者因爲用戶把你的應用程序放到了後臺
那麼這個時候保存文檔就非常合適
不過這種實現方式和讀入一個文檔是非常
對稱的我們只需要在你的UIDocument實例上
調用“類型內容”
然後你把你從那裏返回的NSData實例填進去
非常好 這裏還有一件事
此時寫入一幅縮略圖也非常方便
正如麥克告訴你們的我們會爲某些非常特定的文檔
格式自動生成縮略圖不過有很大機率你正在構建的東西
和我們正在構建的東西並不完全一致
因此如果你沒有使用我們的非常通用的格式來
進行構建像圖像或者簡單文本
那麼你就想自己寫入縮略圖
現在你這樣實現的方式
我們稱之爲在你的UIDocument上
“自行寫入文件屬性”方法
使用這種方法你只需要當成你的屬性字典的一部分
返回一個UIImage實例
在這個實例中我們會在寫入你的文檔
包含於同一協調寫入上進行寫入
這就意味着如果此時用戶
在一個單獨的窗格中打開了“文檔瀏覽器”
他們就不會看到不一致的狀態
很好 這裏重點需要記住的是這是在一條後臺進程上調用的
這就意味着在任何情況下
你都不能用UIViews來寫入...來渲染你的縮略圖
UIViews不屬於線程安全因此你需要確保你的縮略圖
渲染是通過舉例來說
Core Graphics或者textKit
或者任何其它我們在我們的平臺上提供的線程安全渲染機制來進行
在iOS 8上訪問一個文檔的唯一機制是通過一個副本來訪問
原因在於一般來說應用程序
不能訪問彼此的沙盒
因此如果我們有兩個應用程序沙盒那麼從一個沙盒
移動到另一個沙盒的唯一方式就是第一個應用程序
在另一個應用程序的沙盒內生成一個副本
現在通過使用UIDocument菜單視圖控制器我們就可以鬆口氣了
它允許你的應用程序在另一個應用程序的容器內進行拉取
不過一般來說你不會僅僅打開一個文檔就算了
每次打開這個文檔都會生成一個副本
當然 處理這些副本就非常方便了
因爲你現在其它應用程序的容器內有一個你的
文檔的副本用戶會對它進行修改
這樣你就會得到這個文檔的第二個版本
現在舉例來說回到你的應用程序中
用戶想打開這個文檔
這樣就會生成第三個副本
現在漂浮着的你有文檔的三個不同的版本
這很不幸因爲用戶會感到困惑不解
不知道哪個版本是最近的版本
這種情況可不太妙
現在在iOS 9中我們有了這個漂亮的新機制
叫做“就地打開”
這意味着通過使用文檔交互控制器
你的應用程序可以授予另一個應用程序
訪問一個文檔的權限
文檔還是一模一樣的
這不是一個副本而是對這個文檔的一個副本
當然了這就意味着另一個應用程序就可以進行編輯
然後通過展示文件這一魔法
直接反射到你的應用程序中
當然了這對用戶來說就非常方便
這包括通過iCloud Driveapp以及通過Spotlight
打開的文件
這就意味着你的用戶任何時候在iCloud Drive app中
瀏覽他們的文檔時我們就可以直接就地打開那個文檔
這個背後的機制和“文檔菜單視圖控制器”
中使用的機制非常相似
這就意味着如果你的應用程序已經對此提供支持了
那麼對你來說支持這種機制就不費吹灰之力
即使你現在不支持UIMenuViewController
採用這種機制也不費吹灰之力
因爲這並不是多麼神奇的東西
你獲得一個URL後
就把它放入你稍後將要展示的一個UIDocument實例中 
我們現在來快速看看你怎樣可以對此提供支持
就像我之前說的非常簡單
首先你要告訴我們你對此提供支持了
記住當我們試圖找出我們是否要
就地打開這個文件時你的app可能在那時並不會啓動
因此你要事先告訴我們
你需要在你的Info.plist中採用“LS支持就地打開文檔”
這個鍵來告知我們
根據你用的是Objective-C還是Swift不同
你只需要把它設置成爲“是”或者“真”即可
這樣就可以告訴我們你的應用程序可以處理這個了
你還需要再寫一點代碼
是一種新的委託方法
那個看起來怎麼樣？
假如說你已經在這裏打開了文檔
這樣假設很合理這是因爲你的app是基於文檔的
因此你實現的方法肯定就和我們在這裏看到的非常類似
現在你的方法肯定得到了一個NSURL
因爲這個NSURL是系統爲你的app創建的
臨時副本你就需要把這個副本複製到
你自己的容器然後打開這個複製文件
這一小塊代碼的作用就是這個
現在首先要做的是在這裏採用我們的新方法
這種新方法和舊方法非常相似
它只是取得了一本選項字典
對之前的方法的參數進行封裝
重要的是其中的一個參數是“就地打開”鍵
現在你要做的，就是看看這個“就地打開”鍵
是否爲真如果這個鍵爲真
那麼你的應用程序應該就可以就地打開這個文件了
這就意味着它不應該生成副本
很簡單你不應該再做你之前不得不做的事了
現在你有了這個URL
你只需要照着之前的打開方式打開它就可以了
支持就地打開就是這麼簡單
很好 我們來總結下今天學到的東西
我們已經看過了怎樣讓你的app性能響應性很高
看過了使用NSMetadataQuery來展示一組文檔並且當雲端
有變更發生時及時更新這些文檔
這種方法有多麼漂亮
我們還看到了怎樣使用書籤來實現最近訪問機制
這樣你的用戶就可以很快返回
他們之前的狀態...他們之前所處的文檔
當然有些事情我們沒有說
但是也非常合理
即你也可以使用書籤來實現狀態恢復
這樣你的用戶就可以直接返回他們之前所處的狀態
我們還看到了怎樣使用縮略圖讓你的應用程序非常美觀
看到了怎樣實現進度顯示確保你的用戶
始終清楚在他們的應用程序內發生了什麼
最後我們也看到了實現就地打開有多麼容易
就地打開是個很棒的新機制你的用戶就可以直接在
你的應用程序內打開文檔
而不用複製多份副本
我們今天發佈的一個示例代碼對所有的這些概念
都做了一個漂亮的展示
這個示例代碼實際上就是麥克之前在演示中
向你們演示的那個
它實現了所有的這些特徵特性
即在一個“文檔瀏覽器”中創建文檔
展示文檔生成這些文檔的變更動畫
當然還有寫入縮略圖當然還有就地打開
如果你需要獲得技術支持我們建議你去我們的論壇
你可以看到在這個鏈接下面我們也有很棒的資料
如果你想了解關於使用“UIDocument菜單視圖控制器”
的更多信息
來實現拉取機制，而不是就地打開工具的拉取機制
這樣你的應用程序就可以從另一個應用程序的容器內拉取文檔
或者你對如何實現基於UIDocument的應用程序略感興趣
我們建議你觀看我們去年的會議
即去年的會議234
當然你在網上也找得到
那麼謝謝你抽出時間參會
祝你下午過得愉快