尼尔·德赛: 大家好
欢迎来到《构建Watch App》讲座
我是尼尔·德赛是位工程师
在watchOS项目工作
今天我给大家演示如何从下到上构建watchOS app
我们要谈谈Watch app的架构
我们正在全面了解app的生命周期布局模型
我们会使用不同的界面元素
以便为用户实现美好的体验
我们会调试app
还将通过不同的watchOS 2功能增强app的性能
那么 在Apple Watch中你有四个机会来展示信息
从Apple Watch的Home屏幕 
到在Watch app中可以手工启动的位置
Watch app可以提供深度用户体验
大家会主要集中进行开发方面的工作
可以选择提供Glance
这可以从app给出最及时的相关数据
还是以缩略形式
可以为app的远程和本地通知提供自定义UI
Apple Watch利用
iOS的现有互动通知支持允许
佩戴者对具体行动做出反应
将app转移到指定区域
或是在Apple Watch的Notification
Center 晚些查看通知
最后 可以添加Complication
在表盘显示信息的这一功能
让我非常兴奋
对于少量信息条而言这一点非常棒
用户可能会在查看时间时希望了解这些信息
那么我们现在了解了用户会与app交动的不同方式
我们来谈谈Watch app的架构
现有的iPhone app包括WatchKit扩展
和Watch app
经过用户要求的初始配对后这些都已经装在了Watch 上
或是后来通过Apple Watch app
用户发起的安装也可以
Watch app包括两部分内容
首先是WatchKit扩展这一扩展现在就在...
Apple Watch上运行
并根据用户互动 执行代码
第二部分是Watch app
Watch app的UI已经 
从包括故事板和静态资源捆绑包中得以加载例如图像
因此 存在于 Watch app
的这个UI随后会与WatchKit扩展通话
可以将全部逻辑置于其中
现在 这个扩展程序就在Watch中
可以启动各类新的能力
这部分稍后介绍
当Watch app需要与iOS app
进行沟通时WatchConnectivity
可用于卸载重型进程
或网络任务它存在于
iOS和watchOS 2上
所以可以来回沟通
总之 故事板和所有静态资源存储在Watch app捆绑包中 
Xcode提供的Watch app已经包括
故事板在内在开发期间将会用到
因为这些资源是Watch app的一部分
在设计时必须全部明确
只有在运行时可以稍作调整
这意味着需要将可能用到的
所有UI元素并入
故事板的各个场景
运行时 对WatchKit扩展进行编码 
可以更新UI元素包括按照需要
对之隐藏 展示或动画处理
此外 WatchKit扩展可以发送动态
生成的内容至Watch app便于显示 
因此InterfaceController对单个内容流
管理UI元素
会设置这些元素的初始值
对用户交互做出反应
适度更新UI
创建InterfaceController子类时
需要为需要管理的每个UI添加输出口
这些输出口与故事板中的对象连接
并处理WatchKit扩展和Watch app之间的信息传送
除了输出口还要为故事板的互动元素设置行动方法
对输出口而言要将每个动作方法
和对应的UI元素
当佩戴者和Watch的元素交互时
WatchKit就会调用行动方法
因此我们先来考虑如何调整现有iPhone app
在试运行WWDC时我忘记了
联系家人和朋友这方面的内容
所以我想创建个app可以提醒我
我联系过谁谁还没有联系
这就是WWDC Call MeLately 并可以通知我 
何时该联系他们
所以我和服务器沟通
跟踪我需要通过NSURLSession 联系的人
这是我做的一个不错的iOS 
不过它更像是Watch app
当我特别忙时 很快就可以知道接下来该联系谁
现在就开始制作Watch app
我想做的是希望给大家展示
怎样在现有的iOS app中添加Watch app目标
接下来我们会涉及在哪里开始设置界面
最后 我们要构建和运行
看看模拟器里的状况
说到模拟器
在watchOS 2 SDK中实际上有个崭新的模拟器
大家可能对iOS模拟器很熟悉
这个看起来是这个样子
现在就有了新的Watch模拟器
特别棒的一点是这是个全功能模拟器
可以轻松看到38毫米和42毫米的大小
可以模拟触控压力
可以看到不同的表盘
正如我之前所述现在可以在watchOS 2中
支持Complication 因此可以
看到Complication视图
在模拟器不同表盘的视图效果
最后 同时可以安装多个app
我们认为这会令制作新项目
重复想法等变得非常容易
随后可以快速在不同app之间往复
那么 模拟触控压力可以进入Simulator菜单 
来到 HardwareSimulate
Touch Pressure
接着可以选择Deep Press
这对于想在模拟器中改变
表盘这类问题非常有用
现在跳到Xcode 来看怎么添加Watch app
使用这个崭新的模拟器
来看演示
非常棒 启动Xcode
选择app
这样看起来更容易些
非常棒
现在如果想添加新的app
只需进入File New Target 接着就有了
新的WatchOS窗口
那么 在库里就有了应用和框架
选择Framework In Library就可以
添加Watch框架
或是Watch静态库
现在我来添加WatchKit app
双击 加上产品名称
主app总是默认启动状态
但我还要加入Notification场景
Glance场景 以及Complication
可以加在这里
已经在这款app上加好了
按下Cancel
看看都有些什么
这就是Watch app以及WatchKit扩展
我刚才说过Watch app 包含故事板
所有的静态资源以及资产目录
WatchKit扩展包括所有界面
控件和可能会添加的任何其他代码
进入故事板
大家都看到我有主界面
Glance界面接下来还有通知的静态和动态界面
进入实用工具检测器
可以看到对象库发现这里有许多
可以使用的不同对象
还有所有的WatchKit界面元素
拖拽过一个界面控制器
例如 如果我只想制作一个页面控制器
可以在键盘上选择Control
再拖拽到新的界面控制器中
并为下一个页面创建引线
现在就可以处理掉这些如果看下面的内容
有一个静态界面和动态界面
因此动态界面实际上是与Notification
Controller类相连接
所以当用户收到通知先抬起手腕时就会看到
Notification+Controller类 就会调用
而且还可以提供非常丰富的UI
现在静态界面通常会被调用
例如当用户错过了通知
想在NotificationCenter再看一遍时
一般这种时候会看到静态界面
因此 我这有My Category
针对不同的分类我们发送不同的装载模式
我们实际上可以创建自定义UI和自定义通知
来针对不同的分类
而这并非一对一的界面
而是针对所发出的所有通知的界面
实际上可以调整并创建多个界面
我们再加一个新的通知控制器
放在这里
如果我想的话可以拖拽一个界面控制器
接下来和刚才一样点击Control
在创建我新的动态界面
还可以进入这里属性检测器
选择Has DynamicInterface
现在我可以调整分类
并创建新的界面
然后可能我想...
创建新的NotificationController类
接着在做好连接
我们还有模板
推送通知装载模式 .apns文件 
如果看这里
看似是我们会有的普通装载模式
其中有提醒 主体 题目 分类
最棒的部分是在模拟器中
可以使用这些不同的装载模式文件
模拟不同界面
如果想要测试所有这些不同的通知
我们不必一定在设备上进行
可以使用模拟器
这些通知装载模式快速重复不同的想法
我们再回到故事板
现在我就想在模拟器中
构建 运行并查看主app
那我来打开我的计划
我看到我有iOS计划接下来是WatchKit app计划
我有两个模拟器这是iPhone 6 Plus
38毫米的
还有iPhone 6 Plus42毫米的
我刚才说过这实际是个Watch的全功能模拟器
实际上需要和我的iPhone模拟器相配对
我们来选择 iPhone 6计划 构建并运行
现在打开了两个模拟器
那么我预计到主app会启动
我会把它连在调试器上
非常棒按下Allow因为我确实要允许这么做
现在是在连接调试器
这里出现了一个小东西
是说“扩展收到请求 启动表盘组件支持”
如果要执行Complication
稍后这就会消失
现在来停止这个调试会话
返回Watch模拟器
现在就是新的模拟器我有表盘
现在如果我只想调整表盘
可以打开HardwareSimulate
Touch Pressure
现在可以模拟强压接着返回
轻压 接着调整表盘
现在可以自定义模拟器上的时钟
那么如果在设备上进入这个屏幕
可以使用DigitalCrown
接着可以轻松改变颜色
那么鼠标上没有Digital Crown
不过幸好我有滚轮
还可以使用触控板或Magic Mouse
我还可以调整颜色像这样
现在就可以模拟Digital Crown行为
同样 进入Complication视图时
手指划过就可以启动Complication
这样如果想在Complication上重复想法
可以在不同表盘构建新的Complications
我可以像这样启动这些Complication
现在 执行Command-Shift-H
返回主页 再次执行Command-Shift-H 
现在回到了Home屏幕于是有了Settings app
表盘和已有的app 
然后启动app也正常看到了
再回到主页
现在 正如我所讲这些模拟器实现配对
我有两款不同的模拟器可供选择
进入计划看到两款模拟器
可是如果是iPhone 5
42毫米模拟器会怎样呢
我来做个新模拟器再实现配对
打开Xcode 选择Xcode 然后是Device
现在在侧边栏我有所有不同的模拟器
如果来到底部左侧可以添加模拟器
可以称之为iPhone 5
改变设备类型
继续保持iOS版本
我将会把配对的手表改为42毫米
很容易就可以创建
现在如果返回计划这就是新的模拟器
那么回到故事板
正如我说讲有这些计划
可供选择这有个Notification计划
还有Glance计划以及Complication
那么我可以选择这些不同的计划
并快速调试app的不同部件
例如 现在我想测试
Notification计划
想看看在模拟器中是什么样子
我们已经讲过了APNS文件
我想看看是否正确显示
那就在动态界面添加标签
拖动过来
直接改成Dynamic
现在我选择了Notification计划
准备在模拟器上构建并运行
我希望在Watch模拟器上看到这种情况
会出现通知接着是Dynamic
现在需要介绍的就是这些内容
这里就是通知上面写着Test Message
我准备打开控制台
上面写着“用时过长无法显示自定义通知返回静态”
好的再来看通知控制器
看看为什么会出现这种情况
这就是通知控制器的代码
检查一下
Did ReceiveRemote
Notification有标注提示我应该解决标注问题
现在再来构建和运行
希望现在经过取消旧的通知
就能看到新的正如我所愿上面写着Dynamic
在设备上 如果是这样的情形并获得通知
我可以选择App图标或按钮
我就会回到这款app上
在模拟器中可以同样这么做
正如我所愿回到了这款app中
现在可以完善代码 在通知中添加
不错的UI故事我还想测试
自己的静态界面
想实现这些的唯一办法是需要在Did Receive
RemoteNotification标注提示
以获得静态界面而我在重复编码时
并不希望这样做
那么我可以有两种办法这么做
第一 我可以将完成处理程序的自定义
改为调用Default或者实际上我可以进入计划
可以编辑计划现在我可以选择Watch界面
就可以把它改成静态通知
而不是动态的大家可以看到
这里是推送通知装载模式
如果我有多个装载模式这里会有显示
我可以快速调整我准备测试的装载模式
我的目的是想保持静态计划
一阵子 那我就准备复制这个计划
我们可以称之为Static Notification
接着打开Run
再来把Watch界面改成静态
按下Close
现在静态通知也有了
以及正常的动态通知
非常好 这就是模板项目的
开始部分但需要理解部分上下文
关于app生命周期在watchOS上如何运行
来介绍一下watchOS app的生命周期
我们来看Watch app界面但是并没有看到它的生命周期
很重要的一点 是需要了解什么时候扩展以及界面控制
器何时需要调用安装和拆解
那么需要在正确的时间配置UI元素
并进行清理操作或完成任务
这时佩戴者会停止与Watch app进行交互
启动Watch app时
扩展委托可以启动get Application Did
Finish Launching
扩展委托和在iOS上的UI应用委托类似
这样 你也会收到Did Become Active
回调 以便升级模型数据
接下来Watch app捆绑包的故事板会装载到
Apple Watch 初始界面控制器即可生成
UI一旦生成
界面控制器就会收到Awake With Context
调用 使其有机会启动状态变量
并运用初始值配置UI元素
Watch app的UI正在屏幕上
显示的过程中将调用Will Activate
允许执行紧急任务
或最终的UI元素配置
现在 如果佩戴者与UI元素交互
WatchKit调用在界面控制器上定义的动作方法
可以通过这些动作方法执行代码
并更新app的UI
要记住交互时间很短
在iOS上　我们以往认为在用户和app交互方面
都是按照分钟计算但是在watchOS上
我们是在以秒计算考虑问题
实际上要在佩戴者停止与app交互后
点击Did Deactivate调用
调用这种方法后在未来的某个点
界面控制器将会被释放
现在扩展委托
在佩戴者完全停止和手表交互后
例如可能会返回Home屏幕
你会收到Application Will
Resign Active回调
借此机会可以保存任何app相关状态信息
并关闭任何运行的任务
我们了解WatchKit扩展的 生命周期
但是要谈谈另一个重要问题
是关于Watch app的布局
watchOS中的WatchKit
模型不同于UIKit
及AppKit 因为它是流式布局
因此所有的元素都是连续出现
我们的UI主要是在...
Interface Builder中创建
因此具备界面控制器时
可以使用对象库并拖拽图像
或拖拽按钮当我们需要...
更为相关联的布局时
我们会使用WK界面组
用于管理不同项的布局
例如 我们可以在组中添加图像和标签
因此编程模型非常值得注意
不要使用WatchKit编写对象生成代码
在Interface Builder有微调控制
处理位置和大小布局分层和动画
我非常鼓励大家参加周四的...
《WatchKit布局和动画技术》讲座
是有关如何为用户生成丰富UI的内容
我在考虑怎样最好地制作Watch app
回想一下 我的iOS app是个简单的UI表格视图
我的第一个想法是罗列出
我需要呼叫的所有人与iOS app非常类似
当我开始这么考虑时
我意识到Watch app并不需要所有这些信息
其实 我只需要了解下一个该联系谁
而不是要了解所有需要联系的人
所以UI可以是这个样子
非常棒 现在我知道需要怎么做了
我想开始生成UI
接下来讲讲怎样为主app 
Glance和Notification生成UI
我们跳到Xcode来看我们有什么
我们了解生命周期是什么
一般而言布局代表什么
那我们打开故事板
我想在界面控制器添加图像
先在对象库里选择图像
然后快速拖拽一个图像过来
我还要添加一个标签
那么去找到标签拖拽过来
如果发现出现了一条蓝线
那么在流式布局中可以把标签
放在图像的前或后
那就把它放在后面
举例来说 如果我想把它们水平方向前后放置 
好吧 在Interface Builder中 其实无法实现
没有蓝线出现 帮不了我
我用WK界面组来实现
把这个拖拽过来重新调整图像大小
把标签加入组中
把图像就加在标签旁边
这样就可以在水平方向排布
现在把标签和图像取出
把组删除
接着在属性检测器中
已经在资产目录里了
我有个图像是朋友伊桑的
就以这张图像作为参考
伊桑好像有点走形
让他看起来更开心点
就这样
他开心多了
还要把标签文字改成伊桑
现在布局位置确定是左对齐
我其实是想让它在屏幕居中
如果我选定了图像
那么打开属性检测器中
可以将位置调到中心
我还可以垂直方向调整位置
可以调大小改变视图
针对这个图像标签也一样
我只想它放在中间位置
那就来看Glance
如果仔细观察会发现Glance控制器不同于主app
有两个组
是因为Glance实际上是模板制成
我有上模板和下模板
如果选择上模板的属性检测器
有一系列选项可供选择
在这个具体案例中我们使用大号的文字
改成Call
接着在下模板中添加图像
和刚才做的一样
只需要把图像变为伊桑即可
当我看着Glance时感觉app
是要对我发火因为调用伊桑这里我做的极差
那么app会帮我做
在通知界面也是同样的做法
大部分情况下我可以找到新界面
现在通过选择计划来构建并运行界面
我们来构建和运行Watch模拟器
希望我的新界面会出现
好的 非常棒
好 在这里 我再连上调试器
停止这个会话看看iOS模拟器
因为 重要的是需要注意这些是配对设备
那么向上滚动向右摇
看到iOS app已经安装到位
和设备上一样app只有通过这一种办法
可以装在用户的Watch上
也就是装在iOS设备上
那么就是现在这样
我们来选择AppleWatch app在模拟器里
可以调整Complication
那么Call Me Lately已经启动了
我还可以卸载app再重新安装
还可以关闭Glance再重新启动
如果我想查看Glance
可以打开模拟器返回表盘
就像在设备上一样划动一下 接着Glance
那我们再重新启动
哎呀 不好意思
我以为会出现新的UI
结果没成功不过我们还是继续
我找到了新界面不过我需要了解
下一个该联系谁还需要了解
怎样更新app实现这一点
回到幻灯片
iOS app主要是通过NSURLSession
与服务器沟通获取亲爱的朋友们的名单
watchOS 2很出色的一点是我可以使用
许多相同的NSURLSession与服务器对话
不过 有时候当我需要确认
iOS app和watchOSapp 彼此在接触
可以使用Watch-Connectivity 来完成
我们花些时间
介绍一下新WatchConnectivity
框架然后来看怎样在Call Me Lately中使用
那么WatchConnectivity
是iOS和watchOS
之间交流的四个核心用途框架
主要注意的是WatchConnectivity 
在iOS和watchOS之中都有在两个平台上均可使用API
不仅是Watch app在与iOS app对话
有时还需要iOS app
来更新Watch app
第一个用途是允许iOS app
更新Watch app的应用上下文
反之亦然
这也许不是紧急的数据 
但是需要向用户更新这些内容
第二个是Send Message
这是需要在iOS app和Watch app之间
来回传送的
小量信息和Watch app
第三个是简易传送文件API
最后是传送用户信息API 可以和更多
Complications相连接
还有很多内容可以完成
我鼓励大家和...
WatchConnectivity对话发现更多信息
来看Call Me Lately 来看怎么充分利用
WatchConnectivity
我想在app上添加WatchConnectivity 
还要进行调试最后我想用Instrument进行调试
谈到Instrument有人可能还不知道
Instrument是非常强大的调试工具
可以检测app的性能
于是我获得调试模板
先要启动Instrument
然后可以从时间事件查看器泄露 分配中进行选择
然后大家会看到如果我选择时间事件查看器
例如 我要看这个视图
可以轻松调试app
这一点很重要
Watch上 互动时间非常短
也就是说性能非常关键
我们希望使用Instrument来确保
app在提供良好的用户体验
我们希望在设备和模拟器上都进行检测
现在我们了解了一些WatchConnectivity
和Instrument我们再来看演示
在app中
我可能有某种算法称
下一个该联系这个人了
所以当得到这个数据时
我需要更新iOS app了解这人是谁查看Watch 
就知道接下来该联系他了
也许我需要初始启动app
只为在iOS app上更新应用
上下文看看会出现什么
我可能希望在扩展委托中
在Application DidBecome Active完成这些
我可以只在这里放置代码
我先来导入WatchConnectivity
现在在ApplicationDid Become Active
我想添加部分代码
生成上下文即名为伊桑的字符串
接着在WC Session 这是WatchConnectivity
我有默认的会话
并且调用方法Update
ApplicationContext
连同主要WCApplicationContext
我将只发送上下文部分
结果却更糟糕现在就来打印出我的错误
来看这个工作
我们来构建和运行
选择Watch app...
app启动
但我看到WC错误提示7004
根据以往的经验我可以判断
我的会话没有激活
来看看代码
我还没有设置委托
我想设置WC会话委托然后在更新应用
上下文代码之后或之前
我只想自己设置委托接着还要激活
会话部分
需要注意的是在激活会话前
需要设置委托因为在激活会话时
可能有信息在等着
所以你需要收到适当的委托回调
我们现在再来构建和运行
需要确定错误代码已经不存在
好了 非常棒
现在没有错误了
这就是说正在将应用上下文
妥善发送至iOS app
但是我需要了解iOS app确实收到了
所以要打开Scheme来查看
并选择iOS计划我会选择
与Watch模拟器配对的相同模拟器
现在来选择iPhone 6模拟器
如果点击Control再按下Build和Run
不必构建即可运行
这样的话 如果app确实很大
我就不必等着它一直编译并安装app等等
我们按下Control然后无需构建直接运行
看似app启动了在iOS app
点击了app委托
点击委托回调Did Receive
ApplicationContext
然后可以在iOS app上更新UI
我们继续
现在如果我在Watch模拟器上我们返回主页
调试对话还在iOS app中继续
还有Watch app激活状态 不好意思
当它启动时 将会更新应用上下文
可以在iOS app再次点击
并点击委托回调
这非常棒因为现在可以同时
调试两个模拟器
使用WatchConnectivity
这一点非常棒
因此你必须确认所有的调用
都是按照在watchOS和iOS中都需要的顺序进行
谢谢大家
现在会话部分告一段落我想快速
调试一下Instrument
先来点击ProductProfile 
会启动Instrument希望会出现模板
我的模板选择
来看一下 好的
找到了时间事件查看器
就选择这个
接下来不是iOS模拟器
我实际是想调试扩展
选择这里
可以按下Record
看似我点击错误
打开Watch模拟器 把它放在这里
按下Record
连上了现在可以调试app
在调用树上还可以看到示例列表
和iOS app一样可以做同样的事情
可以看到大部分代码都在运行
在主线程这里非常棒
接着可以返回调用树
也就是说使用Instrument
可以轻松调试
停下这一段会话
现在我编写好一个app
基本上是有着很简单的界面
用到了WatchConnectivity
并且用Instrument调试了app
现在可以和设计师聊聊了
可以真正进行完善
我们来谈谈可以做些什么
那么我们在现有iPhone app上添加了Watch app
生成了app和Glance界面
用到了WatchConnectivity
我们同时调试了iOS和watchOS app
还使用Instrument调试了app
还有几个问题需要大家运用WatchKit
另外还有很多其他的watchOS 2功能 
令我非常兴奋
正如我提到的有Complication
昨天在专题讲座中大家可能也见过
甚至可以实现Time Travel
我觉得不远的将来就可以大家就像是在来回往复
非常神奇 太酷了
大家还可以使用Digital Crown
因此可以通过Digital Crown
为用户创建非常直观的体验
还可以有简易动画来生成
真正的响应式app非常漂亮有趣
还可以使用心率传感器
那么如果在制作 Workoutapp 或其他健身 app
可以通过HealthKit 获取数据
并以此为客户提供更好的体验
还可以运用交互式虚拟触觉实现更棒的体验
轻触用户并提供部分上下文
和在app中的做法一样
还有媒体播放就和昨天在专题讲座中看到的一样
大家也可以有音频播放
可以在Watch上使用扬声器
或是用户可以配上蓝牙耳机
接着还可以有路由
还可以录制音频首次实现
可以使用Watch本身的 麦克风
并提供绝妙体验
现在来看 Keychain
这样可以为用户实现非常安全的体验
复习一下我们可以探讨app的架构
增添了Watch app
谈到了app生命周期
我们用到了不同界面元素 制作app
和Glance 还谈到了
通知界面以及怎样轻松重复
不同的通知 并使用不同的类别和不同的装载模式
我们可以在新的模拟器中构建并运行
还调试了app
我们用到了不同的watchOS能力
网上还有部分更棒的资料
《watchOS 2转换指南》就非常不错
我很希望大家都能看看
还有些不错的技术支持
可以去论坛看看有些示例代码
如果有一般性问题可以联系杰克·贝伦斯
他是watchOS框架的开发顾问
本周还有很多有趣的讲座
可以发现很多信息WatchKit in Depth
Complications Layout等等
如果有任何问题如果有一般性问题
或是首次深入学习代码
或是对WatchKit开发很有经验
都欢迎过来 我们很高兴回答大家的任何问题
谢谢大家
谢谢