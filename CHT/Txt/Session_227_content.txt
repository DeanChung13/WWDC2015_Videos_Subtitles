奈特·希拉德：早上好 各位 
早上好 或者我該說 “早安”
“美好的一天”“早上好”
我叫奈特·希拉德
今天我會再次介紹國際化應用的新特性
我會再次介紹我們之前介紹過的新的API
以及對當前API所做的改進 
讓你的APP可以在全世界範圍使用
首先 這是地球
有超過70億人在地球上
對於這70億人 蘋果已經賣出了
超過10億臺iOS設備
而且 Mac OS X的安裝數量
達到800萬臺
我們在全世界有超過450家實體店
還有140萬個以上的APP
不斷被全球範圍內的開發者
和用戶所使用着
這是一個驚人的數字但如果今天在現場
只需要一個數字 那麼是這個
69% 現在蘋果69%的收益來自於國際市場
現在這份收益是很大的
展望一下 我們來看個圖表
蘋果現在的收益超過二分之三來自於
美國之外的地方
這些用戶對於
APP的使用有着不同的期待
包括語言的不同
地區的不同 和文化的不同這些你要記在腦子裏
現在 我們一起細說
有趣的是 這裏 我們41%
的用戶來自中國和日本
現在 我想這裏有個常見誤會
國際化你的APP意味着要打入歐洲市場
事實上 這點很重要
但你還要謹記中國和日本
用戶方面的挑戰
也就是 他們不使用字母文字
沒有字之間沒有空格
而且 除此之外 UI上日文和中文會變的很短
因此 好消息是如果你使用我們的API
我們能夠快速地對你的APP進行國際化
所以 今天我們會在談起四個 
你必須考慮的四大塊領域：本地化 格式化
信息處理和佈局設計
那首先 說說本土化
現在 通過本土化 我是指
讓你的APP使用用戶的語言
字面上而言就是翻譯UI文字  
進一步而言
就是翻譯出文字背後你所要表達的觀念
所以 從這點開始比較如容易入手 
觀察用戶如何操作系統
左邊我們有OS X系統右邊是iOS系統
這裏有語言和地區面板
在左手邊這裏 在OS X截圖上
你會看到首選語言列表
事實上 這裏很重要的是這是個有序的語言列表
用戶可以添加多種語言 並且  
如果設定語言無法用於UI的話
系統會自動選擇下一種語言
例如 用戶已經選了瑞士德語作爲主要語言
但實際上我們沒有添加瑞士德語
因此對於這個UI它會變回英文界面
這個恢復設置事實上很普遍
所以你要從開發者的視角對此進行思考
此外    
對於APP所顯示的語言
我們有額外的地域優先
右邊的OS X系統是默認關閉的
而iOS系統中要進入下一級才能設置
現在事實上這些會應用於相關單元  
用於顯示特定地區時間 日程數據
所以說 對於目標語言
把你想翻出來的背後含義翻譯出來並不容易
對於更多關於
優先語言和區域設置的差別
請看去年的講演 "國際化高級議題"
那有更多相關細節
所以 我們提供了更多原來沒有的設置  
如果用戶有個人喜好
但我們也允許用戶進行自定義設置
iOS9系統和El Capitan系統新的地方 
是我們可以自定義數字系統
正如你在這看到的
假設我們有個用戶是講烏爾都語的
他們選擇了烏爾都語作爲他們的首要語言
那麼系統會恢復到
我們操作系統所顯示的語言 英語
默認情況下 用戶會看到標準的阿拉伯數字
雖然我們允許在iOS 9、OS X和 El Capitan系統中
自定義這些設置來取代已有的數字系統
很多人沒有意識到的是全球有很多種類的數字系統
最上面有阿拉伯語數字
還有波斯-阿拉伯數字
常在中東地區使用
所以用戶可以選擇這種設置  
在整個操作系統中會有很有趣的變化
例如 我們有天氣APP
現在由於開發者還未此進行任何修改 
但是我們稱之爲“本地化格式字符”
或者是NS數字格式器的API
已經可以免費改變數字系統了
在左邊 我們有使用阿拉伯數字的用戶
在右邊 我們有波斯-阿拉伯數字的用戶
我們發現他們每一位的數符在UI上都改變了
包括屏幕上方的時間標記
對於一個研發人而言 這很有趣 
我們稱之爲“本地化格式字符”這是免費的
現在 除了用戶在屏幕上看的語言外
用戶還會在你的應用上輸入文本
在新iOS9系統裏我們爲印度語系語言添加五種新鍵盤
在右邊 這裏 你看到泰盧固語輸入鍵盤 
而且 現在我們可以爲四種語言
進行輸入預測 包括韓語
墨西哥西班牙語 俄語和土耳其語
現在 從開發者的視角而言
我們發現通常這些字符並不是我們通常意義上的字符
在泰盧固語輸入鍵盤這裏我們加入了標記字符 
實際上 還有別的字符才能輸入一個可識別單元
再往深一點說
所以現在我們已經看過了用戶如何在你的操作系統改變設置
但本地化工具如何把字符翻譯成用戶看到的字符呢？
本地化工具主頁面是字符串文件
字符串文有自己的格式
首先有註釋 是c語言的註釋語法  
其次是左側的開發語言
目標語言在右側
我們這裏有德文字符文件  
字符文件儲存在lproj目錄文件包
在資源目錄下
英語有自己的字符文件包 同樣的德語也有 
我們自從XCode 6系統就允許你們
輸出本地化設置一般是XLIFF文件格式
然後可以以字符文件重新輸入到你的項目中
關於這其中更多的信息
我建議你們去看上一年的講演
"XCode 6本地化"
所以 我們已經看過了用戶是如何改變設定的
我們已經看過了本地化工具
如何把你屏幕上的字符翻譯成你想要的
但是  作爲一名開發者你如何利用這些設置呢？
這正是...
NSLocalizedString的功能
在Objective-C這是項龐大的工作
在Swift上 我們將其開發成高級功能
它需要五個參數其中三個是有默認值的  
有趣的是 在Swift中
我們做到了 其實設置評註這是無奈之舉
我們這是要強調這是重要因素
它能夠爲你的翻譯器提供上下文
在某些情況下給定單詞可能是模棱兩可的
這個註釋參數會幫助你進行自定義
所以 重點是你想要翻譯的字符 
註釋是來註釋解釋它的
現在 對本土化字符是起了 
除此在外 我們也允許你可以獲得本地化格式字符串
也就是說可以填入帶有變量參數的字符串
所以 你可以稱之爲本地化格式字符串
帶有特定格式的格式字符串
可以填入到有參數變量的格式字符串之中
而且事實上結合使用更爲常見
根據NSLocalized-String的叫法
我們稱之爲“本地化格式字符串”
現在 看看它的應用如何
做一個簡短的演示可能助理解
假設我們希望翻譯的字符的位置是：X
現在 也假設我們有一個變量位置
且已經被翻譯器植入到
用戶的實際位置
這就是字符串文件的樣子
左手邊是等待被翻譯的字符串
右手邊是翻譯好的變量
事實上我們會發現翻譯好的變量仍然存在變量字符串
百分比添加意味着填充字符串變量
因此 這是在英語工環境下的我們定位在舊金山
也同樣在日語環境下生效
這就是等效字符串
因此 你知道了這些之後
你腦中可能會出現一些假設
其中一個是 本地化格式字符串的順序
應該會與英文版的相同
現在我們會看看爲什麼不是這樣
我們根據NSLocalized-String結果
調動本地化格式字符串
我們想要翻譯字符串 “copy X is Y”
這裏的X是用戶名Y是我們想要複製的東西
這裏 我們通過hairForce1
這是克雷格·費德里吉選擇InstaMessage進行處理
以及“照片”
在我們的Iproj中在不同的Iproj中的
字符串文件中開發者可以假設
參數將以同樣的順序出現
這可能對英語環境奏效
而事實上對德語無效
這些參數需要轉化成德語中有意義的順序
因此 這裏就是定位器生效位置
以及可以添加位置格式參數的位置
這就使得原先的第二個參數
變爲第一個反之亦然
因此 接着 開發者並不需要做任何事情
他們調用 本地化格式字符串 以及NSLocalizedString
但是 重要的是要牢記從開發者角度而言
你認爲的第一個字符也許並不是第一個
因此 假如你設定操作會以相同的順序執行
那麼你可能需要重新考慮這個假設
因此 現在我們知道字符串文件是如何存儲
以及存儲在哪個目錄下
但至此你可能會嘗試做如下的事情
你將語言變量設置爲你所選擇的語言隊列的第一對象
這與我們之前看到的UI元素即首選語言列表相一致
再者 你將後綴Iproj添加於此 
並調用資源通道
假設我們想要本地化一個停止符號圖形
因此 我們在這裏假設我們的單獨文件包只有唯一一個
對應西班牙語的es.lproj
但是我們假設我們用戶的首選語言是墨西哥西班牙語
運用這種特定的方法用戶將不會得到任何反饋
爲什麼會這樣
那是因爲我們沒有運用標準的NSBundle API
如果NSBundle不可用系統將自動
退回到可執行位置
因此es-MX將會退回到es
另外 我們還有其它智能的回退邏輯
例如從印度英語 回退到英式英語 
即在英國使用英語
因此 假如你使用這些API
你會得到合適的資源
以及回退
“資源圖像”會給你圖像提示
“完整資源路徑”會給你完整的資源
‘URL資源’會給你
任何其他既定的文件格式
因此 我們可以看到 運用
NSBundle API可以使你更容易地找到你感興趣的資源
另外 然而你可能會認爲有些東西只能通過代碼實現
現在 你們當中有多少人會寫這樣的代碼
比 你想要翻譯字符串“還剩下X天”
我們知道在英語中如果只有一天
我們會用還剩下X天  如果是兩天
或以上 我們用“還有多天”
這適用於英語
適用於一天和五天
但對於其它語言而言複數形式方面
不具有同樣的邏輯假設一個給定的數字
例如在俄語中對於單獨一個 
我們有一種形式同樣對於少數 許多
以及更多 也有一種形式
因此 這並不適用於
不同複數規則的語言
爲了幫助你更好地瞭解此問題
我們提供了複數規則
出現已經有好幾個版本
但需要強調的是...
字符串stick文件本質上是
你存儲在項目中的一個plist文件
它是一個本地化資源
因此 它位於特定定位
Iproj目錄之下
同樣 你也有一個給定的密匙
該密匙鏈接了數字參數
取決於與不同的數字參數就會產生不同的成果
我發現這裏有很多文本尤其是當你在這裏添加俄語組件的時候
這就是說 你知道英語中對一個有一種形式
對其它則有另一種形式然而 俄語中
一個 少數 許多以及其它分別有它的各自形式
現在 當你要格式化stick文件的時候
我奉勸你查看一下“國際化和本地化指南”
這涉及到許多我們沒有在這裏
提出來的細節 例如如何格式化 如何創建文件夾
因此 從開發者的角度來說非常容易上手
再次說明 我們調用的是“本地化格式字符串”
是基於NSLocalized-String的結果
你傳輸的字符串就是字符串string詞典的密匙
然後你傳輸一個數字參數
填充到返回的格式化字符串變量中
因此無論是對於英語還是俄語中的一天 兩天
五天 都是正確的
在這裏我們會發現俄語中的兩天和五天是不一樣的
讓我們再多談談字符串stick
我們在iOS 9中有新的機制
可以讓你在屏幕上利用字符串stick來格式化字符串
應當說這同樣存在於EI Capitan系統中
首先 讓我們一個普遍的問題
在你的Interface-Builder應用裏
你設置了出現在你屏幕中央的字符串 “歡迎來到商店”
這可能會在iPad Air中奏效
但它不一定也會在IPhone 6 裏奏效
甚至在IPodTouch效果更糟
解決這個問題的一個辦法是運用自動佈局以及特定限制
這常常是解決這類問題的辦法我們晚一點會深究這個問題
但事實上 另一個解決這個問題的辦法是
運用新的“可變寬度規則類型”機制
這指的是在字符串stick內添加條目
這樣可以根據可用空間的大小
而產生不同的效果
在iOS上 這是指可用屏幕寬度M 
這指的是標準系統字體中
大寫字母M的可見寬度
在這裏我們要公佈三種不同的尺寸
我們定義如果有20M可用
我們就將字符串顯示爲“你好”
如果是25 爲“歡迎”
如果是50 則爲“歡迎來到商店”
對於開發者來說這麼使用相當容易
你可以在字符串stick文件中
調用NSLocalized-String祕鑰 
然後將它設置爲UI界面標籤對象
適用於iPad AiriPhone 6
和iPod Touch
但效果是不同的
有趣的是 我們以英語爲例子
但事實上它對各國的用戶都有重要影響
通常將英語翻譯爲其他語言
都會比原文長
因此 這可以使你從不同的翻譯版本中
選擇出不同語言的給定字符串因此這是一個非常有用的工具
在OS X上情況是不一樣的
同樣的 在OS X上 你調用
然後傳輸你的字符串stick字典密匙
然後你調用變量擬合佈局寬度
在OS X系統中 該整數變量
其實是一個任意數量
這可以是任意值因爲它被界定爲
字符串stick內的其他相對值
因此使用整數值20的效果是“您好”
25是“歡迎” 50是“歡迎來到商店”
總體上我們使之更加容易現在翻譯字符串
更容易 更靈活了
世界上各種語言在屏幕上顯示的字符串效果更好了
接下來 來說說格式化
簡單的轉化屏幕上的字符串一般是不夠的
此外 你還得考慮格式化日期 數字 時間
在iOS 9和ElCapitan新品上還需要格式化名字
所以 首先從格式化數字開始
這裏有一個正確的方法一個錯誤的方法
假設  我們希望向用戶顯示常數圓周率
一個天真的做法是使用格式參數百分比3F 
也就是說用3位精確浮點數參數
來表示字符串變量
在英文中 這個是適用的 圓周率顯示爲3.142
若你進行轉換而你的用戶是在德國進行操作的
他們會得到這個字符串
乍一看 好像是正確的
但事實上 德國用戶得到的圓周率是3,142
因爲在德國 十進制數字
不好意思 千位數和十進制數字事實上會被互換
也就是說我們在美國英語中用句號
他們則逗號 反之亦然
所以 利用這個事實
你可以調用本地化格式字符串
進入你先前用過的同一格式參數中
因爲用戶所在場所不同實現方式也會有所不同
意思就是 現在英語用戶和德語用戶的東西是一樣的
高級選項下本地化格式字符串用的是NS數字格式器
Ns數字格式器也有不少改進這些我們都會講到
在iOS9和El Capitan中NS數字格式器的數字格式不同
除了現有的貨幣格式外
現在 我們有貨幣ISO碼格式
以及貨幣複數格式和外幣賬格式
很有趣 這裏有外幣賬格式如果它是負數
那麼它則會在括號裏
在會計領域裏 這很正常
同樣地 我們增加順序格式
意思就是 排序列表裏數字的顯示方式
輸入42 你得到42nd
所以 除了格式化數字外
格式化日期也很容易出錯
這裏有一個用來格式化日期的很簡單的方法
我們用這個格式參數初始化一個NS字符串
也就是說對於美國英語用戶來說
它顯示的是今天的日期 早上9點
所以在美國英語環境下我們會得到這個字符串
看起來是恰當且正確的
但對於意大利語用戶來說我們得到了相同的字符串
而這個在意大利語種的意思截然相反
在意大利語中 意思是12月6日
此外可以對時間在稍微多些闡明
我們馬上會講到這點
所以試圖解決這個問題的一個方法是
創建一個NS日期格式器
事實上 NS日期格式器是正確的解決方式
但這種使用方法是錯誤的
這裏 我們創建一個日期格式參數
現在 日期格式蘊含字符串一個明確的順序
你在這裏提供的準確變量
將在你所在的場所擴展成你所看到的恰當的字符順序
再一次 在意大利這個地方收到的字符串是錯誤的
事實上 通過在你的NS日期格式器上
創建日期格式和時間格式
就可以很容易的解決這個問題
我們爲NS日期格式器提供若干即用型的格式
這允許你指定空格數量
使其適用於對應的字符串寬度
在這裏 我們調用在這裏我們爲日期和時間創建ShortStyle
因此 在意大利收到的反饋是...
字符串相同但是變量不同
對於意大利用戶來說現在意思是6月12日
這和美國英語用戶看到的是一樣的
現在有時候 這些日期格式和時間格式並未如你所需的那樣明確
爲了解決這個問題iOS 9和El Capitan的新特性
允許你在模板裏創建本地日期格式
這裏你提供一個模板
變量視你所給的位置情況重新排列
現在這是 當個人風格無法立即提供足夠信息
比如說 用戶希望第二個字符串也出現
但第二個字符串通常不是簡潔的格式
使用模板 我們允許你有24個小時的時間
允許你重新安排月份和日期參數
我們已經看過如何格式化數字如何格式化日期
但是 同樣重要的是如何格式化單位
事實上 這是個非常簡單的事例
但是卻很真實很真實的發生過
假設你想把數量6磅轉換成其它語言
一個很簡單的做法是轉化字符串
你的左手邊有X pounds
對於意大利語用戶我們將它轉換成X chilogrammi
即kilogram的意大利語是chilogrammi
這顯然是錯誤的在英語裏我們說6磅
在意大利語裏 變成說6千克這個數量無法對等6磅不等於6千克
事實上 數量是不相等的6磅作爲一個單位並不等於6千克
這樣做是錯誤的
NSMassFormatter的方法會更簡單些
NSMassFormatter
與NSEnergyFormatter
和LengthFormatter一樣
假設在高級選項下你用的是公制單位
所以當你爲可變重量分配一個浮點數時
它假設你用的是千克
所以你格式化一個NSMassFormatter
創建它的單位格式 
然後你調用string fromkilograms 重量單位是千克
在英語環境下它返回44.092
事實上這些單位轉換成了美國常用的單位
此外 在意大利語種你得到的是20 chilogrammi
這是正確的你所提供的重量數量轉換的條件也是正確的
所以 使用NSMassFormatter
可以非常容易的地顯示目標單位
iOS 9系統的新特性
允許你格式化名字iOS 9和El Capitan
爲了理解的實用性我們來看看並排在一起的兩個名字
第一個是GraceMurray Hopper
這是一位著名的計算機科學家來自美國
她定義了“bug”這個術語並開發了第一個編譯器
此外 我們來看一箇中文名字“Wang Dongling”
這是爲著名的書法家
他在杭州Apple Store外寫書法
這兩個名字都由三個部分組成
對它們進行說明的方法很重要同時也是不同的
在英語裏我們一般只稱呼名中間名和姓
在我們試圖將這個概念套用到中國用戶上時我們來看看會發生什麼
順序從左到右先前排在最後的名字
現在是第一個
中文名完全不存在了
從左到右 原先是第一個的
現在變成最後一個了
從這裏可以看到應用在這些概念中的術語和標籤同樣重要
所以 我們引入了NS 人名組件
和NS人名組件格式器
曾經有個笑話說推特不適合這套方法
使用方面需要花些時間也有點困難
但是 換而言之它所做的是非常精確的
它將人名格式化了
這是使用方法
你初始化一個NS人名組件對象
你填入教名中名和姓氏
這是針對美國英語用戶如何使用它
對於俄國用戶來說
你可能需要將Fyodor
MikhailovichDostoyevsky
同樣的 填寫在相同的域裏
接下來是如何將它格式化
你初始化NS人名組件格式器對象
正如我們用其他NS格式器所看到的它有一個格式組件
這裏 我們指定簡潔格式
然後 你在人名組件對象中調用人名組件字符串
這次調用的結果如下
有五種適用的格式
默認 簡潔 中等格式  長格式和縮寫  對每種語言來說
我們的方法是正確的
需要注意一些事情
事實上簡潔格式的變化和下面這些有關係
即用戶的位置以及個人用戶在郵箱 聯繫方式
日曆設置和加載設置
同樣地 對於俄語的名字來說
取名字 中名 和姓氏
第一個字符組成的縮寫名字是不存在的
所以 我們退回到簡潔格式
這真的很簡單可以立即對用戶的名字進行格式化
這就是數字 日期 時間 單位 和名字
我們已經知道如何轉化
如何在你的UI上轉化字符串
如何將用戶看到的單位格式化
此外 重要的是如何處理從用戶那收到的文本
這涉及到考慮字符是什麼
在不同情況下的不同變化
你是如何搜索那個字符的
同樣地你是如何將它轉換成其他腳本的
開始這部分之前我們來問一個哲學問題
什麼是字符
開始之前 我們來問問這個表情符號裏有多少個字符
最近 我們在iOS中引入了這個用鍵盤也可將其敲打出來
儘管表面上看它只包含單一的單位
但答案並不是立即就可以看出來
高級選項下 它由一 二 三 四 五
六 七 八個單獨字符表示
事實上 這些是萬國碼代碼點
並取決於你所使用的編碼事實上它可能多於8個
比如說 可能是十一 
但是這也就是說 你不需要考慮它
現在 很明顯的一個地方是列舉字符串
假設有個字符串測試後面緊跟着我們剛討論過的表情字符
現在你想在字符串內列舉每個字符
並調用characterat index
這將返回到包含單獨字符串的unichar
但這並不是你想要的
事實上 這顯示的是問號字符
有時是三個不可打印字符
由於某種原因這其中有個中心
所以它不是 顯然這個方法絕對是錯誤的
列舉字符串的正確做法是調用“列舉子字符串隊列”
此外 並表達“組成成字符序列”
這就使得這個字符
在高級選項下的再現與視覺再現相匹配
因此 當我們在字符串上調用時我們恰好得到六個字符
這就是列舉一個字符串的應用
但是有時你想把那個字符串轉化成不同格式
iOS 9新特性具備這個功能
iOS 9和El Capitan具備能
轉化字符串的功能
假設字符串是“istanbul”
首字大寫字符串的一個簡單方法是
只需調用“首字大寫字符串”屬性
對於美國英語用戶而言這看起來是正確的
事實上 對於英語用戶來說這是正確的大寫方式
但對於使用土耳其語的人來說
小寫字母i變成了大寫字母I
爲了能立即實現該功能
你可以簡單的在那個字符串上調用“本地化首字大寫字符串”
因此你可以得到正確的首字大寫的字符串
也就是說字符串的第一個字符是大寫的
除了“本地化首字大寫字符串”
我們還提供了“本地化大寫字符串”
和本地化小寫字符串
這就是它們看起來的樣子
所以 你立即就可以通過
簡單使用已經存在的API的本地變量
善用這些字符
這就是如何轉化字符串的例子
假設你想尋找一個字符串
回到一開始的問題字符是什麼
在用戶需要搜索一個指定的字符串時
他們期待的是什麼
假設這裏有一個變量代表德語的 uber
其中有個字母U
剛好又是元音U
用戶可能會想按照通常英語書寫格式
寫出小寫的uber就可以找到字符串
作爲開發者你可能調用“字符串範圍”進行尋找
但結果是0
在iOS 9和El Capitan新特性中
正確的搜索方法是“本地化標準字符串範圍”
這可使你在其他對發音不敏感的字符串和對大寫不敏感的字符串裏
搜索這個字符串
此外 它還爲指定用戶位置提供修正值
所以 在這裏通過簡單調用這些新API
我們通過“大寫U-變音-ber”裏找到了 uber小寫字符串
除在字符串裏進行搜索之外
有時你可能想轉化整個字符串
這就是轉換的由來
轉換允許你在整個字符串的大寫字母和小寫字母變量之間進行轉化
此外他們允許你進行萬國碼標準化
也就是說 他們可以元音字符拿出並將它們分開
比如帶有一個元音變音的A變成了A加元音變音字符
此外 還允許你進行腳本對腳本的轉化或直譯
也就是說中文漢字字符可轉化成拉丁文字符
先前 這種轉化只能在Core Foundation進行
因爲iOS 9 和El Capitan新特性
你可在Foundation裏進行轉化
你只需簡單調用“字符串應用轉化”
然後提供一個字符串或常量
表達你想要如何轉化字符串轉化成
這裏 我們想把這個表情字符翹起拇指
或 直譯成 XML 表達方式
做到這點只需調用“字符串應用轉化”
並提供“NS字符串轉化之XML十六進制”
此外 我們也爲漢字字符與拉丁文
以及歐洲不同腳本提供了這種轉換功能
所以 很容易
就可以轉化 轉換不同腳本間的字符串
並將單個字符轉換成不同的表現方式
這就是在我們的系統內
如何處理從用戶那收到的文本
此外 重要的一點是在屏幕布局視覺元素的方法
這就是自動佈局的由來
自動佈局很早就發佈了
最初的意圖是在適合你的屏幕數量的基礎上
用不同的方式格式化指定UI
在我們爲iOS 和 OS X發佈了不同的形狀因子後
自動佈局就變得越來越重要了
自動佈局有一個附加的好處
就是將應用的UI本地化
這是UI外觀的樣子
所以 假設 比如說我們想在iCloud中增加新日曆
這是一個英文版本的UI外觀
這個UI功能或許已經相當完善
當你在不同情況下測試時它可能會起作用
可能會與在運行時間內增加的內容不斷地相互作用
但是對於它如何運作
你並未在其他UI或語言中設置修正值
那麼它就可能打破你到剛纔爲止所做的這些假設
這個UI和前面的一樣 語言是希臘語乍一看 它似乎可以用
當你再仔細看時 你會發現事實上這個字符的長度等於3.5個字符
UI的附加部分也出現這個問題
現在 我要說的是在不同位置進行測試時
沒有必要本地化app 
多虧了XCode皮膚菜單
現在你可以使用雙寬度僞距語言和右至左僞距語言
測試你的app
使用這種方法可以不需要轉換
就可以在在不同的環境中查看UI是如何操作的
假設你將使用自動佈局
並已經正確設置壓縮優先權
和抗壓縮優先權
這就是出來的UI外觀
可以看到 先前是3.5個字符現在變成了12個
差別非常大
我們不通過指定靜態限制
而是根據它可增長限制允許標籤擴大可用的空格
也就是說限制少於或等於到屏幕邊的寬度
更多信息請重新看看昨天的演講
自動佈局的神祕之處 第1和第2部分
裏面有很多信息
關於如何在世界範圍內以及不同的設備方向上
在你的app上使用自動佈局
在UI中佈局 還需要注意一點
即表格單元格會自己變動大小
這涉及到動態類型
左邊是美國英語UI右邊是北印度語UI
注意到了吧 事實上單獨的單元格高度並不相同
這是因爲單元格自動改變大小
我們允許單元格佔用
由於語言行高度變化而多出來的空格
若你使用標準UI控制和UI視圖
就可以看到 而且是免費的
作爲開發者 需要注意的一點是你不能假設
提供的表格單元格 有一定的高度
在不同位置它可能擴大以佔用不同數量的空格
在iOS 9中 很重要的關鍵一點是我們完全支持從右到左的語言
左邊 是英語UI右邊是阿拉伯語UI
這些變化非常大
我們已經完成了標準控制和視圖
並轉化了綜合控制流
在英語中你將按照從左到右從一個菜單轉到詳細菜單
現在 在從右到左語言裏你按照從右到左的順序進行
可以看到這些雪佛蘭已經轉移了
附屬視圖在另一邊
大部分文本被翻轉
需要記住一點 在UI中
並不是所有的東西都可以移動可能不是你可以自行移動的
有時你想自定義行爲
可以看到“請勿打擾”的圖標
事實上還是從左到右拉丁文文本也還是從左到右
更多關於這部分的信息建議你查看昨天的演講
“國際界面的新UI工具支持”
說的是在iOS9中
如何使用標準控制對完全從右到左支持加以利用並加以利用
此外 如何在你的個人app上
對其進行自定義
總而言之 在將你的app國際化時需要注意
第一 定位信息
字符串是如何被轉化的
隱藏在譯文裏的概念是如何轉化成用戶所需的
此外 格式化 單位 日期 數字時間 名字是如何格式化成用戶所要的
文本處理 你如何從用戶那獲取文本並在文本上執行操作的
又回到這個問題字符是什麼
這是你在處理文本過程中需要時刻牢記的
最後 我們說到佈局
如何將UI要素展示給國際用戶
很幸運地是如果你用的是現有API本地化變量 以及標準視圖和控制
你就可以免費獲得這些功能
如果你牢記這點你就會發現國際化爲你的應用打開了世界的大門
更多信息請查看這些幻燈片或查看這些文檔
聯繫開發者論壇或App框架專員 保羅·馬科斯
也可查看相關會議
這些已經都有了你也可在你的app或在線查閱
今天從早上11:00到下午1:10
我們將提供國際化實驗室請一定要參加
我和我的團隊都將在那裏爲大家解答
關於app國際化和本地化的相關問題
謝謝