00:00:19.353 --> 00:00:24.224 
國際用戶界面新UIKit支持

00:00:30.197 --> 00:00:31.431 
大家
下午好！

00:00:31.498 --> 00:00:33.233 
歡迎參加

00:00:33.300 --> 00:00:35.502 
“國際用戶界面新UIKit支持”
這個會議 

00:00:35.569 --> 00:00:38.539 
我叫薩拉·拉迪 我是一名
國際利用軟件工程師 

00:00:38.605 --> 00:00:41.208 
和很多其他人一樣 
我也十分想以我的母語

00:00:41.275 --> 00:00:43.243 
來使用你們開發的
令人驚豔的app 

00:00:43.310 --> 00:00:46.980 
但是我在App Store中 
就是找不到那些很棒的

00:00:47.047 --> 00:00:48.549 
app的本地化版本 

00:00:49.349 --> 00:00:53.453 
我的母語是阿拉伯語 

00:00:53.520 --> 00:00:55.355 
在我從小長大的國家裏 

00:00:55.422 --> 00:00:57.157 
那裏 我們的書寫習慣
不是從右到左 

00:00:57.891 --> 00:01:01.428 
智能手機變得流行之前 
我們並不用考慮

00:01:01.495 --> 00:01:03.497 
從右往左的佈局 

00:01:03.931 --> 00:01:07.634 
因此 只要對
文本渲染

00:01:07.935 --> 00:01:09.369 
和字體提供支持就足夠了 

00:01:10.204 --> 00:01:13.607 
但是在今天 
有了這些電子設備 

00:01:14.041 --> 00:01:16.009 
人們開始使用
越來越多的電子書 

00:01:16.376 --> 00:01:19.112 
他們和自己的設備
進行了越來越多的交互 

00:01:19.847 --> 00:01:23.283 
因此在你們的app中僅僅
對文本提供支持已經不夠了 

00:01:23.450 --> 00:01:26.720 
對這些本地化提供支持時 
考慮你的app的佈局、流 

00:01:27.087 --> 00:01:30.691 
就變得
越來越重要了 

00:01:31.859 --> 00:01:35.495 
就像我一樣 
有一百萬的用戶都想

00:01:36.430 --> 00:01:38.832 
以他們的母語來使用
自己的app 

00:01:39.700 --> 00:01:43.303 
這是一個巨大的機遇 
你可以在世界的這些區域

00:01:43.370 --> 00:01:44.738 
拓展你的市場 

00:01:46.607 --> 00:01:49.610 
這裏有一個實例 
這是Apple在迪拜的一個廣告 

00:01:49.676 --> 00:01:51.879 
位於世界上最大的
建築物之一 

00:01:52.412 --> 00:01:54.081 
由此你就可以瞭解

00:01:54.147 --> 00:01:56.250 
Apple在中東的
存在 

00:01:58.385 --> 00:02:00.587 
那麼我們今天
要談些什麼呢？

00:02:01.054 --> 00:02:03.056 
我們主要要談談...

00:02:04.458 --> 00:02:07.294 
不好意思 

00:02:07.361 --> 00:02:09.263 
我們主要要談談

00:02:09.329 --> 00:02:11.932 
與從右到左用戶界面
相關的挑戰 

00:02:12.933 --> 00:02:15.602 
然後我們會介紹下
新UIKit支持 

00:02:16.103 --> 00:02:18.172 
我們爲從右到左的語言
添加了UIKit支持 

00:02:18.238 --> 00:02:21.008 
這樣 我們就可以
讓你就可以毫不費力地

00:02:21.074 --> 00:02:24.278 
支持
從右到左 

00:02:24.811 --> 00:02:27.181 
然後我們會談談
你的定製佈局 

00:02:27.247 --> 00:02:29.583 
談談你如何可以通過
自動佈局、在你的定製佈局中

00:02:29.650 --> 00:02:32.819 
添加從右到左支持 
之後我們會介紹下我們剛剛

00:02:32.886 --> 00:02:37.925 
加到iOS 9上的新API 
然後再談一些

00:02:37.991 --> 00:02:40.727 
異常情況 
希望會議結束時 

00:02:40.794 --> 00:02:44.831 
我可以看到更多的app在
App Store中本地化爲

00:02:44.898 --> 00:02:47.067 
阿拉伯語和希伯來語 
不好意思 

00:02:49.570 --> 00:02:51.805 
讓我們開始吧 
先來看一個概述 

00:02:52.539 --> 00:02:55.542 
當你用從左到右的語言
設計你的app時 

00:02:56.043 --> 00:02:59.112 
比如說英語 
你總是先把

00:02:59.646 --> 00:03:02.783 
最重要的
元素

00:03:02.850 --> 00:03:04.351 
放到屏幕的左側 

00:03:05.118 --> 00:03:07.054 
之後 
如果你還有其他元素 

00:03:07.187 --> 00:03:09.189 
它們就會自然地
從左邊流到右邊 

00:03:09.489 --> 00:03:10.991 
我們這樣做的原因 

00:03:11.058 --> 00:03:14.194 
是因爲佈局本身開始跟隨
腳本的

00:03:14.261 --> 00:03:16.163 
讀寫
方向 

00:03:16.630 --> 00:03:20.000 
因此如果你是從右到左
設計你的app、反轉腳本 

00:03:20.067 --> 00:03:23.704 
這就完全說得通了 
因爲腳本的讀寫順序

00:03:23.770 --> 00:03:25.372 
就是從右到左 

00:03:27.875 --> 00:03:32.279 
此外 UI鏡像概念
也不僅僅適用於靜態UI 

00:03:32.346 --> 00:03:34.515 
它同樣適用於動態UI 

00:03:34.715 --> 00:03:36.083 
比如 你在你的app中

00:03:36.149 --> 00:03:39.186 
手勢導航、
導航動畫 

00:03:39.486 --> 00:03:42.122 
比如這裏 
後退按鈕總是

00:03:42.189 --> 00:03:43.724 
位於屏幕的左側 

00:03:44.091 --> 00:03:47.828 
因此 在從右到左的環境中寫作時 
不僅後退按鈕應該

00:03:47.895 --> 00:03:50.264 
位於右側 
相應的手勢和動畫

00:03:50.330 --> 00:03:52.199 
同樣也應該
位於右側 

00:03:55.135 --> 00:03:56.937 
那麼UIKit有什麼新特性呢？

00:03:57.771 --> 00:04:02.176 
在iOS 9
UIKit上 發送方控制器完全支持

00:04:02.242 --> 00:04:03.410 
用戶界面鏡像 

00:04:03.577 --> 00:04:05.412 
這就意味着 
但你的app在從右到左的

00:04:05.546 --> 00:04:09.082 
環境中運行時 
它們會自動替你翻轉過來 

00:04:09.316 --> 00:04:13.153 
整個系統和我們所有的
原生app都完全支持

00:04:13.220 --> 00:04:16.589 
從右到左的UI 因此
不用擔心你的app會不一致 

00:04:18.125 --> 00:04:21.428 
我們來看看原生app中的
一些標準控件 

00:04:22.162 --> 00:04:24.264 
我們就從UI表格視圖開始吧 

00:04:25.465 --> 00:04:28.268 
這個例子取自
“設置”app 

00:04:28.335 --> 00:04:31.171 
我們使用了一個
庫存UI表格視圖 

00:04:31.371 --> 00:04:34.708 
你可以在這裏看到 
我們的設備運行語言是英語 

00:04:34.775 --> 00:04:37.678 
因此圖表位於
屏幕的左側 

00:04:37.845 --> 00:04:40.981 
標籤是左對齊 
表格視圖附件位於

00:04:41.048 --> 00:04:44.218 
右側 現在 
把我的語言改成希伯來語 

00:04:44.284 --> 00:04:48.722 
舉例來說 它會自動替我
翻轉表格視圖單元 

00:04:49.022 --> 00:04:51.491 
所以現在所有的圖標
都到了右側 

00:04:51.758 --> 00:04:55.495 
文本標籤在圖標左側
右對齊了 

00:04:55.562 --> 00:04:58.165 
表格附件也到了
左側 

00:04:59.666 --> 00:05:01.702 
接下來是導航控件 

00:05:02.269 --> 00:05:04.304 
這是一個取自
手機app的實例 

00:05:04.371 --> 00:05:07.207 
你可以看到後退按鈕現在
位於屏幕的右側 

00:05:07.274 --> 00:05:09.610 
並且 
導航手勢和動畫

00:05:09.676 --> 00:05:12.179 
都來自屏幕的
右邊 

00:05:12.479 --> 00:05:15.249 
如果你仔細看 
還有UI表格 

00:05:15.315 --> 00:05:18.218 
底部的UI表格
也翻轉過來了 

00:05:18.285 --> 00:05:20.387 
所以現在“收藏夾”
到了右側 

00:05:21.788 --> 00:05:25.325 
下一個 跟蹤手勢 
這是另一個取自“時鐘”app

00:05:25.392 --> 00:05:29.663 
的一個UI表格視圖的實例 
你可以看到幻燈片 

00:05:29.963 --> 00:05:33.500 
滑到上方的手勢
來自屏幕的左邊 

00:05:34.434 --> 00:05:37.404 
如果你使用庫存UI表格視圖 
然後啓用

00:05:37.471 --> 00:05:39.173 
滑到上方的手勢 
就可以免費實現了 

00:05:41.842 --> 00:05:44.578 
那麼如果在
你的app中允許從右到左支持呢？

00:05:44.978 --> 00:05:47.548 
如果你已經在你的app
進行了這項本地化 

00:05:48.015 --> 00:05:50.651 
那麼你只需要
鏈接到iOS 9即可 

00:05:50.918 --> 00:05:52.619 
然後測試你的app 

00:05:52.686 --> 00:05:55.255 
確保你的定製佈局
按預期運作 

00:05:56.957 --> 00:05:59.459 
但是如果你是首次添加

00:05:59.526 --> 00:06:01.461 
這項本地化 
那麼我們建議你

00:06:01.528 --> 00:06:04.798 
把你的storyboards改爲
自動佈局這一基礎步驟 

00:06:04.865 --> 00:06:08.202 
這樣當你添加本地化時 

00:06:08.402 --> 00:06:12.472 
XCode就會快速爲你創建
基礎字符串 

00:06:12.573 --> 00:06:15.242 
你就可以導出它們
然後進行翻譯 

00:06:15.442 --> 00:06:18.846 
翻譯完畢後 你就可以
通過XCode再次把它們導入 

00:06:19.246 --> 00:06:22.349 
這樣 當你運行你的app時 
你就會看到 

00:06:22.416 --> 00:06:25.752 
你的翻譯被自動集成了 
並且 

00:06:25.819 --> 00:06:27.321 
你的佈局也翻轉過來了 

00:06:29.189 --> 00:06:31.058 
我們再來談談測試 

00:06:32.826 --> 00:06:36.663 
即使沒有這些本地化項目、
對翻譯進行集成 

00:06:36.730 --> 00:06:40.667 
XCode也會大大簡化
你對從右到左的佈局的測試 

00:06:41.068 --> 00:06:42.803 
當你來到XCode結構中 

00:06:43.070 --> 00:06:46.173 
把你的應用程序的語言
從系統語言改爲

00:06:46.440 --> 00:06:48.108 
從右到左的語言時 

00:06:48.175 --> 00:06:50.444 
它就會爲你模擬一個
從右到左的環境 

00:06:50.511 --> 00:06:53.480 
你就可以看到你的app
是否已經爲從右到左

00:06:53.580 --> 00:06:55.816 
這種環境
做好準備了 

00:06:56.450 --> 00:06:58.886 
我們想向你展示下
我們剛剛談到的這些內容 

00:06:58.952 --> 00:07:01.655 
我會請我的同事
阿爾坦·阿哈默德

00:07:01.722 --> 00:07:03.156 
上臺給你做個演示 

00:07:15.502 --> 00:07:17.304 
<br/> 
太好了 謝謝 薩拉 

00:07:18.438 --> 00:07:23.310 
我要向你們展示一個app
來當例子 這是我寫的 

00:07:23.410 --> 00:07:26.046 
這是我寫的一個簡單的
食譜app 我想爲你們添加

00:07:26.113 --> 00:07:28.448 
一個從右到左的本地化 
讓你們看看 

00:07:28.515 --> 00:07:30.551 
藉助我們添加到iOS 9的新東西 

00:07:30.918 --> 00:07:34.188 
這有多麼容易 

00:07:34.288 --> 00:07:37.424 
這是app 
相當直接 

00:07:37.491 --> 00:07:39.993 
這裏有一個表格視圖 
底部有一個標籤欄 

00:07:40.594 --> 00:07:43.063 
如果我們點擊其中的
一個單元 

00:07:43.130 --> 00:07:44.965 
我們就可以看到那個食譜的
詳細視圖 

00:07:45.032 --> 00:07:47.501 
我們在這裏有一些定製標籤
和類似的東西 

00:07:47.568 --> 00:07:50.971 
是通過自動佈局佈置的 
還有一個集合視圖 

00:07:51.038 --> 00:07:54.675 
展示了那個食譜的一些照片 
用戶就是要照着這個食譜 

00:07:54.741 --> 00:07:56.310 
來製作美食 

00:07:58.512 --> 00:08:03.450 
既然我們準備好向我們的
app添加一個從右到左的

00:08:03.517 --> 00:08:06.553 
本地化 我們就想
先看看它長什麼樣 

00:08:06.620 --> 00:08:09.990 
但是在對任何翻譯
進行集成之前 

00:08:10.057 --> 00:08:11.992 
或者在做任何此類事之前 
我們想先看看 

00:08:12.059 --> 00:08:14.528 
添加了新的變更之後 
我們的app成了什麼樣子 

00:08:15.028 --> 00:08:17.865 
要照着薩拉所說的做 
我要到XCode中對屏幕菜單

00:08:17.998 --> 00:08:22.736 
進行編輯 
從應用程序語言下拉菜單中 

00:08:22.803 --> 00:08:25.239 
我要選擇從右到左的
僞語言 

00:08:26.340 --> 00:08:29.443 
這樣會讓那些UI
發生改變 

00:08:29.510 --> 00:08:31.211 
而不用真正加載
任何翻譯 

00:08:31.645 --> 00:08:33.780 
還有一項額外的優點 

00:08:33.847 --> 00:08:36.416 
如果我的母語不是
一種從右到左的語言 

00:08:36.482 --> 00:08:39.919 
我也可以在英語中看到
我的app帶有從右到左的UI

00:08:39.986 --> 00:08:41.755 
是什麼樣子 這樣 
在我進行任何翻譯之前 

00:08:41.822 --> 00:08:45.492 
我就不用學習那些語言 或者
找一個母語人士幫我複審 

00:08:46.159 --> 00:08:48.729 
我來把它關掉 
並且再次運行app 

00:08:51.098 --> 00:08:51.932 
搞定了 

00:08:51.999 --> 00:08:56.003 
一行代碼都沒寫 
我就把所有的這些變更引入了

00:08:56.069 --> 00:08:57.504 
我的app 
我可以發現 

00:08:57.571 --> 00:08:58.872 
東西看上去很不錯 

00:08:59.373 --> 00:09:04.044 
我們查看下我們的app 
看看發生了哪些變動 

00:09:04.111 --> 00:09:07.014 
因爲我用的是標準表格視圖
單元類型 即第I類 

00:09:07.748 --> 00:09:11.118 
文本標籤位於
右側 

00:09:11.718 --> 00:09:14.521 
V形圖案位於左側 
並且指向左側 

00:09:14.955 --> 00:09:16.623 
就連底部的標籤欄
也翻轉過來了 

00:09:16.690 --> 00:09:19.860 
如同從右到左的用戶
預期的那樣 

00:09:19.993 --> 00:09:21.495 
現在第一個標籤到了
最右邊 

00:09:22.196 --> 00:09:25.999 
如果你再看看導航欄 
你會發現之前位於右側的

00:09:26.066 --> 00:09:28.068 
導航按鈕現在
也翻轉過來了 

00:09:28.135 --> 00:09:29.903 
如果我點擊其中的一個
單元 

00:09:30.270 --> 00:09:32.172 
我就會發現 
因爲我用的是自動佈局 

00:09:32.239 --> 00:09:33.674 
受前後
約束 

00:09:33.974 --> 00:09:37.144 
文字對齊和整個UI
都翻轉過來了 

00:09:37.811 --> 00:09:40.881 
這裏 有件很酷的事情
要注意 集合視圖 

00:09:40.948 --> 00:09:42.649 
因爲我用的是庫存集合視圖、
默認的

00:09:42.716 --> 00:09:46.086 
集合視圖流佈局 
集合視圖也翻轉過來了 

00:09:46.153 --> 00:09:48.622 
因此 
現在第一張照片到了右側 

00:09:48.856 --> 00:09:52.693 
而後面的項目則
接到了左邊 

00:09:53.126 --> 00:09:55.796 
正如薩拉所指出的那樣 
導航也顛倒過來了 

00:09:55.863 --> 00:09:59.099 
如果我點擊這個後退按鈕 
你可以看看我到了哪裏 

00:09:59.399 --> 00:10:01.835 
導航從右側出現了 
事實上 

00:10:02.202 --> 00:10:04.771 
如果我們嘗試滑動 
我們也能看到同樣的效果 

00:10:06.039 --> 00:10:06.840 
太棒了 

00:10:06.907 --> 00:10:10.177 
我已經在我的app中檢查了
這些新的從右到左的變更 

00:10:10.244 --> 00:10:11.945 
看起來很不錯 
我準備好添加

00:10:12.012 --> 00:10:13.280 
翻譯、

00:10:13.580 --> 00:10:15.249 
看看

00:10:15.315 --> 00:10:17.384 
過程是什麼
樣子的 

00:10:18.752 --> 00:10:20.254 
那麼
我要選擇我的項目 

00:10:20.320 --> 00:10:23.457 
在項目導航中 
我要去到編輯器中 

00:10:23.524 --> 00:10:26.393 
這裏 你可以看到一些
與本地化相關的選項 

00:10:26.460 --> 00:10:29.162 
那麼 
我要添加本地化 

00:10:29.429 --> 00:10:30.764 
我來選擇阿拉伯語 

00:10:31.598 --> 00:10:36.203 
XCode向我顯示了一個對話框 
開始工作了 

00:10:36.270 --> 00:10:40.073 
這樣就會創建
我需要翻譯的

00:10:40.140 --> 00:10:42.643 
本地資源文件 

00:10:43.911 --> 00:10:47.714 
下一步需要從我的項目中
導出

00:10:47.781 --> 00:10:50.350 
字符串 
那麼我們再回到編輯器菜單 

00:10:50.417 --> 00:10:51.919 
點擊本地化導出 

00:10:52.352 --> 00:10:54.254 
XCode問我
要導出到哪裏 

00:10:54.721 --> 00:10:57.357 
我選擇桌面 
然後點擊“保存” 

00:10:58.192 --> 00:11:01.962 
現在XCode從我的項目中
取出了所有的字符串 

00:11:02.296 --> 00:11:04.164 
並且打包進了一個
XLIFF文檔 

00:11:04.231 --> 00:11:07.367 
這是軟件翻譯
常見的文件格式 

00:11:07.668 --> 00:11:09.036 
並且把文件放到了桌面上 

00:11:09.670 --> 00:11:14.241 
我可以把這個文件發給一位
翻譯人員 

00:11:14.341 --> 00:11:16.643 
翻譯人員會替我
正確翻譯完畢 

00:11:16.710 --> 00:11:18.912 
然後返回給我一個
翻譯好的XLIFF的文件 

00:11:20.380 --> 00:11:24.418 
非常棒 翻譯人員
搞定了翻譯部分 

00:11:25.719 --> 00:11:27.187 
我準備好
導入本地化了 

00:11:27.254 --> 00:11:29.890 
我回到編輯器中 
導入本地化 

00:11:31.024 --> 00:11:34.228 
找到我的翻譯好的XLIFF文件夾 
這是我阿拉伯語、

00:11:34.294 --> 00:11:37.564 
裏面有譯文的XLIFF文件 
點擊“輸入”

00:11:38.632 --> 00:11:44.137 
XCode開始運行 取走全部譯文 
並且把它們整合到我的項目中 

00:11:45.272 --> 00:11:49.810 
現在我們的UI和譯文
都準備就緒了 

00:11:51.211 --> 00:11:55.182 
最後一步 
我要返回編輯結構菜單 

00:11:56.016 --> 00:11:56.783 
這次我要選擇阿拉伯語 

00:11:56.850 --> 00:11:59.853 
而不是從右到左的僞語言 
因爲我寫入了本地化 

00:12:00.187 --> 00:12:02.122 
阿拉伯語
顯示了出來 

00:12:04.892 --> 00:12:07.494 
關閉 再次運行app 

00:12:10.864 --> 00:12:11.698 
搞定了 

00:12:12.232 --> 00:12:13.834 
現在 
我有了翻譯過的字符串 

00:12:13.901 --> 00:12:16.336 
我的導航控件標題
翻譯過了 

00:12:17.437 --> 00:12:20.440 
我的標籤欄項目也
翻譯成了阿拉伯語 

00:12:20.507 --> 00:12:23.210 
正如用戶預期的那樣 
我可以給我

00:12:23.277 --> 00:12:27.447 
說阿拉伯語的客戶
提供一個完整的

00:12:27.514 --> 00:12:29.183 
從右到左的
用戶體驗 

00:12:29.516 --> 00:12:31.251 
這裏 
還有一個額外的好處 

00:12:31.318 --> 00:12:35.122 
因爲我是用日期組件
格式化程序來

00:12:35.656 --> 00:12:38.992 
格式化我的準備時間
和烹製時間 

00:12:39.159 --> 00:12:42.329 
實際上 我也得到了
它們的本地化版本 

00:12:42.396 --> 00:12:46.233 
使用數字和日期格式化程序
的無縫插件 

00:12:47.935 --> 00:12:48.769 
可以了 

00:12:48.836 --> 00:12:50.637 
把你現有的從左到右app
轉變成

00:12:50.704 --> 00:12:53.740 
從右到左的app 
就是

00:12:53.807 --> 00:12:55.075 
這麼簡單 

00:12:55.409 --> 00:12:56.376 
我要請保羅上來 

00:12:56.443 --> 00:12:58.946 
請他再來講講 
你應該如何轉變

00:12:59.313 --> 00:13:00.547 
你的定製UI 

00:13:11.058 --> 00:13:13.493 
就像薩拉
和阿爾坦向你們演示的 

00:13:13.560 --> 00:13:17.030 
如果你用的是庫存UIKit控件 
那麼向你的應用程序中添加

00:13:17.097 --> 00:13:19.600 
一個從右到左的本地化 
就會非常容易 

00:13:20.267 --> 00:13:22.536 
但是如果你的情況比較複雜 
那該怎麼辦呢？

00:13:23.437 --> 00:13:26.540 
首先 在我們開始之前 
我想回顧下我們進行的

00:13:26.607 --> 00:13:29.176 
一些API變更 這樣 
如果你正在定製化UI控件 

00:13:29.443 --> 00:13:32.145 
你就可以更加容易地
支持從右到左的本地化 

00:13:32.746 --> 00:13:36.216 
如果你正在用UI文本框 
那麼左視圖、右視圖、

00:13:36.316 --> 00:13:38.819 
左視圖模式、右視圖模式
就會自動爲你鏡像成

00:13:38.886 --> 00:13:40.888 
從右到左 這樣 
你就不需要做其它事情了 

00:13:41.321 --> 00:13:43.991 
你唯一需要注意的是
矩形邊界方法 

00:13:44.057 --> 00:13:45.158 
它們不會變 

00:13:46.727 --> 00:13:49.530 
當你在設置separatorIns
ets時 表格視圖中 

00:13:49.596 --> 00:13:51.598 
左右測量會自動
替你翻轉過來 

00:13:51.665 --> 00:13:53.534 
不需要你自己
做任何其它工作 

00:13:55.636 --> 00:13:58.105 
如果你正在用滑塊 
最小、最大值圖像

00:13:58.172 --> 00:14:00.707 
會自動替你
翻轉過來 

00:14:00.774 --> 00:14:03.810 
這是因爲 在從右到左的語境中 
滑塊的最小值位於右側 

00:14:05.312 --> 00:14:07.881 
你唯一需要注意的是
矩形邊界方法 

00:14:07.948 --> 00:14:09.917 
當它們
翻轉時 

00:14:10.017 --> 00:14:13.020 
如果你正在X軸上定製
偏移 

00:14:13.086 --> 00:14:15.455 
如果你在從右到左的
語境中運行 

00:14:15.522 --> 00:14:17.925 
你就需要確保它們正確
對從右到左做出解釋 

00:14:18.792 --> 00:14:21.662 
最後 對於像你在演示中
看到的導航欄來說 

00:14:22.329 --> 00:14:25.799 
我們會自動爲你翻轉左側欄
按鈕項目和右側欄按鈕項目 

00:14:25.866 --> 00:14:29.503 
但是 
如果你在這些API之外 

00:14:29.570 --> 00:14:32.940 
添加子視圖 
你就需要確保它們擺放正確 

00:14:33.006 --> 00:14:35.375 
不然 
你就會出現重疊的內容 

00:14:36.810 --> 00:14:39.980 
我們再來談談一些你可能
用在你的應用程序上的

00:14:40.047 --> 00:14:42.449 
定製UI 
談談應該如何正確處理它們 

00:14:42.950 --> 00:14:45.219 
就像你之前看到的 
標準單元類型會自動

00:14:45.285 --> 00:14:47.254 
替你翻轉 
不需要你做其它工作 

00:14:47.855 --> 00:14:49.957 
這就意味着 
如果你有定製佈局 

00:14:50.023 --> 00:14:51.758 
你就需要確保
它們也翻轉過來了 

00:14:52.092 --> 00:14:53.794 
以便它們
和OS的其它部分、

00:14:54.094 --> 00:14:56.396 
和你的應用程序中可能的
其它表格視圖單元類型

00:14:56.463 --> 00:14:57.497 
保持一致 

00:14:57.965 --> 00:15:01.335 
當然 你可以通過在
你的佈局中簡單映射幀

00:15:01.401 --> 00:15:04.004 
來實現這一點 
但是我們建議你

00:15:04.071 --> 00:15:05.672 
使用前後約束
自動佈局

00:15:05.739 --> 00:15:08.308 
就可以了 
因爲這樣就不需要你做任何

00:15:08.375 --> 00:15:11.011 
其它的事情 
無論是從左到右還是

00:15:11.078 --> 00:15:14.081 
從右到左 你都可以有
一模一樣的界面、代碼處理 

00:15:14.848 --> 00:15:17.050 
對於集合視圖來說 
情況也很類似 

00:15:17.117 --> 00:15:18.552 
就像我們在演示中看到的 

00:15:18.619 --> 00:15:21.088 
集合視圖流佈局自動支持
從右到左 

00:15:21.154 --> 00:15:24.057 
只要對項目重排序 
從右流到左即可 

00:15:24.791 --> 00:15:28.128 
這就意味着 如果你是在做定製
集合視圖佈局 

00:15:28.195 --> 00:15:30.931 
你需要確保它在X軸上
也正確翻轉了 

00:15:31.598 --> 00:15:34.902 
一般來說 我們今天推薦你
用子類集合視圖流佈局 

00:15:34.968 --> 00:15:36.036 
而不是從頭開始

00:15:36.103 --> 00:15:38.472 
寫你自己的
佈局代碼 

00:15:39.273 --> 00:15:41.675 
實際上 
明天下午就有個會議 

00:15:41.742 --> 00:15:44.311 
會講講如何很好地
實現這一點 

00:15:44.378 --> 00:15:46.847 
會議上還會講講你可能
想在Cocoa Touch中

00:15:46.914 --> 00:15:48.615 
進行的其它本地化 

00:15:49.149 --> 00:15:51.919 
那麼 在這次演示中 
我們已經

00:15:51.985 --> 00:15:53.921 
多次提到了
自動佈局 

00:15:53.987 --> 00:15:55.822 
但是你們可能
不熟悉這項技術 

00:15:56.423 --> 00:16:00.127 
“自動佈局”是一種
通過使用一組約束 

00:16:00.360 --> 00:16:02.563 
而不是使用幀 向你的UI
放置元素的一種方式 

00:16:02.896 --> 00:16:06.900 
自從iOS 6之後就可以用來 
讓你更方便地支持不同的

00:16:06.967 --> 00:16:10.771 
iPhone、iPad屏幕尺寸 
支持不同的

00:16:10.871 --> 00:16:12.573 
尺寸
等級 

00:16:13.040 --> 00:16:14.975 
新的split-view
多任務處理 

00:16:15.242 --> 00:16:18.545 
讓你的應用程序
更容易

00:16:18.612 --> 00:16:20.147 
兼容這項新技術 

00:16:20.914 --> 00:16:22.883 
最後 
即使在從右到左本地化之前 

00:16:23.450 --> 00:16:25.152 
“自動佈局”也能
讓你

00:16:25.219 --> 00:16:26.954 
更容易支持附加的
本地化 

00:16:27.321 --> 00:16:29.256 
這是因爲 
一旦你有了一組很好的約束 

00:16:29.590 --> 00:16:31.491 
添加一項新的本地化 
就不過是

00:16:31.558 --> 00:16:33.427 
翻譯字符串罷了 
你不需要

00:16:33.493 --> 00:16:35.762 
寫任何特殊代碼
來正確配置佈局 

00:16:35.829 --> 00:16:38.832 
如果我在XCode中有什麼
約束 

00:16:38.899 --> 00:16:41.502 
在英語中看起來是
一模一樣的 這毫無疑問 

00:16:41.568 --> 00:16:44.204 
當我在俄語中運行時 
它看起來可能是這樣的 

00:16:44.671 --> 00:16:46.773 
如果我爲一種長度是英語的
兩倍的語言

00:16:46.840 --> 00:16:49.309 
添加本地化 
那麼 

00:16:49.576 --> 00:16:50.777 
我並不需要
做其它事情 

00:16:50.844 --> 00:16:52.346 
因爲約束會替我
處理

00:16:52.412 --> 00:16:53.881 
所有的
UI定位 

00:16:54.515 --> 00:16:57.584 
現在 從右到左這樣做 
還有另外一個原因 

00:16:58.619 --> 00:17:03.090 
你的佈局會自動
翻轉 

00:17:03.156 --> 00:17:04.691 
你不需要
做任何其它事情 

00:17:05.259 --> 00:17:07.895 
現在 
你可以在storyboards、

00:17:08.228 --> 00:17:10.797 
代碼中使用自動佈局 
或者使用兩者的組合 

00:17:10.964 --> 00:17:13.599 
這樣 你的約束和storyboar
d就有了一個出口 

00:17:13.901 --> 00:17:16.537 
當由於某種原因 
你需要改變你的UI時 

00:17:16.603 --> 00:17:18.405 
你就可以以編程方式
來對它們進行處理 

00:17:20.540 --> 00:17:22.709 
我們剛纔講了
前後 

00:17:22.776 --> 00:17:24.711 
同樣地 你對它們可能也
不熟悉 

00:17:25.412 --> 00:17:27.781 
其實就是 當你並排有
兩個標籤 

00:17:28.182 --> 00:17:29.583 
並且它們之間有水平
約束時 

00:17:29.650 --> 00:17:32.419 
你就可以把它們指定爲
從左到右 

00:17:32.486 --> 00:17:33.854 
或者指定爲從前往後 

00:17:33.921 --> 00:17:36.957 
不同之處在於 
從左到右是不會變的 

00:17:37.591 --> 00:17:40.394 
另一方面 從前往後
在從左到右的本地化中

00:17:40.460 --> 00:17:41.762 
看起來像是從左到右 

00:17:41.995 --> 00:17:44.298 
但是實際上 
在從右到左的本地化中 

00:17:44.364 --> 00:17:46.133 
它是映射了你的UI和佈局 

00:17:46.700 --> 00:17:49.069 
當你在storyboards中
創建約束時 

00:17:49.336 --> 00:17:51.672 
如果你創建的是默認的
水平約束 

00:17:52.105 --> 00:17:54.074 
那麼它們就已經是
從前往後了 

00:17:54.141 --> 00:17:55.442 
你並不需要
做任何其它事 

00:17:56.844 --> 00:17:59.012 
類似地 
如果你在代碼中創建約束 

00:17:59.079 --> 00:18:00.781 
並且你用的是
可視化格式語言 

00:18:01.181 --> 00:18:04.585 
那麼同樣地 
水平約束也會默認爲從前往後 

00:18:05.052 --> 00:18:07.721 
但是 如果你明確地
創建約束 

00:18:08.121 --> 00:18:10.824 
或者你是在iOS 9上使用新的
佈局定位器API 

00:18:11.391 --> 00:18:14.261 
那麼當你創建約束時 
你就需要確保

00:18:14.328 --> 00:18:15.796 
你選擇了
正確的屬性 

00:18:18.198 --> 00:18:22.603 
你在這個演示中看到的動畫 
都會爲全部庫存控件翻轉過來 

00:18:22.970 --> 00:18:26.540 
這就意味着 
如果你在你的UI中有定製動畫 

00:18:26.607 --> 00:18:28.775 
那麼你就需要確保
它們也正確翻轉過來了 

00:18:28.842 --> 00:18:30.978 
當然了 如果你願意的話 
你可以使用幀 

00:18:31.478 --> 00:18:35.616 
但是我們建議你使用
帶有從前往後的約束的

00:18:35.682 --> 00:18:37.217 
自動佈局
來代替幀 

00:18:37.284 --> 00:18:40.521 
然後改變那些約束的
定值即可 

00:18:40.721 --> 00:18:43.423 
這樣就可以自動完成
從左到右以及從右到左 

00:18:43.490 --> 00:18:45.726 
而不需要任何
附加的代碼 

00:18:45.792 --> 00:18:47.928 
這裏有一個實例 
你可以看看是怎樣實現的 

00:18:48.462 --> 00:18:52.299 
假如說 
我想改變某個約束的定值 

00:18:52.366 --> 00:18:54.568 
在這裏 我有一個持續時間 

00:18:54.635 --> 00:18:56.870 
我要把偏移量改成一個
不同的值 

00:18:56.937 --> 00:19:00.040 
開始動畫之前 我要調用layout
IfNeeded 

00:19:00.107 --> 00:19:02.543 
確保幀的起始位置
是正確的 

00:19:03.410 --> 00:19:05.412 
然後我會調用一個隱式
動畫塊 

00:19:05.479 --> 00:19:08.115 
在動畫塊裏面我可以改變
約束的實際常數 

00:19:08.182 --> 00:19:10.817 
然後再次調用
layoutIfNeeded 

00:19:10.884 --> 00:19:12.085 
這樣就更新了幀 

00:19:12.386 --> 00:19:14.555 
因爲它位於隱式
動畫塊裏面 

00:19:14.621 --> 00:19:16.023 
變更也就會被
製成動畫 

00:19:16.423 --> 00:19:19.226 
你可以在這裏看到 
這裏並沒有爲從右到左

00:19:19.293 --> 00:19:22.429 
或者從左到右寫特例 
只有一組單一的代碼 

00:19:22.496 --> 00:19:24.331 
代碼在兩種語境下
都運行的十分完美 

00:19:25.966 --> 00:19:27.501 
現在 我們再來談談手勢 

00:19:27.568 --> 00:19:30.537 
就像你已經看過的
表格視圖和導航 

00:19:30.604 --> 00:19:31.972 
我們把標準手勢翻轉過來了 

00:19:32.406 --> 00:19:36.176 
但是 手勢識別器API自身
卻不會變 

00:19:36.410 --> 00:19:38.579 
原因在於 
手勢識別器

00:19:38.645 --> 00:19:40.414 
本身是
很抽象的 

00:19:40.480 --> 00:19:42.516 
我們在框架層次是不可能
知道你使用

00:19:42.583 --> 00:19:45.085 
手勢識別器的
目的 

00:19:46.019 --> 00:19:49.823 
作爲一名開發者 
這對你們意味着當你們使用

00:19:49.890 --> 00:19:52.025 
手勢識別器時、當你們對
手勢事件做出響應時 

00:19:52.092 --> 00:19:54.061 
你們只需要注意
使用手勢識別器的

00:19:54.795 --> 00:19:56.330 
實際用途
即可 

00:19:57.331 --> 00:19:59.499 
舉例來說 
如果你使用你的手勢識別器

00:19:59.766 --> 00:20:02.769 
在屏幕上繪圖 
你就需要保留原樣 

00:20:02.870 --> 00:20:05.405 
這是因爲母語爲從右到左的用戶
不會倒着畫 

00:20:06.273 --> 00:20:08.909 
但是 還是舉例來說 
如果你的表格視圖單元

00:20:08.976 --> 00:20:10.544 
有定製手勢識別器 
你就需要確保

00:20:10.611 --> 00:20:12.813 
你把它翻轉過來 
因爲表格視圖樣式的

00:20:12.880 --> 00:20:14.715 
佈局
已經翻轉過來了 

00:20:16.617 --> 00:20:20.754 
類似地 
如果你用的是導航手勢 

00:20:20.821 --> 00:20:23.257 
你也需要把它們翻轉過來 
就像我們之前看到的 

00:20:23.323 --> 00:20:24.925 
前後
實際上顛倒了 

00:20:24.992 --> 00:20:26.927 
這裏 要記住的
最重要的事情是 

00:20:26.994 --> 00:20:29.730 
不論你在做什麼 
你都需要確保手勢

00:20:29.796 --> 00:20:32.933 
能夠正確追蹤手勢下方的
UI 

00:20:33.200 --> 00:20:35.869 
當你從左劃到右 
但是UI卻從右移到了左 

00:20:35.936 --> 00:20:37.804 
你肯定不希望
出現這種情況 

00:20:37.871 --> 00:20:39.072 
因爲這會讓人
暈頭轉向 

00:20:39.740 --> 00:20:42.743 
而如果你用“自動佈局” 
你的工作就可以大大簡化 

00:20:42.809 --> 00:20:45.546 
我想把阿爾坦再請回來 
請她對我們剛剛

00:20:45.612 --> 00:20:47.581 
談到的事情 
做一個演示 

00:20:54.154 --> 00:20:56.156  line:-3
<br/> 
謝謝 保羅 

00:20:56.223 --> 00:20:58.392 
當保羅做演講時 
我又考慮了下我的app 

00:21:02.196 --> 00:21:05.599 
我決定

00:21:05.666 --> 00:21:08.669 
增加一些定製UI 

00:21:09.269 --> 00:21:14.141 
因此我就創建了一個很酷的
定製表格視圖單元子類 

00:21:14.208 --> 00:21:16.243 
是通過“自動佈局”
佈置的 

00:21:16.577 --> 00:21:17.477 
相當直接 

00:21:17.544 --> 00:21:20.414 
這一行中有一些
更多信息文本標籤 

00:21:20.714 --> 00:21:23.016 
這裏有一張漂亮的圖片 
這樣用戶就可以看到他們

00:21:23.083 --> 00:21:25.252 
將要烹飪的美食的圖片 

00:21:25.319 --> 00:21:29.256 
左側還有一個很酷的小
收藏夾視圖 

00:21:29.323 --> 00:21:31.992 
這樣用戶就可以通過劃動
單元 把它拖出來 

00:21:32.326 --> 00:21:34.962 
和我們現在在表格視圖單元
上有的

00:21:35.028 --> 00:21:37.564 
庫存swipeToDelete手勢
很類似 

00:21:38.098 --> 00:21:41.602 
如果他們拖的足夠遠 
那麼圖片頂部會出現一顆

00:21:41.668 --> 00:21:43.670 
小星星 
告訴他們這張食譜

00:21:43.737 --> 00:21:45.906 
已經添加到了收藏夾了 

00:21:46.807 --> 00:21:49.343 
我們來看看在從左到右的

00:21:49.409 --> 00:21:52.579 
語境中、在英語中 
它是什麼樣子的 

00:21:53.113 --> 00:21:58.552 
太好了 我的app現在看起來
更有生機、

00:21:58.619 --> 00:22:01.755 
更有魅力了 
這是一張照片 

00:22:02.122 --> 00:22:07.361 
這裏有一些文本標籤 
實際上 如果我把單元

00:22:07.427 --> 00:22:10.264 
拖動的足夠遠 
收藏夾視圖就顯示出來了 

00:22:10.330 --> 00:22:14.134 
如果我完成這個手勢 
小星星就顯示出來了 

00:22:14.368 --> 00:22:18.605 
太好了 剛纔保羅演講時 
我趁機

00:22:18.672 --> 00:22:21.542 
學習了
阿拉伯語 

00:22:21.875 --> 00:22:24.511 
並且向我的app添加了
阿拉伯語本地化 

00:22:24.945 --> 00:22:27.614 
那麼在這個演示中 我們就要
在阿拉伯語中運行app 

00:22:27.881 --> 00:22:29.550 
這就是我們的從右到左語言 

00:22:29.917 --> 00:22:32.286 
我要返回
編輯結構菜單 

00:22:32.653 --> 00:22:36.890 
這次選擇“阿拉伯語” 
點擊“回車” 運行app 

00:22:39.793 --> 00:22:42.296 
哇！這是因爲我用了帶前後約束的
自動佈局 

00:22:42.362 --> 00:22:44.698 
所有的事情
都翻轉過來了 

00:22:44.765 --> 00:22:47.100 
現在圖片
到了右側 

00:22:47.301 --> 00:22:48.735 
文本標籤都成了
右對齊 

00:22:48.802 --> 00:22:49.903 
位置也都正確 

00:22:50.237 --> 00:22:53.674 
當然了 V形圖案屬於庫存 
它的位置沒變 

00:22:54.041 --> 00:22:57.711 
格式化程序插件、
持續時間和數字 

00:22:57.778 --> 00:23:00.848 
都爲阿拉伯語正確進行了
本地化 

00:23:01.615 --> 00:23:03.317 
不過我們還沒有看
定製手勢 

00:23:03.383 --> 00:23:05.452 
我們來看看 

00:23:05.719 --> 00:23:08.488 
因爲整個單元都是
從右到左佈置 

00:23:08.822 --> 00:23:12.659 
用戶期望滑動收藏夾的
方向也是

00:23:12.726 --> 00:23:16.763 
如此 
當然更是因爲整個系統的

00:23:16.830 --> 00:23:18.832 
劃動刪除手勢
也翻轉過來了 

00:23:19.233 --> 00:23:20.868 
這樣他們就知道 
它是來自左側 

00:23:20.934 --> 00:23:23.504 
不論你的定製手勢是什麼 
用戶都會期待

00:23:23.570 --> 00:23:24.738 
手勢
從右開始 

00:23:25.439 --> 00:23:27.941 
我們來朝着這個方向滑動下 
看看對於這個例子中的

00:23:28.008 --> 00:23:31.178 
一個從右到左用戶來說 
會發生什麼 

00:23:31.845 --> 00:23:34.414 
你可以看到 
事情並未像預期的那樣運行 

00:23:34.648 --> 00:23:37.951 
我劃動了 
但是視圖沒有顯示 

00:23:38.018 --> 00:23:39.920 
表格單元視圖以爲我
點的是它 

00:23:40.320 --> 00:23:41.989 
因此給我展示了
詳細視圖 

00:23:42.055 --> 00:23:43.423 
這可不太說得通 

00:23:44.391 --> 00:23:46.293 
發生這種事情的
原因是 

00:23:46.360 --> 00:23:49.863 
我的代碼中有一個
隱含假定 

00:23:50.230 --> 00:23:52.232 
超出了那個劃動的
定向性 

00:23:52.833 --> 00:23:55.702 
我期望劃動是
從左到右 

00:23:56.136 --> 00:23:58.305 
或者換句話說 
是沿着正的X方向 

00:23:59.239 --> 00:24:02.242 
事實上 
如果我朝着那個方向劃動 

00:24:02.309 --> 00:24:04.311 
那個視圖確實可以
顯示出來 

00:24:04.578 --> 00:24:07.481 
但是 它顯示的方向
和我手指拖動的方向

00:24:07.548 --> 00:24:09.683 
是
相反的 

00:24:10.050 --> 00:24:12.586 
這對用戶來說 
可不太說得通 

00:24:12.986 --> 00:24:16.089 
你肯定想避免出現
此類情況 

00:24:16.857 --> 00:24:20.060 
那就讓我們回到
表格視圖單元子類 

00:24:20.127 --> 00:24:23.497 
看看我們能不能找到
問題所在 

00:24:24.364 --> 00:24:26.733 
這裏你可以看到 
我有兩項手勢識別器

00:24:26.800 --> 00:24:28.168 
相關的方法 

00:24:28.235 --> 00:24:30.771 
第一個是手勢識別器
應該開始的方法 

00:24:31.405 --> 00:24:33.373 
我採用這種方法的
原因是 

00:24:33.440 --> 00:24:36.076 
就像我之前說過的那樣 
我想要對定製手勢以及

00:24:36.143 --> 00:24:38.111 
庫存表格視圖手勢
都提供支持 

00:24:38.645 --> 00:24:41.448 
那麼在這裏 
如果用戶滑動的方向

00:24:41.515 --> 00:24:44.818 
和我的手勢方向一致 
我就讓我的手勢識別器啓動 

00:24:45.152 --> 00:24:47.654 
如果用戶朝着swipeToDele
te的方向滑動 

00:24:47.721 --> 00:24:50.057 
那麼我就什麼也不做 
讓表格視圖自行處理 

00:24:50.924 --> 00:24:53.660 
那麼在這裏你可以看到 
我有手勢識別器的X翻譯 

00:24:53.961 --> 00:24:56.597 
如果翻譯大於零值 
或者大於從左到右 

00:24:56.663 --> 00:25:01.001 
那麼我就會
啓動我的手勢識別器 

00:25:01.301 --> 00:25:03.637 
那麼我們在這裏需要做的 
就是校驗我們是否運行在

00:25:03.704 --> 00:25:06.974 
從右到左的語境中 
如果是的話 

00:25:07.040 --> 00:25:10.110 
我們就需要查找相反方向的
翻譯 

00:25:10.377 --> 00:25:13.413 
要知道我是否允許在
從右到左的

00:25:13.480 --> 00:25:16.450 
本地化中 
我要使用我們加到iOS上

00:25:16.583 --> 00:25:19.019 
的新API 
保羅很快會講到這一點 

00:25:19.086 --> 00:25:22.990 
不過因爲
我們現在正好需要 那我就先用了 

00:25:23.056 --> 00:25:25.792 
我先聲明一個叫做

00:25:25.859 --> 00:25:28.795 
isLeftToRightLayo
ut的新常數 

00:25:30.330 --> 00:25:33.901 
我要爲語義內容屬性
使用一個新的

00:25:33.967 --> 00:25:38.038 
用戶界面佈局方向 
我要在我的

00:25:38.305 --> 00:25:41.875 
視圖語義內容屬性中
解析我們加到 iOS 9的API 

00:25:42.142 --> 00:25:45.212 
這會返回一個解算過的
佈局方向 對這個視圖來說

00:25:45.279 --> 00:25:50.017 
是從左到右還是從右到左 
如果返回的方向是

00:25:50.083 --> 00:25:51.852 
從左到右 
那麼我就知道 我是在

00:25:51.919 --> 00:25:53.187 
從左到右的本地化中運行 

00:25:54.421 --> 00:25:57.858 
校驗翻譯之前 
下一步要做的是 

00:25:57.925 --> 00:26:00.460 
我要查看下我的
isLeftToRight變量 

00:26:00.794 --> 00:26:03.330 
如果是從左到右 那麼
我們像往常一樣繼續即可 

00:26:04.264 --> 00:26:07.334 
如果是從右到左 那麼我們
就要尋找小於零或者位於

00:26:07.401 --> 00:26:09.069 
導航X中的翻譯 

00:26:09.570 --> 00:26:12.172 
這裏的第二個方法 

00:26:12.239 --> 00:26:15.943 
是這個updateFavorite
ButtonPosition方法 

00:26:16.009 --> 00:26:19.246 
那麼在這裏 
我們實際上就對約束的常數

00:26:19.313 --> 00:26:22.216 
進行了處理 
並且在屏幕上顯示了那個視圖 

00:26:22.282 --> 00:26:25.185 
在這裏你還可以看到 
我應該允許拖動

00:26:25.252 --> 00:26:28.288 
收藏夾按鈕常數 

00:26:28.355 --> 00:26:30.724 
這樣就可以告訴下面的代碼 
是否應該開始顯示

00:26:30.791 --> 00:26:35.262 
那個視圖了 
同樣地 我們會校正的X翻譯 

00:26:35.629 --> 00:26:38.198 
解決方法也很類似 
我們把這個校驗拿過來 

00:26:39.533 --> 00:26:42.369 
放到這裏 

00:26:42.436 --> 00:26:45.572 
然後校驗從左到右佈局 

00:26:45.639 --> 00:26:47.808 
校驗相反方向的翻譯 

00:26:47.875 --> 00:26:49.743 
並且校驗
從右到左 

00:26:50.844 --> 00:26:53.914 
這裏的最後一位是這個distanc
ePulled變量 

00:26:53.981 --> 00:26:58.418 
因此 distancePulled
變量 或者常量 

00:26:58.485 --> 00:27:03.690 
會告訴下面的代碼 
用戶在單元上指頭拖動了多遠 

00:27:04.358 --> 00:27:06.927 
現在我們就可以接受一個
負的翻譯了 

00:27:06.994 --> 00:27:09.997 
distancePulled變量也
成爲負的 這樣

00:27:10.063 --> 00:27:12.399 
沒有什麼意義 
因爲它表達了一個絕對值的

00:27:12.466 --> 00:27:15.669 
分類 
要糾正這一點 

00:27:15.736 --> 00:27:19.506 
我們就也要獲取翻譯的
絕對值 

00:27:19.873 --> 00:27:21.408 
這樣就可以替我們解決問題 

00:27:22.176 --> 00:27:25.078 
做了這些變更後 
我們再來運行下app 

00:27:25.579 --> 00:27:28.015 
看看情況怎樣 

00:27:29.716 --> 00:27:31.952 
好了 這裏的一切
看起來都不錯 

00:27:32.252 --> 00:27:34.788 
現在如果我把我的手指

00:27:34.855 --> 00:27:38.692 
拖過去 那麼事情就會像
從右到左的用戶期望的那樣了 

00:27:38.892 --> 00:27:40.327 
就是這樣 
你就是隻需要確保

00:27:40.394 --> 00:27:42.663 
留意你的代碼中的
此類

00:27:42.729 --> 00:27:45.399 
假設 
這就是從右到左的關鍵所在 

00:27:45.465 --> 00:27:47.701 
有時候 
事情

00:27:47.768 --> 00:27:50.103 
就是
這麼簡單 

00:27:50.571 --> 00:27:53.273 
把你的定製手勢和UI

00:27:53.340 --> 00:27:56.443 
轉變爲從右到左 就只需要做這些 

00:27:56.510 --> 00:27:59.146 
我們請回保羅 
請他再講一些異常

00:27:59.213 --> 00:28:01.415 
以及
最佳做法 

00:28:08.188 --> 00:28:11.358 
<br/> 
好的 謝謝 阿爾坦 

00:28:11.425 --> 00:28:14.194 
我們來講一些異常 
講講我們引入iOS 9的

00:28:14.261 --> 00:28:16.430 
一些
新API 

00:28:17.531 --> 00:28:18.799 
其中一個就是我們在

00:28:18.866 --> 00:28:21.935 
阿爾坦的演示中看到的
語義內容屬性API 

00:28:22.069 --> 00:28:23.770 
那麼在我們開始之前 
我們先來談談

00:28:23.837 --> 00:28:25.572 
什麼是
語義內容屬性 

00:28:26.540 --> 00:28:29.576 
語義內容屬性是
UI視圖的一項新屬性 

00:28:30.310 --> 00:28:34.181 
用途是確保所有的UI在
從右到左和從左到右的

00:28:34.248 --> 00:28:37.918 
語境中都能正確顯示 
因爲有時候並不是所有的

00:28:37.985 --> 00:28:40.053 
UI都會翻轉 
我們就需要確保我們

00:28:40.120 --> 00:28:42.356 
可以對此
進行指定 

00:28:42.789 --> 00:28:45.492 
那麼 
默認語義內容屬性是未指明的 

00:28:46.727 --> 00:28:49.263 
在從右到左本地化中會
翻轉 

00:28:49.329 --> 00:28:51.832 
而在從左到右的本地化中則
保持不變 

00:28:52.766 --> 00:28:55.335 
但是我們還有一些你可以
設置的附加屬性類型 

00:28:55.402 --> 00:28:57.571 
可以阻止翻轉發生 
不管是出於歷史原因還是

00:28:57.638 --> 00:29:01.041 
出於
其它原因 

00:29:01.341 --> 00:29:03.544 
可以管理從右到左的用戶的
異常 

00:29:04.411 --> 00:29:06.680 
最後一點 
前後約束的

00:29:06.747 --> 00:29:08.515 
分辨率 實際上是
基於

00:29:08.582 --> 00:29:10.050 
語義內容
屬性的 

00:29:10.617 --> 00:29:12.486 
要記住
這一點 

00:29:13.187 --> 00:29:15.055 
首先是回放 

00:29:15.622 --> 00:29:19.526 
這裏的想法是 
如果你有某種回放控件 

00:29:19.793 --> 00:29:21.995 
你就用它來取代那個控件的
語義內容屬性 

00:29:22.062 --> 00:29:23.997 
或者取代那一組控件 
來進行回放 

00:29:24.064 --> 00:29:25.599 
然它們保持
從左到右 

00:29:25.666 --> 00:29:28.735 
就像你在這個新的 
音樂app中看到的一樣 

00:29:28.802 --> 00:29:32.439 
我們的進度條
以及回放控件 

00:29:32.506 --> 00:29:34.808 
它們都保持了從左到右 
並不會翻轉 

00:29:35.876 --> 00:29:37.477 
下一個是空間 

00:29:37.945 --> 00:29:41.281 
是爲了註釋控制 
對應某種直接UI操縱的

00:29:41.348 --> 00:29:44.818 
註釋控制 
你的遊戲中可能有一個

00:29:44.885 --> 00:29:47.554 
遊戲手柄 
按上方向鍵就向上移動 

00:29:47.621 --> 00:29:51.058 
按左方向鍵就往左移動 
或者是文本對齊的類似操作 

00:29:51.391 --> 00:29:54.828 
因此我們在頁面app這裏 
有一個分段控件 

00:29:54.895 --> 00:29:56.463 
你就可以設置文本上的
對齊方式 

00:29:56.897 --> 00:29:59.266 
即使運行在從右到左的
本地化中 左對齊文本

00:29:59.333 --> 00:30:01.301 
也會停留在
左側 

00:30:01.635 --> 00:30:04.271 
我們不要動它了 

00:30:04.671 --> 00:30:07.140 
最後 
對於你們那些想更明確的人 

00:30:07.207 --> 00:30:09.443 
我們還有這些
forceLeftToRight

00:30:09.510 --> 00:30:12.112 
和RightToLeftand
從右到左屬性類型 

00:30:12.179 --> 00:30:14.114 
你從它們的名字就可以
知道它們的功能 

00:30:14.181 --> 00:30:17.851 
forceRighToLeft會對
從左到右的本地化中的佈局產生影響 

00:30:17.918 --> 00:30:21.221 
其它則只有當你在從右到左的語境中運
行app時纔會產生影響 

00:30:21.288 --> 00:30:23.590 
對於這些我最後要說的是 
如果你想用它們 

00:30:23.657 --> 00:30:25.325 
請到實驗室
和我們談談 

00:30:25.392 --> 00:30:26.960 
或者在
開發者論壇發帖 

00:30:27.027 --> 00:30:29.863 
以便我們確認你沒有
做錯什麼事情、

00:30:29.930 --> 00:30:32.900 
確認現有的API
不能很好地滿足你的需求 

00:30:32.966 --> 00:30:35.102 
也許我們漏了添加一種
API 

00:30:35.169 --> 00:30:37.771 
你就可以
告訴我們 

00:30:39.173 --> 00:30:43.243 
我想再談談
當你支持從右到左時的

00:30:43.310 --> 00:30:45.445 
UI和文本的
最佳做法 

00:30:46.013 --> 00:30:48.515 
你要確保自己時刻在做的
一件事是 

00:30:48.582 --> 00:30:51.451 
就像我們在演示中看到的
那樣 使用格式化程序 

00:30:51.752 --> 00:30:53.587 
對於阿拉伯語來說 
這尤其重要 

00:30:53.654 --> 00:30:55.956 
因爲不同的說阿拉伯語的
國家 對於一年中的

00:30:56.023 --> 00:30:59.259 
月份 
使用的是不同的單詞 

00:30:59.493 --> 00:31:01.628 
你需要確保正確
向你的全部用戶

00:31:01.695 --> 00:31:03.463 
顯示這些 
不論他們是在哪個地區、

00:31:03.530 --> 00:31:05.432 
哪個國家用 

00:31:05.499 --> 00:31:06.800 
事實上 明天有場

00:31:06.867 --> 00:31:09.102 
“國際化中有什麼新料”
演講 

00:31:09.169 --> 00:31:11.939 
就在一大早、上午九點 
他們會講一下所有現有的

00:31:12.005 --> 00:31:14.775 
格式化程序 
以及iOS 9上可用的一些

00:31:14.842 --> 00:31:17.211 
新
格式化程序API 

00:31:18.679 --> 00:31:21.114 
但是 你還是需要確保 
如果對於手勢識別器 

00:31:21.348 --> 00:31:24.451 
你有某種佈局或者邏輯分支 
就像我們看到的

00:31:24.518 --> 00:31:27.588 
那樣 
那麼你絕不應該用NSLocale、

00:31:27.654 --> 00:31:30.657 
NSbundle或者NSForma
tter來進行確認 

00:31:31.792 --> 00:31:33.594 
你可能看到過
這樣的代碼 

00:31:33.660 --> 00:31:36.496 
你想要知道自己是否運行在從右到左的
本地化中 

00:31:36.563 --> 00:31:38.999 
你查找下首選語言 
選擇最上面的那種語言 

00:31:39.066 --> 00:31:41.635 
看看它的書寫方向是不是
從右到左 然後就搞定了！

00:31:42.736 --> 00:31:44.571 
你絕對不應該
這樣做 

00:31:45.138 --> 00:31:47.374 
這樣很容易
搞砸 

00:31:48.141 --> 00:31:50.244 
你不會想
這樣做的 

00:31:50.310 --> 00:31:52.913 
如果你想知道自己的app是否運行在
從右到左的語境中 

00:31:53.580 --> 00:31:56.316 
你應該使用我們在這個
演示中看到的這個新API 

00:31:56.717 --> 00:31:59.253 
語義內容屬性
用戶界面佈局方向 

00:31:59.820 --> 00:32:02.456 
進入你感興趣的
視圖的語義內容屬性 

00:32:02.523 --> 00:32:05.826 
看看
它是怎樣佈局的 

00:32:05.893 --> 00:32:09.563 
這樣你就知道了UI佈局的方向
是從左到右 

00:32:09.630 --> 00:32:10.564 
還是從右到左 

00:32:11.131 --> 00:32:14.067 
當然了 與此相反的是 
你不能把它用於

00:32:14.134 --> 00:32:15.936 
區域設置、格式設置 

00:32:16.870 --> 00:32:20.274 
這裏有一個實例 
在某種程度上和上一個

00:32:20.340 --> 00:32:22.476 
幻燈片的意圖一樣 
不過這個實例是正確的 

00:32:22.543 --> 00:32:24.611 
我們得到了
視圖的語義屬性 

00:32:25.179 --> 00:32:27.814 
我們請求佈局方向 
如果正好是從右到左 

00:32:27.881 --> 00:32:30.517 
也許 
我們就可以採用定製邏輯 

00:32:31.919 --> 00:32:34.121 
處理文本時 
大多數情況下 

00:32:34.188 --> 00:32:36.657 
你需要讓對齊和定向性
保持

00:32:36.723 --> 00:32:38.559 
它們的
默認值 

00:32:39.059 --> 00:32:42.496 
這是iOS 9上的新變動 
現在默認就是自然對齊 

00:32:42.563 --> 00:32:44.831 
因此你不需要動
從左到右的語言中的

00:32:44.898 --> 00:32:47.334 
左對齊文本 
不需要動從右到左的語言中的

00:32:47.401 --> 00:32:49.036 
右對齊
文本 

00:32:50.103 --> 00:32:52.573 
類似地 
你絕不應該去動基本

00:32:52.639 --> 00:32:55.642 
書寫方向 除非你是在文本編輯器中
進行書寫 

00:32:56.009 --> 00:32:57.678 
自從iOS 7後 
默認就是這樣了 

00:32:57.978 --> 00:33:01.248 
可能對99%的應用程序來說 
你都絕不應該

00:33:01.315 --> 00:33:03.584 
去碰這個值、
改變默認值 

00:33:04.518 --> 00:33:09.056 
此外 你也不應該把這些
用於佈局代碼分支 

00:33:09.122 --> 00:33:11.758 
而應該用我們在上一個
幻燈片中看到的API 

00:33:13.627 --> 00:33:17.130 
最後 我要談談圖像 
對於從右到左的佈局方向

00:33:17.197 --> 00:33:20.501 
來說 我們有了新API和UI圖像 
叫做imageflipped 

00:33:21.134 --> 00:33:23.670 
它的功能是：
當你處於從右到左的語境時 

00:33:23.737 --> 00:33:27.007 
它會自動爲你
水平翻轉圖片 因此圖片在

00:33:27.074 --> 00:33:30.010 
從右到左佈局方向中會翻轉 
在從左到右的佈局中則不變 

00:33:30.077 --> 00:33:32.079 
然後在從右到左佈局方向中
翻轉過來 

00:33:32.613 --> 00:33:34.548 
這是基於包含圖片的
圖片視圖的

00:33:34.615 --> 00:33:36.617 
語義
內容屬性 

00:33:37.050 --> 00:33:40.120 
一般來說 
你只有在定向圖片或者

00:33:40.187 --> 00:33:43.891 
表達某種UI上
纔會用它 

00:33:44.091 --> 00:33:46.493 
這樣說從右到左的語言的
用戶 

00:33:46.560 --> 00:33:48.662 
纔不會看到自己的照片
成了鏡中的照片 

00:33:48.762 --> 00:33:52.399 
如果你在自己的應用程序中
看到錯誤或者V形圖案 

00:33:52.466 --> 00:33:55.135 
舉例來說 就像我們在
Safari工具欄看到的

00:33:55.202 --> 00:33:57.571 
後退按鈕、前進按鈕 
你需要確保它們會翻轉過來 

00:33:57.838 --> 00:33:58.972 
因爲所有的

00:33:59.039 --> 00:34:02.809 
定向性概念都已經
從右翻轉到了左 

00:34:02.976 --> 00:34:05.812 
類似地 如果你有某種代表
UI的圖標 

00:34:07.014 --> 00:34:10.083 
舉例來說 一個列表 
在新的地圖app的

00:34:10.150 --> 00:34:13.219 
通行功能中 
我們有這個圖標 

00:34:13.286 --> 00:34:16.123 
讓你可以看到操作步驟 
因爲它在某種程度上

00:34:16.190 --> 00:34:18.625 
代表了表格視圖 
在表格視圖中 

00:34:18.692 --> 00:34:19.893 
圖標位於右側 

00:34:19.960 --> 00:34:21.562 
你可以看到 
圖標已經翻轉過來了 

00:34:22.196 --> 00:34:24.398 
更微妙的是 
我們也把方向指南中的

00:34:24.598 --> 00:34:26.867 
人物翻轉過來了 
因爲如果我們不這麼做 

00:34:26.934 --> 00:34:29.036 
那麼人物看起來就像是在
脫離屏幕邊緣 

00:34:29.101 --> 00:34:31.572 
那麼就和其它的佈局
不怎麼相符了 

00:34:32.206 --> 00:34:35.842 
我想再把阿爾坦請回來 
請她給你們

00:34:35.909 --> 00:34:37.210 
快速
做個演示 

00:34:44.051 --> 00:34:46.719 
<br/> 
最後一個演示了 我保證 

00:34:55.495 --> 00:34:56.929 
好的 

00:34:57.231 --> 00:34:58.699 
很棒 

00:34:58.799 --> 00:35:02.336 
我剛剛學到了很多
關於我們添加的這個新的、

00:35:02.402 --> 00:35:05.005 
很酷的新API的知識 
我決定把我的定製表格視圖

00:35:05.072 --> 00:35:08.008 
單元中的定製推向
新高度 

00:35:08.375 --> 00:35:12.779 
添加一個定製V形圖案 
實際上 它是一個披薩片 

00:35:13.680 --> 00:35:18.652 
這個披薩片將會
引導我們的用戶到

00:35:18.719 --> 00:35:19.720 
下個畫面 

00:35:20.220 --> 00:35:23.123 
既然我們現在都已經熟悉了
從右到左 

00:35:23.190 --> 00:35:26.126 
那麼我們就直接在阿拉伯語中
運行我們的app 

00:35:26.760 --> 00:35:29.129 
就不再向你們展示它在
英語中是什麼樣了 

00:35:29.196 --> 00:35:31.732 
因爲我們已經過了那個階段 

00:35:34.334 --> 00:35:38.405 
太好了 因爲我用了自動佈局
和前後限制 

00:35:38.472 --> 00:35:40.541 
把披薩片放到了那個
圖片視圖 

00:35:40.807 --> 00:35:42.442 
它的位置就是
正確的了 

00:35:42.509 --> 00:35:45.279 
它位於單元左側上方 
和從右到左的用戶

00:35:45.345 --> 00:35:46.313 
期待的一模一樣 

00:35:46.647 --> 00:35:51.485 
然後 很明顯你可以看到 
披薩片指的方向是錯誤的 

00:35:52.085 --> 00:35:54.755 
保羅之前談到的 
正是這種

00:35:54.821 --> 00:35:56.323 
定向
圖片 

00:35:56.590 --> 00:35:58.592 
我們就可以使用
圖片翻轉API

00:35:58.692 --> 00:36:00.127 
來進行糾正 

00:36:00.861 --> 00:36:03.764 
讓我們回到那個圖表視圖
單元子類 

00:36:05.432 --> 00:36:07.501 
這裏你可以看到 
我的所有的[不知所云]方法 

00:36:07.568 --> 00:36:11.371 
這些所有的出口 
我的所有出口都會加載

00:36:12.039 --> 00:36:14.341 
並且準備就緒 
那麼我要做的第一件事 

00:36:14.408 --> 00:36:17.277 
給我的定製V形圖案圖片
獲取一個基準 

00:36:18.345 --> 00:36:21.582 
customChevronImag
eView.image 

00:36:21.648 --> 00:36:25.285 
既然我已經有了 
我要把它放回到

00:36:25.352 --> 00:36:30.123 
圖片視圖 
但是做了一個小的變更 

00:36:30.190 --> 00:36:32.125 
我要在UI圖片上 
爲從右到左的佈局

00:36:32.192 --> 00:36:33.894 
方向方法
調用

00:36:33.961 --> 00:36:35.362 
圖片翻轉 

00:36:36.396 --> 00:36:38.365 
這會讓你的圖片在
從左到右的本地化中

00:36:38.432 --> 00:36:41.902 
不受
影響 

00:36:42.269 --> 00:36:45.205 
但是在從右到左的本地化中
會水平翻轉 

00:36:45.272 --> 00:36:46.607 
在這裏 
重點要記住的是 

00:36:46.907 --> 00:36:50.744 
因爲這種方法已經替你
弄好了 

00:36:50.811 --> 00:36:53.747 
你就不需要擔心對它進行
集成了 它是從左到右 

00:36:53.814 --> 00:36:57.217 
還是從右到左？
校驗下 就像我之前那樣 

00:36:57.651 --> 00:36:59.753 
在任何本地化中 
你都可以信心十足地

00:36:59.820 --> 00:37:01.522 
調用這種方法 
然後你可以確信 

00:37:01.588 --> 00:37:02.656 
它是不會出錯的 

00:37:03.657 --> 00:37:05.158 
就這樣 
需要我們做的就這些 

00:37:05.225 --> 00:37:07.594 
做完了這個變更 
我們再來運行一次app 

00:37:10.831 --> 00:37:11.899 
完美的比薩餅 

00:37:12.165 --> 00:37:14.601 
我們的V形圖案
翻轉過來了

00:37:15.035 --> 00:37:15.802 
謝謝 

00:37:18.338 --> 00:37:21.341 
我們的V形圖案翻轉過來了 
我們的app看上去也很棒 

00:37:21.408 --> 00:37:24.444 
我們有了翻譯 
定製手勢看上去也很漂亮 

00:37:24.511 --> 00:37:25.712 
我們就準備就緒了 

00:37:25.779 --> 00:37:28.782 
把你的app本地化爲從右到左
就是這麼簡單 

00:37:29.116 --> 00:37:32.653 
薩拉該你了 
給大家講完這次會議 

00:37:37.691 --> 00:37:39.726 
謝謝你薩拉 
演示很棒 

00:37:39.927 --> 00:37:42.229 
我們很快會把薩拉今天給我們
做的演示

00:37:42.296 --> 00:37:45.265 
更新到
網上 

00:37:45.332 --> 00:37:47.734 
如果你漏掉了會議的某些內容 
你可以

00:37:47.801 --> 00:37:50.103 
下載這個簡單的代碼 
然後看看它 

00:37:50.804 --> 00:37:56.310 
會議結束之前 
我來總結一下 

00:37:56.376 --> 00:37:58.712 
當你爲從右到左的語言
設計你的app時 

00:37:58.779 --> 00:38:02.249 
這些語言的母語用戶
期待UI也是從右到左 

00:38:02.316 --> 00:38:04.651 
有了我們添加到iOS 9上的
新原生UIKit支持 

00:38:04.718 --> 00:38:08.055 
這就是一個
絕佳的機遇 

00:38:08.555 --> 00:38:11.525 
對你來說 就是添加
這個本地化的好機會 

00:38:11.592 --> 00:38:16.163 
不費吹灰之力 
我們還添加了新API 

00:38:16.296 --> 00:38:20.968 
對於不說母語的開發者
以及說母語的開發者來說 

00:38:21.034 --> 00:38:22.970 
都會
非常簡單 

00:38:23.570 --> 00:38:26.340 
你也可以藉此接觸到
數以百萬計的

00:38:26.406 --> 00:38:27.875 
新用戶、新市場 

00:38:29.610 --> 00:38:34.081 
要獲取更多信息 
請訪問我們的資料網站 

00:38:34.147 --> 00:38:37.551 
網址是developer.Apple.com
 我們有國際化資料 

00:38:37.618 --> 00:38:39.753 
還有本地化
資料 

00:38:40.020 --> 00:38:42.856 
如果你有問題 
你可以把它們貼到開發者論壇 

00:38:43.790 --> 00:38:46.927 
我們也建議你們參加
那些相關的會議 

00:38:46.994 --> 00:38:49.696 
我強烈推薦明天上午9 00的
“國際化中有什麼新料” 

00:38:49.763 --> 00:38:52.332 
再次
謝謝你們 

00:38:52.399 --> 00:38:54.601 
謝謝你們來參會 
祝你們下午過得愉快！

00:38:54.668 --> 00:38:56.703 
謝謝！