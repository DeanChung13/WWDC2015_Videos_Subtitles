《网络与NSURL会话》
早上好！
感谢您来到《网络与NSURL会话》会议
我是盧克·卡斯我是一个CF网络组的工程师
今天早上我为与会的各位罗列了一些很棒的东西
首先我们要讲一些应用程序传输安全问题
接着我们会讲在NSURL会话中添加了哪些新的协议
周一我们看到了WatchOS的发布
我们将会介绍为WatchOS添加的NSURL会话功能
之后我们会梳理一下API有哪些变化
以及我们在NSURL会话中添加了哪些新功能
首先我想要讲一下NSURL会话和HTTP协议的背景
NSURL会话是一个网络API
主要用于从网站下载内容或者HTTP内容
它包含很多委托方法
可以用来认证或者处理一些其他的重要事情
NSURL会话有一个非常强大的功能
那就是它允许你的程序
在没有后台下载API的情况下做网络层任务
如果你对NSURL会话不熟悉的话
建议你可以回顾一下
几年前的WWDC会议中对NSURL会话的介绍
现在让我们讨论一下超文本传输协议
这是一个非常有名的协议你们中的很多人可能都很熟悉
基本上其核心就是你向服务器发送请求
然后你会拉回一个数据包作为回应
现在HTTP其本身
你们中间有些人可能知道发送的是明码所以其从根本上来讲就不安全
在今天的网络环境中
有很多攻击团体追踪你的APP数据并将其发布到网络上
曾经有一段时间单独使用明码HTTP这是完全合理的
但是这段时间已经过去
现在我们所有人都是幸运的
这个问题在多年以前就被解决
就是HTTPS
但HTTPS本质上是HTTPS的上一层协议
属于传输层安全协议
传输层安全协议会通过公钥密码学方式
进行一个多点的信号交换之后
会创建一个安全的连接
这种连接的安全性是基于三个属性来讲
第一 从你的APP发出
并在网络上传输的数据是加密过的所以其不可读
第二 其提供了消息完整性参数
所以消息在检测之前是不可以修改的
最后第三点 它支持身份验证
所以你可以验证到底是谁在和你会话
现在NSURL会话有非常好的HTTPS嵌入性支持
通常在你的客户端代码中
这就像使用HTTPS代替HTTP一样简单
现在请注意需要一些额外的服务器支持
但HTTPS是大多数服务器供应商都支持的
还请记住
大多数数据都应该被标记为敏感数据
那是因为即使你认为
你在网络上传输的数据并不属于敏感数据
但是事实上你的客户可能认为它是敏感数据
假如你有一个TV流APP
你可能认为这只是一个电视
你知道吗？他只是看电视
他或她仅仅是看电视但是对他们来说...
他们事实上并不想让人们知道他们在看什么电视
让我们用这种方式解释
现在为什么说使用HPPTS如此重要？
事实上从本质上来讲
你的客户相信你能够保证他们的数据和个人隐私
在Apple我们非常想要和你们一起努力
并确保我们能够建立并维持这种信任关系
所以今天我非常自豪能够介绍App Transport Security
App Transport Security
是Apple在IOS 9和OS X和EI旗舰版中的一个新功能
从本质上来讲其核心是防止用户的个人隐私数据被意外泄露
现在ATS也加强了NSURL会话的默认方法
可以在默认设置下最重要的增强的方面
就是现在的NSURL会话
它不允许明码HTTP进行加载
它将只使用HPPTS连接
现在这种连接方式确实是当下最可靠且最好的实现方法
所以ATS对TLS的版本进行了限制
密码组合 信任证书 证书密钥的大小等都是被作为限制条件
现在ATS能很容易地通过应用程序的Info.plist进行配置
这里有一个例子
事实上我们让你做的就是声明你在应用程序中有目的的网络行为
核心上来讲ATS希望你能描述使用网络做什么
我们真心希望你能够放心你的应用程序安全问题
并且做事情的时候更加信赖这个系统
当网络交易是安全的时候这些都是最简单的事情
所以 如果你的程序只使用安全的连接
并且其只使用最佳安全属性
那么你就不需要做任何事情来为你的应用程序配置ATS
因此 如果你在编写一个新的应用程序这就是我们想要你做的事情
如果你有一个现成的应用程序或者有一段遗留代码
这就是你应该注意的地方
现在我们明白实际情况可能并不总是这样
假如你有一个服务器可以遵守这些TLS版本或者密码套件的新限制
所以我们允许例外情况的出现
事实上你可以通过ATS声明异常原因
让我们知道你想使用什么版本的TLS
或者你也可以选择正向保密或者其他的选项
我们理解现存的程序可能有不同的限制
假设大多数情况下你都使用安全连接
但是特殊情况下
你可能会使用一些并不支持HTTPS或者最佳实践的服务器
假如你有一个多媒体服务器
它并不支持HTTPS只支持HTTP
你能够很方便地用异常来描述这种情况
基本上所有你需要做的事情就是声明哪些域名需要加载HTTP
NSURL仍然允许明码加载
现在我们了解到你们中一些人可能会支持使用一个通用的网页浏览器
或者一个基于动态用户输入加载URL的程序
现在我们已经允许了这种情况
在这种情况下你不可能提前描述的安全连接的种类
所以你可以简单地选择声明允许所有的方法
现在这个允许所有的方法
能够允许NSURL会话加载任何的HTTP或者HTTPS资源
我相信这是目前互联网上现有的工具中
一个非常有用的调试工具
所以我们希望
如果你用它做调试可以对显而易见的原因进行临时调试
现在即使你就处于这种状态
你仍然能够保护特定的服务器和域
如果你的设置的是允许所有
但是如果你有一个用来拉取配置数据和元数据的服务器
并且用ATS来做调试这种情况是个例外
当你对一种例外情况进行允许所有的设置时
只需要简单地声明想要保护的域就行了
这样允许NSURL会话 继续通过只加载HTTPS或者最优方法
来保护这些资源
现在
从周一开始这个SDK已经发布了
可能有一部分人已经在这个糟糕的时间醒了
仅仅就是想知道ATS是干什么用的以及为什么你的网络会加载失败
我们明白
我们只是想和你一起工作所以才把你叫起来
所以请注意 ATS只有在你构建当前SDK时是活跃的
如果你针对的是之前的版本
ATS规则不适用
NSURL会话会将HTTP资源
或者URL自动转换成HTTPS
就像我之前说的你们中有人已经对这个开关有所了解
我们允许你暂时使用这个功能
来判断你的程序中新发生的网络错误
是不是因为ATS
这能够帮助你将范围缩小
接下来如果你打开了允许所有的ATS
允许所有开始加载
那么你就能够确定问题出在ATS
接下来就是查找你看到的NSURL会话的错误
所以你可以试着确定并缩小范围
到底哪个加载过程失败了
以及潜在的错误是什么
还有一个很棒的调试工具
是一个被叫做CF网络诊断的环境变量
如果你将CF网络诊断设置为一级
所有失败的URL开始加载
所有加载失败的任务都能被确定是URL错误
或者是底层TLS错误
这样接下来你能做的就是
查找底层TLS错误并确认transport.h的安全性
确定究竟是什么底层问题
通常是客户端和服务器端在TLS层的协商失败
所以现在弄明白这是一个新的API它仍然在发展
所以我们强烈建议你们关注种子笔记和发行说明
请将文件广播出来这样方便我们跟踪你们碰到了什么问题
帮助你们解决并运行起来
所以我希望这是一个网络安全的时代
并且我们非常希望能够与你合作一起来保护客户的数据安全
再说一遍
如果你正在开发一个新程序请使用HTTPS作为开头
并尽可能地使你的服务器运行最优方法
现在如果你使用的是现有的软件
我们希望你能先把能够移动的移动到HTTPS
那些你不能够移动的地方
可以通过使用例外情况和你的Info.plist移动
现在请牢记你的客户相信你能够保护好其数据
并且这些数据在任何时候都是敏感的
所以Apple希望与你合作
共同为你的客户创造一个更加安全的网络环境
所以再说一遍
请通过雷达给我们反馈
在这个会之后明天就可以过来实验室拜访我们
我们真的非常希望与你一起保护我们客户的数据
谢谢所有人的到来接下来有请安德鲁
他将会讲新的协议和NSURL会话
祝你有一个愉快的会议
谢谢 卢克
早上好各位
我叫安德鲁
接下来我将介绍NSURL会话中新的协议支持方法
是的NSURL会话支持HTTP/2协议
你的程序可以使用HTTP/2进行通信
并且在适配上非常容易
让我来演示一次
好的
如果在你的代码中已经使用了NSURL会话
你自动地就已经是其中的一部分了
在网络的未来网络革命中的重大里程碑中
你的程序已经走在了前列
你不需要修改你的源代码
所有事情都是自动完成的
所以今天我准备讲三件事情
为什么我们需要一个新协议HTTP/1.1协议有什么问题
我们将要学习一下HTTP/2最重要的功能
最后我会讲一下HTTP/2协议在你的程序中的适配性
为什么需要一个新的协议？
我们已经有很多协议用于各种类型的通信
原因是大多数协议都是在很多年前响应那个时代的需要设计出来的
看一下Apple的第一个网站
今天需要的和十五年前看起来是明显不同的
所以是时候进行一次升级了
HTTP从网络的最开始就已经存在了
大家都知道它有很多问题
最有名的HTTP的问题是
每一个TCP连接只有一个优先请求
这个问题的解决办法就是HTTP管道
但是HTTP管道并不适用于所有的服务器或网络
事实上 大多数桌面主流网页浏览器上它是被禁用的
另一个解决办法就是给一个主机开多个连接
这样能够更快的得到多种资源
综合其他情况例如文本协议开销
缺乏头压缩
它只是意味着
对客户端和服务器更高的系统需求和更低的性能
去年我们在NSURL会话中加入了SPDY支持
SPDY是使网络更快的一种尝试
它是一种实验性协议
但是它被选作新版HTTP协议的基础之一
新协议的标准版本在上个月通过了IETF标准
并正式分配到了一个RFC编号
所以今天就像你已经知道的那样
NSURL会话扩展支持HTTP/2协议
让我们看一下
HTTP/1.1和HTTP/2的主要区别
与HTTP/1.1相对
HTTP/2仅支持一台主机开放一个TCP连接
它是网络友好的并且对客户端和主机要更少的系统资源
HTTP/2完全多路复用
这就意味着
一个新的请求不需要等到服务器对前一个请求回复之后
HTTP/2有请求优先级
所以更多重要的资源可以优先提供给拥有更高权限的客户端
让我们看一下
HTTP/2多路复用如何解决队首阻塞问题
在一个服务器上我们有三个对资源的请求
我们发出第一个请求并得到一个回复
这之后我们发送第二个请求并得到第二个回复
对第三个请求也是一样
现在启用通道
我们同时发送所有的请求
一个接一个不需要等到收到之前的回复
但是我们仍然按顺序得到了回复
你能够看到蓝色的图片是第一个回复
阻塞了紧随其后的两个回复
通过HTTP/2我们给三个请求赋予不同的优先级
我们仍然在开始的时候同时发送所以的请求
但是我们同时得到了回复
此外 优先级更高的请求
我得到以及发送给客户端的速度更快
你可以看到第二个回复的是中等优先级
并且第三个回复的是高优先级的请求
到达得比第一个回复更早即使他们在时间表中更靠后
图片也不再阻塞他们
这非常棒且对你的程序和性能来说也非常棒
让我们来继续对比
HTTP/2是一个二进制协议
这使得数据的处理和解析速度更快
HTTP/1.1不使用头压缩
因为安全漏洞的原因SPDY同样也不能使用头压缩
HTTP/2使用HPACK这是一种更加安全的头压缩机制
让我来介绍一下HPACk
HPACK头压缩基于两个表
一个静态表一个动态表
静态表包括最常用的HTTP信息头并且不可修改
包含在静态表中的信息头可以添加到动态表中
表中的信息头可以通过指针进行引用
例如你可以看到一个简单的HTTP/1.1请求
突出显示的部分是要发送到服务器的数据
这里是一个基于HTTP/2的相同的请求
接下来让我们将这个请求编码
伪信息头 方法 计划以及路径
都可以通过静态表进行引用
主信息头包括在静态表中但是并不包含其值
所以要编码这个请求
我们需要三个字节用来存放第一组三头
加上一个告诉你我们想要将主信息头
添加到动态表中的字节
以及主信息头的值和长度
这就是要发送到服务器
添加了额外开销的信息头框架
现在对于第二个请求
你可以看到主信息头存储在动态表中
所以对于第二个请求
HTTP/1.1将会一遍又一遍地发送相同的信息头
但是在HTTP/2中在通常情况下
我们可以通过静态表和动态表
引用所有的信息头
我们只需要一个字节来存放一个信息头
这相当节约带宽
这只需要如此少的字节
就能够使用HTTP/2编码一个请求或者回复信息头
接下来让我讲一下
要为你的程序适配HTTP/2协议需要做些什么
其工作量并不大
HTTP/2被无缝集成到了NSURL会话的API中
如果你已经在你的代码中使用了NSURL会话
你的程序和OS X程序将会自动获得这种功能
你不需要写另外的代码
或者添加其他的结构来启动它
让我们来看一下源代码实例
这段源代码和你已经在程序中使用的代码看起来非常相像
可以看到没有任何不同也没有新的结构标志
这样就可以使用
是的你只需要一个HTTP/2服务器
但是这不是问题
你的应用程序已经准备好了使用HTTP/2协议来进行通信
如果你还没有部署一个HTTP/2服务器
那么你的应用程序将会直接使用HTTP/1.1
或者会自动选择最优的可选的协议用来进行网络通信
一旦你开始使用支持HTTP/2的网络服务器
你就不再需要做额外的工作
你的应用程序将会自动使用HTTP/2协议
请记住
NSURL会话只在加密连接上支持HTTP/2协议
这样你的HTTP/2服务器
需要支持ALPN或者NPN用来进行协议对接
目前在Apple
通过iCloud远程访问HomeKit
就是在HomeKit配件和iCloud之间
使用HTTP/2协议进行通信
很多大公司已经开始使用HTTP/2协议了
Google为其服务也配置了HTTP/2
Twitter也使用了HTTP/2
有非常多的HTTP/2开放资源网络服务器
最后一些CDN服务提供商也在逐步提供HTTP/2协议支持
我们努力使HTTP/2能够支持NSURL会话
这样你们就可以非常容易地配置使用HTTP/2协议
HTTP/2今天在WWDC种子中也是可选的
它无缝集成在NSURL会话API中
并能够在OS X 10.11和iOS 9中的Safari上使用
谢谢
现在我想邀请丹上台
丹？
早上好各位
我叫丹
我是一个软件工程师在苹果公司CF网络项目组工作
我想讲的第一件事情是
今天已经可以在WatchOS上使用NSURL会话了
通过本周前几天
与WatchOS 2测试版一起发布的WatchKit SDK
我很高兴能告诉大家
WatchOS完全支持HTTPS加载
这就意味着我们今天已经讲的所有的东西
例如App Transport Security和HTTP/2都支持HTTPS
在WatchOS使用NSURL会话
和在其他平台上使用的主要区别是在后台运行
事实上我们会选择所有选项中最好的连接机制
这就意味着在大多数情况下
如果用户的手表靠近了配对的iPhone设备
我们会利用他们之间的蓝牙连接
通过手机本身的HTTP加载并将结果通过蓝牙回传给手表
如果带着手表的用户碰巧断开了或者远离了他们的手机
手表将会连接到已知的Wi-Fi网络这样我们可以直接使用网络了
好消息是这些所有的工作都是脱离API进行的
当你在其他平台上的时候你可以使用API
你不需要关心我们是如何连接的
它就像魔法一样
就如之前所说 在WatchOS上使用NSURL会话时
只需要关注少数几个最佳方法和事情即可
首先你应该尽可能的只下载最小的安装包
这其实是你的程序的功能的要求
请注意 手表只有一个非常小的屏幕
所以如果你要下载图片
不需下载在iPhone6 Plus或配有Retina显示屏的Mac上
显示的完全分辨率图片
它的屏幕太小了你可以下载小一点的图片
另外请记住
手表比手机或电脑的处理能力要小很多
并且会经常受到带宽和与你手机的蓝牙连接的延迟的限制
所以你并不能够真正如同在其他平台上一样
快速地下载字节到手表上
所以也请记住这一点
另一个需要注意的是
手表上的程序运行时间
比iPhone或Mac上的程序运行时间短很多
用户会受到严重的时间限制
如果他想要坐着或者站着并举起手腕盯着手表和它互动
所以如果你使用的是默认会话配置或者临时会话配置
请记住这些网络传输只会在你的程序真正运行的时候进行
所以如果你要发送少量的数据是完全没问题
例如股票报价或者天气数据
亦或者社交网络状态更新
但是对于任何比较大的内容例如视频
你会想用后台上传或者下载
这样就能在过程结束时继续
要了解更多有关后台上传下载的信息
我强烈建议你看看前几年基础网络大会上的WWDC会话
接下来我想讲一下我们在今年发布的API中做的修改
我要讲的第一件事情是NSURL连接
这个东西我们到现在为止都还没有讲过
所以今年
我宣布OS X EI旗舰版及IOS9将放弃使用NSURL连接
让我们花一点时间来想一下这意味着什么
放弃使用并不意味着NSURL连接将会被完全放弃
我知道有很多程序都在使用NSURL连接
我们并不会损坏它们
所以它仍然可以运行这些传输方法仍然可以使用
但是请记住新功能只会添加到NSURL会话中
我们强烈建议你将现存的NSURL连接代码
转换成NSURL会话代码如果你还没有转换的话
如果你正在写一段新代码
我们真心希望你只使用NSURL会话而不是NSURL连接
另一件需要注意的事情是
在WatchOS上完全不支持NSURL连接
所以如果你要从WatchKit扩展程序上加载HTTP内容
你只能使用NSURL会话
但如果你还没有完成那你是幸运的
从NSURL连接到NSURL会话的转换
会非常简单
现在我想通过一个例子向你们展示一下
这是NSURL连接的一个简单使用
<br/> 用来实现一个异步的HTTP请求
它可能和你的程序中经常使用的方法有点相似
现在我们通过HTTPS连接www.example.com
我们通过一个NSURL对象来表示
然后我们构造一个NSURLRequest对URL进行打包
我们通过NSURL连接的“发送异步请求”方法
来出发这个异步请求
之后我们以一个闭包的形式接收到结果
接收到的结果包含一个NSURL响应对象作为HTTP响应信息头
这个相应对象作为HTTP响应信息头和NSData对象作为响应的主体数据
如果传输发生错误则接收到一个报错
看一下如果使用NSURL会话实现起来会是什么样子
它非常相似
你会注意到NSURL和NSURL请求对象仍然在使用
这对于很多其他的NSURL家族对象来讲是正确的
例如NSURL Credential Storage和NSHTTP Cookie Storage
其主要区别是
我们不使用NSURL连接来发送异步请求这种方法
我们使用NSURL会话共享会话中的 “数据任务请求”方法
一旦我们恢复任务
我们就能够再次接收到异步地接收到事务处理的结果
以回复数据的格式回复信息头
如果传输发生错误则接收到一个报错
在你的程序中
将NSURL连接转换成NSURL会话非常简单
接下来我想换个话题
讲一下我们在API的NSURL会话家族中添加的新功能
我要讲的第一件就是对cookie的处理
在去年的WWDC上
我们介绍了一个新的功能叫做应用程序扩展
它允许你在系统的其他地方嵌入你应用程序的部分功能
例如通知中心
但是应用程序和他们的扩展在默认情况下拥有不同的数据存储器
这就意味着即使你使用NSURL会话
且已经使用了我们内置的cookie进行支持处理
这些cookie实际上仍然被存储在不同的地方
但是你可以使用应用程序组
来访问共享数据存储器
这个存储器无论是你的应用程序还是其扩展部分都可以访问
今年我们发布了新的API
你能够创建一个与组存储器相关联的cookie存储
我将要向你们展示一下怎样实现它
这里你需要用到的是NSHTTP cookie存储中
新增的“共享cookie组存储器标识符”方法
你只需要简单地创建一个cookie存储
并输入你的应用程序组的名字
在你用Xcode编辑工程的编译设置选项和打开功能选项卡时
程序组就已经被配置好了
当你创建好cookie存储的时候
你只需像设置NSURL会话配置对象中的HTTP cookie存储属性一样设置它
从配置中创建一个NSURL会话
之后你在这个会话中进行的任何任务
都会使用组存储器中的cookie存储
所以对于今天演示的所有内容
我们讲解了使用NSURL加载HTTP内容
但是仍然有一些情况需要你使用一个除了HTTP或者HTTPS之外的
其他的协议
所以如果你正在开发一个聊天软件
一个视频调用软件或一切这一类的其他软件
你真的需要...你可能需要一个非HTTP的协议
你想要直接在TCP/IP网络上做一些事情
所以今年发布了一个新的API叫做NSURL会话工作流
这是一个底层提取文件直接在TCP连接层上
在过去你可能直接使用NSInput流
或者NSOutput留来做一些相似的事情
但是我们认为NSURL会话工作流有在NSStream API的优点
首先它提供了一个非常简单方便的异步读写接口
通过NSStream
你需要设置一个委托来监听事件或者何时读入或者何时屏蔽读写
从前这样做会有点乱但是现在变得简单清晰了很多
第二
NSURL会话内置了强大的支持功能能够自动通过HTTP代理
NSURL会话工作流可以利用这种支持
这样你就能够连接一个远程的服务器
即使在这之间有一个HTTP代理但是NSStream不能够这样做
API还有一些其他的新的升级
这些我也将随后进行介绍
我们都知道NSStream是一个非常流行的API
也有很多其他的构架和API中兼容并使用了NSStream对象
所以我们也有一些与NSStream相兼容的支撑部分
这些我也将在之后为你们呈现
所以就像我说的MNSURL会话工作流支持TCP/IP连接
你可以明确地通过一个主机名称和端口创建一个连接
或者你可以使用NSNetService的API
在你的应用程序中查找Bonjour服务
之后我们能够接受NSNetService为你自动解决问题
工作流使用了现存的NSURL会话配置选项
和委托方法来向你传达事件
当然我们支持TLS安全连接
一旦你确实与服务器建立了一个连接你甚至能够进行动态修改
所以让我们看一下你怎样使用工作流来实现一个读取操作
首先创建一个工作流
这样你就能够简单地使用“带有主机地址和端口的工作流”
你只需要输入你想要连接的主机名和端口号
然后恢复任务后
你可以使用“读取最短长度最长长度、或者超时”等方法
你需要做的就是输入一个你要读取的字节范围
或者操作超时的时限
所以如果我们准备读取范围内的东西
或者我们遇到了一个EOF或者发生了传输错误或者超时
我们将会调用存储结果的闭包
写入操作非常相似
我们不像...通过NSStream我们可以直接操作NSData
你只需要输入你想要我们写入的NSData对象
以及再次输入一个超时门限
在出现错误时这个内容为零的闭包将会被调用
当这个操作成功或者发生了超时错误或者发生了传输错误
启用TLS和对这个任务调用“打开安全连接”的思想一样简单
我之前提到了
我们有配合NSStream工作的内置支持NSURL会话工作流
我们这样做的原因是
有非常多的API已经使用了NSStream对象
我们希望为你提供一些东西能够和这些API兼容
事实上你可以将NSURL会话工作流转换成NSStream
在下一张幻灯片上我会用非常简单的代码来为你们演示一下
只需要记住当你做这些的时候
任何你使用工作流加入队列中挂起的异步读写任务
都将在我们给你NSStream之前完成
这样的操作也会从会话中分离出任务
所以这个链接
底层链接将不再计入限制
你可以为你的主机设置一个会话链接的最大数量
它也不再在会话设置中突出任务选项
所以要将一个工作流转换成流
你只需要在任务中简单地调用‘Capture Streams’方法
之后这些输入和输出流将会给你的委托发送一个新的委托消息
我们同样有许多已经添加到工作流中的其他委托消息
第一个很有意思
这是一个为工作流寻找更优路径的方法
所以如果你有一个工作流通过蜂窝数据网络连接到了你的服务器
如果用户新加入一个Wi-Fi网络
之后我们会发送这个通知到你的程序告诉你可能会有更好的连接路径
在这种情况下你可能想要做的
如果你想要做的话就是清除你现存的工作流
并创建一个新的工作流到那台主机和端口
并尝试通过更好的链接进行连接
我们将这个决定权留给你决定是否要这么做
如果你在传输一个很大的数据并已经完成了99%
就没有必要清除现存的连接并创建一个新的连接
当读写双方的后台TCP连接已经被关闭时
我们也要告诉你一些信息委托方法
我之前也提到了通过工作流对HTTP代理的自动处理
针对这种情况你能够做的就是
打开一个正在处理HTTP内容的NSURL会话数据工作
并将其转换成一个工作流
当接收到数据工作的回复时你可以做这些
所以要将一个数据工作转换成工作流
让你能不通过HTTP构架直接在HTTP连接层直接通信
通过“确实接到回复”委托方法
你能够简单地对这个完成处理器进行回复
利用最新的“成为流”设置
然后你会通知你的委托
通过使用“URL会话数据任务确实成为了工作流”方法
数据任务已经转换成为工作流
在结束今天的演讲前
我想要回顾一下今天早上讨论的几件事情
第一件事情是怎样使用App Transport Security
来保证你的应用程序能够只建立安全连接
以及在需要的时候怎样申报异常情况
之后我们讲了通过服务器上支持HTTP/2
怎样让你的应用程序能够更快
其不需要对客户端进行额外的修改
我们讲了在手表应用程序上使用NSURL会话的最优方法
以及这次发布的新API做了哪些修改
NSURL连接的弃用和如何迁移到会话
怎样在应用程序和扩展之间共享cookie
以及如何获得一个很好的基础级别提取
如果你需要一个没有HTTP的服务器
使用TCP连接进行通信
像往常一样
我想提醒你们我们在网站开放有参考文档
并提醒你参加开发者论坛
以及在这周的WWDC大会上如果你有任何问题
你可以向我们的传播者Paul Danbold请教
如果你想参加其他的相关会议的话
我强烈建议你参加明天的
“你的应用程序和下一代网络会议”
这是一个低层次的关于网络的讨论会
这周也将开放网络实验室
如果你有任何问题你都可以直接和我们讨论
谢谢你们今天能够到来
我们希望看到
你们在IOS 9和OS X和EI旗舰版和WatchOS 2上
能够开发一些惊艳的应用程序
谢谢