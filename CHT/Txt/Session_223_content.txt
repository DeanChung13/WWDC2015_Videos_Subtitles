下午好！
我叫布魯斯·斯塔德尼克 來自iOS聯絡小組 
能向你們介紹新“聯繫人框架” 我十分激動 
<br/> 如果你是第一次用Apple平臺 
你就會知道在你的app中使用聯繫人是如何簡單 
而如果你是Address Book方面的資深開發者
你就會愛上這個新框架 
那麼 這個“聯繫人框架”是什麼？
我們傾聽到了你們對Address Book的反饋 
今天我們就來解決提出最多的請求 
Address BookFramework
提供了一個訪問聯繫人的
Objective-CAPI這個API在設計上也能兼容Swift
對此我們和你們一樣都激動萬分 
這個新Contacts Framework有多個設計目標
現在我來看看其中的幾個關鍵目標 
首先 滿足大多數一般僅需要獲取聯繫人、
而不會修改聯繫人的app的需求 
我們爲線程安全只讀用途設計了這個API 
總體上 這是通過常量值對象實現的 
這些對象不會引用數據存儲 
這樣你就可以在你的app的隊列之間非常容易地
傳遞聯繫人 而不會出現意外的輸入/輸出 
此外 OS X、iOS和watchOS
也上架了同樣的聯繫人API
<br/> 你學會了這個API以後
就可以在多個Apple平臺上訪問聯繫人 
如果你還用Address Book的話 
那麼它就要被棄用了 
我們一直沒有意識到我們對我們的設備上的
聯繫人是多麼的自傲 
比如說 當我們接到一通電話時 
我們只能看到一個電話號碼 我們就會想了：打電話的是誰？
是家人嗎？
是朋友嗎？
還是又一個電話推銷員？
如果能把聯繫人顯示出來 那就更好了 
哦 是約翰·阿普爾西德 我的一個最好的朋友 
每個人在自己的設備上都有聯繫人 
它們可以幫助我們知道正在和我們進行溝通的
是誰 幫助我們打電話、發電子郵件 
進行其它交流 
比如說我可以對我的設備說：你好Siri
打電話給約翰·阿普爾西德 
沒問題 搞定了 
正在呼叫約翰·阿普爾西德iPhone的揚聲器已經開啓 
布魯斯·斯塔德尼克：聯繫人就是在我們的設備上的
用戶體驗的中心
那麼“聯繫人框架”是如何處理這一
聯繫信息呢？
我們再用約翰·阿普爾西德當一回例子 
對於你們中那些熟悉AddressBook的人來說這就是個快速回顧
這是約翰的頭像照片 他的名 
他的姓
他的私人電子郵箱
他的工作電子郵箱 
他的iPhone的電話號碼 
這些聯繫屬性代表了
這個聯繫信息 
這個頭像圖片用圖像數據表示 
名字分成了幾個元件 
名字表示名 
姓氏則表示姓 
私人電子郵箱和工作電子郵箱都由
電子郵件地址表示 
電話號碼由電話號碼錶示 
有多個聯繫屬性 
你可以參考聯繫人資料 瞭解更多細節 
現在 我們來談談這個對象 
這是CNContact對象 
這是聯繫屬性的常量值對象 
它是仿照NSDictionary設計的 
有一個可變子類 CNMuteableContact
你可以用它來修改聯繫屬性 
“聯繫人框架”使用的都是模型 
對於有多個值 像電子郵件地址、
電話號碼 的聯繫屬性來說 
就該輪到一個CNLabeled Value陣列出馬了
CNLabeledValue是標籤和值的一個常量元組 
標籤在其中是一個字符串 而值則是一個對象 
比如 一個電子郵件地址的字符串 
值可以有標籤 以便和一個屬性的多個
值進行區分 
比如到底是一個私人電子郵箱還是一個工作電子郵箱 
對於你們中那些熟悉Address Book的人來說 
AB多值被這個CNLabeledValue陣列取代了 
是的 你聽到的沒錯 沒有AB多值了 
現在我想再拿約翰·阿普爾西德舉個例子 
創建一個新的聯繫人 
我們首先導入聯繫人 
然後創建一個可變聯繫人 
正如我們將要增加的聯繫人一樣 
然後我們把約翰的頭像設爲NSData到imageData 
然後把他的名字設爲givenName到familyName 
那麼對於約翰的兩個電子郵件地址 
我們創建兩個CNLabeled值 其中一個是CNLabelHome 
另一個是CNLabelWork 
“聯繫人框架”上有一些
預定義標籤 
這些預定義標籤有本地字符串 
你可以在你的app UI用這些標籤 
你還可以創建自己的定製標籤 
我們拿出這兩個標籤值 私人電子郵件和工作
電子郵件 放到一個陣列 在電子郵件地址上設置好 
就這麼簡單 
我們也可以同樣處理約翰的電話號碼 
同樣 我們創建一個CNLabeled值 
使用iPhone預定義標籤 當成一個值、創建一個
CNPhoneNumber對象 把標籤值放到陣列 
然後設爲電話號碼 
我還知道約翰的家庭住址 我也可以添加家庭住址 
我先創建一個CNMuteablePostalAddress 
設好信息 
然後再用LabelHome創建一個標籤值 
放到陣列中 然後設爲通訊地址 
最後 我還知道他的生日 
我就可以創建一個NSDateComponent 
設置好年、月、日元件 
然後把它設爲生日屬性 
要注意 “聯繫人框架”中的所有
日期相關的屬性都是NSDate元件 
這樣就可以靈活設置日期 
比如不足一年的生日 
這樣你就可以忽略年份元件 
“聯繫人框架”也可以對這些聯繫對象進行
運算 
這裏 你可能對格式化聯繫數據感興趣 
CNContactFormatter
將會格式化一個聯繫人的名字 
在這個例子中 我們格式化了全名 然後
又得到了約翰·阿普爾西德 
CNContactFormatter
還可以正確格式化國際名字 
我們還有一個格式化程序
CNPostalAddressFormatter 
可以格式化通訊地址的郵件標籤 
然後就會返回這個 
CNPostalAddressFormatter可以正確格式化
國際化通訊地址 
我們建議你儘量在你的app中使用這些格式化程序 
現在 我想請戴夫上臺 
請他給你們演示下如何在你的app中使用聯繫人 
謝謝 布魯斯 
我叫戴夫·蒂賓根 是OS X聯繫人團隊的一員 
不好意思
剛纔布魯斯已經向你們演示瞭如何在代碼中
創建、編輯CNContact 
但是在OSX、iOS和watch OS的
聯繫人app上已經有了很多聯繫人 
布魯斯已經演示了系統app可以怎樣
和這些聯繫人整合起來 提供更加豐富的用戶體驗 
比如說 電話app可以爲來電
顯示一個人的名字和照片 而不是
僅僅顯示一個電話號碼 
“聯繫人框架”讓你可以爲你的app提供
豐富的用戶體驗 
你要用來訪問用戶的聯繫人的類 
叫做CNContactStore 
我們來講講怎樣
獲取、保存用戶的聯繫人 
讓我們從獲取開始 
你要使用的主要方法
叫做統一Contacts
MatchingPredicatekeysToFetch 
這會返回一個CNContact對象陣列 
Keys toFetch中的謂詞的目的 
是爲了幫助你的app儘可能高效地獲取聯繫人 
我們先從聲明開始 
用戶可能有數以百計 甚至數以千計的聯繫人 
你可能只對這些聯繫人的一個小子集感興趣 
謂詞可以讓你...
可以幫助你限制返回的結果數量 
如果你們中有人還不知道 
NSPredicate是一個標準的基礎級別對象 
可以顯示搜索時 某個對象
匹配的標準 
“聯繫人框架”爲你提供了使用
聯繫人存儲器的謂詞 
聯繫人存儲器將會評估這些信息、
這些信息 
這裏的例子中
是謂詞ForContactsMatchingName 
它會匹配每個聯繫和指定的
名字 在這裏例子中 就是阿普爾西德 
我們再來快速看個例子 
比方說用戶有下面三個聯繫人 
約翰·阿普爾西德、簡·阿普爾西德、克雷格·布羅姆利 
聯繫人存儲器會高效評估聯繫人約翰·阿普爾西德
和簡·阿普爾西德克雷格·布羅姆利
然後僅僅返回匹配的聯繫人 
在這裏返回的就是約翰和簡 
而不是克雷格 
這樣謂詞讓你可以限制返回的聯繫人的數量 
但是 一個聯繫人的
聯繫信息仍然很多 
而你可能僅僅對它的一個小子集感興趣 
那麼就該keysToFetch大顯身手了 
KeysToFetch是一個字符串陣列 
這些是鍵的字符串 屬於鍵-值編碼 
如果你只對教名和姓感興趣 
你就可以把你的keysToFetch設置成這樣 
當然了 逐字使用字符串容易出現錯誤 
爲此我們也提供了常數 
因此 “聯繫人存儲器”將會
僅僅獲取你指明的屬性 
在這裏例子中 就是名字和姓 
你就可以親眼看到keysToFetch的謂詞是怎樣
允許你縮小返回的信息的
數量 這樣你的app就可以
儘可能的高效 
讓我們來看一個完整的例子 
就像之前一樣 我們要從一個謂詞
和keysToFetch開始 但是 
現在你需要把它們用在一個聯繫人存儲器上 
這很容易 你可以用默認初始化程序
創建一個 
然後調用統一Contacts
Matching Predicate 
帶有這些值的keysToFetch 假設一切正常 
你就會得到一個聯繫人陣列 
然後你就可以按照你的想法去用 
在這裏我們是要打印出姓名和姓氏 
關於獲取 我還想說幾件
重要的事情 
第一點 不受CNContact信息的生命期
約束的
CNContact的生命期 
獲取結束後 並不需要同存貯器
保持一個強引用 
這就意味着CNContact上面的數據是有效的 
自從取出後就是有效的 基本上就是一個從取出那時
的快照 在那個CNContact的
生命期內都是有效的 
第二個重要的事情是 
這是一個同步方法 
相比較而言 取出聯繫人是一個慢操作 
因此 你必須通過一個後臺進程來讀取這些聯繫人 
讓你的用戶界面保持響應 
就像布魯斯之前提到的 
CNContacts是完整的線程安全 通過後臺進程來讀取這些
聯繫人是安全的 然後把它們移到主線程 
更新你的用戶界面 
通過後臺進程來讀取聯繫人還有一個原因 
那就是數據隱私 
用戶對待他們的聯繫人這一隱私非常嚴肅 
因此 我們需要在你的app和用戶
聯繫人之間設立一道勢壘 
當你的app第一次通過API訪問聯繫人時 
OS會彈出一個對話框或者警報 
讓用戶選擇允許或者拒絕訪問 
你之前可能已經看過了 
這就意味着當你第一次調用聯繫人存儲器上的
方法時 它並不能提供結果 
必須等待用戶做出響應 這可能需要很長時間 
當你通過GCD或者NS操作 把你的聯繫人儲存器訪問
移到一個後臺線程中時 我們在這裏
提供了一項助手方法 
一個叫做請求訪問實體類型完成處理程序的
異步方法 
用戶可能會拒絕訪問 這樣你的app就可以
得體地處理它 
如果用戶允許訪問 
那麼請務必謹慎處理聯繫人數據 
更多信息請查看你的app會話中的
“隱私”部分 
我想再講講keysToFetch 講講它們是如何
返回部分聯繫人的 
就像我之前演示的那樣 keysToFetch允許你僅僅
讀取你感興趣的屬性 
在這個例子中 就是姓名和姓 
如果你試着訪問一個你並未請求的屬性 比如說 
一個手機號碼 會發生什麼？
那就會拋出一個異常 
因爲數據不在那裏 
我們調用這些部分聯繫人 是因爲只有部分屬性
可用 
一般來說 如果你把你的
鍵設成我們之前的例子中的那樣 這就不是一個問題 
但是有時候你獲取一個聯繫人時 你不確定
獲取時使用的是
哪個keysToFetch 
在這些例子中 在訪問屬性之前 
你可能想要校驗下 看看鍵是否可用 
就像你在索引之前 校驗陣列的
長度那樣 這樣來避免異常 
這裏有一個例子是通過isKeyAvailable方法 
看看訪問電話號碼屬性時 PhoneNumbers鍵
是否可用 
你可能會想 “那好吧 
但是我真的想訪問那些電話號碼 ”
在那種情況下
你可以使用附加的keysToFetch來重新讀取聯繫人 
我們來看看它的工作原理 
我們在這裏設置了keysToFetch 
但是這次我們使用的是電話號碼鍵 
並且使用了一種叫做
unifiedContactWithIdentifier的方法 
現在每個聯繫人都有一個對它進行唯一標識的標識符
<br/>你可以稍後使用它
重新進行讀取 
當你重新讀取後 
你就可以在這個重新讀取的聯繫人上 
安全訪問電話號碼了 
對於部分聯繫人來說 重要的是理解它們
和其餘的框架是怎樣一起工作的 
這裏展示的上個例子中 我們看到了如何讀取姓名
和姓氏 然後把它們打印出來 
打印出全名 但是這還不夠理想 
我們最好使用其中一種格式化程序 不好意思 
布魯斯之前向我們展示過的CNContact格式化程序 
這個格式化程序可能會訪問其它你還沒有讀取的屬性 
比如說 名字、前綴或者後綴 
如果它們不在那裏 那麼就會拋出一個異常 
我們可以提供所有你使用這個格式化程序需要用到的
鍵 但是這會非常乏味 而且容易出錯 
因此我們提出了鍵描述符的概念 
鍵描述符代表了某個特定操作的一組鍵 
在這個例子中 格式化程序知道它需要哪個鍵
才能完成工作 因此它通過描述符
ForRequiredKeysForStyle
方法提供了鍵描述符 
你就可以把它直接包含在你的鍵中進行讀取 
這樣就可以告訴聯繫人存儲器所有格式化程序
進行讀取需要的屬性 
我們來看一個例子 
在這個例子中 我們想要讀取所有叫
阿普爾西德的聯繫人 
我們想打印他們的全名和電子郵件地址 
我們要想之前一樣 設置謂詞 
並且把keysToFetch設置的略有不同 
我們先看看樣式要求鍵的描述符
這樣就可以允許我們稍後使用“聯繫人格式化程序”
來獲得全名 
你也可以直接包括CNContact電子郵件地址鍵 
因爲我們想打印這個電子郵件地址 
你可以把鍵描述符
和CNContact鍵混合到同一陣列 
有了這個設置 你就可以像我們之前那樣進行讀取 
調用統一聯繫人匹配謂詞 
有了結果後 你就可以通過格式化程序
獲得全名和電子郵件地址 
關於讀取 
另一個重點是統一聯繫人 
你可能在多個賬戶裏有相同的聯繫人 
比如說你在iCloud賬戶上有約翰·阿普爾西德
還有他的工作電子郵件地址、電話號碼
但是你可能在Facebook上還和約翰是好友 
這就可以構成一個形象 
私人電子郵件地址、生日 
這樣聯繫人app就不用在那裏分別顯示兩個聯繫人 
聯繫人app將會通過某種探試程序把這些
鏈接起來 結合信息 
顯示一個單一的聯繫人 
我們稱之爲統一聯繫人 
聯繫人app已經在最近的幾次發版中已經這麼做了 
“聯繫人框架”默認將會返回統一聯繫人 
你可能已經從方法名字上面猜到了這一點 
好消息是 這意味着你可以取到
用戶在app中看到的數據 
這裏 最棒的事情是 
這些都是普通的CNContact對象
它們和任何其它的CNContact對象的原理、行爲都很相似 
你甚至可以修改、保存它們 這樣也可以 
說到保存 我們來看幾個代碼實例 
看看怎樣保存聯繫人 
我要先來添加一個新的聯繫人 
比如說 你有一個C不可變聯繫人 
你用布魯斯之前向你們展示的數據把它設置好了 
要想把它弄到用戶聯繫人中 你就要使用一個叫做
保存請求的請求 然後你就可以在聯繫人
存儲器上執行那個保存請求 
你要做的第一件事就是創建一個新的CNSave Request對象
然後你就可以通過標識符向容器調用
添加聯繫人 
我們現在沒有時間講容器 
不過零容器標識符指的是默認標識符 
更多信息請參見資料 
保存請求會給一個聯繫人標記爲正在添加 
但實際上並不會做出變更 
要進行變革 你需要在聯繫人儲存器上調用執行
SaveRequest 
如果順利完成的話
這就會被添加到用戶的聯繫人中 
更新現有的聯繫人也很相似 
但是你要先從一個你通過讀取獲得的
不可變的聯繫人開始 
你要做的第一件事
就是創建一個可變拷貝 
然後完成任何你想要的變更 
比如說 我們在這裏要添加一個新的電子郵件地址 
現在 重點要注意的是 
當你對某個部分聯繫人制作可變拷貝時 
僅僅修改你讀取的屬性 
像之前一樣 我們需要使用保存請求 
創建一個新的保存請求不過這次
我們要使用這個updateContact方法 
同樣地 這也僅僅是把聯繫人標記爲正在更新 
但並不會真正進行變更 
直到你調用executeSaveRequest 
關於保存 還有一些重要的事情要說 
首先是保存請求可以包含多個變更 
當你執行它時 
所有這些變更都會在
執行它們時完成 
第二點
保存請求要求多個可變聯繫人
你需要小心 
當一項保存正在運行時 不要在同一個線程上訪問這些
可變聯繫人 
現在你已經知道了如何讀取、
保存一位用戶的聯繫人
我要請朱利安上來 
給大家講講在用戶界面如何使用聯繫人 
謝謝 戴夫 
下午好 
我是朱利安 iOS聯繫人團隊的一名工程師 
布魯斯和戴夫
已經讓你們成爲了
“聯繫人框架”方面的專家
我就來談談用戶界面 
向你們演示如何在你的app中
拾取、顯示聯繫人 
和“聯繫人框架”一起
我們還有一個叫做聯繫人UI的新UI框架 
iOS 9和OS X El Capitan上都可以用 
它會給你提供兩個集羣
第一個是選擇器 
選擇器會顯示一個全部用戶聯繫人列表 
讓他選擇把聯繫人信息導入
你的app 
其次是聯繫人視圖控制器 
控制器可以用來顯示一位聯繫人 
本場演示的剩餘時間裏 我會講一講類的
iOS版本 
不過OS X上的也很相似 
我們首先來講講拾取聯繫人 
爲此你要用的類是
CNContact選擇器視圖控制器 
它會直接置換我們之前在Address Book UI的類
即AB
People Picker
NavigationController 
你從名字上就可以猜到
它是UA視圖控制器的一個直接子類
但你還是必須顯示它 
而不是把它推入一個導航控制器 
它總是處於進程外 
它的優點很明顯 不用要求用戶允許你的
app訪問他們的聯繫人了 
這樣 當你顯示一個
聯繫人選擇器時 
你就不會看到之前戴夫展示的對話 
其中一件重要的事情是 
聯繫人選擇器可能會返回部分聯繫人 
比如說 如果你設置了顯示屬性鍵的有界集
那麼你在得到的聯繫人中 
就只會得到那些鍵 
選擇器的行爲由兩件事定義 
首先是你實現的委託方法 其次是 
你設置的謂詞 
我們稍後會談談這些 
最後一點 選擇器必須
支持多選 
我們首先來談談委託方法 
如果你的app僅對單個聯繫人感興趣 
你想讓它的風格和選擇器相似 
你只需要實現didSelect Contact委託方法
然後你就會得到一個CNContact 
同樣地 這些聯繫人也可能是部分的 
如果你對單個屬性感興趣 
你實現一個確保選擇
ContactProperty委託方法 
得到一個CNContactProperty對象 
這個對象實際上來自“聯繫人框架” 
不過我們之前沒有見過 所以讓我們來看看 
這是一個簡單的包裝類 包含了選擇的聯繫人 
以及用戶選擇的
屬性鍵 
它的值
以及可能的標識符 
就是屬性 就是標籤值 
但是 你可能還對多個
聯繫人感興趣 
你會得到這個
外觀 
實現它很簡單 
你只需要實現
didSelectContact委託方法即可 
然後如你所料 
你得到了發送的聯繫人對象的陣列 
這也同樣適用於屬性
你可以通過實現
didSelectContactProperties
委託方法來得到多個屬性 
得到一個CNContact
屬性陣列 
好了 
現在我們再來講講謂詞 
謂詞讓你可以定製面板的行爲 
我們有三個謂詞 
第一個是啓動聯繫人謂詞 
你可以用它決定用戶
可以用哪個聯繫人、
不可以用哪個聯繫人 
我拿之前我們看過的例子來舉例 
如果你希望用戶僅僅選擇帕克家族的
成員 舉例來說 
你需要在你想要匹配聯繫人和帕克家族的姓氏那裏 
創建一個謂詞 
你把它設置成一個
predicate For Enabling Contact 
一旦選擇器表述出來後 
你可以看到 你只能選擇帶有
帕克家族的姓氏的人 
第二個是謂詞For Selection Of Contact 
當用戶點擊聯繫人時
會對這個謂詞進行評估 
如果評估爲“真” 
那麼聯繫人就會返回到你的app 
如果不是的話 我們就會顯示聯繫卡 
類似地 對屬性來說我們有謂詞
ForSelectionOfProperty 
如果評估爲“真” 用戶點擊的屬性
也將會返回到你的app 
否則就會執行默認動作 
比如說打一通電話或者創建一封新電子郵件 
需要注意的是 最後一個謂詞是在
CNContactProperty對象上評估的 
而另外兩個謂詞則是在CNContact對象上評估的 
我想要指出的是 你需要在你設置的謂詞
以及你實現的委託方法之間
保持連貫 
比如說你應該僅實現didSelectContact
委託方法 但要把選擇謂詞設置爲
屬性謂詞 但是不太行得通 
你可以看到一項日誌 你的謂詞將會被忽略 
那麼現在
你已經知道了應該如何拾取聯繫人 
我們再來談談如何在你的app中查看它們 
現在我們有一個類 
取代了我們之前在Address Book UI上的三個類
但是通過適當的創建方法 你還是可以獲得
你想要的行爲 
第一個是
viewControllerForContact 
它可以給你一個和聯繫人app和iPhone app一樣的視圖控制器 
如果你想要創建一個新聯繫人 
你可以使用
viewControllerForNewContact 
你可以得到這個總是處於編輯模式的視圖控制器 
最後 如果你有一位來自
未知來源的 比如說一個vCard 舉個例子 的聯繫人 
你可以使用
viewControllerForUnknownContact 
我們在iOS 9中添加的一件事是這個更新聯繫人按鈕 
如果用戶聯繫人中已有一位聯繫人和你顯示的
聯繫人的名字相匹配 
這個按鈕
就會自動顯示出來 
如果用戶點擊這個按鈕
<br/>它就會顯示UI 
使用新信息更新現有的聯繫人 
這個“聯繫人視圖控制器”現在通常處於進程外 
原因在於 
我們可能會添加一些附加信息 
比如在郵件中找到的聯繫人數據 
就像戴夫之前指出的那樣 使用正確的鍵
讀取聯繫人非常重要 
如果你想把它顯示在聯繫人視圖控制器中 
那麼這個聯繫人就必須通過聯繫人視圖控制器的
descriptor For Required Keys獲取 
我們來快速看一個代碼實例 看看如何從一個標識符
顯示一個聯繫人 
首先 你要使用聯繫人視圖控制器的
descriptorForRequiredKeys 讀取聯繫人 
然後使用forContact
創建聯繫人視圖控制器 
因爲我們想在聯繫人視圖控制器顯示正視圖 
如果你已經有了一個聯繫人存儲器 你就應該把它設置到
聯繫人視圖控制器 這樣我們就可以重用它 
把自身設爲一個委託 
推送視圖控制 
然後當聯繫人被修改時 你就會在你的委託方法中
被調用到 
好了 看一個代碼示例很好 
但是一起構建一個app會更好 
我們來試試吧 
我們要構建的app
叫做“喵喵叫” 
這個app讓你可以通過給你的朋友發送貓的
叫聲 和你的朋友分享你的情緒 
如果我運行它 你在頂部就
可以看到一個情緒選擇器 
底部是你的朋友列表 現在還是空的 
我們要構建的 就是這個 
這個app是使用一個郵件地址來發送貓的叫聲的 
因此我們只需要一個綽號和一個電子郵件地址即可 
如果我點擊“保存” 因爲還沒有實現 
那麼什麼也不會發生 
我們就要這樣做 
當我點擊“保存”
<br/>這個addBuddy函數會調用到 
我們現在來把它實現 
首先 因爲我們要進行修改 
我們創建一個可變聯繫人 
然後我們從文本框把綽號設置成值 
emailAddresses屬性被設置成了一個單一
標籤值的陣列 
文本框中也是這個值 
最後 我們把這個新聯繫人添加到我們的聯繫人列表 
我們運行下
看看它是怎樣運作的 
我要使用預先填充的值 把埃米莉添加爲我的朋友 
好了
我的家庭 
你可以注意到這裏的這個信息按鈕 
當我們點擊這個信息按鈕時 
我們想要展示聯繫人視圖 
我們現在就要實現這個 
當我點擊這個按鈕時
<br/>這個showContact函數被調用了 
讓我們填進去 
首先 我們給我們想要展示的
聯繫人創建一個
聯繫人視圖控制器 
然後我們把聯繫人存儲器設爲我們已有的存儲器 
最後 我們推送下視圖控制器 
讓我們來試試
好了 我們可以看到埃米莉的信息 
太好了 但是如果我們想向我們的列表添加一個聯繫人 
而這個聯繫人已經位於用戶的聯繫人中 該怎麼辦？
我們在這裏要做的 就是這個 
爲此我們要使用這個聯繫人選擇器 
當我點擊addFromContacts時 這個函數就會調用到 
現在我要把它實現 
首先我要創建聯繫人選擇器控制器 
因爲我們只對電子郵件地址感興趣 
我限制了電子郵件地址的屬性 
然後我們想要讓用戶選擇至少有一個電子郵件地址的
聯繫人 
我們可以看到 這是正在實現的謂詞的一部分 
還可以看到還不在我們的朋友列表中的人 
因爲我們不想出現重複 
最後 是已經是聯繫人的用戶 
正好有一個電子郵件地址的用戶 
我們不需要推送卡 我們想讓它直接寫 
這個謂詞做的就是這個 
我們把自身設成一個委託 顯示視圖控制器 
我們也需要委託方法
<br/>可以把新聯繫人添加到我們的聯繫人列表中 
現在就非常直接 
如果選擇約翰·阿普爾西德
我就知道他有兩個電子郵件 
所以推送的是正確的卡 
我會選擇一個電子郵件 讓約翰在我們的列表中 
如果我添加一個聯繫人
首先你可以看到現在約翰·阿普爾西德是無效的 
因爲他已經在我的朋友列表中了 
但是如果我選擇大衛
他只有一個電子郵件地址 
這個聯繫人就直接返回了 
如果我想展示約翰的卡 又會發生什麼？
我們出現了一個異常 
原因是因爲在這裏展示聯繫人時 
我們不夠小心 
因爲聯繫人選擇器返回了部分聯繫人 
聯繫人視圖控制器缺失了某些鍵 
我們來把它修復
然後校驗聯繫人是否有了
要用在聯繫人視圖控制器的要求的
鍵 
如果有 我們只需要使用我們之前的代碼即可 
如果沒有
我們首先會向存儲器請求 
請求訪問聯繫人 
如果用戶允許訪問
我們就要通過它的標識符 重新讀取聯繫人 
這次使用keysToFetch
CNContactViewController
記錄鍵的描述符 
然後我們再次調用同樣的函數 但是這次 
完整的聯繫人已經準備就緒待用了 
我們再來試試 
如果我查看埃米莉的聯繫卡 
不會顯示任何對話 
這是因爲埃米莉是在代碼中創建的 
她有各個讀取鍵 
如果我也查看約翰的聯繫卡 我就必須重新讀取了 
此時你的app就會訪問用戶的聯繫人 
搞定了 我們可以看到約翰的所有聯繫人信息 好了 
我們的演示結束了 
我有點小傷心 
我要和約翰分享下我的情緒 
我要把布魯斯請回來請他
結束這次演講 
謝謝 謝謝戴夫和朱利安向我們展示
如何在我們的app中使用聯繫人 
你們現在有一個Objective-C
API來訪問聯繫人 
它同樣也兼容Swift 
聯繫人API在各個Apple平臺上都一樣 
Address book正在被棄用 
因此換新的API吧 
要獲取更多信息 你可以參考開發者庫上
“ContactsUI框架參考”的
聯繫人部分 
要獲得技術支持 你可以到開發者論壇 
如果是普通諮詢 保羅會很樂意看郵件 
因此你可以給他發郵件 他是我們的app框架福音傳道者 
謝謝 