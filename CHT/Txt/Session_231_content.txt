Cocoa Touch最優方案講座
大家好 非常感謝你們來參加Cocoa Touch最優方案講座
我叫 盧克·黑斯特曼是UIKit一名工程師
今天我很榮幸爲你演示一些
巧妙的程序片段和各種實用的建議
現在和將來你都可以在所
編寫的應用程序中直接地進行應用
所以我將向你展示一系列主題
這些主題都是和開發Cocoa Touch應用程序
密切相關的每個主題
我都會教你們一系列的最佳實用技巧
那些主題分別爲第一 應用程序生命週期
之後是視圖和視圖控制器 自動佈局
最後一個是表格和集合視圖
當我講這些主題的時候
有一系列的目標我會隨着我要講授的
巧妙的程序片段傳授給你們
因爲...
我們所作的一切其目標都是要完成幾個基本理念
而一定也都是你希望應用程序所能體現的
第一 你要想辦法讓你的應用程序實現峯值性能
你要你的應用程序如絲般順滑
看起來就像一個搖滾明星程序開發員
並且人人都喜歡你
你也想讓你所開發應用程序提供一流的用戶體驗
那樣 每人都會覺得
你開發的應用程序看起來精美且令人讚歎
最後 你還要把你的程序代碼寫好
使之能夠最大程度地適應未來的發展
這樣當未來版本的iOS 推出時你需要寫比較少的
代碼就能使你的應用程序適應於這些新版本的iOS
那些就是我們講解這些主題時
心中要牢記的目標
而現在我首先要談到應用程序的生命週期
我要向你們講授的第一個最優方案
與使用者第一次使用應用軟件體驗有關
也就是軟件啓動時的體驗
因此與應用軟件有關的第一個最優方案是要使之能夠快速啓動
這也就是在用戶點擊你的圖標時你的應用如何能夠顯得有反應
而且你的應用也能做好準備馬上即可與用戶進行互動
而使你能夠快速啓動一個應用程序的方法其實非常簡單
就是要能夠迅速從ApplicationDidFinishLaunching
這一用戶界面應用程序委託事件返回
這個在做法上實在簡單
我肯定你們全都知道如何去做了
給所有運行時間長的工作設置一個應用程序
從ApplicationDidFinishLaunching中挪到他處發派以實現延遲執行
因爲要完成儘可能少的工作就返回
你要建立起一個基本的用戶界面使你的用戶可以與之互動
然後返回無論從一個數據庫或者網絡來加載數據
ApplicationDidFinishLaunching來延遲完成其執行
如果需要太多時間啓動當然你的應用程序將被中止
因爲你的程序看起來已在系統中停止了運行
所以你確實需要從那個狀態儘快返回
做出一個反應良好的應用程序
不是能做到啓動快就可以了
我們要完成的比這要多我們要讓我們的應用程序一直反應良好
所以我要深入到這一技術中來講解
反應良好總的來講意味着什麼這樣我們才能構造
一種技術方法做到不只在應用程序啓動時能快速完成
而且在該程序的整個生命週期中都會反應良好
所以 儘管我剛剛談過將所有這些工作
從ApplicationDidFinishLaunching去除挪到他處推遲完成執行
但是有關最優方案
我真正想說的並不只是異步執行
真正要做的關鍵是要將運行時間長的工作區別對待
將它們放到某個後臺隊列中異步執行
如果你需要從某個數據庫加載數據
或者你需要連接網絡
那些都是可以放到後臺進行的工作
所以如果我們再考慮ApplicationDidFinishLaunching
這一方法而我們有這種非常簡單的方法
來調用一個單純的ApplicationDidFinishLaunching
你知道我們通過ApplicationDidFinishLaunching直接加載數據
而我剛剛說過 推遲執行這一任務
好吧所以我們可以簡單地完成這一步
我們將其發派出去 就算做完了
這個任務就不在ApplicationDidFinishLaunching中了
我們就能夠迅速啓動而啓動時一切也就會更好
但是那樣仍會產生隨後阻斷總執行隊列的可能性
且會因此阻斷與用戶之間的互動
事實上最好的做法是時將那個工作轉移到
一個後臺執行隊列中這樣當那個任務開始執行時
與用戶之間的互動可以繼續進行
而你的應用程序看起來也總是反應良好
所以這種講任務通過後臺執行隊列發派的技術
可以在應用程序執行的任何時候應用而不僅僅限於啓動之時
然後 你把那項在後臺進行的數據有關的工作
而當那個工作完成時
其執行就回到主執行隊列
與像視圖和視圖啓動器這樣的UIKit 元素進行互動
所以這樣纔是真的反應良好
接着你要做的是
除了在用戶第一次啓動 應用程序時你要保證程序反應良好之外
還要保證在用戶第二次啓動程序仍然反應良好
而要實現這一目標就要使
在用戶退出你的程序時該應用程序並不簡單的結束
而是進入一種iOS上的暫停執行狀態
所以要在用戶第二次打開你的程序時想要特別快的話
只需要讓你的程序能從上次的暫停狀態繼續執行就行
而這需要那個應用程序仍在內存中
所以 我們要看看系統內存的情況
我們確定系統內存的一部分是由被操作系統內核
和各種操作系統的進程所佔用
系統內存的一大塊將會是由前臺應用程序所佔用
之後 還有不少會是由後臺應用所佔用
現在 你會注意到在整個圖像中
會有某個後臺應用程序佔用比其他任何進程
都多的內存
你的應用程序不要成爲那樣否則
你不像這樣的原因是
程序會第一個結束運行當應用程序需要額外的內存時
所以你要讓你的應用程序使用用戶界面應用程序
的委託方法獲知何時自己要進入後臺運行
之後就要釋放不需要的內存資源
使其進入後臺運行時所需的內存量能夠儘可能的小在使用拆分視圖時
更加重要的是
同時運行會有多個前臺應用程序
當第二個前臺應用程序啓動時
那種佔用很多內存的應用程序不會繼續存在下去
所以你不想你的程序是那樣的
所以這就是怎樣保證做到超級反應良好
且考慮你的應用程序在其整個生命週期中的性能表現
我想要談的與一般應用程序編程
有關的最優方案是
利用各種框架
這也許是我能給你的最基本的最優方案
這就是：去做！
一定要利用Apple提供的各種框架
經年累月地努力以構建優良的框架結構
使你能夠在其上開發應用程序
這樣做有幾個基本優勢
我相信你對此已經熟悉
它可以降低你的維護負擔
你知道嗎？例如如果你使用用戶界面導航控制器
當新的版本推出時你就不需要維護那一導航控制器
但如果你建造你自己的導航控制器那就必須自己對其維護升級
且當我們對那部分進行改進升級時你會免費獲得那些改進升級
例如你們知道
兩個版本以前導航控制器增加了一個
使用滑動手勢的新的功能
在導航控制器上建立的應用都免費獲得了這一改進的功能
如果你用自己的導航控制器你就必須自己去實現它
否則 你的應用程序就會感覺起來與系統的其餘部分不相符合
所以 你需要這樣做因爲你需要能夠
集中精力於把什麼能使你的應用程序真正特別的地方做好
這是我們都想看到的
想要你利用時間寫出神奇的應用程序
而不是花費你的寶貴時間做本來可以留給我們的構架很好地完成的事情
這就是我們要鼓勵你做的事情
當然在你集中精力做那些時
你需要時刻牢記的是
怎樣進行版本控制
所以我們常被問到的最大的問題是：
我們的應用應該能夠部署在多少不同的版本上？
我們給你的建議是
以兩個最重要的iOS版本爲目標
所以 從今秋當iOS 9推出時起
這兩個版本就意味着iOS 8和9
這種做法會讓你獲得這一最佳組合
你既能獲得大量的用戶又不需要擔負過重的維護負擔而
必須爲過去的好幾個iOS版本而進行部署
還不得不處理的有關的之中事宜
在這個過程中您可能會發現你自己
有時需要用特別的程序邏輯來檢查程序是在
哪個版本的系統上運行
而另一個的最佳實做法是要確保
你的程序中包含基於不同系統版本的回退應變功能
這意味着絕對不要編寫這樣的代碼
你先檢查某個特定的版本
比如iOS 9然後才做某事
如果你做一個這樣的檢查
就肯定會給你的程序帶來一個缺陷
因爲當比如iOS 9.1
發佈時就會使這一檢查返回失敗的結果
與此不同你應該知道iOS 9中的一切
都將會在未來的版本之中得以保存在iOS 9版本中實現的任何邏輯
都要在該版本及其後的版本中得以保留
甚至更好如果你是在用Swift來編程
你就可以利用的其新的帶有＃號的新的表達法
把您所有的有關版本的代碼放到一個代碼塊中
編譯器就可以理解並辨明並最終告知你
你的程序是否對某個版本來講編譯器可以理解和解釋的塊
把所有特定版本的編碼轉換成無論你最終使用了哪一種技術
都要考慮清楚你是否需要一個Else子句
因爲你不想犯一些
控鍵邏輯錯誤
而這又是應用程序系統的核心部分
但是倘若版本不符將導致必要的工作無法進展
同時還會在該版本中出現你意料不到的故障
這對於一般的應用程序的壽命週期而言是基本的最優方案
下面我們來說一下視圖和視圖控制器的最優方案
我第一個要提出的想法是關於
現代設備的佈局的
大家都知到去年秋天我們推出了iPhone 6
和iPhone 6 Plus我敢保證你們也都知道
這次我們運用了全新的四維視圖效果
在iOS設備中的手機應用軟件
是沒有這個視覺效果的
當你把這個維度效果添加到蘋果手機上
而早前這項技術已運用到iPad上
可能手機軟件也需要四維視圖效果
就要運用矩陣在iPad Air 2上拆分視圖時
它的矩陣是相當大的
因此 再建立佈局就沒有意義了
那是用於建立特殊維度的
你的視圖控制器已經存在了
相反 作爲基礎需求佈局比例早就完成
我們要專門避免在我們的視圖和視圖管理器的
佈局中的硬編碼值
如果我們只是想象一下視圖簡單地在視圖裏加入一個標籤
如果只是簡單把佈局設成260點寬其餘頁邊距爲30點
那麼早在幾十年以前就擁有這個技術了
我們沒有這麼做是因爲我們想要考慮
清楚維度比例
任何一個維度都要精確地計算
如果寬度計算了佈局遭到破壞
還是無法正常運轉是因爲相位差沒有意義了
所以如果把這個想成一個居中的標籤
那麼在維數增加的情況下是有意義的
我們還會提到這個例子 在我講
關於“自動佈局”最優方案時
我想提一下有關我們在iOS8中
提到的應用程序界面它能幫你成比例的佈局
原因是一定程度上爲了摒棄
屏幕旋轉的想法
你們知道我們想讓你們不再考慮屏幕旋轉的問題
事實上我想要告訴你們的是
如果你們在設計app時 有這種想法
考慮橫豎屏的問題
或者和設計師討論這個問題
“橫屏”“豎屏”都是他們想出來的
那你就大錯特錯了
我們只從尺寸的角度考慮問題
所以尺寸類別就是爲了幫助我們
從尺寸的角度考慮問題進而成比例地佈局
同時我們也意識到並接受
存在一些關於尺寸的閥值
原因是我們的基本用戶界面改變了
如iPhone 4S中的設置選項
是一個很簡易的單欄桌面視圖
到了iPhone 5仍然是一個桌面視圖 只是高了一點兒
同樣iPhone6的也只是高了一點寬了一點
但基本上還是一個桌面視圖
而iPhone6 Plus也只是更大了一些
可是在我們把它過渡到iPad時
我們跨越了一定的寬度閥值
因此這個視圖完全變了樣
現在變成了兩欄的滾動內容
因此我們在這方面有所突破
實際上你會發現我們跨越了同樣的閥值
在我們看iPhone6時
而且可能我得用髒話來形容這個閥值
豎屏模式尺寸類別也就是我們說的應用程序界面
對於我們蘋果公司爲了與你們的app銜接
就會跨過那些基本閥值
而這也是爲了讓你們能應對閥值並考慮
使用一個徹底改變的用戶界面
來應對那些閥值
你將收到那些閾值改變的通知
因爲規格類打包在對象中UITraitCollection
視圖控制器可訪問這些對象
所以這就是佈局
我要傳授給你的下一個最優方案是
在類中使用屬性
作爲UI視圖標籤的替代
所以我的意思是如果你正在使用帶有標籤的視圖
或設置UI視圖標籤的應用程序接口且正在裝載代碼
我要鼓勵你拋棄這些
原因就是
謝謝我真的很高興有人爲此而開心
所以我的意思是 原因很顯然
它只是一個整數它與其他代碼有潛在的衝突
也許它是你所寫的其它代碼
也許它是你團隊中的新成員
他還不知道你認真管理的整數
也許它是你所使用的框架
你卻看不到
無論這些衝突何時發生
你都接收不到編譯器發出的有關警告信息
編譯器無法推斷出
你的整數管理
如果你既沒有收到編譯器的警告信息
也沒有收到運行錯誤
無法說明帶標籤視圖使用上的信息
你最多可以收到由未被認出的選擇符導致的崩潰
你無法知道發生了什麼
作爲替代 聲明類屬性
這樣你就可以與之後需要使用的那些視圖產生實質性的聯繫
舉一個簡單的代碼示例假設我寫了一些代碼
來生成圖像視圖然後以一千這個標籤跟蹤這段代碼
因爲我以我所有的聰明才智確信
別人絕不會用到一千這個標籤
但是這之後我看了我的演講我說不不
讓我創建一個實際屬性
將它聲明爲UI圖像視圖
然後我保持一個指向這個視圖的引用
這個引用也有更好的類型信息
因爲只帶有標籤的視圖是類型UI視圖
由於使用定義屬性類型的UI圖像視圖
編譯器事實上可以推斷出我做了什麼
並且在出現錯誤時幫我解決問題
請注意
視圖和視圖控制器的最優方案是
時間設定具備決定性意義
也就是說對於你們那些已經處於某種位置
可以做一些事情沿着系統動畫去做
或者你有些工作想要做
而動畫已經完成 所以你只能
乖乖地去猜到底那個動畫要花多長時間
也許實施起來就像一個NSTimer定時器
老老實實地爲你守時
好吧 你並不想那樣做 因爲
那樣的話 App裏會產生不確定性
尤其是關於可能性
動畫的時間設置可能每一集都不同
你真的是不過時的反義詞
如果你真的在做這些事相反
利用UI視圖過渡協調器
在UI視圖控制器的API去了解何爲時間設定
你所擁有的動畫有何時間設定
這能夠讓你
做你想要的任何動畫 隨便你想要的
視圖控制器過渡
你當然知道何時那種過渡會完成
其中內置支持可撤銷動畫
和交互動畫
如果你再想象導航輕掃手勢一下
用戶可以前後移動手掌來
改變速度、方向 甚至決定不要彈出視圖控制器並全部取消
如果你使用過渡協調器 那麼你準備好要處理所有這些
我們來談一談自動佈局的最優方案
自動佈局是一種工具我敢肯定大家很多人都知道 也喜歡用
它是一種內置的設計上是
要幫助你適應
並以你的代碼實現不過時我們打算現在要談一談這方面
不過時是一個目標是自動佈局工具的目標之一
但首先 我要簡短說一下
有一些最優方案可以帶來高性能給你的自動佈局工具帶來高性能
這就要有個開頭管理你自己的約束從這裏開始
用最高效的方式去管理效率越高越好
你做事的方式就是把所有約束想象出來想象到你的視圖裏
然後識別這些約束它們在視圖的整個生命時間都可能變化
當識別到發生什麼變化時有意義的就是
你就會能夠做出有目標的變化
而不是改變事物不是改變不必改變的事物
因爲當你保持一些事情恆定不變時
你就讓自動佈局引擎來最優化這些事情
這些不會變化的事情
因而自動佈局工具不必進行若干計算而你的app佈局也更快速
這一點尤其重要
如果你在卷軸期間重新佈局的話
或者其他有些事情用戶交互
部分用戶交互 確定無疑的最優方案
而這是最糟實踐而最優方案是
要避免最糟實踐
把所有約束從視圖中清除出去
這點不僅對於App執行自動佈局引擎
的性能表現不好
在做盡可能多工作時
它同時還是潛在的兼容性問題
因爲未來版本iOS可能有額外的約束
框架已經添加了這些額外的約束
你只要調用刪除所有約束 就可以刪除
你想要避免調用“刪除所有約束”
在視圖上儘量避免 越多越好
把這些捆綁在一起這種做法就是能夠
高效地管理約束
通過用同樣的策略明確地表達
我們剛剛談過通過替換視圖標籤
讓實際屬性指出這些視圖
或你可能需要的約束
在視圖的整個生命期進行改變
那麼讓我們看一下這個非常簡單的實例
是關於如何寫入更新視圖的約束碼
而且這使最簡單的事成爲可能
這是在說嘿 我需要更新我的約束
讓我只是將它們全部移除
然後我會重新計算 並把它們添加回去
我們並不想這麼做
這不是最佳實用方法
最佳實用方法是如果我們有一個約束
如它需要被更改的話 可以移除它
僅需重建那個約束 然後把它添加回去
自動佈局引擎再次識別到無法更改的約束
而且它可爲我們優化
因此我爲您們設計了下一組最佳方法
關於約束是圍繞這一思想
就是當您描述約束時您有多具體
總之 您想要您的約束
儘可能準確描述您的佈局
也就是說您要說出若要獲取您想要的佈局
需要做什麼以及您不想要又該怎麼做
換句話說您說的要詳盡
而且關於這個特殊性問題
雙方也存在潛在問題我將在此一一講解
第一個就是執行問題
因此第一個就是添加雙重約束到您的視圖中
雙重視圖約束指的是當你刪除它們時
佈局將會完全相同
因爲它們已經隱含在那裏
而且當您使用它時它就會引發佈局引擎
去完成更多的工作因爲它正在爲
這些約束解決問題因爲它們在那裏
但它不需要實際解決
可以在簡單的佈局中看到這一實例
我在超級視圖中獲取了一些視圖
首先我會通過做一個縱軸描述這個佈局
並且說 嘿在我的頂視圖和底視圖之間有些邊界
我在對齊選項中賦值以指明
這兩個視圖的左側也是對齊的
然後我說好的 讓我們進入橫向維度
我爲頂視圖提供了一些間距
因此現在我瞭解它的左邊界是什麼
然後我想 好的我已經指定好這個底視圖
同時我也指定好底視圖的邊界
但是我剛纔在按鈕視圖的左邊界製造了
我並不需要的邊界
已知頂部視圖的邊界
我也知道 按鈕的左邊界
並且頂部視圖將對齊
如果我沒有指定按鈕視圖的左邊界
這個視圖層將準確的成爲相同的佈局
所以外部約束只會導致
引擎做不需要它做的事
解決了這個問題之後我們可以更快
下一個問題是
過度設定約束將導致
的實際不是性能問題而是適用性問題
這對應用是個潛在的隱患
在約束不夠靈活時就會發生適用性問題
如果我們考慮硬編碼值我們知道我們不想這麼做
讓我們回到這個例子
回到視圖中的標籤
我們可以再一次描述它的約束條件爲
距離左邊有30點寬260點
但是這些硬編碼值
讓我們看起來死板和僵化
與作爲面向未來的先進工具
的自動佈局技術的整體思路相違背
我們真正想做的是用視圖所在
本地座標系中的位置和大小定義約束條件
所以應該使用父視圖在本地座標系的位置和大小
來定義視圖邊界的最小約束條件
所以來討論定義約束條件的另一面
設定不足的約束
你也不會想這麼做的肯定想已經設定好了所有你需要的約束
考慮下 會發生什麼？
如果設定不足約束 我們會引入歧義
讓我們回到將要設定的約束
如果我設定這個標籤的左右邊界
然後再設定一個上邊界有些東西不見了
非常明顯
我們沒有設定底部邊界 原本應該設的
因此我們引入了歧義
這意味着我的視圖
在不同時間運行程序時將以不同的方式出現
假設這是一個表單元
當我調用刷新數據時
它變了 我很迷惑
它可能隨IOS不同版本發生變化
或者因爲不同宇宙射線擊中手機設備
誰知道呢？
我們不想要未定義的行爲
我們不想要我們的視圖看起來這樣
我們想要它按照我們設定的高度
所以請確定你完全定義了你的約束條件
我想以練習的形式給你一個
調試自動佈局代碼的最優方案
你可以使用佈局歧義檢測的UI視圖
如果你想在調試時找出
視圖未能正確佈局的原因
調用佈局歧義檢測
它幫你找到視圖中存在的歧義
你還可以在窗口調用這個方法
它會告訴你視圖樹上的任意視圖是否有歧義佈局
這非常方便
你可以調用自動佈局跟蹤的UI視圖
得到一張包含視圖樹所有約束的圖片
使用那些約束去找到歧義
真正有趣的最優方案是
用正確方式的去使用這些方法把它們放在單元實驗中
你可以想象在你的應用中的每個視圖樹每個基本的活動
都可以調用佈局歧義檢測窗口
如果它有佈局歧義
你可以調用UI視圖自動佈局
跟蹤找到存在歧義的約束條件
將它們打包到報告
這既能讓你知道這個實驗中
什麼時候存在歧義
也能爲後來學習並發現問題的人提供調試信息
這就是自動佈局apps
最優方案
好的
我將轉到我們最後一個最優方案的話題
關於表視圖和聚合視圖
我知道這對幾乎所有IOS應用都重要
當然它對我也很重要
最優方案的第一步是使用自適應大小單元格
當你需要單元格中的內容可以變化的時候
或者需要一個隨內容變化大小的單元格
我相信你們大多數人在開發生涯中都
會遇到這樣的場景
在已有內容的基礎表視圖中
你突然意識到 哦...
根據不同的內容每一個單元格都需要不同的高度
我不能讓每個單元格只有一個高度
iOS8中引入的自適應大小單元格
將會使這些轉換工作變得簡單
自適應大小單元格在表視圖中可以根據內容變化高度
現在我將開始講解這個最優方案
告訴你如何在你的應用中使用它
它就像我們剛纔在
自動佈局中說到的那樣啓動
需要完全設定你的約束
如果你想使用所有我講過的技巧
考慮到自動佈局系統
將寬度作爲輸入
因爲表視圖是固定寬度
所以你的單元格將會是這個寬度
隨後自動佈局系統會輸出單元格高度值
如果未完全設定約束條件
這裏會存在歧義
就不會得到你想要的那個高度
如果我們使用表視圖單元格的簡單例子
它真的很簡單
我們只需要設定我們內容的邊界
在這個例子中只是個標籤
它具有固定的內容尺寸
所以當我們設定它的邊界時
完全定義了這個單元格的約束條件
我們將得到我們要的尺寸
你可能還有一些更復雜的單元格
我認爲這是一個簡單的例子
然而有時你會發現 嘿
我已經設定了我所有的約束條件
但是我沒有得到我想要的高度
這裏有個技巧
關於增加內容視圖的約束條件的技巧
這個約束條件用來設定內容視圖的高度
實際上你正在使用
內容視圖的高度約束條件
然後你就能以內容的形式設定約束條件了
這裏我要說 嘿內容視圖的高度應當等於
標籤高度加上我的頂和按鈕的邊界
在這裏 這是重複工作
我不需要這樣做
我會得到同樣的東西
但是如果你的應用中你沒得到你想要的結果
並且你在視圖上加了一個高度約束
導致單元格高度變化
這表明你的約束條件
不符合你所需效果的設計邏輯
這有個偉大的工具你可以用它來找到錯誤
現在 你可以考慮
如何讓單元格變化以動畫的方式呈現你知道
使用自適應大小單元格和自動佈局
現在你可以想象你如果有一些單元格
需要根據內容變化你可能採取非常原始的方法
更新你的模型然後調用刷新數據
如果你這樣做 單元格會變成這樣
它會出現在表格的新位置
確實達到了目的 但是這不符合
你想要的用戶體驗
它看上去不那麼精美和平滑
你想要的是單元格高度的變化的動畫效果
單元格周圍的東西應該以動畫的方式
平滑的移動到它們的位置
必須讓用戶能理解發生了什麼
讓我們演示下如何做
謝天謝地 它非常簡單
任何時候你想要一個類變換
在表視圖中以動畫顯示
可用表視圖API來開始更新和更新塊
第一步是調用表視圖開始更新
不管你是否使用自適應大小單元格都要做這一步
這是在表視圖中實現類變換動畫效果的通用步驟
然後更新你的模型
很簡單
第三步如果你在改變一個屏幕單元格的高度
你可以點擊這個單元格
觸發索引路徑行的表視圖單元格
然後改變單元格的內容
需要的話還可以改變約束條件
有些時候人們認爲需要
調用重新加載索引路徑行
不需要這樣做
它不會給你良好的體驗
實際上你只需要點擊單元格
並改變它的內容
做完這些後
點表視圖結束更新
表視圖此時重新計算所有行的類
包括調用所有的在屏幕上的行
以從自動佈局信息獲得它們高度
如你所見 所有的東西以動畫效果呈現
開始更新 結束更新是關鍵
最後一個我想分享給你的最優方案是
自定義聚合視圖佈局
自己失效 然後非常快的重新繪製
我知道很多人
會寫自定義聚合視圖佈局
在用戶滾動的時候 對視圖本身
做做這個 改改那個
它們很難跟上佈局的改變
恩 我將告訴你圖形應用如何
完成這個工作 然後你就能把這項技術
應用到你的自定義佈局中了
圖形佈局有這樣的頭部
爲聚合視圖的輔助視圖
當用戶滾屏 甚至單元格移動時
頭視圖留在屏幕原來的位置上
這是我所知道的很多人
在聚合視圖中完成上述工作的基本思路
圖形佈局可以
UI CollectionView無效上下文實例做到這個
UI CollectionView中有這個API
這個步驟非常簡單
第一步非常明顯
座標改變後圖片視圖佈局重新繪製
所以用戶滾屏時
圖形佈局重新繪製
就變得輕而易舉這是簡單的部分
問題是我們如何讓它變快
答案是圖形佈局建立目標視圖重繪過程
讓聚合視圖知道只有頭視圖
會進行重繪
而其它的單元格不會重繪
這讓聚合視圖能儘快的完成整個操作
它如此快 這個操作只在
幀速率很快的時候重複
儘管每一幀佈局都會重繪
所以如果你在使用自定義佈局時
有性能要求
你可以在佈局時使用這項技術
總的來說
UI CollectionView無效上下文是
克服性能問題的關鍵
所以我建議你用用這個API
好了 我已經講了一整套最優方案
我們討論了性能以及如何讓你的應用啓動時快速響應
在它的生命週期內如何
讓你的自動佈局儘可能的快
我們討論了用戶體驗是你的最大目標
跨越無數不同設備實現
表視圖的動畫效果
我還分享瞭如何編寫面向未來版本
代碼的技巧
現在我建議你以這些話爲參考
你可以回頭看看這些視頻在你構建你未來的應用時
這裏有非常多的最優方案你可以用它們
作爲進入相關文檔的跳板
查找我提到的API的相關文檔
你將能將這些最優方案部署到你未來的應用中
謝謝
很高興在WWDC與你們分享
希望今天下午你們能得到充分休息