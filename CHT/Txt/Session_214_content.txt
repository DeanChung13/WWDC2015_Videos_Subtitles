《有關On Demand Resources之簡介》
下午好
歡迎來到今天關於On DemandResources的介紹會議
我是史蒂夫·列瓦倫
我們今天將給你們準備了些什麼呢
嗯 我們還是先給你們說說
On Demand Resources或者是ODR的大致情況
我們來比較一下使用ODR App與沒有使用它的區別吧
我們將爲ODR開發人員以及用戶們
列出ODR App的所有特性和優勢
然後我們將深入研究ODR的細節
結構以及如何構建等問題
接下來我們將給你演示使用Xcode
並將新的ODR API添加到庫裏
最後 我們將演示和構建最優ODR API的最佳實踐
並整理成一個小片段
咱們開始吧
我們得先理解
傳統App的進展狀況才能理解ODR的進展
這個App現在將會有一個可執行的部分
這是編譯好的SwiftObjective-C C++
以及一些基礎資料
和遊戲等級資料例如 假設這是一個遊戲
當開發人員對這個遊戲或App感到滿意
於是你們上傳到App Store裏
這樣 用戶可以購買這個App或遊戲
然後他們得到整個程序
並下載到設備上
然而他們下載的東西並不單單如此
其中也包含開發人員爲所有用戶編寫的其他有趣的東西包括App和遊戲
他們其實是如此有趣
人們下載得再多也覺得不夠而事實亦如此
設備上沒有足夠多的空間
因此我們怎麼要做呢
好吧 我們能做的就是觀察每個App
發現並非每個部分都被使用
我舉個例子
我的遊戲級別是7級
我肯定不想再待在1級
而且長時間內我可能也到不了30級
如此一來
我們就開始考慮ODR
現在讓我們來看ODR的一個App吧
在這種情況下
我們開始使用相同的比特
沒有去掉任何東西
但我們要做的是梳理
每個遊戲級別的資料
然後我們將整個東西上傳到商店
現在當客戶購買這個App時
他們得到可操作的基礎資料
也許有Level 1的遊戲裝備
這不是雙關語
我們已經在遊戲中了
因爲他們能闖過遊戲的Level 1
購買和使用App與Level 1的時間
比那些下載整個App更快
而且使用更少的磁盤空間
用戶現在開始玩這個遊戲
並開始玩Level 1
一個設計良好的ODR App
需要能預測比如下一個等級
因此 需要進行下載資料
用戶繼續玩
打到Level 2
然後ODR內置的緩存機制
通知你不再使用Level 2
並且作上標記
資料還在那兒
我們什麼都不用做
只需要記住不再用它
但會一直保留設備上
這樣空間就慢慢少了
無法儲存下一個級遊戲
我們檢查設備上其他可能釋放資源的空間
僅剩下這個遊戲的...
ODR內容 僅此而已
在這種情況下
緩存機制可以一步釋放空間
比如 我有1級的內容
我可以將它釋放
這樣然後用戶可以繼續玩下一級遊戲
這是ODR的基本理念
從遊戲的購買
到玩遊戲時間更短
佔據設備空間更小
更易於...
管理
現在讓我們談談ODR
爲開發人員提供的所有亮點
首先 這顯然是一個動態加載的內容體系
你們可能已經使用過這樣的系統
但是我們添加了一些新特性
首先我們可以在App Store中
儲存該App的內容
第二 我們可以在安裝和請求安裝App時
下載內容事實上我們可以
隨時自動化...
操作下載
最後還包括我提到的智能緩存機制
正如剛剛提到的
所以 我們可以騰出空間來
加載新的東西
最後
App Store傳統App最大是4千兆字節
但是ODR App
現在可以達到20千兆字節
當然 這些大多數都是ODR的內容
好的
因此 這是開發者的優勢
但對於用戶的好處又是什麼呢？
首先 我們可以...
改善安裝體驗
一個傳統的DLC系統
使用該技術的遊戲
會有這樣的體驗
用戶下載App時
他們都非常期待玩這個遊戲
他們啓動遊戲
然後 不是吧遊戲還需要下載一些新的內容
有了ODR 我們可以確保新內容就在設備上
App只是看上去已經安裝而已
因此用戶體驗會更好
第二
由於我們在設備上佔用的空間更小
在任何時候都更容易管理
App佔用的空間小
我們就可以存放更多的App在設備上
這對用戶來說永遠都是一件好事
最後對於用戶來說
同樣的由於有更多的空間
我們可以在App Store雲端
存儲更多App或是遊戲
例如 我們可以有更豐富和昂貴的遊戲等級
對於用戶同樣是一件好事
好的
現在讓我們深究一些關於ODR的細節
首先對於IOS 9系統是應用瘦身
而且可以很好地與應用分割兼容
如果你錯過了之前
關於應用分割會議
討論如何將App 下載到特定設備
讓我給你舉一個例子
你編寫一個App
目標是各種不同型號的iPhone和iPad
當iPhone用戶來到
購買App後
應用分割可以確保他們所得到的資源是必須的
而且是適合該iPhone版本的
在此之前用戶會下載所有的
包括適合iPad的資源
因此 現在結合應用分割
和ODR之後
彼此雙方都收益
它佔用的空間更小
我們使App運行更快
App持續穩定性更好
在設備上佔用的空間更小
好的
那麼
一個ODR App是什麼樣的呢
它是如何構建的呢
它與如今的App很類似
但是
他能夠將遊戲裏的等級和資料梳理開
我們把這叫做資料包
剩餘的App仍是你的 .app
現在 運用Xcode和簡單的標籤進行分組
例如 這些是我在遊戲Level 1中的所有資料
假設的說
這非常容易設置
你可以將它標記爲簡單的文件或一整個文件夾
例如 這是Level 2的整個文件夾
現在 你可以標記什麼呢
幾乎.app裏的任何東西都可以
例如
圖像
聲音
數據和文字
很多有腳本的遊戲
同樣還有App內購買的內容
那麼現在你可以將程序內購買的物品
和通過ODR下載的實際購買的內容
相結合起來
利用其它ODR API
實現管理
唯一無法獲得的是可執行內容
即編譯好的SwiftObjective-C、C、C++
這些會留在 .app裏
好的
那麼
這些內容將存儲在哪裏
好的 我提出其中一個位置
顯然它是在App Store
我們存儲在App Store並且按需供應
但在開發過程中Xcode代替了App Store
無論你是針對設備還是模擬器進行開發
它存儲在你的App中並根據需求傳輸
現在 Xcode的另一款工具是Xcode服務器
你可以把它設置在自己部門中
這樣可以獲取服務器上的ODR和App
例如 按照你所安排的
Q/A工程組測試你的App
正如你所期望TestFlight完全整合了ODR
最後 假如你要爲公司部署一款App
實際上你可以在公司的網絡服務器上存儲ODR內容
並設置安全登錄
以確保不是所有人都可以獲取該內容
這ODR內容的存儲位置了
好的
那麼 該如何開始的呢
嗯 作爲一個開發者你要做的第一件事情是
看看你所有的App資料
並且識別它們
你需要對它們進行分類
再次重複 你可以用簡單的字符進行標記
這些是我遊戲Level 1的所有資料
這些是我遊戲Level 2的資料
而且你知道等級間有一些共享的資料嗎
它們就在那裏
你可用多重標籤標記資料
以顯示共享內容 防止重複
這部分是爲準備好使用ODR的人設計的首個部分
作爲開發者 這是你的工作
現在Xcode起作用了它將所有這些標籤
和組放到資料包中
在這個案例中我們用三個資料包做結尾
資料包1爲Level 1
資料包2爲Level 2
最後以介於資料包1和2之間
的資料包3作結尾
再一次請避免重複
好了 Xcode起作用了
現在輪到開發者了
首先你要做的是
請求資料
我需要Level 1的所有東西
出來兩個資料包
都屬於Level 1
然後是介於Level 1和Level 2之間的共享資料
因爲已經接入共享資料包
在我們請求Level 2時
我們得到這些資料
而這些共享資料也已經在我的設備上了
以上是關於ODR概念以及
如何建立一個ODR請求的概述
現在 有請託尼·帕克上臺
爲我們展示使用API Xcode中發生了什麼
託尼
謝謝你 史蒂芬
我叫託尼·帕克我是Apple Foundation組的經理
史蒂芬爲大家介紹了ODR系統如何工作的基本信息
現在我們將詳細講API
即在你的App 中實際用來處理這些請求的API
關於API你必須知道這個
這是Foundation中的新類叫NS Bundle Resource Request
這個類遵照命令設計模式
意思是你將用一組選擇建立一個對象
包括你喜歡用的標籤
隨後你告訴它開始它的請求
這樣 你就可以按需創建對象了
因爲系統會參照高級選項計算標籤
所以 如果有不同部分使用ODR App
且可能有重疊標籤
你就不需要每次都創建管理類
跟蹤你已經用過的那些
我們將爲你處理這些問題
最重要的一點 即設計出發點是
請求與實際資料利用不掛鉤
意思是說那些你已在App 中使用的
以及你已經非常熟悉的API
比如NS BundleURL For Resource
包含URL內容的NS Data數據
或UI ImageimageNamed
這些API將保持不變
你只需事先告訴系統
使用一個請求對象
告訴系統 這個對象裏的資料是你想顯示的
這個對象組成一個非常簡單的狀態機
從初始化開始
在預估資料需求時
我們跳轉到請求狀態
我們回到結束處理器回調
它將告訴我們那些資料可以獲得
以及你可以繼續使用剛討論的API
或告訴我們發生的錯誤
當然 在使用ODR時
會有一些錯誤這些需要告訴用戶
錯誤可能包括我們需要下載內容
但沒有適用的網絡
或儘管已經做了清理
設備裏仍沒有足夠的空間儲存這些內容
不管是什麼情況你都需要告訴用戶
或許他們有辦法解決這些問題
所以若有適用的資料
就像我說的請繼續使用它們
同樣重要的是當你用完這些資料
請告訴我們
你可以用這兩種方法告訴我們
第一種在這個類中調用明確的API
告訴我們你已經完成這個內容
第二種 允許種類解除分配
允許對象解除分配
在這種情況下
我們將爲你結束請求
這是基本方法
首先 初始化程序
你可看到這裏有字符串
這就是正在請求你所感興趣的標籤
開始請求的方法叫做
beginAccessingResourcesWithCompletionHandler
你可看到有個結尾
裏面有NSR Error證據
最後 這種方法
會告訴系統請求完成完成
明確endAccessing Resources調用
接下來 我將展示
已經在運行中的API
好了
這是演示app 叫做iTravel
之所以叫這個名字
是因爲它是一本旅行手冊提供所有你感興趣的
以字母i開頭的國家信息
你可以看到今天用到的兩個國家是
冰島和意大利
現在 這個App是說明
On Demand Resources用法的很好的例子
原因是...
用戶購買這個app時
或許對獲取冰島和意大利的信息並不感興趣
或至少不需要同時獲得兩個信息
所以 我們可以通過
只下載所需內容
以減小安裝和下載大小
在使用ODR之前
我想要簡單的展示一下如何使用它
首先訪問冰島
你可以看到我在這裏拿到興趣點清單
我從中選擇一個
裏面可能有些優質的圖片
或指南文本
興趣點清單裏的每一點都有不少圖片
你可以看到這些增加了不少數據信息
而意大利 也是一樣的
但是內容不同
我們來看看如何創建這個App
我們今天將花大量的時間來講一個類
就是Album TableViewController
這是個視圖控制器
控制這個興趣點清單中的視圖
讓我來展示下它如何工作的
當我們繼續這個視圖
會有這個函數 叫做loadAlbum
接下來的問題是我們想看那個相冊
意大利或冰島
設置標題
我們把這項輔助函數叫做populateTable
現在 在populateTable函數裏
我們將使用NSBundle´s URLForResource
尋找JSON文件
這個文件介紹所有興趣點和清單以顯示題注
我們使用NSData的contentsOfURL方法
從磁盤裏讀取JSON文件
我們使用NSJSONSerialization對其進行解析
我們在這裏創建一些更詳細標籤文本
最後重載tableView
tableView裏的數據源
使用UI Image.imageNamed
顯示信息 獲取圖片
重點是
在這個App中使用ODR
植入Table中的功能無需變動
再說一次
現在你用來獲取磁盤中文件內容
或找出像NSBundles這種文件所用的所有API保持不變
我們首先要做的是
在App中增加一些標籤
做到這點我將在這裏創建檢測點
你可以看到我已經處理過我的App
裏面有個叫Resources的組
以及包含部分內容的文件夾
這個包含所有冰島的圖片
這個包含所有意大利的圖片
和我剛纔討論的這些JSON文件
接下來 我將接續
併爲冰島選擇JSON文件和文件夾
並查看檢測點的右邊
你可以看到這裏有個新的叫On Demand Resource標籤
所以我所需做的是開始打字
內容將被標記爲冰島
用同樣的方法處理意大利的內容
內容 好了
接下來我們只需 以便當然了
正如Steve說過的告訴Xcode如何將你的內容分開
現在 下一部分是
告訴運行中的系統
我們預計什麼時間
需要這些內容備好可用
我們將在視圖控制器中進行操作
首先我要在我的類中增加一個I var
以保存我們剛說的類
NSBundleResourceRequest
當視圖控制器進行拆分時
我現在要做的是充分利用
我們很好地控制這個對象
這樣 我們可以控制使用時間
當它完成拆分時我們知道請求也完成了
我們允許系統對其解除分配
這將告訴系統我們處理好內容了
下一步 在loadAlbum函數調用populateTable前
我們將先...
創建請求
進入一組標籤在這個情況下
進入意大利或冰島中的一組標籤
我們稱之爲
beginAccessingResourcesWithCompletionHandler
結果出來後
這個結尾將被調用
或許會產生錯誤
在主線程中 這個完成處理程序
將在非主線程中被調用
我們首先檢查並確保錯誤是0
若不是0那就是出現錯誤了
正如我們先前所討論的
這需要告訴使用者我將在輔助函數裏進行操作
然後調用剛使用過的populateTable函數
再一次沒有變動任何東西
繼續 並再一次運行App
看看會是什麼樣的
現在 我訪問冰島
可以看到我的內容在這邊
因爲我們已經做了請求
我可以選擇一些圖片或興趣點
所有的內容都準備就緒了
就好像從一開始它們就是App的一部分一樣
現在我們爲你展示Xcode新調試特徵
若你以你認爲的方式
使用這些請求對象
它將幫助你更好的進行理解
即新的調試計量器
我將把調試計量器視圖放在這裏
選擇磁盤
你可以看到在中間我們有一個新部分
叫做On Demand Resources
它列出你App中所有的標籤
比如冰島和意大利
他們的大小
和現在的狀態
你看到冰島的狀態是在使用中
這就說得通了
因爲我們在這裏查看冰島內容
在我看部分圖片時它保持使用中的狀態
但若我回到主內容目錄
它的狀態由使用中變爲已下載
因爲請求對象已解除系統知道我們
不再使用這些內容了
我們並未立即從磁盤中刪除信息
所以當你回到冰島時內容仍舊可用
它的狀態也變成使用中
讓我們看看訪問意大利時會出現什麼
現在你看到需要花一些時間
內容纔會出來
原因是...
意大利標籤遠比冰島的大
有130兆字節
這裏需要做兩件很重要的事
首先需要減小標籤內容大小
將其分成小的組塊
隨後我們會詳細說明
現在我想要告訴你
如何使用App中的進度報告
並配合使用
NS Bundle Resource Request
這樣在你下載內容時就可以告訴用戶一些信息
以幫助他們理解接下來會發生什麼
讓我們回到
AlbumTableViewController類
接下來要做的是利用
支持NS Progress的NSBundleResourceRequest的優勢
這是個基礎類
你可在你的App中用它來報告進程和構建進程
NS Progress支持鍵值觀察
所以我們要做的是增加視圖控制器作爲進度的觀察點
並更新
改變屏幕上部分UI一個UI進度視圖
並對一些詳細標籤文本做出反應
這裏 在創建請求後
調用addObserver
這類將是觀察者
請求的進度屬性正是我們觀察的對象
進度中的關鍵路徑是fractionCompleted
和往常一樣 使用KVO時
指定唯一的內容指示器很重要
這個我已經在文件的某處進行定義
我將繼續並顯示一個UI progressView
這個進度視圖已經連接到我的故事板中
當收到迴應就可以移除Observer了
因爲之後我們不在對更新的進度感興趣了
然後在主線程中我們將繼續顯示...
不好意思是繼續隱藏UI 進程視圖
因爲我們不想要用戶盯着完整的進度指示器一直看
所以我們本身也是觀察點
隨後在第二部分
在數值變化時 採取一些行動
這裏採取的是傳統的KVO方法
observeValueForKeyPath
首先需要檢查
通過檢查內容指示器和關鍵路徑
確保那就是我們感興趣的觀察更新
在主線程中 再一次
因爲更新將在非主線程中出現
我們將通過設置進度屬性更新UI進度視圖
我們將通過使用它的localizedDescription方法
充分利用自動局部描述的NS Progress支持
讓我們繼續 並再次運行看看它將如何工作
所以這次 當我訪問意大利時
你可以看到在詳細標籤文本底部已經更新
可以顯示完成百分比隨後 一旦下載完成
UI進度視圖將告訴用戶
已經發生的變化
所以 再一次 我們並不着急刪掉這些內容
這樣當我們再次返回訪問意大利時
你可以看到內容立馬就顯示了
因爲這些內容已經存儲在On Demand Resources系統中
現在回到幻燈片
關於展示中進度報告部分的一些東西
所以 再一次 通過查看進度
你可以找到請求進度的信息
我們同樣支持取消 暫停
重新開始請求這些方法本身並不是請求
它們可在NSProgress中找到
現在 事實上在iOS 9和 OS X 10.11中
Foundation中NSProgress類
我們已經做了很多重大改進
想知道如何使用它們
如何大規模的將這類整合到你的App
和其他地方
真的建議你關注週五的演講
《進度報告的最佳範例》
在內容還未準備就緒之前
beginAccessing方法將繼續運行並下載內容
然後 有時候你只想
使用磁盤中已經有的內容
不想再進行下載
你可以使用假定請求做到這點
方法如下
conditionallyBeginAccessingResourcesWithCompletionHandler
你可看到
這裏的結尾有布爾參數
所以不管是是還是否
答案取決於內容可用還是不可用
所以根據狀態機
我們從初始化開始
通過調用這個方法
進入假定請求狀態
不管它是否可用你都將得到迴應
若可用 資料也將可用
就好像你已經調用了其他方法
所以 再一次 確認調用endAccessingResources
或允許對象解除分配
若不可用此時你可以做選擇
你可以...
什麼都不做
也可以調用beginAccessingResources方法
進行下載
最後 我講講此類中API兩個優先權
第一個叫做加載優先權
這個是雙重的
它爲你的App中未解決的請求排序
數值爲從0到1
所以數值1指最高優先權
數值0指最低優先權
當我們處理這些數值時
它將提示系統哪個未解決的請求應該優先處理
因爲數值只在你的app中進行比較
並未在系統中的App進行比較
你可利用這些數值
根據你的需要對請求進行排序
這裏有個常量可以使用
它叫做緊急裝載優先權
當用戶只需等待下載完成而無需做其他事時
就可以使用這個常量
隨後我們會詳細講到這點
第二種優先權叫做保存優先權
這個方法指的是在app中未使用的標籤清除排序
這裏並不需要特別的請求
這是它成爲NSBundle延伸功能的原因
由一個標籤或一組標籤進行替代
數值範圍從0到1

1數值表示最需要保存
所以在碰到磁盤存儲空間問題時
你可通過它告訴系統
哪些數值最需要保存
只在你自己的App中進行比較
而不是在系統的App中進行比較
以上就這些有請史蒂芬上臺
說說使用ODR的最佳範例
謝謝你 託尼
好的 現在我們對ODR有了整體的瞭解
我們知道它是什麼並觀看了如何使用它
現在來說說我們如何建立最佳ODR app
現在開始對資料做標籤之前
首先需要考慮你的app的反應
因爲這將告訴你對資料做標籤需做到哪種程度
關於你可能如何使用ODR內容
這裏我可以提供三種模式
第一種模式這個就像託尼的iTravel app
我們無法預測用戶將去哪裏
這是隨機訪問
在隨機訪問app中
特別是資料比較大的時候
你想要的內容標記了很多資料
並逐步讀取
所以一旦用戶做出決定
他們立即就可以在UI中
看到那個決定的部分進度
第二種模式叫做有限預測
某種程度上來說這就像開放式世界遊戲
它可能是無窮種可能性
在具體時間點時它只是有限的子集
再次 你要做的是
擁有許多標籤標記比少的內容
逐步讀取
也需要準備好放棄那些
用戶選擇不看的內容
比如 就像遊戲玩家在世界範圍移動
他們離開一些地方一樣
你需停止使用索引資料
去掉NSBundleResourceRequest對象
現在 第三種模式是已經在我例子中使用的模式
就是遊戲中的等級
這是直線型進度式遊戲
就像第一人稱的射擊遊戲
在這個案例中
作爲一名開發者
你最大的任務是提早預估下一步需求
但是你非常肯定
所有的內容都是必要的
所以你將只開始加載那些
在一定合理時間內可被加載的內容
好了
說到時間
這裏有個插曲講到你如何使用ODR API
所以我們給自己一個時間線
即從app開始到退出
現在 設計合理的ODR App
應該可以很好的提早預測需求資料
請記住 這是網絡型app
它將必須從App Store
或我們剛檢查過的其他地方下載
但這需要花些時間
因此 在需要使用資料的時候
且當調出beginAccessing Resources
如果還未安裝到設備上
那麼會自動開始下載
當前 這是善用網絡資源
和解決資料尚未準備就緒
就需要使用的最佳辦法
而且 在這種情況下你可以通過進度屬性
和NS BundleResource Request
加快託尼之前提到的進度UI
分享一下屏幕同時讓下載繼續進行
這時候 已經完成下載了
資料已經準備就緒
你可以關閉下載界面
然後開始使用資料了
一旦資料使用完畢
你們絕對會想要調出endAccessingResources
或者允許NS BundleResource Request對象解除分配
以便讓系統知道你已經使用完畢
另外 這不代表我們會關閉服務並刪除記錄
我們只是在這裏提醒大家而已
因此這是需要清楚的基本時間線
並且你們還可以同時發出多個請求
只需要記得本部分的基本內容即可
好的
現在
我已經談了ODR
如何通過改善其安裝體驗而提高用戶體驗
因此 具體怎麼完成呢？
我們需要大家的幫助
作爲開發者
你們需要做的是考慮用戶
在登錄到app後所需要的資料
當你們瞭解是什麼之後比如遊戲Level 1
已經準備就緒
然後你們需要設置資料標籤
並放到Xcode的初始安裝標籤UI
這會通知ODR系統去確認
所有資料的標籤...
在app被...
完全安裝好之前
可以被下載
這樣 當顯示完全安裝好之後
用戶點擊標籤後就準備就緒了
這時候準備開玩了
在App Store看到的App的大小
是 .app大小
以及初始ODR內容的大小之和
因此 需要明白這點
此外 我們將在之後會談談這點
好的那麼 現在我們可以談談
自動化安裝app和ODR內容
但此時用戶還未實際登錄
因爲你們也可以自動設定這段時間
可以這麼做以確保遊戲的Level 2
或者教程之類可以開始下載
也許某些用戶想要看看教程
其他人不會想看
因此你應當確保app即使沒有教程
也能夠實際運行教程
但是最好還是確保有教程
爲了這麼做
你們還可以使用Xcode的資料標籤UI
然後將標籤放進預取標籤命令部分
在你放到該部分的命令順序
是實際上下載這些標籤的順序
好的
現在談談緩存
我們之前提到緩存
而且還展示了系統是
如何爲新等級騰出Level 1的空間
首先 需要了解的是我們會清理內容
但只在系統內存佔用度不高的情況進行
另外 也只有ODR內容會被清理
當我們這麼做的時候
這裏有幾個屬性會發揮作用
通知我們是否要
刪除哪個資料包
很明顯
是刪除上次使用的那個資料包
因此 如果...
玩遊戲Level 1的時候是上週週二
那麼 很可能會在前一天完成Level 1的時候就被刪除
另外 正如託尼之提到的保留優先權
這指的是對標籤設置的優先級
因此 這是你自己的排序我們也會加以考慮
最後 我們會考慮app的運行狀態
我們不會在資料包正在使用的情況下
刪除運行中的app的任何資料包
現在有幾種策略
用於保留ODR內容
其中之一是避免過度清理
什麼意思呢？
我可以舉個例子
比如說系統需要100 MB空間
那麼系統在進行整機搜索
然而沒有找到夠大的空間
通過我們剛提及的屬性
系統會定位到你的資料包
容量爲512 MB
我需要清理資料包
以符合空間要求
因此 我們需要過度清理412MB
所以你的資料包體積最好是小一點
正如我剛提及的 這也有好處
因爲想要快點下載好而且享用內容
因此體積越小就越好
但是體積越小就越不容易被過度清理
好的
另一件你們可能想做的是
對任何事設置1.0的優先權
但這麼做並無卵用
這麼做只會讓系統認爲
更多的資料重要性是相等的
特別是當系統在對app進行清理的情況下
因此 需要謹慎使用優先權設置
最後請再次確認
因爲當你做完標註我們會看
上次endAccessingResources的使用日期
確認允許NS BundleResource Request對象
儘快解除分配
這會讓系統知道你將如何使用該資料
這樣系統會給出最佳決策
好的現在 我想開始談談
性能方面的事情
其中之一是我們在本次會議想做的事
是鼓勵大家提前在後臺下載內容
但是我們不想要讓大家
浪費更太多的系統資源
超過app所能容納的資源
因此 我們平衡了下載速度 資源
CPU和其他屬性
這樣我們只有在下載和使用資料包的時候
纔會消耗系統資源
這是預設情況
但如果有需要或者想要自行進行管理
或者想要完全手動操作
那麼你可以在這裏設置緊急優先
系統會忽略平衡設置
我們將會以最快速度下載內容
正如託尼提到的當你提供載入畫面時
那時候就是設置的好時機
但實際上你的App可能與CPU不兼容
與我們在系統這樣操作情況一樣
因此 這完全取決於你
而且
我們應該討論性能測試
你需要爲ODR的App做現世測試
ODR App是一個基於網絡的App
因此當你使用USB將你的設備
連接到你的MacBook Pro
並運行Xcode
那不是真實的場景
真是太快了
所以你要做的是
使用TestFlight或Xcode服務器來測試你的App
然後使用Developer ToolsNetwork Link Conditioner
來測試各種網絡條件
你的App在ODR內容下載時
可能會出問題
事實上我建議你在任何網絡App上
使用這個工具
真的很好用
如果之前你還沒有使用過它
那我現在做個簡短說明
當你把你的...
設備通過USB連接到
MacBook Pro上運行Xcode時
然後設置設備時候會看到這個條目
一個開發者條目
你點擊後會看到大量的
開發者設置您可以使用日誌等等
中間有NetworkLink Conditioner
點擊你看到的選項
您可以看到
你可以用來造成App斷網時的
各種情況的... 各選擇
要用它 啓用NetworkLink Conditioner
然後決定你想要創建什麼類型的情況
也許你想模仿100%的無網絡狀態
或非常緩慢的網絡
或者高延時DNS查找
或者你只是想重創非常糟糕的網絡
這便是使用ODR App的最佳工具
好的
說到網絡問題
你可能會遇到幾個網絡錯誤
其中一個
沒有網絡
如果你的App需要ODR內容卻沒有網絡
那麼你需要準備好處理這種情況
您可能遇到的另一個問題是資源不可用
這基本上意味着我們認爲ODR的內容
在一個特定的位置然而不是那麼回事兒
一般的原因 例如在公司內部
建立自己的服務器並有人管理
移動服務器文件等
但是還沒準備好讓用戶使用App
所以要隨時準備應對錯誤發生
另一類錯誤可能會遇到
就是存儲空間有關的問題
所以ODR在任何時候
將允許你有最大的2G的應用空間
這意味着你的App正在運行的時候
你已經調用標籤2G的
beginAccessingResources
用完後卻沒調用endAccessingResources
你不允許NS BundleResource Request
進行終止處理
所以佔用2G空間
然後你又去啓動另一個請求
你會再次得到一個請求錯誤
回叫反饋
所以要注意
當然我們可能在本地存儲在設備上
遇到空間不足的情況
你就會收到通知
這可能是因爲你下載太多
或者你發出該下載請求太久
所以還是需要隨時準備處理這些問題
這時候你可以採取一些處理步驟
你可以停止任何
不再需要的ODR內容的Accessing Resources
另外 你可以看看本地設備上儲存的是什麼資料
也許是一些緩衝數據
或者一些已不在需要用到的文件
你可以清理一下並進行刪除
那麼 現在我們來談談蜂窩數據
再次說明ODR App是一款網絡型應用
因此需要使用到蜂窩數據開關
用於控制其他App的網絡連接
因此 如果關閉開關
那麼就不能獲取到ODR文件
如果開啓開關並且你正在下載ODR內容
那麼通過蜂窩數據下載的任何數據
將算是該App產生網絡數據
因此 我們鼓勵大家一定確保
什麼是所需的 什麼是不再需要的
我們不希望用戶產生高額的網絡費用
最後
100MB的蜂窩下載限制
仍適用於ODR App 
因此 要確認.app本身
和初始ODR的數據
是否超過App Store的App體積限制
如果超過100 MB
那麼你的App不會通過蜂窩數據下載
正如一般的App超過100 MB的話
就不會通過蜂窩數據下載一樣
因此
需要注意App的大小
最後 正如前面所說
你們還需要注意一些重要的統計數據
首先
雖然App Store現在可以儲存
超過20G的ODR App 
但是對於.app而言...
只有最高2g的空間
那麼 你的.app本身如何呢？
請記得當我們分解.app中的資料時
我們分解的資料包那麼.app本身呢？
.app最高可以有2G
剩下的ODR內容可以有20G
另外 初始ODR和預取ODR內容最高也是2G
該內容是我們在Xcode的UI中設置的
用於在App安裝過程中和後續過程中下載數據
你最高可以有2GB
合起來 2GB
正如我剛剛所說
只能在同一時間使用最高2G
最後 給定的資料包
最高可以有512MB
因此 如果使用一個標籤標記一堆資料
且提及超過512M那麼Xcode將發出警告
但是Xcode會允許你繼續開發App或者遊戲
但是當你提交到App Store之時
會收到提交失敗的錯誤信息並解釋原因
好的 總結一下On Demand Resources
是一款動態加載內容系統
服務器在App Store之中
這樣可以允許app...
在安裝期間自動和在有要求提出下下載其內容
你可以對下載內容設置優先級
我們有了智能緩衝機制
因此當我們等級提升後會爲後面的級別騰出空間
在App Store有20G的空間供你使用
因此 如果想知道更多信息我們有關於ODR一份新文件
還有簡單的代碼
以及開發者論壇可爲你答疑解惑
如果你仍有疑問
你可以聯繫我們的App Frameworks專員
如果你錯過了
關於ODR大會等其他技術的大會
你可以到開發者網站去觀看視頻
接下來
會有一場託尼在星期五所說的關於ODR進程
和實驗的大會時間是明天11點到1點30
託尼和我以及ODR工程組將出席會議
回答你們的任何疑問
幫助你們開始使用ODR內容
並聽取大家的建議
非常感謝