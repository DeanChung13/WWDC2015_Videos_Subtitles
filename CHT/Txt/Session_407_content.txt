在Interface Builder中執行用戶界面設計
謝謝
下午好 歡迎大家吃完午餐後回來
我猜大家是吃了午餐看視頻的
我還正在吃我的早餐呢
不管您吃了什麼餐 或者您來自哪裏
歡迎探討Core Data線程問題
我只是開了個玩笑
我們來聊聊Interface Builder
我的名字叫凱文凱文· 凱希
我是一位界面編程工程師
我們今天來做一些不同的事情
介紹Interface Builder兩個新特性
但是我先想做另外兩件事情
第一件我們要給你們一些更高級的內容提示和技巧最好實例
Interface Builder在後臺運行的
然後我們要來看一下
Interface Builder如何幫
在開發自己的應用過程中的每一步的
讓我解釋得更清楚些
您在這裏
您有一個非常棒的點子
現在 可喜的是有其他一些同伴
也覺得您的點子非常棒
可是問題來了
他們生活在世界各地
並且他們使用不同的蘋果產品
那您要怎麼辦呢
首先您要想想您的應用
它會具有一些什麼樣的特點呢
哪些將成爲您會面對的不同的共享功能塊呢
在您思考這些功能塊的時候您將會觀察每個獨立的場景
並且在每個場景中 繼續下去
實際上都會慢慢深入到界面層
好 讓我們回到第二步
針對不同的產品並且是不同的語言來開發界面
那將會是非常大的工作量
Interface Builder爲您節省大量工作
會在任何一個步驟中
我們可將整個過程調製成三個主要步驟
這些步驟將爲我們的議題提供完美的解決方案
我們將開始討論
設計時用Interface Builder
我將提供給大家一些最好的實例
然後我們將稍微揭開一些內幕
Interface Builder是怎麼工作的
然後我們將在此次演示中花上大量時間
來討論運行中的Interface Builder
不僅討論在運行時您怎麼與它交互
而且討論您可以怎麼樣利用不同運行時
操作系統特性的好處
來增強您應用的可適用性
深入討論設計時刻的Interface Builder
最好的方法莫過於直接展示
設計時刻的Interface Builder
在我在講示例之前 我要告訴大家
在這個示例程序中我會帶給大家5個提示和技巧
5個最好的實例
我們將在我們正在開發的一個駕車旅行的應用中
增加一些新的功能
我們將增加一個新的標籤
讓我們可以關注那些正在自駕遊的朋友
所以 在這個應用中
我將實現來自一位設計人員的要求我非常樂於效勞
原因有兩個 第一如果您正在和一個設計師一起工作
他/她在和您一起工作的時候會跟您說一些行話
第二如果您並沒有和一個設計師工作
爲了告訴您這些信息設計應用以及最好設計方法
不一定需要設計師幫助就能完成
我們用靜態的模擬性演示
就像您在屏幕上看到的一樣會有兩塊數據是您需要從這個應用抓取
第一 信息展示的佈局 它存放的地方
第二 外觀 它長成什麼樣子
首先我們將從應用佈局開始
它將給我們演示
最佳實例一 引用自動佈局
特別是引用棧視圖
引用自動佈局意味着處理視圖間的關係
協同抵抗那些對象約束
對於那些過去已經使用過自動佈局的朋友
您就知道和對象約束一起工作非常靈活和強大
還有一些其他的東西
例如 您需要不停地去定義一套約束
在這裏 棧視圖就要派上用場了
如果約束只是把
舊有的位置尺寸信息抽象成關係的話
棧視圖將走得更遠
它將會把這些關係抽象成行爲
讓我們來進一步應用棧視圖到我們的應用中
切換到Xcode
這裏就是我們強大的新功能
直接在InterfaceBuilder中應用棧視圖
我並不認爲還有比這更簡單的了
我只是簡單地選擇視圖放入棧視圖
然後使用畫佈下方的棧按鈕直接點擊
現在 我們就擁有了一個棧視圖
一旦我們擁有了棧視圖
我們可以就調校棧視圖不同的屬性
現在 在明天的自動佈局課程
他們將深入棧視圖所有不同的屬性
但是我們將聚焦在一點
那就是對齊
如果我們切換回我的模型
您會看到我的設計師要求
基線與這些標籤對齊
什麼是基線對齊
基線對齊大致上可以允許您將
不同大小的文字對齊 看起來舒適
如果您有文本性對象像按鈕 標籤
和分斷控制按鈕
您想要基線對齊它們而不是使用居上居中或居下
讓我們回到Interface Builder我們可以
如果進入屬性檢測器 我可以做什麼
我可改變棧視圖的對齊方式爲基線對齊
這是第一年也是最後一年
如果您有多行文本的話
您可以根據第一行
或者最後一行文本
在這個例子中 總共就只有一行也就無關緊要了
看起來真棒 我們選擇第一行
讓我們繼續應用棧視圖
我可以將這個標籤中的棧放入棧視圖
我可以增加圖片視圖
我把它嵌入到棧視圖
Interface Builder就會自動推理
對齊方向等不同的屬性
現在 我們有了這個外部棧視圖
我們需要將它放入表單元格
表單元格本身不是棧視圖
爲了做到這點 我們要使用原始約束
我要去把我的TIE 戰鬥機
打開來加一些約束 我要在這個跳出界面上澄清兩件事情
第一件
什麼是佈局邊緣
具體指哪些東西
佈局邊緣就是一個視圖上邊緣內側的空白部分
系統提供了一些默認值
如果您使用佈局邊緣
它們將根據不同的上下文自動適應例如不同的設備或者視圖層次等級結構
一般地如果您有按鈕 標籤
這些用戶將交互或者看到的內容
如果不是約束到另一個表視圖的話
您希望約束它們到邊緣
如果您有一些像圖片視圖
它們待在您整個表視圖單元格後面
那把它們約束到邊界相比就比較合理
甚至這些邊緣會改變
您的圖片還是仍然
留在後臺
如果我取消選中約束
約束和邊緣您可以在這裏看到更大的數據
Interface Builder默認調整到邊緣
非常有幫助因爲這正是我們想要的
第二件我想去澄清的是這裏這個我將要使用的更新框
更新框促成
Interface Builder移動您在IB畫布中的視圖
使得它們符合運行時的約束條件
當我增加約束
我有一系列選擇去實現
如果我說所有容器內的框架
它指所有在表視圖單元格中的子視圖運行時
移動它們到
約束指示的地方
然而 如果我有一個大視圖而其中又有非常多的子視圖
也許我只是想移動當前實例
我正在工作的那些東西
這裏 我們可以使用折中方案
它只會移動我增加的新約束中的
那些條目
現在 我只剩下一件事情 並不重要了
我們需要給所有框架增加約束
我們正在做着呢
好 下一件事情 我需要更改棧視圖中
每一個條目的對齊方式
另一個這麼操作的例子
我需要改變它爲填充 可是現在
那的確不是我需要尋找的 對嗎
棧視圖建立在自動佈局上
意味着它可以使用約束
去非常好地調校您的佈局
所以 如果我想要使這個圖片擁有1比1的比例 甚至是在棧視圖中
我仍然可以增加一個約束來增加一個比例值
然後改變乘數到1比1
接下來我要在圖片視圖和右手邊內容間
增加一些空間
因爲我的設計師希望在那裏會有一些間距
現在我需要改變間距的棧視圖
完全被標籤以及其他棧視圖封閉了嗎那我要怎麼得到它
Interface Builder得到封閉視圖的幾種方法是
我可以使用跳躍條或者使用輪廓視圖
但是我要展示我最喜歡的方式
Xcode高級提示一
也是目前最快的選擇
如果我按住shift右擊或者control左擊
我會在鼠標指示處看到一個全面的列表
那麼我就可以簡單地選擇我需要的
我選好後可以改變間距
到我想要的那樣 就是這樣
最後一件我想要演示給你們的關於棧視圖的是
您如何同時使用多個棧視圖
去獲取您想要的佈局
如果讓我們來看看需求說明
您就能看到這一套標籤設計師想要它們
表現得像一個整體並且
垂直居中於表格視圖單元格
我們可以把右手邊的這些內容
放在另外一個棧視圖中並且調整對齊
讓我來演示一下
我會使用我的最快選擇來到棧視圖
我要在另外一個棧視圖中嵌入它
您會看到這個藍色稍有變深
意思是現在可以改變居中對齊了
現在對齊方式影響到了非堆棧方向
因爲這是一個垂直棧視圖
它將水平對齊
可是我要改變的是垂直對齊方式
所以我要改變通道爲水平對齊
您可以看到運用非常小的約束
通過棧視圖 我就能精確得到想要的佈局
在應用自動佈局時 我們的建議是
使用棧視圖並且優先使用它
然後您只需要使用最原始的約束即可
我們認爲您可以使用棧視圖
來開發大部分UI
這使它變得簡單
這使不同佈局測試變得簡便
不再需要調整一堆約束
維護也變得簡單
以後回頭只需要
編輯一個您的文件了
好的 這就是
接下來 讓我們來看下
我們的應用外觀
第一件事情我需要準備設計時刻的畫布
我需要通過編輯畫佈菜單來做到這點
Interface Builder有很多選項
來自定義畫在畫布上的內容
例如這些棧視圖爲我創建的藍色背景
在佈局的時候就非常有用
我可以看到棧視圖具體多大
可是在設計的時候 我想要看到
它跑起來具體長什麼樣
所以我就直接關掉這些
好 在示例講演外觀的章節
我們要看下使用Interface Builder的3個最佳示例
我們回到我們的需求說明
我們看第一個
我們的設計師定義了頁頭和頁身
而不是外在的字體或者字體大小
這些是什麼
這些叫做動態類型風格
它們由系統定義 當您使用它們的時候
它允許系統
自動調整有效的大小和字體
適應在運行時候根據用戶偏好的一系列要求
例如用戶可以自行更改爲
更大的字體
當您的應用使用了動態類型
它會自動適應那些字體改變當您使用了自動佈局
視圖會圍繞它而自動調整
在InterfaceBuilder我們可以非常簡單地應用它
我只要選擇我想要使用的自動類型的標籤
然後進入視察器
選出一個字體類型而不是外加的字體
在這個例子裏我會選擇頁頭
我已經在剩下的標籤上應用了它
所以我們動態類型也講完了
接下來我們要帶上
圖片視圖 我們要使用
兩種最好的示例來演示
一個是可設計性 另一個是可視察性
可設計性讓在Interface Builder畫布中可實現
看到我們自定義繪畫的代碼
讓我們來看看一些這樣的代碼
我要來打開工程導航
增加一些文件
託尼剛上線
遠程傳送給我這個代碼
讓我們把它加入我們的工程
然後打開它 打開的時候
我要給大家演示Xcode高級提示三
高級導航
如果option加shift點擊這個文件 我得到一個小顯示器
這個顯示器允許我更改具體我想要打開文件的目標
所以我們選擇一個新標籤選擇一個新分區
如果我有多個標籤
我甚至可以選擇特定的分區裏面甚至有沒有被打開的標籤
如果我使用command鍵我甚至可以在一個新窗口中打開
在這個示例我只是使用助手編輯器
應用可設計性實際上只需要簡單的兩步
您所需要做的是用IB可設計性
標記一個UI子視圖
然後用它設置一個自定義類
所以我們選擇我們的圖片視圖
或者將要成爲我們的圖片視圖改變身份檢查器
加入我們自定義的子類
Interface Builder會創建我們的項目
啓動一個進程來渲染我們的代碼
並在畫布中演示出來
如果我們改變代碼
它將自動演示這些改變創建它們
並會在Interface Builder中應用它們
接下來我們想要採用可視察性
您可以看到在這裏我把一些不同的屬性標記爲增加IB可視察性
當您標記一個屬性爲IB可視察性時
Interface Builder可爲您創建一個視察器
如果我選擇圖片視圖來到屬性視察器
您可以看到我標記的三個屬性
爲可視察性 顯示在視察器中
我們可以快速採用這些屬性
所以我可以說我要增加那個小圖片在那裏
我們要使用我們的畫筆如果我回憶正確 說明裏說到兩點
我們也可以給它一個不錯的邊緣
現在 這裏我們的可設計性
和可視察性在同時工作
來幫助您快速地在您的設計上重複書寫
我並沒有編譯和運行過但是我可以精確地看到
在運行時候的樣子
這都歸功於可設計性和可視察性
這就是我們關於運用
動態類型可設計性和可視察性
來調整我們應用外觀的章節
現在 我們知道我們的應用
不是都由一個場景組成 
除非您寫幻燈片應用大部分情況下
您會有多個場景
如果我放大Storyboard我可以看到有許多場景
您可以使用Segue將一個場景加入到您應用的流中
創建一個Segue我可以control拖拽一個視圖控制器
或者一個對象 它將初始化一個Segue 然後選擇
我想要的Segue的類型
在這個例子中我將增加一個關係
來增加另外一個標籤到我們的標籤欄控制器
現在我們一旦創建Segue我意識到我似乎
想要在這個表格視圖控制器中實現導航
所以我將在一個導航控制器中嵌入這個
我將要選擇編輯器菜單插入
在一個導航控制器中插入這個
這些是Interface Builder會幫到我們的地方
這是另一個Xcode高級提示
Interface Builder針對這個特定的場景 
展示了導航條和標籤條
這些對象並沒有被添加到我們的場景裏
Interface Builder並沒有添加這些到場景
它只是讓您看到當您給出一些上下文後
您的應用具體看起來會怎麼樣
這就不需要編譯和運行
就能針對不同的上下文進行設計
選擇您的視圖控制器您可以看到您的模擬矩陣
這些是屬性的名字
然後來到屬性視察器
您可以看到我的模擬矩陣
它們都說是被推理的
被推理的基本上是使用圍繞我的上下文
我們知道我們在一個標籤控制器裏面我們知道我們在一個導航控制器裏面
Interface Builder就會知道去顯示哪個條
我可以覆蓋任何這些我想要的
我可以說實際上我想要
它看起來像一個提示框
如果我有內容在這個框裏
如果頂部這條是黑色的會怎樣
我會把它設置成被推理的
所有這些矩陣數據不會影響
您實際運行時的應用 除了一個例外
那就是尺寸模擬矩陣
尺寸模擬矩陣實際上會改變視圖控制器的尺寸
但是一般情況下
把它放入自動調整大小的視圖控制層次結構
如果您不適用視圖控制器它也是非常有幫助的
例如您想要設置您自己應用的大小
甚至當您的應用運行在不同設備上
您想要設計一個您腦中特定的尺寸
它也將會是有幫助的
我的說明是針對iPhone 6 Plus的 所以我可以改變
屏幕尺寸爲5.5英寸
可以在如此規格尺寸的視圖控制器上進行編輯設計
Interface Builder其他屬性今天不討論
它們能夠允許您使用預覽助手觀察到您的應用在不同的設備上
看起來會怎麼樣
但是當您腦中有個特定的上下文的時候
這真的會非常有用 好吧
讓我們回到推理
讓我們完成我們的視圖控制器
給它一個標題 朋友
讓我們增加一些標籤按鈕項
我們已經增加一項這使得我們可以邀請新朋友
使用Xcode 7我可以增加多個條目項
到我的導航項
這些都是些小功能啊 對吧
讓我們使用一個Segue來完成它
使它看起來符合情景
如果您放大看 我們有一個不錯的開始
就像我會根據功能或者重用
重構我的代碼
到幾個不同的文件
我現在使用Interface可以實現相同的事情了
如果我只是選擇我想要的視圖控制器
來到編輯器菜單我可選擇重構到Storyboard
您可以寫入一個名字 我叫它跟隨
因爲這是我們的跟隨標籤
Interface Builder會創建一個新Storyboard 
把這些視圖控制器移入Storyboard
放置一個關聯到我們舊的Storyboard中的場景
現在我們使用Storyboard就顯得真簡單了
讓我們回到幻燈片
我們看到相當數量不同的東西
所以讓我們簡單概述下
我已經給了您5個最好的實例
我們採用了棧視圖和動態類型
來增強你們應用的可適應性
我們已經採用可設計性和可視察性
使得在不需要編譯和運行的情況下可以快速顯示您的設計
最後我們使用Storyboard關聯
來確保像處理我們的代碼那樣
模塊化我們的界面
我也給了你們一個提示
我希望你們會覺得有幫助
當你們使用Interface Builder的時就像可以選擇東西
可以自定義畫布
使用多個條目項打開正是您想要的文件
當然也可以使用模擬矩陣的好處
在設計的時刻就能看到您應用的具體情況
可是如果我點擊編譯會怎樣
讓我們來講講踏它在編譯的時候的一些情況吧
現在 去做到這點 我們需要退後一步
看看設計時刻的情況
在運行的時候 我們會走向哪裏
在設計的時候 你們工作於XML文件
在編譯的時候一個叫做IB的進程
把這些文件編譯成nib文件
Nib文件是非常小特別優化了的二進制文件
它使用一個叫做鍵值壓縮的進程來創建這些
我有一些例子來看下它們是怎麼樣的
Interface Builder編譯Storyboard
它首先會做兩件事情
第一它嘗試最優化您應用的性能
第二它會盡可能少地
創建nib文件
如果我有一個視圖控制器它有一個視圖和一些子視圖
Interface Builder編譯時爲此視圖控制器創建nib文件
-並且創建一個nib文件給這個視圖
爲什麼是兩個nib文件呢
爲視圖控制器和視圖建兩個nib文件
意味着視圖層次結構可以按照要求加載
來看下這裏的另一個示例它有一個表視圖控制器
和一個導航控制器 看起來甚至更有趣了
它又一次根據Segue關係創建儘可能少的nib文件 
我們知道那兩個視圖控制器在一起
所以我們會把它們放入相同的nib中
接下來我們會給您一個表視圖的nib文件
也會爲單元格創建一個nib文件
所以在運行的時候這些會怎麼樣呢
UI Storyboard API時候分配一個Storyboard
起初您所有分配的內存是分配給
UI Storyboard實例本身
不是視圖控制器也不是視圖
當您初始化視圖控制器時
它將爲視圖控制器載入nib文件
直到有人要求 實際並沒有視圖層次結構被加載
同樣的 我給予導航控制器
和表視圖控制器一個標示這樣我就可以使用
初始化API來得到
那個視圖控制器實例了
但是再一次 直到有人要求它
視圖並沒有被加載到內存
那這些表視圖單元格呢這裏就比較有趣了
Interface Builder自動地將表視圖單元格nib文件同
在您設置的重用標示器下的表視圖註冊到一起
那個表視圖單元
現在那就意味着這些單元格
在有人使用標示器實際DQ這個單元格之前
並不會被加載
現在這也意味着在運行的時候nib文件
如果被加載進內存它可以快速初始化它
談到編譯時的Interface Builder
就有一些可以來談一談了
第一個就是性能
Interface Builder代替您
把您的應用性能調到儘可能的好
nib文件只是在需要時被加載
而且nib文件本身也非常小且優化的
Interface Builder重用了不同的nib文件
例如在這個我們能看到的表視圖單元格
一旦運行時擁有nib文件 它就能夠
重新快速初始化 因爲需要新的單元格
最終您終於看到在編譯時刻和運行時刻
所有事物的生命週期
您也懂得了與不同的對象怎麼交互
例如視圖控制器還有視圖層次結構
我們討論設計時刻Interface Builder
我們揭開了一些編譯時刻的內容
但是我們會花課程剩下的時間來
討論下運行時的Interface Builder
在您有那些不同的產品和語言的時候發生了什麼呢
談及這個我要帶上我的同事託尼 裏恰爾迪
謝謝你 凱文
下午好
p我的名字叫託尼 就職於Interface Builder
凱文已給了您一些超棒的練習
關於在設計時刻創建您的UI以及他給您看了
在編譯的時候發生了些什麼
現在我會給您一些例子
教會您怎麼在運行的時候增加動態行爲
Interface Builder支持三個一般機制
來控制運行時候的UI
先用IB action和IB outlets
在您的Storyboard和源碼之間創建聯繫
您也可以自定義您Segue的行爲
或者動態初始化
及使用Storyboard API增加視圖控制器
最終您可以使用自動佈局和自動尺寸
來定義您的UI怎麼根據容器的改變
自動適應尺寸
讓我們從連接開始
在Swift IB outlets
默認內部展開是可選擇的
如果您在視圖控制器和
一個它視圖層次中的視圖之間創建了outlet
在視圖加載後您可以安全地展開
有的時候 您會有外加的屬性
儲藏在您的視圖控制器中 它會影響
視圖的外觀 如果那樣的話 您會想要
使用可選鏈接同屬性的設置觀察器一起
展開這個屬性
如果您的outlet還沒有被鏈接
IB Action允許您通過手勢識別器和控制器
來回應事件
您有可能在沒有從當前視圖導航走的情況下
使用action去更新一些狀態
您也可以使用IB Action去動態地選擇
哪一個Segue是在事件之後您想要去執行的
接着我們有Storyboard API
mac上的類UI Storyboard
或者NS Storyboard
允許您從一個Storyboard文件抓取關聯
然後從那個Storyboard實視圖控制器
如果您有一個需要重複實例化的UI
這會非常有用
如果您在低於iOS 9或者Mac OS10 11操作系統顯示
這也是您在應用中
鏈接多個Storyboard的唯一途徑
我們在UI控制器上也有許多API功能
允許您自定義您Segue行爲
今天我們針對Segue做了不少改進
來使得iOS開發儘可能地輕鬆
我們針對子類UI Storyboard Segue或
NS Storyboard Segue改進使其更輕鬆
如果您想要了解這些請來明天的Storyboard課程
最終我們擁有了可適應性
Interface Builder支持兩種技術
來幫助您適應您的UI到不同的容器尺寸
第一點我們有自動佈局允許您
根據視圖之間的關係調整尺寸和位置
這樣您就不再依賴於編代碼的框架值了
在某些情形下
當您容器的長和寬超過了限定值
您需要做比較大的改動
在那些情形下我們有另外的一個大功能
叫做尺寸類可以使得它變簡單
現在我來給做您一個演示
您怎麼用運行時的Interface Builder
來運用這三個一般技術
讓我們切到Xcode
我們將建立一個可以記錄您朋友
在他們自駕旅行中行爲軌跡的UI界面
計劃以後將它集成到凱文的自駕旅行應用上
就像您在UI中能看到的那樣我有三行標牌
在每一個行中我從類目裏顯示三個標牌
如果我們看下我們應用中的Storyboard
您會發現我使用棧視圖執行了這個UI
在這個棧視圖中 我有三個容器視圖
一個容器視圖允許您在另一個控制器中
嵌入一個視圖控制器當您擁有時在相同場景下
您想要使用多次的需要重複使用的UI片段的時候
這將相當地有用
我嵌入的視圖控制器這裏
擁有它自己的棧視圖
在這個棧視圖裏標包含了下面這個牌視圖控制器中的
多個實例
在每個類目中顯示的標牌數量
是被一個用戶設置控制着的所以在設計時我並不能夠靜態地獲得它
不同於使用這裏爲這個視圖控制器
操作的容器視圖
我用Storyboard API初始化
我根據
它在標示檢查器設置的Storyboard ID
從代碼關聯它到這個視圖控制器
讓我們來看下我們相應的代碼
我們將使用跳躍條導航到關於我
標牌棧視圖控制器的源碼
好 您看到在我的視圖這裏加載方法 
用storybook API實例化那個標牌視圖控制器來實現視控制器
特別地我使用從UI視圖控制器中
獲取的Storyboard屬性
然後我通過標示符執行實例化視圖控制器
我傳入的這個標識符就跟我們在標示檢查器裏看到的一樣
在我們增加或者實例化子類後
我們把它添加成子視圖控制器
然後我們添加它的視圖爲
我們棧中一個安置的子視圖
所以這個Storyboard API實例化
和增加子視圖控制器方面非常棒但是如果您想要
增加一個不同於視圖控制器相關子視圖的時候
讓我們回到Storyboard作爲示例
我們如果看下行爲視圖控制器頂部這裏
我在場景文檔中有一個視圖在這裏
場景文檔允許您存儲高級別的對象與您的視圖控制器一起
可在場景文檔中放入一個視圖 如果不想視圖在運行時初始化視圖的一部分
在Xcode 7裏當您在場景文檔中放入一個視圖
您選擇它它就會顯示在您視圖控制器上方
自己的編輯器上
這就意味着它們並不是您視圖層次結構初始部分的情況
您也可以在Storyboard畫佈下可視化編輯您的視圖
如果這個視圖有問題鏈接的話
會顯示錯誤信息
所以我現在想要創建一個outlet鏈接到這個視圖
並且如果有問題鏈接我需要從代碼這裏增加它
我想要打開助手編輯器
這將帶我去執行我的活動視圖控制器
然後我將要control拖拽到源碼
然後放手 我得到一個小彈出框
允許我設置我的outlet鏈接
但是第一個選項這裏是我是否想要
創建一個outlet或者outlet集
Outlet集是用來批量增加或者刪除
子視圖或者約束的好東西但是不適用於我的例子
我只是想要增加一個獨立的視圖
所以我選擇了outlet
接下來我可以爲連接命名
我會叫它連接錯誤視圖
最後一點我想要指出的是存儲類型
可以選擇強類型或者弱類型
一般情況下您應該設置outlet爲強類型
特別是您鏈接一個outlet到一個子視圖
或者鏈接到一個並不會被視圖層次結構保留的約束的時候
只有當您有一個自定義視圖關聯回
以前的一些內容的時候您才需要使用弱類型
一般情況下並不推薦
我會選擇強類型點擊連接它會產生我的outlet
現在我想要拷貝一些代碼
這些代碼在視圖加載前被提前執行
我確認下是否有問題 如果有
我把連接錯誤視圖添加到根棧視圖的頂部
我通過outlets同時獲取視圖
讓我們在模擬器中看下這個
就像現在看到的那樣 有問題連接
我的視圖正如我需要的那樣顯示在最上方
所以在iPad滿屏的情況下看起來不錯
如果我在分視圖中運行會怎麼樣
我只是拖拽分區到屏幕中間然後放開鼠標
您可以看到我的UI在適應窄篇幅的時候
顯示得並不好
我真正想要的是當寬度比較小的時候
這些標牌垂直顯示
所以任何一個標牌可以獲取
當前屏幕本身的寬度
同時當我們回到全屏模式的時候
我想要我的棧視圖繼續
像現在這樣水平顯示
做到這點我要回到我的Storyboard
我要關掉助手
給我們更大的空間
我將選擇我的棧視圖
來到它的屬性視察器
您能看到現在的棧視圖設置成水平對齊
旁邊的通道屬性爲+按鈕
這個+按鈕允許您增加一個類尺寸自定義
一個尺寸類是一個一維或者二維的抽象尺寸範圍 
在我的例子裏
我想要在寬度爲迷你的時候自定義這個屬性
因爲我並不在意高度 所以我將選擇任何高度
這麼做的時候 我在視察器中得到一個新行和新值
主要是在寬度迷你高度任意的時候
產生作用的
我將改變它到水平
我重新跑一次
又一次我們在全屏了
我們的棧視圖還是水平顯示着
現在讓我們再試一下分屏模式
好吧 我們看到了
大家看 現在我們的配件視圖
正像我們想要的那樣垂直顯示着
每個標牌都得到了半屏的寬度
所以那只是一種方式 您可使用尺寸類
您可以爲單個屬性重載屬性值
但是您也可以增加和刪除整個新的子視圖或者約束
如果您想要學的更多
您可以使用尺寸類
我們會在最後一年有一個非常棒的課程
叫做使用UI套件創建可適應應用
這就是關於示例的全部了
所以讓我們回到幻燈片
凱文和我剛剛展示給大家很多技術
來獲取儘可能多關於Interface Builder
讓我們來複習一下最重要的點
第一點您看到如何使用自動佈局約束和棧視圖
來創建靈活的用戶界面
而不是依賴於硬性代碼框數據
來實現這點
然後凱文演示給您如何使用
可設計性和可視察性來快速地
複寫您自定義視圖的外觀
我們介紹了一個新的功能來
幫助您模塊化您的UI叫做重複關聯
然後我展示給您怎麼使用Storyboard API
來重複地實例化重用部件
最後您看到了您的UI怎麼樣使用尺寸
來自動適應不同的容器尺寸
如果您想要獲得更多的信息
您可以在論壇發帖或者聯繫我們的宣傳員
我們也非常推薦您明天看下我們課程在Storyboard什麼是新的
以及後天的自動佈局課程
如果您想要學習更多關於尺寸類的知識
去年我們的創建可適應性應用的課程
最後如果您想要學習更多關於
使用Xcode怎麼處理您的自動佈局常見問題的話
我們在2013年也有一個很棒的課程
謝謝大家 也祝大家在剩下的發佈會上愉快開心