構建豐富的Playground創建引人入勝的Swift在Xcode 7的內容
早上好！
感謝大家來到今天
關於Rich Playground編寫的講座環節
我叫 山姆是 Xcode 團隊的一名工程師
那麼 現在Playground已經推出大約一年了
而我們已經被你們用它所做的事情震撼了
我們已經看到了各種東西有人寫出了他們的第一個“Hello, world”
更有人在Playgrounds中寫出了多本書
反應是非常驚人的
那麼今天我將談幾個內容
我們將討論 自去年以來
我們在Playground上增加的一些新特性
以及我們已經更新的一些現有特性
我們也將涉及一些小建議和竅門
它們能幫助您編寫出真真正正的豐富的Playgrounds
您希望與世界上的其他人分享的Playgrounds
而作爲一點獎勵
我們將解決WWDC的出席者中一個常見的問題
那就是如何玩遍舊金山
那麼問題是什麼呢？
這個嘛 舊金山是一個大地方
有很多可看的東西
但實際上在講座環節之間你不會有太多的時間去做這件事
您還有實驗室活動還要寫您的下一個偉大的app
而你多半恰好在本週末要趕航班
所以這裏有個終結點
而作爲工程師
我們希望在解決問題的時候儘可能地高效
在這個問題的語境下 這意味着
我們不希望走不必要的路
那麼我們將如何解決這個問題？
這個麼一旦我們知道我們想要參觀的地方
我們會從Moscone Center出發
以可能的最快的方式遍歷所有我們想看的地方
而且要趕在我們衝向舊金山國際機場之前看完
那麼爲了做到這個我們將建立一個Playground
那麼 閒話少敘讓我們進入正題
好了
那麼我這裏 已經有了一個已爲我們設置好的Playground
而我們將快速地花一點時間查看一下我們已有的東西
首先我們這裏有一個地點結構體
地點將是我們希望在舊金山參觀的地方
它們將有一個字符串形式的名字
以及位置 以 CLLocationCoordinate2D 表示
接下來我們有一個城市結構體
那麼在我們這個問題的語境下它將代表舊金山
而且我們可以把這認爲是一個地點的集合
它是我們用來放這些東西的類型
那麼在內部我們有一系列的地點
然後我們在這裏有一個函數 通過它我們可以向我們的城市添加地點
那麼讓我們往下進行創建我們的城市
我們將把它叫做“舊金山”
如我剛纔所言我們需要從某處開始我們的旅行
因此我們將繼續往下進行爲Moscone Center創建一個地點
就是我們將出發的地方
那麼讓我們在那裏創建Moscone 
最後我們終於要向我們的城市添加地點了
那麼 你們中間熟悉Playgrounds的朋友會記得
對於每行被執行的代碼
我們在這裏的結果側邊欄都會得到一個結果
因此我們會看到我們的addPlace函數被調用
而且我們似乎是要將Moscone Center傳遞給它
但是 如果您繼續往下看下面我們創建了城市和地點
我們所要獲取的就是類型
因此這是非常方便的但是我們也想更具有描述性
尤其是我們將要創建更多的幾個地點時
如果我們一個地點接一個地點地逐一參觀
我們將不能區分這些東西
那麼對於我們的地點來說最具描述性的東西就是名稱
那麼我們如何讓名稱返回到我們的結果側邊欄呢？
我們有一個新的協議來解決那個問題
叫作CustomStringConvertible
那麼我能做的就是在這裏爲我的地點擴展結構體
表明我將執行CustomStringConvertible
而你能看到現在我這裏有個錯誤
因爲它們實際上還不符合協議
因此 爲了實際符合協議
我們需要執行一個現成的屬性
叫作 description
而那將返回一個字符串
而對我們來說我們希望返回我們的地名
因爲那是最具描述性的東西
您現在可以看到如果你回顧下面我們創建地點的地方
這裏我們有Moscone Center而不僅是類型名
那麼這對我們的城市意味着什麼？
多半最具描述性的東西
是返回當前城市內的地點清單
以便我們能夠看到旅行的進展
因此我們將往下進行爲城市進行這個操作
執行那裏的CustomStringConvertible
並繼續往下進行返回描述
對於它 我們將返回places.description
因此它將給出我們一系列地點的描述
那麼現在您可以看到當我們最初創建San Francisco時
實際上裏面沒有任何東西
因此我們這裏獲得了一個空陣列
但是然後當我們對其添加地點後我們得到了Moscone Center
那麼當我們創建越來越多的地點時
我們將在結果側邊欄內看到越來越多的東西
因此 關於Playgrounds很酷的事情之一就是
你總能更進一步地查看獲得關於某個結果的更多信息
只須點擊結果旁邊的這個Quick Look按鈕即可
那麼 我就點擊查看Moscone Center
我們看到了關於我們的地點的更多一些信息
我們有地名和經緯度
這對於調試是非常方便的
但是 經緯度對我沒有實際幫助我對製圖學不是那麼在行
我不知道如何在世界上定位這些東西
因此我想看到更直觀一點的東西
某種讓人大聲喊出的東西“呀 那就是要找的地方”
而對我來說沒有什麼能比一個藍色大圓點
下面加個名字更能讓我喊出地名來了
我也會在地圖上加上這個東西
那麼我們要怎麼實現呢？
通常當我們希望做有些定製化或直觀的事情時
我們會創建一個視圖
那麼我們將繼續往下進行在這裏創建一個UI View子類
而我們已經設置了它的一些內容
讓我們快速地查看一下我們在這裏都有些什麼
我們這裏有個類叫做 View
它將是一個UI View子類
我們在內部有另一個視圖它將成爲我們的藍色大圓點視圖
然後我們有一個名稱標籤以顯示我們的地名
然後當我們創建這個東西時我們將讓它決定它的大小
最後 在layout子視圖中
我們將放置這些東西以便當藍色圓點位於頂部
而文本位於下部
那麼我們先創建其中一個看一下它是什麼樣子
而且我們將讓Quick Look彈出
妙極了 那開始更像是一個我能在地圖上看到的地點了
但是我們實際上要怎樣把這些東西合在一起
以便當我們快速查看地點時
我們實際上會看到視圖返回？
爲了實現那個目的我們有另一個新的協議
該協議叫做 CustomPlaygroundQuickLookable
CustomPlaygroundQuickLookable所做的就是
如果您執行了要求的方法
它將讓您 返回另一個type
作爲您的type或其他type的Quick Look 顯示的內容
因此那可能是一個貝塞爾曲線或某種顏色
但是對於我們的情況我們希望返回視圖
因此我將要繼續往下進行的就是爲我們的地點創建一個擴展
並且表明
它將執行CustomPlaygroundQuickLookable
那麼我們這裏又有一個錯誤因爲那我們實際上還未遵從那個協議
因此我們將通過執行
CustomPlaygroundQuickLook添加對它的遵從
那麼我們將向那個這個方法內返回
一個反映該視圖的PlaygroundQuickLook
現在 因爲我們已經設置了一個擴展我們可以讀取我們的地名
因此 我們可以往下進行並將地名 賦給那裏的初始值
那麼現在 當我們快速查看地點時我們就該看到了
妙極了我們有了Moscone Center
一切都開始看上起更像個地名了
但是 我們這裏還有點代碼它似乎
與我們的Playground其它部分格格不入
我們想把這些內容移開因爲實際上沒有其他人關注它
它無助於展示我們所做的工作
那麼對這些內容我們將繼續往下進行...
首先我們將刪除這裏的地點視圖因爲我們並不需要它
並且我們將截取這裏的這個
我們所聲明的視圖
並將它直接放在我們的地點擴展裏面
清除這裏的一些空白
那麼當Playground重新執行時您應該看到...
妙極了真是我們以前看到的樣子
但是現在 那個視圖代碼正好全部嵌入在我們的擴展內
因此它是精緻而乾淨的
這對我們的城市意味着什麼呢？
如果我們遵循這樣一種模式希望看看當前我們城市裏面有些什麼
那麼我們會希望看看我們的城市裏面有些什麼地方
那麼這將是默認發生的
所以 如果我們點擊Moscone Center的快速查看
我們會發現那裏有了個“Place”
而且我們可以看到Moscone Center那裏的藍點
但是... 隨着我們添加更多地點
它不會對我們有太大幫助它只是會被列入清單而已
我們希望對這些東西的相對位置有一個直觀的印象
因此我們開始着手解決如果我們在Moscone Center
我們多半不會直接去Golden Gate Bridge
我們首先多半會去類似Coit Tower的地方
爲此我們創建了另一個擴展這次是 City 的擴展
它將仍然是CustomPlaygroundQuickLookable
我們將在這裏創建我已經有了一些現成的代碼
我們將快速地查看一下它
那麼它是一個City的擴展
我以同樣的方式執行了CustomPlaygroundQuickLookable
我們已經通過執行這裏的CustomPlaygroundQuickLook方法而遵從了協議
然後在內部我將創建一個視圖
根據它們的經緯度算出這些東西
應該在視圖中的位置
那麼現在 當我們快速查看City時我們應該看到...
妙極了！Moscone Center在那裏的一個空地圖的東邊
但是我們將創建一張圖片
表明我們我們將在這裏實際看到的東西
那麼既然我們已經有了這個
我們將添加更多幾個地點
但是在那之前
我想讓這裏的地圖視圖一直保持打開狀態 或至少可見
當我檢查代碼的時候我將打開並關閉它多次
爲此我們有這個很酷的小東西叫做“內嵌結果”
那麼 緊靠這個快速查看按鈕如果我點擊Show Result
那將會把“快速查看”直接放在生成它的這行代碼下面
那麼我可以繼續在Playground的工作並查看它的持續運行
以及瞭解實際發生的事情
而很酷的事情是目前它還很小
因此我們可以選定並向外拖拽它就像我們拖拽任何其他窗口一樣
隨意調整到希望的大小
我們可以開始處理我們在Playground上的其他內容
添加地點
我們會看到它們出現在我們的地圖上
那麼我們希望看到什麼呢？
我聽說過Golden Gate Bridge是很酷而且很出名的
因此我將往下進行並嘗試一下
我們將把它添加到我們想看的地點
而當Playground重新執行的時候
我們將看到它基於Golden Gate Bridge的實際位置
我們將把它放在西北部
如果我對舊金山地理的瞭解是正確的
我想那就沒錯
我們還想看些什麼？Sutro Tower 怎麼樣？
它有點像是是來自於電影《世界大戰》裏面的東西
我將把它加入
並放在地點中
我將加入 Sutro Tower
Playground 重新執行
然後我們就會看到下方也即南邊的Sutro Tower
那麼我們已經開始真正瞭解我們的地點是如何創建的
而隨着我們添加越來越多這些地點根據它們所在的位置 我們將看出
如何遊覽這些地點
現在我將繼續往下進行並切換到前面的幻燈片
那麼您可能已經注意到了
我們的Playground到末尾時變得有點冗長
我們有些視圖代碼和一些擴展
而且有很多並沒有幫助我們描述問題的內容
它還不是那麼完美
那麼我們應該做的就是
直接把大量代碼從Playground主體中取出
但仍然把它留在附近以便使用
那麼爲了向您展示我們如何操作的我想邀請我的同事 康納 上臺
謝謝你 山姆！
大家好！
我叫 康納是 Xcode 團隊的一名工程師
今天我將和大家談談如何讓您的Playgrounds更加強大
並更專注於手頭的問題
爲了達到這個目的讓我們直接進入一個演示程序
在裏面我將查看山姆 剛纔開始的Playground
併爲找到穿越舊金山的最佳路徑添加一些支持
同時也讓目標更加明確
現在讓我們來看看演示吧
好了 那麼我們已經在Xcode中了
如果您注意到的話 我們的Playground與 山姆 剛纔向您展示的基本相同
我們開始先爲舊金山創建一個city
我們創建幾個地點然後將它們添加到city
用這個內嵌結果結束以表明您到目前創建了哪些內容
不過如果您注意到的話有一個重大區別
那就是整個Playground現在正好佔據一個屏幕
然而 在地點構造體內我仍在使用我的自定義 city
而儘管Swift編譯器很棒
它也不能憑空創建出構造體
因此 我們將轉而採用我們在
Xcode 6.3中添加的一個特性叫做“輔助資源”
“輔助資源”是額外的Swift源文件
它們被嵌入在您的Playground內部
而且被預先編譯到一個單獨的Swift模塊中
因爲它們不需要具備互動性
它們可以比Playground本身有更好的表現
此外 由於它們位於一個單獨模塊內
您可以利用讀取控制
來確保只顯示那些您希望Playground可見的輔助資源
因此 您可以在輔助資源中隱藏大量的內部執行細節
爲了找到它們 我們將繼續進行並打開瀏覽器
在您的PC中我們在頂部有Playground
然後 在Playground內我們有sources文件夾
在sources文件夾內我們有一批Swift 源文件
我可以打開一個這裏我們有city.swift
而它大體上是與 山姆剛纔處理的構造體是一樣的
只是有些小的修改
首先 我將把它標爲 public
因爲我們想讓city能夠被主Playground自身使用
我也添加了對城市的旅行時間的支持
以便於我們能夠實際追蹤遊覽城市的每個地點所需的時間
如果我們看一下place.swift我們發現這裏有同樣的基本的東西
因此 與我們以前的同樣的構造體
只是被修改而成爲public
並有其他一些修改以便與更新後的city構造體協同工作
有幾個其他的輔助資源文件我不會去探討它們
一個與屬性列表的序列化有關
另一個是我從我做過的其他項目收集來的各種實用工具
它將在我執行我們的算法的時候幫我的忙
現在讓我們回到主Playground
那麼這裏我們看到我們有了一個城市的起點
我們在開始建立某些東西
但是我想參觀更多地點而不只是這兩個
而我們也希望有在不同地點之間的旅行時間
我可以用代碼形式全部添加它們但是那還不夠好
因爲我們在Playground上方將會有一堆代碼
它們對我們將要展示的東西並無益處
因此 我將利用Playgrounds中的另一個特性
叫做“嵌入式資源”
“嵌入式資源”是被複制到 Playground內的文件
Playground本身在運行的時候可以使用這些文件
作爲主 bundle 的資源
而且它們也駐留在瀏覽器中在這個小Resources文件夾內
我將要做的就是把一個plist
從定義舊金山這個城市的Finder中拖進來
因此我將繼續並執行這個操作我有了SanFrancisco.plist
我可以把它拖到這裏來
它就會在Playground文件內被複制
這意味着當你決定與其他某人共享你的Playground時
我們無須擔心任何外部文件引用的中斷
它全部都在那裏面因此你可將其作爲獨立單元發送
讓我們看一下這個plist的樣子
首先 我們有一系列地點
每個地點將一組經緯度映射到一個地名
然後讓我們在這個文件裏向下滾動一點
在這裏我們會看到有一系列的旅行時間
而旅行時間則將兩個地點映射
到兩個地點之間旅行所需的時間和分鐘數
這些時間是使用iOS 9內的trans directions創建的
不過即使我將這些東西稱作目的地和出發地
我將把它進行一些簡化
並且假定 從A點到B點所需的時間 與從B點到A點所需的時間相同
因此這實際上是雙向旅行時間
現在切換回主Playground 
這裏並不需要全部代碼
我將選取其中的大部分將其刪除
並替換爲一個調用加載我的城市San Francisco
從調用這個城市初始值開始
調用contentsOfPropertyListAtURL
它將做的不過就是查看主bundle
以便爲特定的資源獲取URL這個資源即San Francisco plist
我們知道我們剛把它加入了Playground
因此我將把它強制拆包爲可選型
以便把它傳遞給我的初始值
此外 這個初始值也經過更新以便利用Swift 2的錯誤處理特性
因此我將向編譯器表明
我知道我可以通過Try這個關鍵字並在末尾加上一個感嘆號
拋出一個錯誤
因爲我不想 增加大量的無助於
我將在Playground中所展示內容的錯誤處理代碼
此外 我知道這個plist是正確的
因此我這樣加載它是沒有問題的
我們可以通過內嵌形式顯示它
讓我們把它放大一些
那麼這裏就是我們的城市
我們有Moscone CenterCoit Tower 漁夫碼頭
Painted Ladies, SutroTower金門公園 金門大橋
以及雖然不在我們的地圖上但仍然在那裏的
舊金山國際機場
而且你可以看到連通機場的所有路線
很棒 現在我們有了一個我們可以使用的城市
但是現在在我看來我想把這個Quick Look弄得更好一點
通過爲我即將參觀的所有地點增加一些圖標
碰巧的是在我的桌面電腦內
我有這個圖片文件夾
而如果我把它打開你會看到這裏我有一組用於每個地點的圖標
那麼我將選取那些圖標
並也也把它們拖拽到Resources文件夾內
正像plist一樣 它們將被複制到那裏並提供給我的Playground使用
我還確實需要更新我的Quick Look以便利用這些圖片
因此我將繼續並在輔助編輯器中更新 place.swift 文件
通過點擊它即可
然後我會發現這個位置視圖
我們要利用這些圖片更新作爲初始值的藍色圓點
那麼我可以選取所有那些代碼
並更新我們的地點視圖
我們將從獲取與之關聯的圖片開始
創建一個圖片視圖然後設置幾個屬性 然後將其返回
現在當我保存這個文件時
Xcode 將注意到輔助資源已發生變化
並將自動重新編譯它們的Swift 模塊
一旦編譯結束我們將重新運行Playground 
Quick Look將會自動更新
我所要做的不過是進行編輯並存儲到磁盤
棒極了Quick Look 看起來好多了
讓我們切換回標準編輯器
並開始研究我們的算法
我仍將隱藏瀏覽器
因爲我不需要它而且我想要額外的空間
因此我們將執行暴力算法來找到我們通往舊金山之路
而爲了開始這一過程
我們需要獲取通往舊金山的所有路線
因此我們將從這個開始而我們所做的就是
通過我們在city結構體上的city方法調用所有路線
告訴它我們希望從Moscone Center開始
並且我們希望在機場結束
而如果你看一下右邊的側邊欄我們發現我們有720條路線
然後我將執行算法
這裏我們將從幾個變量開始它們將存放我們的結果
一個用於最佳旅行時間一個用於最佳路線
然後我們將迭代所有穿城路線
爲每個路線獲取旅行時間
然後我們將把它與我們的最佳旅行時間相比較
如果必要的話更新我們的結果變量
最後 我們會在這裏看到穿過城市的最佳旅行時間
那麼我們將把它內嵌顯示
並且我們將看到如果我們從不停留並設法在所有交通工具之間轉車
在這些地點之間需要 235 分鐘
我們也可以爲線路添加內嵌顯示因此我們可以看到
我們將從Moscone Center出發正如我們所期待那樣
然後我們將直接前往Painted Ladies和Sutro Tower
然後到金門公園和金門大橋
然後我們將前往漁夫碼頭以及 Coit Tower
最後抵達舊金山國際機場搭乘我們的班機
那麼很棒我們已經有了我需要的
遊覽景點的全部信息
那麼現在讓我們切換回幻燈片來解決那個問題
剛纔我爲大家展示了如何使用Playgrounds中的
輔助資源和嵌入式資源特性
以便在讓它高度專注於您希望實現的任務的同時
讓您的Playground更加強大
我這裏有些非常有趣的東西
我想在會議結束回家時與人分享
但是它還不夠精煉還不足以示人
然而 我們已經在Xcode 7中添加了很多不錯的特性
這讓您能夠比以往更好地分享您的 Playground
那麼現在我想邀請我的同事 馬特 上臺
向您展示這些特性謝謝大家！
非常感謝 康納！嗨 大家好！
我叫 馬特 也是Xcode團隊的一名工程師
我覺得 康納 和 山姆已經做得很棒了
他們搭建了一個令人驚歎的 Playground
向人們展示如何以最佳方式遊覽舊金山
但它還未完成不能與世界分享
因此我將爲您提供幾個建議和竅門
讓您的 Playground更加豐富 也更吸引人
以便讓您把它放在互聯網上人們也會很喜歡它
那麼您在這裏可以看到我們有了Playground
康納 剛剛完成了在它上面的工作
而且 康納 也寫了一個非常簡單的算法
它遍歷舊金山這座城市中的所有可能路線
並將其互相比較
而這對於你們大家是很不錯的因爲我們這裏已經由 康納
在執行算法的時候講解了路線的每一步
然而 當我們將它與全世界分享的時候
遺憾的是並不是每個人都在這裏參加 WWDC
因此我們要添加一點信息一點上下文
以便今後查看此Playground的人
會明白我們到底是怎樣達到這一步的
因此我們在Xcode 6.3中推出了一個新特性
叫做Playground標記註釋
而那讓您對您的Playground
添加富文本格式的漂亮的顯示
以便人們能夠更好地理解
您究竟是如何得到你想要的 Playground 的
那麼再給我一點空間我將先把QuickLook放在一邊
而且我將把Playground頂部的註釋
用一些關於遊覽舊金山的信息替換
現在您可以看到這看上去非常像個註釋
您可以把它放在您的源文件的其他任何地方
但是 富文本標記註釋和其他註釋的最大區別是冒號
我們在註釋中的第一個星號後面有個冒號
而且我們也可以對單行註釋這樣做
也在這裏添加一個冒號
而當我來到上邊的編輯器菜單
並選擇Show Rendered Markup
您會發現它重新渲染
而且現在我們有了這些好看而豐富的文本塊
我們可以用它們來解釋我們的Playground中正在發生什麼
我們實際上也可以重新安排它們的格式
因此 如果我切換回Raw Markup
我可以使用一個井字符號
表明我們希望有一個標題顯示“Exploring San Francisco”
而且我可以使用星號比如在“most efficient”前後
來表明我們希望這些內容是斜體的
因此如果我再次執行它
您會看到我們有了個不錯的大號字體的粗體標題
精確地解釋我們將要討論的內容
所以那是一個不錯的開端
我也想給它加上更多一點註釋
介紹這個Playground裏面正在發生的事情
例如 所有的路線
“所有的穿城路線”有點含糊而且有點神祕
因此我將添加一點
關於這些路線如何計算出來的信息
而算法本身很可能也使用了一些解釋
因此我們將把算法記錄下來
而如果我再次切換回到已被渲染的標記
您會看到現在我們開始獲得某種看起來更像是一本書的東西
某種用戶可以坐下來查看 通讀並理解的東西
我們甚至有一個不錯的以粗體字顯示的列表
我們通過在每行開頭插入一個星號來實現這個效果
因此那是非常棒的
但是它還不夠豐富
我們想把它讓它更進一步因此爲了實現目標
我們將採用我們很久以前在Playgrounds上推出的一個特性
它現在在Xcode 7上的效果更好那就是“實時視圖”
因此我已經鬥膽寫了一個實時視圖
我已經把它加入了附屬資源
而我們先從把它與這個Playground一道展示開始
以視覺化地呈現這個算法的工作機制
那麼使用實時視圖的第一步是您需要導入XCPlayground
它是一個有很多確實很棒的功能的模塊
它們讓您用 Playground做一些非常酷的事情
現在也歡迎您在輔助資源中做這件事
比如創建一個 helper 方法用它顯示您的實時視圖
您不必在主Playground中做那件事
但是我將在這裏做這件事只是爲了更清楚地表明它的工作原理
一旦我們獲取了我們的舊金山這個城市我們就準備好顯示它
因此我將實例化一個視圖控制器
有了我們的新的城市視圖控制器
我將把舊金山這個城市傳遞進來
然後我將使用XCPShowView函數
將城市名賦值給它
並傳入我們的視圖控制器的視圖
那麼如果我現在切換回去
並在Playground重新執行後顯示我們的輔助編輯器
我們將看到一個實時視圖看上起正像是舊金山市
您可以看出我們使用了
我們已添加更多內容的更豐富的 Quick Looks
而且我們把它們設置在看起來更真實的背景上面
以便避免人們太分不清方向
那麼這就是第一步但是我們也希望展示
算法本身是如何工作的
而爲了達到這個目的我們將添加一些代碼
當我們預演我們的算法時它會更新實時視圖
因此這裏我們有一個循環它對所有線路進行迭代
而我將用我的視圖控制器上的方法替換它
這個方法叫做VisualizePathIteration
而我寫它的時候用了尾隨閉包
以便能夠實際更新它因此它看起來
幾乎與我們最初的循環代碼完全類似
而且我還將在這裏添加一行
告訴視圖代碼控制器：
一旦我們發現更好的路線
我們希望顯示那條路線尤其是在我們的地圖上
因此它會從頭到尾再執行一次
而你也會因此看到
當我們在舊金山全城遍歷所有路線我們將以視覺化形式展示它們
而這是很不錯的因爲現在正在閱讀這個程序的人們
可以實際看到我們是如何得到答案如何找到最佳穿城路線的
不過您可能注意到了某些東西
那就是它將檢查大量的路線
實際上它將檢查 720 條路線正如 康納 早些時候指出
而那是相當多了
實際上 實時視圖默認運行30秒
您可以使用Playground右下角的控制條進行更改
而那甚至不足以遍歷舊金山市的所有穿城路線
現在我們已經將其人工減慢了一些
因此 當我們在實時視圖上迭代它們時您可以看到那些路線
但是我覺得的當人們看到路線時他們會說...
哦 一定有條更好的路線
實際上確實有
而且我們也樂於從一開始就把它展示給我們的用戶們
因此我們將使用另一種算法
它是“最近鄰近似算法”
而它將做的就是
假定我們從 Moscone 出發
我們查看我們想參觀的所有地點
然後我們選擇最近的一個並去往那裏
然後從那個地點開始
我們將選擇下一個最近的地點並將從那裏繼續
而如果我願意
我可以在這個Playground文件的正下方執行那一操作
但是那將開始變得有點難以理解而且不是那麼專注於目標了
Playgrounds的妙處之一在於
它們是由目標非常非常明確的內容片段組成的
因此我們希望能夠維持這一特點
而爲了達到這個目的我們在Xcode 7中有一個全新的特性
叫做 Pages
它讓您在單一Playground文件中有多頁內容
因此爲了達到那一目的我們將打開瀏覽器
在左下角我們將點擊加號按鈕
並選擇 New Page
而那將在同樣的Playground中創建一個全新的頁面
我將把這個頁面叫做Nearest Neighbor
這是根據我們即將使用的算法而命名的
然後我們將把我們最初的 Playground
重命名爲Getting Around
此外 Pages 的很酷的一點是
就像是輔助資源
以及您可以在頂層水平加入Playground中資源一樣
你也可以在單頁的基礎上那麼做
你可以看到我可以展開這些Playground頁面中的任何一個
而且我們可以嵌入它們自己的來源
例如 任何名稱相同的資源
都將優先於更大的Playground 中的那些資源
所以如果您希望在每個頁面上有不同的印記
或者在您將講授的每個頁面上的概念上
有特定的圖片您可以非常容易地做到
那麼現在我將切換到最近鄰頁面
切換回 Raw Markup 頁面
我已經寫好了算法因此我將徑直把它粘貼進來
那麼我們這裏是一個帶有最近鄰近似算法的Playground
而且您可以看出當它運行的時候
它會檢查少得多的穿城路線
不過 這不是一個最優算法
原因是它不一定會找到我們的最佳穿城路線
但是您可以看出它已經完成了非常酷
因此這是一個不錯的方法表明對此問題可能不止一個答案
而如果我們執行它
的話我們也可以表明
我們從哪裏獲得的這條路線
我們實際上是在維基百科上發現的關於這個算法的信息
遺憾的是 我縮進得有點太遠了
我們可以直接在Playground中嵌入一個鏈接
它將把我們帶到解釋此算法如何工作的頁面
我們也可以在單一Playground中鏈接不同頁面
並回到我們早些時候發現的最優路線
而實際上 當我們查看路線的數量
我們所走的穿過城市的不同路線
以及該算法的執行所花費的時間時
我們檢查了這頁上的720條路線
並發現了一條僅比另一個頁面上快21分鐘的路線
那麼這給了人們一個參考框架他們會說：
或許有其他方法做這件事
而他們可以用Playground自己試驗
這是非常棒的
而那將在Playgrounds中
添加標記 頁面以及實時視圖等部分
那麼我們在Xcode 7的Playgrounds中有了大量的真正令人驚歎的新特性
我們向您展示了定製化的Quick Looks
它將讓您選擇自定義的數據類型
並讓它們與內置類型一樣生靈活現
我們也有內嵌結果
它們就在Playground內部
因此您既可以讓一些結果直接顯示在產生它們的各行代碼間
也可以在與他人 分享您的 Playground 時讓另一些結果隨Playground顯示 
我們還有輔助資源這一特性
您可以把附屬於您的Playground的但並不像主Playground內的代碼
那樣有啓發性的代碼 放在一邊
以便您的用戶只看到你願意他們看到的API 和實際功能
我們還有“嵌入式資源”特性藉此您可以嵌入圖片
並讓東西更活靈活現更吸引人
我們還有全新的標記註釋特性
當您不能與用戶在一起時它們真的是一個不錯的
指導您的用戶通讀Playground的方式
經過改進的比以往任何時候都好的實時視圖
以及那些 讓您在單一Playground中覆蓋多個話題的頁面
同時不偏離任何一個主題的重心這是確確實實非常酷的
那麼那就是我們在Xcode 7的Playgrounds中的內容
如想了解更多信息您可以訪問我們的網站
我們那裏有文稿和開發者論壇
您也可以和斯特凡·樂塞我們的開發者工具宣傳官交談
我們還有幾個相關的講座環節將要進行
包括《Swift在實踐中》它將是在明天下午舉行
以及《在Swift中 如何使用數值類型來打造更好的app》
此外還有本週的《Xcode中的新特性》以及《Swift中的新特性》
等環節都 將是很棒的
非常感謝大家！請欣賞 WWDC 的剩餘內容！