00:00:20.387 --> 00:00:24.091 
WatchKit in Depth
第一部分

00:00:31.365 --> 00:00:32.232 
諸位早上好！

00:00:32.299 --> 00:00:34.835 
歡迎參加WatchKit in Depth
第一部分的講座

00:00:34.902 --> 00:00:37.604 
講座分爲兩個環節
這是第一個環節

00:00:37.671 --> 00:00:40.007 
進一步探討WatchKit中的變化

00:00:40.374 --> 00:00:41.341 
我叫安德魯·普拉茲

00:00:41.408 --> 00:00:45.279 
將與福里斯特·希爾
一道講述今天的話題

00:00:45.579 --> 00:00:47.114 
希望您會感興趣

00:00:49.116 --> 00:00:50.784 
我將講述三個部分

00:00:51.051 --> 00:00:55.923 
即架構 手錶 app內部手錶擴展的
基本佈局工作原理

00:00:56.590 --> 00:00:58.492 
我會講述資源和數據的存放地點

00:00:58.559 --> 00:01:02.296 
因爲它是由兩個部分構成的系統
所以開始時可能會有點難以理解

00:01:02.963 --> 00:01:05.331 
對於那些已經從事過
Watch OS 1開發的朋友

00:01:05.498 --> 00:01:07.434 
WatchOS 1是WatchKit的一個擴展
是一個手錶app

00:01:07.501 --> 00:01:11.305 
我將會講到遷移
有哪些變化以及有哪些相同之處

00:01:11.772 --> 00:01:13.106 
然後福里斯特將繼續談一下

00:01:13.173 --> 00:01:17.611 
WatchKit中的一些新的API
以及新的類 

00:01:17.978 --> 00:01:19.580 
因此您的手錶 app包含三個部分

00:01:19.947 --> 00:01:21.582 
它有一個iOS應用

00:01:22.082 --> 00:01:25.185 
你將會在手機上安裝它

00:01:25.485 --> 00:01:27.788 
此外你還將提供一個
WatchKit擴展

00:01:27.855 --> 00:01:28.755 
這是你自己寫的代碼

00:01:29.289 --> 00:01:31.325 
然後是一個手錶OS應用

00:01:31.391 --> 00:01:34.127 
它包含資源和界面描述

00:01:36.597 --> 00:01:39.066 
您有了手機
下載了您的app

00:01:40.200 --> 00:01:44.338 
而我們已完成的工作就是
增加一批新的數據

00:01:44.404 --> 00:01:47.741 
一批附帶並與其一道安裝的文件

00:01:47.808 --> 00:01:48.976 
而那就是手錶app

00:01:49.042 --> 00:01:52.246 
它包含您對界面的描述
或許也有一些資源

00:01:52.479 --> 00:01:54.147 
然後就是您的WatchKit擴展

00:01:54.214 --> 00:01:57.751 
它包含代碼和額外的資源

00:01:58.752 --> 00:02:00.153 
因此當您把它與您的手錶匹配時

00:02:00.821 --> 00:02:04.191 
我們將所有的那些信息複製過去
它就會出現在主屏幕上

00:02:04.658 --> 00:02:05.759 
作爲一個完整的應用出現

00:02:08.895 --> 00:02:12.900 
當然手機上仍然留有備份
以備以後重新安裝的不時之需

00:02:14.334 --> 00:02:18.172 
因此我會談到兩個你將要提供的部分

00:02:18.238 --> 00:02:21.842 
一個是界面
另一個是實際代碼以及擴展

00:02:22.910 --> 00:02:26.880 
當您創建了一個
新的WatchKit App

00:02:27.281 --> 00:02:29.349 
您可以看到實際上有兩個獨立的目標

00:02:29.750 --> 00:02:32.953 
兩個獨立的組件
帶有interface Storyboard的app

00:02:33.020 --> 00:02:35.122 
和您的代碼
這裏的代碼即Swift

00:02:35.189 --> 00:02:40.827 
而你有多達四個不同的
可以向其添加代碼的東西

00:02:42.629 --> 00:02:44.831 
因此對於storyboard
這是它的界面部分

00:02:45.098 --> 00:02:48.101 
您可以在IB內編輯它
正如編輯一個iOS應用一樣

00:02:49.002 --> 00:02:55.042 
而我們提供相當豐富的
一組界面元素 標籤 圖像等等

00:02:55.108 --> 00:02:59.112 
這就是watchOS 1的全部內容
而且我們在watchOS 2裏面

00:02:59.179 --> 00:03:02.816 
添加了幾個新特性如Picker視圖
這將給您一個豐富的界面以及影片視圖

00:03:04.685 --> 00:03:11.124 
因此 例如這裏有三個帶有
你能夠看到所有控制按鈕的標準控件

00:03:11.191 --> 00:03:13.594 
它們是在
interface builder內創建的

00:03:14.261 --> 00:03:16.663 
我們也有針對特定功能的自定義界面

00:03:17.030 --> 00:03:19.967 
一個是Glances
它有更爲具體的佈局

00:03:20.033 --> 00:03:22.402 
另兩個是用於通知的界面

00:03:22.469 --> 00:03:24.738 
一個用於靜態通知
另一個用於傳送更爲動態的

00:03:24.805 --> 00:03:27.474 
您在運行時提供的信息

00:03:29.376 --> 00:03:32.379 
因此正如我剛纔所言
您的擴展有四個功能

00:03:33.413 --> 00:03:34.448 
有個應用功能

00:03:34.515 --> 00:03:37.584 
當您的應用從主屏幕啓動的時候
我們調用您的擴展

00:03:37.851 --> 00:03:40.487 
它也被用於從時鐘出現的
單頁glance

00:03:40.854 --> 00:03:44.091 
以及在您接收到通知的時候進行顯示

00:03:44.391 --> 00:03:46.393 
而且現在
也用於complications

00:03:47.361 --> 00:03:50.531 
對於其中的每一個都有個相關聯的控件

00:03:50.597 --> 00:03:54.001 
對於Glances以及常規應用
有WK Interface Controller

00:03:54.067 --> 00:03:55.369 
有一個專門的次級類

00:03:55.435 --> 00:03:59.039 
叫做
WK User Notification Interface Controller

00:03:59.106 --> 00:04:00.541 
對於通知 您應該使用這個次級類

00:04:00.974 --> 00:04:02.943 
還有一個新的數據源對象

00:04:03.377 --> 00:04:05.979 
即WK Complication Data Source

00:04:06.046 --> 00:04:08.448 
關於complications
我目前就講這麼多

00:04:08.515 --> 00:04:12.953 
今天稍後還有一個講座環節
對此進行更詳細探討

00:04:15.522 --> 00:04:20.459 
因此您的WK Interface Controller
是與您的界面的主要連接工具

00:04:21.161 --> 00:04:25.399 
它所做的主要是自動創建界面屬性

00:04:25.465 --> 00:04:31.104 
因此你會在界面設計中
對一個界面元素貼上標籤

00:04:31.171 --> 00:04:32.873 
並聲稱 類似這是我的標籤

00:04:33.140 --> 00:04:37.811 
然後我們在控件上創建一個關聯的對象
並自動爲您將其連接好

00:04:39.746 --> 00:04:44.451 
控件也支持菜單處理
您可以自定義菜單或者使用靜態菜單

00:04:44.985 --> 00:04:48.589 
我們提供對控件的導航
推送等等或者調度

00:04:49.289 --> 00:04:51.091 
和模態顯示

00:04:51.892 --> 00:04:55.095 
以及警告和action sheet

00:04:56.096 --> 00:05:00.000 
另外一個我們提供的內容是
幾個系統UI表單

00:05:00.067 --> 00:05:03.871 
文本輸入 視頻回放 音頻錄製

00:05:07.074 --> 00:05:10.644 
那麼 比如說
這裏有個非常簡單的界面控件類

00:05:10.711 --> 00:05:14.448 
它有一個插座變量app圖標
而我們在IB中加載它

00:05:14.982 --> 00:05:19.653 
當我們運行應用時 我們看到它提取了
圖標並將其顯示在屏幕上

00:05:21.655 --> 00:05:25.459 
那麼我想談一下各種東西的位置

00:05:25.526 --> 00:05:28.161 
你的資源存放在哪裏
你從哪裏提取數據

00:05:29.963 --> 00:05:33.834 
因爲這個手錶app分爲兩個部分

00:05:33.901 --> 00:05:36.069 
包括手錶app本身
以及WatchKit擴展

00:05:36.470 --> 00:05:38.272 
有兩個地方存放數據

00:05:38.338 --> 00:05:41.208 
即WatchApp bundle 
和WatchKit擴展bundle

00:05:41.275 --> 00:05:44.178 
而你必須確保記住它存放的位置

00:05:44.478 --> 00:05:46.747 
比如這裏我創建了另一個對象

00:05:46.813 --> 00:05:48.649 
和以前一樣它也有一個
interface storyboard

00:05:48.715 --> 00:05:50.751 
和一個名爲
application image的圖像文件

00:05:50.817 --> 00:05:53.053 
以及本地化的字符串文件

00:05:53.420 --> 00:05:55.589 
而擴展本身也包含同樣的東西

00:05:55.656 --> 00:05:58.792 
它有另一個png文件
和一個可本地化的字符串

00:06:00.794 --> 00:06:04.364 
那現在如果我們進行個容易理解的操作
即創建兩個插座變量

00:06:04.898 --> 00:06:08.936 
並使用IB插座變量將其連接起來
表明這些是屬性

00:06:09.603 --> 00:06:10.771 
並調用組圖標

00:06:10.838 --> 00:06:12.339 
哦 我們沒有擴展圖標

00:06:13.373 --> 00:06:19.079 
原因是當你調用的組圖標
是在WK Interface Image上命名的時候

00:06:19.479 --> 00:06:21.448 
它並不在應用bundle
內進行搜索

00:06:21.715 --> 00:06:24.284 
但是擴展圖標並不
存放在應用的bundle內

00:06:24.985 --> 00:06:30.057 
因此你要做的是直接從正在那個特定的
bundle中運行的代碼內提取它

00:06:30.123 --> 00:06:34.361 
因此在擴展代碼內
你調用UI圖標的名稱

00:06:34.728 --> 00:06:36.330 
而這將在本地提取圖標

00:06:36.396 --> 00:06:38.799 
因爲它知道如何在它自己的
bundle內部進行搜索

00:06:38.866 --> 00:06:40.234 
然後你在系統內執行同樣操作

00:06:40.300 --> 00:06:43.203 
你調用組圖標而不是已被命名的組圖標

00:06:43.670 --> 00:06:47.207 
那將傳遞圖標並讓兩個圖標
都出現在您的應用內

00:06:50.310 --> 00:06:51.712 
那麼現在你希望存儲一些數據

00:06:51.778 --> 00:06:55.749 
您不會只希望提取一些靜態圖片
你擁有一個極其動態的應用

00:06:56.316 --> 00:06:59.586 
因此有兩個你感興趣的文件夾

00:07:00.087 --> 00:07:01.455 
一個是文檔文件夾

00:07:01.788 --> 00:07:04.424 
這是你存儲更爲持久的信息的地方

00:07:05.158 --> 00:07:08.662 
它是不可刪除的
就是說它在重啓之間是一直運行的

00:07:09.162 --> 00:07:11.865 
但是需要注意的一點是
它是不可恢復的

00:07:11.932 --> 00:07:16.670 
因此你必須檢查手錶是否被擦除
否則你就要安裝新的手錶

00:07:17.905 --> 00:07:19.173 
還有一個緩存文件夾

00:07:19.573 --> 00:07:23.610 
這個是可以刪除的
因此如果系統認爲需要更多空間

00:07:23.677 --> 00:07:26.480 
存儲音樂 圖片或其他 app

00:07:26.547 --> 00:07:27.881 
它將刪除這些圖片

00:07:27.948 --> 00:07:30.951 
因此你可以認爲那些圖片可能隨時消失

00:07:33.020 --> 00:07:36.089 
這裏有一個例子
我們快速地看一下在哪裏找到它

00:07:37.224 --> 00:07:40.294 
在這個例子中 主要調用的
是document directory類

00:07:40.360 --> 00:07:42.863 
目錄URL的文件管理器

00:07:42.930 --> 00:07:46.466 
它將請求第一個
而那正是需要的 URL

00:07:46.800 --> 00:07:52.706 
因此我們創建一個包含我們的文件名的
URL並向其寫入一些數據

00:07:56.043 --> 00:07:58.478 
現在媒體出現了另一個有趣的問題

00:07:59.179 --> 00:08:02.249 
由於應用負責播放媒體

00:08:02.649 --> 00:08:06.220 
它也負責將音頻錄製在某個地方

00:08:06.286 --> 00:08:11.391 
因此當你的擴展請求播放一個影片
或播放音頻 或錄製音頻的時候

00:08:11.758 --> 00:08:13.126 
我們將其傳送給應用

00:08:14.361 --> 00:08:16.997 
另一方面擴展負責

00:08:17.064 --> 00:08:21.568 
從互聯網上下載或用其他操作生成媒體

00:08:21.635 --> 00:08:25.572 
它也負責獲取你可能已經設置好的
錄製下來的音頻文件

00:08:26.039 --> 00:08:28.742 
並將它們傳送到你的服務器上

00:08:30.277 --> 00:08:34.181 
那麼你需要做的就是
設置所謂的共享容器

00:08:34.914 --> 00:08:41.822 
而那主要是爲了讓兩個過程
即應用和擴展一個能夠共同訪問的地方

00:08:42.322 --> 00:08:43.590 
因爲出於安全因素

00:08:43.657 --> 00:08:49.329 
通常你不能從一個過程
進入另一個存儲區域

00:08:50.697 --> 00:08:52.032 
而你啓用了這種Xcode

00:08:52.299 --> 00:08:55.536 
你使用了所謂的‘app羣組’

00:08:55.602 --> 00:08:58.071 
將其用於擴展和你
賦予了獨特的識別符的應用

00:08:58.672 --> 00:09:00.541 
而那就是你的應用羣組

00:09:03.143 --> 00:09:07.548 
那麼這裏你需要真正擔心的唯一事情
仍然是有一個函數

00:09:08.015 --> 00:09:09.783 
即文件管理器

00:09:09.850 --> 00:09:13.754 
你可以爲安全應用羣組識別符
請求容器URL

00:09:13.820 --> 00:09:15.756 
並將其通過你創建的羣組
識別符進行傳遞

00:09:16.190 --> 00:09:19.193 
而那將把你的URL
賦予到一共享的存儲區域

00:09:19.993 --> 00:09:24.431 
因此從那裏你可以存儲app

00:09:24.498 --> 00:09:28.535 
能夠從擴展讀取或者提取的文件

00:09:28.602 --> 00:09:33.640 
這裏我們有一個例子是當前的音頻錄製
控件把URL從共享容器取出

00:09:33.707 --> 00:09:35.542 
那麼它將把音頻錄製到那個文件內

00:09:37.744 --> 00:09:41.014 
因此現在我希望談一下
如何從手錶提取數據

00:09:42.182 --> 00:09:43.450 
有兩種方法可以實現

00:09:43.517 --> 00:09:46.787 
一種是NSURL Session
它是在Foundation框架內的

00:09:46.854 --> 00:09:49.756 
另一種是通過一個新的
Watch Connectivity框架

00:09:50.290 --> 00:09:54.695 
因此NSURL Session是你
從互聯網上獲取資源的方法之一

00:09:54.761 --> 00:09:58.832 
如果你有一個聊天app或類似的東西
你會希望與您的服務器對話

00:10:00.501 --> 00:10:03.904 
它讓你直接通過HTTP和HTTPS
訪問互聯網

00:10:04.204 --> 00:10:08.609 
而有多種配置方式

00:10:09.643 --> 00:10:11.912 
而且它支持以後臺方式下載

00:10:11.979 --> 00:10:14.147 
原因是您的擴展經常不處於運行狀態

00:10:14.214 --> 00:10:17.284 
您的手錶屏幕是關閉的
您的擴展是睡眠狀態的

00:10:17.551 --> 00:10:19.319 
您的擴展甚至不運行的時候

00:10:19.386 --> 00:10:20.921 
而這都是下載數據所需要的

00:10:21.922 --> 00:10:23.690 
需要注意的一點是

00:10:23.757 --> 00:10:27.227 
一旦我們告訴您數據已經在那裏
一旦文件已被完全下載

00:10:27.294 --> 00:10:32.099 
您需要立刻拿到它
因爲否則的話它就會被從臨時緩存刪除

00:10:33.867 --> 00:10:35.836 
因此這裏有一些代碼
一共有幾頁

00:10:35.903 --> 00:10:37.504 
一個簡單的downloader類

00:10:38.071 --> 00:10:40.073 
我們首先要做的是釋放NSURLSession 

00:10:40.140 --> 00:10:42.876 
我們慢慢做這件事
以防我們永遠不需要調用它

00:10:43.944 --> 00:10:45.812 
而這裏的調用主要是創建會話

00:10:46.180 --> 00:10:49.383 
而且只有兩行代碼
一行是爲了對後臺進行配置

00:10:49.449 --> 00:10:52.619 
那麼你可以說這裏是一個後臺會話

00:10:52.686 --> 00:10:55.222 
而我們希望傳入一個ID
過一會兒我會談到它

00:10:56.523 --> 00:10:58.959 
而我們使用那種配置創建URL會話

00:10:59.026 --> 00:11:02.396 
而且我們讓downloader類本身
成爲delegate之後的實例

00:11:02.462 --> 00:11:04.631 
以便我們能夠在文件進來時得到通知

00:11:05.599 --> 00:11:07.167 
然後爲了開始URL下載

00:11:07.668 --> 00:11:09.636 
我們請求一個新的任務

00:11:10.237 --> 00:11:11.705 
並讓其運行

00:11:11.772 --> 00:11:15.943 
而它將發出請求
並開始下載

00:11:17.611 --> 00:11:22.883 
正如我剛纔所言 通常你的擴展
是關閉的或不處於喚醒狀態

00:11:23.217 --> 00:11:24.751 
在它關閉的情況下

00:11:25.118 --> 00:11:29.489 
你將需要重新連接到
已經設置好的所有下載任務

00:11:29.990 --> 00:11:36.830 
因此你要設置的是個在您的WK擴展中
叫做restart的調用的函數

00:11:36.897 --> 00:11:38.165 
福李斯特之後將談到那一點

00:11:38.232 --> 00:11:41.702 
啓動調用函數並重新啓動下載
以便你能夠知道它們會到來

00:11:41.768 --> 00:11:45.105 
實際上它們也會消失
但是你不會知道它們已經結束了

00:11:47.608 --> 00:11:49.610 
而這裏是實際的delegate方法

00:11:49.676 --> 00:11:53.180 
這就是你與
NSURLSession連接的方法

00:11:53.480 --> 00:11:56.550 
當文件完成下載之後就會調用此方法

00:11:56.617 --> 00:11:59.386 
正如我剛纔所言 
我們需要立刻將文件複製以防它消失

00:11:59.453 --> 00:12:00.921 
以防系統將其刪除

00:12:01.855 --> 00:12:03.624 
這種情況下我們將獲取緩存目錄

00:12:03.690 --> 00:12:05.259 
因爲或許我們過一會可能會需要它

00:12:06.560 --> 00:12:08.695 
我們將生成一個URL

00:12:08.762 --> 00:12:13.066 
且我們用文件管理器複製
從被傳遞進來的原始URL

00:12:13.133 --> 00:12:16.370 
即從位置URL到緩存目錄的URL

00:12:16.970 --> 00:12:20.140 
我們已經將其複製
並跟蹤它以便以後使用

00:12:20.407 --> 00:12:22.910 
因此我們可以讀取你下載的任何數據

00:12:25.179 --> 00:12:27.781 
此外還有
WatchKit connectivity框架

00:12:27.848 --> 00:12:29.283 
它實際上存在於雙方

00:12:29.650 --> 00:12:31.652 
比如你在它們之間共享數據

00:12:31.718 --> 00:12:35.489 
你可以在手錶和iPhone之間
建立個共享的字典 

00:12:36.056 --> 00:12:38.425 
它讓你傳輸文件
也是後臺運行

00:12:39.293 --> 00:12:43.864 
它也讓你從手錶直接
向作爲父應用的手機app

00:12:44.164 --> 00:12:46.066 
向父設備iPhone上的父應用
發送請求

00:12:46.967 --> 00:12:50.771 
明天將會有一個關於該話題的環節

00:12:51.138 --> 00:12:52.639 
我建議大家要去聽
因爲它是新內容

00:12:52.706 --> 00:12:55.342 
而且是手錶和iPhone上都有的

00:12:58.912 --> 00:13:02.449 
那麼這裏有幾個遷移方面的幻燈片

00:13:02.516 --> 00:13:06.286 
對於已經開始開發
watchOS 1 app的朋友

00:13:08.522 --> 00:13:10.123 
您多半已經見到過這個內容

00:13:10.557 --> 00:13:14.027 
watchOS 1的WatchKit擴展

00:13:14.094 --> 00:13:16.630 
是你們已經創建的東西
或是你們的項目內一個目標

00:13:17.431 --> 00:13:20.934 
但是它使用了SDK中的iOS平臺

00:13:21.001 --> 00:13:24.404 
因此它存在於iPhone內
而不是在手錶內

00:13:27.241 --> 00:13:31.612 
因此它讓你在手機上共享一個框架

00:13:31.879 --> 00:13:34.848 
那麼你可能有一些代碼
是兩種擴展上通用的

00:13:34.915 --> 00:13:36.850 
比如從網絡上獲取你的信息

00:13:37.217 --> 00:13:43.023 
同樣的代碼在iPhone應用
和手錶應用中4都能運行

00:13:44.091 --> 00:13:48.762 
因爲您無法直接讀取手錶存儲器

00:13:49.196 --> 00:13:53.467 
我們爲您提供了一種緩存圖像的方法
即一張圖片和一個名稱

00:13:53.534 --> 00:13:55.636 
之後當我說“已對上述圖像命名”時

00:13:56.570 --> 00:14:01.375 
我們已把資源下載到了手錶上
而且速度將會快得多

00:14:02.509 --> 00:14:05.512 
因此我們爲您提供了一種
直接與應用對話的方法

00:14:06.046 --> 00:14:10.050 
顯然是從手機到手機的過程
因此它是非常迅速的

00:14:11.518 --> 00:14:15.856 
藉助watchOS 2 
我們已經添加了一種新的SDK

00:14:16.456 --> 00:14:21.562 
它是完全獨立的
與iPhone和OS 10 SDK類似

00:14:22.496 --> 00:14:24.898 
它確實爲您提供了一套
可用的iOS次級框架

00:14:25.265 --> 00:14:27.835 
雖然您不會獲得
和手機上一樣完整的功能性

00:14:28.135 --> 00:14:29.236 
但是你也獲得很多便利

00:14:32.039 --> 00:14:35.976 
你可以在你的項目中加入一個框架

00:14:36.243 --> 00:14:39.213 
正如你在iPhone watchOS 1 app
上所做的一樣 

00:14:40.447 --> 00:14:45.686 
但是這個框架是使用手錶應用
和手錶擴展下載的

00:14:45.752 --> 00:14:50.090 
因此你不會在一個設備上共享代碼

00:14:50.390 --> 00:14:55.195 
但是它確實讓你仍然把網絡訪問
代碼分離到一個單獨的

00:14:55.629 --> 00:14:56.763 
手錶可以使用的框架內

00:14:57.130 --> 00:14:59.800 
現在當然 比如說手錶
對於你提供的手錶框架

00:15:00.501 --> 00:15:04.505 
可能使用NSURLSession
讀取信息

00:15:07.074 --> 00:15:10.544 
因此如果您已經開發了
一個WatchOS 1應用

00:15:11.211 --> 00:15:13.881 
您實際上已經做了很多準備
以便接觸watchOS 2

00:15:15.082 --> 00:15:18.252 
它們同樣擁有有變化和添加的API 

00:15:18.986 --> 00:15:22.256 
但是您應該能夠
不做任何改動編譯很大一部分

00:15:22.322 --> 00:15:24.124 
並且可以將資源複製轉移

00:15:24.191 --> 00:15:27.861 
因此如果在您的 
WatchOS 1擴展內有圖像

00:15:27.928 --> 00:15:32.566 
您可將其添加到WatchOS2擴展
的目標並將其複製到手錶上

00:15:33.300 --> 00:15:36.103 
但是你必須確保它們的大小
被調整到適合於手錶

00:15:37.104 --> 00:15:38.205 
有幾項新的改進

00:15:39.806 --> 00:15:43.410 
當然主要的一點是
您的手錶app運行於您的手錶上

00:15:43.477 --> 00:15:45.445 
擴展也是如此

00:15:45.512 --> 00:15:48.415 
而那意味着UI的反應性好得多了

00:15:48.482 --> 00:15:52.519 
您點擊一個按鈕它立刻做出反應

00:15:52.920 --> 00:15:56.990 
當然現在你也可以獨立操作
而不必擔心手機就在附近

00:15:57.891 --> 00:16:00.761 
你不必擔心手機正在連接中或正在上網

00:16:01.862 --> 00:16:08.502 
我們也增加了幾個UI元素
以及一些新的系統UI表單

00:16:08.569 --> 00:16:12.005 
我們將在本節講座
或其他講座上談到它們

00:16:12.873 --> 00:16:14.141 
我們增加了動畫

00:16:14.641 --> 00:16:19.546 
因此現在您可以讓切換間的過渡
實現動畫效果

00:16:19.613 --> 00:16:22.282 
如圖表或圖形的大小

00:16:22.349 --> 00:16:24.651 
或是類似的東西

00:16:24.718 --> 00:16:26.954 
或字符串的不透明度
你可以使其具有動畫效果

00:16:27.020 --> 00:16:28.755 
就此內容明天會有一節專門講座

00:16:29.189 --> 00:16:31.091 
因此我建議您也看一下那節講座

00:16:34.494 --> 00:16:38.799 
那麼對於控件
API大體上是相同的

00:16:39.132 --> 00:16:42.436 
你有相同的界面控件
你會使用glance

00:16:42.503 --> 00:16:43.637 
沒有任何變化

00:16:43.704 --> 00:16:45.038 
而且通知也是一樣的

00:16:45.105 --> 00:16:46.607 
你無須做出任何改動

00:16:46.874 --> 00:16:49.343 
有幾個API已經不存在了

00:16:49.409 --> 00:16:52.446 
圖像緩存和open parent已被

00:16:52.513 --> 00:16:56.316 
替代爲直接讀取圖像
和Watch Connectivity

00:16:57.618 --> 00:17:01.889 
福李斯特將提到
兩個新的元素是extension delegate 

00:17:02.789 --> 00:17:09.463 
及在錶盤上顯示被用來爲
complications提供圖像和文本的數據源

00:17:11.298 --> 00:17:15.269 
最後對於那些
目前有Xcode項目的朋友

00:17:15.736 --> 00:17:18.605 
您需要做的是增加一個新的目標

00:17:18.672 --> 00:17:20.473 
可以在使用WatchOS 1的同時

00:17:20.540 --> 00:17:26.613 
請求增加WatchOS 2
並向其中添加文件

00:17:26.680 --> 00:17:29.116 
將文件標記爲同一個目標的一部分

00:17:29.183 --> 00:17:31.852 
添加即將在手錶上被編譯並加載的框架

00:17:33.287 --> 00:17:34.154 
如果您願意

00:17:34.221 --> 00:17:38.926 
您可以從Xcode開始
啓動一個全新的項目

00:17:39.193 --> 00:17:42.296 
而它將會自動創建iOS
和WatchOS 2 app

00:17:42.729 --> 00:17:44.264 
因此您可以從那裏啓動填充內容

00:17:44.831 --> 00:17:47.701 
昨天有一節講座
我建議大家看一下視頻

00:17:48.168 --> 00:17:52.105 
它們對這一過程的描述要詳細得多

00:17:53.040 --> 00:17:54.374 
我就講這麼多

00:17:54.441 --> 00:17:58.145 
現在讓福里斯特接替我繼續
更詳細地討論新課程

00:17:58.212 --> 00:17:59.680 
以及現有API上發生的變化

00:18:03.483 --> 00:18:05.552 
我叫福里斯特
是一名WatchKit工程師

00:18:05.619 --> 00:18:06.687 
我將跟大家談談

00:18:06.753 --> 00:18:09.857 
我們在面向WatchOS 2的
WatchKit中增加的新的API

00:18:11.758 --> 00:18:14.261 
首先我談一下
WK extension delegate

00:18:15.028 --> 00:18:20.267 
在iOS上我們有
UI Application Delegate

00:18:20.868 --> 00:18:23.270 
作爲衆多方法之一
它幫您跟蹤您的app的生命週期

00:18:23.337 --> 00:18:26.206 
這包括諸如你的啓動
你變得活躍

00:18:26.273 --> 00:18:27.474 
以及你將停止活躍

00:18:28.008 --> 00:18:30.644 
我們已經添加了
WK extension delegate

00:18:30.711 --> 00:18:32.846 
來跟蹤您的應用的生命週期

00:18:34.882 --> 00:18:38.485 
首先我將從
application Did Finish Launching開始

00:18:38.552 --> 00:18:44.591 
當程序完成啓動及擴展完全未運行時
它被調用一次

00:18:45.058 --> 00:18:48.996 
這可能是您的應用需要的初始化步驟

00:18:49.062 --> 00:18:53.200 
設置notification observer
並預熱任何今後可能需要的服務的地方

00:18:53.267 --> 00:18:56.236 
重要的一點是注意
此時您的應用尚未進入活躍狀態

00:18:58.238 --> 00:19:00.107 
接下來我們有
application Did Become Active

00:19:00.174 --> 00:19:04.511 
每次你的應用被從後臺轉移到前臺
或在第一次啓動之後

00:19:05.012 --> 00:19:07.114 
它都會被調用

00:19:08.448 --> 00:19:14.454 
這是個啓動任何僅需在您應用實際活
躍期間運行的代碼的好時機

00:19:14.521 --> 00:19:16.356 
或激活任何您可能需要的定時器

00:19:16.423 --> 00:19:22.095 
尤其是更新在後臺或根本未運行期間
已經發生變化的狀態

00:19:24.431 --> 00:19:26.133 
Application Will Resign Active

00:19:26.200 --> 00:19:30.304 
是在您的app停止活躍狀態
並被移動到後臺之前調用的

00:19:30.370 --> 00:19:33.373 
您希望準備進入不活躍狀態

00:19:33.740 --> 00:19:35.475 
如果您已經啓動了任何定時器

00:19:36.076 --> 00:19:37.644 
這是一個使它們暫停的好時點

00:19:37.711 --> 00:19:40.614 
如果您選擇在此時不將其暫停

00:19:40.681 --> 00:19:42.850 
它們將不會在後臺運行
你不會有後臺運行時間

00:19:43.150 --> 00:19:46.153 
但是你將會失去
對它們的精確運行週期的控制

00:19:46.720 --> 00:19:47.788 
因此如果您想進行控制

00:19:47.855 --> 00:19:50.123 
當你不活躍時
暫停它們是個不錯的主意

00:19:50.390 --> 00:19:52.860 
而當你真正變爲活躍時再將其重啓

00:19:53.327 --> 00:19:55.762 
而你希望在此時
保存您的應用的狀態

00:19:55.829 --> 00:19:58.565 
因爲在此時間點之後
系統中的另一進程需要那些內存

00:19:58.866 --> 00:20:01.001 
您的擴展將被強制終止

00:20:04.571 --> 00:20:05.405 
因此總的來說

00:20:05.472 --> 00:20:09.743 
WK extension delegate
將跟蹤您的應用的生命週期

00:20:09.810 --> 00:20:10.644 
需要注意的是

00:20:10.711 --> 00:20:14.281 
這與通知UI Glance UI
或complication數據

00:20:14.348 --> 00:20:15.516 
毫無任何關係

00:20:15.582 --> 00:20:17.584 
這僅與跟蹤應用的生命週期有關

00:20:20.921 --> 00:20:23.524 
接下來我講一下
handle User Activity

00:20:23.590 --> 00:20:26.460 
Handle User Activity是個
來自於WatchOS 1的現有調用方法

00:20:26.527 --> 00:20:29.396 
在WatchOS 1中它被用於
應用啓動的時候

00:20:29.696 --> 00:20:35.669 
通過點擊您的glance而導航
到您的應用內的適當位置

00:20:35.936 --> 00:20:37.471 
那也從glance得到反映

00:20:37.938 --> 00:20:40.874 
我們將在watchOS 2內
以兩種方式構建它

00:20:41.375 --> 00:20:42.776 
首先它會在應用啓動時被調用

00:20:42.843 --> 00:20:45.646 
通過點擊您的
complication啓動應用

00:20:45.946 --> 00:20:49.716 
任何你在Complication中
反映的狀態將需要導航

00:20:49.783 --> 00:20:52.519 
到您的應用中該狀態
對應的適當位置

00:20:53.420 --> 00:20:55.656 
此外我們將把它移動到
 WK extension delegate

00:20:55.722 --> 00:20:58.725 
而不是我們過去所做的
root Interface Controller

00:20:59.226 --> 00:21:04.298 
這會給你提供更大的靈活性
讓你處理想做的事情從而實現狀態維護

00:21:11.038 --> 00:21:14.308 
那麼我們在一個名爲WK extension
的新對象上進行新的調用

00:21:14.374 --> 00:21:15.976 
新的調用是root Interface Controller

00:21:16.043 --> 00:21:19.213 
我必須警告你它將來自於將來的種子
而不是在現有的種子內

00:21:19.279 --> 00:21:20.414 
因此爲了暫時進行估算

00:21:20.480 --> 00:21:23.417 
您將不得不在您的界面控件的初建之時
在其上進行節省

00:21:24.351 --> 00:21:25.252 
記住這一點後

00:21:25.319 --> 00:21:27.554 
你可能會暫時在
WK extension delegate上

00:21:27.621 --> 00:21:29.890 
執行handle User Activity

00:21:29.957 --> 00:21:32.893 
我將通過新的調用取得新的根控件

00:21:32.960 --> 00:21:37.764 
並將跳轉回到根部然後我將請求根控件
繼續運行並做出任何適當的操作

00:21:37.831 --> 00:21:38.732 
以恢復您的狀態

00:21:39.032 --> 00:21:40.934 
注意 這裏有很多你能做的其他事情

00:21:41.001 --> 00:21:44.204 
你可以建立模態警告或進行其他操作

00:21:44.905 --> 00:21:46.874 
以處理傳遞給你的用戶活動

00:21:48.842 --> 00:21:52.646 
接下來在IOS上
我們有UI application

00:21:53.213 --> 00:21:57.751 
它是一個單獨的對象
代表正在運行中的應用

00:21:58.452 --> 00:22:03.957 
所以在watchOS 2上我們添加
類似WK extension的東西

00:22:06.059 --> 00:22:10.264 
其中這個是主要的界面
用於打開標準的系統URL

00:22:10.831 --> 00:22:13.767 
因此 您將能夠打開
開放系統URL API 

00:22:13.834 --> 00:22:18.872 
而執行諸如打電話 發送文本消息
或顯示PassKit UI等操作

00:22:19.706 --> 00:22:21.909 
那就是開放系統URL 
和WK extension

00:22:23.977 --> 00:22:25.779 
現在我將講一下關於通知的內容

00:22:28.916 --> 00:22:30.684 
首先我要說的是遠程通知

00:22:31.051 --> 00:22:33.253 
遠程通知來自於互聯網

00:22:34.588 --> 00:22:36.390 
而它們總是先到達你的手機

00:22:36.957 --> 00:22:39.927 
那時候你的手機將決定是否
顯示通知本身內容

00:22:40.894 --> 00:22:43.197 
或將其繼續轉發直至它被顯示在手錶上

00:22:46.433 --> 00:22:50.971 
現在手機使用了一套規則而做出決定

00:22:51.138 --> 00:22:52.773 
而這些規則中的標準包括是否

00:22:52.840 --> 00:22:54.241 
您的手機屏幕已被上鎖

00:22:54.842 --> 00:22:57.077 
或是否您的手錶
被戴在您的手腕上並且已被解鎖

00:23:01.148 --> 00:23:02.916 
因此諸如watchOS 1

00:23:02.983 --> 00:23:08.355 
您的WK用戶通知界面控件在接收到
發給不活躍app的通知時便會運行

00:23:09.723 --> 00:23:11.158 
當發生這種情況的時候

00:23:11.225 --> 00:23:13.727 
其中的一個調用確實會收到遠程通知
或者收到本地通知

00:23:13.794 --> 00:23:15.896 
它將會在您的控件上被調用

00:23:16.864 --> 00:23:20.567 
而您自行決定
是否及時調用completion handler

00:23:20.634 --> 00:23:24.938 
如果您花費太長時間
您的默認界面將被顯示

00:23:25.005 --> 00:23:27.140 
它有點不太生動

00:23:27.207 --> 00:23:30.410 
因此這由您決定是否
在合理的時間內進行這個操作

00:23:32.746 --> 00:23:34.748 
接下來我將講一下本地通知

00:23:35.282 --> 00:23:38.418 
本地通知必須從手機上
由您的iPhone app發出

00:23:38.819 --> 00:23:41.388 
但是你可以從WatchKit擴展
向您的iPhone app發出消息

00:23:41.455 --> 00:23:43.023 
並請求它發出本地通知

00:23:44.391 --> 00:23:47.761 
同樣的邏輯也適用於遠程通知

00:23:48.061 --> 00:23:51.598 
對於遠程通知手機將決定
是否顯示通知本身

00:23:52.499 --> 00:23:54.501 
或是否將其傳回給手錶
並將其顯示在那裏

00:23:57.938 --> 00:24:00.207 
那麼讓我們來查看一個例子
看你如何進行該操作

00:24:02.109 --> 00:24:06.980 
這裏我將使用watch connectivity 
消息調用從手錶向手機app發送消息

00:24:09.383 --> 00:24:12.219 
當我的iPhone app收到那個消息時
它可以發出本地通知

00:24:12.286 --> 00:24:15.355 
啓動常規邏輯 確定在哪裏顯示該警告

00:24:16.323 --> 00:24:17.357 
這是相對簡單的代碼

00:24:19.660 --> 00:24:21.495 
那麼現在我們可以
在您的手錶上看到警告

00:24:21.929 --> 00:24:25.799 
我要講一下從您的通知UI
啓動您的應用

00:24:26.633 --> 00:24:28.302 
從這裏可以用兩種方式啓動app

00:24:28.936 --> 00:24:33.240 
要麼你可以從通知動作按鈕啓動

00:24:33.307 --> 00:24:35.309 
在這個例子裏我已經
通過回覆按鈕進行了設置

00:24:35.642 --> 00:24:40.647 
用戶也可以通過
點擊左上角的應用圖標來啓動應用

00:24:42.916 --> 00:24:44.484 
當這些動作其中之一發生時

00:24:44.551 --> 00:24:46.453 
或者當用戶做了這些事情之一時

00:24:48.488 --> 00:24:53.160 
在您的WK extension delegate上
會進行這些調用其中的一個

00:24:53.427 --> 00:24:58.265 
兩個handle action with identifier 
調用之一將被執行發出遠程或本地通知

00:24:58.899 --> 00:25:01.702 
您將會收到被啓發的動作的識別符

00:25:01.768 --> 00:25:04.471 
如果它們點擊了應用圖標
你將會收到一個 0

00:25:05.038 --> 00:25:08.842 
而對於遠程通知的情況
你將會收到一個含有通知負載的字典

00:25:09.376 --> 00:25:14.548 
在本地通知的情況下 您將收到一開始
就創建的UI notification對象

00:25:14.615 --> 00:25:15.916 
目的是爲了發出你的通知

00:25:16.617 --> 00:25:18.352 
那麼 這就是如何從通知啓動你的app

00:25:20.754 --> 00:25:23.624 
接下來我將談一下
內嵌通知的文本回復

00:25:24.491 --> 00:25:29.396 
在iOS 9和watchOS 2中
爲內嵌通知文本回復增加了第三方支持

00:25:31.899 --> 00:25:36.069 
在此例中 回覆動作已被指定爲
發生文本輸入行爲

00:25:37.271 --> 00:25:39.439 
當用戶啓發此動作

00:25:39.806 --> 00:25:41.308 
而不是啓動app時

00:25:41.375 --> 00:25:44.611 
或向您的iPhone app
發回一個信號時

00:25:45.212 --> 00:25:47.114 
用戶將被呈現一個文本輸入UI

00:25:47.581 --> 00:25:52.853 
因此您在此UI中可以看到
用戶能夠啓動麥克風口述回覆

00:25:53.220 --> 00:25:56.590 
他們可以點擊表情符號圖標

00:25:56.924 --> 00:26:02.196 
以便從表情符號選擇器內輸入
或者從一個提示列表內進行選擇

00:26:02.529 --> 00:26:05.065 
而你作爲app開發者
將可以提供這樣的提示列表

00:26:05.799 --> 00:26:06.867 
而你實現這個的方式

00:26:06.934 --> 00:26:07.868 
就是通過執行這個

00:26:08.135 --> 00:26:11.772 
對suggestions For Response
To Action With Identifier的調用

00:26:12.906 --> 00:26:15.609 
它是在您的WK用戶/通知
界面控件上的

00:26:18.745 --> 00:26:21.014 
因此一旦用戶選擇了

00:26:21.081 --> 00:26:23.684 
或提供了他們的文本輸入內容
不管是通過您的選擇之一

00:26:23.750 --> 00:26:25.152 
或是其他某種方法

00:26:25.919 --> 00:26:27.888 
您的應用將被啓動

00:26:28.322 --> 00:26:30.791 
而你將收到這個
handle Action With Identifier調用

00:26:30.858 --> 00:26:34.428 
它出現在您的WK或
您的WK extension delegate上

00:26:37.965 --> 00:26:41.134 
您將注意到這個變量有一個新的參數
即response Info

00:26:41.201 --> 00:26:43.036 
而response Info將包含

00:26:43.103 --> 00:26:44.071 
輸入的文本

00:26:44.137 --> 00:26:48.308 
用戶在UI User Notification
Action Response Typed Text Key內

00:26:50.777 --> 00:26:54.348 
那麼我將要講的另一個新特性是
運行中的語言選擇

00:26:55.382 --> 00:26:57.251 
這裏您可以看到我們有標準的文本輸入

00:26:57.718 --> 00:27:01.388 
不管何時用戶啓動了文本輸入UI

00:27:01.455 --> 00:27:04.825 
他們都能選擇通過力度觸摸調出
語言選擇器

00:27:05.425 --> 00:27:09.963 
語言選擇器將提供所有可用的語言

00:27:10.030 --> 00:27:14.001 
這些語言根據您在iPhone上
提供的鍵盤而選擇的

00:27:14.868 --> 00:27:17.437 
那麼我將提供英語和西班牙語

00:27:17.704 --> 00:27:19.239 
那麼我將繼續進行切換到西班牙語

00:27:19.907 --> 00:27:22.075 
這將把文本輸入UI切換到西班牙語

00:27:22.409 --> 00:27:25.746 
並可以填充一個西班牙語提示列表
而不是英語提示列表

00:27:26.446 --> 00:27:28.081 
這就是運行中的語言選擇

00:27:31.485 --> 00:27:34.087 
接下來我會談一下
如何通過另一種方式處理通知

00:27:34.354 --> 00:27:37.491 
在watchOS 1中 
不管您的app活躍與否

00:27:37.558 --> 00:27:41.295 
我們總會將您的
WK用戶通知界面控件實例化

00:27:41.562 --> 00:27:45.399 
而系統將在屏幕的上方顯示出來
不管屏幕上是什麼 包括您的app

00:27:46.099 --> 00:27:49.203 
在watchOS 2中
如果您的app是活躍的 我們將不再那麼做

00:27:49.269 --> 00:27:51.405 
相反WK extension delegate

00:27:51.705 --> 00:27:54.508 
將會收到
Did Receive Notification調用

00:27:55.275 --> 00:28:00.113 
您的app將決定如何適當處理
和顯示通知的內容

00:28:00.814 --> 00:28:03.383 
比如說 如果你在編寫一個聊天app

00:28:03.450 --> 00:28:06.954 
您可能會把內容附加到聊天記錄的末尾

00:28:08.288 --> 00:28:10.490 
同樣系統將不再爲你顯示警告

00:28:10.557 --> 00:28:12.826 
因此如果您希望用戶
瞭解出現了什麼樣的通知

00:28:12.893 --> 00:28:14.862 
您需要將其
呈現在您的UI裏面

00:28:16.230 --> 00:28:17.698 
這個就是我要說的通知內容

00:28:18.232 --> 00:28:19.733 
接下來我將講一下模態警告

00:28:22.102 --> 00:28:24.638 
在WatchOS 1中

00:28:25.072 --> 00:28:29.209 
您可以取消
隱藏羣組的隱藏狀態而顯示警告

00:28:30.110 --> 00:28:32.846 
在watchOS 2中我們
允許使用present Alert Controller With Title 

00:28:32.913 --> 00:28:36.583 
這會讓對用戶呈現模態警告的操作
變得容易得多

00:28:38.318 --> 00:28:42.089 
在這個調用裏面有三個變量
第一個是警告

00:28:42.456 --> 00:28:45.158 
這是一個簡單的調用
告訴用戶發生了某些事情

00:28:47.294 --> 00:28:49.396 
接下來我們有
Side By Side Buttons Alert

00:28:49.463 --> 00:28:54.568 
這是當前在iOS中向用戶
呈現二選一選擇的非常流行的方式

00:28:54.635 --> 00:28:59.072 
我們認爲第三方開發者
也希望在他們的應用中使用它

00:29:00.841 --> 00:29:02.643 
最後我們談一下 action sheet

00:29:02.776 --> 00:29:06.413 
action sheet最多有四種
動作外加一個可定製的取消動作

00:29:06.480 --> 00:29:08.282 
您可以看到Nevermind動作

00:29:08.348 --> 00:29:10.884 
我已經把Cancel動作定製爲Nevermind

00:29:10.951 --> 00:29:13.487 
各種動作可被選擇標記爲“毀滅性的”

00:29:13.554 --> 00:29:15.055 
我是通過delete按鈕實現的

00:29:15.122 --> 00:29:16.790 
目前那意味着它們將以紅色顯示

00:29:18.025 --> 00:29:22.296 
一旦用戶從Cancel
或四個主要動作中做出選擇

00:29:22.362 --> 00:29:25.065 
您將會收到一個回調
表明哪個按鈕被選中

00:29:28.101 --> 00:29:31.839 
因此總的來說 我們在
watchOS 2中有一個新的架構

00:29:33.607 --> 00:29:35.375 
我們增加了WK extension delegate

00:29:35.442 --> 00:29:37.311 
幫您管理您的應用的生命週期

00:29:38.645 --> 00:29:40.247 
我們有大量的新API

00:29:41.915 --> 00:29:43.250 
而且當然還會有更多的到來

00:29:45.018 --> 00:29:48.255 
如果您希望瞭解關於安德魯和我
剛纔在此所談內容的更多信息

00:29:48.722 --> 00:29:51.558 
請查閱
文稿和示例代碼

00:29:51.859 --> 00:29:53.360 
而如果你有具體的疑問

00:29:53.427 --> 00:29:57.197 
請聯繫Jake Behrens
地址如下

00:29:57.564 --> 00:29:59.132 
而且會有大量的相關講座

00:29:59.766 --> 00:30:03.003 
包括這裏將進行的下一節講座
也就是我們的講座的第二部分

00:30:04.004 --> 00:30:05.405 
那麼非常感謝大家的蒞臨