JAKE BEHRENS: 早上好
欢迎来到 "WatchKit 提示和技巧"
我叫Jake Behrens，
我是苹果watchOS框架的讲师
今天，我们将讨论如何利用的不同的方法
去优化你在watchOS上安装的应用
在 watchOS 1中
将会有很多我们需要讨论的东西
同样这个也适用于watchOS 2
在讨论的过程中 我将会指出这些
如今 随着之前苹果手表的发布之后
在写第一个手表app的过程中
我们有了和很多个开发者一起工作的经历
在这个过程中我们学到了很多
而今天我们也将会和你们分享很多关于
类似于怎样优化你的网络
或者怎样减少你的下载时间等很有用的知识
所以 首先让我们从数据和交流开始吧
正如我前面所提到
从你的web服务器上或者安装的苹果应用程序中 获取信息是至关重要的
以至于你必须将一部分内容
去实际的显示给用户
现在，想象一下你的用户正在车站等候
他们抬高了自己的手腕他们正在和你的应用程序进行交互
突然你启动了一个网络请求
然后公共汽车从拐角处开过来了
因为他们得到了自己想要的东西所以用户们放下了胳膊
然后他们匆忙地朝着公共汽车赶去上车然后坐下来
好了你要做的事情就是确保下一次提高手腕
他们重新回到你的应用程序中的时候
数据仍然在那儿等着他们
而不是你必须重新读取它
所以 你怎样才能有效的完成这个过程呢？
好 第一部分就是你需要一个网络请求
这是你如何获得信息的过程
下一步你需要做的就是询问系统是谁请求了
后台的任务中断处理
这种方法是向系统提出要求说“嘿 我需要一些时间
因为我可能需要完成某个进程一旦你开始
暂停我的 WatchKit 扩展程序时”
更进一步 如果你碰上后台任务声明
你会需要将其保持在打开的状态上
以便你的网络请求能够得以完成
那我们怎样去完成这些呢？
现在我们要一起走过整个过程
第一件事你需要做的是设置好你的网络请求
为此我们将使用默认 NSURLSession
现在注意 我不会使用后台 NSURLSession
因为在哪种情况下
如果我们的 WatchKit 扩展程序被暂停了
其完成就会取决
于我们总的 iPhone 应用程序
如果我们要把我们能做的一切
都在 WatchKit 扩展程序中完成
所以 接下来我们要索求那个后台任务的声明
我们怎样做到这一步？
做到这一步我们需要使用
“合理执行到期活动”
这一NSProcessInfo上的方法。
这一方法会向系统索求一个后台任务声明
并说“嘿 我可能仍需做件事情
一旦你要暂停 WatchKit 扩展程序”
做法是 你向系统传递一个调试字符串
这里字符串是 networkReq
然后系统就会执行那个程序块
现在 该程序块就会立即被调用
当系统调用“合理执行到期活动 ”时
现在 有些事情要牢记于心
这些事情实在重要
第一件事情是该程序块的执行
将会在一个异步队列上安排
所以你的主队列依然会被释放出来用户将能与其界面
进行互动这不会有任何问题
用户不会感觉到有任何不同
如果 “已到期” 变量设置为“假”那就意味着
我们的时间还没用完
也就是 系统已经给了我们一个后台任务声明
然而 如果失效了
那么久意味着系统不能给我们提供一个后台任务中断
这意味着系统不能正常的运行
然而 如果说我们已经有了一个后台任务中断
这就意味着系统可能已经觉得我们完全没有时间了
所以便在把失效设定为正确之后
再执行这个模块
将会给你一段时间
来确保你已经删除了你所拥有的任何状态
或者在WatchKit扩展完全终止之前
你需要做一些事情
正如我所说的那样最关键的事情就是这个模块需要用异步序列的方式去执行
第二个很重要的就是一旦这个
模块执行完毕
然后你的时间消失
它放弃了后台的任务中断
因此我们要做的就是确保
我们有足够的时间去完成我们的网络请求
可能需要两秒
可能需要十秒
可能花更多时间
我们将会利用称为调度信号量的东西
调度信号量是中央调度（GCD)的一部分
这本质上允许我们用一种异步队列的方式
去暂停执行
所以称之为“调度信号量等待”
与此同时 它将会暂停执行
但是 在你需要再一次重新启动的时候
你可以请求“调度信号量信号”
现在 请注意我已经经过了一段时间
这本质上是一个超时
在这儿我已经把它设置到30秒了
当然也可以是其他数字
然而我想确定的是你知道一旦它到达30秒
我应当获得我的数据或者报失
所以这可能有点抽象
而且是有一点点先进的概念
所以让我们看看实际中真正需要的代码
好的 因此我这里有一个为watchOS 1建立的
WatchKit 扩充
我面前是一个子集工作界面控制器
您可以看到我做的第一件事是创建一种属性
用于执行会话数据任务
我们将要用这个数据任务来
从我们的网络服务中提取信息
接下来将激活
并实现您随时随地可以网络编码
就这个例子来说 简而言之
我正在做的就是即将激活
首先我会检查数据任务的状态
我还会看一下它是否已在运行
因为如果用户抬起手腕 开始了互动
开启了网络请求 放低了手腕
启动了后台时间 接着又抬起手腕
但是该请求还没有完成 那么我不想再次启动网络请求
我只会在当前没有网络请求运行时
再次启动网络请求
因此接下来我将创建一个网址
仅指向我的网络服务
这里它指向了应用商店的元数据
一旦我有了这个网址我就开始创建信号
称为“发送信号创建”
接下来我将使用一种方法 我称之为
“请求确认信号”
来传送这个新创建的信号
因此 如果我们审视使用这种方法时正在发生的情形
这其实就是我们所说的“理性执行到期的活动”
我们正在调试字符串传送如果到期设设定为假
那就意味着我们获得了一些后台时间
而我正在通过我的逾时进行传送
我称之为“发送信号等待”
记住 这将会导致异步队列暂停执行
没问题 用户依然可以与应用进行互动
假如WatchKit扩充进入了后台
它就保持在那里
确保了我们有足够的时间
完成我们的网络请求
那么 如果到期设定为“真”，
这意味着我们或者没有接收到背景任务
执行或者我们可能接受到了
但是现在系统又再次调用它说你已经超时
那么 我们将调用一个方法
是我创建的称作“用信号释放执行” 
再一次传那个信号
所有这些方法实际上就叫“发送信号”
这允许执行恢复 而且它允许完成
阻止 它也对调用非常关键
因为如果我们停止执行的时间太长 系统会认为
我们的进程已经暂停 这样不好
因为最后它直接停止了进程
所以，我们没有任何机会保存状态或做任何清理
我们直接就被停止了
好 那么让我们回到“意愿激活”
所以我们被要求执行任务
接下来要做的事情就是我们要使用
我们的URL来创建数据任务
现在 注意到我没有传送它
不管我有没有背景任务执行
背景任务执行技术
是一个获得额外时间的方法 对吧？ 
我的意思是它不能确保但是我们希望能用此得到更好的体验
所以我就创建我们网络要求
因为可能用户正在这时用app互动交流
网络要求已经开始并且在很短的时间应答一切都很顺利
你在此还看到有一个用于数据任务的便利完成处理程序
所以当要求结束时
我将调用“用信号释放执行”
再次传递那一信号
所以我们允许对异步队列执行恢复
这允许阻止完成
然后 WatchKit扩展可以完全挂起。
这会确保系统不会认为操作进程已挂起
这样 一旦创建数据任务
我们就可以调用恢复来启动这样它可以去网路
获取信息 我们处理其余工作
现在
你对这项技术有了一些了解
可以使用它尝试并行使
WatchKitextension内的联网权利
这是非常不错的体验因为进入到watchOS2
你就会有很多可以利用的东西
我们将对此稍作介绍
但你如果已经联网到
WatchKitextension
这将会使你做好准备一切都已经就绪
我看到过许多例子在使用打开父代程序
使内置的iPhone app 完成联网
这会中断桥接
现在 在某些情况下我们的网络服务不提供数据
数据实际已经在内置的iPhone app内
如需要得到数据
我们实际需要越过watchOS 1中的进程
从WatchKitextension
进入到内置的iPhone app
我们可以使用打开父代程序来完成
这是基于WK界面控制器的方法
可以让我们发送信息词典
到iPhone app并在后台启动它
让它进行一些处理并发送响应
在UI程序委托上
我们选择‘处理WatchKit extension请求响应’
这将会进入信息词典
进行一些处理并发送响应
在使用中还需要考虑一些问题
第一如果在‘处理WatchKit extension请求’中
有任何异步操作 你应确保创建了
一个后台任务
你想在进入该方法后立刻完成
原因是如果你离开并决定
完成一些异步操作那么不管它是多么琐碎
系统会说‘好
我想我们实际并不想做什么
那么我就要去暂停iPhone app了’
然后 你将失去机会发送响应
另一件事是在你将发送响应时
如果使用定制对象
则应把它们变成NSData
如果使用定制的二元格式
则可以在WatchKitextension打开
这样更可取因为一个重要的方面
就是使数据尽可能变小这样传输才最快
现在 对于设备对设备的交流我们已有很多了解
现在，在watchOS 2中‘打开父代程序’标为不可用
这是因为不再有这个必要
也不再需要
因为现在我们有了WatchConnectivity
framework
这对我们有很大帮助
我们不仅可以在iPhoneapp之间发送信息
而且还可以输送文件
你还可以 也应当利用
应用程序上下文
这样就可以用最新信息
更新该上下文
同时使你可以获得网络上Watch app内的信息
也许这是提供的最新功能
然后 你会说‘iPhone app以后会需要这样所以我想终止它’
它将会被转移
但是iPhone app并未被启动
因为它现在实际并不需要处理任何事情
所以在这种情况下 它只是等待
下一次iPhone app的启动
这是在设备之间完成交流的高效方式
这里 有一个精彩的演讲题目为
“Watch Connectivity 介绍”
你应当进行了解如果还没这样做的话
现在 一旦我们获得了数据就需要进行管理
和维护 然而我们需要把它存放在硬盘中
在watchOS 1中
使用应用程序组是做这项工作的一个非常好的方法
你可以使用共享的应用组集合
储存一些模型数据或一些共享资产
内置iPhone app
和WatchKitextension
可以指向并找到它们
现在 你也可以使用共享的NSUserdefaults
但应当用于较小的状态数据
比如 Boolean configuration
或类似数据它并不适用于模型数据
模型数据一般比较大
应以平面文件保存
在你的共享集合或数据存储中
通常 针对watchOS 1或watchOS 2
你应考虑简化模型
Apple Watch上的体验与
iPhone是非常不同的
所以你想确保得到信息是你所需要的
这方面的一个例子是WWDC app
多年以来 在WWDC app之中
我们不再把实体增添到
Core Data模型中
当我们去进行Apple Watch的体验时
我们看看它然后说
我们实际上不需要Watch上的这一切
我们对此进行了讨论并且最终认识到
我们所需要的是数据的简化版
我们仅仅需要这些演讲的简单列表
包括演讲 实验以及收藏
我们需要做的是创建一个操作在任何时间
内置iPhone app的数据可以变化
它可以输出一套简化的JSON文件
到共享组集合
WatchKit extension可以读取
并予以展示
这是非常棒的体验
设备对应设备交流的最后一种方式是
使用Handoff
Handoff是一种非常的方式可以让用户
从Apple Watch到iPhone上继续一项活动
这方面的一个例子是如果你使用
Apple Watch上的WWDC app
你会注意到iPhone的锁屏上
在要查看的特定区域的左下角
有WWDC app的图标
现在 如果你从左下角向上滑动
就会进入iPhone上WWDC app 
你想要的位置
这对于用户来说非常有用
使用Handoff非常简单
你可以使用WK界面管理器
更新用户活动
你还可以向用户发送一个NS数据词典
记住该词典应
包括你需要的一切
这样iPhone app才能使用户到达
他们想去的位置
因此 无论你需要的数据多么琐碎
都需要输入到词典中
这样 系统会自动为你工作
其中之一是自动使用户活动
在一段时间后失效
所以你什么都不用做
给用户足够的时间拿出电话
去他们想去的地方
如果你再次调用‘更新用户活动’
即是目前的活动
如果他们切换到另一应用
而该应用调用‘更新用户活动’
即是目前的活动
现在 如果你已经调用了‘更新用户活动’
但是当时用户正在与你的应用进行交互
他们轻敲一个按钮确实可以使背景发生转换
你实际上可自己手动使用户活动无效
如果没有出现这种情况你什么都不用做
因此数据足够
我希望watchOS 1对你有用
尤其是 一旦你开始使用
WatchConnectivityframework 
它即会帮你向watchOS 2过渡
现在让我们来谈谈界面组件
在你创造这个世界创建这些数据时
你最不希望给用户的体验
是加载指示条
你所做所有这些是为了一个控制器
每一件东西用户可能都会想要或需要
让我们看看如何能够优化这种体验
我们如何能够加载更快？
其中一种方法是我们可以...
通过优选加载方法和时间来实现
所以你这里可以看到watchOS 1的
Weather app
而且我们有这个漂亮的大信息环
对吗？我们想立刻把它呈现给用户
但是我们还有个10日预报
这个10日预报包括另外一些图像
表格行 数据 而我们也不一定想要用户
等我们加载所有这些东西
因此我们采用一种技术使得我们在
‘异步分派’内加载10日预报时
call within将激活
现在，这样做可以使得will activate完成
而一旦我们有了这个图像
则最先显示它
因此我们将其呈现在will activate即可完成
之后即立刻加载10日预报
而用户实际并未看出有什么不同
当我们向下滚动至10日预报则它已经在那里了
但是我们已经能够给大家所有数据立即加载
并且更快的印象了
其他你能够做的就是少直接加载几个表格单元格
对吗？如果你确实有带图表和数据的单元格
那么你可能只要四五个这样的单元格
直接显示给用户即可
这些加载之后
你可能希望能够在别处加载
因此看一下
同时 只要更新实际发生变更的信息即可
我见过许多数据只做了一点小小变更
就全部重新加载的例子
无需如此
只要更新这个屏面实际需要更新的内容就可以了
现在 我们一旦进入界面Builder你就能看到
我已经在为控制器创建我的布局了
而我将用到许多不同的群组
我将隐藏和显示许多不同的群组
因为根据某些数据或启发
我只打算一次显示一个也可能一次两个
但是实际上我已经将所有这些东西
放在我的控制器里了也就是说系统将会把这些全部实例化
因为我们实际上并不知道你什么时候会决定隐藏或显示其内容
因此在某些情形下你可以对其稍作优化
方法是将这些分到一些单独的控制器中
如果必要时你能够加载其中某个
你确实会需要的控制器
那么就最好了
现在 穿过我们的界面组件
其中你可能常用的是图像
而图像应该大小合适 来自你的服务器
或所包括的iPhone app
我看到过许多这样的例子图像较大
甚至比42毫米的watch还大
而该图像其实只是随处被重复使用和重新缩放
我这里的意思是对于缩放 还有其他性能上的含义
而图像不会像它看起来那么好
因为你没有给它你恰好需要的尺寸
所以要给出正确尺寸的asset
在watchOS 2中这可能对视频很关键
你也可以优化你的图像
方法是采用‘设定图像数据’而不只是‘设定图像’
此时‘设定图像’
只是要采用我们所用的默认压缩
通过‘设定图像数据’
你可以得到PNG压缩或JPG压缩
之后转成NS数据blob
以传送至Watch
从而你可以确保其大小符合你的需要
同时 我确信你听人们说过这样的话
你应该用asset catalog
asset catalog不仅是整理其中内容的好方法
而且还能够为你做很多别的事情
你可以设定该asset用于哪些具体设备
你可以设定并轻松看到‘是的 我有了2x asset
38毫米版本和42毫米版本’
目前 许多开发者问我...
这些插槽每一个都什么时候用以及用在哪
那么让我们一起来看看。
首先是2x asset
这个用于你想要在两台设备
以相同尺寸采用的图像
所以 如果是这样你可以将它插入2x插槽即可
其他地方用法相同
你还可以针对38毫米提供具体的asset
现在 这可能就是你要插入2x插槽的图像
没问题
然后你可以给出一个具体的asset
针对可能大一些的42毫米版本会有所不同
现在 如果你既有38毫米
也有42毫米 没问题也用2xasset
因为我们要回退到该asset
所以 如果我们用38毫米版本或42毫米版本
我们要回退到2x asset
这样 你的代码库将永不过时
另一项我们发现对WWDC app确实有用的技术
正在采用PDFs
通过采用PDFs 你可以从各工具中
去除整批free work
首先 你可以设定缩放因子
你还可以设定图像生成的类型
作为模板图像所以如果你要给图像着色
那么去看看PDF的α值
如果你仍然想要你特别放入你的asset中的这些颜色
你也可以设定为原图
这里所有事情就是当系统为你打包时
当你前去创建它时我们要剪切这个PDF
所有尺寸及比例按你的需要用于你支持的设备
免费的资源很多
另一件很酷的事情是你可以把PDF文件
与位图进行混合和匹配
你可以把这两种格式的文件组合进一个PDF备用脚本
这样就可以分别得到38毫米
和42毫米版本的位图了
说完图片 我们来说说动画图像
在watchOS 1里 我们提供了一个你可以大加利用的动画图像序列
在watchOS2里也可以这样做
但是不要忘了如果你的屏幕上
同时有多个动画图像 嗯
你就需要做更多处理和渲染
你需要注意的另外一点是你要尽量控制
自己减少每部动画的帧数
我见过很多的这样的案例一段只有两秒的动画
里面足足有300帧
似乎有点儿过分了
如果帧数减少了 但是仍然
可以得到你真正想要的效果
你会感到惊喜的
另一项你可以对这些动画图像进行的操作是逆向播放
你不必另行创建一个全新的图像集
你只需选取一个已有的动画文件
将时间设置为负值
这项操作叫做“用图片启动动画”
你来设定一个负时间值
请注意我的时间范围是正向的
跨度是从0到15
这里我没做改变
只更改了持续时间
现在如果你喜欢动画在watchOS2环境里 你可以大展拳脚了
在watchOS 2里 我们引入了一个动画应用程序界面API
它是WatchKit的一个部分
让你可以在你的Watchapp里制作出流畅的
效果强大的动画作品
它与UIView的动画工作原理近似
你可以自行设定时间长度 还一个模块
可以在这个区域重置一些属性
这些最终都将合成在你的动画作品里
你可以设置动画的高度 宽度 通道
内容嵌入以及其他属性
到目前为止 我已经见到了人们用这个程序制作的一些相当了不起的作品
而且只用到了间隔组和移动项
相当了不起
在“WatchKit布局和动画技术”中 还有很多有用的工具
关于图像处理 我建议大家
关注今天的讲座中"AppleWatch设计建议与技巧"这一部分
它将会从设计者心态的角度涉及很多的相关技巧
还会谈及大量
你可以做和应该了解的操作
所以 一定要关注
配置的最后一块是文本输入控制器的使用
现在 很多开发人员问我怎样才能
使用户直接从我的UI进入?听写UI
他们不希望自己的用户要经过
中间筛屏幕 并不停地敲击麦克风
这样做相当 相当直接
你只要在调用“目前的文本输入器与建议”时 把建议设定为零
然后把“允许输入模式”设定为普通
这样就可以把用户从你的app直接
转入听写UI然后再返回你的app
极其简单
现在我们要谈谈通知机制
消息通知是Apple Watch上一项意义重大的体验
Apple Watch能够如此操作简便 表现惊人
很大程度上归功于此
让我们看一个远程通知的有效载荷的例子
让我们浏览一些你应该清楚的
为了让用户的手腕得到最好
最高效的体验而使用的技术
首先要注意的是你应该正在使用报警键的字典值
这让你可以不仅提供一段正文
还可以设定一个标题
而且这个标题可以被用在short-look通知里
所以当用户在Apple Watch上收到通知时
他们首先看到的就是你的app的又大
又漂亮的图标 然后要看到的是在屏幕底部的你的app的名字
如果你在有效负荷里提供了一个标题
图标和app名称之间看到那个标题
这样可以使通知的内容大为丰富 
非常了不起 因为那么多的用户 
要看他们的手腕他们会看到那条通知
并根据其信息决定他们是要继续看
long-look 通知
还是把它先放下 过一段时间再到通知中心查看
所以要好好利用它
另一个要运用的功能是categary(类别)
Categories（类别）让你可以指定
使用记事板中的具体哪一种控制器
来发送某种类型的信息
所以如果你点击通知类别对象
你可以在这里看到 你可以给它设置
与在有效负荷中相同的名称所以你可以给每条通知设置
文本颜色和标题颜色
所以你就有很多办法
可以给通知设置多种属性
给用户更好的体验
现在是最后一步 如果你想让客户收到通知
听到通知提示音并收到触觉反馈
你需要设置音量值为默认值
这样可以确保
他们收到提示音和反馈
现在 我非常高兴地告诉大家你也可以用UI本地通知来实现这些效果
所以 这些设置不仅可以用在远程通知
现在 共有两个通知的概念
第一个是动态通知
你可能在有效负荷中收到一些信息
你需要处理这些信息你需要得到一种资产
你需要进行一些操作 然后你要上传
更多丰富的内容到你的动态信息中
还有一种静态信息
很多人问过我哪里会用到这种信息
静态信息总是由通知中心发出
所以如果用户点击通知中心发出的信息
他们一定会看到静态界面
所以你要确保这同时是一个很好的体验
使用静态通知的另一种情况
是你的动态通知下载时间过长
你可能正在处理一些数据从网络检索
一些资产 而且需要很长时间
那么我们就要称之为损耗
并以静态信息的方式立即为客户提供一些有价值的信息
现在我们终于可以聊一聊Glances
有了Glances就可以为客户提供
有价值的及时信息
你可能见过这样的情况在隔了一会儿
查看Glances时试图显示
内容有了更新
你在页面底部看到这个更新了的最近的标题字符串
在页面上端右部看到这个旋转的进度指示器
但是也许你看见它的时候正在下载信息
所以 让我们再看一遍
你正在下载内容一切进展顺利
然后 哦 内容去哪儿了 嘣
更新完全停止了
为什么会发生这种情况?
这种情况能够发生是因为在你的Glance控制器中
对于“将要激活”要采取稍有不同的处理方式
那么会发生的情况是当“将要激活”完成的时候这个系统提供的快照
就会从UI上移除
所以与你在Watch app里的做法稍有不同
你在这里要确保的是你要在“将要激活”完成之前
选择完全安装
你要得到你需要的所有信息
这样设置 就会完全安装UI
在我们移除那个快照的时候UI已经安装好了
整个镜像消失没有中间状态
在你的记事本中可能有你会看到的占位符文本
或者作用近似的文件
这些并不能提供真正好的体验
另一件你应该做的事是慎重对待重新加载内容
用户在Glances中切换屏幕时
"将要激活" 会出现在你的页面上
所以 如果它出现在你的页面上
而且在 "将要激活"中你正在下载一大堆东西 
进行文件处理 进行网络请求
恐怕你的效率会大打折扣
所以重新装载时一定要慎重
根据其他情形而不仅仅是 哦
他们看了我的内容
另外 与Watch app一样
要限制比较设计的数量
因为和之前一样我们将需要在最前面实例化那些对象
最后 如果你要在Glances中显示时间或日期
你应该使用WK界面的时间标签
或者绝对时间或日期
如果你要这这里找到一个例子
本次讲座在35分钟前开始
那么 如果现在是下午1:00让人有点糊涂了
我看到讲座在不断进行
我知道 但是它是在35分钟前开始的
让我有种下意识地反应像是 等等
现在究竟是什么时间
这种情况下比较好的做法是给出一个绝对时间
讲座在10:00开始
这就已经给了我可视性
"哦，既然现在是1:00 或 3:00"
我并没有糊涂
内容在载入中 进展顺利
我们已经谈到了很多东西
首先 我们谈到过优化
watchOS 1应用程序的网络的方法
这样要转换为watchOS 2
就更容易了 而且这很有可能
对你的应用程序有帮助
然后 我们谈到过改善
性能布局的方法 以缩短下载时间 提高运行效率
然后 我们又谈到了如何确保
你的Glances的内容可视
这样就不会让用户看到面前的镜像一片空白
最后在watchOS 2 还有许多需要核查的东西
除了在WatchKit中对watchOS 2的更新
我们还有ClockKit
来为时钟表面进行复杂设计
我们还有
WatchConnectivity框架
来进行所有设备到设备的交流
你还可以利用WatchKit 
本身的延伸NSURL
如果你想了解更多的信息可以查看我们的文档
我们有代码样本
如果你有技术问题 可以让论坛咨询
你会得到与开发人员技术支持部提供的相似的一对一的帮助
最后 如果你有任何问题
请随时与我联系这是我的email
今天我们还有一场关于AppleWatch 的精彩演讲
题目是 "Apple Watch设计建议与技巧"
演讲会涉及许多很棒的信息
帮助你开发了不起的Watch app
我们还进行了一场名为 "Designing
for Apple Watch" 的演讲
一场名为"Introductionto WatchKit
for watchOS 2" 的演讲 还有其它演讲
总之 非常感谢