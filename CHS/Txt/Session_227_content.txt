奈特·希拉德：早上好 各位 
早上好 或者我该说 “早安”
“美好的一天”“早上好”
我叫奈特·希拉德
今天我会再次介绍国际化应用的新特性
我会再次介绍我们之前介绍过的新的API
以及对当前API所做的改进 
让你的APP可以在全世界范围使用
首先 这是地球
有超过70亿人在地球上
对于这70亿人 苹果已经卖出了
超过10亿台iOS设备
而且 Mac OS X的安装数量
达到800万台
我们在全世界有超过450家实体店
还有140万个以上的APP
不断被全球范围内的开发者
和用户所使用着
这是一个惊人的数字但如果今天在现场
只需要一个数字 那么是这个
69% 现在苹果69%的收益来自于国际市场
现在这份收益是很大的
展望一下 我们来看个图表
苹果现在的收益超过二分之三来自于
美国之外的地方
这些用户对于
APP的使用有着不同的期待
包括语言的不同
地区的不同 和文化的不同这些你要记在脑子里
现在 我们一起细说
有趣的是 这里 我们41%
的用户来自中国和日本
现在 我想这里有个常见误会
国际化你的APP意味着要打入欧洲市场
事实上 这点很重要
但你还要谨记中国和日本
用户方面的挑战
也就是 他们不使用字母文字
没有字之间没有空格
而且 除此之外 UI上日文和中文会变的很短
因此 好消息是如果你使用我们的API
我们能够快速地对你的APP进行国际化
所以 今天我们会在谈起四个 
你必须考虑的四大块领域：本地化 格式化
信息处理和布局设计
那首先 说说本土化
现在 通过本土化 我是指
让你的APP使用用户的语言
字面上而言就是翻译UI文字  
进一步而言
就是翻译出文字背后你所要表达的观念
所以 从这点开始比较如容易入手 
观察用户如何操作系统
左边我们有OS X系统右边是iOS系统
这里有语言和地区面板
在左手边这里 在OS X截图上
你会看到首选语言列表
事实上 这里很重要的是这是个有序的语言列表
用户可以添加多种语言 并且  
如果设定语言无法用于UI的话
系统会自动选择下一种语言
例如 用户已经选了瑞士德语作为主要语言
但实际上我们没有添加瑞士德语
因此对于这个UI它会变回英文界面
这个恢复设置事实上很普遍
所以你要从开发者的视角对此进行思考
此外    
对于APP所显示的语言
我们有额外的地域优先
右边的OS X系统是默认关闭的
而iOS系统中要进入下一级才能设置
现在事实上这些会应用于相关单元  
用于显示特定地区时间 日程数据
所以说 对于目标语言
把你想翻出来的背后含义翻译出来并不容易
对于更多关于
优先语言和区域设置的差别
请看去年的讲演 "国际化高级议题"
那有更多相关细节
所以 我们提供了更多原来没有的设置  
如果用户有个人喜好
但我们也允许用户进行自定义设置
iOS9系统和El Capitan系统新的地方 
是我们可以自定义数字系统
正如你在这看到的
假设我们有个用户是讲乌尔都语的
他们选择了乌尔都语作为他们的首要语言
那么系统会恢复到
我们操作系统所显示的语言 英语
默认情况下 用户会看到标准的阿拉伯数字
虽然我们允许在iOS 9、OS X和 El Capitan系统中
自定义这些设置来取代已有的数字系统
很多人没有意识到的是全球有很多种类的数字系统
最上面有阿拉伯语数字
还有波斯-阿拉伯数字
常在中东地区使用
所以用户可以选择这种设置  
在整个操作系统中会有很有趣的变化
例如 我们有天气APP
现在由于开发者还未此进行任何修改 
但是我们称之为“本地化格式字符”
或者是NS数字格式器的API
已经可以免费改变数字系统了
在左边 我们有使用阿拉伯数字的用户
在右边 我们有波斯-阿拉伯数字的用户
我们发现他们每一位的数符在UI上都改变了
包括屏幕上方的时间标记
对于一个研发人而言 这很有趣 
我们称之为“本地化格式字符”这是免费的
现在 除了用户在屏幕上看的语言外
用户还会在你的应用上输入文本
在新iOS9系统里我们为印度语系语言添加五种新键盘
在右边 这里 你看到泰卢固语输入键盘 
而且 现在我们可以为四种语言
进行输入预测 包括韩语
墨西哥西班牙语 俄语和土耳其语
现在 从开发者的视角而言
我们发现通常这些字符并不是我们通常意义上的字符
在泰卢固语输入键盘这里我们加入了标记字符 
实际上 还有别的字符才能输入一个可识别单元
再往深一点说
所以现在我们已经看过了用户如何在你的操作系统改变设置
但本地化工具如何把字符翻译成用户看到的字符呢？
本地化工具主页面是字符串文件
字符串文有自己的格式
首先有注释 是c语言的注释语法  
其次是左侧的开发语言
目标语言在右侧
我们这里有德文字符文件  
字符文件储存在lproj目录文件包
在资源目录下
英语有自己的字符文件包 同样的德语也有 
我们自从XCode 6系统就允许你们
输出本地化设置一般是XLIFF文件格式
然后可以以字符文件重新输入到你的项目中
关于这其中更多的信息
我建议你们去看上一年的讲演
"XCode 6本地化"
所以 我们已经看过了用户是如何改变设定的
我们已经看过了本地化工具
如何把你屏幕上的字符翻译成你想要的
但是  作为一名开发者你如何利用这些设置呢？
这正是...
NSLocalizedString的功能
在Objective-C这是项庞大的工作
在Swift上 我们将其开发成高级功能
它需要五个参数其中三个是有默认值的  
有趣的是 在Swift中
我们做到了 其实设置评注这是无奈之举
我们这是要强调这是重要因素
它能够为你的翻译器提供上下文
在某些情况下给定单词可能是模棱两可的
这个注释参数会帮助你进行自定义
所以 重点是你想要翻译的字符 
注释是来注释解释它的
现在 对本土化字符是起了 
除此在外 我们也允许你可以获得本地化格式字符串
也就是说可以填入带有变量参数的字符串
所以 你可以称之为本地化格式字符串
带有特定格式的格式字符串
可以填入到有参数变量的格式字符串之中
而且事实上结合使用更为常见
根据NSLocalized-String的叫法
我们称之为“本地化格式字符串”
现在 看看它的应用如何
做一个简短的演示可能助理解
假设我们希望翻译的字符的位置是：X
现在 也假设我们有一个变量位置
且已经被翻译器植入到
用户的实际位置
这就是字符串文件的样子
左手边是等待被翻译的字符串
右手边是翻译好的变量
事实上我们会发现翻译好的变量仍然存在变量字符串
百分比添加意味着填充字符串变量
因此 这是在英语工环境下的我们定位在旧金山
也同样在日语环境下生效
这就是等效字符串
因此 你知道了这些之后
你脑中可能会出现一些假设
其中一个是 本地化格式字符串的顺序
应该会与英文版的相同
现在我们会看看为什么不是这样
我们根据NSLocalized-String结果
调动本地化格式字符串
我们想要翻译字符串 “copy X is Y”
这里的X是用户名Y是我们想要复制的东西
这里 我们通过hairForce1
这是克雷格·费德里吉选择InstaMessage进行处理
以及“照片”
在我们的Iproj中在不同的Iproj中的
字符串文件中开发者可以假设
参数将以同样的顺序出现
这可能对英语环境奏效
而事实上对德语无效
这些参数需要转化成德语中有意义的顺序
因此 这里就是定位器生效位置
以及可以添加位置格式参数的位置
这就使得原先的第二个参数
变为第一个反之亦然
因此 接着 开发者并不需要做任何事情
他们调用 本地化格式字符串 以及NSLocalizedString
但是 重要的是要牢记从开发者角度而言
你认为的第一个字符也许并不是第一个
因此 假如你设定操作会以相同的顺序执行
那么你可能需要重新考虑这个假设
因此 现在我们知道字符串文件是如何存储
以及存储在哪个目录下
但至此你可能会尝试做如下的事情
你将语言变量设置为你所选择的语言队列的第一对象
这与我们之前看到的UI元素即首选语言列表相一致
再者 你将后缀Iproj添加于此 
并调用资源通道
假设我们想要本地化一个停止符号图形
因此 我们在这里假设我们的单独文件包只有唯一一个
对应西班牙语的es.lproj
但是我们假设我们用户的首选语言是墨西哥西班牙语
运用这种特定的方法用户将不会得到任何反馈
为什么会这样
那是因为我们没有运用标准的NSBundle API
如果NSBundle不可用系统将自动
退回到可执行位置
因此es-MX将会退回到es
另外 我们还有其它智能的回退逻辑
例如从印度英语 回退到英式英语 
即在英国使用英语
因此 假如你使用这些API
你会得到合适的资源
以及回退
“资源图像”会给你图像提示
“完整资源路径”会给你完整的资源
‘URL资源’会给你
任何其他既定的文件格式
因此 我们可以看到 运用
NSBundle API可以使你更容易地找到你感兴趣的资源
另外 然而你可能会认为有些东西只能通过代码实现
现在 你们当中有多少人会写这样的代码
比 你想要翻译字符串“还剩下X天”
我们知道在英语中如果只有一天
我们会用还剩下X天  如果是两天
或以上 我们用“还有多天”
这适用于英语
适用于一天和五天
但对于其它语言而言复数形式方面
不具有同样的逻辑假设一个给定的数字
例如在俄语中对于单独一个 
我们有一种形式同样对于少数 许多
以及更多 也有一种形式
因此 这并不适用于
不同复数规则的语言
为了帮助你更好地了解此问题
我们提供了复数规则
出现已经有好几个版本
但需要强调的是...
字符串stick文件本质上是
你存储在项目中的一个plist文件
它是一个本地化资源
因此 它位于特定定位
Iproj目录之下
同样 你也有一个给定的密匙
该密匙链接了数字参数
取决于与不同的数字参数就会产生不同的成果
我发现这里有很多文本尤其是当你在这里添加俄语组件的时候
这就是说 你知道英语中对一个有一种形式
对其它则有另一种形式然而 俄语中
一个 少数 许多以及其它分别有它的各自形式
现在 当你要格式化stick文件的时候
我奉劝你查看一下“国际化和本地化指南”
这涉及到许多我们没有在这里
提出来的细节 例如如何格式化 如何创建文件夹
因此 从开发者的角度来说非常容易上手
再次说明 我们调用的是“本地化格式字符串”
是基于NSLocalized-String的结果
你传输的字符串就是字符串string词典的密匙
然后你传输一个数字参数
填充到返回的格式化字符串变量中
因此无论是对于英语还是俄语中的一天 两天
五天 都是正确的
在这里我们会发现俄语中的两天和五天是不一样的
让我们再多谈谈字符串stick
我们在iOS 9中有新的机制
可以让你在屏幕上利用字符串stick来格式化字符串
应当说这同样存在于EI Capitan系统中
首先 让我们一个普遍的问题
在你的Interface-Builder应用里
你设置了出现在你屏幕中央的字符串 “欢迎来到商店”
这可能会在iPad Air中奏效
但它不一定也会在IPhone 6 里奏效
甚至在IPodTouch效果更糟
解决这个问题的一个办法是运用自动布局以及特定限制
这常常是解决这类问题的办法我们晚一点会深究这个问题
但事实上 另一个解决这个问题的办法是
运用新的“可变宽度规则类型”机制
这指的是在字符串stick内添加条目
这样可以根据可用空间的大小
而产生不同的效果
在iOS上 这是指可用屏幕宽度M 
这指的是标准系统字体中
大写字母M的可见宽度
在这里我们要公布三种不同的尺寸
我们定义如果有20M可用
我们就将字符串显示为“你好”
如果是25 为“欢迎”
如果是50 则为“欢迎来到商店”
对于开发者来说这么使用相当容易
你可以在字符串stick文件中
调用NSLocalized-String秘钥 
然后将它设置为UI界面标签对象
适用于iPad AiriPhone 6
和iPod Touch
但效果是不同的
有趣的是 我们以英语为例子
但事实上它对各国的用户都有重要影响
通常将英语翻译为其他语言
都会比原文长
因此 这可以使你从不同的翻译版本中
选择出不同语言的给定字符串因此这是一个非常有用的工具
在OS X上情况是不一样的
同样的 在OS X上 你调用
然后传输你的字符串stick字典密匙
然后你调用变量拟合布局宽度
在OS X系统中 该整数变量
其实是一个任意数量
这可以是任意值因为它被界定为
字符串stick内的其他相对值
因此使用整数值20的效果是“您好”
25是“欢迎” 50是“欢迎来到商店”
总体上我们使之更加容易现在翻译字符串
更容易 更灵活了
世界上各种语言在屏幕上显示的字符串效果更好了
接下来 来说说格式化
简单的转化屏幕上的字符串一般是不够的
此外 你还得考虑格式化日期 数字 时间
在iOS 9和ElCapitan新品上还需要格式化名字
所以 首先从格式化数字开始
这里有一个正确的方法一个错误的方法
假设  我们希望向用户显示常数圆周率
一个天真的做法是使用格式参数百分比3F 
也就是说用3位精确浮点数参数
来表示字符串变量
在英文中 这个是适用的 圆周率显示为3.142
若你进行转换而你的用户是在德国进行操作的
他们会得到这个字符串
乍一看 好像是正确的
但事实上 德国用户得到的圆周率是3,142
因为在德国 十进制数字
不好意思 千位数和十进制数字事实上会被互换
也就是说我们在美国英语中用句号
他们则逗号 反之亦然
所以 利用这个事实
你可以调用本地化格式字符串
进入你先前用过的同一格式参数中
因为用户所在场所不同实现方式也会有所不同
意思就是 现在英语用户和德语用户的东西是一样的
高级选项下本地化格式字符串用的是NS数字格式器
Ns数字格式器也有不少改进这些我们都会讲到
在iOS9和El Capitan中NS数字格式器的数字格式不同
除了现有的货币格式外
现在 我们有货币ISO码格式
以及货币复数格式和外币账格式
很有趣 这里有外币账格式如果它是负数
那么它则会在括号里
在会计领域里 这很正常
同样地 我们增加顺序格式
意思就是 排序列表里数字的显示方式
输入42 你得到42nd
所以 除了格式化数字外
格式化日期也很容易出错
这里有一个用来格式化日期的很简单的方法
我们用这个格式参数初始化一个NS字符串
也就是说对于美国英语用户来说
它显示的是今天的日期 早上9点
所以在美国英语环境下我们会得到这个字符串
看起来是恰当且正确的
但对于意大利语用户来说我们得到了相同的字符串
而这个在意大利语种的意思截然相反
在意大利语中 意思是12月6日
此外可以对时间在稍微多些阐明
我们马上会讲到这点
所以试图解决这个问题的一个方法是
创建一个NS日期格式器
事实上 NS日期格式器是正确的解决方式
但这种使用方法是错误的
这里 我们创建一个日期格式参数
现在 日期格式蕴含字符串一个明确的顺序
你在这里提供的准确变量
将在你所在的场所扩展成你所看到的恰当的字符顺序
再一次 在意大利这个地方收到的字符串是错误的
事实上 通过在你的NS日期格式器上
创建日期格式和时间格式
就可以很容易的解决这个问题
我们为NS日期格式器提供若干即用型的格式
这允许你指定空格数量
使其适用于对应的字符串宽度
在这里 我们调用在这里我们为日期和时间创建ShortStyle
因此 在意大利收到的反馈是...
字符串相同但是变量不同
对于意大利用户来说现在意思是6月12日
这和美国英语用户看到的是一样的
现在有时候 这些日期格式和时间格式并未如你所需的那样明确
为了解决这个问题iOS 9和El Capitan的新特性
允许你在模板里创建本地日期格式
这里你提供一个模板
变量视你所给的位置情况重新排列
现在这是 当个人风格无法立即提供足够信息
比如说 用户希望第二个字符串也出现
但第二个字符串通常不是简洁的格式
使用模板 我们允许你有24个小时的时间
允许你重新安排月份和日期参数
我们已经看过如何格式化数字如何格式化日期
但是 同样重要的是如何格式化单位
事实上 这是个非常简单的事例
但是却很真实很真实的发生过
假设你想把数量6磅转换成其它语言
一个很简单的做法是转化字符串
你的左手边有X pounds
对于意大利语用户我们将它转换成X chilogrammi
即kilogram的意大利语是chilogrammi
这显然是错误的在英语里我们说6磅
在意大利语里 变成说6千克这个数量无法对等6磅不等于6千克
事实上 数量是不相等的6磅作为一个单位并不等于6千克
这样做是错误的
NSMassFormatter的方法会更简单些
NSMassFormatter
与NSEnergyFormatter
和LengthFormatter一样
假设在高级选项下你用的是公制单位
所以当你为可变重量分配一个浮点数时
它假设你用的是千克
所以你格式化一个NSMassFormatter
创建它的单位格式 
然后你调用string fromkilograms 重量单位是千克
在英语环境下它返回44.092
事实上这些单位转换成了美国常用的单位
此外 在意大利语种你得到的是20 chilogrammi
这是正确的你所提供的重量数量转换的条件也是正确的
所以 使用NSMassFormatter
可以非常容易的地显示目标单位
iOS 9系统的新特性
允许你格式化名字iOS 9和El Capitan
为了理解的实用性我们来看看并排在一起的两个名字
第一个是GraceMurray Hopper
这是一位著名的计算机科学家来自美国
她定义了“bug”这个术语并开发了第一个编译器
此外 我们来看一个中文名字“Wang Dongling”
这是为著名的书法家
他在杭州Apple Store外写书法
这两个名字都由三个部分组成
对它们进行说明的方法很重要同时也是不同的
在英语里我们一般只称呼名中间名和姓
在我们试图将这个概念套用到中国用户上时我们来看看会发生什么
顺序从左到右先前排在最后的名字
现在是第一个
中文名完全不存在了
从左到右 原先是第一个的
现在变成最后一个了
从这里可以看到应用在这些概念中的术语和标签同样重要
所以 我们引入了NS 人名组件
和NS人名组件格式器
曾经有个笑话说推特不适合这套方法
使用方面需要花些时间也有点困难
但是 换而言之它所做的是非常精确的
它将人名格式化了
这是使用方法
你初始化一个NS人名组件对象
你填入教名中名和姓氏
这是针对美国英语用户如何使用它
对于俄国用户来说
你可能需要将Fyodor
MikhailovichDostoyevsky
同样的 填写在相同的域里
接下来是如何将它格式化
你初始化NS人名组件格式器对象
正如我们用其他NS格式器所看到的它有一个格式组件
这里 我们指定简洁格式
然后 你在人名组件对象中调用人名组件字符串
这次调用的结果如下
有五种适用的格式
默认 简洁 中等格式  长格式和缩写  对每种语言来说
我们的方法是正确的
需要注意一些事情
事实上简洁格式的变化和下面这些有关系
即用户的位置以及个人用户在邮箱 联系方式
日历设置和加载设置
同样地 对于俄语的名字来说
取名字 中名 和姓氏
第一个字符组成的缩写名字是不存在的
所以 我们退回到简洁格式
这真的很简单可以立即对用户的名字进行格式化
这就是数字 日期 时间 单位 和名字
我们已经知道如何转化
如何在你的UI上转化字符串
如何将用户看到的单位格式化
此外 重要的是如何处理从用户那收到的文本
这涉及到考虑字符是什么
在不同情况下的不同变化
你是如何搜索那个字符的
同样地你是如何将它转换成其他脚本的
开始这部分之前我们来问一个哲学问题
什么是字符
开始之前 我们来问问这个表情符号里有多少个字符
最近 我们在iOS中引入了这个用键盘也可将其敲打出来
尽管表面上看它只包含单一的单位
但答案并不是立即就可以看出来
高级选项下 它由一 二 三 四 五
六 七 八个单独字符表示
事实上 这些是万国码代码点
并取决于你所使用的编码事实上它可能多于8个
比如说 可能是十一 
但是这也就是说 你不需要考虑它
现在 很明显的一个地方是列举字符串
假设有个字符串测试后面紧跟着我们刚讨论过的表情字符
现在你想在字符串内列举每个字符
并调用characterat index
这将返回到包含单独字符串的unichar
但这并不是你想要的
事实上 这显示的是问号字符
有时是三个不可打印字符
由于某种原因这其中有个中心
所以它不是 显然这个方法绝对是错误的
列举字符串的正确做法是调用“列举子字符串队列”
此外 并表达“组成成字符序列”
这就使得这个字符
在高级选项下的再现与视觉再现相匹配
因此 当我们在字符串上调用时我们恰好得到六个字符
这就是列举一个字符串的应用
但是有时你想把那个字符串转化成不同格式
iOS 9新特性具备这个功能
iOS 9和El Capitan具备能
转化字符串的功能
假设字符串是“istanbul”
首字大写字符串的一个简单方法是
只需调用“首字大写字符串”属性
对于美国英语用户而言这看起来是正确的
事实上 对于英语用户来说这是正确的大写方式
但对于使用土耳其语的人来说
小写字母i变成了大写字母I
为了能立即实现该功能
你可以简单的在那个字符串上调用“本地化首字大写字符串”
因此你可以得到正确的首字大写的字符串
也就是说字符串的第一个字符是大写的
除了“本地化首字大写字符串”
我们还提供了“本地化大写字符串”
和本地化小写字符串
这就是它们看起来的样子
所以 你立即就可以通过
简单使用已经存在的API的本地变量
善用这些字符
这就是如何转化字符串的例子
假设你想寻找一个字符串
回到一开始的问题字符是什么
在用户需要搜索一个指定的字符串时
他们期待的是什么
假设这里有一个变量代表德语的 uber
其中有个字母U
刚好又是元音U
用户可能会想按照通常英语书写格式
写出小写的uber就可以找到字符串
作为开发者你可能调用“字符串范围”进行寻找
但结果是0
在iOS 9和El Capitan新特性中
正确的搜索方法是“本地化标准字符串范围”
这可使你在其他对发音不敏感的字符串和对大写不敏感的字符串里
搜索这个字符串
此外 它还为指定用户位置提供修正值
所以 在这里通过简单调用这些新API
我们通过“大写U-变音-ber”里找到了 uber小写字符串
除在字符串里进行搜索之外
有时你可能想转化整个字符串
这就是转换的由来
转换允许你在整个字符串的大写字母和小写字母变量之间进行转化
此外他们允许你进行万国码标准化
也就是说 他们可以元音字符拿出并将它们分开
比如带有一个元音变音的A变成了A加元音变音字符
此外 还允许你进行脚本对脚本的转化或直译
也就是说中文汉字字符可转化成拉丁文字符
先前 这种转化只能在Core Foundation进行
因为iOS 9 和El Capitan新特性
你可在Foundation里进行转化
你只需简单调用“字符串应用转化”
然后提供一个字符串或常量
表达你想要如何转化字符串转化成
这里 我们想把这个表情字符翘起拇指
或 直译成 XML 表达方式
做到这点只需调用“字符串应用转化”
并提供“NS字符串转化之XML十六进制”
此外 我们也为汉字字符与拉丁文
以及欧洲不同脚本提供了这种转换功能
所以 很容易
就可以转化 转换不同脚本间的字符串
并将单个字符转换成不同的表现方式
这就是在我们的系统内
如何处理从用户那收到的文本
此外 重要的一点是在屏幕布局视觉元素的方法
这就是自动布局的由来
自动布局很早就发布了
最初的意图是在适合你的屏幕数量的基础上
用不同的方式格式化指定UI
在我们为iOS 和 OS X发布了不同的形状因子后
自动布局就变得越来越重要了
自动布局有一个附加的好处
就是将应用的UI本地化
这是UI外观的样子
所以 假设 比如说我们想在iCloud中增加新日历
这是一个英文版本的UI外观
这个UI功能或许已经相当完善
当你在不同情况下测试时它可能会起作用
可能会与在运行时间内增加的内容不断地相互作用
但是对于它如何运作
你并未在其他UI或语言中设置修正值
那么它就可能打破你到刚才为止所做的这些假设
这个UI和前面的一样 语言是希腊语乍一看 它似乎可以用
当你再仔细看时 你会发现事实上这个字符的长度等于3.5个字符
UI的附加部分也出现这个问题
现在 我要说的是在不同位置进行测试时
没有必要本地化app 
多亏了XCode皮肤菜单
现在你可以使用双宽度伪距语言和右至左伪距语言
测试你的app
使用这种方法可以不需要转换
就可以在在不同的环境中查看UI是如何操作的
假设你将使用自动布局
并已经正确设置压缩优先权
和抗压缩优先权
这就是出来的UI外观
可以看到 先前是3.5个字符现在变成了12个
差别非常大
我们不通过指定静态限制
而是根据它可增长限制允许标签扩大可用的空格
也就是说限制少于或等于到屏幕边的宽度
更多信息请重新看看昨天的演讲
自动布局的神秘之处 第1和第2部分
里面有很多信息
关于如何在世界范围内以及不同的设备方向上
在你的app上使用自动布局
在UI中布局 还需要注意一点
即表格单元格会自己变动大小
这涉及到动态类型
左边是美国英语UI右边是北印度语UI
注意到了吧 事实上单独的单元格高度并不相同
这是因为单元格自动改变大小
我们允许单元格占用
由于语言行高度变化而多出来的空格
若你使用标准UI控制和UI视图
就可以看到 而且是免费的
作为开发者 需要注意的一点是你不能假设
提供的表格单元格 有一定的高度
在不同位置它可能扩大以占用不同数量的空格
在iOS 9中 很重要的关键一点是我们完全支持从右到左的语言
左边 是英语UI右边是阿拉伯语UI
这些变化非常大
我们已经完成了标准控制和视图
并转化了综合控制流
在英语中你将按照从左到右从一个菜单转到详细菜单
现在 在从右到左语言里你按照从右到左的顺序进行
可以看到这些雪佛兰已经转移了
附属视图在另一边
大部分文本被翻转
需要记住一点 在UI中
并不是所有的东西都可以移动可能不是你可以自行移动的
有时你想自定义行为
可以看到“请勿打扰”的图标
事实上还是从左到右拉丁文文本也还是从左到右
更多关于这部分的信息建议你查看昨天的演讲
“国际界面的新UI工具支持”
说的是在iOS9中
如何使用标准控制对完全从右到左支持加以利用并加以利用
此外 如何在你的个人app上
对其进行自定义
总而言之 在将你的app国际化时需要注意
第一 定位信息
字符串是如何被转化的
隐藏在译文里的概念是如何转化成用户所需的
此外 格式化 单位 日期 数字时间 名字是如何格式化成用户所要的
文本处理 你如何从用户那获取文本并在文本上执行操作的
又回到这个问题字符是什么
这是你在处理文本过程中需要时刻牢记的
最后 我们说到布局
如何将UI要素展示给国际用户
很幸运地是如果你用的是现有API本地化变量 以及标准视图和控制
你就可以免费获得这些功能
如果你牢记这点你就会发现国际化为你的应用打开了世界的大门
更多信息请查看这些幻灯片或查看这些文档
联系开发者论坛或App框架专员 保罗·马科斯
也可查看相关会议
这些已经都有了你也可在你的app或在线查阅
今天从早上11:00到下午1:10
我们将提供国际化实验室请一定要参加
我和我的团队都将在那里为大家解答
关于app国际化和本地化的相关问题
谢谢