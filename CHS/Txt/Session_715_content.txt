CloudKit技术讲座
<br/> 大家下午好 欢迎参加
CloudKit技术讲座 
我是尼哈 沙尔曼 
是CloudKit团队的工程师 
我知道 你们一些人可能对我们的平台十分陌生 
而且是首次遇到CloudKit框架 
而其他一些人可能已经开发一些APP并且在应用商店中上架 
在本讲座 我们将介绍一些对所有人都适用的技术 
现在让我们开始 
什么是CloudKit？
去年我们推出了CloudKit
<br/>这是一种全新的方法 
让你能够与Apple的iCloud数据库服务器对话 
利用此功能
我们为你提供一系列的内置技术 
例如大文件存储等 
我们提供隐私保护标识符
让你能够有效地管理
任何拥有iCloud帐户的用户 
首先也是最重要的
这是一个公开的开发者API 
因为我们想希望你利用这个平台的强大功能 
为你的用户开发有用的APP 
最后但并非不重要的事情是
<br/>Apple大力投资 
开发这项技术 
仅在去年当我们首次发布此项技术时 
我们就去推出
一系列重要的客户端
包括iCloud drive
和iCloudphoto library
今年我们增加了一些新客户端 
例如 Notes APP News APP
和WWDC APP 本周你们很多人使用过这些APP
而且你们的手机上还有这些APP 
如果你不熟悉这些应用 
我请你回顾一下
去年的开发大会上的
CloudKit讲座
和AdvancedCloudKit讲座 
这些讲座详细地介绍了新API 
我强烈建议你去看看 
我们来先讲重要的事情 
你们很多人一直在使用
令人称道的Swift 2新功能 
我很高兴宣布对于iOS 9操作系统 
在Swift中使用CloudKit将会更加容易 
让我们来通过一些例子
来深入了解 
直到现在 当你在CK记录中设置和获取值时 你还必须
使用陈旧的键值对象设置语法使用对像语法设置键值
这些工作将由CloudKit API来完成 
但是在iOS 9中  在处理CK记录时 
你可以使用更为熟悉和
现代的字典订阅语法 
除此之外 我们还利用库标识符和轻量级泛型
让你在Swift中编写的CloudKit代码
和Objective-C代码
更不容易发生类型错误 
以前你可能需要为记录设置一组任意类型的对象
来确保安全和正确的CKRecords运算 
现在利用iOS 9中的最新工具 
当你做这些工作时 编译器会发出提醒 让你及早发现错误 
编写更可靠的代码 
对此 请我简要回顾
CloudKit存储架构 
CloudKit的最顶层称为CloudKit容器 
它分为两个数据库 
一个公用数据库
它是你的所有用户共享的
庞大APP数据 
另一个私人数据库  
仅供用户的iCloud帐户使用 
这个数据库包含
特定iCloud帐户跨越所有用户设备
所共享的数据 
在每个数据库内 我们还有一个分层离  
用于存储记录 
它们称为记录区 
CloudKit使用这些数据库
为你存储在其中的记录提供更多的功能
公用数据库有一个称为默认区域的存储区域
用于存储所有记录 
私有数据库也有一个默认区域 
利用这一特性  你能够创建
多个自定义区域 
这些区域可以为你的记录提供更多的功能 
让我来介绍
我们将在今天的讲座中所要探讨的内容 
你可能还记得 在去年我们讨论了schema 
我们介绍了一个APP的示例schema 
这个APP通过云端将内容提供给各方 
这里有一个简单的schema其中有一个party记录类型
和clown记录类型 这两个类型的记录
存储在公用数据库之中让我们来运行这个示例APP
并且为它开发更多的功能
我们将这个示例APP称为clown central 
因为它是关于小丑的  
我们将使用一个示例来介绍
当你使用CloudKit进行开发时 
可以运用的经验和技巧 
我们的APP有一个简单的UI
在这个UI中
我们显示派对列表 在这个讲座中 
我们将会介绍一系列的功能 
现在
通过示例我将会讨论四个主要方面的内容 
第一个方面是错误处理 
去年 我们曾经讲到过
CloudKit APP
是否处理错误
不仅关系到APP的好坏
甚至还决定APP是否
正常运行或者完全崩溃 
的确是这样的  
当你使用API时 
你会遇到一组特殊的错误代码 我会讲解这些代码 
并为你提供一些一般性指导原则 
告诉你如处理错误 
对此
我们将会介绍一系列的技术 
你需要记住这些技术
当你维护本地缓存 
进行CloudKit开发工作时 可以使用这些技术 
然后我们将会讨论如何设置订阅 
以不断地更新缓存 
最后我将介绍一系列的
通用性能技术你应该记住它们
并用于你的APP开发 
因此我们将会讲解许多内容 
现在让我们讲解错误处理 
我首先要讨论的事项是关于帐户的 
CloudKit并不需要
你具有一个iCloud帐户 
我们允许匿名只读访问公用数据库 
比如说 为了便于演示 
clown central APP将需要一个iCloud账户 
我们将讨论一系列的功能 
这些功能使用私有数据库 
根据定义 将需要一个通过身份验证的帐户 
默认情况下 数据库写访问
需要一个帐户 
需要注意的是 检查当前用户的
帐户状态的方法是使用CK容器内可用的
完成处理API进行检查 
在进行CloudKit开发时 由于身份验证而造成的错误
将会导致失败 
并返回CKError身份未验证错误代码 
处理这种错误的一般性做法是
重新检查帐户状态 
例如 缺少iCloud帐户 
当你检查账户状态时 
你会收到“无帐户” CKAccount状态 
在以前
你没有办法知道
因为帐户缺失而失败的请求
是否会继续 
正因为如此
在iOS 9和OS X El Capitan中 
我们添加了CKAccount变更通知 
当用户帐户发生变更时 
例如无登录或退出 
或者iCloud drive功能开关
被开启或关闭 将会发送此通知 
为此 我想介绍一些最佳实践方法 
以处理APP中的账户缺失错误 
一种看上去不错的方法是
<br/>当遇到这种情况时 
抛出一个警告
告诉用户他们没有登录iCloud
<br/>因此不能继续 
但是这对用户来说没有帮助作用 
因为他们可能会忽略警告
重新尝试操作 
从而会继续看到警告 
我们建议的方法是
巧妙地设置你的UI 
禁用需要帐户的功能 
为此你可以使用
CKAccount变更通知 
当你收到此通知时
<br/>应重新检查用户状态 
查看帐户是否可用
如果可用 则重新启用UI 
帐户缺失仅仅是
操作临时发生故障的的原因之一 
但是它可能在未来的某个时间点发生 
例如 在较差的网络条件下 
你可能遇到这种错误 CKError网络故障 
或者CloudKit服务器忙时 也会发生这种错误 
你可能会看到以下错误之一：
CKError服务不可用
或CKError区域忙 
遇到这种错误时
你应该在稍后重试操作 
但是你可能会想 
我应该在何时重试这些操作？
你不需要猜想这个时间值 
发生这些错误时 在我们发送给你的用户信息字典中 
在“CKError retry after key.”键值中
<br/>有一个专用的值 
这个值就是在重新尝试操作之前 
需要等待的时间 单位为秒 
现在让我们来看一个类似的例子
在这个例中 我们的APP有一个bug 
可能导致APP 
在极短的时间内 向服务器发送大量更新 
如果这个APP始终这样做
而且许多用户触发这个bug
将会导致iCloud服务器崩溃 
为了避免这种问题 
我们需要使用一个
名为CKErrorRequestRateLimited的
专用错误代码 
CloudKit利用这种方法
避免APP bug造成
iCloud服务器崩溃 
如果请求数量达到限值 
在一定的时间期限内
将不发送请求给服务器
那么这个时间期限是多少呢？
系统通过“CKErrorretryafterkey”
来告知这个时间期限 
因此 当你遇到这种错误时
请在用户错误信息字典中查找这个键值 
请等待一定时间 然后重试你的请求 
现在我想介绍你可能会遇到的
另一种不同类别的错误 
这类错误是由于schema设计方式造成的 
具体地说
如果你的schema 允许多个用户更新
Cloud数据库中的同一条记录 就可能发生这类错误 
假设我们想要为APP增加一项功能 
从而允许用户
将他们自己添加到派对之中 
但是不幸的是
在设计此APP的schema之前
我们并没有参加去年的关于高级CloudKit的讲座 
这是我们设计的schema 
对于派对记录本身
我们决定存储
一个引用数组 它指向想要
参加派对的人员记录 
现在你可以看到 每当我想要添加一个参加者
到一个特定的派对时 
我们都会修改同一个派对记录
让我们通过一个例子来了解 当两个不同的用户
想要将他们添加到派对时 将会发生什么 
由于WWDC bash晚会即将开始 
因此让我们将这个记录
保存到CloudKit 
在我们了解当两个用户下载此记录时
将会发生什么之前
我想介绍一下
记录变更标记(record change tags)是什么  
你可以认为它们是一个字符串
<br/>服务器使用它
来标识特定的记录版本 
保存在服务器上的记录版本
通过变更标记A表示 
它是CKRecords的只读属性 
但是只有已经保存的记录才会有这个标记 
假设两个用户John和Alice都下载
这个特定的记录版本 
你可以看到他们接收相同的变更标记A 
现在 John首先将他自己作为参加者添加到派对 
然后尝试将他的记录添加到服务器 
现在这条记录被保存  我们将John的变更标记  
也就是A 发送到服务器 
服务器发现变更标记匹配 
因此接受John的更改 
由于服务器记录版本已发生变化 
服务器将生成新的变更标记 在本例中 此标记为B 
并通过记录保存响应消息 将它发回给John 
现在Alice上线了 她决定参加派对 
她尝试相同的操作 将她自己添加到数组中 
并尝试保存她的记录版本 
这时你会看到
她发送旧的变更标记A
服务器将会提醒 
她正在尝试修改已经不存在的
服务器记录版本 
她遇到了冲突 
在她的设备上
CloudKit
通过“CKerror:server record changed” 
专用代码向她告知这种冲突 
其背后的机制并不神秘 
我们不必想办法
来解决这种冲突 
你自己就可以解决 
因此我们会为你提供
尽可能多的有用信息 
让你能够自己解决冲突 
当更新请求被拒绝时  我们为你提供的最早
也是最重要的信息是
服务器中的记录版本信息 
在哪里可以找到这些信息呢？
同样地 你可以在用户错误字典中找到它 
在本例中其值是CKRecordchanged
errorServerRecordKey键值 
在本例中 当我们将它
用户错误信息字典中提取出来时 
我们会发现服务器中的记录
已经记录John将会参加派对 而且会发新的变更标记B 
现在 除了服务器记录之外 
我们还会为你返回更多的信息 
这些包括在Alice对记录进行任何修改之前的
原始记录键值 
以及客户端记录键值 此键值包含
Alice尝试保存到服务器的记录 
现在 我想强调的是  
在大多数情况下在解决冲突时
最重要的事情 也是你需要做的事情是 
在发生错误之前 及早保存你所做的修改 
而不是等待错误响消息
向你返回服务器记录 
在本例中 你获取服务器记录 
我们将对想要保存的这条记录进行相同的修改 
也就是把Alice作为参加者
添加到派对 包括她和John
<br/>并将这个记录版本
保存到服务器 
你会发现服务器中的变更标记为B 
当我们保存记录时 这些变更标记将匹配 
服务器将接受保存操作 
在这里 我们应该知道
如果我们为这项功能设计更好的schema,
我们可以避免这类错误 
稍后我将会讨论schema 
你会发现 在尝试修改相同记录时 
每次不同的用户都要进行这种修改 
这并不是最好的方法 
让我们来了解一种新的schema 
让我们来看CloudKit操作 
我想为APP添加一个新功能 
以允许用户存储派对照片 
这次 我们需要在派对与照片之间
建立一对多的关系
照片将拥有它们自己的记录类型 
但是我们不想将它们存储到照片记录 
我们应该怎么做呢？
我们可以通过反向引用照片所属的派对
来保存照片记录 
你可以看到
当我们保存照片记录时 
不需要更改照片所属的派对记录 
让我们来了解如何保存这些记录 
在我们的APP中
<br/>我们使用便利性API
利用完成处理操作保存记录 
每次保存一个照片记录 
但是
用户可能一次存储多张照片 
对于这种情况
目前我们使用便利性API
通过不间断循环来保存多条记录 
让我们来看这些操作的
背后机制 
APP多次调用便利性API
来保存多张照片  
在系统中 必须通过一组默认值  
将它们封装在CK操作中
当我们尝试将记录保存到服务器时  
这些操作中的每个操作至少发出一次网络请求 
我们不希望所有这些请求导致服务器崩溃 
但是我们造成了系统瓶颈 
系统一次发送多个请求 
以保存这些记录 
现在 除了这个瓶颈之外 
还需要考虑另外一件事情 
这些操作中的每个操作都请求一次保存一条记录 
在本例中 
将会产生大量的网络请求 
从CloudKit APP开发人员的角度来看 
这显然不是一个好主意 
我们希望通过一次网络请求
批处理这些记录更新操作 或者 至少应该
使用最少的网络请求来处理它们 
我们应该怎么做呢？
我们使用与便利性API
相对应的CK操作 
几乎每个一次处理一个项目的
便利性API都有对应的CK操作 
这些CK操作能够批处理记录更新 
在本例中 我们想要使用CKModifyRecords操作
将多个记录作为一个数组提供给记录保存资产
以一次保存多个记录 
让我们来看此操作的背后原理 
现在我们可以将组合所有记录
通过一次操作来保存它们 
此操作进入系统队列 
系统能够使用最少的请求数量 
保存这些记录到服务器 
我们就消除了瓶颈 
同时 我们最大限度地
减少了请求数量 
我希望你们所有人在你的APP中
使用便利性API时 使用这项技术 
如果你考虑将它用于
在多个位置或同一个类型的循环中 处理同一种类型的请求 
应考虑使用CKOperation API
以批处理这些请求 
这将会减少请求数量 
同时提高系统的效率
好的 现在我们来讨论批处理 
这是我们需要考虑的
另外一件事情 
服务器限制一次可以设置
的批处理数量 
这些限制包括
每个请求中的项目数量
和请求总数量 
请求总数量是
在隶属于该请求的记录中
设置的键值数据之和 
必须注意的一点是
<br/>通过CKAsset API
作为批量存储的组成部分存储的数据量
并不会计入
这个键值数据 
但是 如果你的请求想要绕过任何此类限制 
你将会收到一个名为
CKErrorLimitExceeded的专用错误代码 
对于这种错误的处理方法 
我们通常建议开发人员将将项目对半拆拆分
成为批处理 进行两次操作而不是一次操作 
如果再次遇到相同的错误 
则应该进行同样的拆分 
如果仅有批处理中的部分项目发生错误 应该怎么办呢？
由于批处理包括很多项目 
但是只会返回一个错误 但是我们仍然希望向你
告知其中每一项错误 
为此
我们使用一个名为
CKError partial failure的专用错误代码 
这是一个顶层错误代码
你并不希望直接处理它 
但是与前面一样 
在用户错误字典中 
如果你按项目ID键值查找 CKPartial错误键值 
我们将会提供
与你的批处理错误相应对应的
项目ID字典 
例如 在本例中 有一个项目ID 
发生CKRecord无效参数错误
另外 批处理中的其他项目
可能发生错误 也可能没有错误 
你需要打开这个字典 在字典中进行查看 
单独处理该错误 
如果考虑自定义区域中的原子更新(atomic update) 
情况会略微发生变化 
需要注意的是 自定义区域
具有CKModify记录操作功能 
能够发送原子更新 
在这种情况下 服务器将整个批处理作为一个操作予以接受 
或者拒绝整个批处理 
如果批处理中的一个项目
发生CKError无效参数错误（与本例相同） 
其余项目ID将包含错误信息
和CKRecords批处理请求失败专用错误代码 
在处理原子更新时 
必须检索字典内容 
处理未包含在
批处理请求失败中的所有错误
关于如何通过优化方式将我们的照片记录存储到
Cloud服务器 我们就讲到这里 
下面我们来讨论另外一半
<br/>即如何下载 
我们使用CloudKit查询来进行下载 
现在 利用我们设计的schema  
下载特定派对的照片变得十分简单 
在这种schema中 
照片记录引用它们所属的派对 
我们只需要创建一个CK查询 
这个尝试匹配将这个引用
与已知派对记录ID进行匹配 
现在 如果我们发出查询 以下载一个派对的照片 
一些派对可能有大量的照片 
我们是否需要全部下载它们呢？
让我们来看如何使用CKQuery操作
发出特定派对照片
优化下载查询 
首先需要解决的问题是：
我们并不知道有多少张照片隶属于一个特定的派对 
我们应该下载多少张照片呢？
下载全部照片并没有意义 
对于我们的UI来说 
应该回答这个问题 
如果你看一下我们这里的示例UI 
你可以看到 当我们调出一个特定的派对时 
我们看到20张照片 
正确的做法是 
当我们首次发出查询时 
查询应仅返回20张照片给我们
我们可以使用CKQuery操作的结果限值属性
来做到这一点 
当你不知道总共会返回多少个项目时  
这个属性能够帮助你
管理特定批处理中的项目数量 
因此 这个属性也可以用于
CKFetch记录变更操作 
此操作可能会返回大量的变更 
而你并不知道自定义区域
和CKFetch通知变更操作会返回多少个变更 
其原因与前面一样 
好的 现在我们只想下载20个记录 
这样更简单一些 
但是 我们可以做得更好吗吗？
让我们来看我们的下载 
我们再次来让UI为我们回答这个问题
当我们查看一个特定派对时 
我们看到的是特定派对的经过裁剪和
缩小的缩略图
但是我们存储在照片记录上
而且默认情况下将会完全下载的
可能是我们使用iOS设备
高画质相机拍摄的
照片的高分辨率版本 
如果我们能够将该信息添加到
我们的照片记录
让我们能够调出部分记录 将会很有帮助作用 
但是 我们如何调出部分记录呢吗？
我们通过对CKQuery操作
使用desiredKeys属性来完成此任务 
在本例中
desiredKeys属性接收一个键值属性数组 
这些键值是符合查询条件的
所有记录的键值 
因此 如果我们将它设置为thumbnail 
你可以看到 当查询返回时 
载入的数据量大幅减少了 
这也可以用于CKFetchRecords操作 
在这种操作 你可能已经提前知道你想要获取记录的ID 
但是你的UI
或者因其他原因 你只想要
下载部分记录 
另外 也可以用于CKFetch记录变更操作 
默认情况下 此操作下载任何已经变更的记录的
全部记录内容 
现在 如果我们只想显示20张照片 当我们首次向用户
显示这些照片时 
照片应该以特定的顺序显示 
假设我们想要按照
照片在iCloud上的存储顺序
显示这些照片 
我们可以对CKQuery设置sortDescriptor 
并使用这些描述符初始化CKQuery操作 
你可以看到 在这里我们将sortDescriptor
设置为创建日期键值 这是一个系统字段 
保存在服务器上的所有CKRecord都有这个字段 
我们将它设置为降序 
在这里 需要注意的是 由于它是一个系统字段 
因此你需要可以在服务器上使用此字段进行排序 
你可以通过iCloud Dashboard进行此设置 
应该在保存记录之前
进行此项设置 
否则 在设置之前保存的记录
将不会有此项索引值 
我们想要获取所有记录中的小部分记录 
你可能会想 
如何向用户显示其余记录？
假设用户开始向下滚动 
想要查看下一批照片 
在这种情况下 我们如何实现分页显示？
我们通过分析查询处理语句返回的结果
来处理这个问题 
当查询完成时 
我们不仅获得查询返回的所有结果 
还获得一个CKQueryCursor 
这是一个不透明的标记符 
显示你在整个查询结果中所处的位置 
因此你应该存储
首次查询操作返回给你的QueryCursor
当你想要
获取下一批结果时 
你可以始使用先前存储的Cursor初始值 
传递这个值 来初始化
另一个CKQuery操作 
当我们通过这种方式优化CKQuery操作时 
应确保对新查询操作设置相同的必要键值 
和结果返回数量限值 
这将优化下一批照片查询结果 
关于下载记录就是这些 
现在我想要切换主题 
介绍一些在使用CloudKit时
维护本地缓存方面的技术 
让我们首先来讨论一项新功能 
假设我们希望用户能够为派对添加一些
简短的个人评论 
假设这些评论是个人化的 
我们想要将它存储到用户的私人数据库之中 
我们不想要在用户每次查看或修改这些评论时 
获取这些评论 
我们希望提供
提供某种离线访问功能 
你可以看到 在这种情况下 
我们需要的是在特定的设备用户上
提供少量的数据 
在这情况下使用CloudKit时 
维护本地缓存是不错的做法  
让我们先来看如何从私人数据库
下载内容 
前面讲过 我们能够将记录存储到私人数据库中的
自定义区域 此区域为我们提供一些附加功能
让我们来进行这些操作 
我们在私人数据库中创建一个新区域 
其名称为NotesZone 
我们可以通过两种方法 获取此区域中的数据 
与前面一样 我们可以使用CKQuery操作 
并对它进行优化 方法与前面一样 
我们还可以通过CKRecordsFetch操作
使用delta下载 让我们仅获取
区域中仅发生变更的记录 
我们说过 此操作只适于
具有获取变更功能的区域
目前 私人数据库中的所有自定义区域
都具有此功能 
如果你想要更详细地
了解delta下载的工作原理 
我建议你
回顾去年的高级CloudKit讲座 
这个讲座详细地介绍这种操作是如何工作的 
假设我们想要使用这项功能 
我们开始获取变更记录 
我们将APP对象存储在
一个本地数据库之中 它可能是核心数据 
或你选择的其它数据库 
在这个位置我们编码APP对象 
这里有一个party对象 
我们为它添加了一个notes键值
对应于用户为这个派对添加的评论 
我们将APP编码到本地存储 
当处理相应的CKRecords时 
我们想要将记录存储在Cloud之中 
我们可能考虑编码整个CKRecord 
因此我们缓存这些记录和我们的APP对象 
让我们来看会发生什么 
你可以看到 CKRecord还具有为其设置的
所有APP对象键值 
当然 在我们编码时
我们会复制所有的APP键值 
当我们编码APP对象之后 
以及当我们编码CKRecord时 
这就是我们想要的 
你看到 CKRecord对象中的橙色字段
属于CKRecord 
服务器通过这些字段
来识别记录的特定版本 
它们称为系统字段 
在本例中 你真正的想要是的
记录的系统字段的编码方法 
你可以使用编码系统字段和
编码器API对CKRecord进行编码 
你需要使用这些代码
对这些系统字段进行编码 
我们强烈建议你使用这种方法 
如果遇到这样的情况 你需要回顾以往的讲座 
现在让我们来看当我们开始编码系统字段时将会发生什么 
我们想要高效地存储
CKRecord的重要信息和相应的party对象 
现在 让我们来看 尝试修改一个party对象时  
将会发生什么 
我们已经使用前面所述的方法存储这个对象的系统字段 
为此 我们使用CKRecord的编码器初始化函数 
你可以看到 当我们调用它时 
我们获得先前存储的所有系统字段 
为了简洁起见 我仅显示记录ID和我们已经看到的
变更标记 
对于这个CKRecord 你完全可以设置
此记录发生变更的键值 
比如说 我们想要变更派对名称 
将派对名称更改为WWDC bash 
我们为这个键值设置为新的值 
并在服务器上保存新记录 
必须指出的是 当存储记录的变更值时  
你不必设置记录的
所有键值 
我们正式地维护和存储
本地缓存 让我们来看如何从自定义区域
获取变更值 以使缓存保持为最新 
与前面一样 我们使用
CKFetchRecordChanges操作
来完成这个任务 
此操作提供区域中所有已经发生变更的记录 
真正的问题是 应该在何时使用此操作？
因为 单独使用此操作并不会告诉我们 
存储区域在何时已经发生变更 
为此 我们需要
通过CKSubscription API来使用通知 
更具体地说 由于区域中的变更
并不是你想通知给用户的变更 
因此在这里我们应该使用静默通知 
在下一节中 我将介绍
始何启用并运行订阅 
尤其是当你想要使用静默订阅时 
让我们简要回顾
什么是订阅?
订阅内容是根据
用户存储在服务器上的定期内容查询请求而提供的
你或你的APP通过这种方法
接收相关内容变更远程通知 
有两种类型的订阅 它们的不同之处在于
你如何定义哪些变更是你需要关注的
第一种是查询订阅
允许你存储一个预设条件 
如果变更符合预设条件时 
就是你所需要的变更 
第二种是区域订阅 在这种方法中 
区域中的每次记录修改
都被计为一个相关变更 
因此 很明显 在本例中 我们需要静默通知 
当我们的区域发生变更时 将会发送此通知 
但是 我们首先需要了解当你处理各种CloudKit订阅时
所需要的常规设置 
对这个设置 我想强调的是 
如果远程通知并非来自于CloudKit. 
你仍然需要
设置远程通知 
让我来阐明其含义 
首先 你仍然需要在开发者门户中 
为这个APP ID 开启APS功能 
当你开启CloudKit功能时 
将会自动为你开启此功能 
第二 在测试你的APP而且预计会收到远程通知时  
你需要在你的APP中将APS环境键值
设置到P列表之中以用于开发工作 
第三 你仍然需要
通过UI应用API进行注册 
如果你计划在你的App中显示用户通知
至少 你需要调用远程通知注册  
并且提醒用户 
注册用户通知设置
由于我们需要静默通知 
而且会通过CloudKit服务器
向我们发送通知 我们应该如何告诉服务器 
此通知应该是静默通知呢？
我们通过与CK订阅相对应的
CKNotification信息来完成这个任务 
我们将它作为入口点
告诉CloudKit服务器应该发送哪种类型的
推送内容和以哪种优先级进行发送 
让我们来说说优先级 
如前所述 我们配置CKNotification信息 
以告诉CloudKit服务器
这是一个静默通知 
它需要以低优先级发送 
如果你为CKNotification
信息设置这些键值 
服务器将为你发送高优先级推送内容 
无论它是提醒正文 徽标或声音名称 
我们将它们称为订阅使用的UI键值 
如果你发送其中任何一项 
服务器将发送高优先级推送内容 
这意味着 需要立即发送 
所有其他推送内容将会以中优先级发送 
并计入静默通知数量 
让我们来看你需要
什么样的静默通知设置 
首先 你需要为你的APP
开启远程通知后台模式 
你可以通过Xcode中的功能窗格来启用它 
你应该记得选中该选项 
第二 你应该确保
你实现的APP
接收远程通知 
获取应用委派的API
完成处理通知
将会在后台调用其他版本 
在计划使用静默通知时 
请确保已经实现这个版本 
第三 我们需要再一次告诉CloudKit服务器 
通知是静默推送通知 
我们如何配置CKNotification信息呢？
首先也是最重要的 
你应该将
shouldSendContentAvailablent属性
设置为true.
这个属性告诉CloudKit服务器 
在你的推送内容中 应该包含
可用内容键值 
其次 你应该为CNotification信息
设置我们前面所述的UI键值 
目前并不支持同时设置这些属性和
shouldSendContentAvailable属性 
这将会导致服务器错误 
现在 让我们探讨静默推送内容送达 
我们已经配置与推送相关的所有设置 
我们将于何时获得推送内容呢？
由于这些通知的目的并不是为了提醒用户 
因此系统将会在适当的时机
发送这些通知 
在决定何时发送这些通知时  
系统将会考虑各种因素 
通常来说 推送是尽力而为的 
也就是说 推送可能会被合并
甚至被丢弃 具体视设备状况而定 
例如 如果在需要接收紧急通知时  
设备处于飞行模式 当设备退出飞行模式时 
Apple推送通知服务器仅会向设备发送
确实需要接收的最后一条推送通知 
现在 我们有办法来解决这个问题 
因为我们可以使用CloudKit通知 
具体来说
CloudKit服务器存储需要发送到你的设备的
所有通知 
我们将它称为通知集合 
因此当你接收静默通知时 
应该确保从这个通知集合中
获取变更通知 
你可以通过CK
FetchNotificationChanges操作来完成 
因此 当我们获取静默通知时 我们检查
是否有任何丢失的通知 
而且我们知道我们的区域已经发生变更 
这也是我们获得通知的原因 
在这种情况下 我们使用
CKFetchRecordChanges操作
来查看我们的区域内发生了哪些变更 
和前面讨论的一样 
我们并不知道区域内发生了多少变更 
因此这可能一个长时间运行的操作 
如果操作需要较长的时间来完成 
我建议你考虑使用
针对UI应用的后台任务API 
这将允许你分配更多的时间
给你的操作 直到操作完成 
现在 在我们开始讨论通知之前 我需要告诉你们 
在iOS 8中 我们引入了一个全新的通知类别 
称为交互式通知 
它允许用户在信息条 
提醒界面或通知中心处理推送通知 
利用CloudKit 你可以将大量的请求
配置为交互式通知 
我很高兴地告诉你们 在iOS 9中你只需要很少的设置 
就可以完成此操作 
同样地如果CKNotification信息
设置新的类型属性 
当注册用户通知设置时  
这个属性将对应于
你使用UIMutable
NotificationCategories注册的标识符
只需要进行这些设置 
就可以通过CloudKit运行交互式通知 
<br/> 谢谢 
结合这些功能 我想介绍一些
你应该掌握的一些常用性能技术 
在使用CloudKit开发APP时 
你应该使用这些技术 
CloudKit是高度异步API 
大多操作在网络上进行 你经常会遇到
许多具有依赖关系的任务 
而且你需要保持特定的任务完成顺序 
当针对这些任务实施任务管理时 
需要实现一些目标 
你们需要记住一些重要的目标 
首先 很明显 
无论你使用什么样的技术 你都需要
为每个CloudKit任务
实施良好的错误处理方法 
其次 由于这些操作是异步操作 
你应该确保在任何情况下 
避免阻止主线程
和降低它们的UI性能 
最后但非不重要的是 作为开发人员 
你应该确保你的任务管理方案能够保持良好的代码可维护性
当你为APP添加新功能时 代码应该便于分析 
调试和扩展 
让我们来看一些方法 
并且了解一些技巧和缺点 
第一点是不要嵌套便利性API调用 
让我们来看一个简单的例子 
在前面所述的schema中 如果我们想要修改
一个派对参加者记录 请不要在实际中编程中 
使用这个schema 
但是 当你使用便利性API时 
如果你想要修改派对参加者记录 你就必须这样做 
你首先需要使用ID获取记录 
然后尝试获取
参加者想要参加的派对的记录 
然后从参加者数组中
找到参加者记录ID 然后对参加者记录进行修改 
然后尝试保存记录 
当需要修改一条具有很多依存关系的字段的记录时 
你必须执行这些操作 
你会看到一大堆
杂乱无章的代码 
你不知道在哪里处理哪些错误 
以及如何最合理地重试这些操作 
除此之外 还需要
考虑另外一件事情 
假设用户的某些APP操作
导致我们需要进行这些操作 
如果一个用户后续操作
而导致不再需要这些任务 
由于这些任务已经进入队列 
你将无法取消这些任务 
如果它们的运行时间很长 当它们运行时 
你将无法进行其它操作 你必须等待它们完成 
当你管理相关依赖的任务时 尤其是在你需要
对批量记录进行相同的修改时 
我们建议你不要使用这种方法  
另一种方法是消除API的异步性质 
这可以使用信号灯
并且等待信号灯来实现 
在一些情况下 这也会变得十分复杂 
你不应该尝试这样做 
如果你这样做 你应该知道 
尤其是在你的长时间等待操作完成时 
你很容易遇到
循环式的依赖关系 
而导致APP陷入死循环 
或者 如果你想对主线程使用这种方法 
在网络上等待被处理的操作
将会导致UI停止响应  
从而严重影响用户体验 
因此我们不建议这样做 
我们建议你查看
NSOperation 提供的依赖关系管理API 
就是这个API 
NSOperation让你能够轻松添加
和消除其他NSOperations之间的依赖关系 
让我们来看如何使用
CKOperations实现这一点 
CKOperations是NSOperations的子类 
如果有两个互相依赖的获取记录操作 
而且第二个操作应该在第一个操作完成之后开始 
你只需设置这两个操作 
将第一个获取操作设置为第二操作的先决条件 
然后将这两个操作送入队列 
这将保证在第一个获取操作完成之前 
第二个获取操作不会启动 
你会看到 这提供一个符合逻辑的方法 
让你能够发现特定操作的错误 
并且能够方便地
管理它们的依赖关系 
现在 当我们从性能的角度
考虑NSOperations时 
我希望你们思考
另外一个不同之处 
并非所有NSOperations都是同等的 
有些NSOperations 可能是因为用户在APP中的
显式操作而产生的 
其他一些NSOperations示操作
则可能是一些低优先级的后台任务 
为了向系统告知
这些NSOperations的相对重要性 
在iOS 8中 我们为NSOperations.
引入了服务质量属性  
你可以用这个属性指定NSOperation封装的
作业的性质和重要性 
可以将这个属性
设置为不同的服务质量级别 我建议你们
查看相关文档 来了解各个服务质量等级
以及它们的重要性 
在这里 需要记住的一点是 
这个服务质量值直接影响NSOperation的
资源分配优先级 
例如CPU时间、磁盘资源和网络资源 
现在结合去年推出的CloudKit
<br/> 我们想要为你提供类似的方法  
让你能够将低优先级CKOperations
优化成为自主性网络行为 
我的意思是
优化非用户发起的任务 
预取用户内容 就像我们在前面
使用CKRecords获取记录变更操作
来响应静默通知所作的那样 
你需要将这些任务优化成为自主性行为 
使系统在合适的时机
执行这些网络请求 
在决定何时执行这些请求时 
系统会考虑很多因素 
例如蜂窝网络连通性等 
系统可能会等待网络连通性改善之后 
再发送这些请求
另外还会考虑电量等 
如果用户设备电量过低 
或者设备未在充电 系统将会等待
电量增加之后 再发送这些请求 
我们通过使用
CKOperations的
userBackgroundSession属性来实现这一点 
在iOS 9中
我们可以
极大地简化和统一这些功能
这两个概念
我们通过服务质量来推测你的网络行为 
同时应用特定服务等级参数
向系统发送的所有其他设置 
这就是我们使用的方法 
我们不建议用户使用后台会话属性 
而建议你为所有CKOperation操作
设置服务级别 
现在 对于网络行为  
可以设置将服务级别设置为
UserInteractive
或UserInitiated 
来优化这些自主性行为
对于自主性行为 
你可以设置utility值 
在这种情况下 
系统将推测 是否根据发送请求的APP
在前台或在后台运行来优化自主性行为 
从而始终会产生自主性网络行为 
请记住中 如果你在iOS 9
和OS X El Capitan或后续版本中开发APP 
默认情况下 所有新CKOperations
将具有后台服务质量级别 
你应该确保审查所有CKOperations,
查看它们所代表的
作业的重要性 
应该保持良好的系统性能 
为这些操作合适的QS值 
NSOperation是功能强大的API 
你可以使用它实现很多功能  
如果你想了解更多信息 我强烈建议你们
参加明天上午在Presidio举行的高级NSOperation讲座 
作为总结
我想重新强调
CloudKit代码中的错误处理方法很重要 
它与功能一样重要 
我希望你们反复检查你的代码 
查看你的所有操作 
弄清楚你遇到哪些类型的错误 
以及你是否遵守了今在我们所讲述的
关于错误处理的一般性指导原则 
第二 应该批处理你的请求 
当你发现你的APP使用便利性API,
一次处理一个项目
而且在多个位置进行这样的处理时 
你应该考虑使用该API的CKOperation版本 
并且批处理这些请求 
你不仅会全面提升
系统的操作执行效率 
而且会减少网络请求数量 
应考虑优化schema 
我们看到两种情况
需要我们优化schema...
让我们能够获得优化的好处 
例如 当我们为照片记录
添加缩略键值时
<br/>我们可以仅下载需要的数据
从而能够优化下载性能 
在另一种情况下 当我们避免
某些派对照片被修改时
<br/>当我们为派对存储照片时 
可以避免发生整个类别的错误 
因此 在设计功能时  
请认真思考你的schema 
最后并非不重要的是
应该配置你的CKOperations 
它们是功能非常强大的API 
它们提供大量的优化特性让你能够优化
发送至CloudKit服务器的
网络请求 
要想获取更多信息 请访问我们的文档地址是
developer.Apple.com/CloudKit.
关于其他所有问题和解答 
可以咨询技术支持部门 论坛和CK支持网站 
对于一般性咨询
请发送邮件至CloudKit@Apple.com 
这周我们举行了一些很不错的讲座 
我希望你们回去后观看这些讲座视频 
了解Web服务新功能
和CloudKit其他新功能 
明天上午9点 
我们还会在Frameworks lab D
举行另外一场讲座 
请准备好你们的问题 我们将乐意为你解答 
谢谢 