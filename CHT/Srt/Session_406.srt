00:00:19.853 --> 00:00:22.890 
UI Testing在Xcode

00:00:28.128 --> 00:00:28.962 
早上好

00:00:29.296 --> 00:00:32.366 
歡迎來到Xcode
Xcode的用戶界面測試

00:00:33.133 --> 00:00:34.168 
我的名字是威爾·特納

00:00:34.635 --> 00:00:35.969 
這位是布魯克·柯蘭翰

00:00:36.703 --> 00:00:39.640 
我們倆都一起在研發
Xcode的開發工具

00:00:40.541 --> 00:00:44.411 
我們今天非常激動因爲
因爲我們今天要和你們分享

00:00:44.478 --> 00:00:48.448 
一個在Xcode開發工具
測試技術上的

00:00:48.515 --> 00:00:50.150 
很大的突破

00:00:51.318 --> 00:00:52.719 
就是用戶界面的測試

00:00:53.187 --> 00:00:57.991 
通過用戶界面的測試 
您可以找到用戶界面的一些元素,

00:00:58.559 --> 00:01:03.096 
與 他們互動 並驗證
並驗證用戶界面屬性的狀態 

00:01:04.263 --> 00:01:07.768 
除了用戶界面測試 我們
我們已經介紹了用戶界面記錄

00:01:07.901 --> 00:01:10.737 
這將允許 您爲 您的項目

00:01:10.804 --> 00:01:13.006 
快速設定用戶界面測試 

00:01:14.241 --> 00:01:17.744 
最後 我們已經更新了
在Xcode的測試報告 

00:01:17.811 --> 00:01:21.515 
顯示了通過和失敗的和
測試的結果 

00:01:21.648 --> 00:01:24.384 
以適應用戶界面測試的新的數據

00:01:26.153 --> 00:01:29.122 
所以我想談談
核心技術

00:01:29.389 --> 00:01:32.025 
對於用戶界面測試 
首先是 XC測試test 

00:01:32.459 --> 00:01:34.628 
其次是輔助功能 

00:01:35.762 --> 00:01:38.799 
所以XC測試test是Xcode的
測試框架 

00:01:38.932 --> 00:01:42.503 
在它的裏面  您創建測試用例的子類

00:01:42.870 --> 00:01:46.940 
您執行測試方法 並
並用斷言來驗證

00:01:47.040 --> 00:01:49.343 
您期望的
結果是正確的 

00:01:50.944 --> 00:01:54.982 
XCte測試st集成Xcode 
這意味着 您可以

00:01:55.048 --> 00:01:58.552 
通過這個用戶名
完成編碼、 測試 

00:01:58.819 --> 00:02:01.221 
和直接從 您的原始編碼

00:02:01.321 --> 00:02:04.358 
測試的能力 和
並直接就在那裏看到結果 

00:02:05.425 --> 00:02:08.595 
您也通過Xcode Server
得到連續整合

00:02:08.662 --> 00:02:09.963 
和Xcodebuild 創建

00:02:11.131 --> 00:02:14.801 
最後 XC測試test支持
Swift和Objective-C

00:02:14.902 --> 00:02:16.970 
所以 您可以選擇 您最適合的

00:02:17.037 --> 00:02:18.172 
母語編碼語言

00:02:20.407 --> 00:02:22.709 
Xctest測試在
Xcode 5裏是

00:02:22.776 --> 00:02:24.211 
作爲一個單元測試框架存在的 

00:02:24.378 --> 00:02:28.715 
在Xcode 6裏 我們擴大了 
支持的性能測試 

00:02:29.249 --> 00:02:31.785 
這讓 您能捕捉到
 您的編碼中的迴歸 

00:02:31.985 --> 00:02:33.153 
並確保 繼續

00:02:33.220 --> 00:02:36.290 
在每次發佈時
都有最佳表現 

00:02:37.090 --> 00:02:38.659 
現在的Xcode 7

00:02:38.725 --> 00:02:40.827 
我們已經介紹了
您可以使用的用戶界面測試的

00:02:40.894 --> 00:02:43.096 
的正確性和性能測試 

00:02:44.598 --> 00:02:45.699 
這就是XCtest 測試

00:02:45.999 --> 00:02:47.668 
現在讓我們再來看一看
在輔助功能 

00:02:48.569 --> 00:02:51.471 
輔助功能是
在我們的平臺上的

00:02:51.672 --> 00:02:54.708 
這給不啓用的用戶在我們的設備
設備和所有其他用戶接受

00:02:54.775 --> 00:02:56.710 
我們的應用上
提供同樣體驗的

00:02:57.044 --> 00:02:58.412 
一種技術 

00:02:59.112 --> 00:03:02.282 
爲了能夠達到輔助功能 
 提供了豐富的關於用戶界面的

00:03:02.349 --> 00:03:05.886 
語義數據的設定
這種技術可用語音

00:03:05.953 --> 00:03:08.989 
來引導用戶
使用這個應用 

00:03:09.690 --> 00:03:13.327 
用戶界面測試使用 和
和輔助功能與用戶界面工具包

00:03:13.393 --> 00:03:16.463 
和應用程序包的整合 
所以 當 您使用這些框架中的控制

00:03:16.530 --> 00:03:19.499 
您會馬上就能
得到大量的免費的

00:03:19.800 --> 00:03:21.335 
可訪問支持 

00:03:22.302 --> 00:03:24.137 
還提供應用程序接口
來讓 您可以

00:03:24.204 --> 00:03:27.241 
微調輔助功能的數據 

00:03:28.642 --> 00:03:31.011 
這裏的的關鍵是
使用用戶界面測試 

00:03:31.178 --> 00:03:32.513 
您的測試將與應用程序進行

00:03:32.913 --> 00:03:34.948 
像普通用戶一樣的互動互動 

00:03:36.650 --> 00:03:38.485 
用戶界面測試
有幾個要求

00:03:38.652 --> 00:03:39.887 
您應該需要了解 

00:03:39.953 --> 00:03:44.157 
首先是 取決於
在操作系統中的新功能 

00:03:44.224 --> 00:03:45.959 
如果您用的是iOS 則需要iOS 9

00:03:46.026 --> 00:03:48.862 
如果您用X操作系統 則需要操作系
統10和.11 

00:03:50.731 --> 00:03:52.432 
用戶界面測試保護
保護您的隱私 

00:03:52.866 --> 00:03:57.070 
這樣做意味着 您
需要啓用iOS設備

00:03:57.137 --> 00:04:01.141 
纔可以爲開發和連接
一個受信的運行主機Xcode 

00:04:03.510 --> 00:04:05.946 
在X操作系統上 
 您需要給一個特殊的Xcode

00:04:06.013 --> 00:04:09.016 
幫助程式許可 
第一次運行用戶界面測試時

00:04:09.082 --> 00:04:11.285 
會有提示 您這麼做 

00:04:13.153 --> 00:04:15.956 
讓我們來看看什麼
在 您的項目開始用戶界面測試時

00:04:16.223 --> 00:04:17.658 
需要做些什麼 

00:04:18.524 --> 00:04:20.827 
首先 有一個
新的Xcode的目標類型 

00:04:21.228 --> 00:04:24.598 
傳統來說上 單元測試是
在Xcode中特定的目標類型 

00:04:24.932 --> 00:04:27.167 
現在用戶界面測試
也是目標類型 

00:04:28.101 --> 00:04:30.871 
我們還爲 您介紹了
一大套的新的應用程序接口

00:04:31.104 --> 00:04:35.475 
作爲用戶界面測試和
用戶界面記錄 

00:04:35.642 --> 00:04:37.945 
這將使 您
很快就可以開始了 

00:04:39.980 --> 00:04:43.851 
因此 Xcode測試目標
支持用戶界面測試的

00:04:43.951 --> 00:04:45.018 
特殊要求 

00:04:45.419 --> 00:04:47.654 
這包括執行
 您正在測試的應用程序中的

00:04:47.721 --> 00:04:49.356 
一個單獨的程序 

00:04:50.123 --> 00:04:52.559 
也處理
隱私保護中使用

00:04:52.626 --> 00:04:53.727 
使用輔助功能的許可權 

00:04:55.362 --> 00:04:59.333 
這些目標都有Cocoa和Cocoa
Touch新的範本

00:04:59.900 --> 00:05:02.069 
而且這個的助手和
都會將根據 您喜歡的方式

00:05:02.503 --> 00:05:04.171 
設定好開始 

00:05:05.105 --> 00:05:08.175 
有一個目標要測試
用戶界面測試包的設定

00:05:08.242 --> 00:05:10.811 
以確定 您正在測試
的應用程序 

00:05:13.447 --> 00:05:16.483 
新的應用程序接口有
三個重點類別 

00:05:16.950 --> 00:05:18.385 
首先是應用程序 

00:05:19.553 --> 00:05:20.954 
其次是元素 

00:05:21.121 --> 00:05:23.390 
第三是元素查詢 

00:05:23.891 --> 00:05:25.926 
我們將稍後將對這些
應用程序接口

00:05:25.993 --> 00:05:28.762 
進行一次深入的介紹 

00:05:30.364 --> 00:05:32.566 
用戶界面記錄讓您
與您的應用程序 掌上設備

00:05:32.633 --> 00:05:34.835 
掌上設備模擬器 或OS X
Mac 

00:05:34.902 --> 00:05:38.338 
進行互動 

00:05:38.639 --> 00:05:42.342 
當 您這樣做時  
 生成必要的編碼

00:05:42.409 --> 00:05:43.977 
重建這些相互作​​用 

00:05:44.545 --> 00:05:48.482 
您可以新建測試
測試或擴展現有測試 

00:05:51.118 --> 00:05:54.454 
讓我們來看看
這是什麼 

00:05:55.055 --> 00:05:56.690 
布魯克 讓我們看看一個快速演示 

00:06:04.765 --> 00:06:05.599 
謝謝 威爾 

00:06:06.800 --> 00:06:07.901 
所以 事不宜遲 

00:06:08.702 --> 00:06:10.170 
我今天的演示所
使用的項目

00:06:10.237 --> 00:06:12.239 
是李斯特的應用 

00:06:12.306 --> 00:06:13.240 
這個例子項目

00:06:13.307 --> 00:06:15.809 
您可以從
developer.apple.com下載

00:06:16.243 --> 00:06:19.246 
那麼我們開始 現在
現在我的目標配置

00:06:19.313 --> 00:06:21.114 
正是我想要的那樣 但
但我想指出的是

00:06:21.181 --> 00:06:23.584 
要測試的目標
是李斯特應用 

00:06:23.650 --> 00:06:24.952 
這是一個我的測試將能夠

00:06:25.018 --> 00:06:26.687 
與之互動的應用程序 

00:06:31.024 --> 00:06:35.329 
所以現在我得到了我的
新的測試類別 

00:06:35.896 --> 00:06:40.467 
這裏還有一個小測試方法
方法和設定功能

00:06:40.601 --> 00:06:43.270 
這將會被使用

00:06:43.337 --> 00:06:47.508 
會在我的測試方法被使用之前
啓動應用程序 

00:06:47.574 --> 00:06:49.710 
我在這個類別下所添加的
所有測試方法

00:06:49.776 --> 00:06:50.611 
都會這麼做 

00:06:51.645 --> 00:06:54.448 
所以在讓我們從李斯特A應用裏PP
裏添加一個新的測試 

00:06:54.648 --> 00:06:59.753 
我要把鼠標
移到方法中 按一下

00:06:59.820 --> 00:07:01.922 
按一下調試欄裏的
記錄按鈕 

00:07:04.858 --> 00:07:06.860 
現在 Xcode已經開始
啓動我的應用程序了 

00:07:06.927 --> 00:07:07.761 
啓動好了 

00:07:08.128 --> 00:07:12.032 
李斯特應用允許
我來管理一系列的清單 

00:07:12.533 --> 00:07:15.235 
因此可能人們做的
最常見的事情是

00:07:17.638 --> 00:07:19.139 
從他們的名單中
補充、刪除項目 

00:07:19.406 --> 00:07:21.074 
所以我要
點擊這裏 添加項目 

00:07:21.508 --> 00:07:23.510 
看起來我們在這食品雜貨清單中

00:07:23.577 --> 00:07:25.812 
有很多東西 

00:07:25.879 --> 00:07:27.648 
那我添加餅乾 

00:07:27.981 --> 00:07:30.417 
您可以看到 當我在打字時

00:07:31.285 --> 00:07:33.153 
源標題正在更新 

00:07:33.720 --> 00:07:36.857 
如果我按刪除 
 也從文字欄裏刪除

00:07:36.924 --> 00:07:37.925 
我刪除的東西 

00:07:41.395 --> 00:07:43.263 
下一件我要做的事

00:07:43.330 --> 00:07:45.866 
就是點擊一下餅乾項目

00:07:46.033 --> 00:07:47.034 
把 標記爲完成 

00:07:47.601 --> 00:07:49.236 
我要做的另一件事是

00:07:49.303 --> 00:07:51.738 
從清單中刪除項目 

00:07:51.805 --> 00:07:55.375 
所以我點擊編輯 
然後刪除餅乾 

00:07:55.843 --> 00:07:58.312 
刪除確認
 終於完成 

00:07:59.413 --> 00:08:01.915 
好 現在我有一個
簡單的測試從名單上

00:08:01.982 --> 00:08:03.483 
從名單上添加、移除項目 

00:08:04.284 --> 00:08:05.118 
所以我點擊停止

00:08:05.786 --> 00:08:06.787 
讓我們看看什麼情況 

00:08:15.028 --> 00:08:16.230 
新增了餅乾

00:08:17.097 --> 00:08:18.031 
並且正在移除  

00:08:18.398 --> 00:08:19.233 
我們完成了 

00:08:27.808 --> 00:08:30.544 
謝謝 當測試與用戶界面元素
進行互動的時候 

00:08:30.611 --> 00:08:33.580 
我們得到間接的驗證
這些用戶界面元素的存在 

00:08:33.914 --> 00:08:36.149 
但我們沒辦法
得到驗證的是

00:08:36.250 --> 00:08:38.150 
事物更改應用程序的狀態 

00:08:38.251 --> 00:08:40.854 
例如 當我們打開
那個餅乾按鈕 

00:08:41.154 --> 00:08:43.789 
我們沒有得到任何
驗證該按鈕的狀態

00:08:43.857 --> 00:08:45.158 
實際上改變了 

00:08:46.426 --> 00:08:49.630 
後來的測試中 當你點擊

00:08:49.696 --> 00:08:52.432 
確認刪除的按鈕時 

00:08:52.866 --> 00:08:55.602 
我們知道刪除確認按鈕
已經被點擊了 

00:08:56.036 --> 00:08:58.872 
但運行測試
無法驗證

00:08:58.939 --> 00:09:01.341 
餅乾那一行
實際上被刪除了 

00:09:02.409 --> 00:09:04.778 
所以要得到這些驗證的話 

00:09:04.845 --> 00:09:07.080 
我需要添加一些斷言 

00:09:07.915 --> 00:09:11.618 
首先我要做的是添加一個斷言

00:09:11.685 --> 00:09:15.656 
說這裏的餅乾按鈕
實際上已經改變了 的狀態 

00:09:15.722 --> 00:09:17.624 
要這樣做的話 我會
我會添加一個新的常數 

00:09:17.691 --> 00:09:19.693 
稱這個爲餅乾按鈕吧 

00:09:22.296 --> 00:09:24.231 
我將要改變這個測試

00:09:24.298 --> 00:09:25.299 
就要點擊這個常數 

00:09:27.401 --> 00:09:30.537 
現在 要新增我的斷言
我需要一些狀態 

00:09:30.604 --> 00:09:35.242 
一些元素屬性的斷言 

00:09:35.609 --> 00:09:38.378 
還有餅乾按鈕
是XUI元素的

00:09:39.046 --> 00:09:41.448 
還有XUI元素
有一個價值的屬性 

00:09:41.982 --> 00:09:43.851 
我要做什麼 我要
我要在這裏設定中斷點 

00:09:44.718 --> 00:09:45.853 
並將測試運行到該點 

00:09:53.060 --> 00:09:54.862 
所以我們在這裏有
測試狀態了

00:09:54.928 --> 00:09:56.630 
裏面有添加
餅乾那一行 

00:09:57.431 --> 00:09:59.399 
還沒有
點擊按鈕 

00:10:02.503 --> 00:10:03.504 
所以我要在
調試器那裏 

00:10:03.937 --> 00:10:08.408 
列印出這個餅乾
按鈕的數值 

00:10:23.156 --> 00:10:24.691 
--好 

00:10:24.992 --> 00:10:28.562 
我可以看到餅乾按鈕的
的價值是

00:10:28.929 --> 00:10:30.030 
數位爲零的字串 

00:10:31.999 --> 00:10:34.501 
下一步我要
跨過那條線 

00:10:34.701 --> 00:10:36.069 
所以現在 點擊了
餅乾按鈕 

00:10:36.570 --> 00:10:39.072 
我又一次將列印出 的數值 
現在我可以看到

00:10:40.641 --> 00:10:43.877 
該按鈕的值是
數字一的字串 

00:10:44.444 --> 00:10:46.180 
好 所以現在我有了
我需要的一切資訊

00:10:46.446 --> 00:10:49.183 
要斷言當 被點擊時
按鈕的數值會變化 

00:10:53.353 --> 00:10:54.454 
所以我要用XCT

00:10:54.988 --> 00:10:57.191 
斷言平衡assert
equal來添加一個斷言 

00:11:00.294 --> 00:11:02.229 
我會斷言被點擊後的數值

00:11:02.296 --> 00:11:04.765 
是一個數字爲一的字串 

00:11:05.199 --> 00:11:07.534 
這個值現在是任何的類型 

00:11:07.601 --> 00:11:11.538 
所以我需要
斷言這是一個字串 

00:11:11.972 --> 00:11:13.640 
所以我使用字串 

00:11:15.709 --> 00:11:17.444 
並斷言 被點擊後是”“一”“ 

00:11:19.012 --> 00:11:21.782 
而且我斷言
 被點擊前是

00:11:21.849 --> 00:11:23.617 
數字零的數位字串 

00:11:25.652 --> 00:11:26.553 
最後

00:11:27.154 --> 00:11:30.858 
當
當刪除按鈕確認後

00:11:30.924 --> 00:11:34.261 
我就斷言
餅乾那行消失 

00:11:34.328 --> 00:11:35.262 
我啓用XCT

00:11:35.329 --> 00:11:37.164 
斷言平衡assert 
equal並斷言

00:11:37.231 --> 00:11:38.966 
這個按鈕就不再存在了 

00:11:44.037 --> 00:11:46.640 
現在 如果我再運行這個測試我們
我們應該看到同樣的東西

00:11:46.707 --> 00:11:48.475 
但也通過
所有的這些斷言 

00:11:58.986 --> 00:12:00.621 
好 我現在剛剛
添加了我的第一次測試 

00:12:01.922 --> 00:12:02.756 
交給  了 威爾 

00:12:09.930 --> 00:12:10.864 
<br/> 
那相當厲害 

00:12:10.931 --> 00:12:13.367 
您可以看到布魯克
就像普通用戶一樣

00:12:13.433 --> 00:12:16.837 
非常容易地使用這個應用 

00:12:17.437 --> 00:12:19.806 
而且在很短的時間內就
創建了一個測試 

00:12:20.240 --> 00:12:22.609 
他可以拓展那個測試
用XCT 斷言assert來

00:12:22.676 --> 00:12:27.080 
做了一些額外的驗證
就可以用最少小的功夫

00:12:27.147 --> 00:12:29.249 
給他的項目增加可靠性 

00:12:29.917 --> 00:12:30.918 
那是相當令人興奮的 

00:12:33.220 --> 00:12:36.390 
所以 您可以看到我們新增的
用戶界面測試目標 

00:12:36.723 --> 00:12:38.859 
非常簡單明瞭 就像
就像我們所有其 他目標 

00:12:38.926 --> 00:12:40.427 
是有幫助和範本的 

00:12:41.395 --> 00:12:46.567 
使用記錄 與應用程序互動 
創建使用元素、

00:12:46.633 --> 00:12:49.203 
綜合事件的編碼

00:12:49.303 --> 00:12:53.440 
然後用XCT斷言
來驗證 

00:12:55.709 --> 00:12:58.846 
讓我們來看一看
這個用戶界面測試 

00:13:00.581 --> 00:13:02.583 
我之前提到過
有三個類別 

00:13:02.850 --> 00:13:05.452 
xxx
<br/>
<br/>
<br/>
他們是XCUIApplication

00:13:05.652 --> 00:13:07.421 
XCUIElement 和

00:13:07.487 --> 00:13:09.857 
XCUIElementquery

00:13:10.224 --> 00:13:11.258 
他們是如何工作的？

00:13:11.592 --> 00:13:14.595 
讓我們從一個非常
簡單 

00:13:14.962 --> 00:13:16.697 
比布魯克的例子更簡單的例子 

00:13:17.264 --> 00:13:19.099 
一行一行地演示給你們看

00:13:19.900 --> 00:13:21.001 
首先我先啓動

00:13:21.068 --> 00:13:22.069 
應用對象 

00:13:22.469 --> 00:13:24.872 
這是一個
我的應用代理 

00:13:25.572 --> 00:13:26.507 
然後我啓動  

00:13:26.874 --> 00:13:27.941 
啓動好了 

00:13:29.376 --> 00:13:32.646 
然後我用元素和
查詢去找添加按鈕 

00:13:33.747 --> 00:13:35.549 
然後我點擊綜合事件 

00:13:36.984 --> 00:13:40.153 
最後 我加上了一個
像布魯克那樣的斷言

00:13:40.587 --> 00:13:43.056 
來確保用戶界面
在測試結束時

00:13:43.123 --> 00:13:44.024 
有了預期的狀態 

00:13:46.159 --> 00:13:48.362 
所以我提到
UIApplication應用程序

00:13:48.428 --> 00:13:50.464 
是一個爲測試應用程序
的代理 

00:13:51.198 --> 00:13:54.067 
的啓動和關閉的

00:13:54.134 --> 00:13:55.869 
週期是獨立的 

00:13:56.270 --> 00:13:58.305 
因爲 您的測試是
在一個單獨的過程中運行 

00:13:58.772 --> 00:14:01.575 
您可以明確地控制
應用程序什麼時候啓動

00:14:01.942 --> 00:14:03.010 
及和什麼時候被終止 

00:14:06.480 --> 00:14:09.983 
當 您啓動時 總是
產生一個新的程序 

00:14:10.250 --> 00:14:12.953 
所以這就是爲什麼我們

00:14:13.020 --> 00:14:17.024 
不給 您完全的程序 
因爲 您有很多

00:14:17.090 --> 00:14:19.593 
需要 您操控的應用在運行 

00:14:20.027 --> 00:14:23.030 
但通過每次
乾淨無幹擾的地啓動 

00:14:23.330 --> 00:14:25.933 
我們幫 您將 您的測試中

00:14:25.999 --> 00:14:27.100 
必須要處理的變數最小化 

00:14:27.901 --> 00:14:29.570 
所以 如果 已經運行 

00:14:29.703 --> 00:14:32.739 
再次啓動將終止
先前正在運行的實體 

00:14:34.775 --> 00:14:38.478 
應用也是尋找元素的開始 

00:14:38.979 --> 00:14:40.280 
讓我們談一談元素 

00:14:40.914 --> 00:14:42.449 
XCUIElement元素

00:14:42.516 --> 00:14:44.918 
就像應用程序
 是一個代理對象 

00:14:45.219 --> 00:14:47.454 
但這一次是作爲測試應用中的

00:14:47.654 --> 00:14:48.922 
用戶界面元素 

00:14:49.590 --> 00:14:50.824 
元素有幾種類型 

00:14:51.491 --> 00:14:54.194 
有的類型是按鈕 或
或格子、 或視窗 等等 

00:14:54.795 --> 00:14:57.064 
它們有我們所說的
數據的識別字

00:14:57.264 --> 00:15:00.367 
字串 這些是通過可訪問的
系統得到的

00:15:00.901 --> 00:15:04.371 
它們是識別字

00:15:05.939 --> 00:15:09.343 
例如 如果 您添加了一個按鈕 

00:15:09.710 --> 00:15:12.579 
您要找這個按鈕

00:15:12.646 --> 00:15:16.149 
鍵入識別字添加 

00:15:17.818 --> 00:15:20.420 
在您的應用程序
層次結構中的元素 

00:15:20.487 --> 00:15:22.990 
應用程序
就像一棵樹的根 

00:15:23.290 --> 00:15:25.559 
如果 您回想以前學習
計算機科學的日子 

00:15:25.626 --> 00:15:26.927 
您就會想起數據的樹形結構 

00:15:27.728 --> 00:15:32.966 
李斯特應用中
我們有一棵很簡單的樹形結構

00:15:33.033 --> 00:15:34.968 
在應用的頂部 我們有

00:15:35.035 --> 00:15:38.071 
我們有像導航欄
和“添加”按鈕 

00:15:39.740 --> 00:15:40.941 
雜貨標籤 

00:15:41.074 --> 00:15:42.109 
等等 

00:15:42.709 --> 00:15:44.545 
所以每一個都是在 您的測試中

00:15:45.279 --> 00:15:46.780 
您可以參考的一個元素 

00:15:48.916 --> 00:15:50.317 
這些都是查詢用的

00:15:50.751 --> 00:15:53.587 
這個層次結構
以及作爲類型和識別字

00:15:53.854 --> 00:15:54.955 
都用來尋找 您的元素 

00:15:56.390 --> 00:15:57.991 
當 您使用元素時

00:15:58.058 --> 00:16:00.160 
在 您的測試中
它 們必須是獨一無二的 

00:16:00.861 --> 00:16:01.728 
所以是什麼意思？

00:16:02.095 --> 00:16:04.665 
每一個元素都是由一個查詢支持的 

00:16:04.998 --> 00:16:07.868 
查詢必須變成一個單一的實體 

00:16:09.203 --> 00:16:11.672 
否則 當我們整合事件時

00:16:11.738 --> 00:16:14.341 
要點擊按鍵 但很多個按鈕

00:16:14.408 --> 00:16:16.543 
都符合條件 所以沒辦法確定 

00:16:16.610 --> 00:16:18.679 
我們就不知道
 您要我們做什麼了 

00:16:19.079 --> 00:16:22.482 
類似的地 如果 您問我們
元素的屬性 

00:16:22.983 --> 00:16:25.886 
我們不知道 您到底
指的是哪一個？

00:16:25.953 --> 00:16:27.154 
也許一個也不是 

00:16:27.621 --> 00:16:29.623 
所以元素查詢最重要的是

00:16:29.690 --> 00:16:31.892 
要縮小到只有一個符合的範圍 

00:16:33.093 --> 00:16:35.529 
如果 他們沒有做到這一點

00:16:35.929 --> 00:16:37.831 
當 您訪問元素時就會
就會出現失敗的信息 

00:16:38.966 --> 00:16:40.000 
這有一個例外 

00:16:40.067 --> 00:16:42.269 
這是一個在
XCUIElement元素上叫做

00:16:42.336 --> 00:16:44.538 
存在屬性的應用程序接口 

00:16:44.638 --> 00:16:48.175 
這讓 您測試
元素存在的安全性 

00:16:48.742 --> 00:16:50.844 
您可以用這個
像布魯克那樣驗證

00:16:50.911 --> 00:16:52.679 
用戶界面中被刪除的元素

00:16:52.779 --> 00:16:56.016 
您也可以用來處理

00:16:56.083 --> 00:16:57.451 
可能在某些情況下有條件的

00:16:57.584 --> 00:16:59.319 
用戶界面的案例 

00:16:59.386 --> 00:17:02.456 
例如 如果 您要
保存一個檔案到一個位置

00:17:02.523 --> 00:17:05.358 
另一個檔案已存在
這時會出現

00:17:05.425 --> 00:17:06.527 
確認單 

00:17:06.960 --> 00:17:08.762 
但那不會每次都出現 

00:17:08.829 --> 00:17:10.396 
只在是案件衝突的時候出現 

00:17:10.464 --> 00:17:13.834 
您可以用一個存在屬性去
檢查這些情況 

00:17:14.968 --> 00:17:18.271 
元素就是事件整合
應用程序接口時出現的​​ 

00:17:18.872 --> 00:17:22.675 
事件整合就是我們如何
模擬用戶和應用程序的互動 

00:17:22.742 --> 00:17:26.113 
並做到系統的最底層 
所以當用戶體驗的時候

00:17:26.180 --> 00:17:29.716 
所有東西都
經過了同樣的通道 

00:17:29.783 --> 00:17:32.486 
整合事件的應用程序接口
是有具體的平臺的

00:17:33.020 --> 00:17:33.987 
但也有些例外 

00:17:34.588 --> 00:17:37.057 
我們有按鈕點擊 
如在X操作系統中

00:17:37.124 --> 00:17:41.728 
相應的 在iOS中
在iOS中就是按鍵敲擊 

00:17:41.795 --> 00:17:44.731 
我們有類型文字 
這在兩個平臺都是一樣的

00:17:44.798 --> 00:17:46.300 
並且是字串文字 

00:17:48.869 --> 00:17:53.173 
XCUI元素查詢Elementquery
是用於指定元素的 

00:17:54.141 --> 00:17:58.745 
查詢最終變成一系列的
可訪問的元素 

00:17:58.812 --> 00:18:01.849 
他們只能找到具有
輔助功能的元素 

00:18:02.749 --> 00:18:05.152 
他們將在這一組中
找到答案 

00:18:07.588 --> 00:18:10.858 
這意味着 您可以通過計數屬性獲得一
些符合條件的答案 

00:18:12.259 --> 00:18:14.962 
您也可以通過下標和識別字

00:18:15.395 --> 00:18:18.165 
來指定不同的元素

00:18:19.132 --> 00:18:21.001 
或者使用索引裏的
應用程序接口的元素

00:18:21.068 --> 00:18:23.270 
我們稍後會討論這個 

00:18:25.172 --> 00:18:26.507 
那麼查詢是如何工作呢？

00:18:27.741 --> 00:18:29.576 
我提到元素的層次結構 

00:18:30.410 --> 00:18:33.947 
這個層次結構的一方面是

00:18:34.014 --> 00:18:34.915 
如何查詢 

00:18:35.115 --> 00:18:36.817 
另一方面是過濾 

00:18:37.851 --> 00:18:40.387 
過濾是集中一個組合並

00:18:40.454 --> 00:18:42.990 
並根據特定的範圍條件
減少那個組合裏面的內容 

00:18:44.424 --> 00:18:48.128 
我們再次用李斯特的例子
下面是我們如何表達

00:18:48.195 --> 00:18:51.198 
某些關係 
首先是後代關係 

00:18:51.265 --> 00:18:54.067 
我將展示給你們看 

00:18:54.768 --> 00:18:57.070 
所有金色的格子
都是它的​​後代孩子 

00:18:58.238 --> 00:19:01.308 
另一方面孩子孩子是
更具限制性的關係 

00:19:01.375 --> 00:19:05.546 
這些元素都是直接在
 您查詢這些元素下面的 

00:19:05.612 --> 00:19:08.015 
所以 表格中的孩子們
只是這些格子 

00:19:08.982 --> 00:19:11.752 
最後我們使用的關係
是包含關係 

00:19:12.186 --> 00:19:14.621 
這個關係很有用特別是當

00:19:14.688 --> 00:19:17.324 
特別是對有些元素 如一些格子 
 他們沒有很多

00:19:17.391 --> 00:19:19.560 
獨特的數據 

00:19:19.960 --> 00:19:22.129 
但它們包含了
獨特的元素 

00:19:22.429 --> 00:19:25.232 
例如 第一單元
包含食品標籤 

00:19:26.700 --> 00:19:31.104 
過濾讓我們採取
像象這種類型的元素 

00:19:32.272 --> 00:19:35.609 
或識別字在之前的

00:19:35.843 --> 00:19:37.811 
在之前的過濾的基礎上創建查詢 

00:19:38.412 --> 00:19:41.982 
這樣做的話我們可以

00:19:42.282 --> 00:19:45.319 
越過識別字
直接看數值

00:19:45.652 --> 00:19:47.688 
或做部分匹配
如“以您開頭”

00:19:47.754 --> 00:19:48.789 
諸如此類 

00:19:50.591 --> 00:19:53.894 
我們在應用程序接口中
結合關係和過濾

00:19:53.961 --> 00:19:56.663 
第一個是descendants
matchingtype

00:19:56.730 --> 00:19:57.631 
後代匹配類型

00:19:57.698 --> 00:19:59.166 
您能想出
那是什麼 

00:19:59.633 --> 00:20:02.135 
在它的後代中尋找
匹配的某一類型 

00:20:02.569 --> 00:20:05.272 
這是您將使用的最常見的查詢 

00:20:05.672 --> 00:20:09.042 
比如我能找到在應用程序中

00:20:09.109 --> 00:20:11.578 
所有的按鈕通過

00:20:12.246 --> 00:20:14.147 
通過descendentsmatchingtype
後代匹配查詢按鈕 

00:20:15.015 --> 00:20:17.751 
類似的地 我可以找到
表中的所有格子

00:20:18.218 --> 00:20:19.786 
我只要告訴表格

00:20:19.853 --> 00:20:21.021 
要找descendents
matchingtype

00:20:21.088 --> 00:20:22.055 
後代匹配查詢的格子 

00:20:22.122 --> 00:20:24.124 
或者
另一個與功能表項目有關的例子 

00:20:25.425 --> 00:20:28.996 
這是非常常見的查詢
我們爲每一種類型

00:20:29.062 --> 00:20:30.864 
都提供便利的應用程序接口 

00:20:31.732 --> 00:20:34.067 
descendents
matchingtype

00:20:34.134 --> 00:20:36.370 
後代匹配查詢按鈕 就變成了按鈕 

00:20:37.471 --> 00:20:39.273 
descendents
matchingtype

00:20:39.339 --> 00:20:40.874 
後代匹配查詢格子
成爲格子 等等

00:20:41.208 --> 00:20:43.143 
等等諸如此類的 

00:20:44.011 --> 00:20:48.215 
這些便利的應用程序接口
能讓您的測試變得非常有效

00:20:48.382 --> 00:20:49.349 
且準確 

00:20:56.256 --> 00:20:58.258 
Children
matchingtype

00:20:58.325 --> 00:21:00.994 
類型是
過濾關係中的中的另一組合 

00:21:01.061 --> 00:21:03.764 
所以我們要區分

00:21:03.830 --> 00:21:06.466 
子孫關係間的不同 
符合條件的子孫

00:21:06.633 --> 00:21:08.802 
而且只有特定的子孫關係
是孩子關係 

00:21:10.404 --> 00:21:13.707 
所有的按鈕都是Aapp按鈕

00:21:13.807 --> 00:21:16.410 
如果我想找到孩子關係的按鈕

00:21:16.476 --> 00:21:18.011 
我可以打開導航欄並說

00:21:18.078 --> 00:21:21.248 
並說說childrenmatchingtype
孩子匹配類型按鈕

00:21:21.548 --> 00:21:24.017 
這雖然不如查詢那樣常用 

00:21:24.084 --> 00:21:26.486 
但有時候用於區分的時候
會很有用 

00:21:28.288 --> 00:21:29.756 
最後 包含類型 

00:21:30.357 --> 00:21:34.428 
這使我們能夠找到
描述 他們的後代的元素 

00:21:35.295 --> 00:21:37.497 
所以在我們有些格子裏

00:21:37.564 --> 00:21:40.634 
格子是匿名的 

00:21:40.701 --> 00:21:43.070 
他們沒有任何
識別特徵 

00:21:43.704 --> 00:21:45.772 
但它們確實包含着
獨特標籤 

00:21:46.440 --> 00:21:48.308 
標籤也被稱爲
作爲靜態文字 

00:21:49.409 --> 00:21:53.213 
所以在這裏我可以建立一個
格子查詢

00:21:53.280 --> 00:21:56.216 
去查找那些
包含類型靜態文字

00:21:56.350 --> 00:21:58.151 
且識別字是雜貨的格子 

00:21:58.652 --> 00:21:59.987 
這將幫我找到
第一個格子 

00:22:00.721 --> 00:22:03.223 
還有與該應用程序接口
不同的屬性 

00:22:05.492 --> 00:22:07.194 
那些是我們的三個
結合了關係和過濾的

00:22:07.261 --> 00:22:09.296 
應用程序接口 

00:22:09.596 --> 00:22:12.032 
後代匹配類型
 孩子匹配類型 

00:22:12.566 --> 00:22:15.002 
包含類型
還有所有的

00:22:15.068 --> 00:22:16.904 
後代匹配類型
的應用程序接口 

00:22:19.139 --> 00:22:20.607 
另一關於查詢強大的
的事情是

00:22:20.674 --> 00:22:22.376 
他們可以
綁在一起 

00:22:22.743 --> 00:22:26.847 
所以我們可以採取
一個查詢的輸出使它變成

00:22:26.914 --> 00:22:29.483 
使它變成下一個的輸入 就像 您一樣
在Unix命令列裏

00:22:29.550 --> 00:22:30.651 
把命令都連接在一起 

00:22:31.385 --> 00:22:33.253 
這是非常強大的 
並且讓 您建立

00:22:33.320 --> 00:22:35.656 
複雜的查詢 而且

00:22:35.722 --> 00:22:37.157 
而且這是很準確又而明瞭的 

00:22:38.258 --> 00:22:41.428 
所以在這裏有我們的
應用

00:22:41.495 --> 00:22:43.497 
我只是想找到
表中的標籤 

00:22:43.997 --> 00:22:44.932 
我從應用程序開始 

00:22:45.866 --> 00:22:47.000 
然後我到了表格 

00:22:47.634 --> 00:22:50.003 
然後我尋找靜態文字
 然後就完成了 

00:22:50.170 --> 00:22:51.305 
我有這三個標籤 

00:22:54.341 --> 00:22:56.577 
有時查詢會自己結束 

00:22:56.643 --> 00:22:59.346 
您想得到查詢的計數
 可能斷言的項目數量

00:22:59.413 --> 00:23:01.248 
項目數量是正確的 

00:23:01.582 --> 00:23:04.451 
但往往一個查詢目標
是要找到一個元素 

00:23:04.518 --> 00:23:06.887 
我們所有的元素
都由有查詢支持着 

00:23:07.487 --> 00:23:10.557 
從查詢中得到一個元素
我們提供了的幾個

00:23:10.624 --> 00:23:11.491 
不同的選擇 

00:23:11.758 --> 00:23:14.761 
第一個是下標 
這使我們能夠進行查詢

00:23:15.095 --> 00:23:17.331 
然後使用識別字來下標 

00:23:17.598 --> 00:23:20.501 
那應該會出現雜貨標籤 
的一個元素 

00:23:21.735 --> 00:23:23.837 
也可以用元素和指數這樣做 

00:23:24.071 --> 00:23:26.507 
如果我有一套格子 也許
也許一些表中的行

00:23:26.573 --> 00:23:27.774 
我想 

00:23:27.841 --> 00:23:30.577 
我可以再在一個一個地
啓用元素和指數 

00:23:31.945 --> 00:23:35.215 
如果我有一個查詢
我知道的唯一解決方法 

00:23:35.482 --> 00:23:38.485 
帽子是一個單一的東西 也許
也許我只有一個導航欄

00:23:38.552 --> 00:23:41.355 
在我的應用程序中 我可以
我可以使用元素屬性

00:23:41.622 --> 00:23:44.091 
來創建一個受查詢的
支持新的元素 

00:23:46.660 --> 00:23:48.929 
我們什麼時候評估查詢？

00:23:49.496 --> 00:23:51.465 
所以 他們實際上不是
真正的當您創造他們

00:23:51.532 --> 00:23:52.766 
在您創造它們的時候的評估 

00:23:52.833 --> 00:23:55.135 
它們是按需評估
或者按他們的需要 

00:23:55.702 --> 00:23:59.773 
這意味着只有當 您整合事件
或讀取屬性值的時候

00:24:00.073 --> 00:24:04.144 
纔會對一個元素
查詢進行評估 

00:24:04.211 --> 00:24:06.580 
您可以創建元素
但在 您使用 之前 

00:24:06.647 --> 00:24:07.814 
該查詢都不會被評估 

00:24:08.549 --> 00:24:12.052 
類似的地 如果 您直接
創建一個查詢

00:24:12.119 --> 00:24:14.922 
當 您得到一些
匹配或如果您調用一個

00:24:14.988 --> 00:24:16.924 
應用程序接口
而得出所有的匹配 

00:24:16.990 --> 00:24:19.226 
則 必須是
在這一點上評估

00:24:20.260 --> 00:24:23.897 
用戶界面更改時
我們將重新評估查詢 

00:24:24.231 --> 00:24:26.967 
所以 您總是使用着用
應用中最新的數據

00:24:27.034 --> 00:24:30.237 
而不是十秒前的數據

00:24:30.304 --> 00:24:32.472 
或2分鐘前的數據 
視 您的測試長度而定

00:24:33.941 --> 00:24:36.410 
您可以思考一下查詢

00:24:36.476 --> 00:24:38.946 
查詢和元素類似於網址 

00:24:39.646 --> 00:24:42.583 
他們是有一個網址 
 您可以創建一個網址

00:24:42.649 --> 00:24:44.818 
但您不能立即獲取資源 

00:24:44.885 --> 00:24:48.322 
直到 您真正
去創建您的網址請求

00:24:48.388 --> 00:24:52.392 
或實際網址得到解決 

00:24:52.860 --> 00:24:55.229 
即使這樣的網址是無效的 

00:24:55.395 --> 00:24:57.831 
只要沒到那個點上 
都不會有錯誤提示

00:24:58.732 --> 00:25:03.403 
類似的 查詢和元素 
 它們只是

00:25:03.570 --> 00:25:06.139 
在測試中的應用
可訪問的元素的規格 

00:25:06.874 --> 00:25:09.209 
所以創建他們

00:25:09.276 --> 00:25:11.745 
不到您要使用它們的時候不會有任何變
化

00:25:11.879 --> 00:25:13.447 
等 您要使用時它們纔會做出反應 

00:25:15.883 --> 00:25:17.050 
所以這就是應用程序接口 

00:25:17.751 --> 00:25:20.320 
這三個類別：
應用

00:25:20.387 --> 00:25:23.290 
是啓動 您的應用

00:25:23.724 --> 00:25:26.660 
元素像應用程序但是
元素的在您的應用程序中的

00:25:26.727 --> 00:25:29.363 
中的一個代理；
最後是查詢 

00:25:29.696 --> 00:25:32.599 
是用更復雜的方法
指定元素 

00:25:34.368 --> 00:25:35.969 
所以現在我想
我想講一下

00:25:36.036 --> 00:25:37.938 
關於輔助功能
和用戶界面測試 

00:25:38.405 --> 00:25:39.339 
我之前提到過

00:25:39.640 --> 00:25:43.076 
輔助功能數據
使用戶界面測試成爲可能 

00:25:44.611 --> 00:25:48.849 
所以這是不難看出
輔助功能數據

00:25:49.116 --> 00:25:53.353 
的質量如何將影響 您的測試 

00:25:53.720 --> 00:25:55.489 
事實上 輔助功能數據
質量越好

00:25:55.556 --> 00:25:58.258 
您就越更容易寫應用程序的測試

00:25:58.325 --> 00:26:01.495 
隨着時間的推移 
這些測試也就越更可靠 

00:26:02.129 --> 00:26:05.232 
所以當 您提高
輔助功能

00:26:05.299 --> 00:26:07.167 
您在您的應用程序中

00:26:07.234 --> 00:26:08.168 
就得到了雙倍的好處 

00:26:08.836 --> 00:26:11.071 
您不僅
更容易爲 您自己測試

00:26:11.305 --> 00:26:13.307 
而且也爲我們的不啓用的用戶

00:26:13.373 --> 00:26:14.508 
體驗帶來了提升高 

00:26:14.908 --> 00:26:17.711 
我建議您在用戶界面測試和
輔助功能工作的時候

00:26:17.778 --> 00:26:19.346 
要記住這一點 

00:26:21.448 --> 00:26:23.317 
有時需要做一些調試 

00:26:23.884 --> 00:26:27.454 
有時一個元素可能不
可訪問 即使 您使用記錄功能

00:26:27.521 --> 00:26:29.590 
也不能顯示 

00:26:30.457 --> 00:26:32.893 
那可能是因爲
自定義視圖子類

00:26:32.960 --> 00:26:34.828 
可能默認無法訪問 

00:26:35.529 --> 00:26:38.065 
或者它實際上不是一個視圖 

00:26:38.265 --> 00:26:41.468 
而是一個在低層圖形
子系統的圖形對象

00:26:41.535 --> 00:26:43.570 
如塗層之類的 

00:26:44.671 --> 00:26:46.573 
在其 他情況下 
元素是可見的

00:26:46.640 --> 00:26:49.042 
但具有較差的輔助功能數據 

00:26:49.343 --> 00:26:50.978 
我在看的
所有這些包含查詢的格子

00:26:51.078 --> 00:26:54.681 
如果這些格子本身
有更好的輔助功能數據

00:26:54.748 --> 00:26:57.351 
部分可能已經消失了 

00:26:58.485 --> 00:27:01.121 
當這情況出現時 
我想向您指出幾點 

00:27:01.388 --> 00:27:03.991 
第一個是
用戶界面記錄

00:27:04.291 --> 00:27:06.793 
因爲用戶界面記錄將
向給 您最直觀地的展示

00:27:07.094 --> 00:27:09.997 
測試系統是如何看待元素的 

00:27:10.430 --> 00:27:14.134 
但除了那之外 在我們的平臺上
還有輔助功能檢查員 

00:27:14.434 --> 00:27:17.171 
他們會讓 您看到的
在應用程序中的

00:27:17.471 --> 00:27:19.439 
原始輔助功能數據 

00:27:21.642 --> 00:27:23.577 
當 您需要改進數據 

00:27:24.077 --> 00:27:26.013 
您第一步應該要看界面生成器 

00:27:26.613 --> 00:27:31.084 
界面生成器有很好的
輔助功能檢查員

00:27:31.518 --> 00:27:34.121 
讓 您可以啓用
或禁用輔助功能 

00:27:34.354 --> 00:27:37.124 
爲可訪問屬性設定值 

00:27:37.524 --> 00:27:40.227 
並配置特徵  這些特徵
這些特徵對元素是如何表達的

00:27:40.294 --> 00:27:43.363 
作爲用戶界面測試的一種類型
將產生有直接的影響 

00:27:45.132 --> 00:27:47.434 
如果 您是用不能訪問
界面生成器的元素

00:27:47.501 --> 00:27:50.304 
您還可以使用應用程序接口 

00:27:50.904 --> 00:27:52.139 
您可以在NS可達

00:27:52.206 --> 00:27:54.508 
NSAccessibility裏
用應用程序接口

00:27:54.575 --> 00:27:57.344 
UIAccessibility
可達直接控制元素的

00:27:57.411 --> 00:27:59.246 
輔助功能 

00:28:01.748 --> 00:28:04.384 
所以請記住上面的那點
讓我們再看一個演示 

00:28:04.852 --> 00:28:05.919 
這一次布魯克要帶我們

00:28:05.986 --> 00:28:09.389 
通過更復雜的測試再加上一點

00:28:09.456 --> 00:28:10.657 
再加上一點輔助功能調試 

00:28:11.058 --> 00:28:12.526 
-布魯克？
 -謝謝 威爾 

00:28:19.900 --> 00:28:22.469 
所以在上一個演示中我們看到
添加一個測試

00:28:22.736 --> 00:28:26.306 
可以添加和刪除
清單中的項目 

00:28:28.008 --> 00:28:30.444 
我在這裏 我會在這個區域的
用戶界面

00:28:30.511 --> 00:28:32.012 
添加更多一些測試 

00:28:32.412 --> 00:28:33.580 
首先 我要添加一個測試

00:28:34.081 --> 00:28:37.851 
讓您可以在相同的清單
清單新增多個項目 

00:28:38.318 --> 00:28:41.889 
這多個項目是有相同的名稱清單 

00:28:42.589 --> 00:28:45.592 
所以我要在這裏複製上次測試的

00:28:45.659 --> 00:28:46.527 
這個編碼 

00:28:48.195 --> 00:28:51.932 
我叫這個爲新的測試
測試 添加到餅乾 

00:28:53.033 --> 00:28:54.101 
我現在把編碼粘貼好了 

00:28:55.302 --> 00:28:56.136 
好

00:28:56.570 --> 00:28:59.039 
現在我有一個測試

00:28:59.506 --> 00:29:01.742 
要貼在雜貨標籤上 

00:29:02.442 --> 00:29:05.345 
接下來將要添加的
新的餅乾到項目清單裏 

00:29:05.746 --> 00:29:09.716 
然後就要點擊
在那個項目中的餅乾按鈕

00:29:09.983 --> 00:29:12.085 
驗證
 實際上是

00:29:12.152 --> 00:29:14.254 
連接上的狀態 

00:29:15.222 --> 00:29:17.057 
所以要加上第二個項目
在這裏項目我就也

00:29:17.124 --> 00:29:18.258 
我也在這裏複製這個編碼 

00:29:19.927 --> 00:29:23.964 
然後看看第二個新的按鈕
也連接上了嗎 

00:29:24.598 --> 00:29:26.133 
現在我要複製這一段 

00:29:26.667 --> 00:29:28.669 
所以讓我們運行這個測試
看看這是如何工作的 

00:29:34.608 --> 00:29:35.843 
現在讓我添加第一個 

00:29:36.944 --> 00:29:37.811 
第二個 

00:29:38.779 --> 00:29:40.547 
啊 斷言失敗了 

00:29:40.914 --> 00:29:44.551 
在這一行中說 我們得到的的

00:29:44.751 --> 00:29:47.988 
的餅乾按鈕的數值在
在兩二次左右 

00:29:48.622 --> 00:29:50.257 
我們的實際上斷言實際上是失敗的 

00:29:50.424 --> 00:29:52.593 
看來是因爲多相匹配而失敗的 

00:29:53.026 --> 00:29:55.195 
我想我知道這裏發生了什麼 

00:29:56.530 --> 00:30:00.167 
餅乾按鈕常數是指定的 

00:30:00.234 --> 00:30:02.636 
這個只是尋找表格上所有的按鈕 

00:30:02.736 --> 00:30:05.739 
然後找到一個所謂的餅乾按鈕 

00:30:06.206 --> 00:30:07.741 
通過這一點 在測試中 

00:30:07.808 --> 00:30:11.144 
有兩2個按鈕被稱爲餅乾 

00:30:11.211 --> 00:30:14.948 
會找它們兩個但是

00:30:15.015 --> 00:30:17.885 
但只返回一個數值

00:30:17.951 --> 00:30:19.253 
因爲有兩個匹配的結果 

00:30:20.220 --> 00:30:23.257 
我現在知道了是因爲
是因爲看到了測試運行 

00:30:23.690 --> 00:30:27.361 
通常 您不會是看到 您的測試運行 

00:30:28.362 --> 00:30:30.864 
所以我們認爲我們應該
爲 您提供一個

00:30:30.931 --> 00:30:33.967 
可以看到測試運行的方法

00:30:34.801 --> 00:30:38.138 
我們已經在Xcode的試驗報告中
添加了這個資訊 

00:30:39.606 --> 00:30:42.376 
所以如果我去報告
導航欄和點擊

00:30:42.442 --> 00:30:43.677 
並點擊最近的測試報告 

00:30:44.077 --> 00:30:47.381 
您可以看到測試
添加到了餅乾測試 

00:30:48.348 --> 00:30:51.885 
如果我展開這個條目  您
您可以看到在測試過程中發生的

00:30:51.952 --> 00:30:53.387 
所有的活動 

00:30:54.221 --> 00:30:57.057 
在這裏我看到了這最後的一條的
餅乾按鈕項目 

00:30:57.324 --> 00:30:59.159 
這是我們要找的失敗 
多相匹配 

00:30:59.893 --> 00:31:03.564 
還有一個快速查找按鈕
在這裏 我可以在這裏看

00:31:04.231 --> 00:31:05.666 
將顯示
應用程序發生時的

00:31:05.732 --> 00:31:07.167 
確切的狀態 

00:31:07.234 --> 00:31:09.436 
正如我們所知道的原因一樣

00:31:09.503 --> 00:31:10.938 
有兩排都叫做餅乾 

00:31:11.505 --> 00:31:13.607 
其中一個被選中
另外一個沒被選中 

00:31:19.513 --> 00:31:23.650 
如果我想要看到完整的斷言的話

00:31:24.384 --> 00:31:25.319 
<br/> 
我可以去查看日誌

00:31:26.653 --> 00:31:28.722 
在這裏我可以展開測試日誌 

00:31:32.559 --> 00:31:37.264 
在這裏我們可以看到
完整的失敗的斷言

00:31:37.331 --> 00:31:40.167 
展示輔助功能等級的
的兩個按鈕 

00:31:42.369 --> 00:31:44.304 
在這裏我可以看到
是的 有一個按鈕

00:31:44.371 --> 00:31:46.173 
沒有被選中
另一個被選中了 

00:31:47.674 --> 00:31:49.176 
正如我所預計的一樣 

00:31:50.010 --> 00:31:51.578 
讓我們返回去
去把那個問題解決好 

00:31:52.613 --> 00:31:55.582 
最簡單的
解決這個問題的方法是

00:31:55.649 --> 00:31:56.550 
再次使用記錄 

00:31:57.084 --> 00:31:59.520 
我會在這個斷言失敗前
設定一箇中斷點

00:31:59.586 --> 00:32:01.488 
然後在那個點那裏運行測試 

00:32:11.331 --> 00:32:15.102 
好的 
所以現在我得到了我想要獲得的

00:32:15.969 --> 00:32:18.172 
那個爲被選中的按鈕的數值 

00:32:18.338 --> 00:32:20.841 
我要做的就是
要點擊記錄 

00:32:23.043 --> 00:32:23.877 
點擊按鈕

00:32:24.945 --> 00:32:25.879 
停止記錄 

00:32:26.513 --> 00:32:29.416 
現在我有辦法關聯到那個按鈕了 

00:32:30.217 --> 00:32:33.387 
我要用常數用表來
把這個給清除一下 

00:32:34.288 --> 00:32:36.690 
這個就叫做餅乾按鈕2 

00:32:36.790 --> 00:32:38.158 
新的測試出現了 

00:32:45.699 --> 00:32:47.801 
現在來解決測試問題
我要用那個新的參考

00:32:47.868 --> 00:32:49.670 
改變以下的每一個三行 

00:32:53.874 --> 00:32:56.043 
當我再次運行測試 
 就應該是成功的了 

00:33:06.887 --> 00:33:07.721 
好！

00:33:13.327 --> 00:33:14.261 
好的 

00:33:14.328 --> 00:33:16.563 
現在我有一個測試
可以從清單添加和刪除項目

00:33:16.630 --> 00:33:19.066 
另一個測試可在同一個清單裏
添加兩2個項目的測試

00:33:19.132 --> 00:33:21.401 
並驗證它們都存在 

00:33:22.202 --> 00:33:23.237 
現在我要建立一個測試

00:33:23.504 --> 00:33:26.306 
這將清單中的所有項目都刪除 

00:33:29.510 --> 00:33:30.777 
我又一次使用記錄 

00:33:34.748 --> 00:33:39.453 
點擊雜貨標籤的編輯 然後刪除

00:33:40.120 --> 00:33:42.856 
測試行中的蘋果那行 

00:33:45.759 --> 00:33:47.261 
好吧？
點擊停止錄製 

00:33:48.028 --> 00:33:53.100 
這樣的測試差不多就是我想要的 

00:33:53.634 --> 00:33:57.704 
但我想做的是 
我想讓我的測試與對應用的

00:33:57.771 --> 00:33:59.173 
數據無關 

00:33:59.439 --> 00:34:01.708 
我想把所有的項目刪除
 但我不想要它們

00:34:01.775 --> 00:34:05.245 
指向它們的標籤 

00:34:06.480 --> 00:34:08.282 
因爲那會變得很囉嗦 

00:34:08.715 --> 00:34:11.952 
所以首先我要做的是

00:34:13.453 --> 00:34:14.655 
您看到這些標記在這裏 

00:34:14.721 --> 00:34:20.494 
這些標記提供了獲得相同的
用戶界面元素的多種途徑 

00:34:20.561 --> 00:34:23.764 
在這種情況下 首先刪除蘋果按鈕 

00:34:23.830 --> 00:34:24.831 
我可以把這個叫做

00:34:24.898 --> 00:34:27.801 
桌面按鈕
table.button刪除蘋果 

00:34:28.001 --> 00:34:31.038 
我可以更具體地的

00:34:32.105 --> 00:34:34.041 
在蘋果的格子裏

00:34:34.574 --> 00:34:36.342 
說這是刪除蘋果按鈕

00:34:37.177 --> 00:34:38.445 
我就採用這個

00:34:40.947 --> 00:34:43.050 
雙擊 把它轉換爲文字 

00:34:44.784 --> 00:34:46.085 
所以現在

00:34:47.821 --> 00:34:48.655 
我有了兩2排

00:34:49.456 --> 00:34:50.991 
像以前獲得一樣的元素那樣 

00:34:51.291 --> 00:34:55.094 
我想做的是通過索引獲取格子 

00:34:55.161 --> 00:34:57.664 
我會加一個常數叫let格 表格 

00:34:59.333 --> 00:35:00.367 
並設定這個

00:35:00.434 --> 00:35:03.470 
與桌面單元table.cells元
素索引相同 

00:35:03.937 --> 00:35:08.742 
因爲自從蘋果是索引1
我就用那個 

00:35:09.510 --> 00:35:11.144 
我只需把那個常數

00:35:12.679 --> 00:35:13.814 
替換成這個關聯

00:35:17.417 --> 00:35:18.418 
好的 
我幾乎完成了 

00:35:19.520 --> 00:35:22.422 
下一部分我需要改變的是
的是如何把

00:35:22.489 --> 00:35:25.826 
按鈕從格子里弄出來 
因爲其他行不

00:35:25.993 --> 00:35:27.227 
不會有刪除蘋果的按鈕 

00:35:27.294 --> 00:35:29.897 
他們會有刪除橙子
或刪除麪包的按鈕 

00:35:30.264 --> 00:35:33.300 
我只需要找到那個標籤

00:35:33.834 --> 00:35:35.936 
開頭寫着刪除這個詞 

00:35:36.637 --> 00:35:38.438 
我需要使用屬性

00:35:41.842 --> 00:35:43.043 
所以在這裏

00:35:44.411 --> 00:35:45.512 
我用匹配屬性

00:35:45.879 --> 00:35:46.847 
找到了標籤

00:35:46.914 --> 00:35:49.550 
開頭爲刪除的按鈕 

00:35:51.385 --> 00:35:54.521 
所以 我最後要改變的是 

00:35:54.588 --> 00:35:56.757 
我想補充一個
像之前一樣的斷言 

00:35:56.823 --> 00:35:59.193 
我想驗證一下
一下在我們刪除後

00:35:59.259 --> 00:36:00.627 
那格子消失了沒 

00:36:01.261 --> 00:36:03.163 
我將使用XCT
AssertEqual斷言匹配 

00:36:03.230 --> 00:36:06.600 
並斷言這些格子
存在屬性返回是false否的

00:36:06.667 --> 00:36:09.069 
當我們點擊了
確認刪除按鈕 

00:36:11.071 --> 00:36:12.105 
我要現在要運行測試 

00:36:21.615 --> 00:36:23.383 
蘋果那行已被刪除

00:36:25.252 --> 00:36:26.320 
但斷言是失敗的 

00:36:26.720 --> 00:36:28.889 
我可能知道是怎麼回事 

00:36:30.457 --> 00:36:33.493 
要顯示是怎麼回事
現在我要將使用調試器 

00:36:33.594 --> 00:36:36.196 
我會在這裏設置一個斷點
並再次運行測試 

00:36:36.263 --> 00:36:37.130 
運行到相同的斷點 

00:36:45.305 --> 00:36:46.139 
好 

00:36:47.307 --> 00:36:50.644 
在調試器中 我現在
我現在啓用格子的調試說明 

00:36:58.886 --> 00:37:01.755 
調試說明
有大量的信息

00:37:01.822 --> 00:37:03.891 
是關於有關如何格子是如何運作的 

00:37:04.391 --> 00:37:07.127 
因此 在我啓動它的時候
時候可以看到 

00:37:07.895 --> 00:37:10.631 
這個格子第一個
去應用程序裏找

00:37:14.368 --> 00:37:16.036 
然後它再到找到
表格裏找 

00:37:17.571 --> 00:37:18.639 
然後到元素裏去尋找 

00:37:18.972 --> 00:37:21.942 
然後到所有元素和
索引裏去找 

00:37:22.609 --> 00:37:24.811 
我可以看到 它實際上
找到橙子那行 

00:37:25.979 --> 00:37:28.015 
它看起來可能是

00:37:29.183 --> 00:37:34.888 
當我們調用這個格子的
的存在屬性時 

00:37:35.822 --> 00:37:37.658 
它實際上是自己重新啓動 

00:37:37.858 --> 00:37:40.160 
雖然我們除去了蘋果那排

00:37:40.961 --> 00:37:45.933 
在索引裏又有了新的格子 

00:37:46.800 --> 00:37:49.036 
所以總的來說是沒問題的 

00:37:50.270 --> 00:37:52.973 
這只是意味着我需要
另外的方法來

00:37:53.140 --> 00:37:55.442 
來找出我們是否
已經刪除了那行 

00:37:56.009 --> 00:37:57.945 
所以我要添加一個斷言 

00:37:58.011 --> 00:37:59.947 
斷言格子的數量

00:38:00.147 --> 00:38:01.281 
到達這一點 

00:38:03.250 --> 00:38:05.919 
所以 我要增加一個新的屬性
屬性稱爲“計數”

00:38:08.422 --> 00:38:11.592 
我把這個設置爲等於
表中格子的計數 

00:38:14.628 --> 00:38:18.465 
然後 斷言
這等於計數減1 

00:38:20.033 --> 00:38:22.569 
現在 最後一件事我將
會說這個是一個

00:38:22.636 --> 00:38:24.471 
一個刪除所有項目的測試 

00:38:25.239 --> 00:38:27.975 
把它改爲添加循環

00:38:30.277 --> 00:38:31.211 
循環 然後

00:38:31.278 --> 00:38:33.113 
只要表格裏還有一個格子

00:38:33.180 --> 00:38:35.749 
就一遍又一遍的不停循環 

00:38:39.119 --> 00:38:40.153 
讓我們來運行一下 

00:38:46.894 --> 00:38:49.429 
好的它移除了蘋果和桔子橘子那排 

00:38:55.402 --> 00:38:56.236 
好 

00:39:04.645 --> 00:39:07.681 
最後一件事
就是添加一個測試

00:39:07.814 --> 00:39:10.751 
來使用在編輯界面看到的顏色那行 

00:39:15.556 --> 00:39:17.791 
我再一次
使用記錄器 

00:39:21.395 --> 00:39:23.330 
我將點擊雜貨標籤和編輯 

00:39:24.064 --> 00:39:24.898 
現在

00:39:25.098 --> 00:39:26.867 
這裏的UI顏色

00:39:27.367 --> 00:39:29.570 
讓我
可以改變列表的顏色 

00:39:29.870 --> 00:39:31.305 
它現在看起來是綠色的 

00:39:31.905 --> 00:39:35.742 
所以我會嘗試改變它
紅色或者藍色怎麼樣？

00:39:37.778 --> 00:39:39.947 
好了 所以當我點擊
這些按鈕 看起來

00:39:40.013 --> 00:39:42.749 
看起來它沒有記錄我想要的 

00:39:42.816 --> 00:39:44.952 
它看起來像是它
記錄了一個

00:39:45.018 --> 00:39:47.821 
所謂的靜態文本顏色
您看在這裏 

00:39:48.555 --> 00:39:51.825 
所以 我認爲可能是什麼
出了問題就是

00:39:51.892 --> 00:39:54.127 
就是這些UI元素
可能是對輔助功能

00:39:54.194 --> 00:39:55.062 
不可見 

00:39:56.096 --> 00:39:57.130 
所以 我要停止記錄 

00:39:58.799 --> 00:40:01.635 
我可以使用
輔助檢查

00:40:01.702 --> 00:40:02.603 
來告訴我是怎麼回事 

00:40:03.170 --> 00:40:05.672 
右鍵單擊Xcode然後
去開啓的開發工具 

00:40:05.739 --> 00:40:06.840 
輔助檢查 

00:40:08.342 --> 00:40:11.411 
而輔助檢查
提供了大量的信息 

00:40:11.478 --> 00:40:15.048 
但我只想使用
快捷方式 命令S7 

00:40:15.782 --> 00:40:19.219 
這將突出
鼠標光標下面的UI元素 

00:40:21.321 --> 00:40:22.923 
如果我把鼠標光標

00:40:22.990 --> 00:40:25.726 
放在麪包這個詞這裏 
按命令F7 

00:40:25.993 --> 00:40:27.327 
它就突出麪包 

00:40:29.096 --> 00:40:31.431 
如果我把它放在
麪包刪除按鈕這裏 

00:40:31.765 --> 00:40:33.066 
您可以看到 
它突出了這一點 

00:40:35.802 --> 00:40:37.905 
現在 讓我們看看
如果我把鼠標光標

00:40:37.971 --> 00:40:40.073 
放在這個黃色按鈕
會發生什麼 

00:40:42.276 --> 00:40:44.178 
啊哈！它突出了
整排 

00:40:45.913 --> 00:40:46.847 
所以這幾乎證實了

00:40:46.914 --> 00:40:49.650 
這個UI元素根本
對輔助功能是不可見的 

00:40:51.084 --> 00:40:52.452 
幸運的是 我可以用故事板

00:40:52.819 --> 00:40:55.255 
改變這種情況 
解決這個問題 

00:41:00.027 --> 00:41:01.161 
我現在打開故​​事板 

00:41:05.532 --> 00:41:07.868 
在我的故事板這裏
我有同樣的按鈕

00:41:09.703 --> 00:41:12.773 
如果我打開檢查 
我可以看到

00:41:12.840 --> 00:41:17.978 
這些按鈕實際上有
一類的可點擊的顏色視圖 

00:41:18.045 --> 00:41:19.913 
我熟悉這個類別 

00:41:19.980 --> 00:41:22.516 
我知道它實際上
不是用戶界面按鈕 

00:41:24.451 --> 00:41:26.553 
這是自定義視圖如果我再往下
輔助檢查的部分

00:41:26.920 --> 00:41:29.823 
我可以看到
它是沒有被啓用 

00:41:30.257 --> 00:41:33.327 
我已經過了一遍並且
並且添加了標籤 

00:41:34.461 --> 00:41:37.731 
爲了解決這個問題  我需要做的
我需要做的是選擇所有的按鈕 

00:41:40.634 --> 00:41:45.339 
然後我會啓用輔助功能的選框 

00:41:45.606 --> 00:41:46.740 
由於它他們像按鈕 

00:41:46.807 --> 00:41:48.242 
我糾結要不要給
它們按鈕的特性 

00:41:51.678 --> 00:41:52.513 
好吧？

00:41:52.846 --> 00:41:54.381 
現在讓我們再來運行
這個應用程序 

00:42:02.656 --> 00:42:05.792 
而現在我要再次記錄
這個測試 

00:42:06.093 --> 00:42:08.629 
點擊雜貨和編輯 

00:42:09.496 --> 00:42:12.533 
然後紅色  然後橙色 

00:42:12.799 --> 00:42:15.536 
黃、 綠、 藍和灰 

00:42:17.371 --> 00:42:19.940 
好  它實際上
記錄所有這些 

00:42:21.642 --> 00:42:23.911 
我會停止記錄
讓我們來運行它看看

00:42:23.977 --> 00:42:26.313 
它是否可以回放 

00:42:33.020 --> 00:42:35.956 
好  我已經修復了
訪問我的應用程序 

00:42:36.657 --> 00:42:38.292 
而且我也讓
它變得更容易測試 

00:42:39.026 --> 00:42:40.327 
如果我要
完成這一測試 

00:42:41.461 --> 00:42:43.830 
我可能會增加
一些斷言驗證

00:42:43.897 --> 00:42:45.232 
這些按鈕的變化的狀態 

00:42:45.465 --> 00:42:46.700 
現在 我將舞臺還給威爾 

00:42:53.907 --> 00:42:55.375 
所以這
所以這真的挺棒 

00:42:55.475 --> 00:42:58.846 
尤其是使它變得多麼的簡易

00:42:58.912 --> 00:43:01.281 
以前配音用戶
用戶沒能那麼幸運地

00:43:01.348 --> 00:43:04.818 
做到這些  現在只是
現在只是在界面生成器做了

00:43:04.885 --> 00:43:07.154 
幾個簡單的變化
布魯克能夠使

00:43:07.221 --> 00:43:09.656 
能夠使它變得可訪問
並和UI可測 

00:43:12.025 --> 00:43:15.128 
因此 在演示中 
更先進的UI測試 

00:43:15.195 --> 00:43:17.731 
您看到在一些情況下
它如何處理衝突

00:43:17.798 --> 00:43:20.834 
和一些個查詢  以及如何
以及如何糾正這些查詢 

00:43:20.901 --> 00:43:25.305 
以及如何調試它 
如何建立循環

00:43:25.739 --> 00:43:28.775 
並對其進行驗證  以及如何
還有如何使用存在的屬性

00:43:28.842 --> 00:43:32.446 
並且還強調如何
重新評估查詢 

00:43:32.679 --> 00:43:35.916 
他們用標準
創造了它們 

00:43:35.983 --> 00:43:39.253 
這標準就是確定
怎樣重新評估 

00:43:39.686 --> 00:43:41.922 
我們使用索引1一的元素 

00:43:41.989 --> 00:43:45.058 
這裏要指出的是  蘋果
蘋果標籤在第一時間通過UI改變後 

00:43:45.292 --> 00:43:47.427 
UI改變後它就馬上消失了 

00:43:47.594 --> 00:43:50.864 
現在被指向橘子標籤
橘子標籤 然後最後 

00:43:51.565 --> 00:43:52.766 
如何提高輔助功能 

00:43:52.999 --> 00:43:56.904 
這樣做的回報是非常棒的 

00:43:59.006 --> 00:44:01.041 
布魯克也給你們看了
一眼測試報告 

00:44:01.108 --> 00:44:03.810 
我們在Xcode 7
做了一些努力來

00:44:03.911 --> 00:44:07.381 
檢修它他們的UI測試 

00:44:07.714 --> 00:44:11.018 
概括總括來說就是  測試報告
測試報告就是所有的運行測試

00:44:11.084 --> 00:44:12.386 
您看到的結果 

00:44:12.953 --> 00:44:16.323 
它顯示了通過或失敗
失敗 失敗消息 

00:44:16.990 --> 00:44:18.192 
性能測試的

00:44:18.258 --> 00:44:20.294 
性能指標
都顯示在報告裏 

00:44:21.061 --> 00:44:24.231 
您在XCode和Xcode 
Server裏得到相同的用戶界面 

00:44:24.364 --> 00:44:26.333 
這是一個一致的
經驗

00:44:26.400 --> 00:44:28.869 
不管您是否正在尋找
整合或

00:44:28.936 --> 00:44:30.571 
您在本地計算機剛剛做的運行 

00:44:31.438 --> 00:44:33.941 
在Xcode Server
您也能獲得每個設備的結果 

00:44:34.007 --> 00:44:36.810 
因爲您可以有設備
能可以同時

00:44:36.877 --> 00:44:37.778 
整合多種設備 

00:44:38.478 --> 00:44:41.114 
對UI測試的一點補充一點是 

00:44:41.548 --> 00:44:43.784 
我們在UI測試中收集了
多餘的數據 

00:44:43.851 --> 00:44:45.652 
這包括屏幕截圖 

00:44:46.320 --> 00:44:50.290 
您看到了它是如何幫助布魯克
調試他的查詢衝突

00:44:50.357 --> 00:44:53.060 
通過在查詢失敗時
拿出屏幕截圖 

00:44:54.094 --> 00:44:59.066 
此外 我們還整理了應用程序接口
調用進入這些嵌套活動

00:44:59.132 --> 00:45:02.135 
來幫助您瞭解
應用程序接口調用是如何工作的 

00:45:02.769 --> 00:45:04.638 
讓我們一起來看看
這樣的一個例子 

00:45:04.972 --> 00:45:06.273 
這不在名單草案裏 

00:45:06.340 --> 00:45:07.441 
它是一個不同的應用程序 

00:45:07.875 --> 00:45:11.044 
但我要告訴您
在嵌套的活動

00:45:11.111 --> 00:45:12.880 
幾個步驟
是如何分解的 

00:45:13.580 --> 00:45:15.749 
這個例子我們
我們輸入到測試現場

00:45:15.816 --> 00:45:18.886 
然後所以您就可以調用高層次的
應用程序接口型式測試 

00:45:19.686 --> 00:45:21.221 
但在內部裏它已經分解了 

00:45:21.622 --> 00:45:24.258 
在第一步我們等待
應用程序空閒下來 

00:45:24.625 --> 00:45:27.127 
我們實際上觀察
測試的應用程序的

00:45:27.461 --> 00:45:28.762 
主運行循環 

00:45:29.129 --> 00:45:31.265 
因爲我們不希望
在它忙於處理的時候 

00:45:31.632 --> 00:45:32.966 
發送事件給它 

00:45:33.033 --> 00:45:35.002 
我們希望它是
儘可能快速響應的 

00:45:35.736 --> 00:45:41.175 
一旦它的閒置 我們就從輔助功能
那捕捉到我們的數據

00:45:41.575 --> 00:45:42.776 
然後我們啓動查詢 

00:45:42.843 --> 00:45:45.078 
確保它的匹配
正好是一個 

00:45:46.180 --> 00:45:48.682 
下一步  我們綜合
我們綜合真實事件

00:45:48.749 --> 00:45:50.817 
<br/> 
在該區域插入文本 

00:45:51.618 --> 00:45:55.088 
最後 我們在應用程序空閒之後
再等待多一點的時間 

00:45:55.155 --> 00:45:58.158 
因爲 再一次 我們要
我們要以可靠的和確定的方式

00:45:58.225 --> 00:46:01.461 
掌控 

00:46:03.096 --> 00:46:05.532 
快相是在關鍵的步驟

00:46:05.599 --> 00:46:07.601 
截屏用的 

00:46:07.968 --> 00:46:11.471 
您可以在這裏看到
我輸入的文本後的狀態 

00:46:11.738 --> 00:46:13.540 
確保一切都和您預計的樣子一樣 

00:46:16.343 --> 00:46:19.913 
因此 UI測試顯然是
那種您可以爲你您的應用程序做的

00:46:19.980 --> 00:46:22.049 
巨大的擴展 

00:46:22.449 --> 00:46:24.051 
所以您在想什麼
時候用它呢 對嗎？

00:46:24.451 --> 00:46:26.720 
我們已經有單元測試了 

00:46:27.120 --> 00:46:30.157 
UI測試是一種補充測試
測試 而不是替代 

00:46:30.557 --> 00:46:33.460 
您應該對您的模擬的目標
繼續使用單位測試 

00:46:33.527 --> 00:46:35.195 
和您的控制器邏輯 

00:46:35.529 --> 00:46:38.398 
因爲單元測試將更能
精確查明在您的代碼中

00:46:38.465 --> 00:46:39.499 
出現的故障 

00:46:40.200 --> 00:46:43.370 
UI測試可以讓您
覆蓋更廣泛的功能範圍

00:46:43.437 --> 00:46:45.672 
但跟蹤故障

00:46:45.739 --> 00:46:47.341 
卻更能會比較困難 

00:46:47.741 --> 00:46:51.111 
這是在您的項目的單元測試之間
和UI測試之間 

00:46:51.178 --> 00:46:53.113 
尋找合適的平衡 

00:46:54.781 --> 00:46:56.717 
適合UI測試的人選 

00:46:57.217 --> 00:46:58.352 
嗯 想想您的應用程序 

00:46:58.418 --> 00:47:00.254 
您有用戶客戶 
您展示給他們看 

00:47:00.320 --> 00:47:02.489 
您很少能展示一系列的
演示給他們的 

00:47:02.556 --> 00:47:03.724 
您給他們過一遍後說“好 

00:47:03.790 --> 00:47:04.992 
這是您要怎麼做”
 “ 

00:47:05.492 --> 00:47:08.595 
一系列的演示是
UI測試的很好的候選人 

00:47:08.662 --> 00:47:11.932 
經過每日每夜的構建之後

00:47:12.266 --> 00:47:13.734 
您會知道這些演示非常有用 

00:47:14.635 --> 00:47:17.070 
第二 除此之外 
常見的工作流程 

00:47:17.638 --> 00:47:20.974 
如果它是一個編輯應用程序 
那麼這個應用程序是做什麼用的

00:47:21.074 --> 00:47:22.376 
您如何編輯文檔 

00:47:23.777 --> 00:47:25.913 
任何自定義視圖 

00:47:26.513 --> 00:47:29.449 
最後基於文檔的工作流程
工作流程 打開和保存 

00:47:29.750 --> 00:47:31.485 
這些都是可以
自動化的很好的事情 

00:47:31.685 --> 00:47:33.921 
它他們如果進行單元測試的話
的話會很難捕捉 

00:47:33.987 --> 00:47:36.657 
如果它他們出錯了
會對用戶產生巨大的影響 

00:47:39.092 --> 00:47:40.494 
因此 UI測試 

00:47:41.562 --> 00:47:42.696 
在新的XCode 7中 

00:47:43.764 --> 00:47:45.732 
開啓打開了您如何測試
您的應用程序的

00:47:45.799 --> 00:47:48.101 
的各種可能性 

00:47:49.269 --> 00:47:51.905 
在UI測試您
您查找並和與用戶體驗元素互動

00:47:52.139 --> 00:47:55.275 
互動和您整合事件

00:47:55.342 --> 00:47:58.011 
驅使它他們  就是些
就是些普通用戶會做的事情 

00:47:58.979 --> 00:48:01.648 
您可以驗證的用戶界面
屬性和狀態 

00:48:03.517 --> 00:48:06.620 
和UI記錄讓您超快速地
創建這些測試 

00:48:06.854 --> 00:48:07.888 
超級簡單 

00:48:09.489 --> 00:48:11.592 
最後 我們已經徹底改革了
了測試報告

00:48:12.059 --> 00:48:15.562 
讓您能更好地
瞭解您的測試是如何工作的

00:48:16.063 --> 00:48:17.698 
並收集更多
關於它他們的數據 

00:48:18.665 --> 00:48:19.700 
所以這就是UI測試 

00:48:28.408 --> 00:48:30.644 
那麼關於更多的信息
我們已經上傳到XCtest 

00:48:30.711 --> 00:48:32.145 
XC測試上了 

00:48:32.212 --> 00:48:35.215 
您可以在通過Xcode和
我們的網站中得到它 

00:48:35.549 --> 00:48:37.784 
輔助功能也
有很好的的文件 

00:48:37.851 --> 00:48:39.052 
我建議你們去看看 

00:48:40.521 --> 00:48:43.223 
開發者論壇是提出問題
與交流技巧和與其他

00:48:43.290 --> 00:48:47.060 
您如何使用方法的好地方 

00:48:47.127 --> 00:48:50.330 
我們的宣傳員傳道斯特凡·萊斯是
一個可以幫您開始使用的

00:48:50.564 --> 00:48:51.498 
很好的聯繫人 

00:48:52.733 --> 00:48:55.469 
這裏也有一些相關教程
如果您稍後要觀看的話

00:48:55.536 --> 00:48:58.038 
可以觀看昨天早上的關於
關於輔助功能的教程 

00:48:58.539 --> 00:49:00.474 
如果想的話
也可在您的午餐時間觀看

00:49:01.041 --> 00:49:04.478 
持續整合、代碼覆蓋率 新技術

00:49:04.811 --> 00:49:08.715 
在Xcode Server上您可以
在看明天下午觀看 

00:49:09.082 --> 00:49:10.284 
希望每一個人都有很大收穫 