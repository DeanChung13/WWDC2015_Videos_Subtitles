和DemoBots一起深入GameplayKit
大家好欢迎来到“和DemoBots一起深入GameplayKit”
今年我们创建了一个新的游戏示例名字叫DemoBots
如果你想在家玩那么今天你就可以
从developer.apple.com/spritekit把这个示例下载回来
这个游戏利用了大量你们在“SpriteKit会话中有什么新料”
以及“GameplayKit简介”中
学到的东西如果你不会的话就去看看吧
如果不给你们演示我们就无法完成
这个叫做DemoBots的游戏
我们来看一下这个游戏该怎么玩
我们开始一个新游戏 你就是PlayerBot就是这里的这个人
你的任务是在时间用完之前找到并干掉每个关卡内的
坏的TaskBots
我们这里还有两个好的TaskBots 因为它们的脸是绿色的
所以你可以知道是好的TaskBots
如果我在这个角落这里溜达一圈就可以找到第一个坏TaskBots
在这个例子中他是一个GroundBot
当他发现我的时候他就会朝我冲过来并且攻击我
我损失了一些电量
没关系 我要用一道射线搞定他
我用射线照射了它几秒钟后就搞定了 他就成了绿色
我们看看他要去哪儿
我们又找到了一个坏的TaskBots
我来把他也搞定
时间走完之前我在这个关卡内还有两个坏的TaskBots需要搞定 
不幸的是 它们也会互相攻击 
把对方变成坏的TaskBots 
那里就出现了这种情况 
把它们全部搞定后
这一关就算完成了 
这是第二关
第二关中增加了一种新的角色 FlyingBot
那里就挂着一台FlyingBot他正在自娱自乐
当你找到一台坏的FlyingBot时
它们有不同的攻击方式 当我们撞到他的时候 
他发起了爆炸攻击 影响到了一定半径范围内的全部角色 
好消息是 如果你搞定一台FlyingBot 那么它们的攻击
就成了善意的攻击 可以搞定射程内的其它坏的FlyingBot
跟着他到这儿 
他肯定要撞上另外一台坏的FlyingBot了 
他躲开了他 好吧 我可以自己搞定他
他肯定要犯个大错了
他正朝着角落那里的一个大巢穴走去了
肯定是这样的
当他被转变成坏的FlyingBot时我们可以利用他的爆炸攻击
他把一个两个坏的FlyingBot转变成好的了
就剩一个了 还剩一个
啊 不好！这可不妙 
又搞定一个 
这一关也完成了 
这就是DemoBots 
我想看看我们使用了哪些工具
和技术来实现这款游戏
你可以看到当TaskBots走动时它们有大量的动画状态 
我们努力做的一件事 就是把我们需要的纹理 图像
保持在最低程度 从而让app的大小不太夸张 
我们决定让SpriteKit中的新的动作编辑器
把动作创建为...把动画创建为动作而不是把动画创建为纹理
你们看到的攻击动画 那个攻击射线 
是我们制作并应用到GroundBot以及FlyingBot
上面的参考动作 
如果我们点击进到那个动作 我们就可以看到它是由
很多的微小的移动动作一个接一个组成的 
因为它是一个参考动作 我们创建一次后 
就可以不考虑TaskBots的方位 把它应用到
所有的TaskBots上 
因为它是一个参考动作 我们创建一次后 
还可以对它进行修改对源进行修改 
我们可以看到变更在各个地方都生效了 我们就无需
在多个地方对它进行修改 
我们使用动作编辑器来生成射线动画 
这个射线持续了这样长的几秒钟 我们还想让这个射线
随着时间衰减 我们也在编辑器中创建了那些动作 
这样我们就能直观地看到它 并且把它用到游戏中 
游戏中所有的资产都是在资产目录中创建的这些资产目录在Xcode 7
之外 替我们转换成了纹理地图集 
这就意味着当我们把它们用在游戏中时
我们就可以获得尽可能好的绘制性能 
我们有很多这样的图像 
它还使得我们可以指定在不同的设备上
使用的正确的图像 
它还可以帮助我们进一步优化图像的尺寸 
当我们设计我们的关卡时 我们使用七百六十八点的参考标高 
那边的那个黄色框那是我们想在屏幕上
显示多少个关卡的参考 
以那个尺寸计算我们的PlayerBot是一百二十个点 而如果我们
在一台iPad上使用那个关卡 那台iPad就也是七百六十八点 
这样我们就知道了PlayerBot在屏幕上的尺寸他是一百二十个点
我们就可以计算出要想在屏幕上得到他的清晰图像 
他的尺寸应该是多少 
如果我们把那个关卡按比例缩小到一部
比如三百二十个点高度的iPhone上 他就会变小 
他的高度就会成为五十个点 
在iPad上我们不需要这么高分辨率的纹理 
我们就可以节省空间 
如果我们观察下我们的DemoBots支持的设备 
iPad iPhone以及Mac随着场景高度的变化
我们就可以计算出对应的玩家的高度 
iPhone 6比4S到5S都略微大一点 
我们使用的也是同样的资产它太小了 你没注意到
这就意味着你可以计算出我们需要的1X 2X 3X资产 
让图像看起来清晰 同时又避免了使用超出我们需要的更多的像素 
为了简单起见我们把iPhone 6 Plus向下取整为了一百八十像素 
我们可以为每种设备设置我们想要的资产 
游戏中我们有很多这样的资产 
我意思是它们的数量非常多数以千计 
实际上所有的这些角色资产都是在一个3D渲染输出上生成的 
我们也可以连接那个渲染输出 
我们也让那个资产目录的生成实现了自动化 
这里的这个JSON文件 这是PlayerBot
行走动画的一帧 
我们同样也可以自动生成这些文件这就是Xcode使用资产目录生成的
我们也可以让为每种设备拾取正确的图像这一过程
自动化 我们以后也会公布资产目录
格式参考 以便让你可以更加容易地
自己创建这些文件我们还在游戏中使用了另外SpriteKit的一项特性 
即SKCameraNode 在那之前 如果我们想要
在关卡内移动视图 我们就需要实际移动
整个场景 我们就必须把关卡自身移动到视图下面 
而有了SKCameraNode 事情就变得简单多了 
摄像机就是场景中的一个节点它有自己的位置
因为它有自己的位置 我们就可以通过改变它的位置 
来移动摄像机就像移动其他节点一样 
改变当前视图看到的位置就更加容易了 
因为它是一个节点 我们还可以用它来做节点能做的事 
举例来说 我们可以向那个节点应用约束 
我们可以用这个把节点的摄像机位置约束到
一个PlayerBot位置 当他朝着屏幕角落跑去时 
我们在他四周就有很多黑色空间 
而不是我们想在屏幕上看到的尽可能多的关卡 
我们还可以使用第二个约束来对它进行改进 
这个约束可以确保我们不会太过于靠近关卡的边缘 
看起来就是这样的 
一般来说 我们会跟随PlayerBot 
但是如果他靠近了边缘 我们就会停止跟随他 
让更多的关卡显示在屏幕上 
当敌方bots攻击你的时候 这就更容易看出来了 
那么我们是怎样实现的？
我们首先计算出整个关卡的封边矩形 
然后我们根据它们看到的游戏屏幕的
宽度和高度得到一个较小的矩形 
我们再确保摄像机不能移动到这个框以外 
我们把它约束到那个矩形 
这样当摄像机跟随玩家四处移动时它就不会太过于靠近
关卡的边缘 
因为摄像机是一个节点了 我们还可以向它添加子节点 
这就非常有利于警告信息的显示比如我们在游戏中的计时器标签
我们不想让计时器标签移动 我们想让它顶部居中显示 
因此我们就把它添加为摄像机的一个子节点 
而不是场景的一个子节点这样的话当摄像机四处移动时
标签也会随之移动在屏幕的适当位置保持这个固定特效就更加容易了 
这些就是我们在游戏中用到的部分SpriteKit特性 
我们再来看看如果我们用的是GameplayKit的某些特性会怎样 
首先是GKStateMachine
你应该已经在GameplayKit会议上
见到过它了那场会议讲的是你如何使用状态机追踪你的游戏内的
角色 关卡以及其他元素发生了什么情况 
我们把这个以及其他一些东西用在了PlayerBot上 
这是他的状态 
他首先是处于“出现”阶段 
也就是说他刚被“传送”到了游戏中 
为此使用定制状态很棒的一点就在于
它们可以确保不会发生意外 
当他们启动后 就激活了一个计时器 过了一定时间后 
它就会直接移动到玩家控制状态 
然后打开输入使用这样你就可以控制它了
当他命中一个目标后 我们就把他的状态改为“命中”
当我们被命中后 我们就输入一个不同的动画 就是那个
跳跃动画 当玩家被命中后 就不能再控制玩家了 
输入就会关掉 并且继续跟踪状态 
当时间过完后再把他移回玩家控制状态 
如果我们被命中的次数足够多 我们就必须重新充电 
我们就到了“重新充电”状态 而不是“命中”状态 
那个会追踪我们重新充电了多长时间 
那个状态也会真的
给玩家添加更多的电量 
最后重新充电结束后它就会回到PlayerControlled状态 
这就是玩家可以拥有的一套合理的复杂的行为 
使用一台状态机来对状态进行编码 
引起状态的发生定义要发生的正确的事
从一个状态移动到另一个状态 这样要确保游戏内仅仅会
发生正确的事就更加容易了 
我们的PlayerBot不会做出我们不想让他做的事
我们同样也把它用到游戏本身上面 
当你玩一个关卡时 我们就处于一个活动状态 
如果我们点击“暂停”那么我们就会进入暂停状态
这就会通过在你退出暂停状态时删除那个
覆盖 从而对覆盖进行处理 
如果我通关了一个关卡 我们就处于一个成功状态
同样地 当我们成功时 它就会处理所有的
显示按钮、进行覆盖这些任务 
在这些情况中状态知道应该做什么事情 
我们还用到了GameplayKit的另一个方面 
即实体和元件 
新的元件是对自含式功能性在游戏的不同实体上
分享的功能性进行打包的一种相当不错的方式 
我们有三个实体我们有PlayerBot
GroundBot以及FlyingBot 
它们有一些共同之处 
它们都需要被渲染进场景中 
它们都需要一个阴影 
所以要完成这些事情我们就有了一个渲染元件以及一个阴影元件 
它们也都有动画 物理现象和智能 
这些名称就是我们给予状态机 让它跟踪的名称 
此时你可能会以为它们看起来很像 
为什么不用一个基本Bot类来给这三个实体
提供全部功能性呢？
别忘了 它们实际上并不是相似的 
需要对PlayerBot进行输入 我们可以通过一个游戏控制器
键盘或者通过触模控制对它进行控制 
GroundBot以及FlyingBot并不需要进行输入你无法控制这些角色
它们是由一个代理驱动的 
稍后你会看到我们是怎样使用代理来在关卡中驱动这些角色的 
PlayerBot并不需要一个代理 
它的动力来自你的输入 
同样地GroundBot以及FlyingBot
也需要遵循一些规则 这些规则会告诉它们在某个指定
情景下 它们应该怎么做 稍后我们也会看看这个 
PlayerBot就不需要这些规则你会告诉他他该怎么做 
PlayerBot和GroundBot确实有一件共同之处 
它们都有一个运动元件 
这个元件的作用就是说 举个例子 我在这里 
我需要以某个角度 移动这个距离 
在场景中把我移过去吧 
PlayerBot会使用那个输入在场景中渲染它让他四处运动 
而GroundBot则会用它来进行冲锋攻击 
他从这里开始移动 然后发起冲锋 
FlyingBot则不需要那项能力 
他不会移动 因此他没有那个元件 
这些元件是对功能性进行分解
并且仅仅把它们分配给需要它们的实体的好方法 
这些就是我们在游戏中使用GameplayKit功能性的一些方法 
我想邀请戴夫到台上来 再给你们讲讲我们是如何
使用GameplayKit来创建我们的
游戏 “逻辑与玩法” 
谢谢 戴夫 当我们想到玩法中的逻辑
当我想到玩法中的逻辑那么最先浮现在我的脑海中的
就是我的对手的实际智能
关于智能其中非常重要的一点
就是在那个空间内 我到底能做什么？
就像我们之前在演示中看到的 如果我是一个好Bot 
我会在关卡内四处走动沿着线路巡逻维持秩序 
而如果我是一个坏的Bot 我就想要攻击PlayerBot 
这次逮到他了 
我可能也不会把其它TaskBots变成坏的TaskBots 
因此当它逮到PlayerBot时我也可以出点力
又逮到一个 
最后 我可能会在关卡内以相反的方向四周走动 
干扰线路上的感应 电流 引发问题 
这就不那么有趣了
但是既然我们知道了我们能做什么 那么问题就变成了我们怎样
来决定我们应该做什么 
DemoBots中 我们选择使用
GKRuleSystem实现了一个模糊逻辑系统 
它的优点在于 我们仍然可以接受与关卡的当前状态相关的大量信息 
发生了什么事情并且让我们的角色对那个信息做出反应 
我们无需使用绵延数百行代码的if else树
就可以实现这一点 
我们有一些简单的规则 我们也依赖这些简单的规则
和他人进行互动允许出现复杂有趣的行为 
如果你不熟悉模糊逻辑 那么我再给你
讲一讲我们在这里谈的是什么 
我们提到的“模糊”指的是这样一个事实
所有的事情并不是非黑即白 非真即假
我们的规则并不是互相排斥的
我们的规则是以自然概念为模型的 你可以尝试
把它们当做你会对一位同事说的句子
PlayerBot就类似这个...
...在模糊TaskBots规则类中实现的就是这些 
它是GKRule的一个子类 
实际上 我们把规则事实绑定到了这里的等级上 
只有当等级大于零时 我们才会断言事实 
这很有趣 因为我们会对那个等级中能够获得的信息的
实际状态函数进行分级 
而不是某种当你在创建GKRule时
设置的东西 
看看这些
看看邻近规则是什么样的 
它考虑的是远近 
让我们来实际通过一个图表看看这个 
看看这些函数的工作原理
在上面的起点附近你可以看到我们有一台PlayerBot 
外面远处 我们能够到的地方 我们还有一台TaskBot 
如果我拿出一个远处规则的图解表示 
那么看出远处规则的分级就是这个类的分级 
这就非常容易了
如果我把中等距离规则以及近处规则拉进来 
那么很明显 它们在这种情况下的分级就是零 
虽然这个阵式看起来不是那么有趣 
它看起来也确实是某种程度的非黑即白 非真即假 
如果我们把我们的TaskBot移近一点 那么你就可以更清楚地
看到我说的是什么 
这是远处规则的分级 
七十五 而中等距离规则大约是
二十五 如果我们继续让他靠近 那么事情就发生变化了 
就同时属于邻近规则中等距离规则了 
既然你已经看过了我们会计算
我们的分级的函数是什么样的 
那么让我们再来看看 一旦我们为我们的每一条规则
计算出来那些规则我们又该怎样做出决定
这是我们在DemoBots上用的规则 
我们的第一步就像我说过的 
就是对它们进行评估计算值是什么 
我们接下来要做的事情 就是把它们中的几个组合起来 
判定它们是否属于当我们在猎捕PlayerBot时
我们需要注意的影响因素 
它读起来就像一个句子 你也就可以看 它的工作原理
就类似讲一个故事那样 
如果坏的TaskBots的百分比较高 
PlayerBot离它的距离是一个中等距离 
而好的TaskBot离它的距离也是一个中等距离 
那么我会想要猎捕这个PlayerBot 
在这个例子中我想这样做的原因是
我的思维方式是 如果这一关卡中已经有了很多
坏的TaskBots 那么我就不需要去改造它们 
此时我就可以猎捕玩家 
麻烦在于我有三个不同的等级
来表示现在猎捕PlayerBot这个概念 
因此我们要使用GKRuleSystems 来把事实的分级最小化 
要抓取我们想要组合的每个事实的最小分级 
我们选择最小分级的原因在于我们猎捕PlayerBot的
指令所基于的信息强度仅仅
与起作用的最弱的事实一样 
我们可以以任何方式对这些规则进行组合
然后得到几个不同的指示符指示到底是应该
猎捕PlayerBot 还是应该猎捕TaskBots 
在这个阶段我们实际上
就需要规则清晰下来得到一个能够表示猎捕
PlayerBot这一理念的简单的数字 
在这个例子中我们把我们的事实取出来
使用Swift的归约函数
以及最大函数来把事情组合到一起 
在这个例子中我们实际上就需要猎捕PlayerBot
或者猎捕TaskBots通过我们所有的
最强大的分级来表示 
看看这些数字很明显 我们应该猎捕PlayerBot 
既然我们知道了我们想要猎捕PlayerBot那么我们的第一个问题
就是我到底怎样才能接触到PlayerBot？
一般来说这是非常直接的 
只需要直线移动 然后你最终就会接触到它 
但是障碍物是一个挑战 
这里你可以看到 FlyingBot就悬挂在那里 
你回忆起了几年前的一个示例“冒险” 
那个示例中的哥布林 也非常喜欢表现出这种行为 
我们决定要采取一些行动
在GameplayKit中我们让你对某个场景中寻路的利用
变得非常容易了这样你就可以非常容易地
让你的Bots或者你的敌人像这样进行移动 
当你把SpriteKit用在一款游戏上时配合其它事情
就非常方便了把事情设置好 运行起来
也就非常容易了 
只需要几行代码即可 
我们来看看这些代码是什么样的 
你要做的第一件事实际上
就是获得组成关卡的多边形障碍物
在我们的例子中 我们首先要在场景中搜索我们的节点 
它们都被命名为障碍物 
当我们有了一个那些节点的阵列后 我们就把它传递到
SKNodes在iOS 9上的一个便利函数 
节点物理实体障碍物 
拿出你定义使用的实际物理实体 
对障碍物进行定义 
有了这些障碍物当我们有了这些障碍物
我们就要用它们来构造一个障碍物图表
并且构造一个缓冲区半径参数
这个参数就是围绕实际障碍物的
一些附加空格
要想理解这一点你可以想想
当你朝着一个门口走去当你穿过门口
你并没有真的走到门框的某个角落
你要瞄准的是门口中间的某个点
当你穿过门口的时候你的身体的任何部位并不会真的接触到门
半径可以帮助设置围绕障碍物的空格 
接下来我们要取出TaskBot和PlayerBot的位置 
然后把它们连接到图表上 
最后我们会让图表给我们一条从起始节点
终端节点的路径 
我们得到的就是单独的节点的阵列 
而这些节点对于从A点到B点来说是必须的 
把事情从走路转变成存储器片 
同时实际跟着它们走动就是这么简单
我们有了一条路径有了点 
但是我怎样才能真的去到那里？
我怎样才能真的优雅地去到那里？
GameplayKit再一次给我们提供了一个答复 
这次是GKAgent 2D 
这个类是我最喜欢的GameplayKit类之一 
这是一个GKComponent 它和戴夫之前谈到的实体/元件
系统配合的天衣无缝 
把事情设置好非常简单
你有一个GKBehavior 它描述了你想要这个代理去做的事情 
它就好比是GKGoals的一个容器
GKGoal 我们很幸运 这个例子中实际上就有几个
不同的构造这些构造允许我们兼容路径
因为代理的世界GameplayKit的世界
不同于SpriteKit的世界 
这里的委托就使得把它们两个集成到一起
非常容易 
我们来看看 实际上...你懂得看看代码实际是什么样的 
我们把我们之前获得的路径节点阵列拿出来 
我们要对它们进行初始化 
我们要把它传递到一个初始化程序来创建我们的路径
这里还有一个参数它就是半径 
我想让你们在这里思考下你想让这个路径怎样为你的代理下定义
太小的值会让你的代理把你的路径当成类似一根绷紧的绳索来对待 
而较大的值 你懂得 就会让它们把它当成类似一条
八车道高速公路来对待 把它们都移动到这个地方 
你可能想要调整下看看哪种最适合你的游戏
接下来我们要创建一个行为 
这只是一个空的行为 并没有真的发生什么事情 
然后我们向它添加目标 
这些是两个路径相关的目标我之前已经谈到过了 
屏幕上的第一个目标 我们跟随路径的目标将会
确立我们移动我们的阵列的方向 
在这个例子中我们会从起始位置
向前移动 把我们的TaskBots移动到终点位置 
也就是我们的PlayerBot的位置 
停留在路径上这个目标会促使我们的代理
保持在我们之前定义的路径的边界内 
既然我们有了一个工作行为我们把它指定给我们的代理让它开始移动 
代理工作的方式
和GameplayKit上许多其他元件的工作方式类似 
它会在一个循环上进行更新 
当你把它添加进你的更新循环时
它就会在变更前后通知到你 
这个变更前后的委托通知就是让事情运行起来
同SpriteKit连接起来的理想场所
在WillUpdate中这个位置就是你想从你的SpriteKit节点中
取出信息的位置
这些节点表示场景中你的代理
把那个信息撤回并且更新代理 
因为我们是在SpriteKit更新循环前面
这样做的 最后一个SpriteKit更新循环
就会涉及到
对物理现象进行模拟对你的节点应用约束
这就可能导致它的位置从代理最后一次思考时
代理本以为它在的位置上移开 
在AgentDidUpdate中我们会把信息从代理那里拿出来 
它的位置它的旋转类似此类的事情 
然后把它们撤回SpriteKit世界 
并且在它此时进入物理现象模拟 约束应用
之前对你的节点进行更新 
此时我们用DemoBots
得到的就是这个 
一个工作干的漂亮轻而易举就可以围绕屏幕进行移动
同你的交互非常平滑的智能 
我猜这是附加的东西我们把调制绘图放到
示例中了你可以去下载 
你可以通过点击斜线键来启用它 
关于这个很棒的一件事是 它可以帮助你想象出
我们之前谈到的一些参数 
黄色框是围绕障碍物的缓冲区半径 
你可以看到玩家放射出粗线
TaskBots表示的是
我们之前谈到的路径那里的路径半径 
既然我们有了一款游戏 
我想邀请我的同事迈克尔上台来 
他会和你们讨论一下怎样才能让你的用户以更快的运行速度玩你的游戏
迈克尔 
谢谢 我们来谈谈怎么制作一个有趣的游戏 
怎样给你的用户提供一个很棒的整体体验 
我会把它浓缩成一个短语 也就是 当然就是找乐子时间到了 
你的用户需要多久才能真正开始
享受你的游戏？
第一个要迈过的障碍 实际上就是初始下载 
如果你提供的app太大了 有些用户就不能通过
蜂窝网数据来下载它 
即使通过Wi-Fi下载 可能也需要好一阵 
你的用户在App Store中找到
app以及决定下载这个app之间最大的潜在因素就是这个 
但是我们知道对于游戏来说 很难保持在这个一百万下载限制以内 
我们再回到DemoBots看看我们是如何处理这个问题的
如果你仔细看PlayerBot 你就会注意到 我们并不是绝对
自上而下地看这个角色的 
这不是一个带有等距感觉的2D游戏
我们是通过赋予这个角色多个朝向而实现的 
当你让这个角色在地图上四处走动时 
我们就会换出代表这个角色的纹理
得到这个透视图 
当你在那里添加各个附加帧的时候 它们会占据空间 
它只有六兆字节 对于一个游戏来说不大 
当你认为它是六兆字节的时候 要乘以三个bots 
我们还要乘以它们可以执行的不同动作
当PlayerBot闲置 攻击四处走动时我们还需要定向帧
因此这个数字就开始积少成多了 
从传统意义上来说 这就意味着所有的资产再加上
各自的1X 2X 3X版本 都打包进了app 
现在我们对此有了一个更好的解决方法
本周早些时候你可以已经听说过了
如果你用的是资产目录的话 你可以利用一项叫做
“app分割”的新的特性 
“app分割”所做的 就是为资产实际运行的设备
1X、2X、3X分类 
只要使用资产目录让AppStore为你分割你的app 
就可以节省我们大量的空间
它不仅仅意味着我们现在可以节省大量的空间
它还意味着我们可以用我们的app内多余的存储空间来干什么 
我现在看到的是图表这是个空的图表 
在DemoBots中这是有实践含义的
我们一开始有八个朝向 我在这里给你们看一个视频仔细看 
看起来PlayerBot是面朝正前方的 
你会注意到 仔细看这个动作 看看你能不能注意到什么事情 
具体来说 就是当角色朝着地图顶部那里向后移动时 
我们把那个动作叫做“滑冰” 
虽然我们只有八个朝向来表示角色的运动 
玩家提供的却是三百六十度的输入我们可以稍微倾斜下
那个朝向 但并不触发下一个朝向 
然后你就得到了这个轰炸行为 
使用八个朝向更令人沮丧的是 
你可能最后会出现类似这样的情况 
PlayerBot面朝正前方 看起来它应该
很容易就可以攻击到那个TaskBot实际上并没有攻击到 
因为调试绘制你可以看到玩家瞄准的是侧面
但是玩家却无法看到这个 
有了我们通过“app分割”获得的多余的空间 我们就可以增加一个缺口
我们增加到十六个朝向 
这样游戏内的运动就感觉更平滑了 
你可以看到我们在这里有了更多的动画帧来进行表示 
然后当进行瞄准时粒度就更多了 
角色朝向的位置基本上精确对应到了
射线将要集中的方向 
你在那里点击下用户就可以更容易地知道游戏内的情况了
“app分割” 我们可以在DemoBots中简单地通过
把我们的纹理地图册放进资产目录中来实现
它可以帮助我们大幅度降低app的整体大小 
不仅如此 我们现在还可以实际提高可玩性这是因为我们有了多余空间
这项特性和你在游戏中时刻需要的资产
配合的非常默契 
除非我们有PlayerBot 否则DemoBots就不太像一个游戏了 
但是还有一些其他资产这些资产并不是我们时刻都必须用到的 
针对这点 我们还有一项技术 
你本周早些时候在“点播资源”那里可能已经听说过了 
简单描述下 你可以通过一个简单的字符串 
对你的资源进行标记标记为稍后再下载
我来谈谈我们是怎样在DemoBots上把这个用起来的 
第一个地方就是可能已经很明显了 
我们有多个关卡我们可以把这些标记为关卡一 关卡二 关卡三 
好处在于 我们现在已经用输出数据寄存器把这些标记出来了
我们就可以说如果用户初始下载游戏 我们知道他们回到关卡一 
我们就没有理由把另外两个关卡也包括到那里去 
随着游戏进展事情就更有趣了 
因为我们可以用这个线性流进行预测 
用户将会继续到达关卡三 
我们就能提前下载那个关卡 用户不大可能会重玩关卡一 
因此我们就可以回收一些资源 
我们来再进一步 
如果我们仔细看关卡二你会在这个演示
这个小照片上注意到 
FlyingBot只会出现在这个关卡中 
然后在关卡三中又出现了 
把它和出现在关卡一以及关卡三中的GroundBot相对照
但我们单独标记角色时 我们就可以对我们的资源做进一步分类
如果我们知道用户是第一次下载app
我们就只把GroundBot弄到关卡一中 我们可以稍后再
把FlyingBot弄过去 
如果你允许的某台设备存储空间不太富余
那么当用户正在玩第二关的时候你就可以洗净GroundBot
然后把它们都弄回关卡三 
你可以看到我们是怎样在“项目导航器”中的
资源标签下布置标签的 
你可以看到关卡一的资产被标记为了“预取” 
这些资产是app安装完毕之后很短一段时间内取得的 
但是这些资产并没有包括在安装包中 
而其他的资源就可以被标记为
当我们需要时再下载 
这就是点播资源 
我们把它用在DemoBots 用来标记稍后下载的资源 
这样我们的初始下载速度就更快了 
我们可以把我们不是立即需要的很多东西删去 
总的来说 它也有助于我们保持一个小的存储覆盖区 
这就是传达的更重要信息你可以制作一个更丰富的游戏可以有更多的资产
因为你可以通过点播访问所有其它的东西
你就仍然可以在设备上保持同样的覆盖区
我们认为这确实会增加复杂性 
当你提到显示下一个场景时 从传统意义上来说 
你知道它们位于本地存储器内 你就可以准备这些资源 
然后当用户请求资源时 向他们展示这些资源 
现在我们增加了一项额外的复杂状态 
你可能需要下载这些资源
当然如果网络连接不佳下载就可能失败
如果你想要节省空间那么在某个时间点
你就需要清除这些资源把它们冲洗掉 
然后重复整个周期 
这可能会比较复杂 我想看看我们在DemoBots中
是怎么解决这个问题的 
具体来说 这就回到了戴夫在会议开始提到的一项
技术即GKStateMachine
如果我们把它用到这样的模型上 我们就把它成为我们的SceneLoader 
它有六个相关的状态 
你会注意到 只有两类状态 
正在下载资源状态以及下载失败状态 
实际上 它们都与输出数据寄存器相关
因为对于模型来说这完全是一个流水线
把你的资源送到内存 无论是来自本地存储 
还是需要首先下载 
使用状态机 我们真正能够获得的优势在于我们怎样对状态变迁进行模仿
如果我们仔细看正在准备资源状态我们就可以通过在我们的
GKState子类中覆写IsValidNextState决定什么
是有效的下一个状态 
我们可以说如果场景确实加载过了 那么状态机
只会转移到准备状态 
或者说 如果用户取消这个请求的话 
我们就可以移回到可用的状态 
当试图准备我们的资源时我们不会回到
下载状态因为我们可以在IsValidNextState中
决定它这样就会导致更多的确定性的行为 
好了 总结一下 
最后我再和你们分享下我们在开发它时学到的一些窍门 
第一如果你用的是点播资源 
提前提出下载请求 
如果你在游戏中有一个可预测的进展 
你就可以在玩家一开始玩关卡一就开始
下载关卡二 
不要忘记Xcode内用于输出数据寄存器的工具 
你可以看一下磁盘报告工具 尤其是看看点播资源
下面那里看看你的标签是否已经
被下载了还是当前正在使用中 
亦或是已经被清理掉了这真的很有用 
此外如果玩家到了一个接合点 
他们需要额外的资源 
但是你尚未下载这些资源 尚未准备好这些资源 
你就可以修改你的请求的优先级 
这就意味着你可以在打包资源请求上提升
载入的优先级它的比例是从零到一 
如果用户被阻塞了 而你又试图进行下载的话 这里甚至
还有一个供急用的常数 
我们使用一个NSOperation队列来模仿准备的你可以在那里提升服务质量
总的来说 我们在DemoBots上想做的事情很多 
我们十分希望提供一个示例 向你们展示开发游戏的各种不同的方面
我们认为你们都会对这个感兴趣的 
戴夫一开始就说过了要针对每种设备
对你的资产进行微调 也包括针对Mac的特殊资产 
我们也讲过了优雅的角色导航 
而无需由你自己写一大堆的运动代码 
最后 添加额外的资产来提高可玩性 
因为我们现在对我们的app进行了切割 
我万分激动地告诉大家 GamePlayKit有一堆很棒的特性 
总的来说iOS 9会帮助你实现这些事情 
如果你想看看怎么用它们 
你可以通过这个链接来下载这个示例 
我鼓励你们这么做 
这里还有一些额外的资料链接 
你也可以联系我们的福音传道者艾伦 
相关的会议 我们在本次会议中已经提到过了 
它们已经结束了你可以在线观看视频 
谢谢 