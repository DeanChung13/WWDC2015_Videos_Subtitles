在Interface Builder中执行用户界面设计
谢谢
下午好 欢迎大家吃完午餐后回来
我猜大家是吃了午餐看视频的
我还正在吃我的早餐呢
不管您吃了什么餐 或者您来自哪里
欢迎探讨Core Data线程问题
我只是开了个玩笑
我们来聊聊Interface Builder
我的名字叫凯文凯文· 凱希
我是一位界面编程工程师
我们今天来做一些不同的事情
介绍Interface Builder两个新特性
但是我先想做另外两件事情
第一件我们要给你们一些更高级的内容提示和技巧最好实例
Interface Builder在后台运行的
然后我们要来看一下
Interface Builder如何帮
在开发自己的应用过程中的每一步的
让我解释得更清楚些
您在这里
您有一个非常棒的点子
现在 可喜的是有其他一些同伴
也觉得您的点子非常棒
可是问题来了
他们生活在世界各地
并且他们使用不同的苹果产品
那您要怎么办呢
首先您要想想您的应用
它会具有一些什么样的特点呢
哪些将成为您会面对的不同的共享功能块呢
在您思考这些功能块的时候您将会观察每个独立的场景
并且在每个场景中 继续下去
实际上都会慢慢深入到界面层
好 让我们回到第二步
针对不同的产品并且是不同的语言来开发界面
那将会是非常大的工作量
Interface Builder为您节省大量工作
会在任何一个步骤中
我们可将整个过程调制成三个主要步骤
这些步骤将为我们的议题提供完美的解决方案
我们将开始讨论
设计时用Interface Builder
我将提供给大家一些最好的实例
然后我们将稍微揭开一些内幕
Interface Builder是怎么工作的
然后我们将在此次演示中花上大量时间
来讨论运行中的Interface Builder
不仅讨论在运行时您怎么与它交互
而且讨论您可以怎么样利用不同运行时
操作系统特性的好处
来增强您应用的可适用性
深入讨论设计时刻的Interface Builder
最好的方法莫过于直接展示
设计时刻的Interface Builder
在我在讲示例之前 我要告诉大家
在这个示例程序中我会带给大家5个提示和技巧
5个最好的实例
我们将在我们正在开发的一个驾车旅行的应用中
增加一些新的功能
我们将增加一个新的标签
让我们可以关注那些正在自驾游的朋友
所以 在这个应用中
我将实现来自一位设计人员的要求我非常乐于效劳
原因有两个 第一如果您正在和一个设计师一起工作
他/她在和您一起工作的时候会跟您说一些行话
第二如果您并没有和一个设计师工作
为了告诉您这些信息设计应用以及最好设计方法
不一定需要设计师帮助就能完成
我们用静态的模拟性演示
就像您在屏幕上看到的一样会有两块数据是您需要从这个应用抓取
第一 信息展示的布局 它存放的地方
第二 外观 它长成什么样子
首先我们将从应用布局开始
它将给我们演示
最佳实例一 引用自动布局
特别是引用栈视图
引用自动布局意味着处理视图间的关系
协同抵抗那些对象约束
对于那些过去已经使用过自动布局的朋友
您就知道和对象约束一起工作非常灵活和强大
还有一些其他的东西
例如 您需要不停地去定义一套约束
在这里 栈视图就要派上用场了
如果约束只是把
旧有的位置尺寸信息抽象成关系的话
栈视图将走得更远
它将会把这些关系抽象成行为
让我们来进一步应用栈视图到我们的应用中
切换到Xcode
这里就是我们强大的新功能
直接在InterfaceBuilder中应用栈视图
我并不认为还有比这更简单的了
我只是简单地选择视图放入栈视图
然后使用画布下方的栈按钮直接点击
现在 我们就拥有了一个栈视图
一旦我们拥有了栈视图
我们可以就调校栈视图不同的属性
现在 在明天的自动布局课程
他们将深入栈视图所有不同的属性
但是我们将聚焦在一点
那就是对齐
如果我们切换回我的模型
您会看到我的设计师要求
基线与这些标签对齐
什么是基线对齐
基线对齐大致上可以允许您将
不同大小的文字对齐 看起来舒适
如果您有文本性对象像按钮 标签
和分断控制按钮
您想要基线对齐它们而不是使用居上居中或居下
让我们回到Interface Builder我们可以
如果进入属性检测器 我可以做什么
我可改变栈视图的对齐方式为基线对齐
这是第一年也是最后一年
如果您有多行文本的话
您可以根据第一行
或者最后一行文本
在这个例子中 总共就只有一行也就无关紧要了
看起来真棒 我们选择第一行
让我们继续应用栈视图
我可以将这个标签中的栈放入栈视图
我可以增加图片视图
我把它嵌入到栈视图
Interface Builder就会自动推理
对齐方向等不同的属性
现在 我们有了这个外部栈视图
我们需要将它放入表单元格
表单元格本身不是栈视图
为了做到这点 我们要使用原始约束
我要去把我的TIE 战斗机
打开来加一些约束 我要在这个跳出界面上澄清两件事情
第一件
什么是布局边缘
具体指哪些东西
布局边缘就是一个视图上边缘内侧的空白部分
系统提供了一些默认值
如果您使用布局边缘
它们将根据不同的上下文自动适应例如不同的设备或者视图层次等级结构
一般地如果您有按钮 标签
这些用户将交互或者看到的内容
如果不是约束到另一个表视图的话
您希望约束它们到边缘
如果您有一些像图片视图
它们待在您整个表视图单元格后面
那把它们约束到边界相比就比较合理
甚至这些边缘会改变
您的图片还是仍然
留在后台
如果我取消选中约束
约束和边缘您可以在这里看到更大的数据
Interface Builder默认调整到边缘
非常有帮助因为这正是我们想要的
第二件我想去澄清的是这里这个我将要使用的更新框
更新框促成
Interface Builder移动您在IB画布中的视图
使得它们符合运行时的约束条件
当我增加约束
我有一系列选择去实现
如果我说所有容器内的框架
它指所有在表视图单元格中的子视图运行时
移动它们到
约束指示的地方
然而 如果我有一个大视图而其中又有非常多的子视图
也许我只是想移动当前实例
我正在工作的那些东西
这里 我们可以使用折中方案
它只会移动我增加的新约束中的
那些条目
现在 我只剩下一件事情 并不重要了
我们需要给所有框架增加约束
我们正在做着呢
好 下一件事情 我需要更改栈视图中
每一个条目的对齐方式
另一个这么操作的例子
我需要改变它为填充 可是现在
那的确不是我需要寻找的 对吗
栈视图建立在自动布局上
意味着它可以使用约束
去非常好地调校您的布局
所以 如果我想要使这个图片拥有1比1的比例 甚至是在栈视图中
我仍然可以增加一个约束来增加一个比例值
然后改变乘数到1比1
接下来我要在图片视图和右手边内容间
增加一些空间
因为我的设计师希望在那里会有一些间距
现在我需要改变间距的栈视图
完全被标签以及其他栈视图封闭了吗那我要怎么得到它
Interface Builder得到封闭视图的几种方法是
我可以使用跳跃条或者使用轮廓视图
但是我要展示我最喜欢的方式
Xcode高级提示一
也是目前最快的选择
如果我按住shift右击或者control左击
我会在鼠标指示处看到一个全面的列表
那么我就可以简单地选择我需要的
我选好后可以改变间距
到我想要的那样 就是这样
最后一件我想要演示给你们的关于栈视图的是
您如何同时使用多个栈视图
去获取您想要的布局
如果让我们来看看需求说明
您就能看到这一套标签设计师想要它们
表现得像一个整体并且
垂直居中于表格视图单元格
我们可以把右手边的这些内容
放在另外一个栈视图中并且调整对齐
让我来演示一下
我会使用我的最快选择来到栈视图
我要在另外一个栈视图中嵌入它
您会看到这个蓝色稍有变深
意思是现在可以改变居中对齐了
现在对齐方式影响到了非堆栈方向
因为这是一个垂直栈视图
它将水平对齐
可是我要改变的是垂直对齐方式
所以我要改变通道为水平对齐
您可以看到运用非常小的约束
通过栈视图 我就能精确得到想要的布局
在应用自动布局时 我们的建议是
使用栈视图并且优先使用它
然后您只需要使用最原始的约束即可
我们认为您可以使用栈视图
来开发大部分UI
这使它变得简单
这使不同布局测试变得简便
不再需要调整一堆约束
维护也变得简单
以后回头只需要
编辑一个您的文件了
好的 这就是
接下来 让我们来看下
我们的应用外观
第一件事情我需要准备设计时刻的画布
我需要通过编辑画布菜单来做到这点
Interface Builder有很多选项
来自定义画在画布上的内容
例如这些栈视图为我创建的蓝色背景
在布局的时候就非常有用
我可以看到栈视图具体多大
可是在设计的时候 我想要看到
它跑起来具体长什么样
所以我就直接关掉这些
好 在示例讲演外观的章节
我们要看下使用Interface Builder的3个最佳示例
我们回到我们的需求说明
我们看第一个
我们的设计师定义了页头和页身
而不是外在的字体或者字体大小
这些是什么
这些叫做动态类型风格
它们由系统定义 当您使用它们的时候
它允许系统
自动调整有效的大小和字体
适应在运行时候根据用户偏好的一系列要求
例如用户可以自行更改为
更大的字体
当您的应用使用了动态类型
它会自动适应那些字体改变当您使用了自动布局
视图会围绕它而自动调整
在InterfaceBuilder我们可以非常简单地应用它
我只要选择我想要使用的自动类型的标签
然后进入视察器
选出一个字体类型而不是外加的字体
在这个例子里我会选择页头
我已经在剩下的标签上应用了它
所以我们动态类型也讲完了
接下来我们要带上
图片视图 我们要使用
两种最好的示例来演示
一个是可设计性 另一个是可视察性
可设计性让在Interface Builder画布中可实现
看到我们自定义绘画的代码
让我们来看看一些这样的代码
我要来打开工程导航
增加一些文件
托尼刚上线
远程传送给我这个代码
让我们把它加入我们的工程
然后打开它 打开的时候
我要给大家演示Xcode高级提示三
高级导航
如果option加shift点击这个文件 我得到一个小显示器
这个显示器允许我更改具体我想要打开文件的目标
所以我们选择一个新标签选择一个新分区
如果我有多个标签
我甚至可以选择特定的分区里面甚至有没有被打开的标签
如果我使用command键我甚至可以在一个新窗口中打开
在这个示例我只是使用助手编辑器
应用可设计性实际上只需要简单的两步
您所需要做的是用IB可设计性
标记一个UI子视图
然后用它设置一个自定义类
所以我们选择我们的图片视图
或者将要成为我们的图片视图改变身份检查器
加入我们自定义的子类
Interface Builder会创建我们的项目
启动一个进程来渲染我们的代码
并在画布中演示出来
如果我们改变代码
它将自动演示这些改变创建它们
并会在Interface Builder中应用它们
接下来我们想要采用可视察性
您可以看到在这里我把一些不同的属性标记为增加IB可视察性
当您标记一个属性为IB可视察性时
Interface Builder可为您创建一个视察器
如果我选择图片视图来到属性视察器
您可以看到我标记的三个属性
为可视察性 显示在视察器中
我们可以快速采用这些属性
所以我可以说我要增加那个小图片在那里
我们要使用我们的画笔如果我回忆正确 说明里说到两点
我们也可以给它一个不错的边缘
现在 这里我们的可设计性
和可视察性在同时工作
来帮助您快速地在您的设计上重复书写
我并没有编译和运行过但是我可以精确地看到
在运行时候的样子
这都归功于可设计性和可视察性
这就是我们关于运用
动态类型可设计性和可视察性
来调整我们应用外观的章节
现在 我们知道我们的应用
不是都由一个场景组成 
除非您写幻灯片应用大部分情况下
您会有多个场景
如果我放大Storyboard我可以看到有许多场景
您可以使用Segue将一个场景加入到您应用的流中
创建一个Segue我可以control拖拽一个视图控制器
或者一个对象 它将初始化一个Segue 然后选择
我想要的Segue的类型
在这个例子中我将增加一个关系
来增加另外一个标签到我们的标签栏控制器
现在我们一旦创建Segue我意识到我似乎
想要在这个表格视图控制器中实现导航
所以我将在一个导航控制器中嵌入这个
我将要选择编辑器菜单插入
在一个导航控制器中插入这个
这些是Interface Builder会帮到我们的地方
这是另一个Xcode高级提示
Interface Builder针对这个特定的场景 
展示了导航条和标签条
这些对象并没有被添加到我们的场景里
Interface Builder并没有添加这些到场景
它只是让您看到当您给出一些上下文后
您的应用具体看起来会怎么样
这就不需要编译和运行
就能针对不同的上下文进行设计
选择您的视图控制器您可以看到您的模拟矩阵
这些是属性的名字
然后来到属性视察器
您可以看到我的模拟矩阵
它们都说是被推理的
被推理的基本上是使用围绕我的上下文
我们知道我们在一个标签控制器里面我们知道我们在一个导航控制器里面
Interface Builder就会知道去显示哪个条
我可以覆盖任何这些我想要的
我可以说实际上我想要
它看起来像一个提示框
如果我有内容在这个框里
如果顶部这条是黑色的会怎样
我会把它设置成被推理的
所有这些矩阵数据不会影响
您实际运行时的应用 除了一个例外
那就是尺寸模拟矩阵
尺寸模拟矩阵实际上会改变视图控制器的尺寸
但是一般情况下
把它放入自动调整大小的视图控制层次结构
如果您不适用视图控制器它也是非常有帮助的
例如您想要设置您自己应用的大小
甚至当您的应用运行在不同设备上
您想要设计一个您脑中特定的尺寸
它也将会是有帮助的
我的说明是针对iPhone 6 Plus的 所以我可以改变
屏幕尺寸为5.5英寸
可以在如此规格尺寸的视图控制器上进行编辑设计
Interface Builder其他属性今天不讨论
它们能够允许您使用预览助手观察到您的应用在不同的设备上
看起来会怎么样
但是当您脑中有个特定的上下文的时候
这真的会非常有用 好吧
让我们回到推理
让我们完成我们的视图控制器
给它一个标题 朋友
让我们增加一些标签按钮项
我们已经增加一项这使得我们可以邀请新朋友
使用Xcode 7我可以增加多个条目项
到我的导航项
这些都是些小功能啊 对吧
让我们使用一个Segue来完成它
使它看起来符合情景
如果您放大看 我们有一个不错的开始
就像我会根据功能或者重用
重构我的代码
到几个不同的文件
我现在使用Interface可以实现相同的事情了
如果我只是选择我想要的视图控制器
来到编辑器菜单我可选择重构到Storyboard
您可以写入一个名字 我叫它跟随
因为这是我们的跟随标签
Interface Builder会创建一个新Storyboard 
把这些视图控制器移入Storyboard
放置一个关联到我们旧的Storyboard中的场景
现在我们使用Storyboard就显得真简单了
让我们回到幻灯片
我们看到相当数量不同的东西
所以让我们简单概述下
我已经给了您5个最好的实例
我们采用了栈视图和动态类型
来增强你们应用的可适应性
我们已经采用可设计性和可视察性
使得在不需要编译和运行的情况下可以快速显示您的设计
最后我们使用Storyboard关联
来确保像处理我们的代码那样
模块化我们的界面
我也给了你们一个提示
我希望你们会觉得有帮助
当你们使用Interface Builder的时就像可以选择东西
可以自定义画布
使用多个条目项打开正是您想要的文件
当然也可以使用模拟矩阵的好处
在设计的时刻就能看到您应用的具体情况
可是如果我点击编译会怎样
让我们来讲讲踏它在编译的时候的一些情况吧
现在 去做到这点 我们需要退后一步
看看设计时刻的情况
在运行的时候 我们会走向哪里
在设计的时候 你们工作于XML文件
在编译的时候一个叫做IB的进程
把这些文件编译成nib文件
Nib文件是非常小特别优化了的二进制文件
它使用一个叫做键值压缩的进程来创建这些
我有一些例子来看下它们是怎么样的
Interface Builder编译Storyboard
它首先会做两件事情
第一它尝试最优化您应用的性能
第二它会尽可能少地
创建nib文件
如果我有一个视图控制器它有一个视图和一些子视图
Interface Builder编译时为此视图控制器创建nib文件
-并且创建一个nib文件给这个视图
为什么是两个nib文件呢
为视图控制器和视图建两个nib文件
意味着视图层次结构可以按照要求加载
来看下这里的另一个示例它有一个表视图控制器
和一个导航控制器 看起来甚至更有趣了
它又一次根据Segue关系创建尽可能少的nib文件 
我们知道那两个视图控制器在一起
所以我们会把它们放入相同的nib中
接下来我们会给您一个表视图的nib文件
也会为单元格创建一个nib文件
所以在运行的时候这些会怎么样呢
UI Storyboard API时候分配一个Storyboard
起初您所有分配的内存是分配给
UI Storyboard实例本身
不是视图控制器也不是视图
当您初始化视图控制器时
它将为视图控制器载入nib文件
直到有人要求 实际并没有视图层次结构被加载
同样的 我给予导航控制器
和表视图控制器一个标示这样我就可以使用
初始化API来得到
那个视图控制器实例了
但是再一次 直到有人要求它
视图并没有被加载到内存
那这些表视图单元格呢这里就比较有趣了
Interface Builder自动地将表视图单元格nib文件同
在您设置的重用标示器下的表视图注册到一起
那个表视图单元
现在那就意味着这些单元格
在有人使用标示器实际DQ这个单元格之前
并不会被加载
现在这也意味着在运行的时候nib文件
如果被加载进内存它可以快速初始化它
谈到编译时的Interface Builder
就有一些可以来谈一谈了
第一个就是性能
Interface Builder代替您
把您的应用性能调到尽可能的好
nib文件只是在需要时被加载
而且nib文件本身也非常小且优化的
Interface Builder重用了不同的nib文件
例如在这个我们能看到的表视图单元格
一旦运行时拥有nib文件 它就能够
重新快速初始化 因为需要新的单元格
最终您终于看到在编译时刻和运行时刻
所有事物的生命周期
您也懂得了与不同的对象怎么交互
例如视图控制器还有视图层次结构
我们讨论设计时刻Interface Builder
我们揭开了一些编译时刻的内容
但是我们会花课程剩下的时间来
讨论下运行时的Interface Builder
在您有那些不同的产品和语言的时候发生了什么呢
谈及这个我要带上我的同事托尼 里恰尔迪
谢谢你 凯文
下午好
p我的名字叫托尼 就职于Interface Builder
凯文已给了您一些超棒的练习
关于在设计时刻创建您的UI以及他给您看了
在编译的时候发生了些什么
现在我会给您一些例子
教会您怎么在运行的时候增加动态行为
Interface Builder支持三个一般机制
来控制运行时候的UI
先用IB action和IB outlets
在您的Storyboard和源码之间创建联系
您也可以自定义您Segue的行为
或者动态初始化
及使用Storyboard API增加视图控制器
最终您可以使用自动布局和自动尺寸
来定义您的UI怎么根据容器的改变
自动适应尺寸
让我们从连接开始
在Swift IB outlets
默认内部展开是可选择的
如果您在视图控制器和
一个它视图层次中的视图之间创建了outlet
在视图加载后您可以安全地展开
有的时候 您会有外加的属性
储藏在您的视图控制器中 它会影响
视图的外观 如果那样的话 您会想要
使用可选链接同属性的设置观察器一起
展开这个属性
如果您的outlet还没有被链接
IB Action允许您通过手势识别器和控制器
来回应事件
您有可能在没有从当前视图导航走的情况下
使用action去更新一些状态
您也可以使用IB Action去动态地选择
哪一个Segue是在事件之后您想要去执行的
接着我们有Storyboard API
mac上的类UI Storyboard
或者NS Storyboard
允许您从一个Storyboard文件抓取关联
然后从那个Storyboard实视图控制器
如果您有一个需要重复实例化的UI
这会非常有用
如果您在低于iOS 9或者Mac OS10 11操作系统显示
这也是您在应用中
链接多个Storyboard的唯一途径
我们在UI控制器上也有许多API功能
允许您自定义您Segue行为
今天我们针对Segue做了不少改进
来使得iOS开发尽可能地轻松
我们针对子类UI Storyboard Segue或
NS Storyboard Segue改进使其更轻松
如果您想要了解这些请来明天的Storyboard课程
最终我们拥有了可适应性
Interface Builder支持两种技术
来帮助您适应您的UI到不同的容器尺寸
第一点我们有自动布局允许您
根据视图之间的关系调整尺寸和位置
这样您就不再依赖于编代码的框架值了
在某些情形下
当您容器的长和宽超过了限定值
您需要做比较大的改动
在那些情形下我们有另外的一个大功能
叫做尺寸类可以使得它变简单
现在我来给做您一个演示
您怎么用运行时的Interface Builder
来运用这三个一般技术
让我们切到Xcode
我们将建立一个可以记录您朋友
在他们自驾旅行中行为轨迹的UI界面
计划以后将它集成到凯文的自驾旅行应用上
就像您在UI中能看到的那样我有三行标牌
在每一个行中我从类目里显示三个标牌
如果我们看下我们应用中的Storyboard
您会发现我使用栈视图执行了这个UI
在这个栈视图中 我有三个容器视图
一个容器视图允许您在另一个控制器中
嵌入一个视图控制器当您拥有时在相同场景下
您想要使用多次的需要重复使用的UI片段的时候
这将相当地有用
我嵌入的视图控制器这里
拥有它自己的栈视图
在这个栈视图里标包含了下面这个牌视图控制器中的
多个实例
在每个类目中显示的标牌数量
是被一个用户设置控制着的所以在设计时我并不能够静态地获得它
不同于使用这里为这个视图控制器
操作的容器视图
我用Storyboard API初始化
我根据
它在标示检查器设置的Storyboard ID
从代码关联它到这个视图控制器
让我们来看下我们相应的代码
我们将使用跳跃条导航到关于我
标牌栈视图控制器的源码
好 您看到在我的视图这里加载方法 
用storybook API实例化那个标牌视图控制器来实现视控制器
特别地我使用从UI视图控制器中
获取的Storyboard属性
然后我通过标示符执行实例化视图控制器
我传入的这个标识符就跟我们在标示检查器里看到的一样
在我们增加或者实例化子类后
我们把它添加成子视图控制器
然后我们添加它的视图为
我们栈中一个安置的子视图
所以这个Storyboard API实例化
和增加子视图控制器方面非常棒但是如果您想要
增加一个不同于视图控制器相关子视图的时候
让我们回到Storyboard作为示例
我们如果看下行为视图控制器顶部这里
我在场景文档中有一个视图在这里
场景文档允许您存储高级别的对象与您的视图控制器一起
可在场景文档中放入一个视图 如果不想视图在运行时初始化视图的一部分
在Xcode 7里当您在场景文档中放入一个视图
您选择它它就会显示在您视图控制器上方
自己的编辑器上
这就意味着它们并不是您视图层次结构初始部分的情况
您也可以在Storyboard画布下可视化编辑您的视图
如果这个视图有问题链接的话
会显示错误信息
所以我现在想要创建一个outlet链接到这个视图
并且如果有问题链接我需要从代码这里增加它
我想要打开助手编辑器
这将带我去执行我的活动视图控制器
然后我将要control拖拽到源码
然后放手 我得到一个小弹出框
允许我设置我的outlet链接
但是第一个选项这里是我是否想要
创建一个outlet或者outlet集
Outlet集是用来批量增加或者删除
子视图或者约束的好东西但是不适用于我的例子
我只是想要增加一个独立的视图
所以我选择了outlet
接下来我可以为连接命名
我会叫它连接错误视图
最后一点我想要指出的是存储类型
可以选择强类型或者弱类型
一般情况下您应该设置outlet为强类型
特别是您链接一个outlet到一个子视图
或者链接到一个并不会被视图层次结构保留的约束的时候
只有当您有一个自定义视图关联回
以前的一些内容的时候您才需要使用弱类型
一般情况下并不推荐
我会选择强类型点击连接它会产生我的outlet
现在我想要拷贝一些代码
这些代码在视图加载前被提前执行
我确认下是否有问题 如果有
我把连接错误视图添加到根栈视图的顶部
我通过outlets同时获取视图
让我们在模拟器中看下这个
就像现在看到的那样 有问题连接
我的视图正如我需要的那样显示在最上方
所以在iPad满屏的情况下看起来不错
如果我在分视图中运行会怎么样
我只是拖拽分区到屏幕中间然后放开鼠标
您可以看到我的UI在适应窄篇幅的时候
显示得并不好
我真正想要的是当宽度比较小的时候
这些标牌垂直显示
所以任何一个标牌可以获取
当前屏幕本身的宽度
同时当我们回到全屏模式的时候
我想要我的栈视图继续
像现在这样水平显示
做到这点我要回到我的Storyboard
我要关掉助手
给我们更大的空间
我将选择我的栈视图
来到它的属性视察器
您能看到现在的栈视图设置成水平对齐
旁边的通道属性为+按钮
这个+按钮允许您增加一个类尺寸自定义
一个尺寸类是一个一维或者二维的抽象尺寸范围 
在我的例子里
我想要在宽度为迷你的时候自定义这个属性
因为我并不在意高度 所以我将选择任何高度
这么做的时候 我在视察器中得到一个新行和新值
主要是在宽度迷你高度任意的时候
产生作用的
我将改变它到水平
我重新跑一次
又一次我们在全屏了
我们的栈视图还是水平显示着
现在让我们再试一下分屏模式
好吧 我们看到了
大家看 现在我们的配件视图
正像我们想要的那样垂直显示着
每个标牌都得到了半屏的宽度
所以那只是一种方式 您可使用尺寸类
您可以为单个属性重载属性值
但是您也可以增加和删除整个新的子视图或者约束
如果您想要学的更多
您可以使用尺寸类
我们会在最后一年有一个非常棒的课程
叫做使用UI套件创建可适应应用
这就是关于示例的全部了
所以让我们回到幻灯片
凯文和我刚刚展示给大家很多技术
来获取尽可能多关于Interface Builder
让我们来复习一下最重要的点
第一点您看到如何使用自动布局约束和栈视图
来创建灵活的用户界面
而不是依赖于硬性代码框数据
来实现这点
然后凯文演示给您如何使用
可设计性和可视察性来快速地
复写您自定义视图的外观
我们介绍了一个新的功能来
帮助您模块化您的UI叫做重复关联
然后我展示给您怎么使用Storyboard API
来重复地实例化重用部件
最后您看到了您的UI怎么样使用尺寸
来自动适应不同的容器尺寸
如果您想要获得更多的信息
您可以在论坛发帖或者联系我们的宣传员
我们也非常推荐您明天看下我们课程在Storyboard什么是新的
以及后天的自动布局课程
如果您想要学习更多关于尺寸类的知识
去年我们的创建可适应性应用的课程
最后如果您想要学习更多关于
使用Xcode怎么处理您的自动布局常见问题的话
我们在2013年也有一个很棒的课程
谢谢大家 也祝大家在剩下的发布会上愉快开心