00:00:32.232 --> 00:00:33.233 
文斯·斯派德: 大家好

00:00:33.600 --> 00:00:34.735 
我是文斯·斯派德

00:00:35.002 --> 00:00:37.037 
是Cocoa框架的工程師

00:00:37.271 --> 00:00:39.373 
今天我和大家分享的內容

00:00:39.439 --> 00:00:41.542 
是《進度報告的最佳實踐》

00:00:42.242 --> 00:00:44.511 
在Cocoa中
用NSProgress代表

00:00:45.712 --> 00:00:48.649 
我先來介紹 NSProgress

00:00:49.183 --> 00:00:51.151 
然後我們一起聊聊把
NSProgress

00:00:51.218 --> 00:00:52.252 
對象組合在一起

00:00:52.853 --> 00:00:55.422 
接着是如何將
NSProgress作爲

00:00:55.489 --> 00:00:57.391 
取消 暫停和恢復任務的界面

00:00:58.458 --> 00:01:00.827 
然後再聊聊 NSProgress

00:01:00.894 --> 00:01:03.297 
和用戶界面掛鉤還要總結出

00:01:03.363 --> 00:01:04.798 
一些技巧和最佳實踐

00:01:07.034 --> 00:01:07.701 
現在就開始

00:01:09.536 --> 00:01:12.139 
NSProgress是
Foundation的一個對象

00:01:12.206 --> 00:01:14.341 
代表某項任務完成

00:01:14.842 --> 00:01:18.512 
任務可以是下載文檔安裝app

00:01:19.246 --> 00:01:21.548 
或者是你自己的應用任務

00:01:22.449 --> 00:01:26.320 
NSProgress對象的存在 
是讓你輕鬆跨越

00:01:26.386 --> 00:01:31.491 
自己的系統的各種組件報告進度

00:01:31.925 --> 00:01:36.330 
實際上 有若干 Cocoa API
都在通過NSProgress

00:01:36.396 --> 00:01:39.199 
彙報進度 如NSBundle
Resource Request

00:01:39.466 --> 00:01:41.401 
UIDocument
和 NSData

00:01:41.902 --> 00:01:44.238 
可以通過NSProgress
獲取信息 

00:01:44.304 --> 00:01:46.974 
瞭解那些API在你的
應用中在做什麼

00:01:48.609 --> 00:01:50.711 
NSProgress進行了本地化 

00:01:50.944 --> 00:01:53.113 
可以用它向用戶顯示信息

00:01:53.180 --> 00:01:54.181 
告知在發生什麼

00:01:54.481 --> 00:01:56.717 
我們還有辦法影響它表述的內容

00:01:56.884 --> 00:01:57.885 
稍後就來介紹

00:01:59.052 --> 00:02:03.023 
但是首先來瞭解
NSProgress的核心屬性

00:02:03.090 --> 00:02:05.893 
我們有totalUnitCount
是關於要做

00:02:05.959 --> 00:02:08.461 
多少任務以及completed-
UnitCount

00:02:08.529 --> 00:02:10.330 
表示多少任務已經完成

00:02:10.663 --> 00:02:12.766 
在任務發生時這部分會更新

00:02:13.634 --> 00:02:18.939 
fractionCompleted
是個二元值 從0到1

00:02:19.306 --> 00:02:22.376 
更新 讓你瞭解距離任務完成還有多久

00:02:23.610 --> 00:02:25.312 
因此totalUnitCount和

00:02:25.379 --> 00:02:27.281 
completed-
UnitCount

00:02:27.414 --> 00:02:30.450 
這些屬性所涉及的單位由你來定

00:02:30.817 --> 00:02:34.021 
是在進度方面需要跟蹤的任何單位

00:02:34.388 --> 00:02:38.692 
也許是字節 文件數
照片 甚至是抽象單位

00:02:38.859 --> 00:02:41.094 
如部分任務的百分比之類

00:02:41.562 --> 00:02:44.698 
每個單獨NSProgress
對該以什麼單位報告

00:02:44.765 --> 00:02:46.233 
都有自己的想法

00:02:48.335 --> 00:02:51.038 
如果不清楚總共有多少任務

00:02:51.104 --> 00:02:53.207 
也就不知道
你的totalUnitCount

00:02:53.440 --> 00:02:55.075 
可以將進度定爲不確定

00:02:55.209 --> 00:02:58.412 
可以通過設定 completed-
UnitCount

00:02:58.579 --> 00:03:00.981 
或totalUnitCount
爲負值來實現

00:03:03.083 --> 00:03:04.885 
接下來 我們談談本地化

00:03:05.986 --> 00:03:08.989 
NSProgress有着兩個屬性
本地化Description

00:03:09.056 --> 00:03:11.058 
和本地化Additional
Description

00:03:11.124 --> 00:03:12.326 
這些都可以向用戶顯示

00:03:12.926 --> 00:03:16.396 
可以自己設置但是
NSProgress 

00:03:16.463 --> 00:03:18.131 
會爲你默認一些內容

00:03:19.700 --> 00:03:22.269 
這裏的示例是默認
本地化Description

00:03:22.336 --> 00:03:24.471 
和本地化Additional
Description

00:03:24.538 --> 00:03:27.608 
NSProgress的 
totalUnitCount

00:03:27.674 --> 00:03:30.177 
是500萬多completed-
UnitCount

00:03:30.244 --> 00:03:32.279 
是41.9萬多

00:03:32.746 --> 00:03:36.016 
默認本地化完成7%

00:03:36.083 --> 00:03:39.219 
本地化Additional
Description格式

00:03:39.286 --> 00:03:40.587 
這些數據都很漂亮

00:03:41.788 --> 00:03:43.390 
這是默認狀態

00:03:43.590 --> 00:03:45.025 
如果想以某種不同的方式

00:03:45.092 --> 00:03:47.060 
可以自行設置
本地化Description

00:03:47.127 --> 00:03:49.263 
和本地化 Additional
Description

00:03:49.329 --> 00:03:51.698 
但是接着需要真正用你的app

00:03:51.765 --> 00:03:53.500 
所支持的語言進行本地化

00:03:54.668 --> 00:03:57.037 
其實不必真這麼做我們還有兩個旋鈕

00:03:57.104 --> 00:03:59.306 
可用於調整這些默認值

00:03:59.673 --> 00:04:01.675 
首先是通過類型屬性

00:04:02.109 --> 00:04:05.512 
目前 文檔類唯一的選項是
NSProgressKindFile

00:04:06.079 --> 00:04:08.448 
使用它表明你的單位是字節

00:04:08.515 --> 00:04:10.951 
那麼當NSProgress 
單位是字節

00:04:11.185 --> 00:04:12.553 
就會這樣做格式

00:04:12.619 --> 00:04:17.124 
那麼會看到 它顯示
5.3兆字節的419千字節

00:04:19.593 --> 00:04:22.229 
還有一個旋鈕可改變
默認本地化Description

00:04:22.296 --> 00:04:24.731 
是通過用戶信息字典的部分鍵來實現

00:04:25.132 --> 00:04:27.868 
NSProgress具備用戶
信息字典 這裏有個方法

00:04:28.202 --> 00:04:31.138 
Set User Info 
Object For Key

00:04:31.205 --> 00:04:32.139 
這可以實現

00:04:32.206 --> 00:04:33.807 
在userInfo中設置鍵和數值

00:04:34.608 --> 00:04:36.944 
有個鍵幾乎對任何
NSProgress都有用

00:04:37.010 --> 00:04:39.313 
這就是NSProgress
Estimated 

00:04:39.379 --> 00:04:40.981 
Time 
Remaining Key

00:04:41.248 --> 00:04:43.050 
這裏的數值是NSNumber

00:04:43.283 --> 00:04:45.853 
表示到任務完成時還剩下多少秒鐘

00:04:46.887 --> 00:04:50.524 
大家來看 比如說 如果
我們設定爲97秒

00:04:50.591 --> 00:04:53.493 
本地化Additional
Description現在就包括

00:04:53.794 --> 00:04:56.263 
這樣的信息 格式爲剩餘1分37秒

00:04:58.265 --> 00:05:00.467 
還有額外的userInfo鍵 

00:05:00.534 --> 00:05:02.302 
如果將文件設置種類纔會用到

00:05:02.870 --> 00:05:04.905 
首先來看
NSProgress File

00:05:04.972 --> 00:05:06.640 
Operation 
Kind Key

00:05:06.974 --> 00:05:09.309 
這在告知NSProgress
操作的類型

00:05:09.376 --> 00:05:10.944 
這是在文檔中執行

00:05:11.411 --> 00:05:14.147 
數值是關於下載解壓縮

00:05:14.414 --> 00:05:18.352 
接受 或複製那麼如設置 File
Operation Kind

00:05:18.418 --> 00:05:20.888 
爲NSProgress File
Operation

00:05:20.954 --> 00:05:22.322 
Kind Downloading

00:05:22.389 --> 00:05:23.991 
來更新
本地化Description

00:05:24.057 --> 00:05:25.626 
表示它在下載文件

00:05:27.227 --> 00:05:30.130 
當Kind是File時 還有個
鍵可用就是NSProgress

00:05:30.197 --> 00:05:31.832 
File URL Key

00:05:31.899 --> 00:05:34.902 
這是所處理文件的NSURL 

00:05:35.335 --> 00:05:36.370 
在設置時

00:05:36.436 --> 00:05:38.739 
本地化Description 
將包括文件名

00:05:38.805 --> 00:05:42.109 
在本例中是 photos.zip
來自於所提供的URL

00:05:44.077 --> 00:05:47.014 
如果是運行一組文件
則還有選項

00:05:47.080 --> 00:05:49.216 
NSProgress File 
Total Count Key

00:05:49.283 --> 00:05:51.084 
和 Completed
Count Key

00:05:51.318 --> 00:05:52.519 
這裏是個示例

00:05:52.586 --> 00:05:54.888 
我們設置File
Completed Count爲7

00:05:54.955 --> 00:05:56.657 
和 File 
Total Count爲9

00:05:56.990 --> 00:05:59.560 
本地化Description
可以使用這個信息

00:05:59.626 --> 00:06:01.828 
現在顯示下載9個文件

00:06:02.729 --> 00:06:06.266 
注意類型仍是File
單位也仍然是字節

00:06:06.333 --> 00:06:08.969 
就是在處理的文件的總字節數

00:06:10.804 --> 00:06:13.707 
最後我們有NSProgress 
Throughput Key

00:06:14.141 --> 00:06:18.045 
這是正處理的
文件操作的每秒字節數

00:06:18.445 --> 00:06:22.316 
比如 下載文件時
速度極快是5萬字節每秒

00:06:22.616 --> 00:06:24.885 
如果我們在用戶信息設置吞吐量

00:06:25.252 --> 00:06:26.286 
NSProgress

00:06:26.353 --> 00:06:28.655 
可將該信息包括到
本地化Description當中

00:06:28.722 --> 00:06:30.624 
所以顯示爲50千字節每秒

00:06:31.825 --> 00:06:34.228 
所有這些選項都可以真正

00:06:34.294 --> 00:06:35.896 
提供幫你向用戶提供更多信息 

00:06:36.330 --> 00:06:38.165 
告知其在發生什麼

00:06:39.266 --> 00:06:41.168 
而無需你親自做本地化

00:06:42.503 --> 00:06:46.440 
我們繼續之前先來說說責任職責

00:06:47.574 --> 00:06:49.309 
NSProgress有兩個端

00:06:49.376 --> 00:06:52.412 
分別是生成端和客戶端

00:06:53.046 --> 00:06:54.181 
在生成端

00:06:55.015 --> 00:07:00.420 
當生成NSProgress時
你要負責設置它的屬性

00:07:00.487 --> 00:07:03.257 
在任務完成時更新
completedUnitCount

00:07:03.724 --> 00:07:06.326 
因此在生成時
要設置totalUnitCount

00:07:06.527 --> 00:07:09.263 
Kind 設置用戶信息的鍵

00:07:09.463 --> 00:07:11.265 
在任務完成時更新

00:07:11.331 --> 00:07:13.133 
completedUnitCount

00:07:13.534 --> 00:07:15.869 
另一方面如若從他人那裏

00:07:15.969 --> 00:07:18.071 
收到NSProgress你是客戶端

00:07:18.572 --> 00:07:20.073 
你可以獲得並觀察各類屬性

00:07:20.140 --> 00:07:21.441 
totalUnitCount和

00:07:21.508 --> 00:07:22.943 
completed-
UnitCount

00:07:23.010 --> 00:07:24.411 
fractionCompleted
或這些

00:07:24.478 --> 00:07:26.013 
localized-
Description

00:07:26.079 --> 00:07:27.648 
但是不會設置這些屬性

00:07:27.714 --> 00:07:29.583 
因爲這樣做會導致與

00:07:29.650 --> 00:07:31.351 
NSProgress生成器造成混淆

00:07:33.320 --> 00:07:36.423 
當生成NSProgress時
需要一種辦法

00:07:36.490 --> 00:07:39.459 
將之提供給客戶端當
你是客戶端時需要辦法來獲得它

00:07:39.993 --> 00:07:41.361 
有一種做法

00:07:41.428 --> 00:07:43.497 
是通過NSProgress報告協議

00:07:43.830 --> 00:07:47.234 
我們把它加在了
OS X10.11和iOS 9

00:07:47.701 --> 00:07:50.971 
相當簡單 可以定義屬性 進度

00:07:52.072 --> 00:07:53.674 
在Cocoa UIDocument

00:07:53.740 --> 00:07:55.742 
和NSBundle
ResourceRequest

00:07:55.809 --> 00:07:56.476 
都會執行

00:07:56.944 --> 00:07:58.579 
這樣會很明顯

00:07:59.213 --> 00:08:01.348 
類會支持進度報告

00:08:02.850 --> 00:08:06.353 
好 現在 我們
做個演示來看看代碼

00:08:08.355 --> 00:08:09.857 
我們這裏有app

00:08:10.090 --> 00:08:11.491 
相當簡單

00:08:11.892 --> 00:08:16.063 
是個照片 點擊
輸入按鈕就會下載照片

00:08:16.597 --> 00:08:18.632 
當下載結束時

00:08:19.933 --> 00:08:21.034 
會向用戶顯示

00:08:21.735 --> 00:08:23.871 align:start position:10%
用戶體驗相當糟糕

00:08:23.937 --> 00:08:26.406 
用戶基本上不清楚在發生什麼

00:08:26.807 --> 00:08:30.344 
我們可以通過
向用戶報告下載進度來改善效果

00:08:31.812 --> 00:08:37.083 
如果進入項目就會有下載類

00:08:37.451 --> 00:08:39.453 
這是用於下載照片

00:08:40.520 --> 00:08:43.724 
還有初始程序

00:08:43.789 --> 00:08:46.126 
找到URL來下載

00:08:46.627 --> 00:08:48.962 
它還具備一個完成處理器 用來調用

00:08:49.029 --> 00:08:51.832 
下載數據或在出現錯誤時調用錯誤

00:08:54.001 --> 00:08:57.004 
接下來是開始方法 是用來...

00:08:57.070 --> 00:09:00.541 
用來啓動整個下載我們還有若干

00:09:00.607 --> 00:09:03.911 
針對各種下載功能的私有方法

00:09:05.445 --> 00:09:10.450 
我們還有這些便捷方法

00:09:10.517 --> 00:09:12.853 
可以在下載進行時進行調用

00:09:13.420 --> 00:09:15.522 
我們還有 Will 
Begin Download 

00:09:17.724 --> 00:09:21.728 
下載開始時調用並可獲得下載的總長度

00:09:22.429 --> 00:09:23.964 
Did Download Data

00:09:24.198 --> 00:09:27.401 
在下載完成時定期調用

00:09:28.535 --> 00:09:30.437 
Did 
Finish Download

00:09:30.504 --> 00:09:32.506 
是在下載完成時調用

00:09:32.739 --> 00:09:35.142 
Did Fail To 
Download 在下載期間

00:09:35.242 --> 00:09:36.743 
如果出錯時 會調用

00:09:37.744 --> 00:09:39.947 
我們現在要做的是對下載操作

00:09:40.080 --> 00:09:43.083 
報告進度可以通過

00:09:43.150 --> 00:09:45.853 
使用NSProgress-
Reporting協議來實現

00:09:46.453 --> 00:09:49.790 
我們繼續來進行類的聲明

00:09:50.190 --> 00:09:52.526 
可以把NSProgress-
Reporting

00:09:52.593 --> 00:09:54.361 
加入類的名單

00:09:54.995 --> 00:09:59.299 
爲了與NSProgress-
Reporting一致

00:10:00.167 --> 00:10:02.169 
我們需要
ProgressProperty

00:10:02.269 --> 00:10:04.438 
我們把它加上
是在NSProgress

00:10:05.072 --> 00:10:06.807 
在初始程序中我們需要生成

00:10:06.874 --> 00:10:08.609 
NSProgressObject

00:10:09.576 --> 00:10:10.410 
因爲...

00:10:12.379 --> 00:10:14.848 
我們還不清楚已經下載了多少

00:10:15.048 --> 00:10:16.917 
我們會把進度定爲不確定

00:10:17.351 --> 00:10:19.319 
把進度定爲不確定 有種方法

00:10:19.386 --> 00:10:22.589 
是設置
totalUnitCount爲負值

00:10:22.956 --> 00:10:25.192 
那麼把totalUnitCount
設爲負1

00:10:26.026 --> 00:10:28.262 
因爲我們知道這裏在下載文件

00:10:28.695 --> 00:10:33.901 
可以爲NSProgress
提供更多的信息告知在發生什麼

00:10:34.401 --> 00:10:36.136 
我們可以設置Kind

00:10:36.203 --> 00:10:38.105 
爲NSProgress
Kind File

00:10:38.539 --> 00:10:40.474 
並設置用戶信息

00:10:40.541 --> 00:10:43.443 
NSProgress File 
OperationKind Key

00:10:43.510 --> 00:10:44.711 
爲Downloading

00:10:45.979 --> 00:10:48.482 
現在就生成了
NSProgress 在下載完成後

00:10:48.549 --> 00:10:50.851 
需要將它更新即可

00:10:51.385 --> 00:10:53.720 
回到Will
Begin Download方法

00:10:55.489 --> 00:10:57.391 
這可將所有內容下載下來

00:10:57.457 --> 00:10:59.726 
我們需要設置
totalUnitCount

00:10:59.793 --> 00:11:01.161 
to that amount

00:11:01.662 --> 00:11:04.865 
此刻 進度不再是不確定

00:11:05.732 --> 00:11:07.534 
在Did Download
Data回調

00:11:07.601 --> 00:11:09.136 
這是進行定期調用設置

00:11:09.203 --> 00:11:11.772 
completed-
UnitCount

00:11:12.005 --> 00:11:14.007 
爲下載字節數

00:11:15.075 --> 00:11:18.011 
最後在Did
Download Data回調

00:11:18.846 --> 00:11:21.048 
可以將completed-
UnitCount

00:11:21.114 --> 00:11:22.883 
設置爲下載的總字節數

00:11:23.250 --> 00:11:24.985 
以及進度結束的方式

00:11:26.353 --> 00:11:29.623 
現在用戶界面已經在使用

00:11:29.690 --> 00:11:33.360 
NSProgressReporting
並在尋找需要執行的下載

00:11:33.427 --> 00:11:36.997 
還會顯示進度
當我們搭建並運行app時

00:11:37.064 --> 00:11:38.031 
我們按下輸入按鈕

00:11:40.901 --> 00:11:45.239 
我們有個爲用戶提供的下載報告進度

00:11:45.305 --> 00:11:48.242 
感覺要好多了

00:11:49.343 --> 00:11:50.010 
好

00:11:50.077 --> 00:11:52.779 
回到幻燈片

00:11:54.715 --> 00:11:55.516 
文斯·斯派德: 好

00:11:55.582 --> 00:11:57.618 
這就是
NSProgress的基礎內容

00:11:58.118 --> 00:12:00.721 
現在我們來看
NSProgress爲什麼強大

00:12:00.787 --> 00:12:03.190 
是因爲它可以在其他進度對象中

00:12:03.257 --> 00:12:04.992 
構建進度對象

00:12:06.260 --> 00:12:08.929 
現在因爲按下
下載按鈕並不意味着

00:12:08.996 --> 00:12:10.697 
只有一件事在真正發生

00:12:11.098 --> 00:12:13.267 
可能是下載 驗證 解壓縮

00:12:13.333 --> 00:12:16.336 
操作 都在報告操作中運行

00:12:16.770 --> 00:12:19.673 
但用戶只看到一個進度條

00:12:21.041 --> 00:12:23.777 
就當這些框代表各自的

00:12:23.844 --> 00:12:25.045 
NSProgress對象

00:12:25.279 --> 00:12:28.115 
它們各自按照
自己的單位報告其進度

00:12:28.182 --> 00:12:29.883 
不必擔心其他的對象

00:12:30.317 --> 00:12:33.320 
但是我們希望它們
能組成一個NSProgress

00:12:33.654 --> 00:12:36.223 
以便我們將之與用戶界面掛鉤

00:12:36.723 --> 00:12:38.926 
我們要生成
NSProgress對象

00:12:38.992 --> 00:12:40.460 
並稱之爲整體進度

00:12:41.261 --> 00:12:43.597 
我們可以將其他進度都納入

00:12:43.664 --> 00:12:45.165 
整體進度中

00:12:45.532 --> 00:12:47.401 
整體程序成爲另外三個

00:12:47.467 --> 00:12:50.370 
進度對象的父對象下載 驗證 

00:12:50.437 --> 00:12:53.140 
和解壓縮進度成爲子對象

00:12:53.907 --> 00:12:55.642 
當子對象完成時

00:12:55.909 --> 00:12:57.344 
整體程序也會更新

00:12:59.079 --> 00:13:01.882 
那麼爲構成NSProgress
對象 我們有這個

00:13:01.949 --> 00:13:03.450 
pendingUnitCount
想法

00:13:03.517 --> 00:13:05.652 
pendingUnitCount

00:13:05.719 --> 00:13:08.455 
是賦值給子對象的進度對象的父對象

00:13:08.589 --> 00:13:10.557 
totalUnitCount的
一部分

00:13:11.258 --> 00:13:13.861 
pendingUnitCount是
關於父對象的單位

00:13:14.094 --> 00:13:15.562 
子對象也有自己的單位

00:13:16.063 --> 00:13:18.765 
比如把父對象的
pendingUnitCount

00:13:18.999 --> 00:13:19.666 
賦值給子對象

00:13:21.635 --> 00:13:24.905 
那麼 子對象進度結束時

00:13:24.972 --> 00:13:27.908 
會出現父對象的completed-
UnitCount被相應子對象的

00:13:27.975 --> 00:13:29.977 
pendingUnitCount
所增加

00:13:30.410 --> 00:13:31.712 
那麼在有子對象的時候

00:13:32.212 --> 00:13:34.748 
不用手動更新completed-
UnitCount

00:13:35.048 --> 00:13:37.217 
在子對象結束的時候 這也許會與正在

00:13:37.284 --> 00:13:38.452 
發生的更新相互衝突

00:13:38.752 --> 00:13:41.088 
當處於父對象的進度時你非常希望把

00:13:41.154 --> 00:13:43.490 
整個totalUnitCount 
賦值給子對象

00:13:45.092 --> 00:13:47.127 
我們繼續一個組合圖

00:13:47.394 --> 00:13:49.196 
比如要輸入一些照片

00:13:49.563 --> 00:13:52.466 
我們有整體NSProgress對象

00:13:53.700 --> 00:13:56.436 
共有兩個照片那麼輸入進度的

00:13:56.803 --> 00:13:58.405 
totalUnitCount爲2

00:13:59.473 --> 00:14:01.909 
它會把全部
totalUnitCount賦值給

00:14:01.975 --> 00:14:05.078 
它的子對象也就是下面的單獨照片進度

00:14:05.746 --> 00:14:09.149 
每個照片都從整體輸入進度中

00:14:09.216 --> 00:14:11.618 
賦值了一個照片的
pendingUnitCount 

00:14:12.886 --> 00:14:15.389 
現在個體照片進度都很相似

00:14:15.455 --> 00:14:16.590 
不過單位不同

00:14:16.657 --> 00:14:18.825 
有個分兩步的
totalUnitCount

00:14:19.626 --> 00:14:22.129 
每一步都要用到一個
pendingUnitCount

00:14:22.196 --> 00:14:24.531 
一個是下載一個是過濾器

00:14:25.732 --> 00:14:28.235 
最後我們有了下載和過濾進度

00:14:28.702 --> 00:14:30.070 
它們都有自己的單位

00:14:30.470 --> 00:14:31.705 
沒有子對象

00:14:31.905 --> 00:14:34.474 
要手動更新completed-
UnitCount

00:14:36.476 --> 00:14:39.413 
好我把completed-
Unit Count 放在這裏

00:14:39.479 --> 00:14:40.681 
這是零點

00:14:40.814 --> 00:14:44.551 
完成部分在底部用百分比顯示

00:14:44.618 --> 00:14:46.653 
因爲我們還沒有做什麼 現在是零值

00:14:47.287 --> 00:14:48.388 
我們看看 底部的

00:14:48.455 --> 00:14:49.890 
completed-
UnitCounts

00:14:49.957 --> 00:14:50.958 
更新後會怎樣

00:14:52.426 --> 00:14:55.395 
大家可以看到因爲子對象都完成了

00:14:56.096 --> 00:14:58.065 
完成部分在父對象中在更新

00:14:58.632 --> 00:15:00.734 
進度在流向父對象

00:15:01.301 --> 00:15:02.135 
請注意整體進度的

00:15:02.202 --> 00:15:04.204 
completed-
UnitCount

00:15:04.271 --> 00:15:05.539 
還依然是零值

00:15:05.806 --> 00:15:09.176 
一旦子對象完成而且照片1仍未

00:15:09.476 --> 00:15:12.079 
完成時 completed-
UnitCount 纔會增加

00:15:13.714 --> 00:15:15.449 
一旦子對象完成

00:15:15.516 --> 00:15:17.117 
completedUnitCount
被相應子對象的

00:15:17.184 --> 00:15:19.086 
pendingUnitCount
而增加

00:15:19.419 --> 00:15:22.823 
大家可以看到輸入進度已經完成了

00:15:22.890 --> 00:15:26.393 
一張照片 因爲照片1
現在是100%完成

00:15:28.095 --> 00:15:31.698 
另一方面 完成部分是根據
pendingUnitCount

00:15:31.765 --> 00:15:33.033 
和子對象

00:15:33.333 --> 00:15:35.235 
完成的部分在倍增

00:15:35.669 --> 00:15:38.572 
它不會等到子對象完成再更新

00:15:40.007 --> 00:15:44.378 
當所有內容都是100%時
輸入進度就得以完成

00:15:45.012 --> 00:15:47.147 
這個示例就是
當組成NSProgress 

00:15:47.214 --> 00:15:49.650 
對象時 會出現的情況

00:15:50.951 --> 00:15:52.252 
我們再詳細介紹一下

00:15:52.819 --> 00:15:56.023 
這裏是單獨照片輸入的進度

00:15:56.089 --> 00:15:57.491 
這裏只是一張照片

00:15:58.125 --> 00:16:00.594 
分爲兩個步驟下載和過濾器

00:16:00.761 --> 00:16:02.563 
把totalUnitCount
定爲2

00:16:03.163 --> 00:16:05.399 
假設下載會用到下列的單位之一

00:16:05.465 --> 00:16:07.568 
過濾器會用到下列單位之一

00:16:08.268 --> 00:16:12.840 
每個步驟會佔用照片整體進度的一半

00:16:13.941 --> 00:16:15.776 
但是這些操作如果不相等會怎樣？

00:16:16.210 --> 00:16:18.812 
如果我們知道過濾器相對下載時間

00:16:18.879 --> 00:16:22.416 
要快許多 那麼就會
更像是這樣的結果？

00:16:23.517 --> 00:16:25.519 
好 單位可以是任意的

00:16:25.853 --> 00:16:27.955 
可以認爲 實際上有10個步驟

00:16:28.021 --> 00:16:29.823 
且下載被賦值了其中的9個

00:16:29.923 --> 00:16:31.124 
過濾器被賦值了1個

00:16:31.892 --> 00:16:33.827 
現在 隨着下載的完成

00:16:34.394 --> 00:16:37.731 
下載步驟佔了輸入進度的90%

00:16:37.831 --> 00:16:39.733 
過濾器佔了其餘的10%

00:16:40.501 --> 00:16:42.936 
可以調整進度的單位以便

00:16:43.303 --> 00:16:45.506 
權衡爲子對象賦值的任務

00:16:47.708 --> 00:16:50.444 
好 我們來看在代碼中怎麼體現

00:16:51.144 --> 00:16:54.681 
構建NSProgress對象
可以通過兩種方式

00:16:54.948 --> 00:16:57.818 
第一種方式我馬上就會講到是隱形組合

00:16:58.552 --> 00:17:02.189 
那麼你生成一個父對象的進度對象

00:17:02.623 --> 00:17:05.025 
這將是之前的
photoProgress 

00:17:06.527 --> 00:17:07.895 
分爲兩個步驟

00:17:09.829 --> 00:17:12.633 
可以把
totalUnitCount定爲2

00:17:13.500 --> 00:17:16.904 
我們想做的是
把下載進度添加爲子對象

00:17:17.538 --> 00:17:19.640 
那麼 我們在父對象進度
調用的是Current

00:17:19.705 --> 00:17:21.340 
With Pending 
Unit Count

00:17:21.407 --> 00:17:22.709 
photoProgress

00:17:22.876 --> 00:17:26.980 
它的作用是
設置線程本地當前進度

00:17:27.748 --> 00:17:30.083 
這樣photoProgress 
就是當前進度

00:17:30.484 --> 00:17:33.453 
pendingUnitCount
設置爲1 

00:17:34.087 --> 00:17:37.624 
基本上是爲隨後的進度而保留

00:17:37.691 --> 00:17:39.760 
並加入當前的進度當中

00:17:40.394 --> 00:17:44.364 
接下來 我們調用下載功能

00:17:44.431 --> 00:17:46.700 
startDownload

00:17:47.334 --> 00:17:50.337 
這會生成進度
會用到NSProgress

00:17:50.404 --> 00:17:52.406 
totalUnitCount
簡易構造函數

00:17:52.773 --> 00:17:55.709 
以及totalUnit簡易構造函數

00:17:56.343 --> 00:18:00.013 
我們將在當前進度中添加生成的進度

00:18:00.814 --> 00:18:05.285 
加入下載 作爲
photoProgress的子對象

00:18:06.753 --> 00:18:08.021 
接下來 我們需要清理一下

00:18:08.088 --> 00:18:09.756 
那麼 我們調用

00:18:10.090 --> 00:18:12.326 
賦值的當前進度
photoProgress

00:18:12.392 --> 00:18:13.660 
不再是當前進度

00:18:14.494 --> 00:18:15.329 
就這樣

00:18:15.662 --> 00:18:18.732 
現在我們用了隱形組件

00:18:18.866 --> 00:18:20.400 
添加子對象爲父對象

00:18:22.936 --> 00:18:25.906 
在使用隱形組件時需要記住幾點

00:18:26.840 --> 00:18:28.809 
在支持隱形組件時

00:18:29.910 --> 00:18:33.213 
你想要立刻生成NSProgress

00:18:33.847 --> 00:18:37.317 
並用到totalUnitCount
簡易構造函數

00:18:37.618 --> 00:18:40.320 
這是因爲第一個進度對象

00:18:40.387 --> 00:18:43.790 
添加到目前的進度會佔用整個
pendingUnitCount

00:18:44.391 --> 00:18:46.994 
如果生成了它 首先你不必擔心

00:18:47.060 --> 00:18:48.962 
存取器問題 或其他調用無意中對

00:18:49.029 --> 00:18:51.131 
父對象
pendingUnitCount

00:18:51.198 --> 00:18:51.865 
的佔用

00:18:52.966 --> 00:18:54.434 
當然 要做記錄

00:18:54.735 --> 00:18:57.070 
隱形組件畢竟是隱形

00:18:57.471 --> 00:19:00.874 
客戶端不會知道你
支持隱形組件除非你說出來

00:19:03.343 --> 00:19:05.712 
而且 如果此時未加入

00:19:05.779 --> 00:19:07.447 
子對象 你調用賦值的
當前進度

00:19:08.148 --> 00:19:10.751 
pendingUnitCount
就會立即加入

00:19:10.817 --> 00:19:13.020 
父對象的
completedUnitCount

00:19:13.086 --> 00:19:15.389 
那麼completed-
UnitCount 也會更新

00:19:17.257 --> 00:19:20.961 
因此 構建NSProgress 
對象的第二種方式

00:19:21.028 --> 00:19:23.330 
在OS X 10.11
和iOS 9中

00:19:23.697 --> 00:19:25.465 
是新功能 稱之爲顯性組件

00:19:26.200 --> 00:19:31.038 
那麼 你收到一個進度希望
從什麼地方添加爲子對象

00:19:31.104 --> 00:19:31.939 
也許是符合

00:19:32.005 --> 00:19:34.808 
NSProgressReporting
的內容那就是過濾器

00:19:35.843 --> 00:19:38.312 
現在有你想加入其中的父對象進度

00:19:38.846 --> 00:19:41.582 
就拿之前的
photoProgress舉例

00:19:43.150 --> 00:19:45.586 
然後會用
pendingUnitCount

00:19:45.652 --> 00:19:47.054 
調用addChild 

00:19:47.721 --> 00:19:49.690 
在你希望添加的進度當中

00:19:50.991 --> 00:19:55.162 
並加入子對象進度
filterProgress 這裏

00:19:55.229 --> 00:19:56.997 
在給出
pendingUnitCount

00:19:57.064 --> 00:19:57.865 
是你想加入其中的

00:19:58.232 --> 00:20:00.834 
因爲這是一個步驟我們想加入
pendingCount 1

00:20:01.568 --> 00:20:02.302 
就這樣

00:20:02.503 --> 00:20:06.006 
現在 進度是父對象進度的子對象

00:20:09.109 --> 00:20:11.812 
這裏是部分指南說明何時使用

00:20:11.879 --> 00:20:13.180 
顯性或隱形組件

00:20:14.248 --> 00:20:17.351 
如果你的方法
無法返回NSProgress

00:20:17.451 --> 00:20:20.287 
例如你超越了無法改變的API邊界

00:20:20.587 --> 00:20:22.523 
使用隱形組件並記錄下

00:20:22.589 --> 00:20:24.091 
它支持隱形組件

00:20:24.925 --> 00:20:29.863 
或 因爲顯性組件在
OS X 10.11和iOS 9中

00:20:30.330 --> 00:20:33.300 
在老版本中 必須要用到隱形組件

00:20:33.734 --> 00:20:38.038 
否則 一般都會想要
使用隱形組件這簡單多了

00:20:40.474 --> 00:20:43.177 
好 我們繼續來看組件演示

00:20:45.679 --> 00:20:48.549 
這裏是照片下載類

00:20:48.615 --> 00:20:51.718 
我們上次就是把進度報告加到其中

00:20:51.785 --> 00:20:55.689 
如果運行app就會有稍許改動

00:20:56.089 --> 00:20:58.759 
現在有照片的
CollectionView

00:20:59.092 --> 00:21:00.594 
而不是單獨的照片

00:21:01.161 --> 00:21:03.230 
那麼當我們按下輸入

00:21:03.630 --> 00:21:05.832 
它沒有隻是下載這些圖像

00:21:06.133 --> 00:21:07.968 
還運行了過濾器

00:21:08.468 --> 00:21:10.037 
因此 我們沒有整體的進度

00:21:10.103 --> 00:21:13.507 
信息 所以這種體驗很是糟糕

00:21:14.575 --> 00:21:19.746 
我們可以通過
具備操作報告進度來改善體驗

00:21:20.781 --> 00:21:21.815 
我們這就動手 

00:21:22.983 --> 00:21:23.884 
如果具備支持

00:21:23.951 --> 00:21:26.253 
NSProgressReporting
的下載類

00:21:26.753 --> 00:21:30.090 
還有具備類方法的過濾器類 

00:21:30.157 --> 00:21:32.359 
可以處理圖像並返回過濾後的圖像

00:21:33.827 --> 00:21:38.165 
我們有這個輸入類它可以下載

00:21:38.232 --> 00:21:41.101 
並在下載完成時運行過濾器

00:21:41.502 --> 00:21:43.504 
因此可以結合進度 

00:21:44.071 --> 00:21:47.808 
比如我們將把下載進度

00:21:48.141 --> 00:21:53.113 
和過濾器操作的進度相結合

00:21:54.548 --> 00:21:57.551 
我們現在來看照片輸入

00:21:57.618 --> 00:21:59.853 
這裏有個初始程序可以找到URL

00:22:00.420 --> 00:22:03.724 
並用這個URL生成下載

00:22:04.424 --> 00:22:07.828 
它還有完成處理器 用來調用

00:22:07.895 --> 00:22:09.630 
過濾後和下載的圖像

00:22:10.230 --> 00:22:11.865 
或是在出現錯誤時調用錯誤

00:22:12.733 --> 00:22:15.702 
在開始輸入時 還有開始方法

00:22:15.969 --> 00:22:19.640 
這個開發方法對下載設置了

00:22:19.706 --> 00:22:23.210 
完成處理器併爲下載數據

00:22:23.277 --> 00:22:28.715 
生成UIImage再將圖像

00:22:28.782 --> 00:22:30.918 
傳給過濾器 獲得過濾後圖像

00:22:31.251 --> 00:22:34.154 
然後用過濾後圖像
調用自己的完成處理器

00:22:34.588 --> 00:22:37.524 
一旦完成處理器設置好就開始下載

00:22:39.059 --> 00:22:42.996 
這樣我們想實現將照片輸入報告

00:22:43.063 --> 00:22:47.568 
的下載和過濾器進度
都包括在內的綜合進度

00:22:48.068 --> 00:22:49.236 
那我們就需要再做一遍

00:22:49.369 --> 00:22:53.607 
讓照片輸入類符合
NSProgressReporting

00:22:54.808 --> 00:22:56.510 
我們再來進行類的聲明

00:22:56.977 --> 00:22:59.179 
並加入
NSProgressReporting

00:23:00.347 --> 00:23:04.218 
現在 我們需要有
進度屬性我們把它加上

00:23:05.185 --> 00:23:07.588 
還要生成NSProgress對象

00:23:08.121 --> 00:23:12.092 
這次關於單位我們
要用一些比較抽象的內容

00:23:12.159 --> 00:23:14.561 
我們已經運行了幾次app結果發現

00:23:14.628 --> 00:23:19.833 
如果讓下載佔到輸入進度的
90%左右這樣效果最好

00:23:20.300 --> 00:23:22.402 
我們把totalUnitCount
定爲10

00:23:22.669 --> 00:23:24.838 
那麼 下載
佔到totalUnitCount

00:23:24.905 --> 00:23:27.941 
的9過濾器會用到其餘的1

00:23:29.676 --> 00:23:31.144 
現在是開始方式

00:23:34.047 --> 00:23:37.584 
因爲下載已經和NSProgress
Reporting一致

00:23:37.851 --> 00:23:41.788 
我們可以從中得到
進度對象並把它加入進度

00:23:42.022 --> 00:23:44.758 
可以用顯性添加子方式來實現

00:23:45.292 --> 00:23:48.128 
我們調用進度添加子對象下載進度

00:23:48.295 --> 00:23:50.130 
pendingUnitCount
爲9

00:23:51.131 --> 00:23:53.200 
它佔據了進度的90%

00:23:55.169 --> 00:23:58.672 
我們想做的是把
過濾器的進度加入進度中

00:23:59.339 --> 00:24:01.475 
但是過濾器是類方法

00:24:01.542 --> 00:24:03.744 
可以處理圖像並返回圖像

00:24:03.844 --> 00:24:06.246 
並無明顯方法可以從中獲得進度

00:24:06.947 --> 00:24:11.618 
但如果進入照片過濾器類

00:24:11.685 --> 00:24:12.953 
我們可以看到這裏有評論

00:24:13.020 --> 00:24:15.656 
稱它可以支持隱形進度組件

00:24:16.223 --> 00:24:18.325 
那麼我們可以使用隱形進度組件

00:24:18.592 --> 00:24:19.826 
並把它添加爲子對象

00:24:20.928 --> 00:24:23.297 
我們回到輸入開始方法

00:24:24.598 --> 00:24:28.569 
下載完成處理器可以被調

00:24:28.635 --> 00:24:32.673 
用到背景線程
在這裏 我們會成爲當前進度

00:24:33.207 --> 00:24:35.209 
把pendingUnitCount
定爲1

00:24:35.375 --> 00:24:39.680 
注意 我說過下載的完成處理器

00:24:39.746 --> 00:24:41.648 
可以被調用到背景線程

00:24:41.882 --> 00:24:45.986 
但是這沒問題 因爲我們
在同一線程後會立即調用過濾器

00:24:47.020 --> 00:24:52.059 
在我們成爲
當前進度後 過濾器會運行

00:24:52.125 --> 00:24:55.696 
並把自己作爲當前進度的子對象

00:24:56.563 --> 00:25:01.101 
一旦返回 我們需要不再是
當前進度因此我們會調用對出當前進度

00:25:03.437 --> 00:25:04.204 
就這樣

00:25:04.271 --> 00:25:07.508 
現在我們把下載和過濾器進度都加入了

00:25:07.574 --> 00:25:08.609 
輸入進度

00:25:09.176 --> 00:25:10.911 
現在如果運行app按下輸入

00:25:16.683 --> 00:25:22.222 
大家可以看到輸入是
各個照片的報告進度

00:25:23.257 --> 00:25:25.392 
很好 用戶對正在發生的事情

00:25:25.459 --> 00:25:27.594 
掌握更多信息但是也沒那麼好

00:25:27.661 --> 00:25:30.230 
我們只需要向用戶顯示一個進度

00:25:30.731 --> 00:25:31.465 
我們這就動手

00:25:34.067 --> 00:25:37.171 
簡略一點我們要進入

00:25:37.237 --> 00:25:40.340 
根View Controller
照片View Controller

00:25:41.041 --> 00:25:43.310 
這是整體進度屬性

00:25:43.710 --> 00:25:47.548 
它是NSProgress的
客戶端 剛得到這個

00:25:47.614 --> 00:25:49.683 
並且準備和UI掛鉤並顯示

00:25:50.150 --> 00:25:51.818 
它不會自己來生成

00:25:53.554 --> 00:25:55.589 
它還有Album的參考

00:25:55.656 --> 00:25:57.624 
即我們下載的照片集合

00:25:58.625 --> 00:26:02.129 
它還有工具欄按鈕的IBAction

00:26:02.196 --> 00:26:03.797 
本例中 開始輸入按鈕

00:26:04.231 --> 00:26:08.569 
和IBAction會調用 
相冊中的輸入照片

00:26:09.903 --> 00:26:14.575 
如果來看相冊這裏有一組照片

00:26:15.542 --> 00:26:18.979 
並通過URL

00:26:19.213 --> 00:26:21.081 
在主包生成照片

00:26:21.715 --> 00:26:26.920 
且在輸入照片方式中經過每個照片

00:26:27.454 --> 00:26:29.223 
並調用其開始輸入

00:26:30.691 --> 00:26:35.429 
如果來看照片
我們的照片都有圖像URL

00:26:35.495 --> 00:26:37.664 
這是從初始程序獲得

00:26:38.365 --> 00:26:43.604 
還有UIImage屬性
開始可以作爲定位符

00:26:44.571 --> 00:26:46.807 
還有開始輸入方法

00:26:46.874 --> 00:26:48.375 
這是由相冊來調用的

00:26:48.442 --> 00:26:50.911 
它生成我們加入
NSProgressReporting

00:26:50.978 --> 00:26:53.046 
照片輸入類然後設置

00:26:54.014 --> 00:26:55.616 
該照片輸入類的完成處理器

00:26:55.682 --> 00:27:00.320 
把圖像設置成已輸入的圖像

00:27:01.522 --> 00:27:03.891 
然後在 在設置完成處理器後

00:27:03.957 --> 00:27:07.528 
開始輸入並備份以備不時之需

00:27:09.429 --> 00:27:11.198 
這樣我們想

00:27:11.265 --> 00:27:15.135 
把照片輸入進度並把所有發生的輸入

00:27:15.202 --> 00:27:18.138 
都集合到一個進度中

00:27:19.506 --> 00:27:21.508 
我們再來看
根View Controller

00:27:22.643 --> 00:27:24.111 
我們可以做的

00:27:24.178 --> 00:27:28.448 
是我們的輸入進度方法
返回NSProgress

00:27:28.882 --> 00:27:31.552 
我們會把整體進度屬性設定爲

00:27:31.618 --> 00:27:33.387 
那個返回的NSProgress

00:27:34.621 --> 00:27:37.224 
輸入照片還並未
返回NSProgress 

00:27:37.291 --> 00:27:38.458 
所以我們需要這麼做

00:27:38.992 --> 00:27:42.863 
我們進入相冊輸入照片方法

00:27:44.164 --> 00:27:45.432 
現在是返回空

00:27:45.499 --> 00:27:48.268 
我們需要讓它
返回到NSProgress

00:27:49.970 --> 00:27:52.840 
然後還要生成我們準備
返回的進度對象

00:27:53.740 --> 00:27:59.246 
因爲進度對象會爲相冊的每張照片

00:27:59.813 --> 00:28:01.481 
準備子對象我們希望

00:28:01.782 --> 00:28:03.984 
totalUnitCount爲
相冊中的照片數

00:28:05.953 --> 00:28:08.355 
然後我們繼續並返回

00:28:09.590 --> 00:28:12.759 
接下來我們要做的是要讓我們的照片

00:28:12.826 --> 00:28:15.495 
開始輸入方法也返回一個進度

00:28:16.830 --> 00:28:19.967 
那麼 我們會把它
賦值到本地的可變輸入進程

00:28:20.367 --> 00:28:23.871 
那麼 我們添加這個作爲子對象

00:28:23.937 --> 00:28:26.173 
到相冊進度把
pendingUnitCount

00:28:26.240 --> 00:28:29.843 
定爲1
因爲這是一張照片的輸入進度

00:28:32.479 --> 00:28:36.350 
現在 在我們的照片開始輸入方法

00:28:36.850 --> 00:28:38.185 
當前返回空

00:28:38.352 --> 00:28:40.787 
我們希望它返回到
NSProgress我們這就動手

00:28:41.588 --> 00:28:45.192 
因爲照片輸入已經與
NSProgressReporting

00:28:45.259 --> 00:28:46.260 
相一致

00:28:46.493 --> 00:28:48.896 
我們可以把進度屬性返回給它

00:28:50.397 --> 00:28:51.298 
就這樣 這就是組件了

00:28:51.465 --> 00:28:56.003 
我們把整體進度都賦值給了

00:28:56.370 --> 00:29:01.008 
一個進度...是由所發生的
各自輸入的子對象構成

00:29:01.375 --> 00:29:04.745 
各個輸入都有下載和過濾器子對象

00:29:05.512 --> 00:29:06.947 
我們來運行這個app

00:29:10.884 --> 00:29:13.554 
現在位於底部的是整體進度

00:29:13.754 --> 00:29:16.089 
在所有這些子對象完成後會進行更新

00:29:17.291 --> 00:29:20.761 
把小的進度條移開留下的作爲練習

00:29:23.564 --> 00:29:24.231 
好

00:29:27.100 --> 00:29:28.569 
文斯·斯派德: 好 回到幻燈片

00:29:31.338 --> 00:29:35.342 
我想談談取消 暫停和恢復任務

00:29:36.310 --> 00:29:39.313 
NSProgress對象
可以作爲取消任務的工具欄

00:29:39.479 --> 00:29:42.583 
NSProgress的生成器
設置可取消

00:29:42.683 --> 00:29:44.685 
和
cancellationHandler

00:29:44.952 --> 00:29:48.121 
如果操作在同步完成一些任務

00:29:48.188 --> 00:29:50.357 
cancellationHandler
並沒有真正工作

00:29:50.424 --> 00:29:51.959 
你還可以取消

00:29:52.025 --> 00:29:53.727 
NSProgress對象的取消旗標

00:29:55.495 --> 00:29:59.333 
客戶端可以調用取消
NSProgress將設置取消

00:29:59.399 --> 00:30:01.969 
爲真 並觸發
cancellationHandler

00:30:02.402 --> 00:30:04.638 
那麼取消任務就會轉至子對象

00:30:04.972 --> 00:30:08.041 
如果子進度有取消任務處理器

00:30:08.275 --> 00:30:09.276 
這些也會觸發

00:30:10.477 --> 00:30:11.578 
而且是永久性的

00:30:11.645 --> 00:30:14.481 
一旦進度取消並無非取消功能

00:30:16.984 --> 00:30:19.019 
暫停任務和取消任務很相似

00:30:19.553 --> 00:30:23.056 
NSProgress的生成器
沿着暫停任務處理器

00:30:23.123 --> 00:30:24.992 
和恢復任務處理器設置可暫停

00:30:25.492 --> 00:30:28.362 
恢復處理器在 
OS X 10.11和iOS 9中

00:30:28.428 --> 00:30:29.496 
是新功能

00:30:30.831 --> 00:30:35.335 
還可以取消暫停旗標確定是否
進度目前是暫停狀態

00:30:37.271 --> 00:30:39.640 
客戶端會調用暫停並設置暫停

00:30:39.706 --> 00:30:42.976 
調用暫停處理器或調用恢復

00:30:43.043 --> 00:30:45.179 
再取消暫停觸發恢復處理器

00:30:45.546 --> 00:30:47.881 
暫停任務和恢復任務

00:30:47.948 --> 00:30:50.384 
也會和取消任務一樣轉至子對象進度

00:30:51.485 --> 00:30:53.820 
我們繼續做一個演示

00:30:57.324 --> 00:31:01.862 
如果你的對象 如果你的操作已經支持
取消 暫停和恢復任務

00:31:01.929 --> 00:31:04.965 
就可以非常容易地
面對NSProgress

00:31:05.966 --> 00:31:07.968 
我們回到
照片View Controller

00:31:08.035 --> 00:31:09.736 
這是根
View Controller

00:31:10.270 --> 00:31:13.006 
這次app多了幾個按鈕

00:31:13.073 --> 00:31:16.276 
如果按下輸入還有個取消和暫停按鈕

00:31:16.343 --> 00:31:19.179 
但是現在並未做
任何事情需要把它們連起來

00:31:20.380 --> 00:31:21.114 
我們這就動手

00:31:23.050 --> 00:31:25.686 
有IBAction來定義這些按鈕

00:31:25.752 --> 00:31:29.223 
還有取消輸入 暫停輸入和恢復輸入

00:31:29.690 --> 00:31:31.558 
現在要做的是在所有這些行動中 

00:31:31.625 --> 00:31:35.762 
我們會調用整體進度的取消暫停和恢復

00:31:38.365 --> 00:31:43.937 
現在一旦...
現在將在任何子對象進度上

00:31:44.004 --> 00:31:46.773 
調用任何取消暫停或恢復處理器

00:31:47.074 --> 00:31:47.975 
目前還沒有

00:31:48.308 --> 00:31:51.178 
但是下載會支持取消暫停和恢復任務

00:31:51.512 --> 00:31:53.080 
我們進入照片下載

00:31:54.147 --> 00:31:57.150 
如果進入 Will 
Begin Download回調

00:31:59.186 --> 00:32:01.021 
可以加入取消 暫停 恢復

00:32:01.088 --> 00:32:02.956 
支持這個NSProgress

00:32:03.123 --> 00:32:05.959 
那麼首先設置可取消爲真

00:32:06.927 --> 00:32:09.129 
並設置
cancellationHandler

00:32:09.196 --> 00:32:11.265 
這裏
cancellationHandler

00:32:11.331 --> 00:32:13.233 
在用NSUser
Canceled Error

00:32:13.300 --> 00:32:15.802 
調用Failed Download
 With Error

00:32:18.438 --> 00:32:21.141 
我們同樣還是可暫停可恢復 

00:32:21.208 --> 00:32:24.044 
那麼會把可暫停
設定爲真在暫停處理器中

00:32:24.111 --> 00:32:26.313 
我們稱之爲Suspend
Download方法

00:32:26.713 --> 00:32:29.316 
在恢復處理器中我們在
調用Resume Download

00:32:30.017 --> 00:32:31.852 
現在注意這些都是私有方法

00:32:31.919 --> 00:32:34.288 
Failed Download
With Error

00:32:34.354 --> 00:32:36.723 
Suspend Download
和Resume Download

00:32:36.790 --> 00:32:39.393 
那我們只把這個功能
用於通過NSProgress

00:32:39.459 --> 00:32:41.361 
取消 暫停和恢復任務

00:32:41.428 --> 00:32:43.497 
但是這可以是非常強大的互動點

00:32:44.865 --> 00:32:46.667 
現在 我們運行app壓縮 開始輸入

00:32:49.603 --> 00:32:55.142 
暫定 進度 下載自行暫停

00:32:55.943 --> 00:32:58.445 
我們按下恢復就會恢復

00:32:58.512 --> 00:33:00.480 
還可以按下取消就會取消

00:33:00.914 --> 00:33:03.483 
現在是整體進度在發送

00:33:03.550 --> 00:33:06.053 
爲任何可能的子對象觸發

00:33:06.119 --> 00:33:08.021 
cancellationHandler

00:33:09.289 --> 00:33:09.957 
就這樣

00:33:11.525 --> 00:33:12.559 
回到幻燈片

00:33:18.232 --> 00:33:19.032 
文斯·斯派德:好

00:33:19.366 --> 00:33:21.702 
我們先聊聊用戶界面

00:33:22.269 --> 00:33:23.904 
在生成NSProgress對象時

00:33:23.971 --> 00:33:25.572 
我們都經歷過這些問題

00:33:25.639 --> 00:33:28.041 
但是最終目的是告知用戶

00:33:28.108 --> 00:33:30.677 
現在在發生什麼這就是說用戶界面

00:33:31.845 --> 00:33:33.614 
那麼所有的NSProgress屬性

00:33:33.680 --> 00:33:35.916 
都是可看的關鍵值

00:33:36.383 --> 00:33:39.453 
客戶端可以添加
KVO觀察者來更新UI

00:33:39.853 --> 00:33:42.990 
例如 客戶可以更新UI視圖來查看
NSProgress

00:33:43.090 --> 00:33:45.492 
作爲fraction-
Completed屬性

00:33:46.126 --> 00:33:48.829 
或是更新標籤爲
localizedDescription

00:33:50.097 --> 00:33:54.601 
同樣要注意 這些KVO
回調也許在主線程中

00:33:54.668 --> 00:33:55.969 
不必調用

00:33:56.036 --> 00:33:57.671 
因此如果在更新UIControl

00:33:57.938 --> 00:33:59.773 
你會希望把任務移到主隊列中

00:34:01.475 --> 00:34:04.778 
這裏的示例是加上觀察者後的效果

00:34:06.647 --> 00:34:10.984 
可以在NSProgress爲關
鍵路徑調用addObserver 

00:34:11.451 --> 00:34:13.654 
針對fraction-
Completed屬性

00:34:14.353 --> 00:34:16.924 
那麼在覆蓋觀察Value
 For Key Path中 

00:34:16.989 --> 00:34:20.527 
我們把部分任務列入主隊列

00:34:21.128 --> 00:34:22.829 
在主隊列我們從NSProgress

00:34:22.896 --> 00:34:24.797 
獲得
fractionCompleted

00:34:24.864 --> 00:34:26.900 
並更新UIProgressView

00:34:27.434 --> 00:34:28.569 
基本是這樣

00:34:28.802 --> 00:34:33.440 
類似的樣式可以用於
更新UI的標籤或按鈕

00:34:36.176 --> 00:34:39.146 
好的 最後我們來看
NSProgress的最佳實踐

00:34:39.679 --> 00:34:41.949 
以爲講座題目中提到最佳實踐 

00:34:42.014 --> 00:34:43.417 
我最後要抓緊時間介紹一下

00:34:45.452 --> 00:34:47.353 
首先是完成

00:34:47.821 --> 00:34:50.657 
不要使用fraction-
Completed 來決定完成

00:34:51.024 --> 00:34:52.993 
這是個浮點值是由...

00:34:53.060 --> 00:34:54.428 
是從計算得出

00:34:54.795 --> 00:34:58.332 
和1.0來比較 不一定正確

00:34:58.632 --> 00:35:00.834 
而要使用
completedUnitCount

00:35:00.901 --> 00:35:02.402 
和totalUnitCount 

00:35:02.836 --> 00:35:05.706 
除非進度不確定
或totalUnitCount爲0

00:35:07.774 --> 00:35:10.611 
另外 進度必須完成這點很重要

00:35:10.677 --> 00:35:12.880 
父對象的
completedUnitCount

00:35:12.946 --> 00:35:14.948 
只有在子對象完成後纔會更新

00:35:15.315 --> 00:35:19.186 
同樣NSProgress 
會優化完成的子對象的方法

00:35:19.253 --> 00:35:21.688 
這樣在任務完成時可以節省內存

00:35:24.124 --> 00:35:27.794 
之後 NSProgress
對象不得再次使用

00:35:28.128 --> 00:35:29.563 
一旦完成 就完成了

00:35:29.830 --> 00:35:31.298 
一旦取消 就取消了

00:35:32.132 --> 00:35:34.134 
如果需要再次使用
NSProgress

00:35:34.468 --> 00:35:36.937 
而不是重新來過並提供機制

00:35:37.004 --> 00:35:41.508 
那麼進度的客戶端會瞭解
對象已經取代比如通知

00:35:43.911 --> 00:35:45.512 
最後 性能表現

00:35:46.914 --> 00:35:48.015 
不要在小循環更新

00:35:48.081 --> 00:35:49.917 
completedUnitCount

00:35:49.983 --> 00:35:53.153 
例如 不要更新下載的每個字節

00:35:53.420 --> 00:35:55.722 
如果有父對象我們可以調用

00:35:55.789 --> 00:35:57.758 
來更新
fractionCompleted

00:35:57.824 --> 00:35:59.560 
這樣用時可能會超過預期

00:35:59.626 --> 00:36:03.163 
因爲組件可以任意大 並且很深

00:36:04.831 --> 00:36:06.934 
但是當你這麼做時不要忘記完成進度

00:36:07.000 --> 00:36:09.269 
一定確保更新
completedUnitCount

00:36:09.336 --> 00:36:10.571 
爲totalUnitCount

00:36:10.637 --> 00:36:13.006 
否則 你會面對即將完成的進度

00:36:13.207 --> 00:36:13.941 
這對誰都不好

00:36:15.542 --> 00:36:16.210 
就這樣

00:36:16.844 --> 00:36:20.147 
我們講了許多
如果有效使用NSProgress 

00:36:20.848 --> 00:36:24.384 
需要牢記的是這麼幾點

00:36:24.618 --> 00:36:26.620 
每個進度都有自己的單位

00:36:27.020 --> 00:36:30.624 
可以使用隱形或顯性

00:36:31.024 --> 00:36:33.126 
這麼做時
pendingUnitCount在

00:36:33.193 --> 00:36:34.595 
父對象的單元中

00:36:35.662 --> 00:36:38.665 
同樣可以生成
NSProgress或你就是客戶端

00:36:39.399 --> 00:36:42.970 
對於本地化 可以使用類型和用戶屬性

00:36:43.036 --> 00:36:45.739 
幫助實現更好的
localizedDescription

00:36:47.508 --> 00:36:50.611 
NSProgress是取消
暫停和恢復任務的

00:36:50.677 --> 00:36:51.612 
極好界面

00:36:53.247 --> 00:36:56.750 
它的所有屬性均爲
可觀察KVO 因此可以使用

00:36:56.950 --> 00:36:58.919 
用它來更新UI

00:36:59.987 --> 00:37:00.654 
就是這樣

00:37:00.721 --> 00:37:03.156 
若想了解更多詳情可以查看文檔資料

00:37:03.423 --> 00:37:05.559 
可以查看NSProgress的標題

00:37:05.626 --> 00:37:06.894 
其中做了很好的註解

00:37:07.361 --> 00:37:10.063 
我們還給出了新示例
代碼photoProgress

00:37:10.130 --> 00:37:11.932 
是根據我今天的演示提供的

00:37:12.833 --> 00:37:15.869 
如果需要任何幫助
可以前往開發人員論壇

00:37:15.936 --> 00:37:17.571 
或聯繫開發人員技術支持

00:37:18.138 --> 00:37:20.974 
如果是一般性諮詢
可以電郵聯繫保羅·馬科斯

00:37:21.108 --> 00:37:21.775 
就是這些

00:37:22.109 --> 00:37:22.776 
謝謝