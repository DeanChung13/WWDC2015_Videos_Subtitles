《有关On Demand Resources之简介》
下午好
欢迎来到今天关于On DemandResources的介绍会议
我是史蒂夫·列瓦伦
我们今天将给你们准备了些什么呢
嗯 我们还是先给你们说说
On Demand Resources或者是ODR的大致情况
我们来比较一下使用ODR App与没有使用它的区别吧
我们将为ODR开发人员以及用户们
列出ODR App的所有特性和优势
然后我们将深入研究ODR的细节
结构以及如何构建等问题
接下来我们将给你演示使用Xcode
并将新的ODR API添加到库里
最后 我们将演示和构建最优ODR API的最佳实践
并整理成一个小片段
咱们开始吧
我们得先理解
传统App的进展状况才能理解ODR的进展
这个App现在将会有一个可执行的部分
这是编译好的SwiftObjective-C C++
以及一些基础资料
和游戏等级资料例如 假设这是一个游戏
当开发人员对这个游戏或App感到满意
于是你们上传到App Store里
这样 用户可以购买这个App或游戏
然后他们得到整个程序
并下载到设备上
然而他们下载的东西并不单单如此
其中也包含开发人员为所有用户编写的其他有趣的东西包括App和游戏
他们其实是如此有趣
人们下载得再多也觉得不够而事实亦如此
设备上没有足够多的空间
因此我们怎么要做呢
好吧 我们能做的就是观察每个App
发现并非每个部分都被使用
我举个例子
我的游戏级别是7级
我肯定不想再待在1级
而且长时间内我可能也到不了30级
如此一来
我们就开始考虑ODR
现在让我们来看ODR的一个App吧
在这种情况下
我们开始使用相同的比特
没有去掉任何东西
但我们要做的是梳理
每个游戏级别的资料
然后我们将整个东西上传到商店
现在当客户购买这个App时
他们得到可操作的基础资料
也许有Level 1的游戏装备
这不是双关语
我们已经在游戏中了
因为他们能闯过游戏的Level 1
购买和使用App与Level 1的时间
比那些下载整个App更快
而且使用更少的磁盘空间
用户现在开始玩这个游戏
并开始玩Level 1
一个设计良好的ODR App
需要能预测比如下一个等级
因此 需要进行下载资料
用户继续玩
打到Level 2
然后ODR内置的缓存机制
通知你不再使用Level 2
并且作上标记
资料还在那儿
我们什么都不用做
只需要记住不再用它
但会一直保留设备上
这样空间就慢慢少了
无法储存下一个级游戏
我们检查设备上其他可能释放资源的空间
仅剩下这个游戏的...
ODR内容 仅此而已
在这种情况下
缓存机制可以一步释放空间
比如 我有1级的内容
我可以将它释放
这样然后用户可以继续玩下一级游戏
这是ODR的基本理念
从游戏的购买
到玩游戏时间更短
占据设备空间更小
更易于...
管理
现在让我们谈谈ODR
为开发人员提供的所有亮点
首先 这显然是一个动态加载的内容体系
你们可能已经使用过这样的系统
但是我们添加了一些新特性
首先我们可以在App Store中
储存该App的内容
第二 我们可以在安装和请求安装App时
下载内容事实上我们可以
随时自动化...
操作下载
最后还包括我提到的智能缓存机制
正如刚刚提到的
所以 我们可以腾出空间来
加载新的东西
最后
App Store传统App最大是4千兆字节
但是ODR App
现在可以达到20千兆字节
当然 这些大多数都是ODR的内容
好的
因此 这是开发者的优势
但对于用户的好处又是什么呢？
首先 我们可以...
改善安装体验
一个传统的DLC系统
使用该技术的游戏
会有这样的体验
用户下载App时
他们都非常期待玩这个游戏
他们启动游戏
然后 不是吧游戏还需要下载一些新的内容
有了ODR 我们可以确保新内容就在设备上
App只是看上去已经安装而已
因此用户体验会更好
第二
由于我们在设备上占用的空间更小
在任何时候都更容易管理
App占用的空间小
我们就可以存放更多的App在设备上
这对用户来说永远都是一件好事
最后对于用户来说
同样的由于有更多的空间
我们可以在App Store云端
存储更多App或是游戏
例如 我们可以有更丰富和昂贵的游戏等级
对于用户同样是一件好事
好的
现在让我们深究一些关于ODR的细节
首先对于IOS 9系统是应用瘦身
而且可以很好地与应用分割兼容
如果你错过了之前
关于应用分割会议
讨论如何将App 下载到特定设备
让我给你举一个例子
你编写一个App
目标是各种不同型号的iPhone和iPad
当iPhone用户来到
购买App后
应用分割可以确保他们所得到的资源是必须的
而且是适合该iPhone版本的
在此之前用户会下载所有的
包括适合iPad的资源
因此 现在结合应用分割
和ODR之后
彼此双方都收益
它占用的空间更小
我们使App运行更快
App持续稳定性更好
在设备上占用的空间更小
好的
那么
一个ODR App是什么样的呢
它是如何构建的呢
它与如今的App很类似
但是
他能够将游戏里的等级和资料梳理开
我们把这叫做资料包
剩余的App仍是你的 .app
现在 运用Xcode和简单的标签进行分组
例如 这些是我在游戏Level 1中的所有资料
假设的说
这非常容易设置
你可以将它标记为简单的文件或一整个文件夹
例如 这是Level 2的整个文件夹
现在 你可以标记什么呢
几乎.app里的任何东西都可以
例如
图像
声音
数据和文字
很多有脚本的游戏
同样还有App内购买的内容
那么现在你可以将程序内购买的物品
和通过ODR下载的实际购买的内容
相结合起来
利用其它ODR API
实现管理
唯一无法获得的是可执行内容
即编译好的SwiftObjective-C、C、C++
这些会留在 .app里
好的
那么
这些内容将存储在哪里
好的 我提出其中一个位置
显然它是在App Store
我们存储在App Store并且按需供应
但在开发过程中Xcode代替了App Store
无论你是针对设备还是模拟器进行开发
它存储在你的App中并根据需求传输
现在 Xcode的另一款工具是Xcode服务器
你可以把它设置在自己部门中
这样可以获取服务器上的ODR和App
例如 按照你所安排的
Q/A工程组测试你的App
正如你所期望TestFlight完全整合了ODR
最后 假如你要为公司部署一款App
实际上你可以在公司的网络服务器上存储ODR内容
并设置安全登录
以确保不是所有人都可以获取该内容
这ODR内容的存储位置了
好的
那么 该如何开始的呢
嗯 作为一个开发者你要做的第一件事情是
看看你所有的App资料
并且识别它们
你需要对它们进行分类
再次重复 你可以用简单的字符进行标记
这些是我游戏Level 1的所有资料
这些是我游戏Level 2的资料
而且你知道等级间有一些共享的资料吗
它们就在那里
你可用多重标签标记资料
以显示共享内容 防止重复
这部分是为准备好使用ODR的人设计的首个部分
作为开发者 这是你的工作
现在Xcode起作用了它将所有这些标签
和组放到资料包中
在这个案例中我们用三个资料包做结尾
资料包1为Level 1
资料包2为Level 2
最后以介于资料包1和2之间
的资料包3作结尾
再一次请避免重复
好了 Xcode起作用了
现在轮到开发者了
首先你要做的是
请求资料
我需要Level 1的所有东西
出来两个资料包
都属于Level 1
然后是介于Level 1和Level 2之间的共享资料
因为已经接入共享资料包
在我们请求Level 2时
我们得到这些资料
而这些共享资料也已经在我的设备上了
以上是关于ODR概念以及
如何建立一个ODR请求的概述
现在 有请托尼·帕克上台
为我们展示使用API Xcode中发生了什么
托尼
谢谢你 史蒂芬
我叫托尼·帕克我是Apple Foundation组的经理
史蒂芬为大家介绍了ODR系统如何工作的基本信息
现在我们将详细讲API
即在你的App 中实际用来处理这些请求的API
关于API你必须知道这个
这是Foundation中的新类叫NS Bundle Resource Request
这个类遵照命令设计模式
意思是你将用一组选择建立一个对象
包括你喜欢用的标签
随后你告诉它开始它的请求
这样 你就可以按需创建对象了
因为系统会参照高级选项计算标签
所以 如果有不同部分使用ODR App
且可能有重叠标签
你就不需要每次都创建管理类
跟踪你已经用过的那些
我们将为你处理这些问题
最重要的一点 即设计出发点是
请求与实际资料利用不挂钩
意思是说那些你已在App 中使用的
以及你已经非常熟悉的API
比如NS BundleURL For Resource
包含URL内容的NS Data数据
或UI ImageimageNamed
这些API将保持不变
你只需事先告诉系统
使用一个请求对象
告诉系统 这个对象里的资料是你想显示的
这个对象组成一个非常简单的状态机
从初始化开始
在预估资料需求时
我们跳转到请求状态
我们回到结束处理器回调
它将告诉我们那些资料可以获得
以及你可以继续使用刚讨论的API
或告诉我们发生的错误
当然 在使用ODR时
会有一些错误这些需要告诉用户
错误可能包括我们需要下载内容
但没有适用的网络
或尽管已经做了清理
设备里仍没有足够的空间储存这些内容
不管是什么情况你都需要告诉用户
或许他们有办法解决这些问题
所以若有适用的资料
就像我说的请继续使用它们
同样重要的是当你用完这些资料
请告诉我们
你可以用这两种方法告诉我们
第一种在这个类中调用明确的API
告诉我们你已经完成这个内容
第二种 允许种类解除分配
允许对象解除分配
在这种情况下
我们将为你结束请求
这是基本方法
首先 初始化程序
你可看到这里有字符串
这就是正在请求你所感兴趣的标签
开始请求的方法叫做
beginAccessingResourcesWithCompletionHandler
你可看到有个结尾
里面有NSR Error证据
最后 这种方法
会告诉系统请求完成完成
明确endAccessing Resources调用
接下来 我将展示
已经在运行中的API
好了
这是演示app 叫做iTravel
之所以叫这个名字
是因为它是一本旅行手册提供所有你感兴趣的
以字母i开头的国家信息
你可以看到今天用到的两个国家是
冰岛和意大利
现在 这个App是说明
On Demand Resources用法的很好的例子
原因是...
用户购买这个app时
或许对获取冰岛和意大利的信息并不感兴趣
或至少不需要同时获得两个信息
所以 我们可以通过
只下载所需内容
以减小安装和下载大小
在使用ODR之前
我想要简单的展示一下如何使用它
首先访问冰岛
你可以看到我在这里拿到兴趣点清单
我从中选择一个
里面可能有些优质的图片
或指南文本
兴趣点清单里的每一点都有不少图片
你可以看到这些增加了不少数据信息
而意大利 也是一样的
但是内容不同
我们来看看如何创建这个App
我们今天将花大量的时间来讲一个类
就是Album TableViewController
这是个视图控制器
控制这个兴趣点清单中的视图
让我来展示下它如何工作的
当我们继续这个视图
会有这个函数 叫做loadAlbum
接下来的问题是我们想看那个相册
意大利或冰岛
设置标题
我们把这项辅助函数叫做populateTable
现在 在populateTable函数里
我们将使用NSBundle´s URLForResource
寻找JSON文件
这个文件介绍所有兴趣点和清单以显示题注
我们使用NSData的contentsOfURL方法
从磁盘里读取JSON文件
我们使用NSJSONSerialization对其进行解析
我们在这里创建一些更详细标签文本
最后重载tableView
tableView里的数据源
使用UI Image.imageNamed
显示信息 获取图片
重点是
在这个App中使用ODR
植入Table中的功能无需变动
再说一次
现在你用来获取磁盘中文件内容
或找出像NSBundles这种文件所用的所有API保持不变
我们首先要做的是
在App中增加一些标签
做到这点我将在这里创建检测点
你可以看到我已经处理过我的App
里面有个叫Resources的组
以及包含部分内容的文件夹
这个包含所有冰岛的图片
这个包含所有意大利的图片
和我刚才讨论的这些JSON文件
接下来 我将接续
并为冰岛选择JSON文件和文件夹
并查看检测点的右边
你可以看到这里有个新的叫On Demand Resource标签
所以我所需做的是开始打字
内容将被标记为冰岛
用同样的方法处理意大利的内容
内容 好了
接下来我们只需 以便当然了
正如Steve说过的告诉Xcode如何将你的内容分开
现在 下一部分是
告诉运行中的系统
我们预计什么时间
需要这些内容备好可用
我们将在视图控制器中进行操作
首先我要在我的类中增加一个I var
以保存我们刚说的类
NSBundleResourceRequest
当视图控制器进行拆分时
我现在要做的是充分利用
我们很好地控制这个对象
这样 我们可以控制使用时间
当它完成拆分时我们知道请求也完成了
我们允许系统对其解除分配
这将告诉系统我们处理好内容了
下一步 在loadAlbum函数调用populateTable前
我们将先...
创建请求
进入一组标签在这个情况下
进入意大利或冰岛中的一组标签
我们称之为
beginAccessingResourcesWithCompletionHandler
结果出来后
这个结尾将被调用
或许会产生错误
在主线程中 这个完成处理程序
将在非主线程中被调用
我们首先检查并确保错误是0
若不是0那就是出现错误了
正如我们先前所讨论的
这需要告诉使用者我将在辅助函数里进行操作
然后调用刚使用过的populateTable函数
再一次没有变动任何东西
继续 并再一次运行App
看看会是什么样的
现在 我访问冰岛
可以看到我的内容在这边
因为我们已经做了请求
我可以选择一些图片或兴趣点
所有的内容都准备就绪了
就好像从一开始它们就是App的一部分一样
现在我们为你展示Xcode新调试特征
若你以你认为的方式
使用这些请求对象
它将帮助你更好的进行理解
即新的调试计量器
我将把调试计量器视图放在这里
选择磁盘
你可以看到在中间我们有一个新部分
叫做On Demand Resources
它列出你App中所有的标签
比如冰岛和意大利
他们的大小
和现在的状态
你看到冰岛的状态是在使用中
这就说得通了
因为我们在这里查看冰岛内容
在我看部分图片时它保持使用中的状态
但若我回到主内容目录
它的状态由使用中变为已下载
因为请求对象已解除系统知道我们
不再使用这些内容了
我们并未立即从磁盘中删除信息
所以当你回到冰岛时内容仍旧可用
它的状态也变成使用中
让我们看看访问意大利时会出现什么
现在你看到需要花一些时间
内容才会出来
原因是...
意大利标签远比冰岛的大
有130兆字节
这里需要做两件很重要的事
首先需要减小标签内容大小
将其分成小的组块
随后我们会详细说明
现在我想要告诉你
如何使用App中的进度报告
并配合使用
NS Bundle Resource Request
这样在你下载内容时就可以告诉用户一些信息
以帮助他们理解接下来会发生什么
让我们回到
AlbumTableViewController类
接下来要做的是利用
支持NS Progress的NSBundleResourceRequest的优势
这是个基础类
你可在你的App中用它来报告进程和构建进程
NS Progress支持键值观察
所以我们要做的是增加视图控制器作为进度的观察点
并更新
改变屏幕上部分UI一个UI进度视图
并对一些详细标签文本做出反应
这里 在创建请求后
调用addObserver
这类将是观察者
请求的进度属性正是我们观察的对象
进度中的关键路径是fractionCompleted
和往常一样 使用KVO时
指定唯一的内容指示器很重要
这个我已经在文件的某处进行定义
我将继续并显示一个UI progressView
这个进度视图已经连接到我的故事板中
当收到回应就可以移除Observer了
因为之后我们不在对更新的进度感兴趣了
然后在主线程中我们将继续显示...
不好意思是继续隐藏UI 进程视图
因为我们不想要用户盯着完整的进度指示器一直看
所以我们本身也是观察点
随后在第二部分
在数值变化时 采取一些行动
这里采取的是传统的KVO方法
observeValueForKeyPath
首先需要检查
通过检查内容指示器和关键路径
确保那就是我们感兴趣的观察更新
在主线程中 再一次
因为更新将在非主线程中出现
我们将通过设置进度属性更新UI进度视图
我们将通过使用它的localizedDescription方法
充分利用自动局部描述的NS Progress支持
让我们继续 并再次运行看看它将如何工作
所以这次 当我访问意大利时
你可以看到在详细标签文本底部已经更新
可以显示完成百分比随后 一旦下载完成
UI进度视图将告诉用户
已经发生的变化
所以 再一次 我们并不着急删掉这些内容
这样当我们再次返回访问意大利时
你可以看到内容立马就显示了
因为这些内容已经存储在On Demand Resources系统中
现在回到幻灯片
关于展示中进度报告部分的一些东西
所以 再一次 通过查看进度
你可以找到请求进度的信息
我们同样支持取消 暂停
重新开始请求这些方法本身并不是请求
它们可在NSProgress中找到
现在 事实上在iOS 9和 OS X 10.11中
Foundation中NSProgress类
我们已经做了很多重大改进
想知道如何使用它们
如何大规模的将这类整合到你的App
和其他地方
真的建议你关注周五的演讲
《进度报告的最佳范例》
在内容还未准备就绪之前
beginAccessing方法将继续运行并下载内容
然后 有时候你只想
使用磁盘中已经有的内容
不想再进行下载
你可以使用假定请求做到这点
方法如下
conditionallyBeginAccessingResourcesWithCompletionHandler
你可看到
这里的结尾有布尔参数
所以不管是是还是否
答案取决于内容可用还是不可用
所以根据状态机
我们从初始化开始
通过调用这个方法
进入假定请求状态
不管它是否可用你都将得到回应
若可用 资料也将可用
就好像你已经调用了其他方法
所以 再一次 确认调用endAccessingResources
或允许对象解除分配
若不可用此时你可以做选择
你可以...
什么都不做
也可以调用beginAccessingResources方法
进行下载
最后 我讲讲此类中API两个优先权
第一个叫做加载优先权
这个是双重的
它为你的App中未解决的请求排序
数值为从0到1
所以数值1指最高优先权
数值0指最低优先权
当我们处理这些数值时
它将提示系统哪个未解决的请求应该优先处理
因为数值只在你的app中进行比较
并未在系统中的App进行比较
你可利用这些数值
根据你的需要对请求进行排序
这里有个常量可以使用
它叫做紧急装载优先权
当用户只需等待下载完成而无需做其他事时
就可以使用这个常量
随后我们会详细讲到这点
第二种优先权叫做保存优先权
这个方法指的是在app中未使用的标签清除排序
这里并不需要特别的请求
这是它成为NSBundle延伸功能的原因
由一个标签或一组标签进行替代
数值范围从0到1

1数值表示最需要保存
所以在碰到磁盘存储空间问题时
你可通过它告诉系统
哪些数值最需要保存
只在你自己的App中进行比较
而不是在系统的App中进行比较
以上就这些有请史蒂芬上台
说说使用ODR的最佳范例
谢谢你 托尼
好的 现在我们对ODR有了整体的了解
我们知道它是什么并观看了如何使用它
现在来说说我们如何建立最佳ODR app
现在开始对资料做标签之前
首先需要考虑你的app的反应
因为这将告诉你对资料做标签需做到哪种程度
关于你可能如何使用ODR内容
这里我可以提供三种模式
第一种模式这个就像托尼的iTravel app
我们无法预测用户将去哪里
这是随机访问
在随机访问app中
特别是资料比较大的时候
你想要的内容标记了很多资料
并逐步读取
所以一旦用户做出决定
他们立即就可以在UI中
看到那个决定的部分进度
第二种模式叫做有限预测
某种程度上来说这就像开放式世界游戏
它可能是无穷种可能性
在具体时间点时它只是有限的子集
再次 你要做的是
拥有许多标签标记比少的内容
逐步读取
也需要准备好放弃那些
用户选择不看的内容
比如 就像游戏玩家在世界范围移动
他们离开一些地方一样
你需停止使用索引资料
去掉NSBundleResourceRequest对象
现在 第三种模式是已经在我例子中使用的模式
就是游戏中的等级
这是直线型进度式游戏
就像第一人称的射击游戏
在这个案例中
作为一名开发者
你最大的任务是提早预估下一步需求
但是你非常肯定
所有的内容都是必要的
所以你将只开始加载那些
在一定合理时间内可被加载的内容
好了
说到时间
这里有个插曲讲到你如何使用ODR API
所以我们给自己一个时间线
即从app开始到退出
现在 设计合理的ODR App
应该可以很好的提早预测需求资料
请记住 这是网络型app
它将必须从App Store
或我们刚检查过的其他地方下载
但这需要花些时间
因此 在需要使用资料的时候
且当调出beginAccessing Resources
如果还未安装到设备上
那么会自动开始下载
当前 这是善用网络资源
和解决资料尚未准备就绪
就需要使用的最佳办法
而且 在这种情况下你可以通过进度属性
和NS BundleResource Request
加快托尼之前提到的进度UI
分享一下屏幕同时让下载继续进行
这时候 已经完成下载了
资料已经准备就绪
你可以关闭下载界面
然后开始使用资料了
一旦资料使用完毕
你们绝对会想要调出endAccessingResources
或者允许NS BundleResource Request对象解除分配
以便让系统知道你已经使用完毕
另外 这不代表我们会关闭服务并删除记录
我们只是在这里提醒大家而已
因此这是需要清楚的基本时间线
并且你们还可以同时发出多个请求
只需要记得本部分的基本内容即可
好的
现在
我已经谈了ODR
如何通过改善其安装体验而提高用户体验
因此 具体怎么完成呢？
我们需要大家的帮助
作为开发者
你们需要做的是考虑用户
在登录到app后所需要的资料
当你们了解是什么之后比如游戏Level 1
已经准备就绪
然后你们需要设置资料标签
并放到Xcode的初始安装标签UI
这会通知ODR系统去确认
所有资料的标签...
在app被...
完全安装好之前
可以被下载
这样 当显示完全安装好之后
用户点击标签后就准备就绪了
这时候准备开玩了
在App Store看到的App的大小
是 .app大小
以及初始ODR内容的大小之和
因此 需要明白这点
此外 我们将在之后会谈谈这点
好的那么 现在我们可以谈谈
自动化安装app和ODR内容
但此时用户还未实际登录
因为你们也可以自动设定这段时间
可以这么做以确保游戏的Level 2
或者教程之类可以开始下载
也许某些用户想要看看教程
其他人不会想看
因此你应当确保app即使没有教程
也能够实际运行教程
但是最好还是确保有教程
为了这么做
你们还可以使用Xcode的资料标签UI
然后将标签放进预取标签命令部分
在你放到该部分的命令顺序
是实际上下载这些标签的顺序
好的
现在谈谈缓存
我们之前提到缓存
而且还展示了系统是
如何为新等级腾出Level 1的空间
首先 需要了解的是我们会清理内容
但只在系统内存占用度不高的情况进行
另外 也只有ODR内容会被清理
当我们这么做的时候
这里有几个属性会发挥作用
通知我们是否要
删除哪个资料包
很明显
是删除上次使用的那个资料包
因此 如果...
玩游戏Level 1的时候是上周周二
那么 很可能会在前一天完成Level 1的时候就被删除
另外 正如托尼之提到的保留优先权
这指的是对标签设置的优先级
因此 这是你自己的排序我们也会加以考虑
最后 我们会考虑app的运行状态
我们不会在资料包正在使用的情况下
删除运行中的app的任何资料包
现在有几种策略
用于保留ODR内容
其中之一是避免过度清理
什么意思呢？
我可以举个例子
比如说系统需要100 MB空间
那么系统在进行整机搜索
然而没有找到够大的空间
通过我们刚提及的属性
系统会定位到你的资料包
容量为512 MB
我需要清理资料包
以符合空间要求
因此 我们需要过度清理412MB
所以你的资料包体积最好是小一点
正如我刚提及的 这也有好处
因为想要快点下载好而且享用内容
因此体积越小就越好
但是体积越小就越不容易被过度清理
好的
另一件你们可能想做的是
对任何事设置1.0的优先权
但这么做并无卵用
这么做只会让系统认为
更多的资料重要性是相等的
特别是当系统在对app进行清理的情况下
因此 需要谨慎使用优先权设置
最后请再次确认
因为当你做完标注我们会看
上次endAccessingResources的使用日期
确认允许NS BundleResource Request对象
尽快解除分配
这会让系统知道你将如何使用该资料
这样系统会给出最佳决策
好的现在 我想开始谈谈
性能方面的事情
其中之一是我们在本次会议想做的事
是鼓励大家提前在后台下载内容
但是我们不想要让大家
浪费更太多的系统资源
超过app所能容纳的资源
因此 我们平衡了下载速度 资源
CPU和其他属性
这样我们只有在下载和使用资料包的时候
才会消耗系统资源
这是预设情况
但如果有需要或者想要自行进行管理
或者想要完全手动操作
那么你可以在这里设置紧急优先
系统会忽略平衡设置
我们将会以最快速度下载内容
正如托尼提到的当你提供载入画面时
那时候就是设置的好时机
但实际上你的App可能与CPU不兼容
与我们在系统这样操作情况一样
因此 这完全取决于你
而且
我们应该讨论性能测试
你需要为ODR的App做现世测试
ODR App是一个基于网络的App
因此当你使用USB将你的设备
连接到你的MacBook Pro
并运行Xcode
那不是真实的场景
真是太快了
所以你要做的是
使用TestFlight或Xcode服务器来测试你的App
然后使用Developer ToolsNetwork Link Conditioner
来测试各种网络条件
你的App在ODR内容下载时
可能会出问题
事实上我建议你在任何网络App上
使用这个工具
真的很好用
如果之前你还没有使用过它
那我现在做个简短说明
当你把你的...
设备通过USB连接到
MacBook Pro上运行Xcode时
然后设置设备时候会看到这个条目
一个开发者条目
你点击后会看到大量的
开发者设置您可以使用日志等等
中间有NetworkLink Conditioner
点击你看到的选项
您可以看到
你可以用来造成App断网时的
各种情况的... 各选择
要用它 启用NetworkLink Conditioner
然后决定你想要创建什么类型的情况
也许你想模仿100%的无网络状态
或非常缓慢的网络
或者高延时DNS查找
或者你只是想重创非常糟糕的网络
这便是使用ODR App的最佳工具
好的
说到网络问题
你可能会遇到几个网络错误
其中一个
没有网络
如果你的App需要ODR内容却没有网络
那么你需要准备好处理这种情况
您可能遇到的另一个问题是资源不可用
这基本上意味着我们认为ODR的内容
在一个特定的位置然而不是那么回事儿
一般的原因 例如在公司内部
建立自己的服务器并有人管理
移动服务器文件等
但是还没准备好让用户使用App
所以要随时准备应对错误发生
另一类错误可能会遇到
就是存储空间有关的问题
所以ODR在任何时候
将允许你有最大的2G的应用空间
这意味着你的App正在运行的时候
你已经调用标签2G的
beginAccessingResources
用完后却没调用endAccessingResources
你不允许NS BundleResource Request
进行终止处理
所以占用2G空间
然后你又去启动另一个请求
你会再次得到一个请求错误
回叫反馈
所以要注意
当然我们可能在本地存储在设备上
遇到空间不足的情况
你就会收到通知
这可能是因为你下载太多
或者你发出该下载请求太久
所以还是需要随时准备处理这些问题
这时候你可以采取一些处理步骤
你可以停止任何
不再需要的ODR内容的Accessing Resources
另外 你可以看看本地设备上储存的是什么资料
也许是一些缓冲数据
或者一些已不在需要用到的文件
你可以清理一下并进行删除
那么 现在我们来谈谈蜂窝数据
再次说明ODR App是一款网络型应用
因此需要使用到蜂窝数据开关
用于控制其他App的网络连接
因此 如果关闭开关
那么就不能获取到ODR文件
如果开启开关并且你正在下载ODR内容
那么通过蜂窝数据下载的任何数据
将算是该App产生网络数据
因此 我们鼓励大家一定确保
什么是所需的 什么是不再需要的
我们不希望用户产生高额的网络费用
最后
100MB的蜂窝下载限制
仍适用于ODR App 
因此 要确认.app本身
和初始ODR的数据
是否超过App Store的App体积限制
如果超过100 MB
那么你的App不会通过蜂窝数据下载
正如一般的App超过100 MB的话
就不会通过蜂窝数据下载一样
因此
需要注意App的大小
最后 正如前面所说
你们还需要注意一些重要的统计数据
首先
虽然App Store现在可以储存
超过20G的ODR App 
但是对于.app而言...
只有最高2g的空间
那么 你的.app本身如何呢？
请记得当我们分解.app中的资料时
我们分解的资料包那么.app本身呢？
.app最高可以有2G
剩下的ODR内容可以有20G
另外 初始ODR和预取ODR内容最高也是2G
该内容是我们在Xcode的UI中设置的
用于在App安装过程中和后续过程中下载数据
你最高可以有2GB
合起来 2GB
正如我刚刚所说
只能在同一时间使用最高2G
最后 给定的资料包
最高可以有512MB
因此 如果使用一个标签标记一堆资料
且提及超过512M那么Xcode将发出警告
但是Xcode会允许你继续开发App或者游戏
但是当你提交到App Store之时
会收到提交失败的错误信息并解释原因
好的 总结一下On Demand Resources
是一款动态加载内容系统
服务器在App Store之中
这样可以允许app...
在安装期间自动和在有要求提出下下载其内容
你可以对下载内容设置优先级
我们有了智能缓冲机制
因此当我们等级提升后会为后面的级别腾出空间
在App Store有20G的空间供你使用
因此 如果想知道更多信息我们有关于ODR一份新文件
还有简单的代码
以及开发者论坛可为你答疑解惑
如果你仍有疑问
你可以联系我们的App Frameworks专员
如果你错过了
关于ODR大会等其他技术的大会
你可以到开发者网站去观看视频
接下来
会有一场托尼在星期五所说的关于ODR进程
和实验的大会时间是明天11点到1点30
托尼和我以及ODR工程组将出席会议
回答你们的任何疑问
帮助你们开始使用ODR内容
并听取大家的建议
非常感谢