00:00:20.954 --> 00:00:24.625 
Core Location中有什麼新料

00:00:32.633 --> 00:00:35.836 
下午好 歡迎參加“Core
 Location中有什麼新料”

00:00:36.703 --> 00:00:39.273 
我的名字是亞當·德里斯科爾
我是Core Location

00:00:39.339 --> 00:00:40.407 
框架團隊的一名工程師

00:00:41.108 --> 00:00:43.343 
今天我很高興爲你們呈現這次會議

00:00:43.410 --> 00:00:44.978 
這是因爲現在事情越來越複雜了

00:00:45.045 --> 00:00:48.916 
正如你所知道的我們現在有了
Apple Watch和iPhone

00:00:50.184 --> 00:00:53.020 
因此我們認爲我們應該重點關注簡化

00:00:53.086 --> 00:00:54.855 
我們怎樣才能簡化你們的任務

00:00:54.922 --> 00:00:57.057 
今天我們想給你們準備了一些好東西

00:00:59.126 --> 00:01:01.995 
你們中可能有人是第一次接觸到
Core Location這個框架

00:01:02.062 --> 00:01:05.699 
我想我要先來給你們一個概述
看看我們做的事

00:01:06.366 --> 00:01:07.734 
看看我們的一系列API

00:01:08.535 --> 00:01:12.539 
用戶也就是購買
你們的apps的人瞭解

00:01:12.606 --> 00:01:16.143 
Core Location
決定你們能否使用它的也正是用戶

00:01:16.910 --> 00:01:19.112 
你不能冒險訪問他們的位置

00:01:19.179 --> 00:01:22.482 
你需要請求權限 我們也有API
可以讓你請求權限

00:01:24.751 --> 00:01:27.621 
之後我們還有“生活必需品”
也就是位置更新信息

00:01:27.721 --> 00:01:32.292 
你用來獲取用戶當前的位置的
就是API的這一部分

00:01:33.627 --> 00:01:37.531 
自從iOS 8開始我們引入了
室內獲取地址的能力

00:01:37.598 --> 00:01:41.668 
這裏的室內可以是像機場
購物中心這樣的大型場所

00:01:43.937 --> 00:01:47.574 
並且我們還有統稱爲監視APIs

00:01:47.975 --> 00:01:52.646 
這些APIs可以允許你指定一件
你感興趣的事件

00:01:52.713 --> 00:01:55.182 
這樣當這個事件發生時
即使你的應用程序沒有處於

00:01:55.249 --> 00:01:58.452 
運行狀態也可以運行起來
以便獲取相關的信息

00:01:59.520 --> 00:02:01.688 
第一個API是一個區域監視

00:02:01.755 --> 00:02:03.957 
這個API允許你指定一個
地理區域或者指定一個

00:02:04.124 --> 00:02:08.595 
基於iBeacon的區域
這樣當用戶進入或者離開

00:02:08.662 --> 00:02:10.631 
那個區域時你的
應用程序就可以後臺啓動

00:02:11.932 --> 00:02:16.170 
我們還有訪問監視這是一種互補技術

00:02:16.236 --> 00:02:20.274 
這個API可以允許你指定當用戶到達
或者離開某個位置時通知到你

00:02:20.741 --> 00:02:26.346 
而你無需提前知道這個位置是什麼

00:02:26.647 --> 00:02:30.050 
它可以提醒多種類型的事項
如果訪問監視設爲

00:02:30.150 --> 00:02:34.354 
日誌類型的事項時那麼當我
靠近一個商店時就會提醒我買牛奶

00:02:34.421 --> 00:02:36.557 
我想知道我今天都去了
哪些地方做了哪些事情

00:02:38.091 --> 00:02:42.796 
我們還有其他APIs、
位置、地理編碼

00:02:42.863 --> 00:02:46.433 
我今天就不展開講了

00:02:47.467 --> 00:02:51.271 
我們也對許多這些區域API做了改進

00:02:52.105 --> 00:02:55.475 
不過我想專門提一提室內位置

00:02:55.542 --> 00:02:57.544 
室內位置更精確了

00:02:58.111 --> 00:03:00.013 
檢測樓層的變化也更快了

00:03:00.380 --> 00:03:03.984 
最重要的是示例也被重寫了

00:03:04.051 --> 00:03:06.553 
使用了MapKit因此就更簡便了

00:03:07.054 --> 00:03:09.156 
如果你認爲這個與你的用戶有關係

00:03:09.223 --> 00:03:12.192 
那就去看看吧
對你來說把它用起來應該是很容易的

00:03:13.794 --> 00:03:17.831 
我們會把會議的大部分時間
用來談論其中的兩點

00:03:18.465 --> 00:03:21.134 
即授權以及位置更新

00:03:22.069 --> 00:03:25.739 
具體來說我們今天會分成四部分來講

00:03:25.839 --> 00:03:27.941 
第一部分是後臺位置

00:03:28.375 --> 00:03:31.011 
你可以用我們的API的
這一部分來記錄

00:03:31.411 --> 00:03:32.346 
用戶到過的位置

00:03:32.412 --> 00:03:35.482 
你可能開發了一款
跑步追蹤app你的用戶想要

00:03:35.549 --> 00:03:38.085 
得到一張他們的軌跡地圖
或者是一款導航app

00:03:38.151 --> 00:03:39.920 
你想通過開啓方向給他們指路

00:03:41.488 --> 00:03:45.959 
針對其它的位置使用案例
我們有了一些新的API

00:03:46.026 --> 00:03:48.228 
你只需要知道用戶當前的位置即可

00:03:48.295 --> 00:03:50.831 
你不想有繪圖能力
但是卻希望用他們的當前

00:03:50.898 --> 00:03:52.999 
位置信息告訴他們最近的商店在哪裏

00:03:53.166 --> 00:03:54.001 
諸如此類的事情

00:03:55.469 --> 00:03:58.372 
然後我們要講講授權
講講授權在OS 8上的變更

00:03:58.438 --> 00:04:02.142 
講一講現在有了Apple
Watch它又該怎麼用

00:04:03.177 --> 00:04:06.079 
最後我們會深入講一講針對
Apple Watch的最佳實踐的

00:04:06.146 --> 00:04:09.516 
具體細節希望如果你開始用的話
能給你提供諸多幫助

00:04:11.785 --> 00:04:13.787 
好 背景位置更新

00:04:14.087 --> 00:04:16.055 
我們決定不要了

00:04:16.390 --> 00:04:18.024 
開個玩笑

00:04:18.392 --> 00:04:20.961 
在iOS 2或者3上
幻燈片看起來是這樣的

00:04:21.028 --> 00:04:25.032 
如果你是iOS 2或者3的用戶
那麼你就記得當你在跑步時

00:04:25.098 --> 00:04:28.602 
如果你想獲得一張軌跡地圖你必須讓
手機在你的口袋內處於激活解鎖狀態

00:04:29.169 --> 00:04:31.805 
自從iOS 4開始藉助於我們稱之爲

00:04:31.872 --> 00:04:36.777 
“後臺方式”的操作方式
我們對此做了很大的改進

00:04:36.910 --> 00:04:40.247 
你的應用程序默認仍然是僅在前臺運行

00:04:40.480 --> 00:04:45.018 
不過現在你可以在Xcode中
使用這個便利的功能標籤

00:04:45.485 --> 00:04:48.188 
說你想在後臺保持保持活躍狀態

00:04:48.422 --> 00:04:52.426 
不被掛起以便於接受位置更新信息

00:04:53.694 --> 00:05:00.534 
然後它會在你的信息plist中
設置一個數值鍵

00:05:01.134 --> 00:05:03.136 
靜態用於整個app
這個鍵就是UI後臺方式

00:05:04.571 --> 00:05:06.740 
那麼之後會發生什麼呢？

00:05:06.807 --> 00:05:08.408 
我們稍後會來看一個視頻

00:05:09.376 --> 00:05:10.777 
不過在那之前讓我們看看...

00:05:10.844 --> 00:05:12.913 
讓我來列出視頻中需要留意的地方

00:05:13.347 --> 00:05:19.052 
它可以允許你...當用戶使用
你的應用程序時啓動位置更新

00:05:20.020 --> 00:05:21.989 
然後假如說用戶感到無聊了

00:05:22.055 --> 00:05:25.926 
他們又去查看了郵箱
他們的音樂一個小的演示

00:05:25.993 --> 00:05:28.395 
也許他們會盯着主屏幕盯上一陣

00:05:28.896 --> 00:05:31.765 
但是在此期間你還是
可以訪問用戶的位置

00:05:33.267 --> 00:05:35.802 
之後用戶重新啓動了你的app

00:05:35.869 --> 00:05:40.040 
你就可以停止會話
停止訪問他們的位置

00:05:40.107 --> 00:05:43.410 
這樣就可以避免因爲使用GPS
而損耗他們的電量

00:05:44.044 --> 00:05:46.180 
視頻來了

00:05:47.714 --> 00:05:48.882 
用戶啓動了我們的app

00:05:49.449 --> 00:05:51.451 
中間那裏有一個按鈕表明他們希望我們

00:05:51.518 --> 00:05:53.320 
開始記錄位置那我們就開始了

00:05:53.854 --> 00:05:57.624 
看視力表注意看正在計算數字

00:05:58.725 --> 00:05:59.826 
他們去過哪裏

00:06:00.027 --> 00:06:01.595 
用戶把我們的app切換到了後臺

00:06:04.565 --> 00:06:07.801 
你可以看到現在頂部那裏
就是我們稱爲藍條的東西

00:06:08.001 --> 00:06:10.938 
藍條表明我們的示例app
現在仍然處於運行中

00:06:11.104 --> 00:06:13.440 
這樣用戶就可以通過點擊
這個藍條返回app

00:06:13.574 --> 00:06:14.708 
用戶剛剛點了藍條

00:06:15.142 --> 00:06:17.578 
注意看視力表中的數字變大了

00:06:18.579 --> 00:06:20.647 
當然在視力表中還不算大

00:06:21.715 --> 00:06:24.017 
這就表明我們持續
接收到了位置更新信息

00:06:24.084 --> 00:06:25.953 
這是統計了我們接收到的位置更新信息

00:06:26.053 --> 00:06:27.788 
我們持續在後臺接收到了位置更新信息

00:06:28.222 --> 00:06:32.192 
用戶要求我們停下來
那我們就返回到起點

00:06:34.361 --> 00:06:36.797 
App開發者已經用這個打造了

00:06:36.864 --> 00:06:38.599 
很多很棒的體驗

00:06:39.933 --> 00:06:42.636 
然後我們在想我們能否
再做些什麼來對它進行優化

00:06:42.703 --> 00:06:44.438 
這裏是否還有優化的空間？

00:06:45.806 --> 00:06:48.542 
在簡化這個主題下你可以看到

00:06:50.511 --> 00:06:54.281 
一旦用戶在你的應用程序中
選擇了這項功能

00:06:54.581 --> 00:06:57.551 
那麼它就有了一項責任
因爲如果你持續在後臺運行

00:06:57.618 --> 00:07:00.988 
用戶就可能不知道這個還在運行

00:07:01.054 --> 00:07:05.058 
那麼如果出現一個bug
或者在你的UI中發生一個

00:07:05.125 --> 00:07:09.429 
極端狀況那麼你就會在用戶沒有
意識到的情況下用去大量的電量

00:07:10.764 --> 00:07:13.634 
我們認爲這個風險很高
我們想要降低風險

00:07:13.700 --> 00:07:19.072 
這樣一個bug或者一個意料
之外的狀況的後果也可以降低

00:07:20.307 --> 00:07:23.076 
你現在需要立即做的一件事
我們想要改進的一件事

00:07:23.143 --> 00:07:25.846 
就是當你的app
進入或者退出前臺的時候

00:07:25.946 --> 00:07:30.484 
你必須與你的app經歷的轉移

00:07:30.851 --> 00:07:32.019 
進行緊密的耦合

00:07:32.085 --> 00:07:35.889 
一旦你選擇開始運行
並且在後臺使用用戶的位置時

00:07:36.290 --> 00:07:39.159 
你必須告訴我們你不想去後臺

00:07:40.127 --> 00:07:44.464 
也只有在這之後你纔會進到後臺中

00:07:44.531 --> 00:07:47.568 
然後就到了我們在視頻這裏
看到的這個視圖

00:07:48.702 --> 00:07:50.971 
你在你的app中
可能已經看過這個視圖了

00:07:51.738 --> 00:07:55.075 
我們對示例做了修改在委託回調中

00:07:55.142 --> 00:07:57.277 
停用了位置更新以便表明

00:07:58.045 --> 00:08:01.648 
它進到了後臺中
藍條一閃而過然後消失了

00:08:03.283 --> 00:08:05.352 
這可能會讓用戶感到困惑

00:08:05.419 --> 00:08:07.921 
你可以注意到這裏的統一特徵是

00:08:08.422 --> 00:08:12.125 
你註冊要求能夠以一種
連續的方式在後臺校驗

00:08:12.192 --> 00:08:16.830 
訪問用戶的位置但是這個卻是以一種

00:08:16.897 --> 00:08:19.499 
全權委託的方式
爲你的整個app永久實現的。

00:08:19.766 --> 00:08:22.402 
實際上你也僅僅希望在特定時候這麼做

00:08:22.469 --> 00:08:25.105 
僅僅當用戶在後臺積極
使用你的app時這麼做

00:08:26.373 --> 00:08:30.644 
自從iOS 9開始我們就有了一個
新的API可以幫你進行表達

00:08:31.144 --> 00:08:33.246 
這個API叫做“允許後臺位置更新”

00:08:33.313 --> 00:08:36.549 
這是一項你可以在你的
位置管理器中設置的屬性

00:08:36.950 --> 00:08:39.152 
如果你有多個位置管理器
那麼在適當的時候

00:08:39.419 --> 00:08:41.788 
你就得分別對它們進行設置

00:08:42.722 --> 00:08:45.092 
你可以設置不同的
位置管理器爲不同的值

00:08:45.726 --> 00:08:46.727 
設置好後起什麼作用？

00:08:46.793 --> 00:08:48.795 
如果你把這個屬性設置爲“是”

00:08:49.296 --> 00:08:52.332 
那麼你就選擇了
在你的信息plist中

00:08:52.399 --> 00:08:54.968 
你請求的那種行爲

00:08:55.469 --> 00:08:58.038 
如果你說你想要
繼續在後臺運行這種權限

00:08:58.505 --> 00:09:01.074 
你把這個設置爲“是”
然後啓動了位置更新

00:09:01.208 --> 00:09:05.012 
那麼你就會保持在後臺運行
並接受那些位置更新

00:09:05.612 --> 00:09:08.549 
而如果你把它設置爲“否”
你就不會在後臺繼續運行

00:09:10.450 --> 00:09:12.920 
好的 那麼關鍵的問題來了
默認值是什麼？

00:09:13.053 --> 00:09:15.222 
設置時我們怎樣才能知道？

00:09:15.856 --> 00:09:17.090 
默認值是“否”

00:09:17.925 --> 00:09:19.293 
我想再說一遍

00:09:19.760 --> 00:09:21.061 
這裏的默認值是“否”

00:09:21.128 --> 00:09:24.264 
如果你的應用程序需要後臺運行

00:09:24.331 --> 00:09:27.768 
以便記錄位置軌跡或者以便進行導航

00:09:28.202 --> 00:09:30.771 
那麼當你採用iOS 9時
你就必須進行變更才行

00:09:31.338 --> 00:09:33.607 
你必須到app中
看看用戶是否同意你做這個

00:09:34.174 --> 00:09:37.978 
看看用戶是否真的想讓你
在後臺記錄一個會話

00:09:38.545 --> 00:09:40.914 
然後在那裏把這項屬性設置爲“是”

00:09:41.582 --> 00:09:43.650 
當用戶停止後把它設置回“否”

00:09:45.219 --> 00:09:47.554 
一旦你設置好後你就無需擔心出現

00:09:47.621 --> 00:09:51.258 
直接案例時如何從前臺過度到後臺

00:09:51.325 --> 00:09:53.961 
這樣當你被切換到後臺時
你就無需急匆匆關掉

00:09:54.027 --> 00:09:56.330 
位置更新因爲那時你已經配置成了

00:09:56.396 --> 00:09:58.198 
繼續後臺運行或者停止後臺運行

00:10:00.601 --> 00:10:03.270 
好 因此如果你的app使用了
後臺位置更新

00:10:03.370 --> 00:10:05.339 
那麼你就必須進行變更

00:10:05.405 --> 00:10:06.640 
兼容性怎麼樣呢？

00:10:06.707 --> 00:10:09.076 
App Store中的app
會被中斷麼?

00:10:09.877 --> 00:10:13.480 
不會App Store中的app都
不受新規定的約束

00:10:13.914 --> 00:10:17.217 
但是當你採用iOS 9 SDK時
你還是需要儘快完成變更

00:10:19.253 --> 00:10:24.625 
如果你想支持那些不是最新最棒的
iOS上面的用戶又該怎麼辦？

00:10:25.425 --> 00:10:27.127 
他們可能仍然在運行iOS 8

00:10:28.195 --> 00:10:29.930 
對此你可以按標準方式處理

00:10:29.997 --> 00:10:34.301 
在你的app上設置一個最低部署
目標然後運行時進行校驗

00:10:34.368 --> 00:10:35.903 
對選擇器做出響應，

00:10:35.969 --> 00:10:37.638 
看看你當前運行時遵循的位置管理器

00:10:38.238 --> 00:10:40.541 
是否有這項屬性

00:10:41.675 --> 00:10:43.844 
在Objective-C中
看起來是這個樣子

00:10:43.911 --> 00:10:45.445 
Swift中對選擇器做出響應

00:10:45.512 --> 00:10:48.048 
我們在Swift中
有了一個新的高檔屬性

00:10:48.115 --> 00:10:49.650 
可以對此做出響應

00:10:50.717 --> 00:10:53.320 
如果運行時你的位置管理器懂得

00:10:53.387 --> 00:10:56.323 
與這項屬性相關的知識
你可以把它設置爲“是”

00:10:56.757 --> 00:10:58.892 
否則你就可以假定
它已經設置成了“是”

00:10:58.992 --> 00:10:59.860 
你無需再設置它了

00:11:00.294 --> 00:11:02.496 
壞消息是這也意味着
你無法把它設置爲“否”

00:11:02.563 --> 00:11:03.463 
以便獲取額外的保護

00:11:06.133 --> 00:11:09.436 
好 再簡單講講側邊欄
因爲我知道你們中的很多人

00:11:09.536 --> 00:11:13.574 
都對這種帶有聽覺提示的
後臺位置更新感興趣

00:11:13.974 --> 00:11:18.278 
當用戶把他們的手機放在 
臂環上或者放置在他們的儀錶板上時

00:11:18.579 --> 00:11:22.316 
，
這或許是與他們進行溝通的首選方式

00:11:25.085 --> 00:11:29.156 
自從 iOS 9開始core 
audio團隊就引入了這個新的

00:11:29.223 --> 00:11:30.724 
長文件名的選項

00:11:31.225 --> 00:11:34.361 
它的作用就是你可以使用
這個選項來表明

00:11:34.428 --> 00:11:35.929 
你即將進行語音輸出

00:11:36.296 --> 00:11:40.234 
這樣系統就可以把你和用戶
可能有的其它輸出混合起來

00:11:40.601 --> 00:11:44.171 
這樣不會把你混淆起來
但是可以把你和音樂混合起來

00:11:45.405 --> 00:11:47.508 
請去看看“Core 
Audio中有什麼新料”

00:11:47.875 --> 00:11:51.411 
就是昨天舉行的
如果適合你的話請去看看

00:11:53.447 --> 00:11:54.748 
後臺位置

00:11:55.749 --> 00:11:58.418 
如果你不需要持續訪問用戶的位置時

00:11:58.485 --> 00:12:00.821 
那麼，又該怎麼辦呢？

00:12:01.121 --> 00:12:02.422 
你不是想爲他們繪製一幅地圖

00:12:02.990 --> 00:12:05.792 
你只是想要告訴他們
他們當前所處的位置

00:12:06.960 --> 00:12:10.831 
自從iOS 9開始
我們就爲此引入了一項新的方法

00:12:10.898 --> 00:12:12.132 
叫做“請求位置”

00:12:12.900 --> 00:12:16.303 
從根本上說
它就是把你過去爲了實現

00:12:16.370 --> 00:12:19.439 
這個目標需要完成的過程給自動化了

00:12:19.873 --> 00:12:22.042 
如果你接觸過
Core Location

00:12:22.109 --> 00:12:23.677 
那麼你可能已經知道了規矩

00:12:24.111 --> 00:12:25.345 
你開始更新位置了

00:12:25.913 --> 00:12:28.749 
你看到那些更新信息
進到你的委託中來了

00:12:29.616 --> 00:12:32.352 
你可以注意到這些信息
一開始進來的很快

00:12:32.419 --> 00:12:33.687 
但是精度卻不是最高

00:12:34.021 --> 00:12:35.923 
那麼你就需要密切關注精確度等級了

00:12:35.989 --> 00:12:39.159 
弄明確什麼時候精度足夠了
什麼時候沒有獲取更高的

00:12:39.526 --> 00:12:41.962 
精度的空間了
在繼續等待和獲得收斂精度

00:12:42.029 --> 00:12:45.399 
並使用那個精度的位置之間
進行正確的權衡獲得了位置後

00:12:45.465 --> 00:12:47.668 
不要忘記停掉位置更新

00:12:48.969 --> 00:12:51.171 
我們會自動替你停掉位置更新

00:12:51.371 --> 00:12:52.673 
當你調用請求位置時

00:12:53.040 --> 00:12:55.742 
我們會開始自動獲取位置更新

00:12:55.809 --> 00:12:57.878 
但是我們不會把它們給到
你的委託回調中

00:12:58.145 --> 00:13:02.783 
我們會根據你要求的精度
在內部取得它們的閾值

00:13:03.250 --> 00:13:06.653 
然後我們會用你需要的位置信息
回調一次你的委託

00:13:07.087 --> 00:13:10.357 
它會使用你的邏輯確定最佳位置是什麼

00:13:10.924 --> 00:13:13.794 
在那個時候我們會自動爲你停掉

00:13:13.861 --> 00:13:15.896 
位置更新這樣你就沒用忘掉停掉它

00:13:16.797 --> 00:13:18.298 
或者在那裏出現bug的風險

00:13:20.167 --> 00:13:21.001 
好的 那麼...

00:13:25.873 --> 00:13:28.141 
我對它的工作原理
對如何解釋我們在幕後

00:13:28.208 --> 00:13:30.777 
所做的事有了一個較爲直觀的瞭解

00:13:31.044 --> 00:13:33.113 
你不能通過使用這個API來生成它

00:13:33.180 --> 00:13:35.282 
別忘了我們僅僅給了你一次委託回調

00:13:35.816 --> 00:13:37.751 
來看看它是什麼樣的

00:13:38.385 --> 00:13:41.688 
那個響鈴表示的是
你設置的期望的精確度

00:13:42.289 --> 00:13:44.458 
你可以把它當成一個直徑來看

00:13:44.558 --> 00:13:47.995 
你想要的固定精度應該比這個更嚴格

00:13:49.062 --> 00:13:52.933 
當更新信息進來時
我們要在地圖頂部這裏用曲線圖來表示

00:13:53.267 --> 00:13:55.302 
現在你可以看到某個
位置的中心是用一個

00:13:55.369 --> 00:13:57.070 
看起來像是地圖的黑色圓圈來表示

00:13:57.404 --> 00:13:59.640 
精確度等級是用一個大直徑半透明的圓

00:13:59.706 --> 00:14:03.010 
來表示我們馬上就可以看到

00:14:03.310 --> 00:14:05.512 
注意看隨時間而發生的變化

00:14:06.680 --> 00:14:09.716 
第一個位置很快進來了
但是精確度不敢恭維

00:14:10.417 --> 00:14:11.852 
隨時間推移越來越精確了

00:14:12.219 --> 00:14:16.557 
當精確度等級足夠高時
我們就會接受這個精確度

00:14:16.690 --> 00:14:18.892 
給到你的委託回調的就是這個位置

00:14:21.161 --> 00:14:23.697 
好 我之前已經提到過
這個是可以配置的

00:14:23.931 --> 00:14:26.066 
可以配置你期望的精確度

00:14:26.366 --> 00:14:27.634 
那麼該怎麼設置呢？

00:14:27.768 --> 00:14:30.404 
好消息是我們已經在
位置管理器上有了一項叫做

00:14:30.470 --> 00:14:31.872 
“期望精確度”的屬性

00:14:32.439 --> 00:14:33.640 
你可能已經熟悉了這項屬性

00:14:33.707 --> 00:14:36.777 
你可以用它來控制開始更新位置時

00:14:36.844 --> 00:14:38.779 
你期望的精確度是什麼類型的

00:14:39.279 --> 00:14:41.348 
它也同樣適用於請求位置

00:14:41.982 --> 00:14:44.117 
讓我們略微調低下

00:14:44.184 --> 00:14:46.653 
把它縮小精確度更高

00:14:47.621 --> 00:14:49.823 
現在可能又太高了

00:14:49.890 --> 00:14:51.825 
我們重新運行下模擬器
看看會發生什麼

00:14:53.694 --> 00:14:56.230 
第一個位置我們可以看到繼續在收斂

00:14:56.997 --> 00:14:58.765 
有時候你的收斂會出現迴歸

00:14:59.199 --> 00:15:03.370 
不過整體趨勢是收窄直到
你達到某種平衡點

00:15:04.238 --> 00:15:08.809 
在這一點注意看我們尚未真正滿足

00:15:09.009 --> 00:15:10.077 
精度標準

00:15:10.143 --> 00:15:12.045 
我們的精度沒法再繼續提高了

00:15:12.846 --> 00:15:15.782 
那麼此時我們就會把這個返回
你的委託回調中

00:15:16.750 --> 00:15:20.921 
這就意味着當你在你的請求位置中
設置了一個期望的精確度時

00:15:20.988 --> 00:15:23.891 
你得到的位置的精確度可能會更高

00:15:23.991 --> 00:15:25.792 
對於精確度來說是一個更小的值

00:15:26.260 --> 00:15:29.162 
或者視我們獲取的方式不同
精確度也可能更低

00:15:29.229 --> 00:15:30.764 
你可能運氣好遇到了第一種情況

00:15:31.098 --> 00:15:34.201 
也可能出現了第二種情況
遇到了具有挑戰性的情況

00:15:35.469 --> 00:15:39.840 
它們是在這個委託回調上發送給你的

00:15:40.073 --> 00:15:42.776 
位置管理器的位置管理器會
對位置進行更新

00:15:43.210 --> 00:15:45.646 
記住最後一個參數是一個陣列

00:15:45.879 --> 00:15:47.214 
我們只會給你一個位置

00:15:47.447 --> 00:15:49.016 
因此它就是陣列中的零元素

00:15:50.417 --> 00:15:53.120 
另一方面如果用戶做了
任何他們想做的事

00:15:53.187 --> 00:15:55.856 
如果你請求位置的環境

00:15:55.956 --> 00:15:57.858 
是我們沒法建立用戶位置的環境

00:15:57.925 --> 00:16:00.861 
可能是在煤礦底部
我們就會在位置管理器上

00:16:00.928 --> 00:16:03.063 
回調失敗錯誤

00:16:03.730 --> 00:16:04.898 
因此我們向你保證

00:16:04.965 --> 00:16:08.468 
只要你不中斷請求位置你一定會得到

00:16:08.535 --> 00:16:09.970 
這兩種回調中的一種

00:16:10.204 --> 00:16:12.072 
這樣如果你願意的話你就可以斷開

00:16:12.272 --> 00:16:13.240 
某些應用程序邏輯

00:16:14.708 --> 00:16:19.813 
你從錯誤回調中得到的錯誤是
“KCL錯誤位置未知”

00:16:20.848 --> 00:16:23.917 
請求位置時還有兩件事要記住

00:16:24.518 --> 00:16:27.354 
第一件事是開始更新位置是
和它互相排斥的

00:16:27.821 --> 00:16:29.790 
因爲我們使用的是相同的委託回調

00:16:30.791 --> 00:16:33.760 
如果你已經有了一個
開始更新會話已經開始了

00:16:33.827 --> 00:16:37.097 
並且沒有停掉那麼
請求位置就會被忽略掉

00:16:38.565 --> 00:16:40.934 
另一方面如果你有一個活躍的請求位置

00:16:41.001 --> 00:16:43.403 
但是我們仍在收斂
我們尚未爲你選定一個位置

00:16:43.871 --> 00:16:47.207 
而你又調用了開始更新
那麼它就會接管過去

00:16:47.274 --> 00:16:49.443 
請求就會被取消

00:16:49.543 --> 00:16:52.045 
你也就會開始向委託回調發送定期更新

00:16:52.679 --> 00:16:55.249 
互相排斥 你一次只能有一個

00:16:55.349 --> 00:16:58.051 
開始有效地更新位置享有優先權

00:16:58.652 --> 00:17:01.121 
此外就是你可以使用停止更新位置

00:17:01.522 --> 00:17:03.056 
來取消一個請求

00:17:03.557 --> 00:17:05.592 
如果用戶從你之前已經
請求了他們的位置的

00:17:05.659 --> 00:17:08.462 
地方開始導航
我們希望你停止更新位置

00:17:09.663 --> 00:17:11.698 
你對它們不再感興趣了
我們也可以省點電

00:17:12.833 --> 00:17:15.868 
很好 我們今天爲你們準備的
就是這兩個APIs

00:17:15.935 --> 00:17:17.971 
這就是我們首先要講的兩點

00:17:18.771 --> 00:17:21.108 
那麼我們現在再來談論一個

00:17:21.175 --> 00:17:22.742 
你們都非常感興趣的話題

00:17:22.809 --> 00:17:24.178 
也就是你們到這裏要看的

00:17:24.344 --> 00:17:25.811 
就是Apple Watch

00:17:27.948 --> 00:17:32.853 
關於Apple Watch
要知道的第一件事就真的離不開

00:17:32.920 --> 00:17:34.922 
Apple Watch
和iPhone

00:17:36.190 --> 00:17:38.091 
這兩種設備它們是一對的

00:17:38.659 --> 00:17:40.861 
它們彼此之間有直接的關係

00:17:41.261 --> 00:17:43.397 
我們想讓它們密切配合

00:17:44.565 --> 00:17:47.167 
以便獲得儘可能好的用戶體驗

00:17:48.001 --> 00:17:51.738 
還有一件事在某種程度上反映了
這種情況就是你把你的apps交付給

00:17:51.805 --> 00:17:52.739 
你的用戶的方式

00:17:54.041 --> 00:17:57.678 
現在你可以編寫watchOS
apps了 但是用戶並不是通過一個

00:17:57.744 --> 00:18:01.515 
watchOS App Store來得到它們的
用戶是通過現有的App Store

00:18:01.582 --> 00:18:04.084 
在他們的iPhone上得到一個包

00:18:05.385 --> 00:18:10.858 
當他們這樣做的時候
如果他們配置系統來這麼做

00:18:10.924 --> 00:18:13.927 
或者他們選擇這麼做
iOS就會把那個元件

00:18:13.994 --> 00:18:15.896 
送到Apple Watch上

00:18:17.231 --> 00:18:21.034 
你從中可以學到的就是
你的watchOS元件

00:18:21.101 --> 00:18:23.904 
和你的iPhone元件之間
同樣也有緊密的關係

00:18:24.338 --> 00:18:29.610 
對於Core Location來說
它們就是一個相同的授權身份

00:18:30.511 --> 00:18:33.514 
因此如果你有了授權
無論是什麼類型的授權

00:18:33.580 --> 00:18:35.716 
無論你處於什麼樣的狀態
它都適用於兩者

00:18:38.785 --> 00:18:40.387 
好 這是它的一個子話題

00:18:41.121 --> 00:18:43.790 
第一個授權有一些難題

00:18:43.957 --> 00:18:44.791 
我們會遇上的

00:18:45.726 --> 00:18:47.394 
第二個是協作

00:18:47.528 --> 00:18:49.830 
既然我們有了兩種設備
你的app分成了兩塊

00:18:50.697 --> 00:18:55.035 
那麼我們怎樣讓它們一起工作呢？
這裏有一些最佳實踐可以降低複雜性

00:18:57.838 --> 00:19:02.743 
好的 我們來快速小結下
確保我們在授權方面的瞭解是一致的

00:19:02.809 --> 00:19:04.244 
用戶知道他們掌控着一切

00:19:05.212 --> 00:19:10.450 
因此你需要請求訪問用戶位置的權限

00:19:10.517 --> 00:19:12.686 
要麼是通過使用中授權請求

00:19:13.153 --> 00:19:14.821 
要麼是通過始終授權請求

00:19:16.056 --> 00:19:17.391 
“使用中”和“始終”

00:19:17.457 --> 00:19:19.092 
這些都是iOS 8上的新名詞

00:19:19.526 --> 00:19:21.228 
它們是什麼意思呢？

00:19:21.295 --> 00:19:24.364 
當你使用這些不同類型的授權時

00:19:24.431 --> 00:19:27.000 
你使用位置的能力
會發生怎樣的改變呢？

00:19:27.634 --> 00:19:30.237 
希望這個表格可以幫助回答那個問題

00:19:31.238 --> 00:19:35.142 
在iOS上我們會考慮
哪個app請求了使用中授權

00:19:35.375 --> 00:19:38.712 
並且被授予了權限哪個app請求了

00:19:38.979 --> 00:19:42.115 
始終授權並且被授予了權限

00:19:42.683 --> 00:19:48.021 
先講一下當你在測試上
簽名後得到的三點東西

00:19:48.388 --> 00:19:51.058 
如果你有這些中的某種授權

00:19:51.124 --> 00:19:53.160 
並且用戶點擊了你的app

00:19:53.493 --> 00:19:54.895 
那麼你能訪問他們的位置嗎？

00:19:55.128 --> 00:19:56.196 
答案是“能”

00:19:57.464 --> 00:19:58.866 
毫無疑問你已經知道這個了

00:19:59.032 --> 00:20:01.101 
那麼我們來個稍微複雜點的例子

00:21:00.861 --> 00:21:02.896 
這個並不適用於需要
“始終”授權的apps

00:21:02.963 --> 00:21:05.132 
因此此類apps中沒有事務

00:21:05.199 --> 00:21:06.300 
用戶也沒有預期

00:21:06.600 --> 00:21:08.335 
如果你請求“始終”授權

00:21:08.402 --> 00:21:11.572 
你基本上就是在請求全權委託

00:21:11.638 --> 00:21:14.575 
當你訪問他們的位置時
用戶並不期待知道這一點

00:21:14.641 --> 00:21:16.643 
我們不會給用戶提示線索

00:21:17.644 --> 00:21:20.747 
好的 在這個例子中
我就是間歇地在後臺中調用了

00:21:20.814 --> 00:21:23.884 
此時你就是通過後臺
來訪問用戶的位置的

00:21:24.218 --> 00:21:30.090 
不過這與前臺啓動
或者與用例中已知的其它情況無關

00:21:30.357 --> 00:21:32.426 
這是一個後臺app刷新啓動

00:21:32.793 --> 00:21:35.529 
或者一個區域監視啓動

00:21:36.797 --> 00:21:38.498 
在這個例子中要訪問用戶的位置

00:21:38.565 --> 00:21:40.334 
你就需要“始終”授權

00:21:40.701 --> 00:21:41.969 
這是因爲用戶並不知道

00:21:42.336 --> 00:21:44.805 
如果期待用戶在“使用中”考慮你時

00:21:44.872 --> 00:21:47.274 
他們就不能直觀地理解當前的情況

00:21:47.841 --> 00:21:50.744 
因此如果是“使用中”授權
你就無法訪問Swift

00:21:52.679 --> 00:21:58.519 
好的  簡單再現了下監視API
就是爲了我們看到的這個

00:22:00.220 --> 00:22:02.823 
有個事實鮮爲人知即在兩個例子中

00:22:02.890 --> 00:22:04.758 
你都可以訪問監控程序API區域監視

00:22:05.359 --> 00:22:08.295 
在使用UI本地通知時
如果你是“始終”授權

00:22:08.362 --> 00:22:12.766 
或者“使用中”授權
那麼你就可以訪問它

00:22:13.066 --> 00:22:16.537 
這裏的通知包括一個觸發事件CL區域

00:22:16.970 --> 00:22:19.573 
無論你何時進入或者退出那個區域

00:22:19.640 --> 00:22:22.309 
用戶都會得到通知他們就
可以決定是否讓你通過

00:22:22.676 --> 00:22:24.077 
用戶的消息很靈通

00:22:24.244 --> 00:22:26.213 
他們可以毫無保留地知道當前的情況

00:22:28.148 --> 00:22:30.751 
那麼對於watchOS來說
又會發生什麼改變呢？

00:22:31.685 --> 00:22:34.488 
記住我們談論的僅僅是
你的app的watchOS元件

00:22:34.555 --> 00:22:37.591 
而不是iPhone app
和Watch app的複合體

00:22:37.658 --> 00:22:40.961 
那麼在Apple Watch上
你能做什麼？

00:22:42.563 --> 00:22:47.134 
當用戶在你的Watch app上
翻看時你可以訪問他們的位置嗎？

00:22:47.801 --> 00:22:51.972 
可以 但是還是需要延伸到後臺

00:22:52.239 --> 00:22:55.509 
我們僅在watchOS上提供
這個請求位置API

00:22:56.243 --> 00:22:59.313 
你可以訪問用戶的單一位置

00:22:59.613 --> 00:23:01.515 
但是你不能啓動一個後臺追蹤會話

00:23:01.582 --> 00:23:03.717 
你也不能在前臺進行追蹤會話

00:23:04.585 --> 00:23:05.419 
爲什麼？

00:23:05.686 --> 00:23:09.022 
Apple Watch是專門圍繞
快速瀏覽而優化的

00:23:09.857 --> 00:23:13.293 
我們並不希望當用戶在街區散步時

00:23:13.360 --> 00:23:16.930 
坐到那裏舉着他們的胳膊
盯着看很長時間讓他們疲憊不堪

00:23:17.431 --> 00:23:21.602 
在Apple Watch上使用
請求位置API再合適不過了

00:23:22.469 --> 00:23:25.138 
這並不意味着你不能通過
Apple Watch

00:23:25.405 --> 00:23:27.207 
啓動一個後臺會話而是指用戶不能僅僅

00:23:27.274 --> 00:23:29.543 
通過與Apple Watch的交互
就可以記錄他們的跑步軌跡

00:23:29.610 --> 00:23:33.280 
我們還需要iPhone的配合
我們來談談到底該怎樣做

00:23:35.482 --> 00:23:36.717 
後臺間發

00:23:36.917 --> 00:23:41.221 
你的watch app可以在
後臺運行的情況並不多

00:23:41.622 --> 00:23:43.590 
如果你發現你是在後臺運行

00:23:44.491 --> 00:23:47.694 
那麼只有你獲得了“始終”授權
你才訪問用戶的位置

00:23:48.662 --> 00:23:54.101 
watchOS最常見的情況最常用的
表最相關的行中都沒有

00:23:56.003 --> 00:23:58.972 
監控程序API不能用

00:23:59.673 --> 00:24:01.909 
你無法...
我們無法在Apple Watch中

00:24:01.975 --> 00:24:03.777 
後臺啓動你的app

00:24:04.178 --> 00:24:06.313 
不然要這些APIs就沒有意義了

00:24:08.148 --> 00:24:12.052 
好 我多次提到了“使用中”這個概念

00:24:12.252 --> 00:24:15.522 
我們來深挖下看看它具體指什麼

00:24:17.024 --> 00:24:21.061 
如果是在前臺那麼你的app
就被認爲是在“使用中”

00:24:21.595 --> 00:24:24.031 
對於iPhone和Apple 
Watch來說都是如此

00:24:24.097 --> 00:24:25.532 
如果用戶是正在活躍地翻看它

00:24:26.500 --> 00:24:31.572 
不過因爲這種情況不多不需要持續更新

00:24:31.638 --> 00:24:36.810 
沒有後臺追蹤Apple Watch
只在這種情況下才被認爲是“使用中”

00:24:37.110 --> 00:24:40.781 
但是在iPhone上如果你有藍條
那麼你也可以被認爲是“使用中”

00:24:41.348 --> 00:24:45.085 
藍條意味着你啓動了一個
會話並且會話仍在繼續

00:24:47.054 --> 00:24:49.323 
那麼這裏統一的特徵是什麼？

00:24:49.389 --> 00:24:51.491 
我們怎樣才能擴展到
Apple Watch中？

00:24:51.725 --> 00:24:55.462 
這兩者都代表不同類型的你對用戶可見

00:24:55.529 --> 00:24:58.966 
是的 更具體地說就是用戶意識到了
你在那裏處於運行中

00:24:59.032 --> 00:25:01.101 
正在代表他們做一些事

00:25:02.603 --> 00:25:04.905 
如果用戶僅僅使用了
Apple Watch

00:25:05.272 --> 00:25:07.574 
Apple Watch就會給
iPhone發一條消息

00:25:07.641 --> 00:25:10.277 
讓後者代替它做一些事此時

00:25:10.744 --> 00:25:13.714 
即使iPhone位於用戶的口袋內
用戶沒有使用iPhone

00:25:13.947 --> 00:25:17.251 
使用狀態也會傳送到
iPhone app上

00:25:17.351 --> 00:25:20.287 
他們使用的是兩者的聚集體整個複合體

00:25:20.587 --> 00:25:22.923 
授權是在複合層面進行處理的

00:25:23.423 --> 00:25:25.993 
你需要使用一個API發送消息
從而實現這一點

00:25:26.059 --> 00:25:28.395 
關於這個API我們稍後再講

00:25:28.929 --> 00:25:31.465 
當你在iPhone上處理來自
Apple Watch的工作時

00:25:31.532 --> 00:25:33.100 
你就會認爲是在“使用中”

00:25:35.536 --> 00:25:38.305 
那麼首先你是怎樣得到授權的呢？

00:25:39.339 --> 00:25:40.841 
授權是需求你請求的

00:25:40.941 --> 00:25:43.410 
我之前提到的兩個API
請求“使用中”授權

00:25:43.477 --> 00:25:45.479 
或者請求“始終”授權

00:25:46.079 --> 00:25:49.216 
你可以通過iPhone來實現麼？
通過Apple Watch來實現麼？

00:25:49.449 --> 00:25:50.584 
還是兩者都不行呢？

00:25:51.285 --> 00:25:52.553 
這些都很無趣

00:25:52.953 --> 00:25:55.889 
那麼這個在iPhone上
看起來是什麼樣的呢？

00:25:58.759 --> 00:25:59.927 
用戶會啓動你的app

00:26:02.896 --> 00:26:04.932 
然後他們會做一些事表明

00:26:04.998 --> 00:26:06.400 
你需要訪問他們的位置

00:26:06.466 --> 00:26:08.468 
然後你會意識到你還沒有獲得授權

00:26:09.002 --> 00:26:11.004 
你會調用請求“使用中”授權

00:26:11.171 --> 00:26:13.941 
你可以在對話框的頂部看到

00:26:14.441 --> 00:26:17.177 
發送給用戶的請求

00:26:17.644 --> 00:26:21.248 
下面是你的使用描述鍵

00:26:21.381 --> 00:26:24.084 
你可以在你的apps信息
plist中對此進行設置

00:26:24.151 --> 00:26:26.153 
解釋一下你使用用戶位置的目的

00:26:26.220 --> 00:26:28.388 
我們希望你能認真解釋一下

00:26:28.455 --> 00:26:31.124 
這樣用戶可以理解他們爲什麼
需要授權你們這項權限

00:26:31.191 --> 00:26:33.694 
用戶可以理解你的設計折衷

00:26:34.995 --> 00:26:36.830 
在這個例子中你可以看到

00:26:36.897 --> 00:26:38.932 
這裏的目的是爲了演示

00:26:38.999 --> 00:26:40.467 
這個理由就很充分

00:26:40.834 --> 00:26:42.736 
此時就讓我們允許授權

00:26:43.303 --> 00:26:46.607 
你可以立即看到位置更新啓動了

00:26:49.910 --> 00:26:54.448 
好 停止後讓我們把這個發送到後臺

00:26:55.916 --> 00:26:56.984 
總結下我們看到了什麼

00:26:57.050 --> 00:27:01.388 
當你通過iPhone請求位置授權時

00:27:01.955 --> 00:27:04.591 
iPhone會顯示一個提示
這個提示你們都已經習慣了

00:27:05.826 --> 00:27:08.128 
不過要注意下Apple
Watch卻什麼也沒顯示

00:27:08.195 --> 00:27:09.630 
它在那裏閒着沒事

00:27:10.063 --> 00:27:12.165 
這是因爲當用戶使用他們的手機時

00:27:12.599 --> 00:27:14.635 
他們不太可能同時使用
他們的Watch

00:27:15.269 --> 00:27:17.371 
如果他們確實是在使用
Watch想看看時間

00:27:17.437 --> 00:27:19.773 
或者看看那裏的那個app
我們不想阻止它

00:27:22.576 --> 00:27:23.944 
那麼那時又該怎麼做？

00:27:24.011 --> 00:27:27.214 
你可以通過Apple Watch
請求位置授權嗎？

00:27:27.548 --> 00:27:28.782 
是的 你也可以這麼做

00:27:29.016 --> 00:27:30.884 
它的行爲略有不同因此你只有在特定的

00:27:30.951 --> 00:27:33.487 
環境中才這麼做在其它環境中則不然

00:27:34.488 --> 00:27:35.822 
我們來看看這麼做會發生什麼

00:27:36.557 --> 00:27:37.791 
用戶啓動了你的app

00:27:40.961 --> 00:27:43.330 
然後他們導航到了你需要位置授權

00:27:43.397 --> 00:27:45.966 
才能滿足用戶的要求的地方

00:27:46.633 --> 00:27:49.102 
假設我們沒有收到過授權
這是一次新的啓動

00:27:51.738 --> 00:27:53.574 
你可以請求“使用中”授權

00:27:53.674 --> 00:27:58.445 
iPhone和Apple
Watch上出現了一個提示

00:27:58.512 --> 00:28:00.414 
Apple Watch
出現了一個告警

00:28:00.814 --> 00:28:03.550 
Apple Watch上的告警說到
“看看你的iPhone

00:28:03.617 --> 00:28:05.385 
你需要在那裏處理一條提示”

00:28:05.719 --> 00:28:06.820 
上面也有一個關閉按鈕

00:28:07.387 --> 00:28:09.389 
用戶可以點它關閉告警

00:28:09.957 --> 00:28:10.791 
它不是模態的

00:28:11.024 --> 00:28:13.660 
當你有一個未處理的請求時
你應該期待看到用戶

00:28:13.727 --> 00:28:15.929 
正在和app互動

00:28:17.064 --> 00:28:19.166 
這對iOS來說是陌生的

00:28:19.800 --> 00:28:24.505 
這並不算是對提示問題做出了回答

00:28:24.805 --> 00:28:28.709 
用戶並沒有放棄他們
在這裏做出決定的能力

00:28:29.443 --> 00:28:30.511 
他們只是說“別擋路”

00:28:31.011 --> 00:28:36.316 
還是爲了演示起見用戶來到
他們的手機上授權給了我們

00:28:36.750 --> 00:28:40.888 
然後它很快就重置了

00:28:41.255 --> 00:28:44.224 
看起來並沒有重置不過如果你
快速看一下我們得到了一個位置

00:28:44.391 --> 00:28:47.027 
你可以反覆運行直到你得到一個位置

00:28:47.995 --> 00:28:51.465 
那麼我們都看到了什麼？

00:28:51.632 --> 00:28:52.733 
什麼情況呢？

00:28:52.799 --> 00:28:56.103 
Apple Watch在Apple
Watch上啓動了一個請求

00:28:56.403 --> 00:28:59.706 
Apple Watch顯示了一條報警
這樣用戶就知道發生了什麼

00:28:59.773 --> 00:29:03.377 
用戶就理解了這個工作流程需要被中斷

00:29:03.710 --> 00:29:07.881 
無論他們想繼續什麼
他們都需要先答覆這個授權

00:29:08.482 --> 00:29:13.187 
同你已經習慣了的一樣
iPhone會顯示一條提示

00:29:13.320 --> 00:29:15.889 
重要的是用戶需要在iPhone上
答覆這條提示

00:29:17.758 --> 00:29:18.592 
好的

00:29:18.659 --> 00:29:20.827 
這個看起來有點不便
那麼我們爲什麼這麼做呢？

00:29:21.028 --> 00:29:23.730 
兩條充分的理由

00:29:24.064 --> 00:29:26.066 
第一條我們真的需要你在那個

00:29:26.133 --> 00:29:29.736 
用途描述鍵中認真解釋下你的用途

00:29:30.003 --> 00:29:32.472 
如果你解釋過了那就意味着
用戶需要在Apple Watch滾動查看

00:29:32.539 --> 00:29:33.807 
這個用戶體驗可不好

00:29:34.107 --> 00:29:38.245 
我們寧願把這條提示的
大型屏幕真實狀況顯示在iPhone

00:29:39.112 --> 00:29:43.917 
我們想要讓用戶
控制授權的用戶體驗很棒

00:29:44.351 --> 00:29:47.554 
現在iPhone就是總體控制

00:29:47.621 --> 00:29:50.858 
位置授權以及隱私授權的根目錄

00:29:51.425 --> 00:29:53.794 
我們想把所有的交互
都集中到iPhone上

00:29:53.861 --> 00:29:55.596 
這樣用戶就不會感到意外

00:29:55.662 --> 00:29:58.966 
如果用戶願意的話
他們之後就可以到設置中

00:29:59.032 --> 00:30:02.469 
隱私中位置服務中對設置機進行變更

00:30:04.838 --> 00:30:07.441 
好的 之前我提到過
請求位置就是我們現在

00:30:07.741 --> 00:30:13.380 
在watchOS上提供的直接通過
watchOS讀取用戶的交互的API

00:30:14.214 --> 00:30:16.416 
那麼你可以期待什麼類型的精確度呢？

00:30:17.818 --> 00:30:21.321 
如果你在Apple Watch上
發出了請求

00:30:21.622 --> 00:30:23.924 
那麼視你手邊是否有iPhone

00:30:24.291 --> 00:30:28.829 
如果你有那麼你可以得到一切信息

00:30:28.896 --> 00:30:31.398 
甚至包括精確到米的室內位置

00:30:32.032 --> 00:30:35.569 
另一方面如果你沒有
那麼你可以據此製作原型

00:30:35.636 --> 00:30:39.006 
理解用戶的預期
就像假如你指明瞭

00:30:39.072 --> 00:30:41.942 
一個請求的位置一樣

00:30:42.009 --> 00:30:45.846 
請求期望的KCL一百米位置精確度

00:30:46.346 --> 00:30:50.384 
這個位置精確度不是最佳的
但是要記住

00:30:50.450 --> 00:30:52.819 
它的精確度往往要大於一百米

00:30:53.220 --> 00:30:56.890 
事實上如果環境理想的話
你甚至可以用它來繪製跑步軌跡

00:30:57.157 --> 00:30:58.992 
現在沒有更新所以不要試

00:31:01.361 --> 00:31:03.163 
這裏還有一件事要知道即“最佳努力”

00:31:03.564 --> 00:31:06.834 
因爲Apple Watch的
網絡連接狀況不是很好

00:31:06.900 --> 00:31:08.836 
它可以處於假如說一個異常位置

00:31:08.902 --> 00:31:10.804 
用戶對它的期望不高

00:31:10.938 --> 00:31:14.408 
甚至無法在用戶的
環境中確定用戶的位置

00:31:14.775 --> 00:31:16.844 
沒問題 這是最佳努力的免責聲明

00:31:16.910 --> 00:31:18.846 
不過還是很努力了

00:31:19.146 --> 00:31:22.950 
當我們手邊有iPhone時
我們就可以加倍努力

00:31:23.283 --> 00:31:27.254 
使用iPhone來更多地瞭解環境

00:31:27.321 --> 00:31:29.189 
緩存一段較長的距離

00:31:29.523 --> 00:31:31.225 
比如說用戶跑步那麼除非

00:31:31.491 --> 00:31:34.862 
他們跑的步很遠否則就沒問題

00:31:35.195 --> 00:31:37.297 
不過當你試圖爲你的用戶確定用途時

00:31:37.364 --> 00:31:39.700 
要把這點考慮進去

00:31:40.100 --> 00:31:42.870 
無論期望用戶是
否隨身攜帶iPhone

00:31:43.203 --> 00:31:46.006 
如果用戶是在他們的家
工作場所或者某個他們

00:31:46.073 --> 00:31:48.008 
熟悉的場所附近使用你的app

00:31:48.375 --> 00:31:49.576 
那麼大概他們就不需要攜帶

00:31:49.643 --> 00:31:52.746 
另一方面如果你期待
用戶在旅行中使用你的app

00:31:52.813 --> 00:31:55.182 
或者任何用戶關閉他們的
流量套餐 避免收到

00:31:55.616 --> 00:31:58.085 
天價話費賬單時使用你的app

00:31:58.151 --> 00:32:00.921 
你都需要鼓勵用戶
隨時攜帶iPhone

00:32:02.289 --> 00:32:03.690 
哪怕他們關掉了流量

00:32:05.726 --> 00:32:08.662 
讓我們假設我們
手邊有一臺iPhone

00:32:09.129 --> 00:32:12.366 
如果你需要持續的位置更新

00:32:12.966 --> 00:32:17.437 
這在後臺中很常見或者你需要區域監視

00:32:17.504 --> 00:32:21.141 
或者爲了任何你能在
iOS上用 但是卻不能

00:32:21.208 --> 00:32:26.079 
在watchOS上用的事情你就需要
你的iPhone進行協作來實現了

00:32:27.014 --> 00:32:28.015 
那麼我們該怎麼做呢？

00:32:28.081 --> 00:32:30.617 
有一個很棒的會議實際上就是在今天的

00:32:30.684 --> 00:32:32.886 
這場會議之前在這裏舉行的
就是午飯之前舉行的

00:32:33.453 --> 00:32:34.588 
不幸的是它已經結束了

00:32:34.655 --> 00:32:37.324 
不過你可以去蘋果全球開發者
大會app上面看視頻

00:32:37.391 --> 00:32:39.860 
如果你之前參加了 很好

00:32:39.927 --> 00:32:41.228 
那麼這就有點像是一個概述了

00:32:41.461 --> 00:32:44.831 
這是一個框架的一部分
與“位置”有很大的關係

00:32:45.966 --> 00:32:47.734 
首先是WC會話

00:32:47.801 --> 00:32:50.470 
這個類代表了Apple
 Watch和iPhone

00:32:50.537 --> 00:32:52.005 
之間的連接

00:32:52.606 --> 00:32:55.909 
上面有兩個方法與我們的關係很大

00:32:56.076 --> 00:32:59.112 
第一個是SendMessage回覆
處理程序出錯處理程序

00:32:59.780 --> 00:33:02.149 
第二個是“更新應用上下文”

00:33:04.117 --> 00:33:06.720 
SendMessage回覆處理程序
出錯處理程序是雙向的

00:33:06.787 --> 00:33:07.855 
你可以從任意一方發送

00:33:08.188 --> 00:33:10.958 
“更新應用上下文”
則必須通過iPhone啓動

00:33:11.325 --> 00:33:13.694 
我們來看看它們在實際上
是如何爲我們工作的

00:33:15.762 --> 00:33:19.066 
我們首先要使用SendMessage
回覆處理程序出錯處理程序

00:33:19.867 --> 00:33:23.403 
來從Watch app
向我們的iPhone app

00:33:24.738 --> 00:33:25.606 
進行通訊

00:33:26.006 --> 00:33:28.308 
用戶導航到了app中我們需要另一端

00:33:28.375 --> 00:33:30.277 
提供幫助的地方

00:33:31.678 --> 00:33:33.013 
他們要求我們啓動起來

00:33:33.747 --> 00:33:36.450 
我們把那個消息發送過去
你可以看到app啓動了

00:33:37.451 --> 00:33:39.686 
藍條也出現在了視頻中

00:33:39.753 --> 00:33:43.457 
表明它可以進行持續的後臺位置會話了

00:33:45.859 --> 00:33:48.795 
它可以把那個信息發送回去了

00:33:49.696 --> 00:33:52.032 
你就可以看到更新顯示到了

00:33:52.232 --> 00:33:54.034 
watch顯示器上如果不是太小的話

00:33:55.135 --> 00:33:58.005 
我們把它停下來把東西都收起來

00:33:58.138 --> 00:34:00.974 
可以了吧？然後我們就
可以回頭看看那裏發生了什麼

00:34:02.009 --> 00:34:06.213 
關鍵一點如果你給iPhone
app發送了一條消息

00:34:06.280 --> 00:34:08.882 
而app當時不是處於運行狀態
那麼如有必要的話

00:34:09.081 --> 00:34:12.085 
它就可以通過Apple Watch到iPhone的
SendMessage啓動起來

00:34:12.553 --> 00:34:15.188 
因此你就無需擔心讓用戶啓動app

00:34:15.556 --> 00:34:17.090 
他們可以把手機放到他們的口袋中

00:34:17.157 --> 00:34:18.257 
一切事情都會自動搞定

00:34:19.927 --> 00:34:22.529 
注意“使用中”狀態傳送出去了

00:34:22.596 --> 00:34:25.632 
我之前提到過這點
你剛纔看到它起作用了

00:34:25.966 --> 00:34:28.368 
因爲用戶正在使用Watch
正在使用你的app

00:34:28.702 --> 00:34:29.937 
這就意味着它就有權在

00:34:30.003 --> 00:34:33.639 
iPhone上啓動一個
後臺位置追蹤持續會話

00:34:34.308 --> 00:34:37.043 
這就意味着要考慮到這一點

00:34:37.110 --> 00:34:40.414 
允許位置更新標記屬性

00:34:40.914 --> 00:34:42.983 
如果你想要啓動一個持續後臺位置會話

00:34:43.050 --> 00:34:44.585 
那就把它設爲“是”如果不想

00:34:44.985 --> 00:34:46.119 
則把它設爲“否”

00:34:46.453 --> 00:34:51.190 
當用戶掏出他們的手機
並且在他們使用他們的

00:34:51.257 --> 00:34:53.994 
watch時偶然看到手機的話
他們就不會看到那個神祕的

00:34:54.194 --> 00:34:55.429 
藍條進進出出

00:34:58.165 --> 00:34:59.333 
換個方向會怎樣呢？

00:34:59.633 --> 00:35:01.935 
也就是從iPhone
到Apple Watch

00:35:03.904 --> 00:35:06.240 
我們還是可以使用SendMessage
回覆處理程序出錯處理程序

00:35:06.340 --> 00:35:07.841 
因爲它是一個雙向的API

00:35:08.909 --> 00:35:13.647 
當我們這樣做的時候
你可以看到我們出了問題

00:35:13.881 --> 00:35:15.549 
我們的消息沒有發送出去

00:35:15.682 --> 00:35:17.851 
實際上 在這個例子中發生的就是

00:35:17.918 --> 00:35:21.588 
因爲Watch app尚未運行
我們每次這樣做的時候

00:35:21.655 --> 00:35:23.790 
都要在我們的委託上

00:35:23.857 --> 00:35:25.626 
調用出錯處理程序

00:35:25.926 --> 00:35:29.730 
SendMessage回覆處理程序
出錯處理程序是在app到手機

00:35:30.330 --> 00:35:34.568 
這種情況下啓動的
而不是在手機到watch

00:35:36.570 --> 00:35:40.541 
這種情況下啓動的

00:35:41.341 --> 00:35:45.012 
也許我們應該看看我之前
提到的其他API

00:35:45.212 --> 00:35:46.480 
“更新應用上下文”

00:35:47.214 --> 00:35:48.649 
這個就是手機到watch

00:35:48.715 --> 00:35:50.150 
我們可以使用這個API

00:35:50.551 --> 00:35:52.953 
當我們這樣做的時候
就發生了一些不同的事情

00:35:53.720 --> 00:35:56.757 
我們的Apple Watch
app仍然沒有運行

00:35:57.357 --> 00:35:59.826 
但是我們發送的消息掛出了

00:36:00.928 --> 00:36:02.496 
尤其是最後一條消息掛出了

00:36:02.763 --> 00:36:04.665 
你不想使用這種方法

00:36:04.731 --> 00:36:07.234 
來發送三角點更新但是你想要

00:36:08.302 --> 00:36:10.737 
發送狀態更新整個上下文更新

00:36:11.004 --> 00:36:14.141 
當你這麼做的時候系統會爲你保持它

00:36:14.208 --> 00:36:17.878 
直到用戶進行更新啓動了你的app

00:36:21.582 --> 00:36:24.051 
好的你的app就運行了並且得到了

00:36:24.117 --> 00:36:25.452 
一直期待的更新

00:36:25.786 --> 00:36:28.355 
你可以看到如果你自己看
它已經知道啓動了

00:36:30.123 --> 00:36:34.294 
你可以稍後通過你的
phone app發送持續

00:36:34.528 --> 00:36:36.096 
定期更新更新UI

00:36:36.697 --> 00:36:38.365 
初始狀態已經就位了

00:36:38.765 --> 00:36:41.268 
更新應用上下文同樣也適合

00:36:41.335 --> 00:36:43.871 
用來進行後續通信

00:36:46.807 --> 00:36:51.411 
好的 就整條從iPhone到
Apple Watch的路徑來說

00:36:51.478 --> 00:36:54.815 
有一件事要提一提看看
我們引入iOS 6上面的

00:36:54.882 --> 00:36:57.050 
Core Location的
這個API叫做

00:36:57.417 --> 00:37:01.088 
“推遲位置更新直到行程超時”

00:37:01.722 --> 00:37:06.527 
這個API就是系統的某種天然補碼

00:37:06.593 --> 00:37:09.730 
因爲當用戶不看
Apple Watch時

00:37:10.063 --> 00:37:11.598 
你就無需讓它進行實時更新

00:37:11.865 --> 00:37:13.901 
你只要讓它進行某種程度的更新即可

00:37:13.967 --> 00:37:16.503 
實現這一點的最佳方式是
對更新進行批量處理

00:37:16.637 --> 00:37:18.172 
偶然發送一次即可

00:37:18.405 --> 00:37:21.441 
這樣你就無需讓用戶的
藍牙廣播時刻運行

00:37:21.508 --> 00:37:23.343 
我們也可以省點電

00:37:23.810 --> 00:37:28.815 
對於iOS來說
你可以在手機上把這個API

00:37:29.016 --> 00:37:32.085 
用於Core Location
以便表明

00:37:32.152 --> 00:37:35.422 
當前你運行在這樣一種延遲容忍模式

00:37:35.856 --> 00:37:38.559 
除非用戶經過了一段
特定的距離或者經過了一段

00:37:38.625 --> 00:37:40.260 
特定的時間否則你都無需被喚醒

00:37:40.627 --> 00:37:44.498 
也許他們走了一英里 這是他們的步幅

00:37:44.565 --> 00:37:47.234 
如果按照距離計算你超時了

00:37:47.301 --> 00:37:49.002 
已經過去了五分鐘

00:37:49.069 --> 00:37:52.539 
或者你想要給你的Apple
Watch發送一個更新

00:37:55.042 --> 00:37:55.876 
好的 就是這個

00:37:56.376 --> 00:37:59.847 
我們已經允許了後臺位置更新
這是一項新的屬性

00:38:00.214 --> 00:38:02.683 
你需要對此採取行動
但是它可以讓你免去

00:38:02.883 --> 00:38:05.786 
緊耦合和高風險的麻煩

00:38:07.354 --> 00:38:08.922 
之後我們得到了請求位置

00:38:08.989 --> 00:38:10.824 
這是一個新的方法位於C位置管理器上

00:38:11.191 --> 00:38:12.593 
它可以允許你刪去一些樣本

00:38:13.427 --> 00:38:17.598 
你們可能都用樣本
並且在你僅需要一個位置時讓你獲取到

00:38:19.233 --> 00:38:22.102 
同時使用這兩種設備的主題就是協作

00:38:22.469 --> 00:38:24.705 
好消息是我很高興告訴大家

00:38:25.072 --> 00:38:27.307 
我們有了一個示例叫做potluck

00:38:28.075 --> 00:38:29.943 
其中演示了我們今天講的所有的東西

00:38:30.010 --> 00:38:32.613 
實際上那個app就是我們用來
給這些視頻做演示的

00:38:32.679 --> 00:38:36.183 
你可以自己安裝然後運行它

00:38:36.583 --> 00:38:38.752 
希望如果你正在編寫的app不工作了

00:38:39.052 --> 00:38:43.757 
potluck會幫到你
你可以找到問題

00:38:44.291 --> 00:38:45.325 
弄清楚是哪裏出了錯

00:38:47.327 --> 00:38:49.897 
這裏有很多信息

00:38:49.963 --> 00:38:51.832 
我相信你們可以很快記一下

00:38:51.899 --> 00:38:54.501 
首先是當然也可能是最重要的
看看potluck

00:38:55.569 --> 00:38:57.971 
你可以通過這個鏈接看到示例代碼

00:38:58.038 --> 00:39:00.474 
向下滾動直到你到達P節
那就是potluck

00:39:01.942 --> 00:39:04.578 
有一些會議我想它們都與你們密切相關

00:39:04.645 --> 00:39:08.515 
這些會議都已經結束了
不過它們的視頻都在網上

00:39:08.615 --> 00:39:10.017 
待會兒你可以去看看

00:39:10.250 --> 00:39:14.488 
尤其是從頂端介紹
WatchKIt 2.0

00:39:15.055 --> 00:39:18.292 
以及介紹 Watch
 Connectivity

00:39:18.358 --> 00:39:23.096 
我最後提到的API就是它

00:39:24.198 --> 00:39:25.532 
沒錯。

00:39:25.732 --> 00:39:27.434 
我希望你們都去看看

00:39:27.501 --> 00:39:31.972 
我迫不及待想看看你們可以用
OS 9 watchOS 2

00:39:32.105 --> 00:39:34.708 
以及Core Location
能打造出什麼東西繼續加油