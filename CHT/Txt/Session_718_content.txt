用GCD構建具有響應性的高效app
早上好
歡迎來到本次講座 題目爲用GCD構建具有響應性的高效app
我們非常高興看到這麼多的人有興趣
學習如何利用多線程優化技術來幫助你們的
應用程序適應我們所有的平臺
我是Anthony我將和我的隊友Daniel一起呈現這段演講
多線程優化技術或者叫GCD是與OS X Snow
Leopard操作系統一起引入的一種技術
當時我們的最新版的Mac
還是使用Core IIDuo的MacBook Pro
當時GCD的賣點之一是
它讓你可以使用雙核
同時運行應用程序的不同部分
並使線程變得非常非常容易
我們認爲GCD的使用真的經受住了時間的考驗
今天我們最先進的Mac Pro有多得多的內核
而GCD仍然是利用這些所有計算資源
的好方法
但正如GCD有助於利用所有高端
資源一樣 它還可以幫助你的應用程序
適應較小的環境
比如最近發佈的新MacBook是
第一個無窗格的設計
雖然就機型體積而言
這是一個優勢 但如何管理熱性能而言
它也帶來一些獨特的挑戰
稍後我會談到你們的app如何利用GCD
從而在這種環境下更有效地運行
我們iOS 9也有了 新多任務功能
這是第一次你們的應用程序必須肩並肩地
這種說法毫不誇張與其他應用程序一起在系統中運行
GCD可以告訴系統你正在做什麼
並能夠更好地在你的應用程序和其他
出現在屏幕上應用程序之間分配資源
有了Watch OS系統即便我們最小的平臺都能識別你的代碼
GCD可以幫助系統知道你應該運行哪些部分
的代碼才能讓你在這麼大的設備上
構建起具有響應性能的應用程序
所以我要先簡要概述我們今天將要討論的內容
我首先會介紹所謂的服務質量類別
我們與iOS 8和OS X Yosemite發佈的一款API
Daniel來講解它針對GCD使用
一些設計模式以及
如何整合QLS與這些模式
然後我會詳細講解線程 隊列
並運行可以使GCD更便於使用的循環
最後我們會就如何理解使用GCD時
的崩潰報告得出一個簡短的結論
但首先需要一點背景
你們構建起非常棒的app
然後開始執行這款app用戶觸碰它的圖標
從finder中進行下載
我們將開始執行主函數中的代碼
那麼你們將得到每個app用以開始的
最初的主線程
你們調用應用程序UI函數 或者NS應用程序函數
接着會彈出一個線程上的運行循環
和框架代碼
然後線程會停在那裏等待事件
在某一時刻會有事件發生
也許你會得到一個調出的委派模式
到你的應用程序委託UI
這時你的代碼開始運行
需要完成某項任務比方說從數據庫讀取信息
你發出指令訪問磁盤上的該文件
就會返回相應數據
你會更新用戶界面
最後返回控制到框架
並繼續等待線程上的事件
這些進展都很順利 只是
從數據庫讀取信息需要一點兒時間
在OS X系統此時你可能會看到一個旋轉的等待光標
iOS系統裏app會暫停甚至被終止運行
這種用戶體驗不僅糟糕而且未得到響應
出現這種情況GCD就可以參與進來
幫助提高運行效率
你會得到調出的委派模式
但是不要立即開始進行操作而要創建一個GCD隊列
使用異步分派把任務移動到尾接
你的代碼與主線程異步執行
等你們得到了數據
就可以異步分派回主線程更新用戶界面
這樣做的優勢在於當你的任務在GCD隊列運行時
主線程可以繼續等待事件
它始終保持響應狀態
用戶可以獲得持續的良好體驗
大家都感到滿意
我希望這是一個
大家都熟悉的模式
我們不會詳細談論
如何做到這一點
如果你們不熟悉 我強烈建議各位在今天的
演講之後去一趟去普西迪聽一聽那裏的講話
裏面將詳細講述這種模式
有一點你們之前可能沒有想過
我們現在有兩個線程兩個都要執行代碼
主線程要處理新事件
GCD隊列要
執行你派遣的任務
也許這兩個任務都在一個核心設備上
在這種情況下我們要執行哪個線程呢
這裏服務質量類別就要發揮作用了
這是一個在iOS 8和10Yosemite系統中的新的API
於去年發佈
我們有四個服務質量類別：用戶交互模式
用戶發起模式效用和背景
通過這些方法你可以告訴系統你們正在進行哪種任務
它也使系統能夠提供各種資源控制
以最有效地執行你的代碼
說到資源控制什麼是資源控制
我們的系統支持CPU調度優先級
我們要運行哪些線程以什麼順序運行
說到I / O優先級當系統中有多個I / O時
應該以什麼順序執行呢
計時器聚合技術是一個省電的功能
無論我們按照吞吐量還是以效率
導向模式運行CPU
我們想要獲得最佳的性能還是想要
以最節能的方式執行的代碼
在理想情況下爲每個平臺或設備優化
這些配置值或設備運行的代碼
但顯然這種做法很快會難以爲繼
許多配置值很難調整 而代碼
運行的平臺數量衆多
服務質量類別被設計成
一個抽象參數你們可以使用
這個參數描述任務的目的和類別
不要試圖調整所有
具體的配置值你們要明白自己所做的都
“由將要執行工作的用戶啓動”
而系統將自動爲平臺和設備
選擇正確的配置值
我前面提到過我們有四個服務質量類別
接下來我要對它們進行簡要介紹它們分別有什麼用途
第一個是用戶交互模式
這是主線程
假設有一個iOS應用程序用戶的手指
正在屏幕上拖動
主線程需要響應以便在
用戶手指拖動時交付
下一幀動畫
主要用戶交互代碼是保持動畫
以每秒60幀的速度平穩運行的專門代碼
所以你們需要問自己這項工作是否積極參與
到更新UI之中
在決定是否需要進行用戶交互式設計時這一點一定要加以考慮
這不是在加載可能成爲滾動視圖的內容
這就是在畫新的動畫
我們所說的用戶發起模式是指加載由用戶
完成的動作結果
比如當我翻動滾動視圖
爲下一個單元加載數據時
或我在使用照片或郵件應用程序並點擊電子郵件或照片
加載全尺寸照片或電子郵件時
這些行爲就是我們所說的用戶發起的動作
問題是要繼續進行用戶交互
是否需要這項工作
對其中任何一個都沒有幫助
作爲用戶發起而不是用戶攔截
如果用戶不能通過你們的應用程序繼續
取得有意義的進展就應該選擇用戶發起模式
效用是指用戶本來可能已經開始進行
或已經自動啓動任務
這些任務長時間運行但是並不阻礙用戶
繼續使用你們的應用程序
你們要問問自己用戶是否瞭解
這項工作的進展
如果一個雜誌app正在下載新刊物
那麼用戶可以繼續使這個app下載任務可以同時進行彼此互不幹擾
他們可以閱讀往期刊物或隨意瀏覽
你們可以設計一個進度條
幫助用戶瞭解進展情況
效用是一個很好的類別
最後其餘的一切都可以歸爲背景
用戶不會主動關注的一切
任何類型的維護任務 清理工作
數據庫清空都屬於背景
根本問題是
用戶有沒有意識到這項工作
背景工作很有趣 因爲你要
考慮何時處理背景
我強烈建議你們去看一看
去年關於編寫節能代碼的那部分演講
該演講討論瞭如何有效地做好背景工作
如何判斷你們的應用程序背景是否表現出色
所以我提到了我們的新MacBook
就像我說的這是第一款無風扇的Mac
在之前有風扇的Macbook裏
機器處理的工作越來越多 產生的熱量
也越來越多 那麼我們可以加快
風扇轉速來幫助熱量更快消散
新版MacBook非常節能令人驚訝
我們不需要風扇散熱在大多數情況下
但全速運轉該機器仍然會
產生一些熱量我們需要驅散
但是我們驅散熱量的能力是有限的
我們有其他技術確保我們能讓
機器保持適當的溫度適合使用者使用
假設你有一款正在使用的app然後你已經完成工作
按服務類的四項質量指標而言
你正很努力的開動機器用了很多的能量
而我們需要幫忙控制控制熱量的多少
這樣能讓機器在合理的溫度中工作
好了我們能做的是我們能開始擠出我們的工作量
我們將要做的是
比較不重要的服務質量標準
這就允許我們管理這個系統能量的使用
保持機器響應及時確保了
沒有無反應情況 讓使用者看到
這個方式很重要
因爲你讓你的工作正確分類了
在運行一個像這樣的機器時
我還提到iOS以及新的多元任務的特點
你可以想象在古老的世界裏我們可能會有你的app
的主要思路而且可能它還有另外的分派線程
在使用但是現在我提出了另外一款app
那款app也將會有一個主要思路
然後我也有Picture inPicture
那款也有一個思路解碼視頻
好了但是我也只是擁有兩個CPUs
所以如果我不得不使用其中之一來解碼視頻
對於下一個我該做些什麼呢
這是另外一個領域對於質量
服務標準來說能真正幫你解決問題
表明了操作系統的服務質量標準的
每一個線程我們都可以準確決定
在哪裏安排那些可用的資源
通過那些我會轉交東西給Daniel
他會檢查特定的設計模式以及對那些類型如何應用服務質量標準
早上好 謝謝 Anthony
本章我們會看幾個
關於GCD設計和QOS是如何應用的具體的例子
首先我們從最基本的開始 先看GCD
和QoS 在每個獨立模塊的層次上
是怎樣被細分的例如QoS 從提交線程到
異步運行模塊
有一個整體功能模塊
和一個異步分派模塊
以及相關的自動傳播QoS模塊
那麼這個系統是怎樣爲你
自動切換一些優先級別的呢？
沒有時間深入地討論具體的API命令
如果你想了解更多的細節 我建議你
看看去年的演講內容"功率 性能
和診斷: GCD和XPC的新內容"
那麼你就能在開發者的網站看到
我們在如何使用API的問題上已經講了很多具體內容
這是去年的新課程
第一個例子是 Anthony很早就有了的
在主線程的提示下執行了一些異步工作
在GCD上做了些I/O
這個例子怎樣適應於QoS？
什麼是可以被應用在這裏的
適當質量的服務等級呢？
當然在左手邊我們有主線程
Anthony說過是UI呈現的地方
這裏是事件處理的地方
合適的調用服務命令是用戶互動命令
這些都是無條件獲得的
應用程序的主線程就在這種質量的服務等級下服務等級下出現
在屏幕右手邊
是沒有出現在主線程的異步工作
很明顯我們不應該啓動用戶互動
這裏我們不是在做UI呈現
而是在說正盯住文件圖標
正在等待他的文件打開的用戶
用戶已經在使用此app前就被絆住了
他仍然能和用戶界面互相影響但是並不能做所有他想做的事情
比如編輯文件或者查看文件
用戶初始化是服務的最佳質量
如何通過GCDAPI達到這個目標
其實你不需要做任何事情
它就會自動實現
但重要的是理解爲什麼會這樣
讓我們詳細來看一下
所有程序都起源於初步調動async
它能從主線程消除異步工作
正如我在前一個幻燈片裏講的那樣
async異步分派會從你提交塊執行
服務線程隊列
自動傳播服務質量
在這個例子中有一個特殊的規則適用於
我們自動轉譯的用戶交互用戶發起的服務質量
這樣做我們就避免了過度傳播
應該受到限制的服務質量
到主要的線程和呈現的用戶界面
我們可以好好利用此法
因爲這正是我們想要的
通常情況下
在用戶發起的服務質量隊列上
都是通過自動傳播來運行
當你用自動傳播也試着進行的結果
回到主線程去更新
用戶界面
因爲用戶主線程是服務用戶交互的質量
所優先考慮的
如果你去一個線程 它不會降低
那些主線程上指定的
服務質量
這裏我們將忽略傳播的價值
來在用戶交互服務質量底部運行用戶界面修改塊
運行用戶界面修改塊
我們調用QoS傳播屬性推斷QoS
這是塊被提交至一個隊列時被捕獲的QoS
和特殊規則
我們轉譯用戶交互至用戶初始化
正如上文提到的
如果目的地提交之處
沒有自己的指定的服務質量
在分配自己的高質量的服務主線程的情況下
也不降低QoS就將用到這種傳播的服務質量
下一個例子是不能自動開啓任務的情況
長期運行的任務比如說在一個異步調用的長期
的運算中 關閉主線程
用戶界面就不能更新它正在處理主線程的當前隊列
可能會更新UI 通過一個異步
返回塊的進程
這個塊包含了更新一些用戶界面元素
那麼什麼纔是合適的服務質量類呢？
在你左手邊是用戶互動
右手邊是之前描述過的Anthony
這就是適合質量服務
程序運行的情景
它是長期運行的
用戶可以繼續使用用戶界面
不用等待就會得到想要的畫面
他也可以看一些進程 以某種方式發起
的進程 但是這並不會影響到之前的界面
我們怎麼用GCD API實現它呢？
最簡單的解決方法是關注
任務的產生和發起
這是異步調用的開始
我們以標記我們提交
的帶有合適的質量服務類的塊
通過調用塊生成質量服務類的接口
我們傳入想執行的塊或者
我們想要的質量服務類
應用程序就有了
這就是生成的異步調用的
塊對象 當它被執行的時候
會在質量服務類的應用程序裏運行
通過查找最初
質量服務類變化的點
就會自動傳遞給下一步執行
如果那個塊發生變化 就會利用
自動執行這個特性
因此產生的
任何異步線程將會自動運行
相對應的質量服務類
並繼續作爲應用程序這期間你不需要做任何事
在前面的幻燈片上我們可以看到這個
質量服務塊被創建通過顯示的給塊對象添加質量
服務屬性的方式來實現你只需要提供合適的調用時間
當任務產生不同的類的時候
另一個質量服務應用在塊對象中的案例
當你需要捕獲你提供塊的
質量服務類時
就是說在一個回調塊的方案中你正在寫一個接口
別人提供給你一個回調塊 你想
在另一個隊列或者線程中保存並提交它
但是你很想讓它
像異步調用
質量服務程序那樣被執行
你可以去分派現有指定模塊
由創立分配模塊標識並通過
它會捕捉到現有的QOS和執行狀態
在提交模塊後把它保存到快速模塊中
它會按分配值在一個隊列上運行
看看另外一個我們的應用程序案例
它執行了一個UI操作
在操作測試性能時
它通告顯示處於維護狀態中
並即將執行清除狀態
還說裏面有一個數據庫有太多的鬆散區
不得不進行一些壓縮程序和清除任務
還有一個GCD應用的典型例子
在執行異步分配運行的地方
後臺列隊上的維護任務
當然是在左手邊的
作爲用戶會重新啓動用戶界面
在這裏相應的服務質量等級
將用於服務背景質量上
目前鑑於幻燈片的標題
這只是一個維護操作
與用戶做了些什麼不相關係
你通告出此時你正在進行的狀態
用戶此時並未察覺發生了什麼
你要做的工作是關於APP的工作
基於此處自已利益上的工作
我們怎樣才能取得服務後臺的運行質量
我們能做的一件事就是早點看到API模塊的應用
讓初始異步此隊列成爲
後臺服務的質量
也許這件事在APP中是比較多樣性的
以此而成清除工作的類型
同時你也有多樣的方法
可以在這個模式下的數據庫上進行操作
這要用一個適當並特別的隊列
精確地完成此任務 你纔可能創立起
有指定服務質量的隊列
你可以用QOS等級分派隊列屬性
通過如範例中後臺
所生成屬性通過並分配到創立隊列上
創立一個如範例中清除隊列
通過服務等級質量被指定到隊列上
得到了異步分派的自動傳播
用戶再次從主流程啓動
我們實際上忽略了傳播的價值
因爲你正在提交一個自身擁用指定服務等級質量的隊列
並說可以用此隊列來替代
所以你提交的模塊將在後臺運行
代替已經如果有的
自動系統
對於這樣的情況
某處有一個與執行流程無關的維護任務
考慮調度程序塊分離的標記是否有用是合適的
這是一種告訴操縱系統
你正對這個程序塊所做的事情
與執行流程無關的方式
而且它尤其不參與QoS的傳播
也不捕捉事物 如活動ID
如果你正在去年我們會上介紹過的活動追蹤特性中使用它
和其它一些執行上下文的性質
當然即使你有工作
它總是應該在QoS背景裏
那是些清理性的工作 是可例外的
如一些退出特性 用戶退出他的賬戶
你應該刪除數據庫
及用戶的私人數據
那是一些用戶希望能看到它完成的事情
這不該是後臺任務
你有必要在後臺屬性中重寫
或退出你這裏已經設置過的
這個隊列或這個運行
如果這裏你僅用自動傳播特性
像以前一樣除了這裏 我們應該忽略
用戶初始的QoS
當然這是可用的合適的QoS
這是我們真正期望的
用戶正在等待這個退出結束
如何達成呢？
利用調度程序塊執行QoS分類標誌
程序塊創建和你想執行的程序塊
那是在告訴系統
你真的希望程序塊中的數值
與隊列中的相反
這樣你可以重寫隊列的數值顯示
如果你這樣做程序塊將在本例中
用戶初始的QoS分類中執行
但是 當然 在圖中
你可以看到現在的情況：
你有個別潛在含兩個程序塊的隊列
兩程序塊是同時的且有不同的優先級別
這就是異步優先級反轉翻轉
一個高級QoS程序塊可能被提交給一個串行隊列
但是隊列中已有工作
或在更低級的QoS中運行
你有優先權翻轉
GCD會幫助你如果你通過提升
串行隊列中的工作來使用串行隊列
運行或是入隊直到你達到高級別的QoS程序塊
這是後臺QoS覆蓋出現問題
並非重寫塊調用自身的問題或者如果將任務非同步傳輸下去
程序塊將以原始QoS狀態傳輸
但程序塊將以更高優先級執行從而消除塊的反轉執行
概括說QoS隊列排序大多適合那些
在應用程序中排序是唯一用途的場景
或者輸入的指令不需要考慮登錄優先級的重要性
而需要考慮的是指令用途的優先級
QoS隊列排序還可用於
爲這種類型的工作負載所開發的獨立的程序塊API
當這種負載處於維護或後臺模式時
在隊列中使用QoS會使我們忽略
異步block(塊)中的QoS除非
我們在程序中使用強制執行標記
最後是利用串行隊列實現lock(鎖)的功能
這在GCD當中是很常見的用法
在程序當中你有一些共享的數據結構
而你想要鎖定對這些數據結構的訪問
你可以通過在數據結構中創建一個帶有調用隊列
標記的串行隊列的方法來使用GCD
然後用同步調用來執行關鍵的區段塊
在隊列中只有這個block（塊）有訪問數據結構的權限
QoS在這個過程中是如何運行的呢註明”同步調用”函數很重要
當調用”同步調用”函數的線程
被鎖定時執行塊
返回block（塊）的同時釋放線程
這種情況下我們不需要任何額外的線程
我們只需要執行調用同步調用的線程
然後在所調用線程的QoS中執行塊
此處指用戶交互進程
當你可以使用同步
因爲有其他的線程或隊列
也在訪問此數據結構
或許當執行一個QoS線程時在隊列內調用”同步調用”函數
從而可以獨佔訪問
數據結構
如果隨後返回線程 同樣的事情將出現
他將停止等待線程以獲取獨佔訪問權限
然後在調用QoS的線程中
執行自身
QoS線程中的塊
我們就又會碰到如果這個獨佔訪問以別的順序獲得
優先權翻轉的問題
如果實用程序效用先進入鎖死
主線程就必須等待效用線程
這當然是我們不期望的
所以QoS繼承
異步優先級翻轉會幫助你去解決
一個高級的優先級服務線程正在等待較低級別的進程工作
我們可以通過爲等待期間
提高等待工作的QoS來解決 
如果你用串行隊列和同步調用
或調用程序塊等待API
如果你用多線程互斥鎖
或任何建立在其上的API如NSLock也可實現
值得注意的是有些API在這裏是不可用的
調度信號量不承認認同所有權概念
所以系統無法決定
誰最終將向信號量發信號
那種情況下沒有任何優先權翻轉的解決方案
如果你有優先級翻轉
你在某調度信號等待中發現高級優先級等待者
低級別優先級工作者正在執行某些工作
你可能必須轉變成調度程序塊等待 
在我們能夠進行提升的外顯實體處等待
下面請Anthony講一下隊列線程和運行循環
謝謝 Daniel
希望這激起了你們對服務質量的興趣
並願回頭看看這些應用
及思考一下如何應用服務質量
現在我們講一下隊列、線程及運行循環
希望能使GCD的更廣泛被應用變得更簡單
併爲你調試應用程序提供一些背景
提醒我們自己我們的應用程序與
我們的主線程相關
GCD線程池
服務於GCD隊列中的所有程序塊
在應用程序中也有某些隊列
想象一下你在主線程上執行代碼
你異步調度到某隊列
一程序塊且我們會爲此程序塊啓動一個線程
開始執行你的代碼
在Delay之後我們將同時執行Object和Selector
且這將在當前線程的運行循環上
加入定時源
現在讓我們想一下一秒後會發生什麼？
結果是：當程序塊完成時
線程可能會消失
這些是我們臨時線程池裏的線程
他們沒有任何可確保的有效期
我們可能會破壞這個線程
當然即使線程保留了下來 
也沒人在實際地運行那個運行循環
那個計時器將永遠不會被觸發
這是一個有趣的互動
當你混合基於運行循環與調度隊列的API時發生的
簡單的總結一下運行循環與
串行隊列的區別：運行循環束縛於
某一特定線程
一般看到API通過委託方式被回調
他們擁有在整個運行循環源中的
每次迭代後出現的自動釋放池
且運行循環可以被重新進入使用
通過調出運行循環以使運行循環自旋也是可能的
另一方面串行隊列
或調度隊列可利用
來自Grand CentralDispatch線程池的臨時線程
它們一般將程序塊作爲它們的回調
或應用它們的API一般將程序塊作爲它們的回調
僅在一線程完全空閒時
串行隊列的自動釋放池纔會出現
如果你的應用在持續忙碌中自動釋放池將絕不會出現
所以當你用調度時 不依賴於
免費的自動釋放池是很重要的
如果你要自動釋放大量的項目
你需確保你的自動釋放池是合適的
最後串行隊列不是一個重入鎖
或遞歸鎖結構
你需要確保當你設計你應用的隊列時
不要使自己陷入需重入地
使用它們的情況
這些規則被捆綁在一起 其意義在於
主線程的運行循環也作爲主隊列被公開
相對於主線程在這些領域間來回跳轉
是非常容易的
所以如果你回到計時器那個例子
我們是有點在比較不同的API
說到運行循環 我們有
NSObjects—在Delay後運行Selector和Object
或NSTimer—安排TimerWithTimeInterval
可在當前運行循環上安裝計時器
在調度領域我們有dispatchafter和
dispatch sources用其設置計時器
這樣就創建一個通過隊列上加入程序塊
就可激活的計時器
我提到過GDC利用臨時線程
現在讓我說明一下它是如何運作的
想象一下我正在做大量的異步調度
我將那些放入全局隊列
系統正從線程池中取出一個線程
並將它分配給第一個程序塊
使其按自己的方式運行
取出另一個線程給第二個程序塊
並使其按自己的方式運行
這樣我們就有一個兩核設備
這些線程在同時運行
我們先停在這裏
理想情況下每核有一個線程
當第一個程序塊結束執行時
我們將取出線程分配給下一個以此類推
這樣運作非常好
直到我們程序中的某個需要訪問
現在還不可獲得的資源
我們把這叫做等待
線程將等待並暫緩執行
當它需要像是I/O或鎖定資源時
你或許聽說過這個被稱作阻塞
但今天我們叫它等待
所以在接下來的五分鐘如果談論程序塊阻塞你會覺得非常困惑
但在許多其它的情況下 你會聽到它被稱作阻塞
從GCD的角度看這裏非常有趣的是
我們想要設備上每核的程序塊或是線程都在主動地執行
所以當一線程等待時我們將提出線程池中的另一個線程
直到受到限制
這樣就有每核都有一個線程在運行
來想象一下我們有四個這樣的程序塊
正在兩個不同的線程上執行前兩個
前一個說：嘿 我需要執行I/O
我們說：好我們將發佈I/O到磁盤上
但之後我們必須等待I/O迴歸返回 
然後纔可提出另一個線程
執行下一個程序塊等等 當線程等待時
當仍有工作需要被做時找另一線程來執行隊列上的下一程序塊
這裏的問題是：如果僅有四個程序塊時運行沒有問題
如果我有許多程序塊且它們都想等待
我們就會遇到線程激增
當然這就會有點低效
有大量的線程都在佔用資源
如果它們同時停止等待
就會有大量的資源衝突
所以這對性能來說是非常不好的
同時它也有一點危險性
因爲這對可提出的程序數量有所限制
當我們耗盡極限時對於新的工作
我們該怎麼辦？
這就導致了死鎖
我想舉一個死鎖的例子 是在我們的一個內部應用程序裏碰到的
這個例子有點複雜但我希望我能一步步給你解釋 因爲
此例很好的說明 應用程序不同部分間
是如何以一種意料外的方式互動的
我們有主線程並且主線程有大量的工作需要去做
它會異步調度大批程序塊
到某一併發隊列
我們爲這些程序塊提出線程
這些程序塊立即轉向
同步調度回主線程
這時我們已經提出了
我們需要的所有線程
在這裏的這個簡單例子中 是四個
我們達到了線程限制
我們將不能再爲線程池提出任何更多的線程
那麼 好的我們需要主線程再次變成可使用的
以使那些程序塊可以獲取它
繼續運行 至完成
現在它使我們重新回到限制下
僅在某些情況下這可能發生但是讓我們試想一下
主線程進入異步調度成爲某一串行信號
到目前爲止一切順利
那個程序塊仍不會開始執行
因爲沒有可利用的額外的主線程
來執行那個程序塊
它會呆在那裏 等待着某一線程返回
然後我們可將其再度利用
但是之後我們的主線程決定同步調度
成相同的串行隊列
問題是對於串行隊列
沒有可用的線程
主調用將永遠阻塞
這就是經典的死鎖情況
我們的主線程正在等待資源
在此案例中是我們線程池中的一個線程
所有來自線程池中的線程都在等待資源
主線程都在互相等待 但沒有一個會
放棄那個資源 所以導致了死鎖
這似乎非常匪夷所思不自然
但是當你的應用程序有許多不同的部分不同的模塊同時運行的框架時
死鎖會比你想象中更容易碰到
並且實際情況中會更復雜
所以當你在用GCD時
這是你需要時刻銘記的
以保證你可以避免這種情況
這很容易做到
下面我會講一些可適當避免這個問題的
設計應用程序的方法
首先是一些基礎的東西
在任何可能的情況下
儘可能利用異步API
尤其是對於I/O
如果你這樣做你可以避免程序塊等待
這樣你就不用提出更多的線程
更高效
對這類的情況 你也可以用串行隊列
如果調度所有此類工作到串行隊列上
我們就不會遇到線程激增
我們每次將僅執行一個程序塊
我並不是在告訴你們串行化你們全部的應用程序
但是當你建立你的應用程序
並創建不同的隊列在你的應用程序中處理不同的模塊時
除非你知道對特別的模塊你需要
平行運行某些東西
取而代之地爲達到你的性能目標
請考慮從串行隊列開始
在串行隊列上同時運行你應用程序中的各部分從中你可獲得很多性能
之後你可以給出你應用程序的輪廓
看什麼地方需要額外的平行運行的性能
並對這些地方進行特別設計
以避免線程激增
當然你也可以用有併發限制的
NSOperation隊列
最後不要產生無限的工作
如果你可以按照你需要的程序塊數量來約束你的工作
就會避免線程激增
讓我們來看看更具體的
在這是出現問題的實例代碼
第一個是我們混合異步和同步
如果我只是對某隊列進行同步調度會非常的快
大體上是得到鎖
如果我進行異步調度也會非常的快
大體上是原子入隊
如果我有一個隊列且僅用兩個中的某個
其性能與這些基本體是非常相近的
如果我將這些混合異步到某隊列並做同步調度
同步調度就必須等待一線程被建立
並執行那個程序塊然後程序塊纔會被完成
現在我們多了創建線程的時間
但其實本來僅一個鎖就足夠了
混合這些基本體當然是安全的
但是當你設計應用程序的時候想一下是否你真的需要這麼做
在主線程中混合它們的時候需要特別的小心
現在下一個問題是我們嘗試一次調度許多程序塊到某一併發隊列
如果你這麼做在我們的這個情況中你只需
避開主線程嘗試繼續執行
但是試想一下在你異步的地方做一些相似的事情
之後做一個同步屏障
任何一個都是危險的因爲它將引起線程激增和死鎖
但是我們有一個基本體叫做調度使用
這兩段代碼對你來說基本上是一模一樣
從語義上來看
通過轉換爲調度應用 你通過GCD
來管理並行性和避免線程激增
當然你也可以用調度信號量
你們中的許多對用信號量作鎖非常熟悉
取而代之的是這裏我們將信號量用做計數信號量
我們從對它進行初始化着手
通過使用我們想執行的併發任務數
比如說我們想要運行四個
每次我們的程序塊完成它會向信號量發出信號
每次我們提交 我們需要等待信號量
結果是：提交線程將進行四次提交
之後阻塞那個信號量 直到
它們中的一個可以完成併發信號給信號量
這個模式非常好 如果你的應用程序中
你可能在多個地點提交
某些東西像是調度應用是不合適的
希望這些幫助你們對線程激增有了解
並知道如何去避免它
我還想簡短地談一下崩潰報告
不幸的是某些時候你們中的大多數都必須
處理一份崩潰報告
這裏有許多信息
如果你在用GCD就更是這樣
隨着你有更多的線程就會有更多的東西需要被剖析
及理解到底是怎麼回事
所以我想介紹給你們一對堆棧
它們可以幫助你瞭解應用程序中
不同線程的作用
第一個是管理線程
你幾乎在所有使用GCD的應用程序中
都可以看到管理線程
它負責幫助進程調度來源
你會注意到調度管理線程是根框架
一般來說你可以忽略它
我們有空閒的GCD線程
這些是線程池裏空閒的線程
在堆棧的底部你可以看到開始工作隊列線程
有跡象指出它是一個GCD線程
工作隊列當前返回指出它正在處在空閒
另一方面一個活躍的GCD線程仍將從
開始工作隊列線程開始 但你會看到一些
調度客服端調用和調度調用程序塊及釋放類的東西
跟隨着你的代碼
你也會看到當你創建隊列時曾輸入的調度隊列名稱
給出描述性隊列名稱是非常重要的
當主線程空閒時 你會看到其列席在
虛擬信息陷阱 CF運行循環端口及CF運行循環運行
你也會看到com.apple主線程
另一方面如果你的主線程是活躍的
由於主隊列GCD隊列你可能會看到CF運行循環
正在服務主調度隊列—如果它是活躍的
並且在這種情況下有我們正調出的NSBlock操作
當你不能依賴於事物不會改變
今天有些內部的細節我也會談及
爲了能給你一個崩潰報告的指南
希望能提供給你一些有用的信息
至此總結一下 記住一個有效的
有響應的應用程序必須接受不同的環境
不管是Watch還是Mac Pro
這些不同的平臺有各種各樣的可用資源
GCD是可以幫助你合理管理它們的一種非常好的方式
QoS分類允許操作系統
以最有效的方式安排你的資源
所以你應該回家想想如何將QoS分類
整合進你的應用程序
及既存的GCD使用中
最後想一下應用程序是如何使用GCD
並嘗試避免線程激增
更多的信息 請查看
Mac和iOS應用程序併發程序指導或能源效率指導
iOS應用程序的那個是這周剛出的
看看吧 它很棒有開發者論壇和我們的宣傳員Paul
幾個相關的場次：
《獲得整日電池壽命》給出了更多關於
我提到的能源話題的信息
《爲多任務iOS9優化你的app》
《高級的NSOperations》和在這之後的
《iOS及Watch OS性能》
如果那些你沒有看過 我強烈的建議你去看一下 謝謝