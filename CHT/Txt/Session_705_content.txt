Core Motion中有什麼新料
下午好 歡迎大家
我的名字是阿尼爾·卡南加今天我要講一講
Core Motion中有什麼新料
我們能講的事情比較多
不過今天我們主要講幾個關鍵點
我們會首先談一談Apple Watch
這是我們的一個新的平臺我們會談談怎樣把你的
Core Motion apps弄到Apple Watch上
我們也對計步器做了一些
新的變更其中包括一些新的APIs
我們還會談一談高度表在Phone 6上引入的一個傳感器
然後加布裏埃爾就會通過一個以一個非常有趣的方式
使用了Core Motion的應用程序來給我們做一個演示
我之前已經看過了 非常棒
讓我們開始吧
這並不是一個介紹性的會議
不過我們會涵蓋非常多的Core Motion概念 
你也可以跟得上
即使你不是十分熟悉Motion
不過對於那些來到會場的人來說我們在會議結束後會立即有一個實驗室
請帶着你的問題來實驗室
我們有工程師以及科學家在場
但是如果你沒有問題 那就要恭喜你了
不過還是要請你過來
告訴我們在你的apps中是怎樣使用Core Motion 樂意聆聽
在Apple developer上確實也有一些之前的會議
在那些會議中深入探討了動作感應、
動作活動性以及計步器
所以請你去看看那些會議
讓我們開始吧
一段時間以來動作感應已經在iOS上取得很大進展
先來看個有關它的工作原理的簡短概述
這是一個傳統的動作感應的結構
你把一些傳感器連接到主處理器
就可以很明顯地看到它們的缺點
無論你在什麼時候想要訪問傳感器數據
你都必須讓主處理器處於活動狀態
這會嚴重製約你可以編寫的
應用程序的種類
所以我們認爲 我們能夠做得更好
從iPhone 5S開始我們就引入了一顆協處理器
我們稱之爲M7
是一顆微型處理器 它唯一的工作就是
對動作數據進行處理
這顆處理器可以全天候運行
且只有在真正必須時纔會喚醒主處理器
對於用戶的電池壽命來說這是好事
我們在iPhone 6上又引入了M8處理器以及一個新的
傳感器即“高度表”
現在在iOS上動作感應看起來就是這樣的
那麼它對你來說有什麼用呢？
如果你讓傳感器
實時訪問你獲得的數據實時訪問原始傳感器數據
以及在傳感器上構建的功能特性
如能夠給你提供設備的高度的設備動作
比如計步器再比如動作活動性
若是在有高度計平臺上 還可訪問原始
壓力、高度變化以及階梯步級這些數據
這就是來自傳感器的實時數據
但是動作協處理器能讓你做的
遠遠不止這些 沒錯
遠遠不止這些
你還可以每週七天、每天二十四小時訪問動作活動性
訪問計步器 在有高度計的平臺上
你還可以每週七天、每天二十四小時訪問階梯步級
現在在iOS上 你能用動作感應做的事情就是這些
那麼在Apple Watch上動作感應看起來是什麼樣呢？
Apple Watch上面同樣也有一顆協處理器
它上面還有一個加速計
這就意味着你同樣可以每週七天、每天二十四小時
訪問動作活動性以及計步器訪問除了這兩種數據之外
你獲得的實時傳感器數據
如果你在想 哎呀！這個看起來這麼眼熟
那麼Apple Watch上的動作
你看起來也眼熟 你看的沒錯
iOS上的Core Motion APIs在watchOS上也有了
不僅是動作Core Motion API iOS和watchOS部分
Core Motion APIs都表現得一樣
我們就是在兩個OSs上沿用了
這個特性
不過Watch基本上就是一個完全不同的平臺了
因此當爲Watch構建應用程序時
我們需要知道一些事情從頭到尾給你們講講
我們先來講一下動作活動性
動作活動性可以給我們提供上下文信息 
告訴我們用戶正在做什麼
可知用戶是否正在走路 
是否正在跑步 是否潛水 是否正在騎車等
你能夠獲得的等級非常依賴於平臺
非常依賴於它的使用方式
這裏簡單對你能夠在watchOS上得到的狀態進行一個總結
你可以注意到 你可以訪問
走路、跑步、騎車以及靜止狀態
這就是Apple Watch上的動作活動性
開發者早就想要訪問傳感器本身
提供通過這個熟悉的CMAccelerometer
API來訪問加速計
那些東西都在加速計上
不過因爲它是一個不同的平臺
我們還是需要記住一些
應該考慮的事
第一點你的app獲得的處理時間
可能是有限的
Watch上並沒有真正後臺處理方式
因此當你的app顯示在屏幕上時
你的app就在高速運行了
屏幕可能會因爲多種原因關閉
屏幕可能會超時
不過Apple Watch的屏幕是設計成了
只有當你在看它的時候屏幕纔會開啓
因此如果你不想看屏幕了
那麼屏幕關閉、屏幕關閉後你的app得不到
處理時間的可能性就非常大
考慮到這些情況
我想要談一些
最佳實踐
首先要把你的app設計成只有當app在屏幕上顯示時
你的app纔會期望數據
我知道說起來容易做起來難
不過還是要記住這一點
其次當你訪問一個流的時候訪問一個傳感器數據流時
你需要確保當你的任務被掛起時
也可以以一種優雅的方式處理你的任務
幸運的是可以通過NSProcessInfo
來實現這一點
如果你使用這個APIperformExpiring
ActivityWithReason你就可以在這個API中
把你的傳感器數據當成一個塊來處理
它就會通知你的塊通知你你的任務
就要被掛起了這樣你就可以採取適當行動
那是CMAccelerometerAPI
不過你們中有人想要的不僅僅是這些
事實上你想要長期訪問
傳感器數據
今天我很高興地告訴大家
有史以來第一次 我們開始提供訪問
歷史傳感器數據 歷史加速計數據
那麼你現在可以拿它做什麼？
它允許你訪問很長一段時間內的數據
相當長一段時間
你也可以訪問這個數據
即使你的app不是處於運行狀態
這樣的話 你就可以在這個長長的
傳感器數據流上運行你自己的定製算法
這很酷 我們也期待你們用它
來開發出很酷的apps
那麼你應該怎麼用它呢？
我們有一個新的API叫做CMSensorRecorder
這個API允許初始化歷史傳感器數據錄製
記住這點此API和其他的APIs一個很重要的不同之處
比如計步器以及動作活動性
其他的APIs並不需要你初始化任何錄製
對SensorRecorder說你確實需要對它進行初始化
數據錄製的頻率是五十赫茲
你最多可以錄製三天的數據
這就是SensorRecorder的使用方式
提到執行 我們應該這樣做
你首先要通過初始化recordAccelerometerDataFor
錄製數據 然後要提供一個
持續時間
一旦你完成這一步設備可能就會進入睡眠狀態
你的app可能會被掛起
沒關係
之後 用戶可能會回來並且啓動你的app
當用戶啓動你的app時你就可以決定是否查詢傳感器數據
通過查詢accelerometerDataFrom
當然你還需要指定一個時間段
然後指定的時間段的加速計的數據
就會返回回來
很明顯 這個時間段可以是
你錄製數據的時間的一個子集
好的 數據會被作爲一個
CMAccelerometerData對象序列返回回來
回想一下 我們提到過的
關於優雅地處理任務掛起的內容
你在這裏也會遇到同樣的問題
因此 當你處理這個很大的
歷史數據流的時候
你就需要訪問我們的老朋友NSProcessInfo
當你的任務就要被掛起時它會通知給你
如果你看一下加速計數據對象
它裏面不僅包括了你熟悉的加速度部分
而且還包括了一個startDate你就可以把這個它當做一個定位器
你可以從這個點開始確保下次你的app啓動時
向前進行查詢
這就是SensorRecorder的工作原理
這個很棒 不過正如你看到的那裏有一項需要考慮的事
不是 是兩項功率與性能
SensorRecorder是一個強大的API
但是能力越大 危險性也就越大
這裏的危險性就在於你可能沒有足夠的時間
來處理傳感器數據的大量的字符串
因此我再介紹幾個最佳做法
首先是 僅僅錄製 查詢你的app
需要用到的最短持續時間內的數據
如果app是一款鍛鍊身體你大概就不需要十二個小時的數據
你大概需要幾個小時的數據就夠了
你查詢的數據量越少
你的app就越能容易地獲取、處理
此外你也應該知道傳感器數據傳輸率的要求
數據是以五十赫茲的頻率提供給你的
但是除非你想要從那些數據中抽取出特性、需要更高的
傳感器數據傳輸率那麼你最好丟棄一些數據
處理較少的數據
只要採用幾項最佳做法你應該就沒問題了
Apple Watch上Core Motion的情況就是這些
你已經看過了我們有很多看起來眼熟的APIs
我們也可以訪問歷史傳感器數據
這個很棒 你們應該可以用它
來開發出很酷的應用程序
提到編寫Watch應用程序
我們今天上午確實舉辦了一個會議
現在就可以看到會議視頻了
會議剩餘的時間裏我想重點關注iOS 我先來講講
計步器上有什麼新情況
這就是你屬性的計步器
步數、距離
我們來快速回顧下
計步器的設計理念
是持續給你提供身體各個部位的行爲表現
無論是放在你的手中還是放到你的口袋裏
計步器的性能應該是一致的
即使速度不同計步器的性能也應該是一致的
計步器的一個很棒的特性是
它會適應用戶
因此使用計步器的用戶人數越多那麼通過自身的校正
它就能更好地理解用戶
在iOS 9上我們對計步器做了一個很大的改進
讓它儘可能地合併了GPS
我們爲什麼要這麼做？
原因在於你的app可能
已經訂閱了用戶的位置
你可能想要在用戶進行跑步的時候
繪製用戶的運動軌跡
當你這麼做的時候計步器檢測到
GPS數據可以用了
通過使用GPS數據就可以讓軌跡繪製的更精確
爲什麼這一點如此關鍵呢？
看看這個 這是我的一位同事在舊金山跑的一次步
舊金山是一座“城市峽谷”
有很高的建築物對任何GPS來說
環境都富有挑戰性
如果你看看這裏的這一段
GPS在這裏看起來非常靠譜
如果你依賴於GPS我們就可以對距離進行很好的估測
很好
但是如果你再看這裏不同的段
你就會發現在用戶的軌跡中用戶在閒逛
一路上有好幾個酒吧 所以...
但是這可能並不是這位用戶真實的跑步軌跡
所以說
計步器非常聰明 它知道在這裏
它就不應該繼續依賴GPS了
它應該繼續藉助於自身的基於步幅的
距離估計
如果你使用了計步器那麼你得到的最終結果
就非常一致這也就是爲什麼你應該使用
計步器的步數和距離的原因
今年我們對計步器的API做了一個很大的改進
在我們開始之前
我們先來回顧一個你們已經知道的特性 這是層數計數
層數計數有floorsAscended
還有floorsDescended
因爲這是計步器的一部分
這就是一個徒步功能 你必須實際邁步
才能把它用起來
也就是說 你需要在這裏
贏取授予的層數
讓我們更深入地看看 它到底是如何工作的
它有幾項要求
首先是 最低提升速率要求
還有一個步數要求
它們對我們意味着假如說 如果你進行了一次遠足
並且你走的很慢
那麼最終你積累的高度就會很多
但是你很有可能達不到提升速率要求
我們就不會授予你層數
但是如果你是在舊金山散步有一些非常陡峭的丘陵
那麼你就有可能達到一些層數
因爲步速要求 如果你使用了電梯
或者自動扶梯
你就不大可能會被授予層數
這就是iOS上層數計數的工作原理
現在輪到新的API了
這是“步幅”
長期以來開發者就要求我們提供“步幅”
我們很高興現在能提供了
當我們提起“步幅”我們指的是currentPace
這實際上是瞬時步幅
而不是在跑步一開始就估算出來的步幅
“步幅”是以時間單位內通過的距離來表示的
如果你想問爲什麼這樣表示而不是時間單位內的速度
你知道 因爲對於跑步者來說
步幅通常可以被類推爲走完一個已知的距離
需要的實際時間
在網站上關注了Apple Watch的更新情況
那麼這個步幅你看起來就可能很眼熟
這就讓我有點 妒忌了
計步器既有實時數據
又有歷史數據但是“步幅”是隻有你在進行
實時查詢時纔有的
別忘了這一點
我們爲什麼要提供“步幅”？
畢竟我們已經在計步器上提供了距離和一個時間概念
因此我們可以很容易地計算出步幅
這樣得出的步幅健壯性更高
假如說你想要有所區別
想從那些距離組塊中估算出步幅
也會向步幅中引入一個可接受的抖動量
計步器就可以對此進行處理 
確保步幅的估算是平滑的
此外你還可以通過回顧歷史組塊
然後算出步幅的平均數這一方法
嘗試獲得平滑的步幅
不過你這樣做的代價就是如果用戶步幅發生了改變
你就無法很快做出響應
通過CMPedometer得出步幅能夠對變更很快做出響應
響應性也很高
因此平滑性和響應性就你應該通過CMPedometer
使用步幅的理由所在
這是步幅
步幅有個“近親”叫做“步調”
我們現在在計步器上有了步調
那麼什麼是“步調”？
步調指的是你的步行速率或者換其他話來說
就是你的腳接觸地面的頻率
對於跑步者來說步調非常重要
現在你就能直接通過計步器
在你的apps內提供步調了
是的！
我們對計步器做的變更就這些
這裏快速看看各個平臺內的特性
注意看Apple Watch上也可以用
計步器了
我們接着來談談壓力感應
通過高度表傳感器可以獲得壓力數據
這是CMAltimeter API的一個組成部分
它給你提供了兩樣東西
第一樣是原始壓力數據這就是傳感器自身獲得的壓力
然後進行過濾後的數據
第二樣就是相對高度
我們來深入談談高度
當我們說到“相對”我們指的是相對
提供的第一個樣本而言的
這就意味着 你從高度表上獲得的
第一個樣本的相對高度爲零
後續的樣本都會以此爲基線
那麼要使用高度表我們需要知道些什麼呢？
對於層級的變更來說高度表再合適不過了
而對於人體層級的變更來說高度表就差強人意了
因此也許你不應該使用高度表來感知
用戶是否擡起了他們的胳膊
差錯會讓你失望的
對於傳感器來說這些情況都非常具有挑戰性
這一點不要忘了
其中一項是環境
即使位置不變 環境也可能隨着時間推移發生改變
這樣就會讓你誤以爲高度發生了變化
舉例來說 舊金山最近的冷鋒
就可以讓壓力發生很大的變化
足以讓我們以爲你的高度發生了變化
比如說變化了十五米
建議你不要長時間使用
傳感器
你的設備所處的外套也可以影響到壓力
如果你給你的手機使用了剛性密封防水外套
那麼你就指望不上壓力傳感器了
說到API的使用對你來說它應該很眼熟
API可以給你提供壓力和高度
你訪問這個傳感器的速度能有多快呢？
當你第一次進行請求時第一個樣本需要大約
二點六秒可以得出來
之後的每次樣本以步調的形式出現用時一點三秒
你從高度表上獲取數據的速度就這麼快
總結一下Core Motion已經出現在了
多個平臺上
iPads上有了 iPhones有了
Apple Watch上也有了
在Apple Watch上提供不只那些
看起來眼熟的APIs我們還提供歷史傳感器數據
計步器自身也有了一大堆很酷的更新
它的精確度更高了並且有了兩個新的APIs
即步幅和步調
計步器現在是個多面手了對於你的健身apps來說
這是個好消息
從傳統意義上說Core Motion已經被用於
遊戲、手勢以及健身
對於Core Motion來說可用的應用程序有很多
Core Motion也可以被用來曾強其它的apps的智能
我要把加布裏埃爾請上來請他給你們解釋下這個概念
大家好
能到這裏我感到十分激動
作爲一名開發者 我之前從未參加過蘋果全球開發者大會
但是無論我在哪裏工作我總是在六月份的第一週內
在家裏用電腦觀看全部會議視頻
我瞭解到了很多信息
但是其中讓我頭疼的是
信息量太大了
即使在一個會議視頻中要吸收的東西也太多了
當你看完後你可能把過去的一小時內
學到的東西全都忘光
我在這裏要做的就是把阿尼爾剛剛向你們
提到的事情拿出來
看看你們到底想在你們的應用程序中把它們用起來
希望能讓你記住這些東西
Core Motion非常棒因爲它不僅能夠用於
健身語境或者遊戲語境
今天我要向你們展示的是不管你的app屬於
什麼類別 你都可以把它用起來
Core Motion能怎樣爲你效勞呢？
Core Motion允許你檢測用戶正在做的事情
你可以知道用戶是否正坐在他們的車裏
是否在跑步是否在騎自行車
就像我們之前看到的你可以知道他們的步幅變動
我們可以幫你讓它更加平滑
藉助這些變動
我們無需給用戶發送提示請他們告訴我們
就可以知道他們所處的語境
這樣用戶的體驗就更加神奇了我們的apps也就更智能了
其次 我們還能讓用戶參與進來
因爲每隔幾秒鐘就有更新我們就可以知道用戶的步幅
發生了怎樣的變動
我們可以知道他們高度的發生了怎樣的變動
相應地我們可以快速更新我們的app UI
最後我們還可以“反射返回”
我知道“反射返回”聽起來很蹩腳
但是對於Core Motion來說很棒的一點就在於
通過始終保持它的運行我們可以讓你的app看起來好像
一天二十四小時、一週七天都在努力工作
實際上工作的是協處理器
我們可以看到過去一週內你的活動性更新情況
你的計步器更新情況
這一點很贊
我記住了這三點因此我決定來編寫一款
音樂播放器
不是想與Apple Music或者類似產品進行競爭
Core Motion怎樣可以讓我的app的體驗
更加迷人、更有魔力
很多音樂應用程序都有這個播放列表的概念
我想聽到不同的音樂當我在我的車裏時
我想聽到廣播而如果我是在學習或者
正在努力工作可能就想要聽一些古典音樂
鍛鍊身體時也有不同的app播放列表
通過檢測某個用戶正在做什麼
我的音樂應用程序就可以相應地改變我的播放列表
而無需讓用戶進行選擇
類似地我們知道了步幅的變化我們就可以說
嘿！你正在進行慢跑可能是因爲你剛纔跑到太快
並且爬了一座非常高的山我們就可以給你放一首
讓人興奮的歌曲 讓你有一種成就感
或者可以試着與你的步調相匹配
下面就到了“反射”部分
關於“反射”兩點很棒
尤其是在我的音樂應用程序
這個語境下
第一件事我可以看看數據瞭解用戶當前正在做的事情
嘿 你已經有一段時間不跑了
可能你很快就要跑也可能你想使用我們的
應用程序來跑步
並且聽一下你的播放列表
一天結束時 我們想要刺激我們的用戶
回到我們的app中來
我想用戶可能想要知道他們昨天
在車裏聽的播放列表是什麼如果我們能實現的話 那就太棒了
通過查看活動性信息然後把它與我的播放列表信息進行匹配
我就可以把那個信息提供給用戶
記住了這三件事
我們來看看我的應用程序實際是什麼樣子的
當用戶打開app時我們僅僅想把一個基本的
播放列表展示給他們
對我來說我現在是站着不動 對吧？
我們來一些低強度的音樂
不要太劇烈
當我們檢測到用戶正在加速
可能是他們開始進行鍛鍊了
我們要對播放列表進行變更
給他們一些更加歡快的音樂
就是在這裏app開始與用戶接洽起來了
我們看看發生了什麼變動也許是步調發生了變動
也許是高度發生了變動我們就可以接洽並且跟隨
這些變動 這樣當用戶加速時我們就可以給他們
一個強度更高的播放列表
然後我們就想要切換環境了
當用戶開車時我就想在他們早晨上班路上
把他們的podcast或者他們經常聽的任何節目
提供給他們
這是“檢測”部分以及“接洽”部分
接下來是“反射”部分
我想把這個信息分成幾個有趣的部分
這樣用戶就可以向後滾動看看他們的“歷史”
我可能想把這個與用戶在不同時刻聽的
播放列表連接起來
既然我們已經知道了app會是什麼樣子的
我們再來看看動作活動性的實際應用
看看要實現這些功能我們需要什麼樣的APIs
首先我們有“檢測”部分
這個部分是我們希望能夠一直運行的
我們想知道用戶是否正在開車
用戶是否正在走路用戶走路的速度有多快
那麼以此我們需要什麼？
活動性更新情況以及計步器更新情況
我們想要監控這些情況 讓它們更平滑
看看哪個信息可以使得我們判定語境
其次我們有那個“接洽”部分
如果用戶正在走路或者跑步對於我來說
我想知道他們的速度有多快
看看步調 我就可以知道他們是否
爬了一座高大的丘陵這樣我就可以給他們播放一首
歡快的歌來慶祝他們的成就
爲此 我需要計步器更新情況
這些情況裏麪包括步幅、步調的變更
以及高度更新情況
然後我們還有“反射”部分
就像我之前說過Core Motion很棒的是
它們可以一天二十四小時、一週七天都爲我努力工作
因此我就可以進行回顧獲取那些歷史活動性查詢
以及計步器查詢然後把這個信息分成幾個有趣的部分
既然我已經仔細看了我的app長什麼樣
看了“檢測”、“接洽”以及“反射”部分
也知道了我需要使用Core Motion哪一部分的APIs
我要向你們展示下我到底是如何編碼的
最起碼要讓你們看看我的應用程序的數據模型
我要打開Xcode
但是在我走到這邊的電腦之前
先提醒你們一下屏幕上會出現大量的文本
別被嚇跑了
示例代碼現在已經放到網上了
現在請勿打開
請僅僅關注
我爲你們高亮顯示的部分
我之前已經說過了那裏會有大量的文本
如果僅看那幾個東西然後會議結束後
回去看看示例代碼
你就能記住我重點講的東西而不是想要
一次做太多的事
我已經說過了 文本會很多提醒過了
就像我說過的屏幕上有大量的文本
我只想讓你們記住三個部分
就是“檢測”、“接洽”與“反射”
記住了這些事情那麼我要仔細看看
我的應用程序的數據模型中的這些東西
這個就是“數據模型”部分
剩下的部分供你以後自己探索
我要做的第一件事是“檢測”
這就要求獲得活動性更新情況以及計步器更新情況
我們來看看這些活動性更新情況
很好 文本很多 是吧？
我要做的第一件事就是校驗下看看這個硬件上
能否使用活動性
就像阿尼爾之前提到的活動性並不總是可用
因此在我們查詢任何更新情況之前我們需要進行這些校驗
我們要做的第二件事是 使用
startActivitiesUpdateToQueue
API
對於我而言我只是進行了一個簡單的NS操作查詢
然後我要對數據進行處理
動作活動性就頻繁顯示出來了
你可以自己決定怎樣對數據進行平滑操作
對於我而言當某個用戶跑步時
他們可能會遇到紅燈停下處於半靜止的狀態
我不想從跑步時的播放列表轉移到非常舒緩的播放列表
然後這樣 來來回回
往往復復
所以我想做的是自己指定應用程序的平滑操作至於你的應用程序
最適合什麼樣的平滑操作我就交給你來決定了
讓我們再來看看計步器的更新情況
PedometerUpdatesAPI看起來也非常眼熟 你看到的
我也要校驗下 看看計步是否可用
即使我們假定活動性可能是可以用的
那也並不意味着計步也同樣可用
假定計步真的可用 那麼我要startPedometerUpdates
這個API可以允許我們提供一個日期
如果你所處的是一個更日記化的語境你可能就想
在你的日期一開始 啓動這些更新
就我而言
我想在我的應用程序的生命週期內看到這些更新
因此我現在就要啓動這些更新
有一件非常重要的事情我需要指出
我們可能會收到一個錯誤
關於Core Motion很棒的是
它們會做出這樣的事：喂！是否想讓此app使用爲你彈出的活動數據？
但是用戶可能會第一次打開你的應用程序
然後允許你訪問活動數據但是他們可以隨時回到
“偏好”中把授權刪除
在那種情況下當你試圖接受更新情況時
我們就會拋出一個授權錯誤
那麼你就需要平滑地處理這些問題
提示用戶進到應用程序設置中
再次對你的應用程序進行授權
我在這裏不去設置中了但是我會彈出一個簡單的UI
提醒視圖 提示要去設置
這就是“檢測”部分
接下來我要做的就是“接洽”部分
就我而言 當我看到活動性更新時
我還想啓動、終止高度表的更新
我要在這裏這樣做
我進行了平滑處理看看用戶什麼時候在跑步或者在步行
在那個例子中我對高度的更新情況很感興趣
很好現在你可以在這裏看到一個主題了
我要做的第一件事
就是校驗下 看看高度更新是否可用
假定它是可用的 我會
startRelativeAltitudeUpdatesToQueue
我創建了一個隊列
然後我要對數據進行相應的處理
我再校驗一次 看看是否有錯誤
如果沒有錯誤那麼我要在我的應用程序中把那個數據
當成最優服務來處理至於你的數據該如何進行
最優服務處理 那由你決定
接下來我要做的就是因爲我對持續的高度更新
不感興趣 因此要確保當我不是處於
跑步或者走路時把它停掉
很好 在這裏這個API非常直接
我校驗下可用性
我來stopRelativeAltitudeUpdates
現在我知道了 當我說我們想要與用戶進行
“接洽”時我們也會同時看到
計步器的更新情況
你可能記得在我的應用程序的生活週期內
我已經看到了計步器的更新情況 因此
我無需再次啓動、停止它們
我可以把這些融合到高度更新中來用
給我提供我的應用程序需要的東西
也就是通過音樂來激勵用戶
這就是“反射”部分
那麼在這裏我要看看活動性的更新情況
以便我以有趣的部分的形式提供這些東西
就像我之前給你們看的那樣
很好 我希望你們看的 第一件事
就是我們可以查詢日期後的所有的活動性的更新情況
就我而言我想看看過去一週的情況
即使我們不看那一週的應用程序的使用情況
我們也可以獲取所有的數據
然後把它們放到一起
就我而言我對那個數據進行下處理
讓它們爲我以有趣的部分的形式顯示
我等不及想看看你們自己
會怎麼做了
又出現了 我知道唱片損壞了 對吧？
我要對這個錯誤進行相應的處理
就我而言一旦我找到有趣的步行片段
我就會給出全部的額外的
歷史計步器信息
那麼我在這裏要做的我要爲某個給定的活動性片段
請求計步器的更新情況
第一件事就是queryPedometerDataFromDate
我提供了一個開始日期還提供了一個結束日期
就我而言我已經把數據放到程序段中了
那麼我來看看這些段的開始和結束部分
這裏我要指出的第二件事是
如果我想要進行任何UI變更
那麼我就需要把這些變更發送到主隊列
如果你在你自己的應用程序內
不這麼做 那麼你就會遇到問題
所以請這麼做吧
我要向你們展示的就是這些想你的應用程序添加活動
總共花了我十分鐘左右 因此
當你回去後 給你的應用程序做同樣的事
就是這麼容易
現在我真的想讓你們看看這個app但是我不會在這裏
跑一圈或者開車
我要向你們看看過去今天內我的歷史數據
讓你們看看“反射”部分是怎樣以有趣的圖段的形式
來組織數據的
但願這是一臺iPhone
太好了！這是我的音樂活動應用程序
你可以看到我的活動強度不大
因此 我現在處於低強度模式
現在我再來看看我的歷史記錄情況
我要從昨天早上開始
讓你們看看我一天的情況
我昨天所做的就是圍繞莫斯康走路
昨天我醒來後我決定快速騎行一段時間
我所做的就是...app已經搞定了
替我把這些放進了一個有趣的圖段
然後我朝着公交車走去意識到有點晚了
於是就開始跑 最終上了公交車
你可以在這裏看到我在這裏的就是步行的圖段
有英里信息有步幅信息
層級上升與下降這些都替我放進了
那些有趣的組塊中
如果我是在某個單元上實際開發一款音樂應用程序
那麼我可能會把當時我聽的播放列表
放到那個圖塊上
有一件事我要指出 話說今天
當我在莫斯康附近 走路的時候
我沒有出現任何層級的上升與下降
這是因爲我今天比較懶
到處都乘坐了自動扶梯
我希望你們也注意到了這一點
這就是我的基礎的音樂應用程序
我來總結下
我希望你們喜歡這個演示
我儘量把重點放在少數幾個事情上
這樣你就可以記住並且用到你的應用程序上記住
這裏有“檢測”片段 使用活動來檢測
某個用戶正在做的事情
而不是讓用戶告訴你他們正在做什麼事情
通過活動性、計步器、高度表推送更新與用戶進行“接洽”
以及“反射回去”
把那些歷史查詢智慧地運用起來
如果你有更多的問題
請到“開發者論壇”看一看
請務必看看音樂活動
它應該就在開發者入口處
如果是一般的諮詢請聯繫我們的福音傳道者
此外還有一些會議與本次會議相關
它們也值得你去看看
如果你參加了蘋果全球開發者大會
你可能已經看過或者還沒有看過HealthKit演示、
Cocoa Touch演示
如果你錯過了這些演示或者你現在在家
那麼請去網上看看這些視頻
同樣 我也希望你們去看看
Core Location的演示
如果你能夠真正把活動數據、健康數據
位置數據組合起來那麼你就可以創建一些絕妙的語境
來讓你的應用程序更上一層樓
我迫不及待想看看你們會在App Store上何應用程序
謝謝 太謝謝了