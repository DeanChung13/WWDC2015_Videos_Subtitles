Apps的安全
你们好 谢谢
我是伊凡是Apple公司安全及隐私策略小组的负责人
今天我们来谈一谈安全
事实上今天将主要谈的是设备安全
现在你们也知道我们设备的安全性能非常高
有些安全性能是OSX或IOS所特有的是两个平台兼有的
我们将继续开发这些性能
你们也将看到我们在这领域会不断地创新
今天我会抽些时间和你们简单谈谈网络安全
一谈到网络安全你们大部分人都会想到
HTTPS我们多数也是在浏览器的锁定图标中见过它
在过去网站会使用HTTPS和TLS
来传输一些敏感信息
在我们看来信用卡信息已算不上敏感信息
所有的用户信息才是真正的敏感信息
而作为开发者认为不敏感的信息在用户看来可能就是敏感信息
TLS真正重要的一点也是我们通常想不到的
就是它不仅会保护网络运行的信息安全
而且还保护连接的完整性
网络面临的威胁已经变了
已不再是戴着黑色面罩躲藏
在网络的某些角落去窃取你信用卡数字那些人
事实上 用户是想保护自己免受其他威胁攻击
例如 网络服务供应商
他们向每个应用中插入跟踪标头信息 
或直接记录浏览历史以进行广告定向投放
所以 我们认为TLS在2015年的最主要职责就是保护消费者
网络信息安全
但是TLS仍有漏洞
很多服务器仍使用TLS 1版本
这个版本太老了已有16年的历史了
连最新版本TLS 1.2也已经有7年的历史了
TLS 1.2包含了很多重要的协议加密升级功能能够抵抗我们
正面临或未来要面临的各种威胁
事实上 连TLS1.2版本也有漏洞
根据TLS的运作方式如果黑客
黑掉一个服务器并窃取你的TLS密钥
那么他们就可以破解服务器曾经加载过的加密数据
毫无疑问这是非常恐怖的
不过有个正向加密的软件可解决这一问题
有了正向加密即使黑客黑掉一个
服务器窃取了TLS密钥他们也只能用密钥
破解服务器未来加密传输的数据
不能破解已加密的历史数据
这样非常棒 因为它能减少庞大的网络
加密数据负荷
TLS支持正向加密正向加密过程通过
使用密码组完成而密码组是由启动
服务器所必须的加密基元组合而成
所以 你们的服务器无需运行TLS只需运行TLS 1.2
为了获得正向加密你们必须对其进行设置
我为什么告诉你这些呢引用蒂姆的话我会让你们读一下
我们必须修正这问题
为了帮助你们不出问题
我们将向你们介绍AppTransport Security
它是这样运行的
在OSX EI Capitan或ISO9打开你们的应用
默认它这样就不会连接到不受保护的HTTP链接   
它们会连接失败而且程序生成的任何TLS连接
也不会按照我刚才描述的最优做法
这就是带有正向加密的TLS 1.2
任何已知的不安全加密基元均无法被允许
密钥尺寸也有最低要求
现在你可能不会完全按照这些要求去做
立即遵守这些要求不过没关系
你可以在Info plist中根据每种情况
指定例外情况或进行全局覆盖
但是就整个行业而言我们必须尽快做到
让用户信息无法接触到未加密网络
我们需要你们的帮助
谢谢大家下面由我的同事皮埃尔给你们谈谈
System IntegrationProtection
谢谢伊凡
嗨 大家好 我是皮埃尔•奥利佛•马特尔
担任Apple公司沙盒技术部的技术经理
今天我和大家谈谈 SystemIntegration Protection
这是我们在El Capitan引进的
新型硬化机理
在探究细节之前我想退一步
给大家说说我们要达成什么目标
在Apple公司 我们团队的使命是确保用户能享受到
产品带来的极致体验我们相信
我们可以保护他们的
个人资料即使资料被
恶意软件甚至更糟糕的
编写软件攻击伤害也会很小
为了达到这个目的我们已设计和集成
各项安全技术正如伊凡上面所提到的
这些年研发的iOS和 OS X
研发所采用的一种
配额和原则就是深度防御概念
使用的关键原则你可能也
有所耳闻 那就是安全与层有关
你不能把所有鸡蛋都放在同一个篮子里
不要指望单层保护设备就完事大吉了
因为不管这个保护层
防弹性 防水性 抗震性有多好
一旦坏掉就
功亏一篑
相反 你们应该依靠多层保护
原则上有了多层安全保护
不仅能推迟黑客入侵时间
还能限制被攻击范围
到现在为止 深度预防
这个古老的军事概念被用来捍卫世界
各地城池已有几百年历史了
我知道你们很喜欢琐事
所以 我可以告诉你们这个概念是
塞巴斯蒂安•德•沃邦在17世纪70年代正式提出的
那时 他受法国国王邀请
在全国建造堡垒
以保卫王国安全
你们可能不熟悉这个人
但你们肯定见过他的作品
这就是他其中的一个城堡设计图
你们可以清楚地看到这几个保护层是
用来抵挡不同的袭击 
它们可以拖住入侵者然后通过
易守难攻的窄道把入侵者抵挡在外面
我们来看看如何把这个原理用到OS X的安全模型上
我不知道你们是不是这样反正我是经常梦想着
建造自己的堡垒就是这样
我们在这之上设置自己的安全层
我们从底部的网闸开始
网闸要确保从网上下载到
用户设备上的应用是经开发者签字的
开发者拥有Apple公司发布的开发者身份证明
否则程序将无法运行
网闸要配合系统的其他机制运行
如恶意软件检测机制
这样才能有效
防止恶意软件大规模地入侵我们生态系统
第二层是沙盒
回到Lion 我们引入了App沙盒
我们强制性规定所有从App Store下载的应用都要使用App沙盒
对于从App Store以外下载的应用
比如开发者ID程序也强推荐使用App沙盒
沙盒是一种控制机制
它能确保即使你们的程序被入侵了
攻击者也只能访问用户提供的资料
而不能窃取用户资料
也不能破坏其他系统
如果你们成功绕开前两层那么就来到了第三层
经典的POSIX权限方案
在这里 你们的应用
只能在系统授予用户的权限下运行
所以它既不能访问不同用户资料
也不能修改root用户对系统进行的配置设置
最后 我们把Keychain 看成第三层上面的一层
它是用来保护用户密钥的
它通过加密和应用分离
确保只有在第一层存储秘密的应用
才可以返回此层
所以当你们看到整个方案后
你们会明白很多事情
首先 网闸阻止下载到机器上的不信任代码
但是它还不是真正的控制机制
因为启动网闸不会阻止任何应用运行
而且它也不会保护机器已有代码
例如它不会保护OS自带的代码
所以 虽然它可能是
我们平台最有效的控制机制
但沙盒机制是OS X的唯一选择
我们没有要求规定每个过程都
必须在沙盒中运行
最后当你们看到POSIX层时
会发现大部分的Mac系统 都是单用户系统
而系统的用户实际上是临时管理员
一直在行使管理特权
root账户通常要么处于保护状态
要么保护密码较弱甚至没有密码
事实上如果真的有密码而且你想要的话
用户也可能会给你
而且 当你最后root之后实际上已经能控制
整个机器 因为root文件可以禁用设备上所有的安全措施
它能替换内核扩展
替代提供其他安全服务
甚至可以扰乱运行中的Keychain层
所以 事实就是一旦代码在Mac运行
那么很容易进行root
一旦root成功你就可以完全控制机器
也就是说
任何一段恶意代码实际上就是一个密码
或一个可以完全
控制你机器的漏洞
这表明我们还需要另一个层
一个能消除机器root权限的层
从而在默认情况下保护系统
好像是Apple安装到机器上的一样
硬盘和runtime都进行安装
因为我们现在正讨论限制root权限
所以我们需要提供一套配置机制
防止root被入侵
而且还能重设root权限
这就是SystemIntegration Protection
这是一个新的安全策略
适用于系统中的每个进程
不管这个进程是否
具备附加特权或者在沙箱外运行
该策略能为磁盘或runtime中的
系统组件提供额外保护
而且系统如果安装Apple签字安装包
二进制只能被安装程序
或者软件更新机制修改
这样系统二进制文件就能免受
runtime附件和代码注入的风险
在探究细节之前
我们先看一下这是如何影响开发者的
好消息是如果你的应用
是App Store下载的 那么应用就不会受到此类风险
<br/> 因为App Store指南
和沙箱策略可以加以保护
阻止此类行为
然而 如果你们的应用不是来自App Store
而且需要修改系统的二进制文件
或修改磁盘框架如果需要将储存信息安装到系统位置
那么应用就会受到影响
我将在这里解释一下
什么是系统位置
最后如果你们的应用需要检查系统进程中
任一进程的的内存状态
或需要在系统运行的进程中或跨进程
插入库或进行调试
那么让我们看看新机制的核心
首先我会了解下新文件系统限制
我们在Capitan系统引入该文件系统
然后再看一下它是如何扩展到
新runtime保护进程
最后了解一下该系统与
内核扩展开发流程的关系
以及它是如何影响kext开发者的
然后由于这个功能是能够被完全禁用的
接下来向你们展示一下如何禁用
那就得首先讲讲文件系统
我们想做到的就是保护系统存储信息不被修改
为达到这一目的 安装程序会标在文件安装过程中
标记系统内容
我们在Capitan系统中加入了新的文件系统标记
之后在运行过程中内核能阻止任何
企图篡改受保护文件
或文件夹的行为除非该行为是
特别授权的进程发出的
Capitan系统只有几种此类进程
内核还会防止储存私密内容的块设备被读写
而且还会阻止
私密内容被篡改
现在 必须记住一点是
这只适用于root文件和
当前运行OS的启动卷
所以你应该把它看成系统运行时的
一种自我保护机制
因为我们现在要保护磁盘上的系统存储信息
所以你们必须明确区分
系统内容和第三方内容
在Capitan 这张图标左侧
所有位置都被默认为系统位置
这意味着系统会阻止你在那里进行读写
即使是安装程序包下载的也一样
因为多年来我们一直建议你们
不要读写到这些位置
所以你们当中受影响的人应该不多
如果你们的安装包把存储信息放到这里
Capitan应该不会出现大的故障
如果你想把所有的软件都安装在/System路径下
那么你需要将此存储信息移到subfolder of /Library下
如果是系统内的存储信息或(tilde)/Library
如果是用户存储信息
或者如果你想把软件都安装到/bin或者/sbin
或者/usr目录下
比如/usr/bin, /usr/lib或者usr/libexec
那么你要把储存信息移到
/usr/文件夹下的适当位置 因为这里是
第三方唯一可访问的路径
然后需要注意的是
最佳的存储信息位置仍是/Applications路径
这是因为这个位置是用户可见位置
方便用户把应用拖入
垃圾箱并删除存储信息
要注意的是 当用户升级 
Yosemite install到Capitan install时
安装程序会会把系统内
发现的第三方存储信息移到系统外
所以为了不影响这些用户
务必确保把存储内容尽快转移出去
现在我们看一下runtime保护
能够改变runtime中的进程行为
就相当于能够改变
改变磁盘上的二进制文件
如果想保护磁盘上的二进制文件
或系统存储信息我们必须保证
不能插入代码或改变
这些系统进程的行为
为了实现该目的我们在进程结构中
引入一种新的限定标记这种标记的内核适用于每个单一进程
如果磁盘上的
主要可执行文件受程序保护
或写入Apple特别授权的主要可执行文件
那么内核将在准确时刻做出标记
之后系统将自动区别
该受限进程和常规进程
一方面如果task-for-pid
和processor-set-tasksSPI需要调用受限进程
那么它们将无法运行
并且会设置EPERM为0
这意味着你的产品需要依靠
系统进程才能运行
例如Finder 你需要向Finder插入代码
否则它再也无法运行了
如果你插入exec 那么二进制文件将导致子进程受限
然后系统将自动重新设置
子进程的mach特殊接口
这样意味着你将 
无法控制子进程
如果你插入一个特权工具
然后想要保持控制那么它也将不能运行
连接器将忽视所有保护二进制文件的dyld环境变量
所以在执行过程中如果你在进程中
将库插入二进制文件
连接器忽视新库
最终如果使用dtrace的话所有针对
受限进程的dtrace探针将无法匹配
这样就无法看到进程和内核的互动过程
你们也将检测不到受限进程存储空间
也就无法检测到内核内存
当然这适用于调试器LLDB
如果你们试图调用LLDB作为root
并连接到Finder这样也无济于事
现在接下来是kext签字程序
你们肯定也知道所有带Kexts开发者ID证书的扩展
都是Apple公司发行的
扩展必须安装到/Library/Extensions路径下
新鲜的是因为我们把kext签字程序放置在
System IntegrityProtection之下进行保护
所以kext-dev-modeboot-arg就被淘汰了
如果你是kext开发者你就需要用
未签字的内核扩展进行测试
你需要禁用保护我马上给你们演示一下
这也意味着为了禁用kext签字
你在那里可能也看不到这个注释行 
它已经无法运行了
下面我们来谈一下配置机制
我们坚信这个新机制对保护对我们的用户至关重要
话虽这么说但我们也意识到
人无法完全操控他们的机器
因为我之前就说过
它保护着磁盘上的内核
需要所有的内核扩展都必须被签字
而且因此kext开发者
也不能如愿以偿地测试未签字kext
正因如此它被完全弃用了
配置存放在NVRAM配置中
这意味着可以适用于整个机器
所以如果你有几个Capitan安装程序
它们都会有同样的配置 
而且OS安装程序也是如此
所以当你从seed 1升级到seed 2再升级到GM之后
配置也将保持不变
我们安装时不用每次都进行重新配置
现在 因为root实际上已经设置了NVRAM
在这里我们不能相信root
也就是我们不能在OS系统上安装配置机制
我们要进行转移 把它安装在Recovery OS下
所以NVRAM也就只能在Recovery下进行配置设置
如果你想改变配置
你需要在机器的Recovery OS中进行重启
在引导画面下按Command+R键进行开机启动
然后在Utilities菜单中 
运行安全配置应用
检测SystemIntegrityProtection盒
应用 然后重启
记住我刚才描述的那些类型很有可能
在以后的seed版本中会发生变化
所以务必阅读注释了解新的操作步骤
我们总结一下到到目前为止所谈论的内容
System Integrity Protection是一种新的策略
适用于系统的每个进程
Apple公司将其安装在磁盘和runtime上
通过限制读写系统位置访问权限
以及防止runtime连接和代码插入
从而保护系统
安装程序能有效地把第三方存储内容
转移到系统位置之外
所以要确保尽快转移你的存储内容
否则 就只能自认倒霉了因为 你会找不到内容
最后可使用Recovery OS配置机制禁用该功能
这就是我为大家呈现的内容谢谢大家
下面我把舞台交给安德鲁
谢谢你 皮埃尔
我是安德鲁·惠利在Core OS 安全功能组负责管理数据安全组
你可能听过app传输安全
以及app在连接状态下
是它如何保护传输中的数据的
我将会讨论数据安全的不同保护方式
我会点击Keychain然后存储用户信息
之后看一下Touch ID看看你是如何权衡
程序安全与程序便捷的
在这个过程中我将体验一下现有的技术
和iOS 9的新功能以及如何配合使用
从而提供适合你们app的安全保护等级
我们首先快速浏览一下Keychain
你可以把它看作是专业的数据库
通过增加行数来储存数据我们称为Keychain项目
然后通过属性进行查询
为了优化隐私我这里说的隐私包括密码
标记 cookie或秘钥
如果你有成千上万兆字节信息要储存
那么可以考虑使用基于文件的数据保护或者通过API进行
批量加密方法 如Common Crypto
然后将密钥存储在Keychain中
尽管这些SecItem API已经存在很长时间了
但它仍是最好的秘密存储工具
包括新Swift apps中的密码
这里我们这里有个秘密 想通过SecItemAdd
把它存在Keychain中
为了这么做我们构建了一个字典
这个字典包括秘密信息
还有今后查询所必须的某些属性
和应当采取的保护措施
这种创建包括描述项目查询方式字典的方式
也可用于查询删除 
更新条目和其他API我后面会谈到这一点
有关Keychain API的信息
2013年的WWDC的709会议还有很多
所以在编写访问Keychain代码的时候你们要注意以下几点
首先处理用户隐私信息是代码安全信息当中
真正敏感的一个环节
所以你们应该把它分成小而简单又可测试的小单元
通常可以使用wrapper class
不管是直接使用还是使用wrapper
请确保你的应用
受到最高级别的保护
我们描述和讨论的数据保护级别
指的是通过加密访问项目的次数
例如当设备在iOS8系统上
被锁定的时候我们添加了After First Unlock
再说一遍这功能早就有了当你必须在背景下
访问这些项目时候你就可以使用它
比例你开发的是一款VoIP应用
iOS 9不支持随时访问
所以你们必须着手把这些项目移到到更高级别位置
我们已开发出WatchKit 2所以你的Watch app现在可以
访问SecItem API虽然在Watch上
输入用户全名和密码的这种用户体验并非是你想要的
如果你的Watch app显示的是配对iOS设备的数据
那么你只需发送内容
而无需使用永久证书
如果你的Watch app确实需要直接访问证书
那么与其保存完整的用户名和密码
不如让服务器发送一个许可证或cookie
从而获得权限访问
那些Watch app所需要的主要功能内容
不仅仅在Watch上提示用户名
和密码非常不方便
在过去的几个版本我们引入了几种技术减少密码提示的频率
第一个就是共享web证书
我们都了解也都喜欢Safari保存的密码
以及提示和储存密码的方式
有了iCloud Keychain密码就可以同步 自动保存
到所有设备上
但是 常见的是一个服务器
同时拥有一个网站和一个iOS app
所以 如果这些程序都能共享
Safari保存密码那就太棒了
有了共享web证书就可以办到
这些是你们在登录
或注册程序要添加的代码
SecCreate SharedWebCredential Password将
返回一个随机字符串和Safari保存的密码格式一样
用于提示密码
你们能调用SecAddSharedWeb Credential
告知Safari需要将新用户名和密码
自动输入到特定域中
在iOS 9我们已经实现这个功能
方式是在模拟器上运行时
降低安全检查等级
我们来体验一下
我从注册程序开始
然后添加刚刚展示过的代码
然后进入Safari设置
确保已启用名称和密码自动输入
搜索Safari等待结果
我们回到程序上来
页面上显示用户名称和密码提示
共享网络凭据允许应用
显示一个选择器这个选择器列出了Safari在这个域中
保存的所有账号
每当用户选择一个账号 用户名
和密码就会根据Shared Web Credential
返回到已完成处理的程序中然后就可以登录了
如果你想要在设备上使用这个功能
而不是只在模拟器上使用你就需要在你的应用上
添加一个授权你可以在Xcode的权限标签页的
相关域部分中进行该操作
你需要将JSON文件放在服务器中
不过你可能已经有了
毕竟它跟Handoff和iOS 9应用链接中
所用的是同一个
我们对iOS 9做了一个改变
让适应性更好这个改变是
你不再需要分别签署该文件
它将由安全TLS连接所保护
我提到过Safari通过iCloud Keychain保存密码
但是你们也可以在自己的应用中直接使用它
想象你有一个iOS iPad
iPhone和OS X App Store app
你想要只登陆一个就同时登陆所有这些程序
对于能够用于多种设备的应用密码
你们可以考虑将同步性属性
添加到所有的SecItem调用
你还需要考虑几件事情
比如 删除一个项目就会将所有位置的该项目同时删除掉
所以请确保你只在正确的情况下进行该操作
这里还有几个注意事项你可以在SecItem.h.
查看如果你有兴趣想了解更多
关于iCloud Keychaine安全性的信息
或者想知道同步的密码如何保护个人隐私
不被其他用户看到请查看iOS 安全白皮书
会议结束有个链接
我重申下 Keychain存着你所有的秘密
而纯文本文件或plist文件已经没有密码
所有请尽可能保护好它们
并且如果合适的话请使用SharedWedCredentials
比如我们的Keychain 以便在用户的设备上将进行同步
同时尽量不用密码提示
所以虽然有些秘密能在多台设备上同步但你只想它们
在一台设备上安全待着
这时候iCloudKeychain就派上大用场了
安全通讯应用就是一个例子
这种应用的加密是设备对设备而不是用户对用户
我已经提到过的不同保护级别中
有一个ThisDeviceOnly级别
项目会被备份但只能被
恢复到它们最初始的设备中
去年 我们增加了WhenPassCodeSet级别
确保项目始终处于
本地设备密码保护之下
你可以使用AccessControl表
以对项目进行更为严密的控制
既然我们在谈论
保护特定设备证书的事情
那么让我们来看一看iOS设备的安全域
用户空间也就是应用运行的空间
以及皮埃尔提到过的能够提供进程分离和
其它安全功能的内核
不过它也提供了很多很多其它OS工具
这意味着它有着一个相当强大的防攻击服务
我们在iPhone 5s中加入了Secure Enclave
Secure Enclave是独立运行的在设计之时
始终将安全性视为最高原则
我们在其中放置了Touch ID来保护隐私
以及你的指纹信息的安全
我们将KeyStore从内核
移进Secure Enclave就是它
控制着Keychain项目的密码
以及数据保护
所以让我们现在着重了解一下Touch ID
我们把它视为一种安全技术
但它真正出色的是它的便利性
你可以不用总是输入密码就可以解锁你的设备
不过它本身也可以带给我们一些安全上面的好处
比如如今拥有复杂的长密码变得更加容易了
它能够提高数据保护的安全性
或者现在你的手机能够立即上锁
从而减少被攻击和解锁状态的时间
在iOS 8我们提供了一些API所以当你在安全性和便利性之间
做权衡的时候你可以使用应用里的Touch ID
但为何是这两者它们如何不同？
若想知道首先你得了解Touch ID
和生物特征识别的工作机制
幸运的是 这很简单它可以归结为一个条件句
如果伸出的手指和登记的手指相匹配
就要做出反应
造成差别的原因是这种反应是什么
以及反应在哪里发生
让我们从LocalAuthentication开始谈起
当一根手指被放在Touch ID感应器下
在Secure Enclave里得到匹配
匹配的消息
会通过Local Authentication发送到你的应用
从而成功计算出布尔值 
你的应用就是这样对那条信息的做出反应的
进程虽然在Secure Enclave开始
但最终安全决策却是
用户空间里的应用做出
所以你什么时候可能想要通过Local Authentication
使用Touch ID呢
想想你的应用如果你有任何安全障碍
比如输入密码来确认一项操作
即使用户已经登录了
使用Touch ID会更容易
或者你可能不想要总是使用Touch ID 
但在验证过程中采取额外的措施这会是一个大障碍
比如你可以在查看敏感数据前
做出提示
或者在某个操作之前做出提示比如永久性删除账户
一种模式是在你的应用流中
做出一个Touch ID提示
但这可能导致这种情况发生那就是 用户刚刚用Touch ID解锁
但没过多久应用又会发来提示
在iOS9 我们添加了TouchIDAuthentication
AllowableReuseDuration这是在Local Authentication
环境下的一项属性
你可以使用它来指定一个窗口
如果用户最近刚用Touch ID
来解锁他们的设备在期间
你就不需要再次提示
那是让你的策略宽松一些的一种办法
但或许你想让你的策略在某些情况下
更严格一些
比如 对一个新登记的指纹做出反应
同样也是一项新技术我们有evaluatedPolicyDomainState属性
这是一个完全隐秘的值
代表了已登记指纹的当前情况
你真正能做的是实时做一下比较
如果它改变了那就是设置里的已登记指纹中
有一个指纹信息已经被添加或移除
如果你察觉到并且它适合
你的应用或许你可以再次提示
看看用户是否还想使用应用上的Touch ID
或者输入一个密码来重新启动它
那么我们来看看iOS 9的本地授权有哪些新功能
我已经提到了AllowableReuseDuration
和PolicyDomainState
另外你可以取消本地授权功能 
并且如果用户现在会收到Touch ID提示 
那么取消后系统会自动为用户选择取消
并关闭对话框
evaluateAccessControl让本地授权可以
和Keychain Access ControlLists一同使用我将稍后介绍 
也会给出很多示例和示例代码
所以说起Keychain AccessControl Lists
这是第二种方式你可以在应用内使用Touch ID
然后用来保护特定的Keychain项目
这是我们的结构图
和之前一样 Touch ID在安全区域内发生匹配
但是这次匹配信息会从安全区域内
发送到Keystore
只有在此之后你的Keychain项目才会
被释放回到应用中
所以如果你想要对特定的文件进行保护的话
这么这种方式非常有用
另外这也充分利用了安全区域的
额外保护功能
也许有时候你在权衡应用的安全性
然后你发现有些东西你实在不想要保留
不要每次或者经常收到提示
你可以使用AccessControl Lists进行保存
然后使用Touch ID进行保护从而提供更好的用户体验
或者你可以将其用来
增加已经保存的项目的安全性
你可以通过指定两项安全属性创建访问控制列表
第一是数据有效保护类型
指的是需要使用密码
才能访问安全区域里的数据接下来你可以制定一项策略
该策略指定了一种情况 
只有这种情况满足后安全区域才会释放项目
单单访问密码是无法查阅的
因此我们来看看策略类型
第一种是UserPresence
这种策略会提示需要Touch ID匹配 
然后返回到设备密码
另外你也可以直接跳转到DevicePasscode
iOS 9的新功能是TouchIDAny
这种策略需要Touch Id匹配但是不会有反馈
另外更为严格的新策略是TouchIDCurrentSet
使用该策略只有在保存项目时候使用的登记指纹组
不发生变化的情况下
项目才会释放
我想要详细谈谈这种策略
因为你的应用可能用得着
因为这种策略提供多要素授权
当谈到多要素的时候你可能经常会想到
比如像是密码还有其他一些你可以想到的东西
比如物理标记智能卡
或者是iOS设备的安全区域和Touch ID
如果你保存一个文件 
然后使用TouchIDCurrentSet策略进行保护 
如果无法成功进行Touch ID匹配那么是无法访问文件的
而且没有其他方式可以访问
另外如果对手有设备密码 
他们无法访问设置登记指纹 
这样对手就无法访问文件了
最后的两种策略ApplicationPassword
和PrivateKeyUsage
让你可以执行高级功能这是Touch ID之上的高级功能
第一个是ApplicationPassword
为了说明让我们看看WhenUnlocked类别的项目
是如何被加密保护的
同样的即使是最好的门锁如果你忘带钥匙还是白塔
因此如果加密数据和秘钥保存在同一个地方
那么数据实际上没有得到保护
数据保护和Keychain安全实质上是使用设备密码保护
而且密码已经保存在我们已知的
最为复杂的系统之中即用户的大脑
用户记得密码可以使用密码访问设备
在我们输入密码然后会生成一把密码钥匙
这把秘钥能破解项目密码
现在让我们看看受ApplicationPassword保护的项目
只有设备密码往往是不够的
你的应用还必须有自己的密码
因此我们生成了密码钥匙
而且只有在设备密码和应用密码都正确后
密码钥匙才会授权给Keychain访问项目
正如我提到的如果你将密码保存到设备上或者应用中
这实际上并没有提供额外的保护功能
因此你必须考虑除了设备你还可以将密码保存在哪里
也许是服务器服务器可以执行自己的策略
决定何时反馈密码到你的应用上
或者也许你有物理配件而且你也觉得用户有物理配件
如果配件无法向你的应用提供密码 
那么就无法破解Keychain项目
而你也无法访问数据
如要使用ApplicationPasswords 你需要创建AccessControl列表
和本地授权指令
第一个列表会要求你使用应用密码
第二指令会自行设定密码
然后你可以取下这二者然后添加到
Secltem Call字典之中
这是使用本地授权指令
和Keychain项目的例子
那么这就是ApplicationPassword
最后的新策略指的是私人秘钥用途
这是比较早的表格 
在这里我们可以看到一个Keychain项目从安全区域内的KeyStore
被释放出来返回到了应用中
很明显如果你将密码用于登录服务器的话就需要它了 
但是这暴露了你的密码让用户空间存在潜在危险
所以如果有办法在安全区域内 
保存密码的话就不妙了
那么这还有用吗？ 
而且这里使用的是不对称加密技术 
这里我们有的不仅仅是单一的秘钥 而是一组秘钥
公共秘钥并不需要任何保护 
但是私人秘钥就必须要好好保护了
使用这种策略会用到SecKey APi 
而且具体说的话几分钟说不完 
这里就略过了但是这里有概括图可以看看流程
如果你设定某些新的额外参数的话 
调用SecKeyGeneratePair会让
私人秘钥保存到安全区域中
但是公共秘钥仍会返回到应用中保存
如果你尝试检索使用SecItemCopyMatching的私人秘钥 
那么你会得到一个参数 
但是无法在安全区域之外获得实际的数据
因此实际上该如何使用呢？
好 你也许有一些数据是需要保留的
因此你可以调用SecKeyRawSign然后将数据传输到安全区域
如果你已经设置了使用Touch ID保护私人秘钥
那么只有在成功指纹匹配后
私人秘钥才能用于访问数据
之后再返回到应用中
因此也许你会想使用该策略作为第二要素加强Touch ID的安全性
我会给你看个示例流程但是请注意
在编写加密协议的时候这里有很多复杂的细节
所以请别把这个示例当成标准
首先在登记流程中
你会生产一个密钥对
然后将公共秘钥和用户一般登录信息发送到服务器上
服务器会将公共秘钥和用户信息相关联并记录
这就是登录流程
之后当服务器想要验证你是
从同一台物理设备登录的 
服务器会向应用发送一个挑战 
挑战反过来会调用SecKeyRawSign
用户这时候会进行指纹识别 
然后匹配Touch ID
这样挑战就通过了然后应用会将挑战返回到服务器
之后服务器会使用之前保存的公共秘钥
进行验证签字
再具体展开看一下细节
通过验证的秘钥是Elliptic Curve P256
私人秘钥则无法提取即使在保护情况下亦不可
然后应用是RawSign和RawVerify
总结一下 我已经大概讲解了Keychain的情况
以及大家可能会用到Keychain的情况
我谈论的技术是我们应当避免让用户被密码提示反复骚扰
看看这两个TouchID API 本地授权
和KeychainAccess Controls
另外之前说的新的高级功能大家可以开发出新的东西
我们已经添加到iOS 9的新API之中了
App密码以及安全区域保护的私人秘钥
我总是非常期待
看看大家会如何利用新的API
开发出什么更好玩的
也想看看大家是如何在应用中权衡安全性和便捷性的
另外线上还有其他更多的资料
包括我之前提到的iOS安全白皮书
周四的NSURL网络会议上还会有更多的关于
应用传输安全的内容
另外欢迎明早和周四上午来到
安全私人实验室会见我们
非常感谢大家