00:00:20.387 --> 00:00:23.390 
歡迎來到自動佈局迷宮 第二部分

00:00:23.690 --> 00:00:24.358 
大家好

00:00:24.992 --> 00:00:26.660 
感謝來參加講座
我是傑西

00:00:27.094 --> 00:00:28.662 
負責AppKit中的

00:00:28.762 --> 00:00:30.697 
Auto Layout和
Foundation框架部分的工作

00:00:31.098 --> 00:00:33.200 
佈局是我們
設計應用時

00:00:33.400 --> 00:00:36.603 
最基礎的工作之一
Auto Layout 

00:00:36.670 --> 00:00:39.573 
非常乾淨簡潔
但是有時似乎

00:00:39.640 --> 00:00:42.176 
也有些神祕
今天我來介紹

00:00:42.242 --> 00:00:44.978 
Auto Layout
不爲人知的幾方面

00:00:45.045 --> 00:00:46.613 
並會做詳細解釋

00:00:47.314 --> 00:00:49.850 
這是兩部分講座
的第二部分內容

00:00:49.917 --> 00:00:50.951 
這裏是我們

00:00:51.018 --> 00:00:52.920 
準備介紹的
話題簡介

00:00:53.420 --> 00:00:55.055 
我希望先從
佈局循環講起

00:00:55.622 --> 00:00:59.059 
大家可能都知道
怎樣配置用戶界面

00:00:59.593 --> 00:01:03.163 
但是Auto Layout
還是有些內容存在未知

00:01:03.497 --> 00:01:04.831 
可以進行配置

00:01:04.897 --> 00:01:07.835 
運行應用
獲得佈局

00:01:08.368 --> 00:01:11.205 
希望這就是你
想要的佈局 但如果不是

00:01:11.271 --> 00:01:12.873 
很難知道
該從哪裏下手

00:01:13.073 --> 00:01:15.943 
我想了解
中間這裏出了什麼問題

00:01:16.043 --> 00:01:18.579 
也就是怎樣從視圖中
獲得約束

00:01:18.645 --> 00:01:21.148 
再到將框架
安排到這些視圖中

00:01:22.482 --> 00:01:25.319 
這裏是整個流程的
高度概述

00:01:25.385 --> 00:01:27.855 
先是應用高興地運行
循壞 如此往復

00:01:28.288 --> 00:01:30.657 
直至約束改變
使得計算出的

00:01:30.724 --> 00:01:33.227 
佈局需要
有所不同

00:01:33.660 --> 00:01:36.330 
這會導致需要安排
延遲佈局過程

00:01:36.730 --> 00:01:38.699 
當佈局過程
最終出現時

00:01:38.999 --> 00:01:40.133 
我們經過層次

00:01:40.200 --> 00:01:41.835 
並且升級
視圖的所有框架

00:01:41.902 --> 00:01:45.672 
這有點抽象
我來舉個簡單例子

00:01:46.473 --> 00:01:49.877 
也就是說 當我們
不勾選頂部的複選框時

00:01:50.244 --> 00:01:52.779 
我們將調整約束
收縮窗口

00:01:52.846 --> 00:01:55.382 
並隱藏底部的
複選框

00:01:55.449 --> 00:01:58.318 
開始時 框架是
這樣的

00:01:58.652 --> 00:02:01.522 
調整約束時
佈局引擎關於

00:02:01.588 --> 00:02:03.390 
每個內容的位置概念
都已發生改變

00:02:03.457 --> 00:02:05.125 
但是UI還沒有更新

00:02:05.526 --> 00:02:07.561 
接着當佈局過程
繼續時 

00:02:07.861 --> 00:02:10.797 
UI實際上的改變
是與引擎認爲的方式相匹配

00:02:11.932 --> 00:02:13.534 
我們來談談
約束改變

00:02:14.568 --> 00:02:16.803 
你所創造的
約束變成了

00:02:16.870 --> 00:02:19.840 
數學表達式 
保存在Layout Engine中

00:02:20.340 --> 00:02:23.744 
因此約束改變
實際上是可以影響

00:02:23.810 --> 00:02:26.980 
這些表達式的任何內容
這其中包部分

00:02:27.047 --> 00:02:28.549 
很明顯的內容
例如激活或

00:02:28.615 --> 00:02:31.451 
關閉約束
改變優先級

00:02:31.518 --> 00:02:34.788 
或約束的常數
但是也有不那麼明顯的

00:02:34.855 --> 00:02:36.757 
例如操控
視圖層次

00:02:36.823 --> 00:02:38.926 
或是重新配置
部分控件

00:02:38.992 --> 00:02:41.728 
因爲這些可能會
間接導致約束改變

00:02:43.330 --> 00:02:45.399 
那麼 約束改變時
會發生什麼

00:02:46.333 --> 00:02:47.434 
首先會發生
的是 

00:02:47.501 --> 00:02:49.236 
Layout Engine
會重新計算佈局

00:02:49.570 --> 00:02:52.773 
表達式由這些變量構成
以代表諸如

00:02:52.840 --> 00:02:56.076 
特定視圖的原點
或大小尺寸

00:02:56.410 --> 00:02:58.111 
當我們重新計算
佈局時

00:02:58.178 --> 00:03:00.480 
這些變量可能會
收到新的值

00:03:00.981 --> 00:03:02.516 
出現這些情況時

00:03:02.583 --> 00:03:03.984 
它們所代表的視圖
會得到通知

00:03:04.117 --> 00:03:05.853 
並將父視圖
標爲需要佈局

00:03:06.286 --> 00:03:09.423 
這實際是導致
安排延遲佈局過程

00:03:11.358 --> 00:03:13.660 
如果來看
這裏的示例

00:03:14.361 --> 00:03:17.364 
大家會在這裏看到
框架實際會在

00:03:17.431 --> 00:03:20.234 
Layout Engine發生改變
但在視圖層次中尚未變化

00:03:21.602 --> 00:03:24.438 
當延遲佈局過程
繼續時

00:03:24.771 --> 00:03:27.808 
目的當然是要
將位置不對的視圖

00:03:27.875 --> 00:03:29.109 
進行重新排布

00:03:29.243 --> 00:03:31.512 
我們完成後
所有內容都各就各位

00:03:32.779 --> 00:03:35.082 
過程一詞實際
有些不太恰當

00:03:35.148 --> 00:03:37.551 
這裏出現的
是兩個過程

00:03:38.485 --> 00:03:40.587 
第一個是爲了
更新約束

00:03:40.654 --> 00:03:42.656 
其中的想法是
要確保

00:03:42.723 --> 00:03:45.559 
約束是否有任何
未決改變

00:03:45.626 --> 00:03:48.228 
在我們需要費力通過
視圖層次 對所有視圖

00:03:48.295 --> 00:03:51.231 
重新定位之前 這些問題
現在就出現了

00:03:51.999 --> 00:03:54.968 
接着 第二個過程發生在
視圖重新定位的時候

00:03:56.203 --> 00:03:58.005 
我們來談談
更新約束

00:03:58.805 --> 00:04:01.008 
視圖需要顯性請求

00:04:01.375 --> 00:04:03.844 
來調用升級
約束方式

00:04:03.911 --> 00:04:06.780 
這和setNeedsDisplay
的運作方式大體相同

00:04:07.347 --> 00:04:08.982 
調用
setNeedsUpdateConstraints

00:04:09.383 --> 00:04:12.853 
不久之後 
將會調用升級約束方式

00:04:13.554 --> 00:04:17.858 
的確 所有這些都是
讓視圖爲

00:04:17.925 --> 00:04:20.027 
下一個佈局過程
有機會

00:04:20.194 --> 00:04:23.997 
及時修改約束
但實際上並不常常需要

00:04:25.199 --> 00:04:27.501 
所有的初始約束設置
都應該理想地出現在

00:04:27.568 --> 00:04:28.936 
Interface Builder
中

00:04:29.002 --> 00:04:30.470 
或者如果當真
發現需要

00:04:30.537 --> 00:04:32.706 
在程序中
分配約束

00:04:32.940 --> 00:04:34.942 
viewDidLoad
這樣的位置則更好些

00:04:35.242 --> 00:04:37.244 
升級約束只是
針對需要

00:04:37.311 --> 00:04:39.112 
定期重複的工作

00:04:39.880 --> 00:04:42.182 
而且還
非常簡單

00:04:42.249 --> 00:04:45.886 
當發現有必要時
相應修改約束即可

00:04:47.054 --> 00:04:48.856 
不過如果將邏輯
從另一個

00:04:48.922 --> 00:04:50.958 
相關代碼中拿開 
並將之移至

00:04:51.024 --> 00:04:53.794 
稍後會執行的
不同的方式中

00:04:54.161 --> 00:04:56.597 
代碼就會很難繼續
更難去

00:04:56.663 --> 00:04:58.398 
繼續維護
更難以讓

00:04:58.465 --> 00:05:00.300 
其他人理解

00:05:01.235 --> 00:05:03.704 
那麼在應用中
更新約束

00:05:04.371 --> 00:05:06.106 
最後 會影響到
性能表現

00:05:07.140 --> 00:05:09.309 
如果發現單純
相應改變約束

00:05:09.376 --> 00:05:10.577 
速度太慢的話

00:05:10.644 --> 00:05:13.380 
升級約束可能
會幫你解決問題

00:05:13.881 --> 00:05:16.517 
結果就是在更新
約束內部改變約束

00:05:16.583 --> 00:05:17.951 
實際要比

00:05:18.085 --> 00:05:20.120 
在其他時候
改變約束快得多

00:05:20.187 --> 00:05:22.656 
原因在於引擎
可以分批處理

00:05:22.723 --> 00:05:26.426 
在這一過程中
發生的所有約束改變

00:05:26.994 --> 00:05:29.363 
通過調用整個數組約束 
來激活約束

00:05:29.429 --> 00:05:32.366 
而不是單獨激活
每個約束 

00:05:32.432 --> 00:05:34.768 
這樣會
實現

00:05:34.835 --> 00:05:36.370 
同樣的
性能優勢

00:05:38.172 --> 00:05:40.474 
如果有個視圖
根據某種配置調整 

00:05:40.607 --> 00:05:43.110 
需要重建約束 
我們所發現的

00:05:43.377 --> 00:05:47.181 
一個常見模式
會非常有用

00:05:47.881 --> 00:05:50.651 
結果就是這對
具有這類需要

00:05:50.717 --> 00:05:53.053 
配置視圖而不是 
屬性的客戶端非常常見

00:05:53.353 --> 00:05:55.756 
這對視圖而言
非常容易

00:05:55.822 --> 00:05:58.258 
最後是需要對約束
多次重建

00:05:58.325 --> 00:05:59.793 
這會產生需要
無用功

00:06:00.260 --> 00:06:02.863 
在這類情況下效率則要高很多
即視圖要調用

00:06:02.930 --> 00:06:06.466 
setNeedsUpdateCon
straints接着當升級

00:06:06.867 --> 00:06:09.403 
約束過程出現時 
可以重建

00:06:09.469 --> 00:06:11.138 
一次約束
以便與

00:06:11.238 --> 00:06:12.940 
當前配置
相匹配

00:06:14.474 --> 00:06:17.010 
在任何情況下
一旦這一過程完成

00:06:17.077 --> 00:06:19.246 
我們瞭解約束均已
更新 我們可以

00:06:19.313 --> 00:06:21.315 
在重新定位後的視圖
基礎上繼續

00:06:22.282 --> 00:06:25.552 
我們在這裏需要
從上到下穿過

00:06:25.619 --> 00:06:28.121 
視圖層次我們將調用layoutSu
bviews

00:06:28.188 --> 00:06:30.224 
到標爲所需
佈局的任何視圖上

00:06:31.058 --> 00:06:33.660 
在OS X上 這種方法
稱之爲佈局

00:06:33.727 --> 00:06:34.962 
不過思路是一樣的

00:06:35.495 --> 00:06:39.266 
接收方的目的是
重新定位子視圖

00:06:39.633 --> 00:06:41.802 
不是讓接收方
重新定位自己

00:06:43.637 --> 00:06:46.507 
因此框架執行的工作
是將通過

00:06:46.573 --> 00:06:48.275 
Layout Engine

00:06:48.342 --> 00:06:50.310 
讀出子視圖
然後進行安排

00:06:50.744 --> 00:06:54.047 
在Mac上 我們用的是
setFrame 在iOS

00:06:54.114 --> 00:06:56.116 
是setBounds和setCen
ter不過思路是一樣的

00:06:57.551 --> 00:06:59.219 
那麼如果再來看
這個示例

00:06:59.286 --> 00:07:01.588 
你在這會看到
UI升級與

00:07:01.655 --> 00:07:03.957 
Layout Engine的
框架相匹配

00:07:05.292 --> 00:07:07.528 
還需要注意的是
layoutSubviews:

00:07:07.728 --> 00:07:10.597 
很多人爲
獲得某種自定義

00:07:10.664 --> 00:07:13.700 
佈局將之覆蓋
如果需要這樣做<c.blue>的話

00:07:14.101 --> 00:07:16.570 
當然可以
但是需要了解一些內容

00:07:16.637 --> 00:07:18.805 
因爲這裏所做的事情
很容易給你

00:07:18.872 --> 00:07:19.873 
帶來麻煩

00:07:19.940 --> 00:07:21.675 
所以我想
詳細介紹一下

00:07:23.377 --> 00:07:26.213 
如果需要
某種佈局

00:07:26.280 --> 00:07:27.714 
不能使用
約束來表達

00:07:27.781 --> 00:07:31.118 
那麼應該只是將
layoutSubviews覆蓋

00:07:31.185 --> 00:07:32.986 
如果可以發現使用
約束來實現的方法

00:07:33.053 --> 00:07:36.056 
那麼將非常強大
而且不會有麻煩

00:07:37.891 --> 00:07:42.529 
如果選擇覆蓋
需要牢記

00:07:42.596 --> 00:07:45.632 
我們此刻是處於
佈局形式當中

00:07:45.766 --> 00:07:47.968 
部分視圖
已經安排

00:07:48.035 --> 00:07:50.671 
部分視圖還沒有
但是可能很快就會<c.blue>有

00:07:51.104 --> 00:07:53.774 
因此 這是個
微妙的關頭

00:07:53.974 --> 00:07:56.243 
需要遵循一些
特殊的規則

00:07:58.178 --> 00:08:01.815 
其一是需要
<c.blue>觸出發超類執行

00:08:02.182 --> 00:08:04.351 
出於若干簿記目的
我們都需要這麼做

00:08:05.252 --> 00:08:08.255 
而且可以關閉
字樹中的

00:08:08.322 --> 00:08:11.792 
視圖佈局
但是需要在調用

00:08:11.859 --> 00:08:13.360 
超類執行前
完成這項工作

00:08:16.797 --> 00:08:20.767 
其二 若不想調用setNeeds
UpdateConstraints

00:08:20.834 --> 00:08:22.536 
存在一個升級
約束過程

00:08:22.603 --> 00:08:23.637 
我們走一遍

00:08:23.737 --> 00:08:27.007 
完成
結果錯過了

00:08:27.174 --> 00:08:28.742 
如果還需要它時
已經太晚了

00:08:29.610 --> 00:08:32.346 
同樣還要確保
並未在子樹以外

00:08:32.412 --> 00:08:34.181 
關閉視圖佈局

00:08:34.381 --> 00:08:37.049 
如果這麼做
很容易會導致

00:08:37.116 --> 00:08:39.186 
佈局反饋循環
這樣執行

00:08:39.453 --> 00:08:42.089 
佈局的做法
實際會導致佈局

00:08:42.155 --> 00:08:43.090 
再次變髒

00:08:43.457 --> 00:08:45.425 
那麼我們會
周而復始 停不下來

00:08:45.492 --> 00:08:46.860 
這對誰都不好

00:08:48.629 --> 00:08:52.232 
大家會常常看到在layoutSub
views覆蓋內

00:08:52.299 --> 00:08:54.468 
需要調整約束
以便將視圖

00:08:54.535 --> 00:08:57.704 
放在正確的
位置 這樣也可以

00:08:57.771 --> 00:08:59.239 
但還是要
非常小心才行

00:08:59.673 --> 00:09:01.208 
在調整約束時 

00:09:01.408 --> 00:09:03.944 
很難預料在層次中
的其他視圖

00:09:04.011 --> 00:09:05.546 
會不會
受到影響

00:09:05.946 --> 00:09:08.015 
因此 如果在修改
約束 很容易偶然間

00:09:08.081 --> 00:09:11.351 
在子樹之外
關閉了佈局

00:09:13.120 --> 00:09:15.656 
在任何情況下 
假設一切順利

00:09:15.822 --> 00:09:18.125 
佈局循環在這裏
完成 所有內容

00:09:18.192 --> 00:09:21.061 
都各就各位
約束改變就已完全應用了

00:09:22.362 --> 00:09:25.032 
關於佈局循環
需要記住幾點<c.blue> 首先

00:09:25.465 --> 00:09:27.668 
不要指望調整約束時 
視圖框架

00:09:27.734 --> 00:09:28.836 
會立刻改變

00:09:28.902 --> 00:09:31.138 
我們所經過的
全過程是關於

00:09:31.205 --> 00:09:32.506 
稍後會發生什麼

00:09:33.040 --> 00:09:36.276 
如果發現
需要覆蓋layoutSubview

00:09:36.677 --> 00:09:39.046 
則要非常小心
避免佈局反饋循環

00:09:39.112 --> 00:09:41.148 
因爲調試過程
並不容易

00:09:42.850 --> 00:09:45.919 
接下來我會聊聊
Auto Layout怎樣和

00:09:45.986 --> 00:09:47.421 
Legacy Layout系統互動

00:09:48.922 --> 00:09:52.125 
傳統而言我們通過
設置框架定位視圖

00:09:52.793 --> 00:09:54.695 
然後就有了
autoresizingMask

00:09:54.761 --> 00:09:57.931 
以規定視圖
在父視圖改變大小時

00:09:58.498 --> 00:10:00.000 
應該怎樣調整大小

00:10:00.267 --> 00:10:03.403 
接着在Auto Layout
用約束實現所有目的

00:10:03.704 --> 00:10:06.073 
實際上 子框架
不會按照所預期

00:10:06.139 --> 00:10:07.341 
方式進行工作

00:10:07.407 --> 00:10:10.410 
你仍可以設置
視圖框架 但是...

00:10:11.011 --> 00:10:13.180 
它可以移到
所放置的位置

00:10:13.547 --> 00:10:15.782 
不過 如果佈局
過程繼續

00:10:15.849 --> 00:10:19.520 
框架從Layout Engine
複製框架內容

00:10:19.586 --> 00:10:21.321 
並在視圖中應用
框架可能隨時被重寫

00:10:21.788 --> 00:10:23.257 
導致有時

00:10:23.323 --> 00:10:26.159 
需要設置
框架

00:10:26.226 --> 00:10:28.695 
例如 如果覆蓋
layoutSubview

00:10:29.429 --> 00:10:31.498 
可能會需要爲
這些視圖設置框架

00:10:32.666 --> 00:10:34.768 
幸好 這裏有
<c.blue>有個旗標

00:10:35.269 --> 00:10:38.438 
名爲translatesAutoResizingMask
IntoConstraints

00:10:38.505 --> 00:10:41.041 
是有點拗口
不過功能也如文字所述

00:10:41.108 --> 00:10:43.243 
它可以使視圖按照
Legacy Layout

00:10:43.343 --> 00:10:46.413 
的狀態下表現是在Auto
Layout的環境下

00:10:47.314 --> 00:10:51.218 
因此 如果在有這個旗標的
視圖中設置框架

00:10:51.585 --> 00:10:53.720 
框架實際上會
生成約束

00:10:53.787 --> 00:10:56.456 
並在 Layout Engine中
執行這一框架

00:10:57.257 --> 00:11:00.360 
這意味着你可以
隨時按照自己的想法

00:11:00.427 --> 00:11:02.596 
設置框架
還可以依賴Auto Layout

00:11:02.663 --> 00:11:04.131 
把視圖保留在
所放置的位置

00:11:05.465 --> 00:11:08.569 
此外 這些約束
實際上執行了

00:11:09.002 --> 00:11:10.504 
autoresizingMask的
行爲

00:11:10.571 --> 00:11:13.507 
例如如果有
部分應用

00:11:13.574 --> 00:11:16.844 
並未升級到
Auto Layout 你需要

00:11:16.910 --> 00:11:18.512 
依賴自動重新調整大小的行爲

00:11:18.879 --> 00:11:20.681 
它應仍按照你所
希望的方式行爲

00:11:22.082 --> 00:11:25.519 
最後 通過實際運用Auto
Layout Engine 

00:11:25.586 --> 00:11:28.889 
來執行設置的框架
使之可以使用

00:11:28.956 --> 00:11:32.259 
約束定位
其他視圖相對與這個視圖的位置

00:11:33.327 --> 00:11:35.395 
因爲設置了框架
你不可以在周圍

00:11:35.462 --> 00:11:38.932 
移動視圖
但是如果沒有告知

00:11:38.999 --> 00:11:41.468 
Layout Engine這個視圖
應該所處的位置

00:11:41.535 --> 00:11:44.938 
那麼一旦提供約束爲參考
就會出現問題

00:11:45.005 --> 00:11:48.509 
你會看到尺寸大小
或原點和零點衝突

00:11:48.575 --> 00:11:51.411 
如果不希望出現這種效果
這類行爲會

00:11:51.512 --> 00:11:52.946 
<c.blue>會非常奇怪

00:11:54.181 --> 00:11:58.585 
那麼這裏需要注意的是
當計劃

00:11:58.652 --> 00:12:00.687 
使用約束
定位視圖時

00:12:00.754 --> 00:12:02.055 
你需要確保
這是關閉狀態

00:12:02.122 --> 00:12:03.290 
如果是在Interface
Builder中

00:12:03.357 --> 00:12:04.458 
構建UI 它會處理得很好

00:12:04.525 --> 00:12:07.494 
並妥善設置
這個旗標

00:12:08.028 --> 00:12:10.364 
但是如果是在用編碼
分配UI

00:12:10.430 --> 00:12:12.165 
這會默認爲是
開啓狀態

00:12:12.232 --> 00:12:14.735 
之所以這樣
是因爲有許多代碼

00:12:14.801 --> 00:12:16.470 
會分配給視圖
並希望按照

00:12:16.537 --> 00:12:18.172 
一定方式來執行

00:12:19.473 --> 00:12:22.910 
所以是默認開啓狀態
如果通過編碼分配UI

00:12:22.976 --> 00:12:24.845 
並且忘記
關閉這裏

00:12:24.912 --> 00:12:27.247 
這會導致一系列
意想不到的問題

00:12:27.814 --> 00:12:29.550 
我們來看一下
如果忘記會怎樣

00:12:30.350 --> 00:12:32.486 
這裏是個很簡單
的代碼

00:12:32.553 --> 00:12:34.555 
我們分配一個按鈕
並進行配置

00:12:34.621 --> 00:12:36.590 
然後生成
兩個約束來

00:12:36.657 --> 00:12:39.092 
定位這個按鈕
頂部10點

00:12:39.259 --> 00:12:40.994 
距離左邊10點

00:12:41.061 --> 00:12:42.596 
這非常簡單

00:12:42.663 --> 00:12:44.231 
但是運行一下
結果卻是這樣

00:12:44.765 --> 00:12:46.667 
窗口太小
沒有按照

00:12:46.733 --> 00:12:48.735 
預想來執行
按鈕也不見了

00:12:49.770 --> 00:12:52.206 
會全都噴到
控制檯上

00:12:53.073 --> 00:12:56.210 
實際上這說明
存在問題

00:12:56.276 --> 00:12:59.613 
大家看到的是NSAutoresizingMask
LayoutConstraint

00:12:59.880 --> 00:13:01.782 
這是佈局約束類
是框架

00:13:02.216 --> 00:13:03.584 
爲有需要設置

00:13:03.650 --> 00:13:07.354 
translatesAutoResizingMask
IntoConstraints 的視圖而生成的

00:13:08.722 --> 00:13:11.325 
這裏實際發生的情況
是因爲我們忘記

00:13:11.592 --> 00:13:15.195 
清理旗標
框架爲按鈕上的

00:13:15.262 --> 00:13:16.897 
初始框架生成
約束

00:13:17.264 --> 00:13:19.900 
框架爲空 尺寸和原點
也都是零值

00:13:20.467 --> 00:13:22.936 
所以沒什麼用
不過當我們添加

00:13:23.003 --> 00:13:24.738 
約束 想把按鈕定位
在10,10的位置

00:13:24.805 --> 00:13:26.707 
就會出現真正的問題

0,0和10,10兩個位置


00:13:29.910 --> 00:13:32.246 
因此 Layout Engine
突然無法滿足

00:13:32.312 --> 00:13:35.148 
約束的要求 就會導致
出現意想不到的問題

00:13:36.483 --> 00:13:39.920 
如果返回代碼
加上一行

00:13:39.987 --> 00:13:42.589 
清理旗標
效果就會好得多

00:13:43.891 --> 00:13:46.627 
我們得到想要的佈局
按鈕的位置

00:13:46.693 --> 00:13:49.062 
也沒問題
窗口的表現也正常

00:13:50.597 --> 00:13:52.799 
需要記住的是

00:13:52.866 --> 00:13:55.536 
translatesAutoResizingMask
IntoConstraints 

00:13:55.602 --> 00:13:58.672 
通常都不會用到
這個旗標

00:13:58.739 --> 00:14:00.807 
但是如果有視圖
需要通過直接設置

00:14:00.908 --> 00:14:04.178 
框架來定位
這就會很有用

00:14:04.912 --> 00:14:07.181 
而且 如果計劃
用約束來定位

00:14:07.247 --> 00:14:09.883 
需要確定這是
關閉狀態

00:14:09.950 --> 00:14:11.752 
如果你沒有使用Interface
Builder的話

00:14:13.787 --> 00:14:15.989 
接下來我會聊聊
約束生成

00:14:16.990 --> 00:14:20.394 
我覺得這更容易
只要看看

00:14:20.460 --> 00:14:22.229 
我們剛剛在
屏幕上的代碼就明白

00:14:22.629 --> 00:14:24.331 
特別是
結尾的那一段

00:14:24.398 --> 00:14:25.933 
我們構建的是
這些約束

00:14:26.934 --> 00:14:30.304 
這和在Auto
Layout開始之初我們就有的約束

00:14:30.370 --> 00:14:31.872 
工廠方法
完全一樣

00:14:31.939 --> 00:14:33.106 
而且相當有效

00:14:33.273 --> 00:14:35.275 
但是用起來
有點麻煩

00:14:35.943 --> 00:14:37.678 
代碼相當冗長

00:14:38.111 --> 00:14:40.013 
不是很好
讀出來

00:14:40.080 --> 00:14:42.049 
我們這裏真正想
表達的是

00:14:42.115 --> 00:14:44.218 
我們想把按鈕
定位在距離頂部10點

00:14:44.351 --> 00:14:45.752 
距離左邊10點

00:14:46.253 --> 00:14:48.322 
但是爲了理解這一點
需要仔細

00:14:48.388 --> 00:14:49.823 
瞭解代碼
再把這些

00:14:49.890 --> 00:14:51.158 
都拼在一起

00:14:51.558 --> 00:14:54.261 
那麼在新版OS X
和iOS中

00:14:54.328 --> 00:14:56.797 
我們介紹了
更簡潔的新語句

00:14:56.897 --> 00:14:57.965 
來生成約束

00:14:58.532 --> 00:14:59.933 
大概是這樣

00:15:01.235 --> 00:15:03.971 
這個語句使用的對象
叫做佈局錨點

00:15:11.111 --> 00:15:12.946 
謝謝很高興大家喜歡

00:15:15.048 --> 00:15:16.817 
佈局錨點代表
具體視圖的

00:15:16.917 --> 00:15:20.320 
具體屬性
錨點對象會

00:15:20.387 --> 00:15:23.423 
<c.blue>會面對多種工廠方式
來生成不同的約束形式

00:15:24.024 --> 00:15:26.894 
本例中 我們是在
約束上端錨點

00:15:26.960 --> 00:15:30.564 
使之等於視圖上端錨點
再加10

00:15:31.665 --> 00:15:33.333 
如果你們還在用
Objective-C

00:15:33.400 --> 00:15:35.102 
其中也有這些
而且

00:15:35.469 --> 00:15:37.104 
差別會
更爲顯著

00:15:37.171 --> 00:15:40.174 
從將近7行降到了
僅僅兩行

00:15:41.375 --> 00:15:43.243 
這個新語句還
遵守我們所有的

00:15:43.310 --> 00:15:45.979 
命名規範
但讀起來更

00:15:46.046 --> 00:15:48.081 
像是表達式
我感覺這樣

00:15:48.148 --> 00:15:49.716 
更容易看清代碼的意圖

00:15:50.951 --> 00:15:53.520 
約束的所有有效形式
都可以運用這個語句

00:15:53.587 --> 00:15:57.624 
來創建 你實際上
還會得到許多無效的

00:15:57.691 --> 00:15:59.393 
約束形式的
編譯器錯誤

00:16:00.227 --> 00:16:03.664 
此刻 你只能得到
Objective-C的錯誤 

00:16:03.730 --> 00:16:05.299 
但是這些也會
變成Swift 

00:16:06.400 --> 00:16:08.602 
例如 視圖的左對齊
邊緣應爲100

00:16:08.669 --> 00:16:11.605 
這樣就不合理
因爲沒有上下文

00:16:11.705 --> 00:16:14.474 
可以詮釋
這個100

00:16:14.875 --> 00:16:17.244 
因此錯誤在於
這個方式在

00:16:17.377 --> 00:16:18.979 
位置錨點不存在

00:16:20.080 --> 00:16:22.916 
與之相似 視圖的
左對齊邊緣

00:16:22.983 --> 00:16:25.185 
和不同視圖同寬
這也不合理

00:16:25.886 --> 00:16:29.089 
位置和尺寸大小在
Auto Layout基本上

00:16:29.223 --> 00:16:32.893 
是不兼容的類型
因此得到的不兼容指針類型

00:16:34.962 --> 00:16:37.865 
以往 這些內容
仍屬於錯誤

00:16:38.165 --> 00:16:39.666 
但是僅可以在
運行時間出現

00:16:39.867 --> 00:16:42.603 
因此我覺得
將確定編譯時間錯誤

00:16:42.669 --> 00:16:44.404 
將有助於我們一開始
就把約束設置正確

00:16:44.938 --> 00:16:47.140 
並可以編寫更好讀
更可維護的代碼

00:16:54.848 --> 00:16:58.085 
接下來我會聊聊
約束負面空間

00:16:58.418 --> 00:17:00.521 
有幾種不同佈局
會時常出現

00:17:00.587 --> 00:17:04.156 
具體
實現方法卻不很明顯

00:17:04.691 --> 00:17:06.693 
這裏有兩個例子

00:17:06.760 --> 00:17:10.196 
在第一種情況中
目標是讓

00:17:10.263 --> 00:17:11.898 
這些按鈕間
的空間在重新調整

00:17:12.065 --> 00:17:13.367 
窗口大小時保持相同

00:17:13.867 --> 00:17:16.170 
在底部 我們有
圖像和標籤

00:17:16.970 --> 00:17:20.574 
我們想把它們
居中做成一組

00:17:20.641 --> 00:17:23.544 
而不是各自將每個
內容居中

00:17:24.144 --> 00:17:25.546 
結果就是
這些佈局問題的

00:17:25.612 --> 00:17:27.580 
解決方案
都是相同的

00:17:27.981 --> 00:17:29.483 
也就是要用到虛擬視圖

00:17:30.083 --> 00:17:33.020 
實際上是分配空視圖
把它們進行約束

00:17:33.086 --> 00:17:34.922 
填充到按鈕之間
的空間中

00:17:34.988 --> 00:17:37.257 
一旦視圖
位於這些點

00:17:37.624 --> 00:17:39.927 
我們可以使用等寬約束
來確保其尺寸大小

00:17:39.993 --> 00:17:42.629 
在重新調整窗口大小時 
保持相同

00:17:43.697 --> 00:17:46.033 
在底部 我們
也是同樣

00:17:46.099 --> 00:17:47.201 
使用空視圖

00:17:48.001 --> 00:17:50.604 
對邊緣 圖像和標籤
進行約束

00:17:51.238 --> 00:17:53.040 
然後我們可以在
空視圖上安排

00:17:53.106 --> 00:17:55.576 
居中約束
而不是

00:17:55.642 --> 00:17:57.144 
處理內容視圖本身

00:17:57.911 --> 00:18:00.581 
很有效 傳統上 
我們就是這樣解決

00:18:00.647 --> 00:18:03.483 
這些視圖問題
但是這種技巧

00:18:03.550 --> 00:18:04.918 
知道的人太少 對吧？

00:18:04.985 --> 00:18:07.754 
而且也不夠有效
特別是在iOS上

00:18:07.821 --> 00:18:09.890 
這裏每個視圖都有
相關的圖層

00:18:10.757 --> 00:18:11.992 
那麼在新版中

00:18:12.526 --> 00:18:16.797 
我們面對的是佈局指南的
新的公共類 

00:18:17.764 --> 00:18:20.334 
佈局指南只
代表Layout Engine中

00:18:20.400 --> 00:18:21.134 
的矩形

00:18:22.002 --> 00:18:23.770 
這很容易使用

00:18:23.971 --> 00:18:27.441 
只需要將之進行分配
再加入

00:18:27.508 --> 00:18:29.977 
所屬視圖
然後就可以將其

00:18:30.043 --> 00:18:30.844 
按照視圖處理方式來約束

00:18:31.345 --> 00:18:33.046 
它們面對的是
錨點對象 因此可以

00:18:33.113 --> 00:18:35.182 
運用新約束
生成語句

00:18:35.349 --> 00:18:36.850 
但是還可以將之

00:18:37.451 --> 00:18:39.620 
交給現有的
約束工廠方法

00:18:39.686 --> 00:18:42.956 
這樣就可以和視覺格式語言配合使用
是這樣的效果

00:18:44.091 --> 00:18:46.093 
我們把現有的
佈局指南做轉換

00:18:46.159 --> 00:18:49.162 
把這些進行內部使用

00:18:49.596 --> 00:18:51.932 
這裏有很好的示例

00:18:51.999 --> 00:18:55.335 
大家可能注意到
UIView針對邊距屬性

00:18:55.435 --> 00:18:56.537 
並未真正面對佈局錨點

00:18:57.070 --> 00:19:00.073 
相反 UI View有着
新的佈局邊距指南

00:19:00.274 --> 00:19:02.709 
這一佈局指南
代表邊距內

00:19:02.776 --> 00:19:04.545 
視圖的區域

00:19:05.679 --> 00:19:08.715 
如果需要對邊距
進行約束

00:19:08.782 --> 00:19:11.218 
最簡單的做法是
通過佈局指南

00:19:12.452 --> 00:19:16.823 
因此佈局指南並未從根本上啓動
任何全新行爲

00:19:16.890 --> 00:19:20.227 
現在使用視圖
可以實現所有這些功能

00:19:20.694 --> 00:19:22.462 
但是它們可以
用更輕量級的方式

00:19:22.529 --> 00:19:24.898 
來解決這些問題
而且不需

00:19:24.965 --> 00:19:28.402 
搞亂層次
因爲那些視圖

00:19:28.468 --> 00:19:29.937 
並不需要
真正拖動

00:19:31.371 --> 00:19:35.676 
接下來我請會卡西亞
回到臺上 來介紹

00:19:35.742 --> 00:19:38.879 
Auto Layout
出現問題的調試策略

00:19:46.920 --> 00:19:47.688 
大家好

00:19:47.754 --> 00:19:49.656 
上午我見過
在座的部分聽衆

00:19:50.123 --> 00:19:50.824 
我是卡西亞

00:19:50.891 --> 00:19:53.760 
我在iOS Keyboards
Team就職 我來這裏和大家

00:19:53.827 --> 00:19:55.863 
介紹如何調試佈局
當出現問題時

00:19:55.929 --> 00:19:56.897 
該怎麼辦

00:19:57.631 --> 00:19:59.900 
以前用過
Auto Layout的朋友

00:19:59.967 --> 00:20:03.470 
希望大部分都用過
可能遇到像這樣的情況：

00:20:04.304 --> 00:20:07.207 
設計一個UI非常漂亮

00:20:07.541 --> 00:20:09.009 
然後準備
在代碼中執行

00:20:09.076 --> 00:20:10.544 
你把所有約束
都小心放入其中

00:20:10.611 --> 00:20:11.345 
也做了調整

00:20:11.678 --> 00:20:13.680 
構建和運行時
出現了問題

00:20:14.882 --> 00:20:17.351 
完全都不對
在調試器中

00:20:17.451 --> 00:20:19.786 
你看到這樣的內容

00:20:20.053 --> 00:20:21.989 
文本內容很多
有點嚇人

00:20:22.055 --> 00:20:23.991 
但是這的確是
相當有用的日誌

00:20:24.758 --> 00:20:28.462 
遇到不滿意的約束錯誤時
就會出現這些

00:20:28.962 --> 00:20:30.998 
引擎在看所提供的
約束設置

00:20:31.398 --> 00:20:33.834 
決定它無法
解決佈局問題

00:20:33.901 --> 00:20:35.836 
因爲其中有
部分內容彼此衝突

00:20:36.270 --> 00:20:37.871 
若要解決視圖問題
需要打破

00:20:37.938 --> 00:20:39.606 
一個約束才行

00:20:40.007 --> 00:20:43.143 
於是拋出這個錯誤
告訴你它做了什麼

00:20:43.944 --> 00:20:47.147 
你明白 接下來要繼續
深入 找到那個

00:20:47.214 --> 00:20:48.415 
額外的競爭性約束才行

00:20:49.183 --> 00:20:51.318 
我們試着讀一下
這個日誌

00:20:51.585 --> 00:20:54.154 
這裏是剛纔看的視圖
以及我們的日誌

00:20:54.221 --> 00:20:55.923 
從上端移走
部分內容

00:20:55.989 --> 00:20:57.357 
使之和屏幕吻合

00:20:57.858 --> 00:21:00.294 
但是要先從底部
開始處理

00:21:01.161 --> 00:21:04.131 
大家看到的最後內容是
實際上打破的約束

00:21:04.631 --> 00:21:06.867 
不一定必須是
導致問題約束

00:21:06.934 --> 00:21:09.670 
引擎必須打破的約束
是爲了解決

00:21:09.736 --> 00:21:12.239 
佈局問題
因此從這裏入手很好

00:21:13.207 --> 00:21:16.844 
先檢查該視圖的translates
AutoResizingMaskIntoConstraints

00:21:16.910 --> 00:21:19.713 
在傑西的例子中
大家看到 日誌中

00:21:19.780 --> 00:21:21.515 
也會出現
但是確保你已經

00:21:21.582 --> 00:21:23.116 
事先完成這些內容
肯定是沒錯的

00:21:23.584 --> 00:21:26.553 
本例中 我們
打破的是

00:21:26.620 --> 00:21:27.721 
Saturn縱橫比約束

00:21:28.422 --> 00:21:30.090 
我們在日誌上
提高一些 以示強調

00:21:30.157 --> 00:21:32.025 
在日誌本身中
也會出現

00:21:32.092 --> 00:21:36.230 
接下來要做的是
發現影響日誌中

00:21:36.296 --> 00:21:38.198 
出現的視圖的
其他約束

00:21:39.032 --> 00:21:42.803 
本例中 我們接下來
<c.blue>看按到父視圖約束的左對齊

00:21:42.870 --> 00:21:46.406 
和父視圖約束的右對齊
以及上端的一個

00:21:47.341 --> 00:21:49.243 
還有下面
標籤視圖的一個

00:21:50.210 --> 00:21:51.044 
這些都沒問題

00:21:51.111 --> 00:21:52.679 
沒有一個
產生直接衝突

00:21:53.313 --> 00:21:55.883 
接下來要看
相關的視圖

00:21:55.949 --> 00:21:56.917 
本例中 是標籤

00:21:58.051 --> 00:22:00.254 
因此這個標籤
有着和Saturn底部

00:22:00.320 --> 00:22:03.390 
相同的關聯約束
下一個約束

00:22:03.457 --> 00:22:04.892 
關聯到
父視圖上端

00:22:05.659 --> 00:22:07.995 
因爲Saturn
高度應該

00:22:08.061 --> 00:22:11.131 
超過100點
約束告訴它應該如此

00:22:11.765 --> 00:22:14.635 
你會注意到
標籤旁的約束

00:22:14.701 --> 00:22:19.306 
確實告訴你
這個約束看似

00:22:19.373 --> 00:22:22.075 
非常像以往
你可能用來

00:22:22.142 --> 00:22:24.511 
生成約束的視覺格式語言

00:22:24.678 --> 00:22:27.414 
我們看到
從父視圖上端

00:22:27.915 --> 00:22:29.716 
是100點 還因爲
Saturn需要比這個多

00:22:30.083 --> 00:22:31.218 
只能打破
一個約束

00:22:31.285 --> 00:22:32.252 
才能解決佈局問題

00:22:33.020 --> 00:22:35.255 
所以其實
並不難讀

00:22:36.123 --> 00:22:38.725 
現在我們讓問題
更簡單些

00:22:38.892 --> 00:22:41.495 
因爲你可能習慣於
看到這樣效果的

00:22:41.562 --> 00:22:43.997 
約束日誌
其中有一組

00:22:44.064 --> 00:22:47.534 
內存地址和類名稱
除非在視圖中

00:22:47.601 --> 00:22:49.837 
有導航文本 否則
不會告知各自是什麼

00:22:50.771 --> 00:22:52.639 
如果是這樣的效果
則會容易很多

00:22:53.740 --> 00:22:55.175 
爲實現這一點
你只需要

00:22:55.242 --> 00:22:57.144 
在約束中
增添標識符

00:22:57.778 --> 00:22:59.112 
那麼我可以有兩種
方便的方法來實現

00:22:59.780 --> 00:23:01.949 
如果使用的是
顯性約束

00:23:02.015 --> 00:23:02.883 
那只是一個屬性

00:23:03.650 --> 00:23:06.386 
建議命名標識符
和命名約束的方法

00:23:06.453 --> 00:23:08.322 
相同 這樣如果之後
需要找出

00:23:08.388 --> 00:23:10.757 
代碼的話
則會容易很多

00:23:11.391 --> 00:23:14.962 
但是你可以把它
任意命名 我們就這麼做

00:23:15.028 --> 00:23:17.965 
如果使用Visual Format
Language會得到數組

00:23:18.031 --> 00:23:19.867 
你不會獲得約束
因此只能循環那個數組

00:23:19.933 --> 00:23:22.636 
在每個約束上
設置標識符

00:23:23.170 --> 00:23:25.005 
可以在數組的每個約束上
設置相同的

00:23:25.072 --> 00:23:27.040 
標識符
這一般都很好

00:23:27.374 --> 00:23:29.576 
如果想找出單獨約束
並設置標識符

00:23:29.643 --> 00:23:32.045 
之後還要在數組中
做些改變

00:23:32.112 --> 00:23:33.714 
順序就要
做調整

00:23:33.780 --> 00:23:34.615 
那麼需要返回
同樣來改變

00:23:34.681 --> 00:23:36.383 
標識符
的順序

00:23:37.017 --> 00:23:40.754 
此外 一旦看到了
日誌中的短語

00:23:40.821 --> 00:23:42.189 
你一定會知道
該怎麼找問題

00:23:42.256 --> 00:23:45.692 
因此不必當真
把具體約束都擺着那裏

00:23:46.460 --> 00:23:47.461 
最後 在約束檢測器中的

00:23:48.095 --> 00:23:50.564 
Interface Builder
有個標識符屬性

00:23:50.631 --> 00:23:53.233 
那麼就太簡單了

00:23:54.268 --> 00:23:55.235 
我們來看一下

00:23:55.302 --> 00:23:58.105 
我們來談談
怎麼理解這個日誌

00:23:58.539 --> 00:24:01.508 
更容易瞭解
目前發生的情況

00:24:02.576 --> 00:24:06.213 
首先 如果在視圖設置
用戶友好標識符

00:24:07.047 --> 00:24:08.882 
這些標識符會
在日誌中與相應視圖

00:24:08.949 --> 00:24:11.185 
成對出現
因此就可以找到所需視圖

00:24:11.251 --> 00:24:13.921 
我就是這樣從剛纔
看到的約束中

00:24:13.987 --> 00:24:16.390 
找到Saturn 它有用戶
友好標識符名爲Saturn

00:24:17.157 --> 00:24:19.526 
還可以在新的佈局嚮導中
設置標識符

00:24:20.060 --> 00:24:22.229 
這是個平鋪
標識符屬性

00:24:22.296 --> 00:24:25.232 
沒有什麼特別的
這會讓運用佈局指南

00:24:25.699 --> 00:24:27.301 
調試佈局變得
非常簡單

00:24:27.668 --> 00:24:30.204 
因爲效果很棒
我很確定大家遲早都會用上

00:24:30.938 --> 00:24:31.972 
加上它們再繼續

00:24:32.806 --> 00:24:35.876 
如果想試試
現在就用很複雜的

00:24:35.943 --> 00:24:37.477 
視圖 把所有標識符
都加進去 你可以完成的

00:24:37.544 --> 00:24:38.312 
但是需要些時間

00:24:38.378 --> 00:24:40.981 
因爲你可以以後
讀這個日誌 所以也值得

00:24:41.048 --> 00:24:43.851 
但是如果你繼續的時候
這麼做 以後就會少費工夫

00:24:43.917 --> 00:24:45.919 
因爲 你也拿不準
什麼時候

00:24:45.986 --> 00:24:47.721 
會遇到這個問題
所以有必要

00:24:48.055 --> 00:24:50.257 
先備着
以供不時之需

00:24:51.058 --> 00:24:53.994 
最後 如果
約束日誌不理想

00:24:54.061 --> 00:24:55.362 
其中包含
信息太多

00:24:55.729 --> 00:24:57.831 
就會導致佈局非常複雜
其中會有

00:24:57.898 --> 00:24:59.933 
數百行
可以看看

00:25:00.000 --> 00:25:02.069 
底部的視圖 特別是
你在看的其他視圖

00:25:02.135 --> 00:25:04.638 
並且實際上要查看
在調試器中影響

00:25:04.705 --> 00:25:05.873 
這些視圖的約束

00:25:06.473 --> 00:25:08.976 
在iOS中 是constraints
AffectingLayoutForAxis

00:25:09.042 --> 00:25:12.045 
在OS X中 是constraints
AffectingLayoutForOrientation

00:25:12.579 --> 00:25:15.182 
這可以告知你
哪些約束在

00:25:15.249 --> 00:25:18.919 
影響這個或那個
座標軸的視圖

00:25:19.553 --> 00:25:20.921 
我們現在來看
效果怎樣

00:25:22.856 --> 00:25:26.126 
這就是剛剛

00:25:28.729 --> 00:25:31.465 
在看的視圖

00:25:31.732 --> 00:25:33.033 
我們看到這裏是同樣的日誌

00:25:33.800 --> 00:25:35.769 
我們先擦去這些
因爲我希望

00:25:35.836 --> 00:25:38.805 
給大家看看
另外的內容

00:25:38.872 --> 00:25:41.074 
我設置了一個
兩指雙擊來斷開這裏

00:25:41.141 --> 00:25:42.209 
所以現在
不用內存地址

00:25:42.276 --> 00:25:43.777 
我用的是設置好的名稱

00:25:43.844 --> 00:25:46.980 
我們要進入
調試器

00:25:47.381 --> 00:25:51.718 
讓它打印出Saturn的

00:25:53.921 --> 00:25:56.723 
constraintsAffectingLayoutForAxis
以及垂直座標軸

00:25:57.457 --> 00:26:00.894 
垂直軸是1 水平軸是0

00:26:00.961 --> 00:26:02.729 
如果用錯了
那就是另一種選項

00:26:02.796 --> 00:26:04.631 
返回這裏
也相當簡單

00:26:04.831 --> 00:26:07.334 
現在我們看到
視圖在上端有佈局嚮導

00:26:07.467 --> 00:26:10.270 
沒問題

00:26:10.504 --> 00:26:11.738 
那是視圖的約束

00:26:12.472 --> 00:26:14.341 
命名視圖中的
約束還有

00:26:14.408 --> 00:26:15.809 
一個好處 就是說
你會很快知道

00:26:15.876 --> 00:26:18.045 
在約束外
設置了哪些

00:26:18.111 --> 00:26:19.313 
哪些是由
你設置的

00:26:19.580 --> 00:26:22.816 
在Saturn的垂直佈局中
我們瞭解到

00:26:22.883 --> 00:26:23.884 
它是和上端佈局指南關聯

00:26:24.952 --> 00:26:25.786 
非常好

00:26:25.853 --> 00:26:29.189 
它還表示
Saturn和下面的標籤關聯

00:26:30.157 --> 00:26:32.292 
那麼在另一個影響
Saturn的約束中

00:26:32.392 --> 00:26:33.827 
不過不是直接
關聯Saturn

00:26:34.127 --> 00:26:36.396 
我們看到約束
在視圖上端

00:26:36.463 --> 00:26:37.364 
關聯了標籤

00:26:37.865 --> 00:26:39.733 
因爲它並未在
任何地方提及Saturn

00:26:39.800 --> 00:26:42.035 
這是很好的線索
說明這就是問題所在

00:26:42.369 --> 00:26:43.804 
而且整個Saturn
應該是

00:26:43.871 --> 00:26:46.173 
超過100多才行
我碰巧知道

00:26:46.240 --> 00:26:48.342 
因爲是我做的編碼

00:26:48.609 --> 00:26:51.812 
現在我拿到了
非常不錯的標籤

00:26:51.879 --> 00:26:54.515 
我可以搜索它
找到我做的約束

00:26:54.581 --> 00:26:55.849 
好了

00:26:55.916 --> 00:26:58.252 
把它關聯到上端錨點
定爲100點

00:26:58.952 --> 00:27:01.655 
來看看會在
哪裏激活

00:27:02.623 --> 00:27:04.057 
刪掉

00:27:05.025 --> 00:27:05.726 
重新構建

00:27:06.460 --> 00:27:08.629 
這次好多了

00:27:08.695 --> 00:27:10.130 
我就是要
這樣子

00:27:10.564 --> 00:27:12.833 
深入研究這些
問題 其實

00:27:12.900 --> 00:27:13.834 
相當簡單

00:27:13.901 --> 00:27:15.536 
即便佈局
相當複雜也是如此

00:27:15.702 --> 00:27:18.972 
如果使用標識符
方法得當

00:27:19.907 --> 00:27:23.477 
有關日誌 我們講到哪裏了？

00:27:24.478 --> 00:27:25.913 
從底部開始

00:27:26.680 --> 00:27:28.348 
找到打破的約束
從中瞭解到許多

00:27:28.415 --> 00:27:31.518 
它爲何會打破的
相關信息

00:27:31.885 --> 00:27:35.022 
先來查看translatesAutoResizingMask
IntoConstraints

00:27:35.088 --> 00:27:37.891 
它是許多狀況的
罪魁禍首

00:27:37.958 --> 00:27:41.128 
在約束和視圖上
都設置標識符

00:27:41.828 --> 00:27:44.198 
最後 如果日誌
太過複雜使用

00:27:44.531 --> 00:27:47.201 
constraintsAffectingLayoutForAxis
來縮小範圍

00:27:48.268 --> 00:27:53.407 
好這就是引擎
看到約束 瞭解自己

00:27:53.473 --> 00:27:57.211 
沒有解決方案後
發生的一切

00:27:57.277 --> 00:27:59.246 
沒有辦法滿足
所有的約束要求

00:27:59.613 --> 00:28:01.782 
可是如果有着
不只一個解決方案會怎樣？

00:28:02.082 --> 00:28:03.450 
這就會出現歧義

00:28:04.251 --> 00:28:06.587 
這就是我們最後的
謎題 祝賀大家

00:28:06.653 --> 00:28:07.487 
進行到這裏

00:28:07.955 --> 00:28:09.156 
此外再無其他
更多內容

00:28:09.923 --> 00:28:11.692 
我們來看一下
歧義佈局

00:28:11.925 --> 00:28:13.660 
造成歧義佈局的

00:28:13.727 --> 00:28:16.997 
兩個可能原因
只能是約束太少

00:28:17.865 --> 00:28:21.468 
如果是在做
這樣的行星佈局

00:28:21.535 --> 00:28:22.569 
希望將Saturn
放在中間

00:28:23.237 --> 00:28:25.639 
但是水平方向的約束
設置不當

00:28:25.806 --> 00:28:27.074 
視圖只能猜測
該把它放在哪裏

00:28:28.041 --> 00:28:29.276 
再次提醒一下
應該是在中心

00:28:29.343 --> 00:28:32.513 
引擎把它放得
偏到了這邊

00:28:32.880 --> 00:28:35.249 
還有一個解決方案
是把它偏到另一邊

00:28:35.315 --> 00:28:36.950 
可就是不能
落在中間的位置

00:28:37.017 --> 00:28:39.620 
因爲如果不知道
該放在哪裏 它就會

00:28:39.686 --> 00:28:41.188 
找個地方放 這就會是
問題所在

00:28:41.321 --> 00:28:42.756 
因爲不是你想要的

00:28:42.823 --> 00:28:44.825 
需要返回 在視圖上
加上約束

00:28:45.592 --> 00:28:47.194 
另一個歧義佈局的
原因是屬性

00:28:47.261 --> 00:28:48.295 
存在衝突

00:28:48.729 --> 00:28:51.365 
在第一部分中
我們談過一點

00:28:51.431 --> 00:28:54.334 
在視圖的底部
我們剛做過調整

00:28:54.401 --> 00:28:56.603 
大家會看到結果會
是文本域

00:28:56.670 --> 00:28:59.072 
按鈕的比例
有問題

00:28:59.139 --> 00:29:00.474 
我希望它
是這個樣子

00:29:02.342 --> 00:29:04.611 
文本域佔據
視圖的主要部分

00:29:05.212 --> 00:29:07.548 
最後變成這個樣子
是因爲引擎

00:29:07.614 --> 00:29:10.150 
在兩個佈局中
替我做出選擇

00:29:11.084 --> 00:29:13.520 
它這麼做是因爲
兩個視圖的內容

00:29:13.587 --> 00:29:15.255 
吸附性優先級相同

00:29:15.322 --> 00:29:17.991 
都是250
我沒有其他方法

00:29:18.058 --> 00:29:19.860 
我也沒有告訴
引擎用其他方法在水平方向

00:29:19.927 --> 00:29:21.962 
來確定這些
視圖的大小

00:29:22.429 --> 00:29:24.131 
那它只能是猜
所以猜測也許

00:29:24.231 --> 00:29:27.401 
我是想讓文本視圖
吸附最近的內容

00:29:27.734 --> 00:29:29.169 
於是繼續
還把輸出了標籤

00:29:29.703 --> 00:29:30.838 
但是我實際上希望
它做的是

00:29:30.971 --> 00:29:32.439 
吸附靠近
按鈕的內容

00:29:33.106 --> 00:29:36.343 
這部分要
反覆強調

00:29:36.410 --> 00:29:38.111 
但是按鈕的內容
吸附優先級

00:29:38.178 --> 00:29:40.814 
設置的低於
文字域

00:29:41.315 --> 00:29:45.519 
視圖的邊緣會
從內容中伸出一塊

00:29:45.586 --> 00:29:48.088 
因爲這不太重要
它吸附了最近的內容

00:29:48.255 --> 00:29:49.523 
或者你在告知引擎
這不太重要

00:29:49.590 --> 00:29:51.158 
視圖吸附
附近的內容

00:29:51.892 --> 00:29:54.595 
與此同時 如果設置了以上
文本視圖的

00:29:54.661 --> 00:29:57.965 
內容吸附性優先級
按鈕吸附了靠近的內容

00:29:58.131 --> 00:29:59.299 
且文本域有所延伸

00:29:59.733 --> 00:30:02.035 
在這種特殊情況下
引擎始終都會這樣

00:30:02.102 --> 00:30:03.537 
解決佈局問題

00:30:03.704 --> 00:30:06.874 
因此 如果妥當
設置這些屬性

00:30:06.940 --> 00:30:09.810 
就可以解決這些
遇到的歧義佈局

00:30:09.877 --> 00:30:13.380 
我們還有解決
歧義的兩個工具

00:30:14.548 --> 00:30:15.949 
Interface Builder
會很有用處

00:30:16.283 --> 00:30:20.554 
它在邊緣有這些
小圖標 如果點擊

00:30:20.687 --> 00:30:23.624 
它會告訴你佈局出現了
哪些它不明白的內容

00:30:24.625 --> 00:30:26.293 
在很多情況下
它會告知

00:30:26.360 --> 00:30:29.897 
你遺漏了約束
它無法解決

00:30:30.264 --> 00:30:32.432 
我需要Y點
或者高度的約束

00:30:32.699 --> 00:30:37.571 
當你構建並運行
的app存在這樣的問題時

00:30:38.005 --> 00:30:41.742 
最後這些視圖
就會出現在

00:30:41.808 --> 00:30:45.312 
Y軸的某處
這是引擎的決定所致

00:30:45.379 --> 00:30:46.780 
因爲它沒有
從我們這裏獲得任何信息

00:30:47.548 --> 00:30:48.315 
這就讓它相當容易

00:30:48.382 --> 00:30:52.085 
當沒有使用Interface
Builder或者你解決問題後

00:30:52.152 --> 00:30:53.253 
仍然會遇到
這樣的情況

00:30:53.320 --> 00:30:55.556 
我們還有一個很酷的方法
叫做autolayoutTrace

00:30:56.390 --> 00:30:59.693 
可以在視圖中的
調試器來使用

00:30:59.793 --> 00:31:03.463 
它會用全部大寫
告訴你出現

00:31:03.530 --> 00:31:05.566 
歧義佈局的視圖
你可以隨即去

00:31:05.632 --> 00:31:07.901 
查看該視圖的
問題所在

00:31:08.869 --> 00:31:11.238 
在調試菜單中
我們還有視圖調試器

00:31:11.972 --> 00:31:15.542 
可以幫你查看
佈局引擎爲視圖

00:31:15.843 --> 00:31:17.811 
計算得出的
框架和對齊矩形

00:31:18.512 --> 00:31:19.379 
效果
就像這樣

00:31:19.446 --> 00:31:22.115 
它會將拽到
正在看的視圖上

00:31:22.683 --> 00:31:25.185 
這裏你們可以看到
Saturn 本應對齊矩形中

00:31:25.252 --> 00:31:27.955 
與內容十分靠近
可是現在

00:31:28.021 --> 00:31:29.690 
被延伸得
非常寬

00:31:30.057 --> 00:31:32.092 
這種狀況
不是我想要的

00:31:32.893 --> 00:31:37.364 
可是這裏
它的實際尺寸沒問題

00:31:37.431 --> 00:31:39.433 
只是被固定到邊上
這不是我想要的

00:31:39.499 --> 00:31:40.901 
但是我知道這不是
尺寸問題

00:31:41.268 --> 00:31:45.272 
而是應該與哪裏
關聯的問題

00:31:46.773 --> 00:31:48.308 
另一個解決方案是
來看視圖解調器

00:31:48.375 --> 00:31:50.744 
在所有的
斷點導航旁邊

00:31:50.811 --> 00:31:52.012 
這裏有個
小按鈕

00:31:52.145 --> 00:31:54.648 
按下這個的時候
就會把佈局拉開

00:31:54.715 --> 00:31:57.451 
可以點擊並查看
約束等內容

00:31:57.851 --> 00:32:00.654 
是視圖的線框圖
還可以看3D效果

00:32:01.021 --> 00:32:02.789 
可以看到所有
圖層的視圖 很清楚

00:32:03.257 --> 00:32:06.593 
還有很多視圖調試場景
會很有幫助

00:32:07.261 --> 00:32:09.263 
最後 我們還有
一種調試器方法

00:32:09.329 --> 00:32:10.797 
因爲我非常喜歡
使用LLDB

00:32:11.198 --> 00:32:12.966 
名爲exerciseAmbigui
tyInLayout

00:32:13.200 --> 00:32:16.203 
如果有存在
歧義的視圖

00:32:16.270 --> 00:32:18.972 
可以運行這個
在調試器上查看再繼續

00:32:19.039 --> 00:32:21.608 
Layout Engine會顯示
所具備的另外解決方案

00:32:22.309 --> 00:32:24.244 
當你想找到問題
具體出在哪裏時

00:32:24.311 --> 00:32:25.712 
這會提供很大的
幫助

00:32:26.446 --> 00:32:27.614 
我給大家展示
這是什麼樣子

00:32:28.916 --> 00:32:32.152 
好現在我們回到這個視圖
剛纔我們看到過

00:32:32.653 --> 00:32:36.423 
當處於正常佈局時
Saturn跑到邊上

00:32:36.924 --> 00:32:39.226 
所以我再次
用調試手勢

00:32:39.293 --> 00:32:42.062 
可以這麼用是因爲
我需要簡單地插入

00:32:42.663 --> 00:32:44.731 
首先我來看看
整個視圖在發生什麼

00:32:44.798 --> 00:32:48.836 
運行了自動佈局
來跟蹤效果

00:32:49.770 --> 00:32:52.439 
大家看 都沒問題
除了Saturn

00:32:52.506 --> 00:32:53.507 
存在歧義佈局

00:32:53.574 --> 00:32:55.475 
我會努力集中精力
解決這個問題

00:32:56.410 --> 00:32:58.478 
這還是個Boolean
逐個視圖告知

00:32:58.545 --> 00:33:01.715 
是否存在
歧義佈局

00:33:01.915 --> 00:33:04.084 
這是個hasAmbiguousLa
yout

00:33:04.918 --> 00:33:07.321 
很容易記住
在Saturn的這個例子中 是真

00:33:08.388 --> 00:33:12.793 
如果存在這種情況
還還可以練習佈局歧義

00:33:12.860 --> 00:33:14.161 
並且繼續

00:33:14.962 --> 00:33:18.665 
它會給你提供 它爲此
問題準備的另一個解決方案

00:33:18.732 --> 00:33:20.534 
我們再來運行一遍

00:33:21.401 --> 00:33:22.669 
哎呀

00:33:22.970 --> 00:33:24.171 
真不該再運行

00:33:24.738 --> 00:33:30.110 
現在又跑到
一邊去了

00:33:30.577 --> 00:33:32.412 
在這種情況下
看似出於某種原因

00:33:32.479 --> 00:33:35.015 
佈局指南放在
Saturn的哪一側都不行

00:33:35.382 --> 00:33:39.052 
那我繼續找
關聯行星

00:33:39.119 --> 00:33:40.888 
到特定
區域的約束

00:33:40.954 --> 00:33:44.958 
它們在各邊都有
佈局指南比率

00:33:45.025 --> 00:33:47.261 
以此來確定
其位置

00:33:47.327 --> 00:33:49.129 
這裏找到了Saturn
的那個

00:33:49.830 --> 00:33:51.899 
應該在各邊
有着相同的佈局指南

00:33:51.965 --> 00:33:53.534 
應該是正好
放在中間在對

00:33:53.600 --> 00:33:58.172 
問題好似
我根本沒有把這個

00:33:58.272 --> 00:34:01.875 
加入爲視圖激活的
約束數組中

00:34:02.209 --> 00:34:07.014 
如果我加入的話
效果就會好得多

00:34:07.414 --> 00:34:10.050 
Saturn就會準確
待在我希望它在的位置

00:34:10.449 --> 00:34:12.252 
在分析歧義問題時
確實只需要

00:34:12.386 --> 00:34:14.321 
做這些即可

00:34:15.289 --> 00:34:17.491 
一旦開始用了這個功能
就會覺得

00:34:17.558 --> 00:34:20.460 
非常簡單

00:34:21.728 --> 00:34:22.829 
來調試佈局

00:34:23.130 --> 00:34:25.098 
最重要的是要
仔細考慮

00:34:25.431 --> 00:34:27.034 
引擎所需的
信息

00:34:27.601 --> 00:34:28.635 
今天上午 我們談論了

00:34:28.702 --> 00:34:32.105 
許多爲Layout Engine
提供所有信息

00:34:32.172 --> 00:34:34.208 
這樣可以在各種
自適配場景中

00:34:34.274 --> 00:34:35.809 
妥善計算佈局

00:34:36.409 --> 00:34:40.746 
如果把所有這些彙總在一起
遇到的問題

00:34:40.813 --> 00:34:43.350 
就會少很多
而不是隻是

00:34:43.417 --> 00:34:44.885 
在這裏或那裏
做兩個約束

00:34:44.952 --> 00:34:46.587 
再把它扔進來

00:34:47.721 --> 00:34:50.489 
但是如果遇到問題
約束也不理想的話

00:34:50.757 --> 00:34:52.125 
可以使用
日誌

00:34:52.192 --> 00:34:53.893 
它會提供
很多有用信息

00:34:54.061 --> 00:34:56.830 
爲了充分利用日誌
可以爲所有的約束

00:34:57.364 --> 00:34:58.465 
和視圖添加
標識符

00:34:58.866 --> 00:35:01.034 
如果想經常性
檢查歧義

00:35:01.335 --> 00:35:03.270 
在第一次運行時
不一定會看到

00:35:03.704 --> 00:35:05.839 
可以加入
比如單元測試

00:35:05.906 --> 00:35:08.041 
並在所有視圖上
經常性運行

00:35:08.108 --> 00:35:11.111 
如果遇到歧義佈局
可以在看到它之前進行分析

00:35:12.179 --> 00:35:13.580 
我們還有好幾種工具

00:35:13.647 --> 00:35:14.781 
可以幫助解決
這類問題

00:35:15.015 --> 00:35:17.851 
Interface builder
就很有用當然還有視圖調試器

00:35:17.951 --> 00:35:20.153 
以及lldb中的各種方法

00:35:21.922 --> 00:35:25.192 
好 今天講了
很多內容

00:35:26.059 --> 00:35:29.029 
如果上午就聽了
我們的講座

00:35:29.096 --> 00:35:30.831 
你會聽到用到堆棧視圖的
可維護佈局

00:35:31.265 --> 00:35:32.833 
以及妥當
改變約束

00:35:33.267 --> 00:35:35.536 
配合使用視圖大小和
進行自適應調整

00:35:35.636 --> 00:35:37.738 
還有運用優先級
和對齊安排

00:35:37.804 --> 00:35:39.606 
確保視圖
在各種

00:35:39.673 --> 00:35:41.708 
自適配環境下
完全符合要求

00:35:42.476 --> 00:35:45.312 
剛纔 我們深入探討了
佈局循環

00:35:46.113 --> 00:35:49.316 
和舊佈局的互動
用佈局錨點而不是

00:35:49.383 --> 00:35:52.886 
舊方法來
生成約束

00:35:52.953 --> 00:35:55.389 
以及用佈局指南
約束負面空間

00:35:56.023 --> 00:35:58.725 
我們還談到
不理想的約束

00:35:58.792 --> 00:36:00.894 
和如何解決歧義
這兩個問題

00:36:00.961 --> 00:36:02.729 
人們會在使用
Auto Layout時

00:36:02.796 --> 00:36:03.764 
經常遇到

00:36:03.931 --> 00:36:06.500 
這就是所有的
謎題內容

00:36:07.234 --> 00:36:09.169 
希望我們都爲
大家解釋清楚了

00:36:09.903 --> 00:36:13.173 
如果還沒有
聽過第一部分內容

00:36:13.240 --> 00:36:15.742 
建議大家找來看看
因爲其中的很多

00:36:16.009 --> 00:36:18.946 
內容都非常有用
相關視頻應該

00:36:19.012 --> 00:36:20.247 
很快就能
做出來

00:36:20.514 --> 00:36:22.282 
或者大家可以
回到11:00的時候

00:36:22.516 --> 00:36:27.087 
怎麼都行
當然想要了解更多詳情

00:36:27.154 --> 00:36:29.823 
網站上有文檔資料
我們還有行星代碼

00:36:29.890 --> 00:36:32.526 
很多是在第一部分中
提到 不過我們

00:36:32.593 --> 00:36:33.493 
這裏也有用到

00:36:33.560 --> 00:36:36.763 
你們在這看到的行星代碼
並沒有問題

00:36:36.830 --> 00:36:38.031 
實際上運行正常

00:36:38.098 --> 00:36:40.200 
如果希望使用這裏
介紹的調試方法

00:36:40.267 --> 00:36:41.568 
可以人爲地
破壞它

00:36:41.635 --> 00:36:43.904 
我們還有幾個相關講座

00:36:44.171 --> 00:36:47.374 
再說一下 第一部分講座
是在今天早些時候

00:36:47.441 --> 00:36:49.109 
明天還有兩個
大家可能會有興趣

00:36:49.176 --> 00:36:51.712 
在這之後 我們還要
直接返回實驗室

00:36:52.246 --> 00:36:54.281 
如果大家對
Auto Layout

00:36:54.348 --> 00:36:55.349 
和
Interface Builder

00:36:55.415 --> 00:36:56.783 
有問題的話 我們可以回答

00:36:56.850 --> 00:36:58.185 
今天就是
這些內容

00:36:58.519 --> 00:36:59.453 
希望大家過的愉快