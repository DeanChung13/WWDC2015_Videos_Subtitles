00:00:17.384 --> 00:00:19.019 
大家好 歡迎來到

00:00:19.086 --> 00:00:21.955 
瞭解網頁開發中WebKit
和Safari的新特性

00:00:22.523 --> 00:00:25.025 
我是布倫特·福安
下面將由我帶領大家

00:00:25.092 --> 00:00:27.861 
一起了解今年我們所取得的新進展

00:00:28.362 --> 00:00:30.864 
對於我們來說這是尤爲激動人心的一年

00:00:31.231 --> 00:00:34.701 
因爲這麼多年以來
我們只收到你們...

00:00:35.169 --> 00:00:38.739 
的錯誤報告
以及別人告訴我們的一些事情

00:00:38.805 --> 00:00:41.575 
但是今年 我們有了自己實驗室

00:00:41.642 --> 00:00:44.411 
讓我們可以對完成的所有內容做測試

00:00:44.745 --> 00:00:46.013 
試着讓你們用起來更加方便

00:00:47.181 --> 00:00:50.751 
無論你的主要目標是將
Safari作爲網頁開發工具

00:00:51.185 --> 00:00:53.687 
還是一個更大應用程序中的
嵌入式web視圖

00:00:53.754 --> 00:00:55.956 
我相信你很快就會在演講中

00:00:56.023 --> 00:00:58.559 
找到對你有用的內容

00:00:59.326 --> 00:01:02.162 
首先 我會簡短的介紹WebKit

00:01:02.262 --> 00:01:04.932 
以及它是怎樣應用在
Apple的軟件設計中

00:01:06.366 --> 00:01:09.102 
然後 介紹今年我們在
safari中增加的一些新功能

00:01:10.838 --> 00:01:12.773 
你將會用到這些新功能

00:01:12.973 --> 00:01:15.609 
最後 我想介紹一下

00:01:15.676 --> 00:01:19.947 
關於爲iOS和Mac
平臺創造的新奇體驗

00:01:20.214 --> 00:01:22.349 
所提到新特性在這些平臺都是可用的

00:01:22.683 --> 00:01:27.254 
如果你利用這些優點
會令你的網站更加吸引人

00:01:27.454 --> 00:01:29.022 
有利於瀏覽者瀏覽

00:01:29.990 --> 00:01:31.391 
現在我們開始討論WebKit

00:01:32.492 --> 00:01:34.361 
WebKit是我們瀏覽器的引擎

00:01:34.761 --> 00:01:39.099 
它是一個開源的項目
任何人都可以加入

00:01:41.368 --> 00:01:44.004 
你可能知道WebKit

00:01:44.137 --> 00:01:47.474 
是Safari的引擎
但是你也許沒意識到它

00:01:47.541 --> 00:01:49.810 
也被應用在其他的Apple
應用程序裏通過我們

00:01:49.877 --> 00:01:51.612 
所做的一系列事情已經得到實現

00:01:54.081 --> 00:01:57.518 
WebKit也是iOS
和 OS X的引擎

00:01:57.584 --> 00:01:59.253 
它們之間只有很細微的差別

00:01:59.686 --> 00:02:00.754 
因此在接下來的演講裏

00:02:00.821 --> 00:02:02.556 
除非我明確的提出新特性

00:02:02.623 --> 00:02:04.992 
僅在某一平臺可用

00:02:05.459 --> 00:02:07.261 
你可以認爲它們

00:02:07.327 --> 00:02:09.997 
可以用在所有的平臺

00:02:12.065 --> 00:02:15.235 
這裏有一個重點
如果你是一個Safari web

00:02:15.302 --> 00:02:18.005 
開發者或者iOS web
瀏覽器的開發者

00:02:18.138 --> 00:02:20.207 
你可以用我今天要講的全部內容

00:02:20.707 --> 00:02:23.510 
如果你是一個嵌入式網頁
視圖的app開發人員

00:02:23.577 --> 00:02:24.912 
你會用到我正在講的所有特性

00:02:27.681 --> 00:02:30.117 
如果你只是從事
JavaScriptCore

00:02:30.184 --> 00:02:34.922 
框架或者OS X自動化工具開發

00:02:34.988 --> 00:02:37.191 
你可以利用所有的
JavaScript特性

00:02:37.491 --> 00:02:38.792 
這一部分中我們將會講到

00:02:41.161 --> 00:02:43.997 
這就是我們對WebKit的介紹
接下來

00:02:44.398 --> 00:02:45.933 
將會介紹我們今年開發的新特性

00:02:48.936 --> 00:02:51.438 
因此我將暫停這一部分的介紹
說一下新的佈局

00:02:51.505 --> 00:02:53.440 
結構和渲染特性

00:02:54.575 --> 00:02:56.476 
我們更新了一些
JavaScript特性

00:02:56.543 --> 00:03:00.280 
我們讓它支持新的
JavaScript標準和CSS特性

00:03:00.347 --> 00:03:02.516 
這會讓你的樣式表

00:03:02.583 --> 00:03:04.084 
維護更加容易 可讀性更強

00:03:06.920 --> 00:03:09.323 
讓我們講一點Safari中

00:03:09.389 --> 00:03:11.792 
佈局和渲染等特性的改進

00:03:12.593 --> 00:03:15.529 
更準確的說 我想說的是關於
是背景效果的一些改進

00:03:17.030 --> 00:03:18.131 
在iOS 7的設計中

00:03:18.198 --> 00:03:20.234 
用戶界面的設計做了一些改變

00:03:20.300 --> 00:03:23.170 
加入了背景模糊效應

00:03:23.737 --> 00:03:27.608 
舉個例子 這裏你可以看到主界面圖標

00:03:27.674 --> 00:03:29.576 
像透過毛玻璃一樣

00:03:30.644 --> 00:03:32.613 
這樣的疊加增加了一些深度

00:03:33.180 --> 00:03:36.583 
給你一種感覺
這層後面好像發生了什麼

00:03:37.150 --> 00:03:39.786 
卻並沒有擋住內容 當我們嘗試

00:03:39.853 --> 00:03:42.089 
通過用戶界面去看的時候

00:03:43.724 --> 00:03:45.592 
後來在OS X Yosemite中

00:03:45.993 --> 00:03:47.794 
我們提供了相似的背景效應

00:03:48.595 --> 00:03:51.698 
我們在搜素側邊欄也做了
一點的模糊處理

00:03:52.533 --> 00:03:56.103 
讓文檔看起來也像透過毛玻璃一樣

00:03:57.604 --> 00:04:02.109 
這些效果很重要 看起來
像是原生系統的一部分

00:04:02.643 --> 00:04:04.211 
它們就是你想用的一些特性

00:04:04.278 --> 00:04:07.781 
在你的最終版本的個人網頁 
當人們通過Mac 

00:04:07.848 --> 00:04:09.783 
或者iOS設備瀏覽網頁時

00:04:10.584 --> 00:04:14.254 
但更加重要的是
當你想讓一個嵌入式的網頁視圖

00:04:14.321 --> 00:04:18.524 
成爲系統的一部分 或者看起來
像是原生用戶界面

00:04:19.459 --> 00:04:20.360 
你怎麼做到的呢？

00:04:22.262 --> 00:04:25.265 
假如我有一個展示照片的應用程序

00:04:26.266 --> 00:04:28.502 
顯然沒有很好的方法生成背景效應

00:04:28.669 --> 00:04:30.003 
像我們之前看到的那樣

00:04:31.071 --> 00:04:34.041 
我們可以嘗試用半透明的覆蓋層

00:04:34.241 --> 00:04:37.978 
但是你看到內容與上
上面的文字有些衝突

00:04:38.412 --> 00:04:42.149 
你知道後面的東西會讓
閱讀變得更加困難

00:04:43.417 --> 00:04:46.019 
但是現在我們有了
CSS濾鏡包含了模糊效果

00:04:46.320 --> 00:04:47.621 
我們可以試一下嗎？

00:04:48.922 --> 00:04:50.424 
當然那是一個不錯的效果

00:04:51.391 --> 00:04:53.327 
但是它並不是我們真正想要的

00:04:53.560 --> 00:04:56.163 
它唯一的作用就是清除圖片的背景

00:04:56.230 --> 00:04:58.332 
除了這點還有很多其他效果

00:05:00.868 --> 00:05:02.836 
我們通過觀察

00:05:03.270 --> 00:05:06.440 
發現像你一樣開發者仍在
繼續努力實現這個效果

00:05:06.507 --> 00:05:08.509 
他們會這樣做 有一個這樣的背景圖片

00:05:08.575 --> 00:05:11.979 
先生成一個完全模糊的圖片

00:05:12.045 --> 00:05:15.082 
然後被剪裁和移動覆蓋

00:05:15.148 --> 00:05:17.885 
到想要模糊的元素

00:05:18.685 --> 00:05:22.656 
這樣做很糟糕我的意思是
說我們很吃驚對我們來說

00:05:24.525 --> 00:05:25.926 
並不是一個好消息讓你那樣做

00:05:26.560 --> 00:05:31.565 
這就說明還有其他問題
我們不能讓這些背景更加靈活

00:05:31.965 --> 00:05:33.800 
改變模糊效果一件很困難的事

00:05:33.867 --> 00:05:36.370 
一旦我們這樣做就要重新
渲染所有的事情

00:05:37.905 --> 00:05:41.175 
因此 我們需要一個
更好的方法使用背景濾鏡

00:05:42.809 --> 00:05:47.614 
背景濾鏡允許我們在
CSS中指定背景效果

00:05:48.148 --> 00:05:51.218 
它也被提出作爲W3C標準之一

00:05:51.285 --> 00:05:53.253 
現在正在審覈中

00:05:54.188 --> 00:05:55.489 
讓我們看一下它們如何搭配

00:05:56.356 --> 00:05:59.660 
假如我們想給元素提供濾鏡效果

00:06:01.061 --> 00:06:04.031 
WebKit將會獲取它的範圍
在一個關閉背景

00:06:04.531 --> 00:06:05.732 
中重新渲染

00:06:06.667 --> 00:06:11.171 
這樣很有效率但是渲染過程很消耗資源

00:06:11.705 --> 00:06:14.308 
所以我們要確保不會過度使用

00:06:15.008 --> 00:06:16.410 
一旦我們有了背景環境

00:06:16.476 --> 00:06:18.378 
然後將濾鏡應用在上面
就會產生模糊效果

00:06:18.912 --> 00:06:21.849 
我們把前端的內容放在上面

00:06:22.316 --> 00:06:25.485 
然後我們可以重新合成完整的場景

00:06:25.552 --> 00:06:28.155 
你就可以得到想要的模糊效果

00:06:29.823 --> 00:06:32.092 
一旦我們讓模糊效果出現了

00:06:32.526 --> 00:06:34.828 
就意味着我們就可以靈活的運用

00:06:35.295 --> 00:06:36.663 
所有的CSS濾鏡

00:06:36.864 --> 00:06:38.932 
我們做到了 我們可以使用

00:06:39.166 --> 00:06:40.701 
其他的CSS濾鏡在這個效果上面

00:06:41.368 --> 00:06:43.203 
我們可以改變顏色

00:06:44.304 --> 00:06:46.240 
可以將多個濾鏡組合在一起

00:06:46.306 --> 00:06:49.276 
我們可以同時獲得模糊
和灰度效果就像這樣

00:06:50.143 --> 00:06:53.780 
最令人激動的是我們可以把這些

00:06:53.847 --> 00:06:55.349 
效果放在在動態頁面上

00:06:55.716 --> 00:06:59.887 
因此一行CSS代碼可以
讓背景模糊濾鏡

00:07:00.220 --> 00:07:03.657 
用在視頻上面 多麼不可思議

00:07:03.724 --> 00:07:05.792 
當實現這個功能的時候我很激動 

00:07:06.193 --> 00:07:09.530 
迫不及待的想看到這些
效果出現在你的個人網站

00:07:11.832 --> 00:07:13.901 
讓我們稍微休息一下

00:07:13.967 --> 00:07:18.505 
另外我們看到的一些問題
是佈局和滾動效果的渲染

00:07:20.974 --> 00:07:25.145 
你已經看到頂端的iTunes橫幅

00:07:25.579 --> 00:07:29.583 
如果你試着玩過的話
就會注意到當你滾動它時

00:07:30.050 --> 00:07:34.521 
它會以整個步長爲單位
移動在你每動一步的時候

00:07:34.922 --> 00:07:37.191 
你將得到一個完整的
電影標題或者電影截圖

00:07:39.026 --> 00:07:41.895 
我們在IOS端的圖片app
也能做到類似的效果

00:07:41.962 --> 00:07:46.166 
每次當我們看着一張圖片想滑到另一張
的時候都能直接滑過一整幅圖片

00:07:46.233 --> 00:07:49.970 
而不會出現前一張的一部分和
後一張的一部分同時顯示的情況

00:07:50.971 --> 00:07:56.910 
這種交互對於圖片庫或者其他
類似的平鋪內容來說是意義重大的

00:07:58.679 --> 00:08:03.283 
之前人們都是通過
編寫複雜的JavaScript語句

00:08:03.350 --> 00:08:04.852 
來實現這種滾動操作

00:08:05.219 --> 00:08:09.723 
開發者們大刀闊斧得拋棄了
之前瀏覽器內置的平滑滾動結構

00:08:10.290 --> 00:08:15.662 
通過人工加入JavaScript語句
將其替換成這種逐幀變化的模式

00:08:16.463 --> 00:08:18.799 
我們知道它的性能代償也是不容忽視的

00:08:18.866 --> 00:08:21.468 
我們發現這樣一個問題

00:08:21.869 --> 00:08:24.438 
你不可能每一幀都通過運行復雜的
JavaScript語句

00:08:24.505 --> 00:08:25.572 
來獲得平滑滾動的效果

00:08:26.707 --> 00:08:28.375 
所以我們需要另一種方式來實現它

00:08:29.810 --> 00:08:31.345 
那就是滾動界線點

00:08:33.480 --> 00:08:36.416 
滾動界線點是一種在
CSS裏聲明的方法

00:08:36.750 --> 00:08:41.688 
通過滾動曲線的動畫化來呈現滾動區域

00:08:41.855 --> 00:08:44.591 
它也是一種CSS標準

00:08:47.995 --> 00:08:51.198 
可以想象一下
我們有某種樣式的一個觀察孔

00:08:51.265 --> 00:08:53.400 
有一個盒子可以在裏面
看到一系列的相冊封面

00:08:53.934 --> 00:08:56.637 
所以在這張圖片裏面
還有許多被相冊封面遮住

00:08:57.171 --> 00:08:58.872 
看不清的其他沒有顯示在屏幕上的圖片

00:08:58.972 --> 00:09:02.276 
但是我想循環播放它們一次播放一張

00:09:02.943 --> 00:09:06.580 
我知道他們尺寸很厚
比如說他們都有300個像素

00:09:07.247 --> 00:09:11.084 
每次我掃過這些內容時

00:09:11.151 --> 00:09:14.721 
我希望可以滾動播放
直到看完一整本相冊

00:09:19.126 --> 00:09:20.827 
這一行爲可以通過

00:09:21.161 --> 00:09:25.799 
聲明滾動界限點中的x值來實現

00:09:26.500 --> 00:09:31.104 
我們會告訴它我們想讓它
以300個像素爲間隔行進

00:09:31.505 --> 00:09:33.574 
並且用設成300的
像素參數重複這一過程

00:09:34.641 --> 00:09:36.610 
這個動畫就是它所呈現出來的效果

00:09:37.077 --> 00:09:39.847 
我動手指來掃這些圖片

00:09:40.681 --> 00:09:42.649 
我所滑過的圖片數目

00:09:42.716 --> 00:09:44.518 
取決於我手指動的力度

00:09:44.985 --> 00:09:48.989 
但是當手指的動作一點點
減慢直到我們停下來時

00:09:49.056 --> 00:09:52.526 
界面將會停在一個邊界完整的圖片那兒

00:09:55.162 --> 00:09:59.900 
在源程序中實現這一效果需要兩行代碼

00:10:00.834 --> 00:10:04.104 
我們可以通過把滾動停止類型
設置爲強制來打開這個功能

00:10:05.272 --> 00:10:09.009 
再聲明一個300像素的重複間隔

00:10:11.378 --> 00:10:13.914 
現在我操作一個網站給你們演示一下

00:10:14.114 --> 00:10:17.918 
你們看當我這樣滑的時候 它動了起來

00:10:17.985 --> 00:10:23.223 
當我輕輕得拉回來並且撒手系統畫面會
停留在最近的那個滑動界限點上

00:10:23.323 --> 00:10:25.659 
所以它們就像是
被橡膠綁着彈回這個位置

00:10:28.262 --> 00:10:30.564 
你可能已經從它的名字裏懂了這些

00:10:30.864 --> 00:10:33.634 
但是滑動界限點可以
作用於兩個維度x軸和y軸

00:10:37.905 --> 00:10:41.341 
所以到目前爲止
我給你們展示的是一個非常簡潔的功能

00:10:41.542 --> 00:10:46.513 
但它不能很好得處理
滾動容器中的內容的大小不一致的情況

00:10:47.681 --> 00:10:49.983 
所以在我圖片元素的大小不一致時

00:10:50.050 --> 00:10:52.619 
我有一張大小爲300像素的方形圖片

00:10:52.986 --> 00:10:54.488 
同時也有一張矩形圖片

00:10:55.189 --> 00:10:58.058 
這個矩形圖片或者說它的內容

00:10:59.059 --> 00:11:01.161 
並不匹配300像素的邊界

00:11:01.228 --> 00:11:05.098 
所以如果我嘗試着滾動它
顯示出來的效果就不太正常了

00:11:06.166 --> 00:11:09.770 
而滾動界限機制可以應對這種情況

00:11:11.371 --> 00:11:14.741 
如果我們把滾動容器視作
我身後的白盒子

00:11:15.776 --> 00:11:17.978 
這個就是滾動停止終點

00:11:18.612 --> 00:11:23.383 
我們在滾動圖片時會在這一點對齊

00:11:23.951 --> 00:11:25.586 
它一般默認位於左上角

00:11:25.752 --> 00:11:28.989 
但我們可以通過標準的
CSS定位語法給它設定位置

00:11:31.158 --> 00:11:34.595 
與滾動停止終點相伴隨的是
滾動停止座標

00:11:37.097 --> 00:11:40.901 
這些是滾動容器中每個元素的位置座標

00:11:41.902 --> 00:11:43.804 
它們也都默認位於左上角

00:11:44.438 --> 00:11:46.306 
所以我們可以這樣說...

00:11:46.740 --> 00:11:49.409 
在WebKit中我們能使用這個語法

00:11:49.476 --> 00:11:52.212 
讓滾動停止座標落在
每個元素的中心位置

00:11:52.846 --> 00:11:58.118 
我們可以說我們希望滾動容器的中心
能作爲我們的目標點我們的終點

00:11:59.052 --> 00:12:00.354 
你把它們聯繫到一起的時候

00:12:00.954 --> 00:12:04.224 
當你用手指來滾動圖片

00:12:04.591 --> 00:12:06.960 
最終它們能整齊得停在箱子的中心點

00:12:08.595 --> 00:12:14.334 
實現這一操作的代碼並不比
簡單的像素循環要複雜

00:12:14.768 --> 00:12:18.805 
我們強制把這個功能集成在滾動容器裏

00:12:19.506 --> 00:12:22.976 
我們把停止點定位在
滾動容器的中心位置

00:12:24.545 --> 00:12:26.914 
然後給每一個元素都賦予了位置座標

00:12:26.980 --> 00:12:29.316 
在這裏我創建了一個類
叫做“photograph”

00:12:29.383 --> 00:12:32.319 
你知道你可以用它來做你想做的
任何事把它定位在中心位置

00:12:33.820 --> 00:12:36.957 
這就是產生網頁中實際效果的過程

00:12:37.191 --> 00:12:41.562 
所以對於一系列圖片
當我滾動經過它們的時候

00:12:41.628 --> 00:12:43.497 
我們經常會停在中間位置

00:12:46.033 --> 00:12:49.136 
接下來有請克里斯上臺

00:12:49.203 --> 00:12:50.904 
用一個神奇的例子

00:12:51.471 --> 00:12:53.807 
來給大傢俱體展示一下

00:12:59.880 --> 00:13:04.151 
感謝布倫特 我叫克里斯·楊
是蘋果互動團隊的一名開發人員

00:13:04.618 --> 00:13:06.787 
蘋果的互動團隊在公司做了許多工作

00:13:06.854 --> 00:13:10.858 
其中之一就是我們負責你們在
Apple.com上看到的許多網頁的內容

00:13:11.258 --> 00:13:13.193 
所以今天我非常興奮能出現在這裏

00:13:13.260 --> 00:13:15.128 
因爲我感覺剛剛布倫特展示的許多功能

00:13:15.195 --> 00:13:18.665 
對於網頁開發者來說是非常激動人心的
我也非常激動得希望自己能夠用到它們

00:13:22.402 --> 00:13:24.905 
來 讓我們開始
這裏放了一個小的web app

00:13:24.972 --> 00:13:27.307 
用來展示一些WebKit的新功能

00:13:27.941 --> 00:13:31.578 
這裏有一個圖片庫 我們可以上下滾動

00:13:31.879 --> 00:13:34.214 
你可以看到
這裏有許多照片的尺寸和其他的不同

00:13:35.082 --> 00:13:37.150 
我們將鼠標停在這裏 點擊打開它

00:13:37.718 --> 00:13:39.853 
它將會在overlay view中打開

00:13:39.920 --> 00:13:43.524 
使我們能在這些照片中左右滾動

00:13:43.857 --> 00:13:46.627 
甚至我們可以通過點擊這裏
在右上角選擇我們“喜歡的”圖片

00:13:47.561 --> 00:13:50.197 
這是非常酷的但我想我們可以
通過使用Webkit中的一些新功能

00:13:50.264 --> 00:13:54.501 
讓它變得更好 
首先 我想談一下背景濾波器

00:13:55.335 --> 00:13:59.573 
大家關注一下在app上方的這個位置
我們把導航元素固定在這裏

00:14:00.007 --> 00:14:03.210 
現在它是實心黑色的被固定在最上面

00:14:03.644 --> 00:14:06.847 
在我們上下滾動時內容
就被覆蓋在它的底下

00:14:07.147 --> 00:14:09.616 
然後點擊進入Safari工具條
它就變得模糊

00:14:10.083 --> 00:14:11.118 
這真的很酷

00:14:11.185 --> 00:14:15.822 
但實際上我們可以
通過給這個元素加一個背景過濾器

00:14:15.889 --> 00:14:20.260 
讓它看起來更像是UI的一部分
接下來我會告訴你怎樣實現它

00:14:20.327 --> 00:14:22.362 
你們知道我喜歡在編程的
時候加很多空格

00:14:22.429 --> 00:14:26.099 
我將會跳過這裏的UI和代碼
向前再向後一點點

00:14:28.902 --> 00:14:31.371 
酷 現在我打開了Xcode
以及我的一個CSS文件

00:14:31.438 --> 00:14:36.510 
我們將要把一些新的
代碼加進這個CSS文件中我要開始了

00:14:37.177 --> 00:14:39.580 
我要在這裏粘貼一個新建的導航聲明

00:14:39.646 --> 00:14:42.916 
來指向那個實心黑色的導航條

00:14:43.283 --> 00:14:47.788 
我們要把背景顏色設置成
透明度爲50%的實心黑色

00:14:48.655 --> 00:14:51.091 
然後我們要加一個背景濾波器
來進行10個像素的模糊

00:14:52.626 --> 00:14:55.562 
如果我們再返回 將會看到

00:14:55.629 --> 00:14:59.199 
我們新加的這行代碼
將會神奇得呈現出來

00:14:59.266 --> 00:15:01.802 
當你滾動的時候底下的內容會變模糊

00:15:02.569 --> 00:15:06.573 
而文本依舊很清晰Safari
工具條的一切也都不會被影響

00:15:07.007 --> 00:15:08.308 
我認爲這是非常了不起的

00:15:08.375 --> 00:15:10.811 
這是WebKit團隊做出的
一項令人驚歎的成果

00:15:13.180 --> 00:15:17.050 
非常厲害接下來我想給
你們展示的是滾動停止點

00:15:17.918 --> 00:15:21.221 
我認爲覆疊圖庫是一個
使用滾動停止點的好例子

00:15:22.122 --> 00:15:24.591 
記住 當我們這樣左右滾動的時候

00:15:24.658 --> 00:15:27.794 
我們會到達所見內容的左邊

00:15:27.861 --> 00:15:29.997 
而不是精確得對準我們看着的地方

00:15:30.898 --> 00:15:33.433 
這並沒有太大影響
但我們能夠改善這一點

00:15:33.500 --> 00:15:35.035 
通過使用滾動界限點來對準它

00:15:35.102 --> 00:15:37.604 
我們總是能夠看到想要看的圖片

00:15:38.839 --> 00:15:41.575 
所以我會給你們演示如何實現它
讓我們回到之前的CSS界面

00:15:42.843 --> 00:15:45.879 
我將要在覆疊圖庫裏新建一個聲明

00:15:45.946 --> 00:15:48.215 
來強制設定滾動停止類型

00:15:48.682 --> 00:15:51.919 
以及設置滾動停止點x座標
讓它重複100個像素的視口寬度

00:15:52.286 --> 00:15:53.687 
所有的照片容器都是這個尺寸

00:15:53.754 --> 00:15:56.690 
所以我們再次返回看的時候
所有元素都能很好得貼合

00:15:59.793 --> 00:16:03.630 
如果刷新一下 現在就能非常流暢得

00:16:03.697 --> 00:16:06.900 
瀏覽這些圖片了
WebKit控制的滾動效果已經生效

00:16:07.201 --> 00:16:10.537 
你們看 我碰到了邊緣
它們會彈回到正確的位置

00:16:11.305 --> 00:16:14.441 
這樣真的非常棒
正如你們所知 如果沒有這個功能

00:16:14.508 --> 00:16:16.944 
就只能用很長的
JavaScript代碼來實現它

00:16:17.010 --> 00:16:19.613 
我迫不及待得想看到你們
能用它來做點什麼這真的是太棒了

00:16:21.515 --> 00:16:23.650 
你們知道 還有一個東西也很流行

00:16:23.717 --> 00:16:26.587 
就是你們經常會使用
JavaScript爲元素添加樣式

00:16:26.887 --> 00:16:30.257 
那也將是一個關於覆疊的
非常有趣的例子...

00:16:30.357 --> 00:16:32.192 
用masonry圖像庫

00:16:32.926 --> 00:16:34.428 
當我們上下滾動的時候

00:16:34.494 --> 00:16:36.463 
我們實際上在
JavaScript裏生成了網格

00:16:36.530 --> 00:16:40.200 
所以能以此改變x軸和y軸的座標個數

00:16:40.667 --> 00:16:43.837 
我們並不能提前知道每個元素會有多高

00:16:44.638 --> 00:16:47.040 
但我們可以通過用
JavaScript

00:16:47.107 --> 00:16:48.909 
在滾動界限點設置重複值來實現它

00:16:48.976 --> 00:16:51.178 
所以在我們垂直滾動的時候

00:16:51.512 --> 00:16:53.580 
導航欄將會很好得停在這些元素中間

00:16:53.647 --> 00:16:55.516 
所以你可以總是專注於應該去做的事情

00:16:56.383 --> 00:16:59.786 
爲了實現它 我們將要跳回
JavaScript 在這裏

00:17:00.020 --> 00:17:01.855 
這是一個新的
JavaScript文件

00:17:03.557 --> 00:17:06.059 
我們將要把masonry
圖庫的構造函數

00:17:06.292 --> 00:17:07.828 
擴展到停止點masonry圖庫

00:17:09.029 --> 00:17:12.499 
我們將要做以及正在做的主要就是
添加進一種新方法叫做設置停止點樣式

00:17:13.066 --> 00:17:15.169 
通過它我們把滾動停止模式設置爲強制

00:17:15.234 --> 00:17:18.038 
它將會在y軸設置停止點

00:17:18.137 --> 00:17:22.509 
並循環y軸上和停止點在
同一高度的所有座標點

00:17:23.042 --> 00:17:25.779 
這是一種我們實例化運行時

00:17:26.079 --> 00:17:27.948 
在構造函數內部設置的變量

00:17:29.550 --> 00:17:30.951 
我們要做的最後一件事就是

00:17:31.018 --> 00:17:33.820 
告訴我們的JS文件去使用它
因爲我們已經完成了對它的擴展

00:17:33.887 --> 00:17:36.456 
只需要把它放在這裏
用這個來代替masonry圖片庫

00:17:38.425 --> 00:17:42.663 
現在當我們更新的時候 你會注意到
導航欄非常合理得置於這些元素中

00:17:42.996 --> 00:17:48.468 
我們可以拋出它它也總會停在
一個能適應內容的合適的地方

00:17:49.169 --> 00:17:50.470 
我認爲這一點非常棒

00:17:50.537 --> 00:17:52.773 
現在我想重新請出布倫特上臺演講

00:17:52.840 --> 00:17:54.708 
他將會談一些佈局和渲染的問題
謝謝

00:17:59.746 --> 00:18:00.881 
感謝大家 真是太奇妙了

00:18:05.886 --> 00:18:09.590 
我想回顧一下我們剛剛講過的一些功能

00:18:09.990 --> 00:18:12.993 
背景濾波器是非常有效的
它們經過了硬件加速

00:18:13.293 --> 00:18:17.998 
但是又因渲染過程變得難以觸發

00:18:18.065 --> 00:18:19.266 
所以我們應該認真衡量一下

00:18:19.666 --> 00:18:22.135 
看看它在你們自己的網站上的運行情況

00:18:22.603 --> 00:18:26.673 
對於頁面內容和tile內容來說
滾動界限是一個福音

00:18:27.040 --> 00:18:30.110 
但當你想做任何
程序相關的滑動時都需要小心

00:18:30.444 --> 00:18:34.715 
因爲在操作滾動過程時
這兩個功能會互相干擾

00:18:34.882 --> 00:18:35.949 
所以要記住這一點

00:18:38.252 --> 00:18:41.188 
同時這些會話被封裝進了
佈局和渲染功能中

00:18:41.788 --> 00:18:43.056 
現在我的話題將要轉到

00:18:43.457 --> 00:18:46.226 
我們今年在做的一些對
JavaScript的更新

00:18:47.394 --> 00:18:50.364 
JavaScript ES6
標準非常得奇妙

00:18:50.731 --> 00:18:54.535 
它通過一些新的方式推進了
JavaScript 的發展

00:18:54.801 --> 00:18:56.770 
克里斯在他的演示中提到了一些

00:18:59.339 --> 00:19:03.944 
我想講一下 我們今年集成的
幾個激動人心的新功能

00:19:05.179 --> 00:19:08.482 
去年在我們的會議中我們
談論過一些添加的新功能

00:19:09.049 --> 00:19:10.784 
在那之後我們並非原地不動

00:19:11.118 --> 00:19:13.820 
而是做了驚人的對ES 6的擴展支持

00:19:14.254 --> 00:19:18.058 
使用了許多東西對象符號和弱集

00:19:18.825 --> 00:19:21.862 
接下來我要介紹的幾樣
都是我認爲非常非常有用的

00:19:23.897 --> 00:19:25.032 
首先從我最愛的

00:19:25.899 --> 00:19:26.733 
模板文本開始

00:19:27.434 --> 00:19:31.972 
你們是否會經常遇到這樣的問題呢

00:19:32.372 --> 00:19:34.174 
比如當你嘗試着構建日誌字符串

00:19:34.241 --> 00:19:35.609 
或者給用戶生成什麼東西時

00:19:35.909 --> 00:19:37.978 
你有一羣字符串塊或者別的東西

00:19:38.045 --> 00:19:39.980 
想把它們組合在一起

00:19:40.380 --> 00:19:42.883 
最終你會遇到這樣的舊語法樣例

00:19:43.383 --> 00:19:46.486 
我曾經苦於太多的時間耗費

00:19:46.553 --> 00:19:48.589 
用來尋找丟失的連接運算符

00:19:48.755 --> 00:19:50.657 
或者尋找我忘記加的右引號

00:19:51.425 --> 00:19:56.396 
所以在ES6引入這一新的模板文本
語法之後 我內心的喜悅是無以言表的

00:19:57.130 --> 00:20:00.467 
我們可以用它建立字符串
一些特定的字符串

00:20:00.534 --> 00:20:03.937 
可以用反引號字符來取代
常規的引用字符串

00:20:04.538 --> 00:20:07.274 
當我們那樣做的時候

00:20:07.741 --> 00:20:10.944 
那些容易遺落的美元符號 花括號等

00:20:11.144 --> 00:20:13.814 
就能自動生成了

00:20:14.581 --> 00:20:18.018 
你甚至可以在語法內部操作

00:20:18.318 --> 00:20:19.887 
就像在這裏我對兩個數字求

00:20:20.187 --> 00:20:22.956 
和它們會得到相同的輸出

00:20:23.390 --> 00:20:26.927 
但我發現第二種更容易閱讀

00:20:27.261 --> 00:20:29.363 
我已經完全被它征服了

00:20:29.429 --> 00:20:31.665 
現在我寫的東西全部都會用這種語法

00:20:31.798 --> 00:20:32.633 
我愛它

00:20:35.302 --> 00:20:38.438 
今年引入的另一種能讓
寫代碼變得更容易的方法

00:20:39.106 --> 00:20:41.041 
是和對象文字創建有關的

00:20:41.408 --> 00:20:43.544 
你經常會面對這樣的情況

00:20:43.610 --> 00:20:45.879 
我們有一些發生器函數

00:20:46.213 --> 00:20:48.148 
包含了我們想用的變量名

00:20:48.749 --> 00:20:54.321 
實際上這些變量名
是我們想賦予給新建對象文字的名字

00:20:54.555 --> 00:20:58.258 
所以你會傻傻得重複
發送名字 引號 名字

00:20:58.325 --> 00:21:00.060 
以及類別 引號 類別

00:21:00.761 --> 00:21:02.229 
人們已經習以爲常了

00:21:02.663 --> 00:21:05.933 
但當ES6的設計者引進了一種簡寫法

00:21:06.934 --> 00:21:09.937 
在這裏你可以用變量名創建對象文字

00:21:10.137 --> 00:21:12.940 
你不需要提供屬性名

00:21:13.006 --> 00:21:15.175 
它將會使用你所提供的值的名字

00:21:16.143 --> 00:21:18.545 
在web檢查器模式下

00:21:18.612 --> 00:21:21.381 
我們可以用它來避免上百次重複

00:21:22.149 --> 00:21:24.251 
你會發現那真是太有用了

00:21:24.318 --> 00:21:26.119 
我確定 如果你看一下自己寫的代碼

00:21:26.186 --> 00:21:28.322 
你會發現許多可以適用的場景

00:21:31.525 --> 00:21:35.762 
如今JavaScript擁有強大的
面向對象的軟件設計功能

00:21:36.463 --> 00:21:38.532 
但它基於原型的語法

00:21:38.599 --> 00:21:43.103 
對於那些從Swift或者
C++或者其他類似的語言

00:21:43.170 --> 00:21:45.873 
轉到JavaScript的人來說

00:21:46.173 --> 00:21:48.475 
似乎有些難以理解

00:21:49.643 --> 00:21:54.314 
這裏我舉一個用標準的原型語法
寫出的多邊形類的簡單例子

00:21:55.015 --> 00:21:58.352 
在ES6中 引入了一種新的語法

00:21:59.353 --> 00:22:03.423 
一種基於對象和類的語法

00:22:03.490 --> 00:22:06.460 
看起來和C++或者Swift很像

00:22:07.227 --> 00:22:09.463 
允許我們把所有東西封裝在一起

00:22:09.963 --> 00:22:13.834 
它變得更加好讀
也更容易看出事物之間的關聯

00:22:15.102 --> 00:22:19.306 
這種類語法使用一個特殊的
函數以及一個構造器

00:22:19.773 --> 00:22:22.242 
爲我們進行對象初始化

00:22:22.943 --> 00:22:26.313 
我們可以把類中的方法
定義成對象的一部分

00:22:28.582 --> 00:22:33.453 
同時它支持繼承我們可以
通過擴展關鍵字從已有的對象中繼承

00:22:34.488 --> 00:22:39.660 
在繼承的時候我們想確保
使用超算符對母類進行初始化

00:22:41.028 --> 00:22:44.932 
我們可以像在其他面向
對象的語言中那樣對方法重載

00:22:45.465 --> 00:22:47.601 
現在它甚至可以支持靜態方法

00:22:47.668 --> 00:22:50.204 
所以你可以把方法定義在

00:22:50.270 --> 00:22:53.574 
你不需要使用特定實例對象的類中

00:22:54.842 --> 00:22:58.078 
最後 這種新的類語法

00:22:58.145 --> 00:23:01.515 
是和已有的基於原型的語法完全兼容的

00:23:01.582 --> 00:23:05.586 
你可以直接使用這種新
語法對基於原型的代碼進行擴展

00:23:05.719 --> 00:23:08.155 
不用重新寫任何東西

00:23:08.856 --> 00:23:12.559 
我認爲這是一種巨大的優勢
它是一種你可以立即採用的東西

00:23:15.596 --> 00:23:18.832 
以上就是我對JavaScript
更新功能的簡短介紹

00:23:19.099 --> 00:23:22.369 
我們今年做了許多關於
JavaScript的成果

00:23:22.603 --> 00:23:27.741 
所以我誠摯地建議你們下載 El
Capitan開發軟件試着用一下

00:23:31.345 --> 00:23:34.014 
我們已經做了許多年的CSS

00:23:34.081 --> 00:23:38.352 
從許多造成臃腫式規則的
模式中一路走來

00:23:40.988 --> 00:23:45.926 
今年 我們實施了一些新的
CSS標準旨在與此抗爭

00:23:46.527 --> 00:23:48.395 
使得它的風格更加簡單易實現

00:23:50.631 --> 00:23:52.766 
這是此類演講中經常會有的一個主題

00:23:52.833 --> 00:23:55.536 
但我並沒有時間講完我們
今年做的所有成果

00:23:55.602 --> 00:23:59.339 
anylink、解釋佔位符、
語言都僅僅是其中的一部分

00:23:59.673 --> 00:24:02.309 
但我希望你們可以拿到
我們的開發器種子 自己嘗試一下

00:24:04.878 --> 00:24:05.779 
所以我想先講一下

00:24:05.846 --> 00:24:08.348 
關於最近的一些無前綴的
屬性和值的問題

00:24:08.849 --> 00:24:12.019 
我們對今年這些標準的適用性

00:24:12.085 --> 00:24:13.987 
以及對一些功能的穩定性都非常滿意

00:24:14.188 --> 00:24:17.758 
所以我們實現了它們的無前綴化
現在你可以在本機格式使用了

00:24:18.592 --> 00:24:21.495 
同時我們也將繼續支持它們在
WebKit裏的有前綴格式

00:24:21.562 --> 00:24:23.230 
所以你現有的網站也能繼續使用

00:24:23.497 --> 00:24:25.966 
我們建議你們切換成
新的WebKit版本

00:24:26.567 --> 00:24:30.370 
或者切換成能減少你的新代碼中
字符串數目的WebKit版本

00:24:32.806 --> 00:24:36.944 
我知道把這一令人振奮的無前
綴滑動做到頂端是很難的

00:24:37.377 --> 00:24:38.478 
但是我要嘗試一下

00:24:40.380 --> 00:24:44.151 
這是一種很常見的需求

00:24:44.218 --> 00:24:46.353 
來識別出你的網址是否正在被

00:24:46.420 --> 00:24:48.021 
一個支持特定功能的瀏覽器使用

00:24:48.288 --> 00:24:50.190 
你是不是會選擇使用特定的功能

00:24:50.257 --> 00:24:52.326 
這取決於瀏覽器可以做些什麼

00:24:56.630 --> 00:24:58.765 
讓我們舉個例子

00:24:58.832 --> 00:25:02.369 
我想對一個網頁使用首字下
沉的樣式爲了實現這樣的效果

00:25:02.803 --> 00:25:05.372 
我想用一個和那個"C"不同的字體

00:25:05.639 --> 00:25:09.409 
我想在它周圍加間距和額外的填充

00:25:09.476 --> 00:25:11.211 
我希望它有不同的字號

00:25:12.880 --> 00:25:14.214 
讓它看起來非常有特色

00:25:14.615 --> 00:25:16.717 
我可以通過WebKit的
首字處理來實現

00:25:16.783 --> 00:25:19.219 
這是今年WebKit
推出的另一個新功能

00:25:22.089 --> 00:25:24.958 
但是如果瀏覽我網頁的
瀏覽器並不支持它

00:25:25.058 --> 00:25:30.230 
那是非常可怕的...
我的意思是說那是一大損失

00:25:30.531 --> 00:25:32.666 
如果我知道它的最終顯示效果是這樣

00:25:32.733 --> 00:25:35.669 
我將永遠不會使用那種字體
我也不會在它旁邊留間隔

00:25:35.903 --> 00:25:38.572 
如果我知道它並不能
呈現我想要的樣子的話

00:25:38.839 --> 00:25:40.541 
我根本什麼都不會去做

00:25:42.676 --> 00:25:45.979 
所以在以前 我們會用一些這樣的代碼

00:25:46.046 --> 00:25:48.282 
來測試瀏覽器 問它

00:25:48.582 --> 00:25:50.250 
欸 你能支持首字放大的格式嗎？

00:25:50.317 --> 00:25:52.653 
如果你能支持我可以做一些額外的工作

00:25:52.719 --> 00:25:54.888 
遍歷DOM 找到一些
我想添加樣式的元素

00:25:54.955 --> 00:25:56.823 
然後應用這些東西

00:25:57.958 --> 00:25:59.960 
好 那將需要運行大量的
JavaScript語句

00:26:00.027 --> 00:26:01.828 
或者導入大量的庫來實現它

00:26:03.964 --> 00:26:05.165 
現在我們根本不需要那樣做

00:26:05.699 --> 00:26:09.203 
今年WebKit支持@supports功能

00:26:09.670 --> 00:26:11.338 
它允許我們建立一個條件語句

00:26:11.572 --> 00:26:15.409 
只有當滿足條件的時候

00:26:15.475 --> 00:26:16.743 
纔會執行括號內的所有內容

00:26:16.810 --> 00:26:19.479 
所以在這個我想讓WebKit
首字下沉的例子中

00:26:19.813 --> 00:26:24.685 
我可以把所有特殊樣式
存進支持它的語句中

00:26:25.385 --> 00:26:28.388 
所以當我用一個並不支持
WebKit首字放大的瀏覽器

00:26:28.455 --> 00:26:29.423 
點進一個網址的時候

00:26:31.158 --> 00:26:36.163 
我得到一個比較清淡的效果 

00:26:36.463 --> 00:26:40.000 
但看起來很好它非常得
易讀並且看起來不錯

00:26:40.501 --> 00:26:42.769 
如果有人用Safari進入這個網址

00:26:43.303 --> 00:26:45.739 
他們會看到首字下沉

00:26:46.707 --> 00:26:47.574 
多麼奇妙！

00:26:51.011 --> 00:26:53.180 
我想講一些關於減少代碼重複的內容

00:26:54.648 --> 00:26:57.084 
這是一些web檢查器實際中的代碼

00:26:57.551 --> 00:27:00.454 
好 我爲幻燈片清理它一下

00:27:00.521 --> 00:27:03.457 
我們有許多像這樣的例子

00:27:03.857 --> 00:27:06.793 
默認值和一系列的類都是...

00:27:06.994 --> 00:27:09.196 
同一羣組的一部分

00:27:09.363 --> 00:27:11.365 
我們想給它們應用一些樣式

00:27:13.800 --> 00:27:16.270 
但我們在一遍遍得重複默認值

00:27:16.336 --> 00:27:19.840 
又在其他類中把上述過程重複了幾十次

00:27:20.073 --> 00:27:22.609 
在其他樣式中重複了幾百次

00:27:23.010 --> 00:27:25.679 
它最終變得超出負荷

00:27:26.980 --> 00:27:30.884 
所以CSS4的開發者們約定

00:27:31.051 --> 00:27:33.887 
和創造了匹配僞類

00:27:34.488 --> 00:27:40.127 
它所做的是允許我們編程定義出

00:27:40.661 --> 00:27:42.362 
默認值所有可能的排列

00:27:42.429 --> 00:27:47.067 
比如像一個類和一系列
選擇符的排列情況

00:27:47.801 --> 00:27:51.371 
這就取代了那些無謂的重複

00:27:52.906 --> 00:27:54.241 
而是用一行程序來替換它們

00:27:55.242 --> 00:27:59.346 
和寫代碼相比我唯一更喜歡
做的事情就是刪除代碼

00:27:59.413 --> 00:28:01.281 
這真是太奇妙了！

00:28:01.348 --> 00:28:05.185 
因爲我們可以避免大量的重複代碼

00:28:05.252 --> 00:28:07.421 
我們實現這些改變
做到避免重複的那一天

00:28:07.487 --> 00:28:09.890 
是web檢查器史上值得紀唸的日子

00:28:12.960 --> 00:28:15.762 
這些是今年CSS的一些新功能

00:28:16.864 --> 00:28:20.601 
我們也已經完成了
關於Safari的提高方面的討論

00:28:23.470 --> 00:28:25.739 
所以我現在想切換一下話題

00:28:25.806 --> 00:28:29.109 
再談論一點如何在OS X
和IOS上創造出奇特的體驗

00:28:29.977 --> 00:28:33.213 
在座的各位中有多少

00:28:33.280 --> 00:28:36.350 
擁有僅面向桌面的網站？

00:28:36.917 --> 00:28:38.752 
或者你們專門爲桌面做過什麼東西麼？

00:28:39.152 --> 00:28:39.987 
一兩個

00:28:40.554 --> 00:28:43.757 
其他人更多得可能
是做面向移動端的東西

00:28:43.824 --> 00:28:45.192 
也就是IOS和Safari

00:28:46.393 --> 00:28:51.832 
所以我的演講的最大目的
就是希望你們可以使用

00:28:51.899 --> 00:28:56.837 
本次提到過的
這些新開發出來的web標準功能

00:28:56.904 --> 00:28:59.273 
我希望能使你們接受這些

00:28:59.706 --> 00:29:01.942 
特別爲Mac和IOS端設計的東西

00:29:02.276 --> 00:29:08.148 
通過這些技術的支持你會讓用戶驚喜

00:29:08.215 --> 00:29:11.218 
在我們的整個生態系統中
和用戶建立更緊密的聯繫

00:29:13.620 --> 00:29:17.191 
AirPlay是從IOS 4中
開始在IOS中上線的

00:29:17.257 --> 00:29:19.626 
IOS 4之後我們在
Safari中對它提供支持

00:29:21.228 --> 00:29:25.032 
但是今年 我們開放AirPlay
的平臺中包括Safari

00:29:25.165 --> 00:29:29.970 
和OS X 它允許用戶

00:29:30.804 --> 00:29:34.007 
直接在手機中使用Apple TV

00:29:34.441 --> 00:29:38.212 
它的API和在IOS中引入的相同

00:29:38.278 --> 00:29:40.881 
所以如果你從2013年
就開始使用這一支持

00:29:40.948 --> 00:29:42.249 
你就已經完成了這個工作

00:29:42.449 --> 00:29:45.619 
或者如果你使用我們的媒體控制插件

00:29:46.053 --> 00:29:47.354 
你現在就已經得到了相關支持

00:29:47.621 --> 00:29:50.724 
但如果你不是的話

00:29:50.791 --> 00:29:54.394 
我建議你看看我們2013的WWDC
在那裏我們提到了許多細節

00:29:54.461 --> 00:29:56.096 
關於如何支持AirPlay協議

00:30:00.467 --> 00:30:01.602 
多重任務處理

00:30:01.668 --> 00:30:04.605 
昨天我們在iPad上看到
多重任務處理的時候不是覺得很酷嗎？

00:30:06.740 --> 00:30:08.909 
在昨天之前你有一個好主意

00:30:08.976 --> 00:30:12.246 
當你在iPad上瀏覽內容的時候
你想到了那個好主意

00:30:12.646 --> 00:30:14.248 
你們曾經都可以佔用整個屏幕

00:30:14.448 --> 00:30:17.918 
但是現在分配給你們來
演示內容的屏幕只有三分之二

00:30:17.985 --> 00:30:22.523 
或者一半 或者三分之一

00:30:24.157 --> 00:30:27.628 
這種設計已經變得非常重要

00:30:28.428 --> 00:30:30.964 
讓用戶來控制視圖的尺寸

00:30:31.698 --> 00:30:34.568 
iPad現在看起來更像是桌面了

00:30:37.037 --> 00:30:39.406 
這是一種非常重要 非常有價值的設計

00:30:39.473 --> 00:30:44.378 
我們明天會用整個
演講來介紹它 在同一時間同一地點

00:30:45.045 --> 00:30:48.015 
既然你們今天都能來到這裏
我知道你們一定能做到早起

00:30:48.282 --> 00:30:50.751 
我建議你們明天來聽一下這個講座

00:30:50.817 --> 00:30:53.620 
“使用Safari對響應式web
設計進行傳輸與調試”

00:30:53.687 --> 00:30:56.323 
它將會介紹Safari在web
檢查器中新加的一些工具和功能

00:30:56.390 --> 00:30:59.259 
當你嘗試使用這些風格的時候

00:30:59.326 --> 00:31:01.595 
它可以帶來許多便利

00:31:02.029 --> 00:31:04.264 
這裏也將會有一個關於
多重任務處理的講座

00:31:04.331 --> 00:31:08.235 
針對一些在iPad和IOS 9中的
基於媒體的app也非常有趣

00:31:11.471 --> 00:31:13.874 
我們昨天講了
picture-in-picture

00:31:16.143 --> 00:31:18.412 
iPad是一個瀏覽內容的好工具

00:31:19.313 --> 00:31:21.915 
在昨天之前你們有一個好主意

00:31:21.982 --> 00:31:25.786 
就是你們的內容
可以通過這種全屏模式來瀏覽

00:31:26.820 --> 00:31:30.724 
但現在我們有一個新的方式
也就是我們的picture-in-picture模式

00:31:31.258 --> 00:31:34.127 
讓你可以把孩子們的
照片壓縮進一個小箱子

00:31:34.194 --> 00:31:36.630 
放在你日曆中巨大的空角落裏

00:31:41.268 --> 00:31:43.470 
這是一個很強大的功能

00:31:43.637 --> 00:31:47.674 
我們擁有--我們把它
定義爲呈現模式下的WebKit

00:31:47.741 --> 00:31:50.110 
我們支持你們所熟悉的全屏

00:31:51.111 --> 00:31:55.048 
內聯了你們那些可以在頁面本身

00:31:56.583 --> 00:31:59.586 
以及在picture-in-picture
也就是我們的新模式中展出的內容

00:32:00.153 --> 00:32:03.090 
所以這裏有一系列你們
可能要擔心的問題

00:32:05.926 --> 00:32:10.330 
WebKit缺省WebKit媒體控制
會支持箱子外面的picture-in-picture模式

00:32:10.898 --> 00:32:12.533 
但如果你想寫自己的媒體控制

00:32:12.599 --> 00:32:15.903 
你需要使用呈現模式下的
API來控制它們

00:32:16.436 --> 00:32:19.973 
在我們的開發者文件中介紹了

00:32:20.040 --> 00:32:22.843 
怎樣把它們用於你自己的網頁中

00:32:23.844 --> 00:32:25.512 
這裏有一些你需要考慮的問題

00:32:26.513 --> 00:32:30.217 
當一個查看器開始觀察

00:32:30.284 --> 00:32:32.352 
你在全屏視頻模式的內容時

00:32:32.619 --> 00:32:34.655 
頁面可能會跳出由
播放窗口完全遮蓋的模式

00:32:34.721 --> 00:32:37.391 
因爲查看器能夠退出全屏模式

00:32:37.457 --> 00:32:40.027 
並在你不知情的情況下變成
picture-in-picture模式

00:32:40.093 --> 00:32:42.763 
所以如果你有機會關掉特定的功能

00:32:42.829 --> 00:32:45.432 
或者在視頻播放的時候
把網頁內容隱藏起來

00:32:45.832 --> 00:32:49.269 
當它們變成picture-in-picture模式時
可能看起來就不太對了

00:32:49.403 --> 00:32:52.072 
由於媒體可以在非常小的窗口下播放

00:32:52.372 --> 00:32:55.742 
我們強烈建議你們用
HTTP實時流媒體技術

00:32:55.876 --> 00:32:57.611 
或者用HLS傳輸媒體流

00:32:58.345 --> 00:33:03.483 
HLS允許我們的媒體引擎選擇位編碼

00:33:03.550 --> 00:33:08.055 
可以根據播放窗口的大小來
自動匹配編碼率

00:33:08.388 --> 00:33:12.292 
它也考慮進設備中的
網絡情況和電量情況

00:33:12.693 --> 00:33:16.296 
通過使用它你將能保證

00:33:16.730 --> 00:33:18.899 
最好的用戶體驗

00:33:18.966 --> 00:33:22.135 
因爲它照顧到了許多細節

00:33:23.370 --> 00:33:26.840 
在星期三我們可以看到令人驚歎的關於
在iPad上的IOS 9系統

00:33:26.907 --> 00:33:28.942 
基於媒體的app中
進行多任務處理的內容

00:33:30.010 --> 00:33:31.778 
如果你今年並沒有聽過我太多講座

00:33:31.845 --> 00:33:34.414 
你可以看看我和Jer
去年講高級web媒體的視頻

00:33:34.481 --> 00:33:37.751 
我們提到了許多HLS的細節

00:33:39.186 --> 00:33:41.722 
最後 我想談論一些
令我非常讚歎的東西

00:33:42.022 --> 00:33:43.657 
我們的Force Touch觸控板

00:33:44.825 --> 00:33:47.261 
在三月的時候我們興奮得展示了

00:33:47.327 --> 00:33:49.229 
使用了這一新硬件的新產品

00:33:50.097 --> 00:33:52.966 
它讓我們可以識別出第二級的點擊

00:33:53.066 --> 00:33:55.769 
我們叫做Force Click
我們真的爲此感到興奮

00:33:57.871 --> 00:34:01.642 
在添加新的用戶交互功能的過程中
我們獲得了許多樂趣

00:34:01.708 --> 00:34:06.880 
像這種字典模式向上看
它向我們介紹了“氟橡膠”是什麼

00:34:07.514 --> 00:34:12.786 
我們添加了一個看鏈接後面的
內容的新方式不需要離開網頁

00:34:13.219 --> 00:34:15.789 
我知道你們都能想到更好的方法

00:34:15.856 --> 00:34:18.425 
來把這個硬件應用在網頁內容中

00:34:18.559 --> 00:34:21.261 
所以我們想要給你們最大化的
對這個硬件的接觸機會

00:34:21.328 --> 00:34:23.931 
讓它出現在你們自己的網頁中
爲你們提供服務

00:34:25.431 --> 00:34:27.801 
讓我來簡單介紹一下它的具體功能

00:34:28.402 --> 00:34:31.237 
對於一個普通的觸控板

00:34:31.304 --> 00:34:33.841 
當用戶用一定的力下壓的時候

00:34:34.474 --> 00:34:36.342 
我們可以視作鼠標鍵下沉

00:34:36.877 --> 00:34:40.112 
當用戶保持下壓 然後彈起來

00:34:40.681 --> 00:34:43.083 
我們也從那個壓力中釋放出來

00:34:43.350 --> 00:34:46.119 
這視作鼠標鍵復原
而那個過程可以視作一次單擊

00:34:47.621 --> 00:34:52.259 
我們擴展了這個模型用它來
支撐Force Click的操作

00:34:52.592 --> 00:34:55.696 
通過用WebKit給所有的
鼠標行爲都加入一個力度屬性

00:34:55.795 --> 00:34:58.298 
它能告訴你在觸控板上
使用了多大的力度

00:34:58.899 --> 00:35:02.002 
同時我們也能添加一系列

00:35:02.069 --> 00:35:04.671 
你可以註冊的新事件 來處理它

00:35:06.406 --> 00:35:08.275 
讓我們返回到最後一張幻燈片

00:35:08.342 --> 00:35:10.177 
在這個我們曾經擡起 放下鼠標的地方

00:35:10.511 --> 00:35:13.380 
我們觸發了一個鼠標的力
這可以啓動事件

00:35:13.680 --> 00:35:18.785 
這是調用阻止默認行爲到
事件本身的一次好機會

00:35:18.852 --> 00:35:21.088 
它會防止我們調用字典
或者通過鏈接預覽

00:35:21.154 --> 00:35:23.924 
來查詢邏輯如果你想自己做的話

00:35:26.527 --> 00:35:28.795 
在放下鼠標之後

00:35:28.996 --> 00:35:32.032 
如果用戶繼續按力度達到了第二個等級

00:35:32.099 --> 00:35:34.201 
我們把它視作一次
force click

00:35:34.268 --> 00:35:36.170 
我們啓動了這一鼠標向下按的事件

00:35:37.871 --> 00:35:40.407 
當用戶用力來讓鼠標復原時

00:35:40.474 --> 00:35:42.042 
我們收到鼠標上移的力

00:35:42.342 --> 00:35:45.212 
所以 這一機制和
鼠標上下點擊是一樣的

00:35:45.279 --> 00:35:47.948 
我們也有鼠標按下 鼠標擡起的過程

00:35:49.650 --> 00:35:53.086 
在這整個過程中

00:35:53.287 --> 00:35:56.423 
在鼠標上升下按時
我們發出力來改變狀態

00:35:56.490 --> 00:35:59.993 
我們這樣做是爲了用戶
不用通過移動手指

00:36:00.227 --> 00:36:01.995 
就能改變壓力

00:36:02.462 --> 00:36:04.064 
改變他們用力的量

00:36:04.131 --> 00:36:07.534 
所以這裏並沒有設置
可以記錄鼠標移動的力的事件

00:36:08.836 --> 00:36:13.240 
注意我們也定義了兩個圖層和兩個常量

00:36:13.307 --> 00:36:14.975 
來把力的等級定義爲

00:36:15.042 --> 00:36:17.277 
常規點擊和用力點擊

00:36:17.611 --> 00:36:23.016 
我們強烈建議你們可以使用
這些常量來代替捕捉數值

00:36:23.317 --> 00:36:25.385 
因爲當規範成熟時這些可能會發生變化

00:36:26.920 --> 00:36:29.489 
所以 在你們自己的網站中
展示一下怎樣利用它們吧

00:36:30.157 --> 00:36:32.259 
我將愉快得再次邀請克里斯上臺

00:36:33.160 --> 00:36:34.127 
給我們做另一個演示

00:36:39.099 --> 00:36:41.068 
好 感謝布倫特

00:36:41.401 --> 00:36:44.538 
像剛剛布倫特介紹的
Force Touch那樣

00:36:44.605 --> 00:36:47.508 
這裏有許多很酷的東西供你嘗試
它們可以切實提升你的網站質量

00:36:47.741 --> 00:36:52.946 
如果你們記得 我們之前看過的
那個演示我們點進這個覆疊圖層

00:36:53.013 --> 00:36:54.982 
可以選擇自己“最喜歡”的圖片

00:36:55.649 --> 00:36:58.085 
那是非常容易的但也是一項進步

00:36:58.151 --> 00:37:00.387 
我認爲如果我們真的可以通過

00:37:00.454 --> 00:37:03.123 
Force Touch
觸控板提升用戶體驗

00:37:03.190 --> 00:37:05.692 
我們就能給他們創造更多的交互體驗

00:37:07.027 --> 00:37:10.130 
所以當我在臺下的時候

00:37:10.197 --> 00:37:14.434 
我改動了幾處代碼我所做的是
擴展了界限點masonry圖片庫

00:37:14.501 --> 00:37:16.203 
來創建一個使用力度提升的圖片庫

00:37:16.436 --> 00:37:18.472 
我們將要用它來添加
一些和力度有關的事件

00:37:18.539 --> 00:37:21.175 
再做一些關於力度變化的動畫

00:37:22.342 --> 00:37:23.443 
有幾點需要指出

00:37:23.510 --> 00:37:25.679 
其中最重要的一條是我們
可以在鼠標的事件數據中

00:37:25.746 --> 00:37:27.981 
得到最小力和最大力的數值

00:37:28.315 --> 00:37:31.718 
而鼠標事件數據就是我們在
用力讓鼠標上移下移時記錄的力

00:37:32.152 --> 00:37:33.754 
正如布倫特剛剛說過的那樣

00:37:34.855 --> 00:37:40.394 
我要講的另一點就是
我們將要綁定一些事件偵聽器

00:37:40.460 --> 00:37:43.630 
來偵聽我們所綁定和更新的力度事件

00:37:44.131 --> 00:37:46.233 
我剛剛跳出了所要進行的事件

00:37:46.300 --> 00:37:48.535 
所以它現在什麼也沒做
我們要一步一步得開始

00:37:50.204 --> 00:37:53.073 
酷 首先 我想開始
給鼠標一個下按的力

00:37:53.207 --> 00:37:56.810 
在這個事件中我們要做的是
運行一下我寫的這個程序

00:37:56.877 --> 00:37:58.645 
它可以在力值範圍爲真時被調用

00:37:58.979 --> 00:38:01.648 
這段程序所做的是在
頁面中添加進CSS屬性

00:38:01.715 --> 00:38:04.251 
來保證我們的CSS轉場效果不會被

00:38:04.318 --> 00:38:06.486 
我們自己用JavaScript
寫的動畫所幹擾

00:38:06.553 --> 00:38:09.189 
由於我們可以從改變
觸控力度的事件中得到許多力度數據

00:38:09.256 --> 00:38:13.360 
我們不想它們互相干擾所以最基本
要確定的是轉場中設置了很多東西

00:38:14.561 --> 00:38:17.931 
我們要做的下一件事就是
看看kit鼠標下壓發生了什麼變化

00:38:19.299 --> 00:38:20.734 
我們這裏做了很少的事

00:38:20.801 --> 00:38:24.571 
事實上我們從WebKit裏的這些
事件的力屬度性值中獲得力度數據

00:38:24.938 --> 00:38:29.476 
我們將要創建一個進程要看看最小力
和最大力的值之間的差距有多少

00:38:30.277 --> 00:38:32.980 
我們實際上將要用動畫演示
在最大最小值之間的一些東西

00:38:33.046 --> 00:38:35.582 
所以你將看到
我們將會回來做一些有趣的事

00:38:36.517 --> 00:38:38.485 
我們在這個過程中做的最基礎的事情

00:38:38.585 --> 00:38:41.488 
可以說是我們選出了“最喜歡”的圖片
可以說是我們做完了動畫

00:38:43.357 --> 00:38:44.691 
當我們返回並且更新

00:38:45.559 --> 00:38:48.128 
如果你看着這張照片
你會看到當我現在上下按壓觸摸板

00:38:48.195 --> 00:38:52.366 
我們實際上在根據我給
觸控板的壓力縮放這張照片

00:38:52.900 --> 00:38:54.868 
這真的很酷 非常具有交互性

00:38:54.935 --> 00:38:56.270 
它添加了一個新的圖層

00:38:57.437 --> 00:38:58.405 
在我這樣下壓的時候

00:38:58.472 --> 00:39:01.408 
你會看到這裏出現了一個心形
意味着我對這張照片選擇了“喜歡”

00:39:01.475 --> 00:39:03.010 
但事實上我的手指還沒有落下

00:39:03.277 --> 00:39:06.580 
當我上拉的時候你會看到
我們進入了覆疊視圖

00:39:06.847 --> 00:39:08.649 
那可能不是我們想要的效果

00:39:08.715 --> 00:39:10.951 
而這一點擊事件依舊在執行

00:39:11.018 --> 00:39:13.887 
那是因爲我們並沒有阻止
任何瀏覽器中的默認行爲

00:39:14.321 --> 00:39:17.391 
爲了那樣做 我們事實上剛剛
返回添加了一行快速代碼

00:39:18.692 --> 00:39:21.061 
即將實現鼠標點擊行爲

00:39:21.428 --> 00:39:23.263 
我們基本上只是希望能默認阻止調用

00:39:23.630 --> 00:39:27.034 
一定要明白OS交互系統
並不會和開發者們進行交互

00:39:27.100 --> 00:39:29.670 
你能得到全部的控制權

00:39:31.405 --> 00:39:33.640 
所以如果我們返回 可以再試一遍

00:39:33.874 --> 00:39:36.476 
在我們的力度達到這個等級之後
什麼都不會發生

00:39:36.944 --> 00:39:38.679 
我們必須再重新設置一遍

00:39:38.745 --> 00:39:40.747 
在此之前 我們必須移除

00:39:40.814 --> 00:39:43.951 
用JavaScript設置好的
全部樣式確認一切都能真的順暢運行

00:39:46.053 --> 00:39:48.121 
所以我們可以只填充進
鼠標單擊的那部分

00:39:49.556 --> 00:39:53.126 
我們這樣做的目的是爲了
移除許多之前設置的樣式

00:39:53.193 --> 00:39:55.963 
要保證所有加進去的
CSS屬性都已經被刪除

00:39:56.029 --> 00:39:58.198 
恢復成了默認模式
就像我們從來沒有碰過它一樣

00:40:00.400 --> 00:40:01.735 
好 用這個新的交互界面

00:40:01.802 --> 00:40:06.273 
我們可以在照片上徘徊
打開動畫 就像這樣

00:40:08.342 --> 00:40:11.078 
我們得到了添加“喜歡”的照片的功能

00:40:11.144 --> 00:40:14.181 
我們依然可以通過一次普通的
鼠標點擊來進入圖片庫

00:40:14.615 --> 00:40:16.950 
我認爲這真的很酷我也很興奮能看到

00:40:17.017 --> 00:40:18.652 
你們用這個新技術來做些什麼

00:40:19.186 --> 00:40:21.321 
現在 我將重新有請布倫特上臺
謝謝大家

00:40:26.727 --> 00:40:27.561 
感謝克里斯

00:40:28.795 --> 00:40:32.833 
我覺得你們也會贊同這個硬件的使用
會成爲一個非常偉大的方式

00:40:34.301 --> 00:40:38.972 
我想要介紹幾個使用Force
Touch觸控板的絕佳實例

00:40:39.673 --> 00:40:41.775 
希望你們能經常使用鼠標力常量

00:40:41.875 --> 00:40:44.111 
和並不難編碼的數字值

00:40:44.178 --> 00:40:48.882 
因爲我們希望它們可以在
導航的過程中直接改變

00:40:50.017 --> 00:40:52.486 
使這個功能更加完整

00:40:53.120 --> 00:40:56.723 
請記住 遺憾的是並不是所有的用戶 
都有Force Touch硬件

00:40:57.090 --> 00:41:01.728 
所以我們可以把它視作一個捷徑

00:41:01.795 --> 00:41:03.864 
或者是給擁有這個軟件的
用戶的額外福利

00:41:04.164 --> 00:41:06.400 
用它來驅動動畫或者給內容提供一些

00:41:06.466 --> 00:41:08.669 
你也可以通過其他方式
來實現的更簡便的方式

00:41:10.737 --> 00:41:14.708 
這將在Mac和IOS中
帶來令人驚喜的體驗

00:41:16.577 --> 00:41:19.179 
這也是今天演講中的主體

00:41:19.513 --> 00:41:21.181 
我想做幾點總結

00:41:22.149 --> 00:41:24.351 
我們談論了背景過濾器

00:41:24.418 --> 00:41:28.088 
這是一個很神奇的硬件方式
能加速你網站上的背景過濾效果

00:41:28.455 --> 00:41:30.157 
滾動停止點使你

00:41:31.158 --> 00:41:34.528 
用幾行CSS就實現平鋪滾動

00:41:35.395 --> 00:41:38.665 
我們也探討了JavaScript
裏令人驚喜的的新的類語法

00:41:39.399 --> 00:41:42.736 
CSS中的@supports 函數
可以用來封裝樣式

00:41:43.337 --> 00:41:47.708 
並且擁有一些僅當
特定功能可用時才被執行的樣式

00:41:48.442 --> 00:41:52.212 
我們談論了一點關於從Safari
變到OS X裏的AirPlay

00:41:52.746 --> 00:41:56.216 
以及picture-in-picture
還有IOS多重任務處理

00:41:56.283 --> 00:41:59.887 
以及介紹了一些你可以去參加的演講
還有這個新的Force Touch APU

00:42:01.655 --> 00:42:04.725 
想了解更多信息可以下載相關文檔

00:42:04.791 --> 00:42:06.159 
我們歡迎大家

00:42:06.226 --> 00:42:09.730 
進入www.WebKit.org網站
關注WebKit項目

00:42:10.097 --> 00:42:12.533 
加入我們吧
看看我們在做些什麼

00:42:12.599 --> 00:42:14.868 
突破黑暗看看明年

00:42:14.935 --> 00:42:17.037 
會出現一些什麼新的功能先睹爲快吧

00:42:18.505 --> 00:42:20.307 
對於一般的詢問我建議你們

00:42:20.374 --> 00:42:22.543 
瞭解一下我們的WebKit宣傳者

00:42:22.609 --> 00:42:24.311 
當你們有問題想要了解

00:42:24.811 --> 00:42:28.582 
或者你想傳達給我們什麼信息的時候

00:42:28.649 --> 00:42:30.150 
可以在WebKit團隊中找他

00:42:31.285 --> 00:42:33.887 
謝謝你們今天早上來聽我的演講

00:42:33.954 --> 00:42:36.557 
希望你們能在這周的WWDC中
度過美好的時光

00:42:37.891 --> 00:42:38.725 
謝謝