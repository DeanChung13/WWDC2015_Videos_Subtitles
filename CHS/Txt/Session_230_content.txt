iOS和watchOS的性能
早上好
我是 本我是一名iOS性能工程师
今天我们要谈一谈iOS和watchOS的性能
那么我们首先 要告诉你
你为什么要思考与性能相关的问题
如果你之前从未思考过你的app的性能如何
那么为什么现在要开始
希望我能说服你留在你的座位上继续往下听
然后我们可以继续聊一聊你应该如何思考性能问题
这个话题貌似非常宽泛有时甚至令人生畏
但是我们要把它细分成几个类别
并给你提供一些具体的策略
来提高你的app在这些方面的性能
最终 很有可能你会兴奋地发现自己
可以给watchOS编写本地代码
我们则要深入研究在这个平台上
你还可以为给用户最佳体验做出什么贡献
那么你为什么要考虑性能问题呢
最简单的回答是性能是一个特性
要想让你的app用户有良好的体验性能是核心是中心要素
它不是额外的津贴或奖金或如果你有时间可以
在任务结束时你可以得到的东西
事实上 你在编写app时应该时刻关注它的性能
这样要求 有几个原因
如果你的app反应迅速
如果它总是立即反应用户的输入
就会构建起用户的信任
那样就让用户知道如果他们需要通过你的app
访问信息或进行交互操作
他们无需久等
这会让他们很高兴成为回头客
如果你要在使用iOS 9的iPad里
采用多任务应用程序Multitasking
它不仅不能满屏幕运行
实际上它也不能充分利用
系统的资源
所以app的性能问题再也不只是给你的app用户
带来糟糕的使用体验
它还可会损害另一个app的
用户体验
你肯定想成为Multitasking里的好邻居
所有App的体系结构都着眼于高效利用系统资源
比如CPU和内存你利用它们时
不只是感觉很好其实也是在节省电池
让用户可以坚持一天
对此他们真的很感激
最后 iOS 9支持范围庞大的硬件
而要持续地为所有的客户
提供优秀的app和特色功能性能是一个先决条件
那么 我就有希望说服各位 你们不必走出去了
你们应该如何思考有关性能的问题呢
开发app的第一步
是选择技术
这一步至关重要 因为你需要选择
哪种技术会
让你的用户有最好的体验
一旦你开始构建应用程序
你就可以开始采取测量手段
并真正理解在你的app里用户
在重要的交互中的体验情况
你的测量手段会告诉你今天你的app的下载情况
一旦你得到了那些数据你就可以设定一些目标
比如在把它提交给应用商店之前 你想让
你的app处于何种状态
最后 一旦你得到那些数据 你就已经准备好
开始修改代码来提高app的性能
你可以遵循一个很好的工作流程
来全力实现你的目标
那么让我们从选择技术开始
选择正确的工具来完成这项工作是
构建app的一项重要
的早期工作 是保证app性能卓越的一个前瞻性的步骤
而选择技术的第一步是
了解的这些技术
所以在这个演讲中
我将引用今年和前几年的几场其他演讲
这几场演讲都涉及了
我们认为有助于提高
app性能的技术
一旦你知道有多少技术可以为你所用
那么你就可以根据你的app的
设计构想和工作内容
来挑选最合适的技术
举一个很好的例子如果你的app需要
存储三个字符串
你可能可以把这些字符串写进一个plist文件或
放在用户默认中
但是 如果您的app需要使用3000个字符串
你可能就要考虑核心数据了
说到核心数据
当你选择技术时
我强烈建议你
考虑AppleAPIs和框架
我们在AppleAPIs和框架上花了大量时间
力图让它们满足你和你的用户的
需求 我们也在其基础上创建我们自己的产品
采用Apple APIs和框架的一个好处是
用户在安装了你的app之后
他们可能会安装一个iOS更新
这些更新经常包含对核心APIs和技术的
性能改进
所以下次他们在安装了
一个iOS更新之后 打开你的app就会发现app神奇地变快了
那么你选择了某些技术
并且开始构建应用程序了
现在我们要谈论测量问题
有几个类别的性能
我们可以考虑测量
让我们从动画开始
动画让你的app活泼 流畅
还能够让用户知道他们在哪里 发生了什么
测量动画性能的最简单的方法
是Core Animation工具
反应速度测量的是你对用户的输入做出反应的迅速程度
实际上 测量反应速度
最简单的方法看起来技术含量有点低
但是它真的很强大
并且只是插装你的实际代码
我将给它举一个例子
更复杂的场景可能涉及多个线程
或大量的系统交互
对于这样的场景有一个伟大的工具叫做系统跟踪
最后要说的是内存
内存是移动设备上最宝贵的资源
确保你的app的内存
正好能够满足需要不多不少
这一点很重要
和前面相似的是有一个简单但强大的方法
来了解app内存的使用情况
我马上就要谈到了那就是Xcode调试器
如果你要了解更多情况
还有一个很好的工具叫做存储器分配
如果你认为有漏洞 也有一个工具
来帮助你追踪这些漏洞
那么
让我们举一个代码插装的例子
我这里有一个IBAction连接到一个按钮
所以当用户按下按钮时
我就要加载一个图像并把它放在我的视图
而且我想知道这需要多长时间
所以我要用一个AP
叫做"CF绝对时间当前值"
现在 我并不关心当前时间的
绝对值但我在意的是
它们之间的差别
这个API 尽管它是SWIFT 是类型推断
非常好 但是我将告诉你它会返回一个双精度浮点
具体地说 这个双精度浮点数以秒为单位代表当前时间
一秒钟实际上是一段很长的时间
如果你的app用了一秒钟 你的用户
真的会感觉到
其实我们发现毫秒
是一个更可行的度量单位
所以我们要从结束时间减去开始时间
并把结果乘以一千
以得到以毫秒为单位的测量结
概要描述app的发行组态
很重要 这样你将得到你的用户所得到的
所有的编译器优化
你也将了解你的app在它的领域内的
实际表现；然同样重要的是不要
把你的性能插装提交给应用商店
所以我的建议是你在Xcode中
复制一份你的研发流程
同时定义一个额外的定义
这样您就可以用性能插装
轻松 快捷地构建一个app的发布版本
那么什么类型的反应我们有兴趣测量呢
当然是按键和按钮
大多数情况下 你可以在IBActions中做这些
你也可以用UIView触摸处理代码做这些事
或者你可能以手势识别器为目标
App性能的另一个有趣的方面
就是用户在使用这个应用程序
并切换到不同的视图时感受如何
无论他们是使用标签栏还是模态视图
在这种情况下我们觉得思考
"视图将显示"和"视图出现"之间的时间
是件有趣的事因为那让你可以比较
你的哪一个观点要花更长的时间来准备 以出现在屏幕上
那么你已经取得了一些测量结果
了解了你的app的表现
在你将app提交到应用商店之前你希望它取得怎样的成绩
要如何设定这个目标呢
在以60帧每秒的速度运行时 动画
感觉很棒 逼真流畅又有生气
今年我不打算过多谈论动画
因为去年有一个很好的关于动画的演讲 你可以查看
名字是"iOS Apps中的高级图形和动画"
那场演讲谈到了核心动画工具
以及如何使用它
来衡量并利用所有硬件
改善动画性能
今天我们要把大量的时间花在反应速度上
反应速度 再说一次
反应的是你如何对用户输入进行反应
我们发现
如果它需要超过一百毫秒
用户就能够感觉到
所以 你对任何响应性的目标应是一百毫秒
顺便提一下 你想考虑
在你要支持的最老的硬件上实现这些性能目标
如果你针对iOS 9
那么可能是最早的iPad mini
iPhone 4s 甚至 iPad 2
如果你已经有了这其中之一
或者更确切地说你仍然还在用这着其中之一
那么继续用它接下来对它进行检测
如果不是这样
那么在Apple Online Store上有很棒的翻新部件
所以你已经设定了目标
你已经做了检测
现在你想继续通过在你的app上更改代码
来提高性能
我们如何开始呢？
首先 不用猜
你一定想用工具做简要分析
解决造成你的app性能问题的根源
你的直觉总是对的这想法很诱人
但是这可能如同抛硬币一样不准确
据此 不要过早优化
除非你有证据表明尽可能简单的做法
不足以达到卓越的性能否则不用把你的代码复杂化
经常是人们引入一些机构试图避开性能问题
结果却是造成他们自身的性能问题
一次只做一处更改
你肯定想开始培养你的直觉
以便知道如何能够改进你的app的性能
但是很难知道你做的哪件事确实改进了你的app性能
所以一次只改一处
我这里实际想说的是没有奇迹
这只是普通的调试而已
所以同样要本着严谨而科学的态度去排除
app中存在的死机或功能问题
这是我希望你打印出来的图片
挂在你墙上的的图片设成你Mac的壁纸
这就是我们如何通过更改代码
来改进app性能的
首先你要做的是在脑海中重现这个问题
之后用工具进行分析 了解
你的代码是哪里
造成了性能问题
在一个足够大的代码库在
你的直觉可能的确不对
所以还是收集证据为好
之后 一旦你找到
造成你app中性能不理想的代码
你就能确切算出你需要为此
花费多长时间
最后你只要有针对性对对代码做一次更改
以尝试达到你的目的
常常是一处更改
无法让你一次达到目的 事实上
多次更改
才能最终达到你的目的
这就是为什么说这是一个周期因为你可能会发现
你更改代码并再次重现后 有所改善
但没有达到你最终的目的
所以你要继续这个周期直到你满意
幻灯片上是分析和检测情况似乎都类似
但是实际上
这是改进你的app性能的
两个分立的步骤
再次分析时采用工具如Xcode调试器
以及Instruments:Time Profiler
就与你性能方面具体问题相关的代码
得到一个全面的概览
检测针对你代码某具体区域
以准确了解用户的
等待时间
我给出的
"CF absolute timeget current"的例子
再次证明确实很好用
对于更复杂的情形 有SystemTrace
所以让我们来谈谈响应响应性
响应即是对用户输入的反应
谈到响应性 我们不得不提到
你app的主线程
因为你app的主线程
是你消耗所有用户输入的所在
--来自触摸屏的一切
一次敲击或一次滚动--即有来自设备其他传感器的一切
比如定位更改
及多重任务缩略图及其他系统状态事件等均在这里
如果你的主线程主要针对
用户输入响应任务
你的app将始终感觉很棒
如果你对你的主线程操作有些不够细心或者
也许你在你的主线程上
什么都做
那么你的app可能出现停滞或冻结现象
所以我们应该避免对我们的主线程做什么？
特别注意CPU密集型业务
这可能是解析你从网络上下载的很长一段字符串
可能是对某图像进行过滤
以及与外部资源有关的任务
我回头还会讲这个问题
我今天不打算花太多时间讲CPU密集型业务
因为本周开始的时候有一个非常好的演讲
演讲者做了
叫做"Profiling in Depth"的仪器
他们事实上讲到用仪器
对其中CPU密集型业务做性能改进
很棒
所以我们回到与外部资源有关的任务
其另一名称叫阻塞调用
之所以叫这个名字是因为你的线程进展被阻止所以你被阻断
那么 什么是阻塞调用？
你们中可能有人熟悉系统调用（syscall）
任何进行了系统调用的代码
路径均被认为是阻塞调用
正如我所说
这一般涉及到
目前不在内存中的资源
一般是从磁盘载入内容
或网络上取用材料
有时候 你的主线程也会被阻塞
原因是在等待可用资源
但是它是在等待他人完成资源使用
因为该资源一次只允许一个客户使用
那么 你如何认出你线程的阻塞调用？
有时它们刚好出现在你目前
"同步"一词即表示阻塞
所以这是一个线索当你读代码时
你要注意到它
所以很好
我们在我的代码中发现了这个阻塞调用
‘NSURLConnection发送同步请求’
那么 现在我做什么？
有时会有一个同步的API --
尤其是对于声称
其名字同步的API--
你可以轻松转换到这种API
这种情况下 我们很幸运 而事实上
这个名字中出现的是有用的"异步"字样
那么我们就确切知道了自己要进入的是哪里
很遗憾 这不似搜索和替换那么简单
你正在改变你的代码的执行顺序
你可能有与此次操作结果
有关的其他代码
所以很遗憾 需要一些调整
但是让我说
你没有能够轻松切换到的相当的async
或者你想将全部代码
一次操作即移出主线程
这种情况下用GrandCentralDispatch即可
Grand Central Dispatch是Apple的一项技术
可管理你app中的全局线程池
已经好了即使你没有注意到
如果你熟悉其他平台上的线程编程Grand Central Dispatch
在某种程度上可完全避免混淆 消除你
对于启动线程及其状态等的担忧
让你明确出向运行的任务
如封闭或阻塞
这些封闭任务一旦你提交给Grand Central Dispatch
即在你的流程中任一线程上运行
所有线程都很棒 因为你不必
启动它们 也不必考虑
它们的数量 但是它们会有警告
由于你不控制你的代码在哪个线程上影响
你在封闭或阻塞任务中明确的任何操作
必须在任一线程上均安全
有些什么例子吗？
一些对象事实上只是被限制
进入主线程
例如UIKit视图和控制器
必须在主线程上创建修改或销毁
一些对象如Foundation和Core Graphics
可采用任何线程
但是 其中许多另有规定
这些规定是调用者提出
目的是确保当时只有一个线程被采用
它们内部无自我保护
所以 如果你要用于多线程
你常常必须自行采取保护
为此 最好的方法是GCD串行队列
要想知道你的对象预计会被如何处理
最好的方法是读标题
每个对象 通常在靠近初始化程序处
应有一个描述 确切说明该对象
在你的app中如何通过线程被存取
如此 让我们回到我的例子
我在这个代码中做什么？
我从一个文件中加载一些数据
我对一个图像进行处理和过滤
最后我把它放在我视图层次的图像视图中
那么现在当用户敲击我app中的一个按钮时
我的主线程就有点像这样
它会按顺序做3件事
简单 直接 很好理解 很棒
遗憾地是
如果在我做这件事的时候
用户偶尔做尝试向右滚动或旋转
我们将无法操作输入项只能拖后
关于阻塞请求
你永远不知道它们要花的时间这就像天气的变化一样
用户需要等待不知道有多久
这会使他们很沮丧
那么如何解决这一问题呢？
我们可以使用Grand Central Dispatch
我们可以使用Grand Central Dispatch API的
"dispatch async"异步执行
现在 "dispatch async"采取了两个命令参数
第一个需要输入的是
你想使用哪一个队列
如我所提到的那样你的app内已经有几个队列
由GCD为你创建
我将使用 "dispatch get global queue"API得到其中之一
因为有几个可供选择我需要告知GCD
我想要哪一个
这儿我要用"Quality of Service"等级
"Quality of Service"是关于怎样告知系统
你请求它完成的工作相对于app上的其它工作
以及系统内的其它工作有多重要
在这种情况下
因为这是用户行为的直接结果
并且用户也许正在等待这一结果
我将使用"user-initiated"
QOS等级
"dispatch async"
最后的参数是闭包包含你想让它运行的代码
好了完成了
已经离开了主线程
好了吗？
还没完全好
如我提到的 UIKitviews
和controllers只是在主线程上使用才安全
所以我不能把它们置于该闭包内
因此这并不是代码最慢的部分
对吗？
前两行是阻塞请求
为什么我不把它移到主线程上？
不幸地是 那样也是不行的
因为我实际已经改变了代码
执行的命令
该关闭并不一定在
"dispatch async"返回的的时候运行
当然希望它将很快运行
最有可能的是
一旦GCD将工作送至
dispatch queue它会立即进入到
下一行 在此点上
我的图像仍然可能没有
用户将永远看不到他们的图像
这会使他们抓狂的
那么如何处理这种情况呢？
我们实际上可以向"dispatch async"
发出另外一个请求这次
我们将使用一个特别的队列叫做主队列
主队列则保证会由主线程服务
你可以使用APIdispatch的
"get main queue"获得主队列
这意味着
如果你有对象需要进入
主线程 你可以把它们放进闭包中并发给dispatch
你只需要确保它们这个队列中运行
现在我们已经做到了
我的imageView完好
这样
我们将该工作退出主线程
但是当我们需要使用主线程上的
对象时 一旦数据准备好
我们就可以这样做
顺便说一下 我们最初要解决的问题
如果用户尝试 滚动或旋转
将会立刻得以处理
谢谢！
那么你可能在代码中发现
哪一种类型的阻塞请求？
它们在暗处 可能藏在各种地方
如我所提到的那样 联网、
NSURLConnection和朋友
很容易无意间
向网络发出同步请求
通常 你可以切换到异步API
或者如果你想要对app何时进入网络
有更多的控制
在某些情况下 让它在不运行时进行下载
我建议你查看NSURLSession后台演讲
Foundation initializers当你在代码中遇到这些问题时
它们并非看起来那么可怕
它只是一行
有什么可怕的？
但是 其中一些
像名为"contents of file"或者
"contents of URL"
可能不得不使用硬盘或其它资源
来满足要求
最后 Core Data
它们看起来像一些对象 对吗？
Core Data代表你不断地进行很多I/O
幸运地是 很容易将一些
记录的操作移到
不同的并发模式
实际上 今年在CoreData内有一个新的API
简化各种一般的批量操作
你可以另选时间从演讲中了解
"Core Data的新变化是什么"
所以如果你发现了一个阻塞请求
切换到异步API
或者使用GCD
如果你想更多了解GCD 包括
今年可以简化一般操作的新API
以及前面提到的qualityof service等级
这儿一小时前就有一个不错的会话
称作 "GCD BuildingResponsive and Efficient Apps"
我建议你看看它
让我们继续看一看存储
我说过存储是移动设备上
最宝贵的资源
如果你计划在app中采用多任务处理
你不能再自由使用屏幕
当然你也不能自由使用
其它系统资源
如果你把一些代码从app带入
watchOS 那么 重要的是
内存占用应当紧凑
另外 iOS 9支持很大范围的硬件
如果你想把大型apps和功能带入一些
OS支持的低端设备
存储在这些系统中非常重要
最后 如果你是扩展的开发者
想一想你的扩展也许现在被要求运行
而这时屏幕上还有两个其它的apps
因此 存储会是十分需要的 你需要
尽可能少地使用
现在让我们看看存储在iOS上如何工作
基本原则
任何iOS 装置里都没有足够的物理内存
把所有暂停的App同时保存在RAM里
当我们有内存压力时我们实际上必须
清理一些事情出去把空间留给前景无限的app
在OS X 或PC 操作系统上我们可能要首先
要把这些app的状态写到磁盘上 但是
这在移动装置上根本行不通
所以 一旦你要清理空间你就必须消失
还有更多细节可以慢慢详述
实际上前几年有一个所谓的伟大谈话
叫做"iOS App 性能内存"
滑动模板和颜色稍微有点不同
但是信息真的是货真价实
所以如果你感兴趣的话请去看看那个产品
学习学习这是如何运作的
但是如果你以前从未想过app里有内存
总是归结为
回收内存需要花时间
如果你已经用完系统中所有
可用的内存然后需要更多
你可能要等待而系统清理一些东西
以你的名义清理
如果你突然请求大量内存
系统就需要清理若干不同内容
来满足你的请求
这影响到App的反应效率
相反 当你在背景里时
如果你的足迹非常简缩
实际上你不太可能成为
被清理之列
所以当用户返回到你的app时
你能够恢复原貌而不是重启
这感觉就快多了
所以 如果你以前从未想过内存的话
这真是很重要的第一步
要合理化你的App内存足迹
也就是说要想一想各种类型
所用资源的类型
这些可能是字符串；可能是JSON 或 XML的小泡泡
你从网络上下载的这些
还有图片 也是
来自网络 或者用户用照相机照的
还有 Core Data管理的东西 用了很多
潜在的资源似乎是奇迹发生
一旦你思考这些资源 你就会开始
按照用户互动把他们分组
归类 这有助于你建立一个思想模式
对于自己App所用的资源
一旦你已经那样做了
我们可以用Xcode 调试器快速检查你的作业
要了解更多细节
我们可以去配置栏
和遗漏工具
我不想说这么多今天
但请找找
去年的类似谈话名叫"用工具
提高你的App"从那里开始看吧
所以我们返回到Xcode调试器
我已经下载了Photos框架案例app
这是从苹果开发者网站下载的
我已经安装到手机中打开了Xcode 项目
草创并运行
现在我刚刚开始看看左上方在我调试器的Xcode窗口的左上方
放大进去
这里 正好我看到
不用眼睛贴着手机屏幕也能看到第一个数据 太有趣了
现在我知道在我的app发起之后
在用户可以做任何事情之前
我正在使用大约10MB的内存
我想要搜集的下一个数据点
就是我想要离开
所有在我的App中最常见的用户交互都执行了
因为这是一个照片App所以我会打开一张照片
现在我明白了每打开一张照片
我的App另外需要大约2.5兆的内存
在这一点上 另一个有趣的实验是
一遍又一遍地重复执行同样的动作
所以 我可能会多次打开一张相同的照片或两张不同的照片
如果我的内存占用持续增长
我可能需要解决一下内存方面的问题
最后有趣的是
我需要使用我设备上的Home按钮来暂停App
而且我想看看当它进入后台时会发生什么
它看起来好像比它刚刚启动之后
要稍微小了一点点
这真是对打击很好的一种平衡
你不想再重复你在恢复期间所做的工作
但你也想保持后台的紧凑
以确保你的用户实际体验到那个恢复
需要注意的是
照片框架示例App
实际上并不需要做什么特别的事情或施展魔法
以实现这一行为
它实际上只是一个非常简单的
对苹果技术最小的一种应用
而且苹果技术实际上通常会将这个行为
进行内置而它们只是管理一下基本资源
以自动响应于应用程序生命周期事件
所以你并不需要担心这个
但是
如果你有大的对象或者你自己的其他资源
那么你将有一些动态上的损失
并会返回来响应应用程序生命周期事件
做到这一点最简单的方法是
使用NSCache
不过在某些情况下你虽然可能会遇到
需要将不能灵巧地被表示为可回收的对象用于NSCache
这时候你不得不实际上执行自定义代码
以响应你App中的生命周期通知
有一些通知你可能会感兴趣
比如"确实进入了后台"的通知
你的App在挂起会得到这个通知
而这正是NSCache使用这个通知
在你进入后台时使App实际上执行了释放
另一个有趣的通知是内存警告通知
系统实际上是在发出这个通知之后才开始逐出
挂起的App从而给它们一个释放的机会
或许它们能够避免被逐出
只要它们占用的内存下降了
所以我在这里对那个问题举了一个简单的例 子
我将使用默认的NSNotificationCenter
在这种情况下 我要添加一个观察员
以观察"确实收到了内存警告"的通知
而所有我要做的就是调用一些"自定义缓存清除"的代码
也许这会搭板C结构一起使用
并释放一些其他的内存
需要注意的是 如果你真地注册了
NSNotificationCenter观察员特别是在初始化时
请一定要在反初始化中删除你自己
你知道 内存实在是太重要了
因为我还准备讲另外一个课程
我希望你们去听一听
这个课的名字叫做
"在安装有iOS 9系统的iPad上
优化你的App多任务处理"
但实际上即使你的App无法在iPad上运行
或者你有没有计划支持多任务处理
也请你去听一听这个课程
这个课程对应用程序所使用的资源类型
介绍了大量的详细信息
包括它们通常以何种模式进入访问
以及更多有关如何使你的App响应
系统内存状态的信息
这真是太棒了
最后同样重要的是我希望你们都会非常兴奋地看到
我们把原代码带到watchOS 2中
当你正在思考如何建立你的watchOS 2 App时
你必须开始于一个伟大的设计
这个设计真正地关注于你App的基本功能
使它们轻松、愉快
并且方便于用户访问
如果你在这方面需要获得帮助
这里有一个非常不错的课程你可以去听一听
这个课程叫做"苹果手表App设计"
一旦你为你的苹果手表App找到了一个伟大的设计
那么你就可以开始考虑
你的iOS App在哪些方面可能值得再次使用
这可包括实际代码
或熟悉的API访问模式
以及平台之间共享的框架
有时候 你在iOS上做的一些事情
实际上可能在watchOS上没有任何意义
比如出于性能上的考虑就会这样
你最终会执行新的机制
以便在其它平台上获得相同的结果
watchOS用户希望交互行为快速而简单
而且他们总是希望能在App看到最新的相关数据、
通知以及快捷视图
作为一名App开发者这对你意味着什么呢？
用户最有可能做的事情是
在watchOS上刚一启动App
随后就能看到他们想看到的内容
那么我们能够做的工作
是不是让watchOS有非常久的启动时间
以及非常缓慢的响应呢？
我们必须关注于最大限度地减少两个工作量
一是你生成的网络流量以及你必须在设备上
完成的以便它能顺利执行任务的工作量
如果你正在访问的服务器你可以对它进行控制
并且能够添加新的API
那么请确保你给苹果手表发送了
适当大小和格式的响应
有的可能很简单比如从JSON或XML数据块中
删除未使用的密钥
调整图像大小等等
这样苹果手表就会精确地显示它们
就如同它们是通过连线传输过来的一样
而且不必做任何额外的工作如果你的API适用于
大屏幕设备
可以同时显示10条
或20条记录
它可能会发回
一次调用中发生的所有这些信息
但实际上 对于苹果手表来说
你应该只发送需要在单个屏幕上显示的
有关记录的正确数字
为了随时显示更新的相关信息
很重要的一点是使用你的iPhone App
来保持App内容的更新
App内容是平台之间的
一种双向共享状态
因此当用户在任一用户端上采取行动
这将导致他们希望在另一用户端上
看到可以更新的不同的东西
API对此的反应是
"手表连接性更新应用程序内容"
做这个工作的最好时刻
是你的iPhone App被后台程序刷新唤醒的时候
当它完成下载新信息并更新了它自己的快照时
它也可以将这些信息推送到苹果手表上
这样它将在下一次用户启动时做好准备
最后
如果你所依赖的服务器由于某种原因你不能作出更改
比方说你正在与第三方API竞争
你可以利用你的iPhone网络和CPU来连接
从而实际上执行一个中介
使格式和大小响应于手机
你希望API的反应是"手表连接发送信息"
所以你会发送一条消息到iPhone上
提出你的要求然后iPhone将会下载它
并完成我提到的所有操作如删除未使用的密钥、
减少记录数、调整图像大小等等
然后它会向手表发送一个紧凑的可操作的答复
好了 WC课程又到结束的时间了
让我作一下总结
性能是一个特征
这是一个重要的方面
你的App必须给予你的用户丰富的经验
从建立你的App的第一天开始
你就应该把这一点记在心里
当你使用高效的App时你会感觉非常棒
因为它们建立了用户的信任它们节省电池消耗
请了解我提到的所有的苹果技术
当你正在思考如何建立你的App时请选择最好的技术
请保持你的主线程随时为用户输入作好准备
你需要了解你的App何时以及为什么使用内存
你需要获得watchOS
下载以及处理极小集信息的大量经验
这里有一些非常不错的书面资料
如果你开始对这个东西产生兴趣你可以学习一下这些资料
好了 这些就是我今天上课的主要内容
最开始 讲到的一些技术是我们今年新推出的技术
还有一些技术是前几年推出的
谢谢大家 祝你们周五愉快！