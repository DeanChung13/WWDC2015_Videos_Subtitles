00:00:20.487 --> 00:00:27.494 
用於WatchKit的佈局
和動畫技術

00:00:33.467 --> 00:00:34.301 
大家好

00:00:35.936 --> 00:00:37.871 
歡迎參加會議216

00:00:37.938 --> 00:00:39.673 
“用於WatchKit的佈局
和動畫技術”

00:00:39.740 --> 00:00:42.476 
我叫米格爾·桑切斯 
我是一名WatchKit工程師

00:00:42.543 --> 00:00:45.712 
稍後爲你做演講的 
是我的同事湯姆·威特金

00:00:47.247 --> 00:00:51.351 
今天的日程 
是給你們一個WatchKit

00:00:51.418 --> 00:00:53.487 
佈局基本原則的
概述

00:00:54.221 --> 00:00:58.058 
我會仔細講一講
如何使用組來設置

00:00:58.125 --> 00:01:01.261 
複雜的佈局 
之後湯姆就會上來 

00:01:01.662 --> 00:01:04.665 
給你們講一講Watch OS 1中
現有的動畫技術 

00:01:04.730 --> 00:01:06.800 
以及我們在Watch OS 2中
引入的

00:01:06.867 --> 00:01:09.236 
新的
API

00:01:09.970 --> 00:01:13.073 
所有的WatchKit開發者 
還沒有看過平臺 但是正在

00:01:13.140 --> 00:01:14.341 
學習瞭解佈局的人羣

00:01:14.408 --> 00:01:17.744 
當然還有你們中的那些老手 
全部都是

00:01:17.811 --> 00:01:19.179 
本次會議的

00:01:19.646 --> 00:01:22.482 
目標
聽衆

00:01:24.384 --> 00:01:26.253 
我們就從
佈局基本原則開始吧

00:01:28.021 --> 00:01:29.656 
WatchKit佈局模型 

00:01:29.723 --> 00:01:32.593 
要我說 自從
WatchKit OS 1之後 

00:01:32.659 --> 00:01:34.695 
佈局模型
就沒有變過

00:01:35.662 --> 00:01:37.898 
WatchKit和Watch OS
是不一樣的

00:01:37.965 --> 00:01:40.100 
如果你之前沒有用過 
它和你已經熟悉的

00:01:40.167 --> 00:01:44.571 
UIKit和AppKit模型
是不一樣的

00:01:45.706 --> 00:01:49.009 
不同之處在於 
在WatchKit中我們使用了一種

00:01:49.076 --> 00:01:53.514 
基於流的佈局 
我這樣說的意思是 

00:01:53.847 --> 00:01:55.916 
你之前可能已經
看過這個動畫了 

00:01:55.983 --> 00:01:57.351 
在 Interface
Builder中

00:01:57.417 --> 00:01:58.752 
你有WatchKit對象庫

00:01:58.819 --> 00:02:00.487 
和目錄 

00:02:00.988 --> 00:02:03.323 
你可以把它們拖動到
你的控制器上

00:02:04.057 --> 00:02:07.027 
當你拖動它們的時候 
它們就會落到

00:02:07.094 --> 00:02:09.863 
流上下個可用的
槽上

00:02:09.930 --> 00:02:11.965 
流一開始是
縱向的

00:02:12.499 --> 00:02:14.401 
這樣你就有了
第二個元素

00:02:14.468 --> 00:02:17.104 
它會落到它的置位槽上 
當然了 

00:02:17.171 --> 00:02:21.341 
如果你引入一個分組對象 
並且告訴它使用水平佈局

00:02:21.408 --> 00:02:23.477 
的話 
你就可以添加一個水平流

00:02:26.146 --> 00:02:30.584 
作爲一名WatchKit應用程序的
程序員 

00:02:30.651 --> 00:02:34.888 
你寫的不是對象創建代碼 
這一點很重要

00:02:35.088 --> 00:02:37.991 
你所有的UI創建 
都發生在故事板

00:02:38.058 --> 00:02:38.992 
和Interface
Builder中

00:02:39.059 --> 00:02:42.329 
我們不提供API 
也不會分配你的

00:02:42.396 --> 00:02:43.263 
典型WatchKit對象

00:02:44.431 --> 00:02:47.067 
這並不是說 
你不能對你的佈局層級 

00:02:47.134 --> 00:02:51.138 
對齊 尺寸改變 
當然還有你在這裏看到的

00:02:51.205 --> 00:02:53.006 
動畫 
進行微調

00:02:53.073 --> 00:02:56.009 
我們來詳細
分開講一下

00:02:56.343 --> 00:02:58.879 
我們先來講一講
對齊和改變尺寸

00:03:00.514 --> 00:03:01.648 
你所有的WatchKit對象實例 

00:03:01.715 --> 00:03:02.649 
都是WK
InterfaceObject

00:03:02.716 --> 00:03:06.119 
的子類

00:03:08.121 --> 00:03:09.122 
這些都有對齊設置 

00:03:09.189 --> 00:03:14.061 
尺寸改變調整的屬性

00:03:14.161 --> 00:03:16.029 
說到對齊 

00:03:16.096 --> 00:03:18.498 
我們說的是包含對象內部的
對齊

00:03:19.299 --> 00:03:22.202 
這是水平對齊
和縱向對齊 

00:03:22.269 --> 00:03:24.137 
可以是左對齊 
居中對齊或者右對齊

00:03:24.838 --> 00:03:29.376 
對於尺寸改變來說 
你會告訴我們 在對你的

00:03:29.443 --> 00:03:33.347 
對象進行橫向 縱向尺寸的
改變 

00:03:34.281 --> 00:03:37.251 
可以是固定的 相對的或者
自動調整 其規則是什麼

00:03:40.787 --> 00:03:45.726 
在Watch OS 2中 
自從Watch OS 1之後 

00:03:45.792 --> 00:03:47.261 
Interface Builder
中就可以用

00:03:47.327 --> 00:03:48.629 
這些屬性了
但在Watch OS 2中 

00:03:48.695 --> 00:03:50.964 
我們通過API 
提供了更多屬性

00:03:51.798 --> 00:03:54.835 
我們想讓你更多地控制
自己的代碼 並且能讓它們

00:03:54.902 --> 00:03:57.070 
“動起來” 
待會兒你會看到

00:03:57.137 --> 00:03:58.805 
通過新的枚舉類型 
我們有了一個新的API 

00:03:58.872 --> 00:04:02.376 
可以設置水平 縱向對齊

00:04:03.977 --> 00:04:05.512 
它對你百依百順

00:04:05.579 --> 00:04:09.950 
這裏有一個WK藍色框 

00:04:10.017 --> 00:04:12.286 
可以進行左上角對齊 

00:04:12.352 --> 00:04:15.889 
居中對齊 右下角對齊 

00:04:17.791 --> 00:04:19.459 
至於改變尺寸API 

00:04:19.625 --> 00:04:22.062 
我們已經提到過了
橫向 縱向尺寸的改變

00:04:22.796 --> 00:04:26.834 
對於Watch OS 2來說 
我們進一步提供了相對寬度 

00:04:26.900 --> 00:04:29.269 
自動調整API

00:04:29.369 --> 00:04:31.371 
同樣地 它讓你能更多地
控制自己的代碼了

00:04:33.240 --> 00:04:35.142 
用圖表表示的話 
它看起來是這樣的：

00:04:35.609 --> 00:04:37.678 
這是一個固定寬度和高度的

00:04:37.744 --> 00:04:39.346 
藍方格 

00:04:39.413 --> 00:04:40.247 
再說一次 

00:04:42.416 --> 00:04:45.519 
已經用過的話 

00:04:45.586 --> 00:04:46.987 
你就應該知道 

00:04:47.054 --> 00:04:48.822 
我們對零值的解釋
已經發生了變化

00:04:49.356 --> 00:04:51.058 
在Watch OS
1中 如果你在代碼中

00:04:51.124 --> 00:04:52.893 
給我們一個零值 

00:04:52.960 --> 00:04:55.696 
我們會把它恢復爲故事板
零值但是在Watch OS 2中 

00:04:55.996 --> 00:04:58.866 
我們會把零解釋爲
絕對零值

00:04:58.932 --> 00:04:59.967 
這一點不要忘了

00:05:02.336 --> 00:05:06.573 
假如說你想把矩形的尺寸
調整爲包含元素

00:05:06.640 --> 00:05:08.475 
寬度的
75%

00:05:08.909 --> 00:05:12.746 
你就可以使用剛纔提到的
相對寬度 設一個0.75的值 

00:05:12.813 --> 00:05:15.315 
然後你就得到了寬度的
四分之三

00:05:17.050 --> 00:05:19.586 
如果你想把它的高度設爲
包含元素高度的一半 

00:05:19.653 --> 00:05:22.923 
你也可以
這樣做

00:05:24.825 --> 00:05:28.328 
這些API中的第二個參數是
一個調整值 

00:05:28.729 --> 00:05:31.865 
這個值可以是正的或者負的 
當你第一次調整尺寸後 

00:05:31.932 --> 00:05:33.734 
這個值就會生效

00:05:33.800 --> 00:05:37.171 
在這個例子中 
我給寬度增加30 

00:05:37.237 --> 00:05:41.208 
給高度減去30 
那麼我就得到了下面這個

00:05:43.877 --> 00:05:46.046 
最後一點 
自動調整和自動調整高度 

00:05:46.113 --> 00:05:48.982 
它們的功能
和你預期的應該是一樣的

00:05:49.049 --> 00:05:51.251 
如你所知 
根據你的矩形中的內容不同 

00:05:51.318 --> 00:05:53.820 
我們會恰當地改變尺寸

00:05:55.255 --> 00:05:57.724 
我們接着來講講
組元素

00:05:59.026 --> 00:06:01.295 
你對佈局進行微調  
實際上就是在這裏進行的

00:06:02.062 --> 00:06:07.100 
WKInterfaceGroup 
首先把它當成一個

00:06:07.167 --> 00:06:08.569 
沒有默認內容的容器

00:06:08.802 --> 00:06:11.772 
它的內容可以是
我稍後舉例說明的內容 

00:06:12.072 --> 00:06:14.708 
但是一開始 
它就只是一個容器

00:06:15.342 --> 00:06:18.312 
它是一件可以佈置你所有的
元素的工具

00:06:19.546 --> 00:06:20.948 
這裏 

00:06:21.014 --> 00:06:23.817 
你可以選擇是要一個水平佈局
還是要一個縱向佈局

00:06:25.252 --> 00:06:27.454 
你在這裏還可以開始引入
嵌套

00:06:30.691 --> 00:06:33.227 
你在這裏也可以對我們
剛剛看到的包含元素

00:06:33.293 --> 00:06:36.296 
的對齊 尺寸
進行調整

00:06:37.598 --> 00:06:40.701 
就像我們剛剛在第一組幻燈片
中看到的那樣 

00:06:40.767 --> 00:06:42.436 
我現在要轉移到藍色上面

00:06:42.503 --> 00:06:44.638 
你可以在Interface 
Builder上

00:06:44.705 --> 00:06:46.974 
放置你的界面 
得到了縱向佈局

00:06:48.475 --> 00:06:49.643 
引入一個組

00:06:49.710 --> 00:06:51.245 
然後在Interface
Builder中說明

00:06:51.311 --> 00:06:53.981 
你想要水平佈局 
你就可以開始在那裏放置

00:06:54.047 --> 00:06:55.482 
你的對象了

00:06:57.451 --> 00:06:59.720 
定義好你的包含層級後 

00:07:00.787 --> 00:07:02.356 
你就可以在你的組內

00:07:02.556 --> 00:07:04.124 
定義插入物 空格等

00:07:04.191 --> 00:07:05.692 
事情

00:07:06.493 --> 00:07:09.630 
你可以在這裏定義
左插入物

00:07:09.696 --> 00:07:11.098 
這些都是點值

00:07:11.899 --> 00:07:15.903 
左插入物 底部插入物 
頂部插入物 右插入物以及

00:07:16.570 --> 00:07:21.275 
右邊 當然還有讓你的元素
彼此分割 分離

00:07:21.341 --> 00:07:23.577 
開來的
空格

00:07:25.546 --> 00:07:29.116 
對了 別忘了你的頂層
容器對象

00:07:29.183 --> 00:07:30.651 
也是一個組

00:07:31.185 --> 00:07:33.654 
你可以在那裏設置
插入物 

00:07:34.988 --> 00:07:36.056 
空格

00:07:36.123 --> 00:07:39.660 
你的組內有幾個元素 
我們就使用幾個空格

00:07:39.726 --> 00:07:42.496 
這裏 
你的組內的三個頂層元素

00:07:42.563 --> 00:07:44.631 
那就來
十個空格

00:07:47.301 --> 00:07:49.937 
那麼一旦你開始用 
一旦你開始用嵌套 

00:07:50.270 --> 00:07:52.673 
你就可以實現
複雜的佈局

00:07:52.739 --> 00:07:54.241 
這裏有一個簡單的例子

00:07:54.708 --> 00:07:57.110 
如果你想讓這兩個正方形
堆疊在一起 

00:07:57.177 --> 00:07:59.680 
然後右邊跟着
兩個正方形 

00:08:00.080 --> 00:08:04.318 
那麼你可以先通過
縱向佈局使用一個組

00:08:05.018 --> 00:08:06.987 
然後你再通過水平佈局
使用另外一個組 

00:08:07.054 --> 00:08:09.590 
接着你再用第三個組
把這兩個組包裹在裏面 

00:08:09.656 --> 00:08:11.825 
這樣 
你就可以實現這兩個元素的

00:08:11.892 --> 00:08:12.893 
水平佈局

00:08:13.393 --> 00:08:17.130 
你的組內
默認是沒有內容的

00:08:17.397 --> 00:08:19.833 
所以它們是透明的 
你只能看到你的正方形

00:08:22.236 --> 00:08:24.738 
我們再來看個例子 
這樣可以更具體 

00:08:24.805 --> 00:08:27.174 
我會在會議的這一部分介紹
這個例子 

00:08:27.241 --> 00:08:30.177 
之後湯姆就會開始
製成動畫

00:08:30.711 --> 00:08:31.812 
我們這裏有WKRecipes

00:08:32.011 --> 00:08:33.780 
這是一個簡單的
食譜查看器

00:08:34.313 --> 00:08:35.381 
它會把你的食譜列出來

00:08:36.416 --> 00:08:38.552 
魚肉卷 匹薩 
烤翅

00:08:40.287 --> 00:08:42.722 
你可以看到你的各種食譜的
原料列表 

00:08:42.789 --> 00:08:45.993 
你可以看到每個食譜
能夠做出

00:08:46.059 --> 00:08:47.227 
幾份菜

00:08:47.728 --> 00:08:50.264 
湯姆在動畫那裏 
還會再講一下

00:08:50.330 --> 00:08:51.832 
其他
畫面

00:08:52.132 --> 00:08:54.635 
不過我們現在要看的 
是這三個元素的

00:08:54.701 --> 00:08:56.069 
靜態佈局

00:08:56.870 --> 00:08:57.804 
我們該怎麼辦呢？

00:08:58.972 --> 00:09:02.809 
我們看到的第一個畫面是
一個食譜表

00:09:02.943 --> 00:09:06.413 
在WatchKit中 你有一個
表控制器 你可以用它來

00:09:06.480 --> 00:09:09.116 
對你的行進行配置 
但是你需要告訴我們

00:09:09.183 --> 00:09:10.884 
各個行的
樣子是什麼

00:09:12.019 --> 00:09:13.587 
它的結構是什麼？

00:09:13.654 --> 00:09:16.790 
因此我們在這裏需要一張
圖片和一個標籤

00:09:18.926 --> 00:09:20.294 
我們現在有了一個水平佈局 

00:09:20.360 --> 00:09:22.262 
它會自動告訴你 

00:09:22.329 --> 00:09:24.665 
這是一個水平佈局的組

00:09:27.601 --> 00:09:30.370 
這樣你就定義好了
包含層次 

00:09:30.437 --> 00:09:32.372 
現在你要對你的空格
進行定義

00:09:32.439 --> 00:09:33.740 
你的左插入物 

00:09:34.241 --> 00:09:35.275 
底部插入物 

00:09:35.676 --> 00:09:37.744 
頂部插入物以及空格
都搞定了

00:09:39.413 --> 00:09:40.347 
對齊也沒問題了

00:09:41.181 --> 00:09:45.252 
對吧？你的圖片是
垂直居中對齊 

00:09:45.786 --> 00:09:50.390 
但是它是左對齊了
它指向的下個槽

00:09:50.724 --> 00:09:52.960 
標籤也是
縱向對齊 

00:09:53.026 --> 00:09:53.961 
左對齊

00:09:54.061 --> 00:09:57.064 
注意它是在對應的槽中
左對齊 

00:09:57.130 --> 00:09:59.833 
是的 因爲前面有一張圖片 
所以就在它旁邊

00:10:02.302 --> 00:10:04.371 
我們的圖片是方形的

00:10:04.838 --> 00:10:05.939 
資源

00:10:06.006 --> 00:10:09.243 
每一邊都是30個點的
固定尺寸

00:10:10.043 --> 00:10:12.579 
標籤當然就是
自動調整

00:10:15.282 --> 00:10:18.685 
從表格行我們可以看出 

00:10:19.586 --> 00:10:20.754 
我們可以使用組

00:10:20.821 --> 00:10:24.458 
來水平調整尺寸 然後我們
就可以微調對齊 

00:10:24.525 --> 00:10:25.659 
設置一些空格

00:10:26.693 --> 00:10:29.730 
現在我們再來看看
原料控制器

00:10:30.531 --> 00:10:33.467 
你們中可能有人注意到 
這裏有五種辣椒醬 

00:10:33.534 --> 00:10:36.103 
不管單位是什麼 
哪種煎玉米卷的食譜也用不了

00:10:36.170 --> 00:10:39.840 
這麼多的辣椒醬 
但這不是你關注的重點

00:10:42.342 --> 00:10:43.844 
你應該注意 

00:10:43.911 --> 00:10:45.512 
雖然我們有了表佈局 

00:10:46.146 --> 00:10:47.147 
有了行 

00:10:47.781 --> 00:10:49.316 
我們現在又有了圓形元素

00:10:49.516 --> 00:10:50.851 
我們應該怎樣實現？

00:10:52.219 --> 00:10:54.421 
水平佈局
還是一樣的

00:10:54.488 --> 00:10:55.389 
我們有一個組

00:10:55.822 --> 00:10:58.992 
當然了 我們有標籤 

00:10:59.059 --> 00:11:01.929 
不過左上方的那個
紅色圓圈是什麼？

00:11:03.163 --> 00:11:04.998 
我剛纔已經說過了 
我們可以嵌套組

00:11:05.065 --> 00:11:06.400 
所以我們在這裏用一個組

00:11:08.001 --> 00:11:09.570 
現在我們接着移動 

00:11:09.636 --> 00:11:13.941 
移動到組的背景那裏

00:11:14.007 --> 00:11:16.543 
組沒有默認內容 
但是它們可以有背景

00:11:16.643 --> 00:11:19.580 
背景可以是
顏色或者圖片

00:11:20.247 --> 00:11:22.382 
我們可以在這個組裏
選擇圖片 

00:11:22.583 --> 00:11:26.854 
然後選擇繪製背景的
半徑

00:11:27.354 --> 00:11:30.858 
這樣我們就給設置了一個
帶有彩色背景的組 

00:11:31.325 --> 00:11:34.828 
原理圖是藍色的 
實例是紅色的 

00:11:34.895 --> 00:11:38.932 
半徑是8 你就得到了
一個漂亮的藍色圓圈

00:11:39.466 --> 00:11:42.402 
有了組之後 
你就可以在裏面嵌套標籤 

00:11:42.469 --> 00:11:44.204 
標籤在組內是居中的

00:11:44.271 --> 00:11:46.139 
現在你有了水平居中
和垂直居中 

00:11:46.206 --> 00:11:49.076 
這樣你就能看到
概念的構造 

00:11:49.142 --> 00:11:50.711 
我們說的就是這些概念

00:11:53.013 --> 00:11:55.716 
再說一遍 我有點囉嗦 
請原諒我 

00:11:55.782 --> 00:11:56.717 
這是模型

00:11:56.783 --> 00:12:00.053 
現在你可以定義 
微調你的左插入物 

00:12:00.120 --> 00:12:01.255 
頂部 底部

00:12:03.790 --> 00:12:04.691 
和空格

00:12:06.527 --> 00:12:08.896 
記住 如果組是嵌套的 

00:12:10.230 --> 00:12:11.431 
那麼你可以使用嵌套來

00:12:11.498 --> 00:12:13.066 
實現複雜的佈局 

00:12:14.868 --> 00:12:17.738 
你還可以在組內使用背景 

00:12:17.804 --> 00:12:20.307 
不管是顏色 
還是圖片

00:12:22.709 --> 00:12:24.945 
最後 
我們有份數控制器 

00:12:25.012 --> 00:12:27.714 
數字已經
高亮顯示了 

00:12:27.781 --> 00:12:30.684 
是個圓圈 
高亮顯示了份數 

00:12:31.084 --> 00:12:33.120 
對於你的食譜來說 
這個例子中是四份

00:12:34.054 --> 00:12:35.489 
你們中有人
會想了 

00:12:35.722 --> 00:12:37.124 
這是個圓形佈局

00:12:37.191 --> 00:12:38.759 
這是
怎麼實現的？

00:12:38.825 --> 00:12:40.527 
你剛剛說的是

00:12:40.594 --> 00:12:42.729 
格狀
流佈局

00:12:43.664 --> 00:12:47.067 
我們有十二個圈 

00:12:47.134 --> 00:12:49.436 
一個十二個對象的圓形圖案 

00:12:50.037 --> 00:12:51.271 
但是如果我們仔細看一下 

00:12:51.338 --> 00:12:55.809 
這裏實際上
只有三個頂層組

00:12:58.111 --> 00:12:59.313 
這是第一個組 

00:13:00.314 --> 00:13:01.181 
第二個組 

00:13:02.783 --> 00:13:03.650 
第三個組

00:13:05.452 --> 00:13:07.287 
我們隨後在這些組內

00:13:07.354 --> 00:13:08.989 
使用了更多嵌套

00:13:09.089 --> 00:13:10.524 
我們來看看
中間的組

00:13:11.892 --> 00:13:13.560 
抱歉 我來講講

00:13:13.627 --> 00:13:16.663 
頂層組那裏 
我們的組對齊了

00:13:16.730 --> 00:13:18.165 
舉例來說 

00:13:18.232 --> 00:13:21.134 
頂層組是水平居中對齊 

00:13:21.201 --> 00:13:23.337 
固定尺寸

00:13:24.338 --> 00:13:27.975 
中間的這個是
自動調整 

00:13:28.041 --> 00:13:29.877 
佔去了容器的
整個寬度

00:13:31.645 --> 00:13:36.850 
第二個組內有更多的組 
對吧？

00:13:36.917 --> 00:13:38.919 
一個組是
縱向佈局

00:13:39.620 --> 00:13:41.488 
一個組是
水平佈局 

00:13:41.555 --> 00:13:43.724 
最後 
第三個組又是

00:13:44.024 --> 00:13:45.526 
水平佈局

00:13:46.026 --> 00:13:47.594 
如果我們
仔細看一下各個組 

00:13:47.961 --> 00:13:50.664 
這些組都是由更多的
小組構成的

00:13:53.267 --> 00:13:55.602 
一旦我們有了
這層定義 

00:13:56.403 --> 00:13:59.373 
我們就可以說明對齊 
說明每個圓圈的

00:13:59.506 --> 00:14:00.807 
精確對齊方式

00:14:01.074 --> 00:14:02.643 
現在你可以清楚地看到 

00:14:03.277 --> 00:14:06.346 
這個圈是
水平向右對齊 

00:14:06.880 --> 00:14:08.549 
頂部垂直對齊

00:14:09.783 --> 00:14:11.585 
這個圈你就可以
左對齊 

00:14:11.652 --> 00:14:12.920 
居中對齊

00:14:15.322 --> 00:14:17.257 
另一個圈就可以右下對齊 
對吧？

00:14:17.491 --> 00:14:20.794 
現在你知道了 
格狀流佈局真的很強大 

00:14:20.861 --> 00:14:23.397 
讓你實現
想要的東西 

00:14:23.564 --> 00:14:26.066 
這裏的整個圓圈 
我們遵循的

00:14:26.133 --> 00:14:28.969 
也是相同的
模式

00:14:31.238 --> 00:14:32.506 
所以要實現複雜的佈局 

00:14:33.340 --> 00:14:35.609 
組嵌套是關鍵

00:14:37.611 --> 00:14:38.679 
現在我給了你們繩子 

00:14:38.745 --> 00:14:40.280 
但是我得警告你們 

00:14:40.514 --> 00:14:41.648 
別把自己吊死了

00:14:42.683 --> 00:14:45.986 
組有可能會被濫用 
不是嗎？

00:14:46.053 --> 00:14:47.955 
你要記住這點

00:14:48.021 --> 00:14:49.890 
如果你試着嵌套所有的事情 

00:14:49.957 --> 00:14:50.924 
你就是在走極端

00:14:51.558 --> 00:14:53.527 
所以要記住這點

00:14:54.828 --> 00:14:56.363 
我不能給出
一個精確的數字

00:14:56.430 --> 00:14:58.565 
這得看你的背景
是什麼 

00:14:58.632 --> 00:15:00.567 
你的佈局運行的怎樣 

00:15:00.634 --> 00:15:02.769 
但是不要忘了這些事

00:15:03.637 --> 00:15:04.972 
演示
開始之前 

00:15:05.038 --> 00:15:07.708 
我說過我們不會給你提供
API 

00:15:07.774 --> 00:15:10.043 
讓你們直接創建元素 
破壞元素

00:15:11.612 --> 00:15:12.980 
這些都是在
故事板

00:15:13.046 --> 00:15:13.914 
和
Interface Builder

00:15:13.981 --> 00:15:14.815 
中完成的

00:15:14.948 --> 00:15:17.384 
因此你在Interface
Builder中

00:15:17.451 --> 00:15:18.452 
創建的任何東西
都是被實例化的

00:15:18.519 --> 00:15:19.353 
創建好了

00:15:19.453 --> 00:15:22.222 
當你實例化你的某個
控制器時 

00:15:22.422 --> 00:15:26.126 
你就實例化了裏面的
全部元素

00:15:27.728 --> 00:15:29.329 
可以隱藏
某些元素

00:15:29.396 --> 00:15:31.965 
某些元素
你可以有這種屬性 

00:15:32.699 --> 00:15:34.168 
但是 
即使這些元素是隱藏的 

00:15:34.735 --> 00:15:36.937 
你們還是會...
我們還會創建它們

00:15:38.739 --> 00:15:40.374 
所以你還是
需要承擔

00:15:40.440 --> 00:15:41.441 
創建成本

00:15:41.675 --> 00:15:43.343 
你可能節省
佈局成本 

00:15:43.410 --> 00:15:44.645 
因爲我們不會
進行佈局 

00:15:44.711 --> 00:15:46.280 
但是擋不住
創建

00:15:46.713 --> 00:15:50.150 
當你往控制器內添加
一批對象時 

00:15:50.217 --> 00:15:51.218 
不要忘了這一點 好嗎？

00:15:51.285 --> 00:15:54.254 
記住 
即使在那個特定的時間 

00:15:54.321 --> 00:15:56.957 
它們是不可見的 
它們也還是被創建了出來

00:15:59.126 --> 00:16:00.194 
最後 

00:16:00.694 --> 00:16:04.798 
就像我向你們展示的組 
組的背景圖片 

00:16:05.732 --> 00:16:06.967 
記住

00:16:07.434 --> 00:16:10.103 
在你的Apple Watch上 

00:16:10.170 --> 00:16:11.772 
這些圖片是有轉換成本的

00:16:13.640 --> 00:16:15.142 
對於Watch OS 1
 app來說 

00:16:16.009 --> 00:16:17.911 
插件是運行在手機上的 

00:16:18.712 --> 00:16:20.747 
圖片需要...
我們需要把這些圖片

00:16:20.814 --> 00:16:22.416 
弄到你的Watch上 
對吧？

00:16:22.883 --> 00:16:26.086 
你的用戶每次使用你的界面
都是這樣

00:16:26.153 --> 00:16:27.154 
記住這一點

00:16:27.421 --> 00:16:29.389 
我們有
圖像緩存API 

00:16:30.757 --> 00:16:32.559 
你可以告訴我們把某組
特定的圖像移過去 

00:16:32.626 --> 00:16:35.929 
但它們還是必須通過
無線傳到你的Watch上

00:16:36.663 --> 00:16:38.732 
在Watch OS 2上 
這變得不那麼相關了

00:16:38.799 --> 00:16:40.901 
因爲插件是
運行在你的Watch上 

00:16:41.468 --> 00:16:43.403 
但是 
你還是需要安裝app

00:16:43.470 --> 00:16:45.572 
你還是需要
安裝

00:16:45.639 --> 00:16:46.507 
一系列資源

00:16:46.573 --> 00:16:49.076 
從安裝角度來說 
你的用戶

00:16:49.142 --> 00:16:50.477 
還是會有
轉換成本

00:16:52.246 --> 00:16:53.447 
所以要記住 

00:16:53.514 --> 00:16:55.816 
使用你的圖片的
合適尺寸

00:16:56.483 --> 00:16:59.386 
如果你給我們一幅圖片 
然後告訴我們在屏幕上

00:16:59.453 --> 00:17:02.222 
以某個尺寸顯示出來 
我們就會調整它的大小

00:17:03.290 --> 00:17:06.059 
但是這樣做 
你就給我們增加了處理週期 

00:17:06.193 --> 00:17:07.828 
給Watch上的
WatchKit

00:17:07.895 --> 00:17:08.896 
增加了處理週期 對吧？

00:17:08.962 --> 00:17:12.332 
所以你可以正確調整你的
圖像的尺寸大小 

00:17:13.032 --> 00:17:15.102 
要麼在手機上 
要麼在你的服務器上 如果

00:17:15.169 --> 00:17:18.204 
這些圖像碰巧是動態圖像 
就會對你的

00:17:18.372 --> 00:17:20.907 
UI渲染
產生影響

00:17:23.076 --> 00:17:24.877 
最後 
如果你有一些圖像

00:17:24.944 --> 00:17:26.046 
需要調整大小 

00:17:26.113 --> 00:17:27.146 
比如說 按鈕

00:17:28.582 --> 00:17:30.817 
你就可以用 
你並不需要多個尺寸的圖像

00:17:30.884 --> 00:17:32.319 
你可以使用圖像瘦身

00:17:32.386 --> 00:17:35.189 
你的資源目錄 Interf
ace Builder中

00:17:35.255 --> 00:17:37.257 
有這個UI 
你可以對你的圖像進行瘦身 

00:17:37.324 --> 00:17:38.926 
告訴我們它們的尺寸發生了
什麼改變 

00:17:39.326 --> 00:17:40.527 
我們就會把事情做好

00:17:40.594 --> 00:17:43.330 
你就可以給我們一組
特定的圖像 

00:17:43.931 --> 00:17:45.699 
那麼你的UI中不同的尺寸

00:17:45.766 --> 00:17:48.535 
也就適用了

00:17:50.003 --> 00:17:52.472 
會議的靜態部分就是這些 

00:17:52.539 --> 00:17:54.741 
現在我想
邀請湯姆上來 

00:17:55.209 --> 00:17:57.511 
給這個模型增加動態
元素

00:18:00.681 --> 00:18:01.515 
太棒了

00:18:03.650 --> 00:18:05.219 
大家好我是湯姆 

00:18:05.285 --> 00:18:06.854 
我也來自
WatchKit團隊

00:18:06.920 --> 00:18:09.857 
我們會討論下動畫 
把動畫引入你在

00:18:10.123 --> 00:18:11.758 
Watch OS 2現有的
app

00:18:11.825 --> 00:18:13.060 
以及你的新app之中

00:18:13.694 --> 00:18:15.495 
我們先從Watch 
OS 1現有的一些

00:18:15.562 --> 00:18:17.564 
動畫類型
開始說起

00:18:18.932 --> 00:18:20.400 
表格是很靈活的

00:18:20.834 --> 00:18:23.670 
表格中的特定的更新
已經做成了動畫

00:18:24.238 --> 00:18:25.706 
如果你插入行 

00:18:26.139 --> 00:18:27.441 
如果你刪除行 

00:18:27.941 --> 00:18:29.943 
如果你在某個行中
更新內容 

00:18:30.010 --> 00:18:31.078 
它們真的會動 

00:18:31.144 --> 00:18:32.746 
我們都會談談

00:18:34.314 --> 00:18:35.816 
我們所有的例子
都是在我們的

00:18:35.883 --> 00:18:37.484 
食譜app
這個背景中發生的

00:18:38.118 --> 00:18:39.853 
讓我們從
食譜列表開始

00:18:40.254 --> 00:18:43.323 
如果我們能夠對列表
進行排序 那就太棒了 

00:18:43.390 --> 00:18:47.561 
或者依據我們指定的等級
進行排序 

00:18:47.961 --> 00:18:49.062 
或者依據字母表進行排序

00:18:50.063 --> 00:18:54.334 
我們排序的時候 
列表是如何排序的 

00:18:54.401 --> 00:18:55.335 
這點並不太清晰

00:18:55.636 --> 00:18:58.539 
如果我們插入行 
然後看到列表是如何排序的 

00:18:58.872 --> 00:19:01.275 
然後過了幾秒鐘 
從UI中除去 

00:19:01.341 --> 00:19:02.910 
如果是這樣的話 
那就太棒了

00:19:02.976 --> 00:19:05.212 
我們怎麼做？

00:19:06.213 --> 00:19:07.181 
很簡單

00:19:07.381 --> 00:19:08.515 
我們有一張表

00:19:08.582 --> 00:19:11.118 
我們對插入行 插入索引
進行調用 

00:19:11.185 --> 00:19:13.520 
我們就插入了一行
狀態類型

00:19:15.222 --> 00:19:18.225 
然後我們到行控制器中 
更新行上的文字 

00:19:19.993 --> 00:19:21.728 
然後我們設置一個定時器 
設置過幾秒後 

00:19:22.162 --> 00:19:24.031 
移走行 
這樣就在這裏

00:19:24.631 --> 00:19:25.999 
實現了
這種方式

00:19:27.668 --> 00:19:31.738 
因此 
插入行 刪除行真的能夠

00:19:31.805 --> 00:19:33.040 
增加你的界面的靈活性

00:19:33.841 --> 00:19:35.642 
需要指出的一點是 
你能插入 刪除

00:19:35.709 --> 00:19:37.110 
任何類型的行

00:19:37.644 --> 00:19:40.247 
比如說 
我們這裏有一個食譜列表 

00:19:40.314 --> 00:19:41.682 
都是同一類型單元 

00:19:42.015 --> 00:19:43.383 
但是我們現在插入了一個

00:19:43.450 --> 00:19:45.485 
類型截然不同的行

00:19:45.953 --> 00:19:48.622 
再說一遍 有了它 
你就有了動態十足的內容

00:19:49.122 --> 00:19:50.190 
就在你的界面內

00:19:51.325 --> 00:19:54.494 
我還想指出的是 
如果你想更新表 

00:19:54.695 --> 00:19:56.430 
而不是製作動畫 
我們有兩個API 

00:19:56.496 --> 00:19:58.298 
如果你們已經用過了
WatchKit

00:19:58.365 --> 00:19:59.766 
或者Watch OS 1 
那麼你們應該知道了

00:20:02.269 --> 00:20:04.671 
接着來看行裏的內容 

00:20:05.005 --> 00:20:06.173 
我們可以點擊看到

00:20:06.240 --> 00:20:08.575 
食譜的
詳細視圖

00:20:08.842 --> 00:20:09.776 
我們也有一個描述

00:20:10.310 --> 00:20:11.912 
考慮到Apple 
Watch的尺寸 

00:20:11.979 --> 00:20:13.547 
考慮到描述的長度 

00:20:13.614 --> 00:20:14.948 
我們可能不想在那裏
一直呈現

00:20:15.015 --> 00:20:16.717 
完整的
描述

00:20:17.384 --> 00:20:19.887 
因此我們把描述放到了一個
表的行中 

00:20:19.953 --> 00:20:21.488 
在那裏顯示有刪節的版本

00:20:22.055 --> 00:20:24.224 
如果你點擊那個行 

00:20:25.259 --> 00:20:26.827 
它就會就地展開 展示完整的

00:20:26.894 --> 00:20:28.095 
描述 這很棒

00:20:28.962 --> 00:20:31.598 
真的很漂亮 

00:20:31.665 --> 00:20:34.001 
動畫真的很漂亮 

00:20:34.234 --> 00:20:36.637 
並且它能給你提供
你想要的信息 

00:20:36.703 --> 00:20:37.704 
分毫不差

00:20:38.839 --> 00:20:39.973 
我們是怎樣實現的？

00:20:40.040 --> 00:20:41.542 
我要回到我們的
藍盒那裏

00:20:43.110 --> 00:20:44.111 
這是我們的表的單元

00:20:44.978 --> 00:20:47.381 
單元內 
我們有幾個標籤

00:20:47.948 --> 00:20:50.017 
我們有短標籤 
這是描述的

00:20:50.083 --> 00:20:51.251 
刪節版本

00:20:52.219 --> 00:20:55.189 
我們還有一個標籤 上面寫着
“點擊顯示更多信息”

00:20:56.190 --> 00:20:58.025 
當然 
我們還有第三個標籤

00:20:58.458 --> 00:20:59.893 
這個標籤是
完整的描述

00:21:01.195 --> 00:21:02.763 
所以一開始 

00:21:02.829 --> 00:21:06.867 
我們的單元隱藏了完整描述

00:21:07.267 --> 00:21:10.571 
標籤 我們所做的 
就是用戶點擊單元 

00:21:10.771 --> 00:21:12.406 
我們就把它顛倒過來

00:21:12.940 --> 00:21:15.542 
我們會取消隱藏
完整描述標籤 

00:21:15.609 --> 00:21:17.711 
我們會把其它的隱藏起來 

00:21:17.778 --> 00:21:19.479 
這樣 就可以在

00:21:19.546 --> 00:21:21.982 
WatchKit中
播放動畫

00:21:22.282 --> 00:21:23.217 
就是這麼簡單

00:21:23.717 --> 00:21:24.885 
再說一遍 這是代碼

00:21:24.952 --> 00:21:26.753 
就是這麼短短几行代碼 

00:21:27.154 --> 00:21:28.922 
加在你的應用程序內 

00:21:29.256 --> 00:21:31.124 
就是一次
奇妙的經歷

00:21:35.929 --> 00:21:37.631 
行又重新加載 

00:21:37.698 --> 00:21:39.867 
不管在高度上 
它們的內容發生了什麼改變

00:21:40.200 --> 00:21:42.002 
如果你重新加載某個行 
但是高度不變 

00:21:42.069 --> 00:21:44.137 
那就沒有動畫

00:21:45.606 --> 00:21:47.174 
要實現這個 

00:21:47.241 --> 00:21:49.076 
你的行高就得是自動調整 

00:21:49.142 --> 00:21:51.211 
因爲 
如果它們的高度是固定 

00:21:51.278 --> 00:21:52.679 
行就不會
真的發生變化

00:21:57.918 --> 00:22:00.120 
現在我們回到我們的
食譜列表 

00:22:00.187 --> 00:22:02.022 
看一個不同類型的
動畫

00:22:03.290 --> 00:22:05.058 
回到了我們的單元中 

00:22:05.826 --> 00:22:07.194 
我要喚起這些箭頭

00:22:07.761 --> 00:22:10.063 
就像它展示的這樣 
如果我們能夠增加某種...

00:22:10.264 --> 00:22:11.732 
讓箭頭旋轉起來 
比如說 

00:22:12.099 --> 00:22:14.968 
那就
太棒了

00:22:15.969 --> 00:22:19.206 
我們可以在一個
動態圖像中實現這個

00:22:19.873 --> 00:22:22.209 
動態圖像功能很強大 

00:22:22.276 --> 00:22:23.310 
有了它們 

00:22:23.377 --> 00:22:27.314 
你就可以在給定的時間內 
循環一系列的圖像

00:22:28.949 --> 00:22:32.519 
你也可以重複 
顛倒動畫

00:22:32.853 --> 00:22:34.521 
WatchKit中
允許的

00:22:34.621 --> 00:22:36.190 
動畫類型
就只有這一種

00:22:36.256 --> 00:22:38.058 
同樣地 
它們也很強大

00:22:39.726 --> 00:22:42.896 
我想指出一點 
如果你有一系列的圖像 

00:22:42.963 --> 00:22:45.332 
圖像的數目會很快增長 
它們的加載時間成本 

00:22:45.599 --> 00:22:48.902 
性能成本也會很快增長 
並且 

00:22:48.969 --> 00:22:51.505 
內存使用
也會很快增長

00:22:51.972 --> 00:22:53.040 
記住這一點 

00:22:53.106 --> 00:22:55.809 
儘量減少圖像的數量 

00:22:55.876 --> 00:22:58.111 
儘量降低圖像的尺寸 

00:22:58.178 --> 00:22:59.446 
這樣你才能獲得
更好的性能

00:23:02.749 --> 00:23:04.718 
我還想指出的是 

00:23:04.785 --> 00:23:07.120 
我們在Watch OS
2上的

00:23:07.187 --> 00:23:10.390 
新選取器對象 
允許你用一個“數碼皇冠”

00:23:10.591 --> 00:23:13.327 
在一張動態圖像中
整理圖像

00:23:13.861 --> 00:23:16.430 
它的功能很強大 
會給你一次奇妙的體驗

00:23:17.931 --> 00:23:21.101 
如果你想獲取更多信息 
有一個會議 

00:23:21.168 --> 00:23:22.903 
叫做“深入瞭解WatchKit 
第二部分” 

00:23:22.970 --> 00:23:26.173 
你可以瞭解新選取器對象

00:23:29.042 --> 00:23:31.912 
這是WatchKit中
現有的功能

00:23:31.979 --> 00:23:34.448 
我知道很多人
對新東西感興趣 

00:23:34.515 --> 00:23:37.251 
也就是我們在WatchOS
2中引入的動畫API

00:23:38.218 --> 00:23:39.853 
動畫API

00:23:40.888 --> 00:23:44.758 
允許你把界面對象上的
特定的屬性製作成動畫 

00:23:45.259 --> 00:23:46.994 
包括不透明度 

00:23:48.629 --> 00:23:49.930 
寬度 
高度 

00:23:51.832 --> 00:23:54.201 
對齊 
包括從左到右 

00:23:54.268 --> 00:23:55.636 
從上到下或者居中

00:23:57.070 --> 00:23:59.173 
組上的背景顏色 

00:24:00.040 --> 00:24:02.609 
圖像上的顏色 色彩 

00:24:02.676 --> 00:24:04.611 
就像我們幻燈片

00:24:04.678 --> 00:24:06.547 
和組插入物上面的這樣

00:24:07.848 --> 00:24:09.316 
你可以把很多東西
製作成動畫

00:24:11.118 --> 00:24:14.955 
如果你用過的話 如果你在
iOS上編過程的話 

00:24:15.622 --> 00:24:17.558 
API可能會看起來很熟悉

00:24:17.958 --> 00:24:20.460 
需要過一段時間 
一個動畫塊 

00:24:20.928 --> 00:24:22.596 
你在動畫塊內進行的全部更新

00:24:22.663 --> 00:24:25.866 
就都會在指定時間內 
繪製成動畫

00:24:27.668 --> 00:24:30.671 
那我們就來插上一腳 
談一些例子 

00:24:31.004 --> 00:24:32.606 
希望能向你演示一些技巧 
希望能向你演示

00:24:32.673 --> 00:24:36.276 
如何把它整合到
你的WatchKit app上

00:24:38.579 --> 00:24:42.316 
我們首先回到app的詳細視圖 
看第一個例子 

00:24:42.649 --> 00:24:44.651 
點擊
份數畫面

00:24:45.419 --> 00:24:48.355 
我們要添加一個動畫 
讓按鈴四周的圓圈

00:24:48.689 --> 00:24:50.657 
依次
淡出

00:24:51.158 --> 00:24:51.992 
就像這樣

00:24:55.596 --> 00:24:56.430 
在代碼中 

00:24:56.964 --> 00:25:00.234 
我們要依次
通過外環四周的組

00:25:00.300 --> 00:25:01.502 
因此每個圈都是一個組

00:25:03.103 --> 00:25:06.773 
我們要創建一個調度塊 
對我們的動畫進行安排

00:25:07.441 --> 00:25:08.408 
然後在這個塊內 

00:25:08.876 --> 00:25:11.178 
我們會把組的端製作成動畫 

00:25:11.879 --> 00:25:13.380 
它就會淡入

00:25:13.747 --> 00:25:17.317 
非常簡單 
但是效果很棒

00:25:18.185 --> 00:25:21.088 
我還想指出的是 
我們引入了兩個新API

00:25:21.588 --> 00:25:24.324 
顯示 消失 
它們都位於

00:25:24.391 --> 00:25:25.959 
WK界面控制器上

00:25:26.426 --> 00:25:27.561 
這些對你的動畫很重要 

00:25:27.861 --> 00:25:29.129 
我再談一談 

00:25:29.196 --> 00:25:31.498 
我想指出 

00:25:31.565 --> 00:25:32.999 
它以後
會生效

00:25:36.537 --> 00:25:38.839 
因此在這個界面 

00:25:38.906 --> 00:25:42.009 
如果你在某個視圖出現之前

00:25:42.075 --> 00:25:43.777 
就開始播放動畫的話 
使用“不要顯示”

00:25:43.977 --> 00:25:45.479 
就可以激活

00:25:46.213 --> 00:25:48.782 
我知道很多人
都在使用“立即激活”

00:25:48.849 --> 00:25:50.050 
來開始動畫 

00:25:50.117 --> 00:25:52.553 
因此可能在顯示在屏幕之前 

00:25:52.686 --> 00:25:54.488 
就調用了“立即激活” 

00:25:54.555 --> 00:25:56.790 
所以說它不是
開始你的動畫的好地方

00:25:57.057 --> 00:25:58.492 
所以使用“顯示”
這個方式吧

00:26:00.627 --> 00:26:02.863 
同樣 你可以用定時器

00:26:02.930 --> 00:26:04.298 
或者GCD把你動畫錯開

00:26:04.631 --> 00:26:06.567 
當你這樣做的時候 

00:26:06.767 --> 00:26:10.037 
要記住只有激活後你才能更新
某個控制器 

00:26:10.103 --> 00:26:12.739 
如果你在控制器釋放之後
再繪製動畫 

00:26:13.373 --> 00:26:15.242 
這些更新就不會真的生效；

00:26:15.309 --> 00:26:16.143 
所以要記住這點 

00:26:16.210 --> 00:26:18.245 
務必使你的控制器
處於激活狀態

00:26:19.580 --> 00:26:23.116 
此外還要對你的動畫
總時長進行記錄

00:26:23.483 --> 00:26:25.219 
如果你加入了
大量的動畫 

00:26:25.285 --> 00:26:27.154 
動畫時長就會很快增加 

00:26:27.855 --> 00:26:30.424 
很有可能用戶和你的app
進行交互的時間

00:26:30.490 --> 00:26:33.894 
就很短 
如果你有一個冗長的動畫 

00:26:34.027 --> 00:26:37.998 
那麼它就會拖延你的app
的時長

00:26:38.065 --> 00:26:39.132 
所以要注意這一點

00:26:41.168 --> 00:26:44.304 
爲了方便起見 
你可以在故事板中

00:26:44.371 --> 00:26:45.339 
設置你的初始值

00:26:45.606 --> 00:26:47.374 
舉例來說 
在這個界面 

00:26:47.441 --> 00:26:51.345 
所有的這些圈初始
都是隱藏的 

00:26:51.411 --> 00:26:53.313 
一開始初始值都是零 

00:26:53.380 --> 00:26:55.015 
我們就可以把它們寫到
故事板中 

00:26:55.282 --> 00:26:56.817 
這樣運行時
就不用擔心了

00:26:58.886 --> 00:27:00.988 
我們再來看我們的
第二個例子 

00:27:01.221 --> 00:27:03.690 
這是我們的原料畫面

00:27:04.525 --> 00:27:06.960 
如果我們能讓標籤飛入 
那就太棒了

00:27:07.628 --> 00:27:08.762 
就像你看到的這樣

00:27:10.430 --> 00:27:12.533 
我們
到藍盒外面

00:27:15.169 --> 00:27:16.403 
我們也有了表格行

00:27:17.638 --> 00:27:18.906 
就像我們之前展示的那樣 

00:27:18.972 --> 00:27:21.708 
左邊的背景是我們的數字 
是個組 

00:27:22.409 --> 00:27:23.644 
右邊是我們的
標籤

00:27:24.378 --> 00:27:26.547 
我們現在要在兩者之間
增加一個組 

00:27:26.613 --> 00:27:28.115 
我們稱之爲
“空格組”

00:27:28.649 --> 00:27:31.218 
組內可以佈置內容 
功能很強大 

00:27:31.285 --> 00:27:32.386 
但是 

00:27:32.452 --> 00:27:34.721 
組也能影響到
四周的內容

00:27:35.289 --> 00:27:36.456 
這是因爲內容 

00:27:36.757 --> 00:27:38.692 
這是因爲我們
在WatchKit內的佈局

00:27:38.759 --> 00:27:39.826 
是基於流的 

00:27:40.394 --> 00:27:43.063 
流內的組會影響到
其他組

00:27:43.630 --> 00:27:45.165 
舉例來說 這裏 

00:27:45.432 --> 00:27:47.301 
單元的初始狀態是：

00:27:47.367 --> 00:27:50.270 
“空格組”爲全寬 
它實際所做的 

00:27:50.337 --> 00:27:53.807 
就是把標籤推到屏幕的
邊緣 

00:27:53.874 --> 00:27:56.910 
因爲你就可以
在內部用了 

00:27:56.977 --> 00:27:58.478 
在你的app內部 
水平流 

00:27:58.779 --> 00:28:00.480 
縱向流都會在某種程度上
影響

00:28:00.547 --> 00:28:01.715 
佈置的事情

00:28:02.549 --> 00:28:03.851 
當我們繪製動畫時 

00:28:03.917 --> 00:28:06.587 
我們所做的 就是更新我們的
“空格組”的寬度 

00:28:06.653 --> 00:28:08.488 
那個標籤此時就會進來 

00:28:08.722 --> 00:28:10.791 
因爲此時我們會重新計算

00:28:11.258 --> 00:28:12.993 
流是如何在界面
佈置的

00:28:14.795 --> 00:28:16.196 
因此在代碼中

00:28:16.263 --> 00:28:19.099 
我們一次通過了
我們全部表格行 

00:28:20.334 --> 00:28:23.003 
我們讓數字背景
和標籤都淡入了 

00:28:23.370 --> 00:28:25.239 
我們還設置了“空格行”的
寬度 

00:28:25.606 --> 00:28:26.807 
我們用一個單一的動畫塊 

00:28:26.874 --> 00:28:28.242 
把這些都
包在了裏面

00:28:28.709 --> 00:28:29.676 
如果可以的話 

00:28:29.743 --> 00:28:31.178 
你可以通過用
一個單一的動畫塊 

00:28:31.245 --> 00:28:32.646 
把你全部的動畫包在裏面 

00:28:32.713 --> 00:28:33.680 
這樣來提高性能 

00:28:34.014 --> 00:28:35.849 
但是 就像我剛說的 
剛展示的 

00:28:35.916 --> 00:28:37.918 
如果是連續的動畫 
那沒問題 

00:28:37.985 --> 00:28:40.854 
但是要記住 
動畫太多

00:28:40.921 --> 00:28:42.623 
會對性能產生
立竿見影的影響

00:28:46.293 --> 00:28:48.595 
因此不可見的“空格組”
功能確實很強大 

00:28:48.829 --> 00:28:51.832 
你可以跳轉它們的寬度 
高度 對齊 

00:28:51.899 --> 00:28:52.833 
改變你的佈局

00:28:53.467 --> 00:28:57.237 
還有一件事要指出的是 
當你製作動畫時 我們實際上

00:28:57.304 --> 00:29:00.774 
會轉送出你的整個界面 
我就是這樣設置

00:29:00.841 --> 00:29:04.044 
那個組的寬度的 標籤頁實際
上改變了它的位置 

00:29:04.511 --> 00:29:08.248 
即使我自己根本
沒有改

00:29:12.252 --> 00:29:13.787 
現在我們繼續來看
第三個例子 

00:29:13.854 --> 00:29:16.023 
這是
最複雜的一個例子

00:29:16.490 --> 00:29:19.359 
這個畫面這裏 
你可以添加一項註釋 

00:29:19.793 --> 00:29:23.130 
如果你點擊添加註釋 
我們會把文本的默認值

00:29:23.197 --> 00:29:24.531 
輸入系統

00:29:25.365 --> 00:29:28.836 
如果你選擇一個選項 
我們會插入一個對話框 

00:29:29.369 --> 00:29:31.405 
或者 我們會繪製
一個對話框的動畫

00:29:31.572 --> 00:29:34.141 
我們已經有了一個
非常複雜的動畫 

00:29:34.575 --> 00:29:36.944 
但是我們要
更進一步

00:29:37.644 --> 00:29:39.246 
如果你點擊“確認” 

00:29:40.948 --> 00:29:42.015 
我們會繪製一個

00:29:42.082 --> 00:29:43.283 
確認框

00:29:43.617 --> 00:29:45.786 
這些都是在一個界面內 
都是用了

00:29:46.019 --> 00:29:47.821 
新的
動畫API

00:29:48.856 --> 00:29:51.024 
我們把這個
分成兩個部分

00:29:51.091 --> 00:29:53.327 
我們先來談談
這個對話框

00:29:56.430 --> 00:29:57.631 
返回了一個線框

00:29:58.832 --> 00:30:00.667 
在我們的界面內 
我們有一個組 

00:30:01.134 --> 00:30:02.903 
我要調用的 
就是那個文本容器

00:30:04.438 --> 00:30:06.840 
在容器內 
頂部有我們的文本泡 

00:30:06.907 --> 00:30:07.941 
文本泡內有我們的標籤

00:30:08.976 --> 00:30:12.045 
下面 
有我們的確認按鈕

00:30:13.647 --> 00:30:14.815 
當我們繪製動畫時 

00:30:14.882 --> 00:30:17.885 
我們的初始狀態會把文本

00:30:18.285 --> 00:30:20.153 
底部右對齊 

00:30:20.220 --> 00:30:22.155 
就像你在這裏能看到的這樣 

00:30:22.222 --> 00:30:23.390 
按鈕淡出了

00:30:24.424 --> 00:30:25.692 
當我們繪製動畫時 

00:30:25.759 --> 00:30:27.661 
我們會更新文本泡的寬度 

00:30:27.728 --> 00:30:29.930 
高度 
並且讓它和按鈕

00:30:30.364 --> 00:30:33.200 
淡入 
就像你在這裏看到的一樣

00:30:36.270 --> 00:30:37.538 
我們就可以得到這種特效 

00:30:37.604 --> 00:30:40.541 
就是這麼幾行代碼 
我們就可以得到這種特效

00:30:41.108 --> 00:30:43.410 
就像我說過的 
我們在文本泡上更新了

00:30:43.577 --> 00:30:45.946 
寬度 高度以及開端

00:30:46.713 --> 00:30:48.849 
因爲我們想適應那個標籤的
全文 

00:30:48.916 --> 00:30:50.417 
還有自動調整
高度

00:30:50.951 --> 00:30:54.488 
無論註釋有多長 
都會適應

00:30:55.889 --> 00:30:59.059 
我們會通過更新開端 
讓那個按鈕淡入 

00:31:00.460 --> 00:31:02.462 
我們也會更新文本容器的
高度 

00:31:02.529 --> 00:31:03.564 
以便適應所有的事情

00:31:04.865 --> 00:31:07.234 
並且用一個動畫塊
把所有一切包裹進來

00:31:09.102 --> 00:31:11.338 
這就是動畫的
第一部分

00:31:12.472 --> 00:31:15.542 
第二部分是這裏 
我們展示了一個確認畫面

00:31:19.146 --> 00:31:21.081 
再回到我們的藍框

00:31:22.950 --> 00:31:25.819 
這裏我們有文本容器 
爲了清晰起見 

00:31:25.886 --> 00:31:27.221 
我不會在那裏包括
對象

00:31:28.021 --> 00:31:30.591 
但是還是在下面的界面中 

00:31:30.657 --> 00:31:31.692 
我們有另外一個組 

00:31:31.758 --> 00:31:34.094 
我會稱之爲
“確認容器”

00:31:34.628 --> 00:31:36.964 
我們在此所做的 
就是把界面的不同部分

00:31:37.030 --> 00:31:39.733 
包裹進
它們各自的組裏 

00:31:40.000 --> 00:31:42.803 
這樣 
我們就可以...

00:31:42.870 --> 00:31:45.706 
我們就可以隱藏 展開它們 

00:31:46.006 --> 00:31:47.841 
展示界面的
不同部分

00:31:48.342 --> 00:31:51.678 
舉例來說 
這是界面的初始狀態

00:31:52.112 --> 00:31:53.981 
因此文本容器
就是全高度 

00:31:54.515 --> 00:31:57.818 
而確認容器實際上
高度爲零 

00:31:58.118 --> 00:32:00.587 
因此在屏幕上隱藏了起來

00:32:01.088 --> 00:32:04.124 
因爲我們設置寬度 
設置高度API的新行爲 

00:32:04.191 --> 00:32:06.793 
你實際上就可以實現

00:32:06.860 --> 00:32:07.961 
比零
更高的寬度

00:32:09.062 --> 00:32:10.330 
當我們繪製動畫時 

00:32:10.397 --> 00:32:13.100 
我們所做的就是顛倒
這些的高度

00:32:13.734 --> 00:32:16.703 
因此文本容器
現在高度爲零 

00:32:17.237 --> 00:32:19.673 
而現在確認容器是

00:32:19.740 --> 00:32:22.042 
屏幕的全高度

00:32:23.877 --> 00:32:25.846 
在代碼中 正如我所說的 

00:32:25.913 --> 00:32:28.382 
我們更新了文本容器的
高度 

00:32:29.650 --> 00:32:31.385 
更新了確認容器的高度 

00:32:31.451 --> 00:32:32.553 
並且把它包裹進了

00:32:32.619 --> 00:32:34.021 
一個動畫塊

00:32:34.988 --> 00:32:37.758 
這樣 
你就實現了界面的一部分

00:32:37.824 --> 00:32:40.794 
縮小屏幕 另一部分放大
屏幕的特效

00:32:43.664 --> 00:32:48.335 
因此我想提一提動畫上的
幾個註釋 算是某種小結 

00:32:48.402 --> 00:32:50.504 
概括 
指出你可能會

00:32:50.571 --> 00:32:52.573 
遇到的一些
陷阱

00:32:54.308 --> 00:32:56.643 
任何影響改變你的界面元素的
更新 

00:32:56.710 --> 00:32:59.112 
實際上 
實際上都會

00:32:59.513 --> 00:33:00.814 
繪製佈局動畫

00:33:01.348 --> 00:33:04.218 
比如說 
如果你更新某個標籤的文本 

00:33:04.952 --> 00:33:06.587 
自動調整 

00:33:06.653 --> 00:33:08.922 
這樣做的時候 

00:33:08.989 --> 00:33:11.892 
文本的寬度
或者高度就變了 

00:33:11.959 --> 00:33:14.695 
它實際上會繪製那個標籤的
新的幀的動畫

00:33:15.362 --> 00:33:18.465 
然而 
你不會繪製文本的應用

00:33:18.532 --> 00:33:20.701 
的動畫 
只是調整那個文本的尺寸

00:33:22.836 --> 00:33:25.572 
如果你立刻播放大量的
動畫 

00:33:25.873 --> 00:33:30.377 
或者你的界面內有類型複雜的
佈局 

00:33:30.644 --> 00:33:32.946 
那會對性能產生影響 
所以千萬要記住這點 

00:33:33.013 --> 00:33:36.683 
一定要在硬件上
進行測試

00:33:37.084 --> 00:33:40.287 
因此模擬器是製作你的
動畫 

00:33:40.554 --> 00:33:42.055 
並且確保一切正常的
好方法 

00:33:42.322 --> 00:33:43.624 
但是對於實際性能來說 

00:33:43.690 --> 00:33:45.392 
要看看實際情況
如何 

00:33:45.692 --> 00:33:46.793 
一定要在硬件上進行測試

00:33:46.860 --> 00:33:48.195 
這點非常重要

00:33:49.696 --> 00:33:51.565 
還有一點要指出 

00:33:51.632 --> 00:33:52.866 
動畫是在你的
應用程序內

00:33:52.933 --> 00:33:54.034 
生效的

00:33:54.501 --> 00:33:57.838 
但是 如果你在某個閃現 
某個通知內調用它 

00:33:58.305 --> 00:34:00.073 
這些更新仍然
會生效 

00:34:00.140 --> 00:34:01.175 
但是不會繪製成動畫

00:34:01.909 --> 00:34:04.077 
因此 
在某個閃現 

00:34:04.144 --> 00:34:05.512 
某個通知內使用它
毫無意義

00:34:07.848 --> 00:34:08.849 
還有幾點

00:34:10.050 --> 00:34:11.185 
請謹慎使用動畫

00:34:11.451 --> 00:34:12.886 
這是因爲動畫

00:34:13.020 --> 00:34:15.155 
絕不應該成爲你的界面的
焦點

00:34:15.722 --> 00:34:19.960 
如果你的界面存在的理由 
就是因爲動畫 

00:34:20.027 --> 00:34:21.895 
那麼也許你該
考慮下了

00:34:22.929 --> 00:34:25.699 
另外 再強調一次 
總時長不要太長

00:34:25.966 --> 00:34:30.603 
你的app內的時間
可能是以秒爲單位 

00:34:30.670 --> 00:34:32.706 
所以 
不要延長動畫 

00:34:32.773 --> 00:34:33.739 
不要超出必要的長度

00:34:34.107 --> 00:34:35.542 
有一個會議與此相關 
很不錯 

00:34:35.609 --> 00:34:38.110 
叫做“結合動畫設計” 
我強烈推薦這個會議

00:34:39.279 --> 00:34:41.748 
小結一下 
對本次談話做個總結 

00:34:41.815 --> 00:34:43.417 
WatchKit中的佈局

00:34:43.483 --> 00:34:45.284 
與UIKit和
AppKitt是不同的 

00:34:45.351 --> 00:34:46.853 
UIKit和AppKitt在設計時
就指明瞭 

00:34:48.088 --> 00:34:49.857 
但是運行時非常靈活

00:34:49.922 --> 00:34:53.493 
我們有很多API 
我們又引入了許多新的API 

00:34:54.161 --> 00:34:57.931 
它們可以讓你一次更新
你的UI

00:34:59.132 --> 00:35:00.367 
再說一次 它們是基於流 

00:35:00.667 --> 00:35:04.304 
因此你指定的是
你的對象的

00:35:04.538 --> 00:35:07.841 
佈局探試程序 但是完成佈局
的是WatchKit本身

00:35:08.909 --> 00:35:10.244 
組的功能真的很強大 

00:35:10.644 --> 00:35:13.981 
如你所見 
你可以構造非常複雜的界面 

00:35:14.481 --> 00:35:17.718 
你之前可能以爲在Watch
Kit中是不可能的

00:35:19.052 --> 00:35:21.989 
現在 
在你的app中添加動畫吧

00:35:22.756 --> 00:35:26.059 
動畫能在你的app內增加
生機 反饋 

00:35:26.126 --> 00:35:27.661 
非常棒 
我相信你們都瞭解這一點

00:35:28.328 --> 00:35:30.631 
我們在WatchKit中已經
有很多方式 讓你可以

00:35:32.266 --> 00:35:35.068 
引入這些動畫 
在Watch OS 2中 

00:35:35.135 --> 00:35:37.304 
功能就
更加強大了

00:35:38.772 --> 00:35:41.475 
如果你想獲取更多信息 
這裏有很多資料

00:35:41.542 --> 00:35:42.643 
和技術支持

00:35:42.709 --> 00:35:44.411 
我們也會在
developer.Apple.com上

00:35:44.478 --> 00:35:47.247 
把示例代碼當成一個項目
發佈出去

00:35:47.981 --> 00:35:51.385 
如果是普通的問題 
我們有福音傳道者 

00:35:51.451 --> 00:35:52.486 
傑克·拜倫斯

00:35:52.953 --> 00:35:55.289 
因此如果你有問題 
就問他吧

00:35:56.590 --> 00:35:59.626 
本週 
有很多相關的內容 

00:35:59.960 --> 00:36:01.261 
有些相關的會議正在進行

00:36:01.895 --> 00:36:05.232 
我想要指出幾個 
明天上午的“要訣和技巧” 

00:36:05.532 --> 00:36:08.735 
明天下午的
“設計要訣和技巧”

00:36:09.136 --> 00:36:10.404 
這兩個都很不錯

00:36:11.305 --> 00:36:12.172 
謝謝

00:36:14.041 --> 00:36:16.143 
祝你們在此過得愉快
謝謝