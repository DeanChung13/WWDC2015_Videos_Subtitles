Xcode中的持續集成和代碼覆蓋
早上好
歡迎參加“Xcode中的持續集成和代碼覆蓋”
我的名字是馬特·莫里亞蒂我是Xcode團隊的一名工程師
今天 能在這裏給大家講講我們在Xcode中推出的一些工具
我感到激動萬分這些工具可以幫助你們
從測試中受益更多我們也希望它們可以激勵你寫更多的測試
今天 我們先來講講
Xcode Server
Xcode Server是我們捆綁到Xcode上的一項
持續集成產品
然後我們再來講講XcodeServer
和Xcode 7中有什麼新料
並且重點關注下我們今年引入的新的代碼覆蓋特性
會議的下半程我們會來講一些
Xcode Server更多的高級特性
這些特性可以允許你把它集成到
你的團隊的獨特的工作流程上
當然了 在會議整個過程中
我們都會通過演示向你們展示這些東西是如何實現的
讓我們開始吧
Xcode Server是我們通過Xcode 5
引入Xcode的一項特性
它是關於對一個叫做“持續集成”的進程提供支持的
持續集成的目的 是爲了提高你們團隊的協作效率
讓你們得以打造更好的軟件
那麼這意味着什麼？
這意味着定期把你的全部代碼取下來
然後進行構建、測試讓構建錯誤、測試失敗等問題
儘快浮出水面
這樣你就可以立即修復它們
你們實現持續集成的方式有很多
但是我們認爲Xcode Server更加適合像你們一樣的
app開發者原因有兩個
第一個原因設置它很容易
因爲與OS X Server進行了集成
如果你已經在你的Mac上安裝了OS X Server和Xcode
那麼你離讓一個持續集成服務器定期測試你的項目
就很近了
第二個原因XcodeServer和Xcode有深度集成
我們深諳如何構建Xcode項目
深諳如何兼容設備等等此類的事情
這樣我們就可以儘量少地問你們問題
就可以設置完畢定期檢查你的代碼
在我們展開講之前我想先講幾個我們在談起
Xcode Server時要提到的概念
第一個概念你可能已經熟悉了
哪怕你之前從沒有用過Xcode Server
這個概念就是Scheme
每次你在Xcode中運行你的項目或者測試時
你運行的就是一個Scheme
一般來說會自動爲你創建Scheme
不過你也可以創建你自己的定製Scheme
它們基本上就構成了構建你的項目的“食譜”
告訴你構建的目標是什麼運行的測試包是什麼
傳遞給你執行的自變量是什麼 諸如此類的事情
當需要設置Bot時對Xcode Server來說
Scheme就非常重要了
Bot是我們傾向於把它當成你的團隊的一員
它其實就是採取某種特定的方案構建好
然後根據你定義的日程表運行
並完全遵照你的說明執行某些操作
然後把結果彙報給你
每當我們按照日程表運行你的項目時
我們就稱之爲集成
它就好比是把你的團隊每個成員所做的變更集成到一起
然後看看結果如何
既然我們都已經達成共識了
那麼就讓我們來談談Xcode 7
和Xcode Server中有什麼新料
如果在Xcode 6之前你就用過Xcode Server的話
你就知道每次你對一個Bot進行編輯時
我們會讓你重新走一遍生成Bot的整個工作流程
不過提前填寫好了很多值
如果你只是想做一些簡單的變更比如添加一個觸發器
修改你的方案諸如此類的事情
那麼這就有點單調乏味了
現在我們有了這個選項卡式的界面 
你就可以進去完成你想要的更改然後退出
看來大家都是選項卡式工作流程的粉絲
我們還對Xcode 7中的源代碼管理做了多項改進
而我們之前則是會試圖自動處理
你的源代碼管理並且向你隱藏了細節不過我們現在讓你看到了
更多 這樣你就可以清晰地看到你的Bot將要校驗的儲存庫是哪個
並且你還可以選擇不要校驗某些儲存庫
對於你要校驗的儲存庫來說現在你可以看到並且選擇
你要校驗的分支是哪個而不是...
謝謝
而不是寄希望於Xcode希望它自行正確搞明白
我們還改進了源代碼管理的安全性
具體來說指的就是SSH指紋對比
以及自簽名證書
這兩項都不會自動成爲安全的輸送方式
它們要求你信任你連接的服務器
這樣如果服務器之後發生了變更
你就知道它們有了新的指紋它們可能在冒充你以爲你正在連接的服務器
之前Xcode會自動信任這些服務器
而不做任何驗證
現在我們要求你明確信任這些中的哪些服務器
然後我們會把指紋儲存起來這樣如果之後它發生了變更
我們就不會從錯誤的服務器上進行校驗
我們同樣也更新了你在你的集成中看到的多個報告
所以說測試報告也整理過了更緊湊了
現在在你的測試中看出斷言故障就更加容易了
日誌視圖的性能提升也得到了大幅提升
之前我們試圖向你展示你的全部日誌的堆疊視圖
但是當你視圖展開某項日誌時
這就出現了明顯的性能代償
現在我們一次只向你展示一條日誌 
你可以通過左上角的彈出按鈕來選擇日誌
現在查看大的日誌文件也非常快了
提到持續集成讓Xcode Server脫穎而出的一件事情
是它知道Xcode項目會產生
什麼類型的問題它還知道
構建錯誤是什麼樣的知道測試失敗是什麼樣的
它不會僅僅向你顯示一些原始的純文本日誌文件
讓你自己仔細查看然後找出發生了什麼問題
說到此類問題我們做了很多巧妙的事情
就是爲了讓這些問題浮出水面 對你有所裨益
當你運行集成時...
Xcode 6中同樣也是如此...
我們會向你展示這個漂亮的報告告訴你在你的構建中出了什麼問題
因爲我們會把這次集成和之前的集成進行對比
我們就能讓新問題浮現出來這樣我們就可以精確定位出
是哪次集成出了問題是哪次提交把某個特定的問題帶進來了
這樣的話找到原因查出問題所在修復問題就非常容易了
圍繞“問題” 我們在Xcode 7中還添加了一些新東西
假如說你現在看到發生了一個問題
你要麼可以看到是不是你的錯 這樣你好修復
它要麼你可以看到問題的原因
比如我就知道那裏錯了我就可以
進去快速修復它把這個搞定
然後你可以認領問題這樣你的名字就放上去了
這樣當你的團隊中的每個人查看報告時
他們就可以看到這個這樣他們就知道自己不用
操心這個事了因爲你已經在處理了
如果問題是間歇性的或者是你知道
已經修復了的問題你就可以
把它們“消音”一段時間
它們就會從報告中消失
這樣的話你可以集中精神關注那些
確實需要你關注的事而不用和你知道
已經解決了的事情攪和到一起
不過關於Xcode Server最棒的一點是我們能在多大程度上
和Xcode引入的其它各項特性進行交互
因爲我們在Xcode 7上有一些很棒的新特性
我們也專門拿出時間把這些特性集成到了
Xcode Server
我想看看其中的幾項特性
用戶界面測試是Xcode 7上的新特性
我們專門對此進行了處理
確保了它能完美兼容Xcode Server
當你運行Mac測試或者iOS模擬器測試時
我們會在你的服務器後臺
創建一個全屏會話
你的全部測試都是在那裏
運行的這就意味着你無需擔心啓動
你的應用程序時 是否處於適用於Xcode 2的正確環境中
我們會替你搞定它
如果你用的是真實的iOS設備
那麼你就可以看到UI測試在設備上
逐句通過應用程序
用戶界面測試是以一個高水平的標準
對你的應用程序進行測試的絕佳方式
測試的方式和你的用戶看到的一致
並且會對所有的不同層在一起的相互交互進行測試
如果你同時還有一個服務器在各種設備上運行這些測試那就更棒了
對於一項方案來說
“點播資源”是iOS 9上的一項新特性
通過避免在你的包中存儲太多的資源
它就可以讓你的apps包更小
如果你的app已經上架了App Store
App Store就會替你充當主機
這樣 當需要的時候你的應用程序就可以下載
這些資源而當你不用的時候就可以從磁盤上刪除
那麼當你在發佈之前需要做內部產品質量測試
需要測試你的應用程序的構建
並且你的app已經上架App Store了
對於資源來說那時候會發生什麼？
那時候 App Store就不會再爲這些資源充當主機了
你做的變更太快App Store沒法再充當主機了
但是如果你是從Xcode Server上
獲取的內部產品質量構建
並且你是讓你的集成爲你生成了你安裝到
你的設備上的IPAS那麼這就會自動爲你進行處理
你不需要勾選選項框你什麼也不用做Xcode Server
會自行知道在你的應用程序內有了點播資源
它就會在自己的服務器上爲這些資源充當主機
如何找到這些資源
最後 我還想再講講Xcode 7上的另外一項
新的特性這項特性和Xcode Server
以及持續集成都配合的天衣無縫
這就是“代碼覆蓋”
“代碼覆蓋”就是一種對你的 測試的值進行度量的工具具體來說
當我們運行測試時我們想知道實際運行的
代碼是什麼
因爲你很容易就會出現你的應用程序上有一大堆
測試套件你很難進行變更
你不注意的話就不會出現迴歸這種情況
但是你怎麼知道你到底需要多少項測試纔算足夠？
假如說我有一個應用程序並且有二百項單元測試
但是這些測試卻僅僅覆蓋了我的應用程序的20%？
要是這樣的話它們可不像我想的那樣有用
因此代碼覆蓋爲的就是把這些信息呈現給你
這樣你就可以做出明智的決策
它可以讓你運行你的測試並且正確度量運行的代碼
是哪個更重要的是度量出完全未經測試的代碼是哪個
這個代碼就是當你繼續添加新的特性時
可能出現迴歸的代碼而你之前是不會從你的測試中知道的
因此我們認爲對於那些真的在意測試的團隊來說
代碼覆蓋真的很重要
這也是我們把代碼覆蓋集成到Xcode的原因
像其它很棒的Xcode特性一樣
代碼覆蓋在構建時就和LLVM有着緊密集成
因此當你在你的方案中收集啓用的代碼覆蓋時
編譯器就會對你的代碼進行指導
我們就可以計算每個表達的執行頻率
然後我們就會在IDE中把這個信息呈現給你
我們現在有兩種方式可以實現這一點
第一種是當你進到你的測試的報告導航器中
你之前在Xcode 6中就可以這麼做 不過現在在
Xcode 7中有了一個貼有“覆蓋”標籤的新標籤
如果你查看這個報告你就可以根據目標 文件
以及方式進行查看這樣就可以知道你的應用程序
的各個不同部分的覆蓋情況
這樣你就可以從一個較高的層面來查看你的應用程序
然後向下挖掘下 看看值得你注意的部分是哪個
如果我發現某種方法的覆蓋率是75%
這也算是個好消息
但是我並沒有獲得怎樣才能進行修復的信息
我不知道我的代碼的哪些分支測試到了哪些分支沒有測試到
當你懸停在這些方法或者文件上時
我就可以點擊彈出的箭頭這些就會顯示出源代碼編輯器
我們就可以在那裏通過內聯註釋 高亮顯示你的
應用程序中未被覆蓋的部分
對於那些已被覆蓋的部分來說 我們則會告訴你
它們在測試中被執行的次數
代碼覆蓋在Xcode IDE中本身就已經很棒了
不過我想當你把它放到XcodeServer上時 它會更棒
你在那裏有一個Bot在各種設備上
運行你的項目
集成和Bot的一個特別之處在於
你可以設置它們在一系列的設備上運行
而不是一次僅能運行在一臺設備上
就像你在Xcode中所做的那樣
當你這麼做的時候我們會集中向你展示你全部
設備的覆蓋數據並且我們以橙色高亮顯示
在你的設備上有着不同的覆蓋的方法 目標 或者文件
這樣你就可以看看這些不一樣的地方
看看它是否屬於bug還是屬於某種預期行爲
你在不同的設備上有不同的代碼覆蓋
這相當普遍尤其是在用戶界面代碼中
你在不同的設備上可能有不同的代碼
比如一臺iPad和一部iPhone就不同
Xcode Server還可以爲你提供的一件事情
是一份存儲追蹤你的項目的存在期的檔案
這樣當你查看某個集成的代碼覆蓋時
我們就可以高亮顯示變更發生的時間 
這些變更在代碼覆蓋中的方法以及文件
這樣你就可以精確定位到某次具體的提交集合
檔案還使得我們可以顯示趨勢 之前在Xcode 6中
我們有構建歷史圖表以及你的Bot的測試歷史圖表
這樣當你添加更多的測試的時候你就可以看到圖表發生變動
你就可以看到事情進展如何
你的Bot的穩定性如何
不過現在我們又有了一項新的代碼覆蓋圖
可以表明隨着時間的變化你的項目的整體覆蓋趨勢
這樣的話 你就可以知道舉例來說是否有所提升
這樣你就可以知道當你添加特性時
你是否需要給這些特性添加測試
或者你是否需要給之前沒有覆蓋到的特性添加測試
或者也可能出現向下的趨勢這是因爲你進展太快了
沒有對你剛加的特性進行測試
這樣 就可以幫助你做出明智的決策
決定下一步該怎麼辦決定如何分配你的開發時間
當然了 如果你在你的工作區使用大屏幕來顯示你的
Bot的整體狀況那麼在你的項目的測試數量
下面我們還會向你顯示你的整體覆蓋百分比這樣你就可以密切注視它
好的
現在我想請我的同事埃裏克上來
請他給大家演示一些Xcode以及Xcode Server上的
代碼覆蓋特性
謝謝 馬特
我要向你們演示一個我們開發的供內部使用的
應用程序我們用它來跟蹤大家互相
欠下的請喝咖啡的次數
去年你可能已經看過這個應用程序了
自那之後我們又做了一些改進
它的基本規則是如果有人替你修復了一個bug
或者你欠了別人一個人情那麼你就需要請對方喝咖啡
我們專門有一個應用程序對此進行跟蹤
和其它優秀的應用程序一樣我們也有單元測試
來確保當我們添加新的特性時
不會影響到已有的工作代碼
對這些進行測試只算成功的一半
當對應用程序進行實際的全面測試時
我不知道我能坦然面對的單元測試有多少個
我想看看覆蓋情況看看情況如何
不過也許我們沒有那麼多的測試
讓我們來看看
實際上 在我來這兒之前我已經運行過了測試
我們可以直接在設備上看看測試結果
我們只有七項測試
這可很不妙
不過這是一個小的應用程序
也許這已經足以覆蓋所有的事情了
最起碼這些測試都通過了所以開局不錯
我們來看看覆蓋情況
如果我們來看看這裏的覆蓋報告
我們就可以看到這個應用程序被分解成了兩個目標
我們有一個UI層面的應用程序即coffeeboard.app
測試覆蓋情況不太好
不過沒關係 這是一個UI應用程序我應該給它寫一些UI測試
我更關心這個基礎水平的框架
我們可以在這裏看到只有50%測試覆蓋
這可不太妙因爲如果我們努力的話就可以實現100%覆蓋
看起來真正落後的類是這個事務類
如果我們看看這個事務類
我們就可以看到這裏有一堆的類
在我們的各項單元測試中並沒有被調用到
我們創建了一些事務我們可以看到它們在
初始化程序中被調用了
但是我們並沒有實際用它們來做什麼事
我再來解釋下我們的app
它有一項很棒的特性
使用了我們的一個專屬算法
如果我欠馬特兩杯咖啡而他又欠我一杯咖啡
那麼我們就會把這兩個數字合併就成了我欠馬特一杯咖啡
因爲算法是祕密的我就想確保
這個算法經過了仔細測試因爲數學
不是我的強項我就更得確保不出問題
我們來看看它的源文件
就像馬特說過的那樣我要使用那個懸停後
顯示出來的箭頭直接進到我的源碼編輯器
這裏我們可以看到一大堆深色的高亮顯示區域
在我的源碼編輯器中使用了默認的背景色的
代碼在這裏背景色是白色
就是已經在測試中覆蓋了的代碼所以我並不太需要擔心它們
我更關心的是那些以灰色背景顯示的代碼
我可以確認它們未被覆蓋到因爲在右邊這裏
我們可以看到一堆“零”
表明這個代碼從未通過我的任何單元測試
這可不好
現在讓我們在這個單元測試中導航下 然後再來看看這個
如果我到事務測試那裏
我就可以發現我並沒有任何測試
這就出問題了
讓我們現在把它修復
我要在這裏創建一個小的空白區
寫一些Swift代碼
當然了 我假設你們都有神奇的宏命令
可以爲你們添加各種單元測試
我們就是這樣開發程序的不是嗎？
我要在設備上運行下測試
這需要一點時間
就像馬特說過的那樣當你的代碼運行時
我們會用LLVM對你的代碼進行指導 這樣我們就可以
看到到底運行的是哪個表達式
趁着它在我的設備上運行我要去看看方案
要記住既然它是LLVM的一項特性
那麼它在Xcode上也是可選項
打開它的方式是進到方案編輯器
然後選擇測試操作
然後確保“收集數據覆蓋”那個勾選框已經勾選了
這樣就可以確保我得到覆蓋數據
時間正好我的所有測試都成功了
太好了 只要我用神奇的宏命令來構建 就總會成功
如果我現在看看測試報告 我可以看到
我有更多的單元測試
但這並不是故事的全部
我們再看一次覆蓋報告
這裏 我們能看到一張更漂亮的圖片
如果我在上面放大下我們就可以看到我現在覆蓋了76%
雖然不是100%覆蓋但是已經比我們之前的情況好得多了
我要把事務類再次顯露出來
這裏我們可以看到更多的這些類現在得到了覆蓋
我現在測試的是合併代碼之前我一直很擔心這些代碼
害我損失了好多睡眠時間
這裏有件有趣的事如果我們返回源編輯器
然後看看等效方法
如果你之前注意的話當時它只是被部分覆蓋了
我們在這裏就可以看到原因所在
我們看看這個等效方法
我們並沒有把我們的事務類同某個不是事務類的類進行對比
因此這個返回的假值永遠不會在任何我們的單元測試中被調用到
當你查看不同的分支時能夠看到這個覆蓋情況
用處會很大尤其是當你的代碼中有很多
分支邏輯你知道會出現邊界情況
這樣的話你就可以確保當你寫你的單元測試時每種邊界情況都能覆蓋到
我們還可以看到這個代碼被覆蓋了多次
因此你是否知道你的代碼中有這種多個實例到底同一路徑
但是最終卻並不相同的情況就非常重要
你需要全部覆蓋它們
剛纔我做的事情都非常單獨枯燥
因此我希望有人能替我整天跑這些測試
我就不需要擔心這個不需要對它們進行對比
但是有人告訴我預算表中沒有僱傭一名
實習生來做這件事的錢
我們來看看Xcode Server
我已經爲此設置了一個Bot 跑在一個已經
有了這個提交的不同分支我們來看看這個Bot
就像剛纔馬特在幻燈片中演示的那樣
當Bot運行了二十四小時後
當它運行了一段時間後我們就可以從更高層面
對我的項目進行一次總覽
頂部這裏 我們爲你顯示了高階統計數字
你可以看到任何時間任一週、時、月、年
或者自從你的Bot運行以來的統計數字
然後我們可以看到構建歷史
在這裏 我們會爲你顯示隨着時間變化的錯誤報警以及問題分析
在這個實例中我之前有一些報警
不過我已經修復了它們
所以現在我們顯示沒有問題
對於持續集成來說接下來的兩個圖表
可能是最重要的前提是假設你的項目構建的很乾淨
沒有報警或者錯誤
那就是你的測試
在這個例子中我們可以看到我之前有幾個測試失敗
不過我還是在持續添加測試
這很棒 不過我們真正想看到的是 順利通過的測試數量
持續增長並且這些測試也讓代碼覆蓋持續增長
如果你的測試增加了但是覆蓋情況卻沒有增加
那麼你實際增加的價值就沒有你想象的大
如果我看下上次集成的覆蓋情況
這是我剛剛進行的提交你們沒有看到
但是我保證我確實提交了
我們就可以直接進到覆蓋報告
當我本地跑我的測試時這個看起來
就和我們在Xcode中看到的很像
和Xcode中的類似我們也是按照目標
按照不同的類進行了劃分
我可以展開那個事務類
看到相同的方法覆蓋層次也一模一樣
不過有兩個不同之處
在這個例子中我就可以在報告中看到
隨着時間推移發生的變化
這樣我就不用再查看兩份報告
看看覆蓋是否有所增加了
尤其是在改動不大的情況下
我們就可以讓它顯示在這裏了
現在 在CB foundation.framework
我的覆蓋率比之前提高了22%
尤其是事務類的覆蓋率也增加了48%
下面這裏我們用橙色高亮顯示了一件
有趣的事即設備的差異之處
實際上在Xcode Server報告內
我可以點擊這個複選框讓設備的差異之處立即
顯示出來
在這個例子中看起來這個詳細視圖控制器
並沒有在我的iPhone上顯示出來
這實際上並不意外
在這個例子中 我們的應用程序用的是分割視圖
除非有人點一下否則第二個視圖控制器
並不會在iPhone上顯示出來
我們的單元測試並沒有執行那個代碼
這並沒有什麼特別不尋常不過你要確保
如果出現此類事情
那麼它們不會出乎你的意料
這也就是我們爲什麼讓你們可以在Xcode Server中
很容易看到不同種類的設備的差異之處的原因所在
這樣就可以很容易找出本來應該被覆蓋的代碼
實際上沒有覆蓋到
這個就是顯示了代碼覆蓋的持續集成
那麼我要再請馬特來給大家談一些
Xcode Server更多的高級特性
謝謝 埃裏克
就像埃裏克剛剛說過的我要來給大家談一些
Xcode Server更多的高級特性
我知道你們很多開發者都對擴展Xcode Server
把它和你們團隊的工作流程的一部分集成起來很感興趣
我們知道你們並不能僅僅靠Xcode Server
這個工具就能搞定一切因此我們想給你們提供
讓Xcode Server和你們手上的所有
工具兼容完全擬合你們團隊的方式
我們有兩種方式今天我要就如何把Xcode Server
集成到你使用的所有工具上談一談
首先是觸發器
觸發器是在Xcode 6中引入的引入觸發器的目的
是爲了在你的Bot以及你的集成的生命週期內
把定製操作集成到上面
觸發器可以是郵件通知提供關於你的集成
集成運行情況出現了什麼問題
提交者是誰等等此類事情的細節
以及配置信息或者你也可以選擇某種程序語言
把觸發器寫成任意腳本
我們默認使用Bash來跑這些腳本
因此你可以向你的觸發器中輸入任何老的shell命令
照樣可以生效
但是如果你照着寫命令行工具那樣
在你的腳本頂部包含了一個hash bang
我們就會用它你也可以使用任何你喜歡的解釋器
如果你願意的話 你甚至還可以用Swift來寫你的觸發器
埃裏克稍後會給你們演示下
觸發器可以在你的集成運行之前或者之後運行
每一段代碼都能讓你的Bot
做一些很酷的事
在你的源代碼之後集成運行之前
運行的觸發器會進行檢驗
這點很重要因爲這就意味着你可以訪問
你的項目 並且在構建之前進行任何你想要的自動變更
集成之後運行的觸發器可以根據集成的結果進行控制
這樣觸發器就可以僅在集成成功時或者僅在測試失敗時運行
它們也可以訪問很多關於你的集成中發生了
什麼事情的信息
我們提供訪問這些信息的一種方式是通過
環境變量來訪問
這個僅僅是當你的腳本運行時定義的某些變量的樣本
任何值得你用的腳本語言都能讓你很容易地理解
這些環境變量讓你可以把它們用起來
我們舉個例子看看你能用它們做什麼
去年我們演示了一個觸發器每當完成一項集成的時候
觸發器就會在一個逾限聊天室內貼出一條消息
我們是使用了Bot的名稱集成的數量
以及結果來實現的
把它設置起來很容易很快
這裏我想請你們注意兩件事
因爲它們看起來比較怪看起來不協調
對於運行的集成以及相應的Bot來說
我們有一個BotID和一個集成ID
如果我們只給你這些那就有點怪了
你用一個ID做不了什麼事
這個ID是一個任意的字符串
那這個字符串有什麼好處？沒有用戶想看這個字符串
這個字符串本身做不了什麼事 但是當這個字符串
和Xcode Server API結合起來後事情就非常有趣了
Xcode ServerAPI構成了
Xcode ID和Xcode Server
通信的基礎
你也可以控制這個API爲你自己所用
用它來做一些很有趣的事
和大多數網絡服務APIs一樣這個API構造時遵循的也是
開源的 相沿成習的標準
我們在服務器和客戶端之間使用HTTPS來進行來回的安全通信
通過那個加密渠道我們使用基本認證來進行認證
我們的API遵循的是一個REST
模式像Bot和集成一樣與資源進行交互
使用標準的HTTP謂詞比如獲取、發佈、打補丁、
刪除等等 在這些資源上執行操作
當然了 我們還使用了JSON來對數據進行來回通信
JSON用起來很簡單解析起來也很簡單
它是網絡服務的通用語
大家都在用它
對你來說XcodeServer這個雄心勃勃的擴展器
是個好消息因爲這意味着無論你偏好什麼樣的編程語言 什麼樣的環境
你肯定都能找到表達HTTPS以及JSON的方法
也就意味着你能夠讓幾乎所有的東西同Xcode Server進行交談
我們來看看我們都能怎樣使用這個API
我們能問我們的服務器的最簡單的問題是什麼？
我們從這個問題開始我的服務器上有什麼Bot？
這個很簡單
我們向Bot資源發一個get請求
如果你看看那裏的URI你就可以看到我們是通過端口
20,343進行通信的 我們所有的API請求都有一個API前綴
這個並不重要但是當你們在你們自己的服務器上
嘗試這個API的時候我希望你們記住這一點
當我們發送完那個請求後我們就得到了一個JSON對象
告訴我們得到的結果的數量
給我們提供一個與結果自身相關的陣列
每個JSON對象都代表一個在我們的服務器上設置 配置的Bot
和大多數Bot一樣Bot也有一個ID它們也有一個名字
和你在創建它們時在Xcode中給的一樣
它們也有各個配置參數和你在設置Bot時
設置的配置參數一樣
好的 那麼我們還能做什麼？既然有了一個Bot
我們來看看這個Bot運行了什麼樣的集成
現在我們可以訪問那個Bot的集成子資源了
這樣做我們就可以得到一個和我們之前
看到的非常相似的結果除了現在的結果...
代表集成而不是代表Bot
但是集成也同樣屬於資源它們也有自己的ID
一件有趣的事是我們也保存了
集成上的Bot的快照這很重要
因爲隨着時間推移你的項目會發生變更
你可能採用新的Xcode特性 類似這樣的事
當你編輯的時候 機器人程序的配置也可能發生變更
因此我們存儲了一張集成的快照
這樣當集成運行時你就可以知道到底你的
Bot是怎樣配置的
我們同樣會跟蹤你的集成的構造過程的步驟
完成後你可以在那裏看到一個結果
你還可以看到你的集成發生的各種不同的問題的分類
之前的集成的變更的分類
這些都是之前我向你們展示的get請求
非常適合收集信息
不過如果你在用API的話你可能想用它做些事情
那麼我們到底可以做什麼事 來對我們的服務器產生影響呢？
我們可以手動觸發一個集成
也許我們有某種不屬於Xcode Server內置調度
程序的自動化流程我們就希望使用這個流程
來爲某些Bot觸發集成
這個實現起來也很容易我們可以使用相同的URL
把我們的HTTP方法改成一個post
這樣的話我們就從“我想列出這個Bot的集成”變成了
“我想爲這個bot創建一個新的集成 ”
如果我們發出這個請求
我們就可以得到一個代表一項集成的對象
和你們之前看到的很相似不過這個對象輕了很多
在構造過程中集成上面設置了許多項屬性
不過這個集成會僅僅處於掛起狀態
直到構造程序在隊列中撿起它開始實際運行它
在我們的API中大部分的post終點都要求你
在主體中放置一些JSON
然後說明這是這個資源的屬性
這是我正在創建的事物的屬性
在這裏集成屬於某種特例
因爲Bot在本質上已經成了那個樣子
它們已經成了每個新的集成的模板
因此它們知道創建一個新的集成它們需要知道的一切
或者說 它們最起碼知道一般情況下需要知道的一切
你也可以對你的集成有某種影響
舉例來說如果你想要一個運行時非常
乾淨、沒有殘餘物構造塊效應
的集成那麼你就可以通過向主體中
傳遞某些JSON 告訴主體這個集成在運行之前應該先進行
清理這種方式來實現
這裏有一個例子是你能用我們的API做什麼事情的例子
現在我想把埃裏克請回來請他給你們做一個
Xcode某些高級特性的演示
再次感謝 馬特
就像馬特所說的我們要通過這個項目
向你們演示一些Xcode Server的高級特性
和你們中的許多人一樣
我們這個app也是內部開發的
不過我們也想把它分發出去我想要非常容易地就能區分我的內部構建
以及我的外部構建
對此 最常見的一個策略是如果我們看看我們的“資產目錄”
我們就可以看到兩張不同的圖片
在第一個例子中我們可以看到標準app圖標
就是這個白色的咖啡杯
對於我們的內部構建來說
我們想要始終顯示一個黑色的咖啡杯圖標
把它作爲一個內部標記
這樣的話 當我們在我們的設備上運行內部構建時
我們就知道它們是內部構建
而不是我們可能上架App Store或者通過我們的正常通道
分發出去的外部構建
這就非常有用當我們發現一個bug時
我們就知道就希望只有我們能看到這個bug
還有一種方式我們可以用來區分我們的內部app
就是當我們運行內部構建時
我們通常都有一個設置包
在那個設置包中像很多應用程序一樣
我們會定義一個版本在這裏就是版本2.0
因爲我們剛剛做了一些很大的變更
2.0對於我們內部用戶來說已經足夠完美了
不過向App Store提交時我們不會提交這個版本
不過對於內部使用來說我們可能還想要一些更多的細粒度信息
再進一步具體來說 我們想讓構建有某種唯一標識符
在這個例子中我想用Xcode Server來區分
構建是來自在我的服務器上的哪個集成
我到Bot那裏看看
這個Bot和我之前用的一樣
我要編輯下這個工作流程
正如馬特說的那樣現在這是完全非線性的
因爲我對觸發器最感興趣我就直接到那裏了
讓我們開始第一...
開始我們的第一步 變更圖標
我要打開一個我已經寫好的觸發器腳本
在這個例子中這是一個簡單的批處理腳本
因爲我們要做的都是簡單的文件操作
我們要使用XES源目錄環境變量
來找出那個app圖標的路徑
然後我們要把它刪掉
然後我們要把我們的服務器版本取出來
把它移動到這個位置
那麼這就會成爲一個集成前觸發器
因爲我們想讓它在我們的源代碼檢查完畢
準備構建但是並沒有真的進行構建時運行
我要把它當成一個運行腳本觸發器來複制
現在對設置包進行設置就會有點棘手了
我可以使用一個批處理腳本來設置 但是那就需要手動
編輯大量的批處理腳本或者在一個批處理腳本中
放大量的plist代碼會很痛苦
那麼我要啓用一個Swift觸發器
在這個例子中和bash觸發器類似
我要給用戶賓·斯威夫特設置爲使用hash bang
我還沒有寫完所以請等我一下
我要獲取導入基礎 我在那裏就可以
獲得我想從Swift獲得的其它額外的權限
導入基礎後我要使用NSProcess信息
來獲得我在bash中其它腳本上使用的
那些環境變量
在這個例子中就是XCS源目錄
然後我要找到我所有的設置包
這裏 有了Swift事情就更有趣了
我可以在Swift中把plist當成一本字典載入
我並不需要親自手動對plist文件進行任何編輯
當我想往上面添加什麼東西時 這就非常有用
我只需要在swift中創建一個新的字典常量
然後把它塞進我的字典中
這裏我們把集成編號的環境變量設置成這個構建編號標題
最後在完成腳本之前
我要把它寫出到磁盤
這樣 當我們實際構建時它就可以在我的設置包中被拾取到
爲此 我只需要在下面添加另一個觸發器
好的
現在我有了兩個觸發器
現在 我就可以在這裏推送“現在開始集成”按鈕
得到一個新的集成但是我想在服務器上
用一些馬特提到的API來實現這個
我要再啓用一個我擁有的應用程序
如果我們看這裏我們就能看到一個應用程序
它已經連接到了插入我的電腦的一個串行設備上
它使用了示例代碼的某些輸入/輸出套件
那麼我們就要來讀取那個緩衝器
無論我們什麼時候在那個緩衝器上看到有內容我們就要運行這一代碼塊
我要打開一個NSURL會話我要調用能夠獲得所有的Bot的API
這只不過是本地主機
馬特之前提到過的端口API/Bot
就會成爲get方法
我要調用它使用NS JSON序列化API然後在各個Bot中
進行讀取 找出咖啡板Bot的ID
我想集成的就是那個Bot
有了那個ID 我就可以像馬特之前展示的那樣
使用Bot/我的
通用唯一標識符/集成創建一個新的URL
把那個請求切換成一個post請求
這樣就會創建一個新集成
爲此我們並不真的在意集成要做什麼事
要觸發這個
我設法繞過安全機制取得了這個有趣的小按鈕
我要把它插入我的Mac
然後我要運行這個應用程序
我們要再試試
在我運行之前確保它完全連接好了
不想操之過急 好的
很好 現在應用程序開始運行了拾取了調制解調器
我要在我的Bot這裏放大下
然後等一會兒就是用這個按鈕
創建一個新的集成
就是完全用我們的API中的這個按鈕
我不想等待集成完畢我要直接向你們展示
發生了什麼 在這裏我們可以看到集成
我可以把它安裝到我之前使用的本地設備上進行測試
安裝 如果我打開QuickTime
你們就可以看到我看到的東西...好的
這是我的設備
你可以看到我們在設備上有了內部圖標
儘管我從來沒有把它切換成本地
我們是從服務器上下載的現在我們的app
我們知道 是一個內部構建
這些就是Xcode Server上面的一些更多的高級特性
我要請馬特再講講你們可以在實驗室的什麼位置找到我們
諸如此類的事情
馬特？
好的 謝謝 埃裏克
太棒了
我最喜歡按下大大的紅色按鈕 進行集成了
這裏還有一些更多的你們可以在我們的API中使用的端點
或者最起碼說對於你們這些開發者來說是這樣的
這些還有很多的端點但是它們是被鎖定的僅限內部使用
我們想要的是真正的安全確保當集成在運行時不會和太多的東西混雜在一起
尤其與客戶端服務器之間的交互
你可能會在更多的地方而不僅僅是你的網絡上
把你的服務器公開出去
不過當我們稍後上傳了這個開發視頻以及幻燈片後
我建議你引用這個幻燈片在你們自己的服務器上嘗試這些端點
然後看看你們會得到什麼
看看對於你們團隊來說有什麼有趣的事
今天我們看了我們在Xcode上對Xcode Server所在的改進
無論是從質量方面來說
還是從採用添加到Xcode 7中的新測試特性
來說 尤其是新的代碼覆蓋特性
用來度量你的應用程序代碼在你的測試中
實際被用到的情況真是再合適不過了
當然了我們也向你們演示了擴展
Xcode Server通過觸發器以及Xcode Server API把它
更好地與你們的團隊進行集成的兩種方法
要獲取更多信息我們有一個
開發者庫有一個“持續集成指導”
當然了你也可以在開發者論壇上
貼出任何問題
有幾場會議與此相關
它們都已經結束了
有些是剛剛結束的
昨天結束的是“Xcode中的UI測試”不過我建議你們去看看視屏
今天我們也談及了UI測試但是我們並沒有向你們演示
它在Server中是如何運作的
它的自動化程度很高不過UI測試特性真的很棒
我建議你們去試試
如果關於如何使用XcodeServer你想了解更多信息
那麼去年我們在Xcode 6會議中演示瞭如何從頭開始
設置你的服務器如何在“持續集成”中
初始設置你的Bot
謝謝大家 祝你們在蘋果全球開發者大會剩餘的時間內過得愉快