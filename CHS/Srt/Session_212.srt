00:00:29.863 --> 00:00:30.964 
大家好

00:00:31.031 --> 00:00:32.698 
我的名字是布蕾特妮·佩因

00:00:32.766 --> 00:00:36.003 
接下来你们将和乔恩·德拉蒙德见面

00:00:36.336 --> 00:00:38.372 
我们是
SpringBoard团队的工程师

00:00:38.739 --> 00:00:41.542 
今天我们主要想
和你们聊聊怎么调整你的app 

00:00:41.608 --> 00:00:44.478 
以运用iPad和
iOS 9上多任务处理功能

00:00:46.513 --> 00:00:49.883 
这是多任务处理系列中的第三个讲座

00:00:50.317 --> 00:00:52.786 
很可惜前面两个已经结束了

00:00:52.853 --> 00:00:56.290 
如果你们还没来得及收看的话 
应该去看一下

00:00:58.392 --> 00:01:00.694 
那么我今天有很多话要说
乔恩也是

00:01:00.761 --> 00:01:02.663 
我们会讲得很快

00:01:02.729 --> 00:01:03.730 
请注意听

00:01:05.566 --> 00:01:07.367 
所以这就是你的app

00:01:07.568 --> 00:01:13.307 
在iOS 8中你的app 
支配了你的整台仪器

00:01:13.373 --> 00:01:16.944 
它可以尽量
使用仪器上所应许的系统资源分量

00:01:17.878 --> 00:01:21.782 
但在iOS 9中多任务处理
已经不再像往常一样了

00:01:22.482 --> 00:01:26.787 
它可以也可能
在同一个屏幕里出现更多的app

00:01:27.287 --> 00:01:30.757 
而在所有屏幕上的app
现在必须共享同一个系统资源

00:01:32.092 --> 00:01:36.730 
像是CPU GPU DISK
I/O之类的一些系统资源

00:01:36.897 --> 00:01:40.200 
随着多个程序互相争夺
CPU的容量而退化

00:01:40.901 --> 00:01:42.870 
让我们以CPU为例子

00:01:44.404 --> 00:01:46.273 
现在这个是为了我们讲座上的
新开发者们

00:01:46.340 --> 00:01:50.844 
app响应性的Holy Grail
在于能够将你的UI更新于

00:01:50.911 --> 00:01:54.014 
每秒显示帧数为60帧或者60帧率

00:01:54.781 --> 00:01:57.818 
这意味着你只需大概16毫秒

00:01:57.885 --> 00:02:00.254 
来完成你所有需要的工作
并对用户作出反应

00:02:02.990 --> 00:02:04.424 
所以如果这是你的app

00:02:04.858 --> 00:02:07.728 
比如说它在60 帧率上渲染得很好

00:02:08.027 --> 00:02:10.663 
它可以在仅仅十秒内将所有工作完成

00:02:11.665 --> 00:02:14.101 
这其中的每一帧代表一毫秒

00:02:15.536 --> 00:02:18.138 
之后 用户将
增加另一个附带的app

00:02:18.639 --> 00:02:21.975 
-这个app
同样在60帧率上更新得很好

00:02:22.042 --> 00:02:25.012 
而且它在6毫秒内完成所有的工作

00:02:25.913 --> 00:02:30.017 
两个app结合在一起
像你看到的 已经用了

00:02:30.083 --> 00:02:32.152 
我们所拥有的全部16毫秒

00:02:32.219 --> 00:02:33.921 
以能够在60帧率上渲染

00:02:35.722 --> 00:02:37.724 
此时用户打开一个PIP

00:02:38.058 --> 00:02:40.027 
而这个PiP也同样运行得很好

00:02:40.093 --> 00:02:42.629 
之后他需要八毫秒来渲染他的UI

00:02:43.297 --> 00:02:45.532 
这三个apps结合在一起

00:02:45.599 --> 00:02:50.637 
在屏幕上24毫秒 而这意味着

00:02:50.704 --> 00:02:53.540 
渲染过程其实是大概在40FIPS
而不是

00:02:53.607 --> 00:02:55.242 
我们想要的60 FIPS

00:02:55.776 --> 00:02:57.277 
用户会意识到卡顿

00:02:58.579 --> 00:03:00.614 
同样的问题也适用于GPU

00:03:01.782 --> 00:03:05.953 
但一些系统资源比如内存会产生

00:03:06.019 --> 00:03:07.788 
一个更加不好的用户体验

00:03:07.855 --> 00:03:09.723 
当很多程序一起争取它的容量时

00:03:10.591 --> 00:03:11.892 
我们再来看一下这个例子

00:03:12.492 --> 00:03:13.961 
还是这个app

00:03:14.394 --> 00:03:17.030 
这个iPad下的系统内存占用

00:03:17.097 --> 00:03:20.234 
你可以看到在最左边 
我们的系统正在使用用一些档案储存

00:03:20.734 --> 00:03:22.870 
在中间这是你的app蓝色的app

00:03:22.936 --> 00:03:23.971 
也在使用一些档案储存

00:03:24.538 --> 00:03:26.473 
然后这些剩余空间

00:03:26.840 --> 00:03:29.209 
这里有很多使用空间

00:03:29.476 --> 00:03:30.677 
你可以做各种各样的事情

00:03:32.813 --> 00:03:35.549 
之后 用户增加了一个二级app

00:03:35.749 --> 00:03:37.718 
而这个附带app也需要内存

00:03:38.352 --> 00:03:39.553 
但我们状态依然很好

00:03:39.620 --> 00:03:41.855 
我们还有一点点剩余储存空间

00:03:42.990 --> 00:03:45.158 
然后猜猜接下来会发生什么

00:03:46.627 --> 00:03:47.661 
PiP出现了

00:03:47.995 --> 00:03:49.196 
现在我们没有记忆体了

00:03:49.429 --> 00:03:51.632 
当系统无法找到空间记忆体时

00:03:51.698 --> 00:03:52.999 
它必须停止一个app运行

00:03:53.600 --> 00:03:58.539 
在这种情况下
用户被活生生地从他/她 

00:03:58.739 --> 00:04:00.374 
可以说是她的当前处境中拉出来

00:04:00.941 --> 00:04:03.210 
然后我们
又把它带回到SpringBoard

00:04:03.544 --> 00:04:06.680 
在我看来这是一个更糟糕的用户体验

00:04:07.080 --> 00:04:12.553 
相比之下和当多个程序为CPU
或者GPU竞争UI将停顿

00:04:15.289 --> 00:04:17.858 
所以你现在可能在问自己
SpringBoard是什么

00:04:18.158 --> 00:04:22.529 
以及为什么SpringBoard
工程师今天会在这里和你谈多任务处理

00:04:23.030 --> 00:04:25.332 
其实
SpringBoard代表很多东西

00:04:26.366 --> 00:04:28.001 
它是主屏幕

00:04:28.068 --> 00:04:29.069 
锁屏

00:04:29.436 --> 00:04:34.208 
图标 壁纸 姿态系统 通知中心

00:04:34.775 --> 00:04:35.709 
控制中心

00:04:36.376 --> 00:04:37.878 
我有点儿混乱了

00:04:38.478 --> 00:04:42.683 
好吧 除此之外还有更多

00:04:43.050 --> 00:04:46.887 
但是最重要的一点
如同所有人我们是一个UI应用程序

00:04:49.089 --> 00:04:52.159 
SpringBoard
最初是多任务处理app

00:04:53.260 --> 00:04:57.231 
在iOS 9和iOS 9之前

00:04:57.464 --> 00:05:00.601 
SpringBoard 
一直被认为在前台操作

00:05:00.667 --> 00:05:02.769 
即使你的app可能被用户看到

00:05:04.238 --> 00:05:09.543 
因此 我们面对和你们一样关于
新多任务处理环境中的挑战

00:05:11.345 --> 00:05:13.514 
应此我们一路走来学到了很多

00:05:15.215 --> 00:05:18.986 
我们想和你们分享其中一些学到的内容
这样你们就不会犯同样的错误

00:05:20.687 --> 00:05:21.855 
我们开始吧

00:05:21.922 --> 00:05:25.359 
最简单的
第一部分是优化你的app

00:05:26.627 --> 00:05:31.465 
第一件事用泄露工序找到
并修复电脑的内存泄露问题

00:05:33.233 --> 00:05:35.435 
你们当中
有多少人忘记写DIALEK了

00:05:36.937 --> 00:05:38.338 
应该有更多的人举手

00:05:39.540 --> 00:05:41.208 
好吧 我忘了

00:05:41.275 --> 00:05:42.709 
发生在我们大多数人身上

00:05:42.876 --> 00:05:45.712 
而泄露工具可以帮助你找到这些问题

00:05:45.779 --> 00:05:47.214 
然而它们通常很容易被修复

00:05:48.982 --> 00:05:52.085 
但防止内存泄露问题
的最好方式是用Swift

00:05:52.419 --> 00:05:53.520 
你们应该用那个

00:05:55.656 --> 00:05:58.825 
最后 你应该用定位工具来寻找

00:05:58.892 --> 00:06:01.662 
并修复保留周期和无限内存增长

00:06:02.729 --> 00:06:06.200 
最后 你应该用实时分析工具来寻找

00:06:06.266 --> 00:06:07.467 
和修复低效的电脑算法

00:06:08.802 --> 00:06:11.572 
我不会在今天讨论这些问题

00:06:11.638 --> 00:06:15.042 
这些问题
都会发生在所有的apps不仅是

00:06:15.142 --> 00:06:16.577 
多任务处理的apps而已

00:06:17.878 --> 00:06:19.379 
反之 我们会注重于

00:06:19.446 --> 00:06:22.049 
新的多任务处理环境中最重要的事情

00:06:22.749 --> 00:06:26.887 
在我们的经验里我们学到最深的一课是

00:06:26.954 --> 00:06:29.256 
良好的表现需要权衡

00:06:30.090 --> 00:06:32.926 
你是打算预期计算你的数据
然后存在记忆体里

00:06:33.460 --> 00:06:36.263 
还是打算联机计算并使用CPU

00:06:37.264 --> 00:06:40.501 
你是打算把所有资源都存在
本地的磁盘里

00:06:40.834 --> 00:06:43.904 
还是把它们存在cloud里
然后想用的时候随时都可以取得

00:06:44.638 --> 00:06:48.775 
你想要在CPU还是GPU上
运行动画

00:06:50.410 --> 00:06:52.446 
我们来看一个关于我们之前做过的一个

00:06:52.513 --> 00:06:54.448 
叫IconReel样本app的例子

00:06:56.483 --> 00:06:58.185 
所以这是我们app最开始的状态

00:06:58.952 --> 00:07:00.754 
它最初有很多图标

00:07:01.221 --> 00:07:04.258 
当用户点击某图标时 我们将图标放大

00:07:04.324 --> 00:07:05.559 
来呈现一个更详细的视图

00:07:06.460 --> 00:07:08.896 
底部有一个dock栏

00:07:08.962 --> 00:07:11.498 
用户可以在这里保存他们 喜欢的图标

00:07:11.999 --> 00:07:15.068 
当一个用户添加更多的图标时
我们会添加更多的页面

00:07:15.135 --> 00:07:17.070 
这时用户可以页面之间滑动

00:07:18.372 --> 00:07:19.907 
有人觉得这个很眼熟吗

00:07:21.942 --> 00:07:23.177 
是的 是故意的

00:07:24.378 --> 00:07:26.713 
所以 我们可以保留所有的图标

00:07:26.780 --> 00:07:29.983 
内存中是因为每个图标仅为约60KB

00:07:30.417 --> 00:07:33.153 
我们会将它们全部存在一个扩展里面

00:07:34.087 --> 00:07:35.656 
结果就是滑动很棒

00:07:36.323 --> 00:07:38.692 
为什么呢 
因为我们没有其它可以滑动的屏幕

00:07:39.660 --> 00:07:42.262 
所以我们部分用户喜欢添加更多的图标

00:07:42.763 --> 00:07:46.333 
所以我们向记忆体中添加更多的图标

00:07:46.667 --> 00:07:48.368 
目前为止滑动还是可以的

00:07:49.570 --> 00:07:51.672 
那么 这个动画可能看起来眼熟

00:07:51.905 --> 00:07:53.507 
那是因为有很多apps 

00:07:53.574 --> 00:07:55.209 
有像这样的一个动画

00:07:55.709 --> 00:07:59.246 
想一下在一个照片
或开发视频app中的照片滑动

00:08:00.214 --> 00:08:02.149 
你的app里也许有一个类似的动画

00:08:03.851 --> 00:08:04.852 
一切都很好

00:08:04.918 --> 00:08:07.421 
一些我们很好的用户甚至下载了

00:08:07.487 --> 00:08:08.622 
更多图标

00:08:09.089 --> 00:08:12.759 
我们现在的扩展里有更多的图标

00:08:13.160 --> 00:08:15.829 
且结果是滑动依然很完美

00:08:16.930 --> 00:08:20.901 
也就是说 直到我们在
某时看到IconReel死机

00:08:21.368 --> 00:08:24.538 
以及在一个多任务处理环境下
我们有时能看到彼此的

00:08:24.605 --> 00:08:26.306 
前台apps死机

00:08:27.040 --> 00:08:29.443 
我们来看一看这里发生了什么

00:08:30.711 --> 00:08:33.614 
我们用一个实时分析器追踪看到CPU

00:08:33.679 --> 00:08:35.515 
和磁盘I/O在滑动时最小化了

00:08:36.582 --> 00:08:39.886 
但定位工具告诉我们我们的记忆体使用

00:08:39.953 --> 00:08:43.490 
其实是非常高的
因为我们所有图标都在记忆体里

00:08:45.993 --> 00:08:50.130 
这里的情况是IconReel在快速
地消耗可用的系统记忆体

00:08:50.497 --> 00:08:52.633 
而当系统内存短缺时

00:08:53.300 --> 00:08:54.434 
它试图释放一些空间

00:08:54.501 --> 00:08:57.571 
如果它找不到任何空间
那么它必须终止程序

00:08:58.405 --> 00:09:00.607 
有时这意味会终止IconReel

00:09:01.141 --> 00:09:03.877 
而有的时候这意味着
终止其它前台app

00:09:04.344 --> 00:09:07.214 
但上述所有的情况
都是一个非常糟糕的用户体验

00:09:07.314 --> 00:09:08.682 
我们想避免这个情况

00:09:10.317 --> 00:09:12.853 
作为一个良好的多任务管理
公民IconReel需要

00:09:12.920 --> 00:09:14.955 
管理好它的记忆体使用这样的话所有

00:09:15.222 --> 00:09:19.493 
屏幕上的apps可以共存
并创造很好的用户体验

00:09:19.560 --> 00:09:20.894 
这也是我们用户所期望的

00:09:22.462 --> 00:09:25.332 
这就将我们带到了工作集的概念上来

00:09:27.267 --> 00:09:29.436 
你可以做的最重要的一件

00:09:29.503 --> 00:09:32.272 
优化你记忆体使用的事就是理解

00:09:32.339 --> 00:09:33.540 
并管理你的工作集

00:09:35.242 --> 00:09:37.744 
你的工作集应该只由重要的东西

00:09:37.811 --> 00:09:40.113 
和你的app目前所需资源组成

00:09:42.216 --> 00:09:43.684 
你应该让它保持小一些

00:09:43.750 --> 00:09:45.118 
来确保你的低记忆体使用

00:09:46.987 --> 00:09:48.889 
它有可能会根据环境变化

00:09:48.956 --> 00:09:51.625 
比如 你的工作集可能包含不同对象

00:09:52.092 --> 00:09:53.427 
当一个在前台的app

00:09:53.760 --> 00:09:56.964 
和一个在后台的app相比它可以改变

00:09:57.030 --> 00:09:58.365 
当你改变视图控制器时

00:09:59.933 --> 00:10:02.202 
最后 你不应该让其无限增长

00:10:02.636 --> 00:10:04.638 
我们看过当系统没有记忆体时候的情况

00:10:05.138 --> 00:10:06.573 
我们不想你成为那个app

00:10:08.408 --> 00:10:10.577 
让我们
看一下IconReel的工作集

00:10:11.044 --> 00:10:12.246 
在最后一个例子的尾端

00:10:12.312 --> 00:10:16.550 
IconReel的工作集就是
我们在记忆体中保留的那个图标

00:10:17.017 --> 00:10:19.052 
这是最好的工作集吗

00:10:20.387 --> 00:10:21.221 
不是

00:10:21.788 --> 00:10:23.824 
那么我们现在真正需要做什么

00:10:25.225 --> 00:10:29.496 
现在我们真正需要的是
用户正在看的图标屏幕

00:10:30.197 --> 00:10:31.832 
所以这是一个更优秀的工作集

00:10:33.333 --> 00:10:36.436 
那么现在我们来试一下滑动我们

00:10:36.703 --> 00:10:38.372 
只有一页图标的工作集

00:10:41.708 --> 00:10:43.644 
噢 噢 好吧

00:10:43.944 --> 00:10:44.978 
这太糟了

00:10:45.145 --> 00:10:47.147 
而且如果你因为我站着
挡住了你没有看到

00:10:48.815 --> 00:10:50.250 
那个滑动十分糟糕

00:10:50.317 --> 00:10:52.619 
有一个多秒的停留在

00:10:52.686 --> 00:10:54.421 
滑到下一页看到图标时

00:10:55.989 --> 00:10:58.091 
我们来看看发生了什么

00:11:00.127 --> 00:11:02.129 
我们用另外一个实时分析器

00:11:02.529 --> 00:11:06.300 
然后我们看到CPU
而磁盘I/O 事实上在滑动中非常高

00:11:06.934 --> 00:11:10.470 
而分配显示我们的记忆体使用非常低

00:11:11.405 --> 00:11:14.508 
这个恰恰是我们刚刚发生相反的问题

00:11:15.709 --> 00:11:19.112 
就像我说的
良好的运行包括进行一系列的权衡

00:11:19.947 --> 00:11:21.615 
我们如何能修复这个

00:11:22.950 --> 00:11:25.219 
答案是更好的管理我们CPU的时间

00:11:26.720 --> 00:11:28.255 
所以你能做的最重要的事

00:11:28.322 --> 00:11:30.357 
就是能够让你的app反应做的工作

00:11:30.457 --> 00:11:32.993 
在你的主流程上越少越好

00:11:34.061 --> 00:11:37.097 
主流程最优先的事情
就是对用户时间做出反应

00:11:37.464 --> 00:11:39.800 
在你的主流程上做不必要的工作意味着

00:11:39.867 --> 00:11:43.003 
主流程有更少的时间来响应用户事件

00:11:44.605 --> 00:11:46.940 
因为你在分享CPU
时间给所有的apps

00:11:47.007 --> 00:11:49.276 
在屏幕上你需要特别谨慎

00:11:49.343 --> 00:11:50.711 
应对你的主线程在干什么

00:11:51.645 --> 00:11:54.615 
所有在主线程上进行的没有直接

00:11:54.681 --> 00:11:57.484 
响应用户事件的工作应在别的地方进行

00:11:59.419 --> 00:12:02.990 
什么工序是
我们可以用来保证我们不断地响应

00:12:03.056 --> 00:12:04.992 
用户时间但同时确保我们可以

00:12:05.058 --> 00:12:06.159 
及时地做其它工作

00:12:07.828 --> 00:12:10.764 
那么
答案就是我们可以用GCD和服务质量

00:12:12.165 --> 00:12:15.269 
在WWDC
2014时有一个很棒的演讲

00:12:15.736 --> 00:12:19.339 
而在来临的周五会有一个
关于GC和服务质量很棒的演讲

00:12:19.406 --> 00:12:21.208 
所以我不会在这里细说

00:12:21.775 --> 00:12:23.443 
它们是非常重要的两个东西

00:12:24.044 --> 00:12:26.713 
第一件事是你的主流程正在

00:12:26.780 --> 00:12:29.683 
最高优先地运作
而那个就是用户交互优先权

00:12:30.918 --> 00:12:33.120 
另外一件事是

00:12:33.187 --> 00:12:34.788 
服务质量的频率在

00:12:34.855 --> 00:12:36.590 
所有前台应用中分享

00:12:37.257 --> 00:12:41.094 
这样每个人的用户发起的队列
将有相同的机会接触到CPU 

00:12:41.161 --> 00:12:44.198 
而每个前台队列
也有相同的机会接触CPU

00:12:44.565 --> 00:12:48.735 
没有一个前台的app比
另外的跟有优先权

00:12:49.203 --> 00:12:51.405 
如果你能适度的优先你系统的工作

00:12:51.705 --> 00:12:54.942 
那么系统就可以保证我们能够

00:12:55.008 --> 00:12:57.144 
在屏幕上
有多重apps操作时得到最佳运作

00:12:58.946 --> 00:13:00.714 
所以这个和IconReel有何关系

00:13:01.682 --> 00:13:06.119 
我们会在一个不同的流程上
使用GCD加载图标

00:13:06.186 --> 00:13:08.222 
在用户发起的服务质量上

00:13:09.156 --> 00:13:12.092 
我们要做的第一件事 建立调度队列

00:13:12.459 --> 00:13:15.362 
这个叫做图标生成队列

00:13:16.129 --> 00:13:19.566 
当我们在主流程时我们会异步调度

00:13:19.633 --> 00:13:22.836 
在我们的图标队列中生成
在下一个界面生成每个图标队列

00:13:23.904 --> 00:13:26.240 
虽然在代码片段中并不明显

00:13:26.507 --> 00:13:29.776 
但是从主流程中异步调度工作到一个

00:13:29.843 --> 00:13:33.247 
像这样给质量服务降级的队列

00:13:33.480 --> 00:13:38.018 
到第二高的服务质量
的用户发起服务质量中去

00:13:39.720 --> 00:13:44.525 
所以这个代码能够有效地
在用户发起服务质量中加载所有图标

00:13:45.859 --> 00:13:47.694 
好 现在让我们再试着滑动一下 

00:13:50.764 --> 00:13:52.466 
好的 这好多了

00:13:53.433 --> 00:13:54.868 
如果你的设计行得通

00:13:54.935 --> 00:13:57.938 
这样你和你apps就能使用这个方案

00:13:58.238 --> 00:14:01.074 
比如说你可以一边展示你的占位图片

00:14:01.175 --> 00:14:02.543 
一边等待真正的内容加载出来

00:14:03.277 --> 00:14:06.313 
但IconReel的设计不允许这样

00:14:06.380 --> 00:14:10.317 
我们必须有已经加载好的图标
在它已经在屏幕上滑动之前

00:14:11.718 --> 00:14:14.087 
所以我们真正需要的是找到一个方式

00:14:14.221 --> 00:14:17.191 
来暂时促进图标生成队列

00:14:17.491 --> 00:14:19.860 
在主流程中达到同样优先权

00:14:20.194 --> 00:14:22.262 
就在界面滑动图标之前

00:14:22.329 --> 00:14:24.998 
这样它可以更快地完成图标生成

00:14:26.166 --> 00:14:27.734 
还有另一种方法是

00:14:28.535 --> 00:14:30.838 
使用服务质量覆盖

00:14:32.606 --> 00:14:38.645 
当我们有这一类型的倒置时
例如有个高优先权流程或队列被阻碍而

00:14:38.712 --> 00:14:42.049 
等待一个低优先权流程或列队来完成一
些工作这个会非常好用

00:14:42.983 --> 00:14:45.385 
而最酷的部分是

00:14:45.452 --> 00:14:47.921 
如果你给系统提供足够的信息

00:14:47.988 --> 00:14:49.957 
服务质量覆盖便可以自动生成

00:14:50.858 --> 00:14:54.228 
你可能在想 布蕾特妮
我怎样才能给系统

00:14:54.294 --> 00:14:55.329 
提供足够的信息

00:14:56.563 --> 00:14:57.831 
这里有一个好用的表格

00:14:58.966 --> 00:15:00.701 
再说一遍 去年的演讲和

00:15:00.767 --> 00:15:03.303 
这周五的演讲会更深入地讲解这个

00:15:04.004 --> 00:15:06.707 
但今天讲的是调度组等和

00:15:06.773 --> 00:15:09.743 
调度信号等不会是你们要的东西

00:15:10.210 --> 00:15:12.980 
你应该为了这些功能的使用
审计你的代码

00:15:13.313 --> 00:15:15.282 
然后意识到他们不会

00:15:15.349 --> 00:15:16.850 
在优先倒置中修复这些类型

00:15:18.719 --> 00:15:21.154 
那么让我们看一下我们
在IconReel上会怎么做

00:15:21.688 --> 00:15:26.560 
当在屏幕上图标滑动的 第一行之前

00:15:27.361 --> 00:15:28.562 
在主流程上我们会

00:15:28.629 --> 00:15:32.132 
同步调度这个空阻塞到
我们的图标队列中区

00:15:32.766 --> 00:15:37.371 
我们需要做的是
增强图标队列的优先权

00:15:37.437 --> 00:15:39.373 
来和主流程的优先权匹配

00:15:39.439 --> 00:15:41.241 
直到阻塞被执行

00:15:41.341 --> 00:15:43.377 
在图标队列的点

00:15:43.443 --> 00:15:45.012 
会回到其正常优先权

00:15:46.079 --> 00:15:48.982 
现在我们来看一下滑动
以及它们是什么样的

00:15:54.488 --> 00:15:58.192 
对 很好 一个很好的慢滑

00:15:59.459 --> 00:16:03.163 
我们现在来试一下慢滑之后快滑

00:16:07.601 --> 00:16:10.904 
我的天 我们又回到最初的状况了

00:16:11.038 --> 00:16:12.406 
就是当到了下一页的时候

00:16:12.472 --> 00:16:14.575 
在屏幕上有一个停顿

00:16:15.509 --> 00:16:16.410 
现在怎么办

00:16:18.011 --> 00:16:19.813 
这里有一个规律

00:16:20.080 --> 00:16:23.217 
将工具再次拿出来
我们拿出另外一个追踪

00:16:23.417 --> 00:16:25.419 
这次我们还有一个计算器

00:16:25.953 --> 00:16:29.857 
而且我们要做一点儿计算
然后我们要找到我们不能加载

00:16:30.257 --> 00:16:34.061 
读取图标图片从磁盘中 解码图标图片

00:16:34.127 --> 00:16:37.397 
然后让图标变得好看且有时间

00:16:37.464 --> 00:16:40.167 
让一个快速地用户滑动到下一页

00:16:41.435 --> 00:16:42.736 
现在做什么

00:16:43.804 --> 00:16:46.039 
我想我们应该等更快的设备了

00:16:50.210 --> 00:16:51.612 
一些掌声是给它们的

00:16:54.548 --> 00:16:55.482 
开个玩笑

00:16:55.649 --> 00:16:56.550 
我们可以做得更好

00:16:56.617 --> 00:16:57.651 
我们必须更聪明

00:16:58.352 --> 00:17:02.022 
数学计算告诉我们可以达到更好

00:17:02.089 --> 00:17:03.790 
的运行如果我们让

00:17:03.857 --> 00:17:05.791 
下一页的图标已经在记忆体中运行

00:17:06.960 --> 00:17:09.630 
这个确保及时当你

00:17:09.695 --> 00:17:12.866 
在多重页面中快速滑动
我们有足够的时间

00:17:12.933 --> 00:17:15.769 
让用户可以再次滑动之前
加载下一页的图标

00:17:17.738 --> 00:17:20.707 
现在我们来增加
我们的工作集从第一页

00:17:20.773 --> 00:17:23.609 
到第三页 你们现在所看到的

00:17:23.676 --> 00:17:25.145 
页面不是前一页也不是后一页

00:17:25.811 --> 00:17:27.381 
而我们没有一个神奇的八球

00:17:27.481 --> 00:17:30.150 
来知道用户会滑向哪一页

00:17:30.484 --> 00:17:33.954 
所以拥有前后两页会是最佳的选项

00:17:35.722 --> 00:17:37.257 
现在让我们试着滑动

00:17:43.096 --> 00:17:44.798 
很好 这看起来好多了

00:17:45.165 --> 00:17:47.201 
当用户到达下一页时

00:17:47.267 --> 00:17:50.838 
我们已经在加载下一页的图标了

00:17:50.904 --> 00:17:54.141 
但是 这其实增加了我们的记忆体使用

00:17:54.208 --> 00:17:56.977 
当我们有仅仅一页的工作集时

00:17:57.044 --> 00:17:58.412 
我们有记忆体占用

00:17:58.478 --> 00:18:00.647 
现在我们有了这个记忆体的占用

00:18:00.714 --> 00:18:03.917 
我们应该清楚
这将会如何影响其它apps

00:18:05.652 --> 00:18:10.591 
现在来看当用户用IconReel在
屏幕上打开某二级app时会发生什么

00:18:11.658 --> 00:18:16.196 
IconReel调整了大小
只展示了三行而不是四行

00:18:17.097 --> 00:18:20.901 
这是个重新评估我们的工作集的好机会

00:18:21.201 --> 00:18:26.273 
我们依然需要同时有三页的
四行图标在内存中吗

00:18:27.140 --> 00:18:32.045 
不
我们仅仅需要同时有三页三行的内存

00:18:32.980 --> 00:18:35.282 
高效到它看起来有点儿像这样

00:18:36.416 --> 00:18:38.719 
现在我会手动

00:18:38.785 --> 00:18:41.788 
删除这些多余的图标行

00:18:41.855 --> 00:18:43.457 
就是我们不需要用的 但是

00:18:43.624 --> 00:18:45.926 
需要很多工作来生成它们

00:18:45.993 --> 00:18:48.061 
如果不是特别需要 我不想重新做

00:18:49.029 --> 00:18:50.998 
如果有一个地方

00:18:51.064 --> 00:18:53.400 
让我我能够摆放这些图标那该多好

00:18:53.500 --> 00:18:56.670 
如果系统需要内存 我们可以丢掉它们

00:18:56.737 --> 00:18:59.806 
如果系统不需要内存 
那么它们可以留在内存中

00:18:59.873 --> 00:19:02.376 
然后我们可以再次使用它们
当我们需要它们的时候

00:19:03.043 --> 00:19:04.745 
有一种方法

00:19:04.811 --> 00:19:07.080 
就是读取内存发出的警告

00:19:09.483 --> 00:19:13.086 
当系统低于内存限制时
会出现内存发出的警告

00:19:13.153 --> 00:19:15.722 
说你的程序正在达到它的内存限度

00:19:18.058 --> 00:19:21.728 
我非常想给你一个数字
这样你可以选择你的内存限度代码

00:19:22.129 --> 00:19:23.830 
不幸的是 没有这样一个数字

00:19:24.464 --> 00:19:28.268 
对于每台设备和
每个应用上下文的限制是不同的

00:19:28.569 --> 00:19:30.737 
所以我能给出的最好建议就是

00:19:30.804 --> 00:19:33.974 
读取系统发出的警告然后采取行动

00:19:34.041 --> 00:19:36.276 
所以你应该做什么

00:19:37.277 --> 00:19:39.780 
你应该把不在工作集的东西清理出来

00:19:39.847 --> 00:19:43.150 
这包括清理缓存数据释放图片

00:19:43.217 --> 00:19:44.518 
和释放视图控制器

00:19:46.720 --> 00:19:50.591 
这是你可以
用来读取内存警告的APIs

00:19:50.657 --> 00:19:52.559 
然后我想说明一点

00:19:52.626 --> 00:19:54.628 
这些都不是第一次在iOS 9中出现

00:19:55.095 --> 00:19:56.496 
它们存在一段时间了

00:19:56.563 --> 00:19:58.665 
希望你们都已经使用它们了

00:20:00.234 --> 00:20:02.836 
现在
我可以检查一个内存警告

00:20:02.903 --> 00:20:05.105 
然后手动去除那些图标

00:20:05.205 --> 00:20:07.741 
我很懒而且我不想那么做

00:20:07.975 --> 00:20:11.912 
如果有一个工具可帮我管理那些玩意儿

00:20:11.979 --> 00:20:13.013 
让我不用去做就太好了

00:20:14.448 --> 00:20:17.484 
而我们也有一个这样的工具
它叫做NSCache

00:20:18.151 --> 00:20:19.786 
它和NSDictionary很像

00:20:19.853 --> 00:20:22.389 
但它对于可以被
快速重塑的对象来说很好

00:20:23.557 --> 00:20:25.359 
它还帮你处理内存发出的警告

00:20:25.425 --> 00:20:27.861 
自动清理东西然后它

00:20:28.262 --> 00:20:32.132 
也知道应用上下文比如前台和后台

00:20:32.432 --> 00:20:33.901 
然后在必要的时候清理东西

00:20:35.202 --> 00:20:38.839 
它还能做很多很酷的东西
但我们今天没有时间展开讨论

00:20:38.906 --> 00:20:41.275 
不要忘了看NSCache上的资料

00:20:43.210 --> 00:20:46.847 
现在在拆分视图上
我们可以看到IconReel

00:20:47.281 --> 00:20:49.149 
这次不把这些图标删除

00:20:49.683 --> 00:20:51.585 
我们把
它们放到一个NSCache里面

00:20:52.352 --> 00:20:56.990 
实施上我们只把我们生成的每个不在
工作集中的图标放进NSCache里

00:20:57.724 --> 00:20:59.459 
而当我们有一个内存发出的警告时

00:20:59.726 --> 00:21:04.198 
我们可以让NSCache做所有
清除那些不在我们工作集的图标

00:21:06.233 --> 00:21:07.100 
让我们回顾一下

00:21:07.601 --> 00:21:10.737 
我们从这里开始
每个图标都在内存里面

00:21:10.938 --> 00:21:15.576 
所以我们的内存使用很高 且
滑动很流畅而CPU和磁盘I/O很低

00:21:16.009 --> 00:21:17.811 
但我们有时看到app崩溃

00:21:18.045 --> 00:21:19.012 
而这并不好

00:21:20.047 --> 00:21:22.382 
所以我们调整我们的工作集

00:21:22.449 --> 00:21:25.652 
到只有一页图标中
然后内存使用很低

00:21:25.986 --> 00:21:28.755 
但是我们的CPU
和磁盘I/O在滑动时很高

00:21:28.822 --> 00:21:30.958 
而这会产生很差劲的滑动操作

00:21:33.493 --> 00:21:36.997 
现在我们将工作集的大小变为三页图标

00:21:37.464 --> 00:21:39.466 
这会给我们的内存增加一点点

00:21:39.867 --> 00:21:41.902 
然后每一个我们生成的图标

00:21:41.969 --> 00:21:45.339 
不在工作集中我们就把它们
丢到NSCache里面

00:21:46.006 --> 00:21:48.308 
我们增加了整体的内存的使用

00:21:48.375 --> 00:21:50.277 
但是大量增加内存的使用

00:21:50.344 --> 00:21:51.745 
已经使它能够适应内存的限度

00:21:53.347 --> 00:21:54.882 
对于你们很多人来说 这已经很好了

00:21:55.749 --> 00:21:58.418 
如果你的app可以在
一个多任务处理的环境下运行

00:21:58.552 --> 00:22:03.090 
且在地图上交叉运行
那么你的状态应该不错

00:22:04.291 --> 00:22:07.194 
我今天展示了
一些你们的app可以做到的事情

00:22:07.261 --> 00:22:08.996 
来成为一个优秀而多任务处理的公民

00:22:09.062 --> 00:22:12.065 
但是有些时候只靠这些事情还是不够的

00:22:12.132 --> 00:22:14.001 
为了和你们聊聊你们接下来可以做什么

00:22:14.067 --> 00:22:15.836 
我想请出乔恩德拉蒙德

00:22:23.911 --> 00:22:25.679 
谢谢你布蕾特妮 大家好

00:22:27.514 --> 00:22:30.350 
看来你们已经掌控
如何使用你的app的内存

00:22:30.851 --> 00:22:32.753 
来极大地帮助你的app和

00:22:32.819 --> 00:22:33.921 
其余系统的运行

00:22:34.188 --> 00:22:36.223 
但有些时候只靠这些知识并不足够

00:22:36.590 --> 00:22:38.292 
如果你已经做了我们说过的所有事情

00:22:38.358 --> 00:22:41.528 
并且做得很正确 但是情况还是不对

00:22:42.296 --> 00:22:44.097 
我们将谈谈一些方法

00:22:44.298 --> 00:22:47.801 
让你们的apps可以更好地
管理它们的内存占用

00:22:49.136 --> 00:22:52.239 
首先 我想回到那个多任务管理的例子

00:22:52.306 --> 00:22:54.341 
假如我们有一个初级和一个二级app

00:22:55.142 --> 00:22:57.277 
而现在已经达到内存的极限了

00:22:57.344 --> 00:22:58.912 
接着系统会发出一个内存警告

00:22:58.979 --> 00:23:01.949 
身为良好多任务公民apps会管理好

00:23:02.015 --> 00:23:04.117 
并清理它们的缓存和其它不需要的东西

00:23:04.518 --> 00:23:08.021 
好的 那么现在用户引进了一个PiP

00:23:08.355 --> 00:23:10.090 
我们有足够的内存 这样不错

00:23:10.157 --> 00:23:12.426 
虽然我们还没到达内存的极限
但我们已经接近了

00:23:13.393 --> 00:23:15.996 
现在用户将调整那个二级app

00:23:16.063 --> 00:23:17.698 
让其达到和初级拥有一对一的比例

00:23:19.399 --> 00:23:22.736 
因此 这将造成CPU的内存突增

00:23:22.803 --> 00:23:24.905 
这会使系统不能及时做出反应

00:23:25.172 --> 00:23:26.573 
很不幸地被逼把

00:23:26.640 --> 00:23:29.443 
初级的app终止即使它不是

00:23:29.510 --> 00:23:31.345 
内存增长的正真原因

00:23:32.045 --> 00:23:34.615 
回归到SpringBoard
从来就不是一个好的体验

00:23:34.681 --> 00:23:35.983 
就像布蕾特妮刚刚展示的那样

00:23:37.751 --> 00:23:39.152 
在我继续讲或者结束之前

00:23:39.219 --> 00:23:41.088 
我想跟你们分享一句话

00:23:43.724 --> 00:23:47.027 
那就是在
你程序之外的东西都应该被视为

00:23:47.094 --> 00:23:49.396 
有敌意并且会毁灭你的可能

00:23:50.731 --> 00:23:52.766 
我不是故意说不吉利的话

00:23:52.833 --> 00:23:55.302 
且我也不想让你们觉得我疯了

00:23:55.869 --> 00:23:58.772 
但身为一个良好的多任务管理
公民就应该适应

00:23:58.939 --> 00:24:00.641 
你身边所有会发生的事情

00:24:00.741 --> 00:24:03.810 
有时你身边发生的事情会很离谱

00:24:04.678 --> 00:24:06.180 
你可能觉得一切都操作得很好

00:24:06.246 --> 00:24:08.916 
但是系统可能在密谋着终结你

00:24:08.982 --> 00:24:10.984 
事情虽然不是这样 但如果你有所准备

00:24:11.051 --> 00:24:14.354 
这将会帮助你生存

00:24:16.523 --> 00:24:17.991 
所以首先

00:24:18.492 --> 00:24:20.594 
内存是在iOS中最被约束的资源

00:24:20.994 --> 00:24:23.597 
这不是说其它资源不被约束

00:24:23.664 --> 00:24:25.832 
它们会被约束 只是它们
降级的不同而已

00:24:26.099 --> 00:24:27.601 
当系统没有内存的时候

00:24:27.701 --> 00:24:28.869 
它就像在砸一堵墙

00:24:28.936 --> 00:24:29.803 
有些东西必须离开

00:24:29.870 --> 00:24:31.471 
它必须将内存拿回来

00:24:32.472 --> 00:24:34.141 
就像我们之前看到的例子

00:24:34.541 --> 00:24:38.679 
有时侯系统能够
以比释放内存更快的速度还原内存

00:24:39.112 --> 00:24:41.682 
即使我们有时间发布一个内存警告 

00:24:41.748 --> 00:24:43.750 
并且三个apps全部都在运行

00:24:43.817 --> 00:24:46.119 
且都有时间去相应那个警告
但我们不能够知道

00:24:46.186 --> 00:24:47.754 
它们是否有足够的CPU循环

00:24:47.821 --> 00:24:49.756 
来做一些有意义且

00:24:49.823 --> 00:24:52.426 
可以清除足够内存来还原内存

00:24:53.594 --> 00:24:55.796 
为了了解系统是否能够收回内存

00:24:55.863 --> 00:24:58.699 
我们需要知道内存是如何被分类

00:24:59.333 --> 00:25:01.535 
我会将其分为三个不同的组别

00:25:01.602 --> 00:25:03.604 
第一个类别我们把它叫做脏的

00:25:04.271 --> 00:25:06.673 
这是你的程序使用时活跃的内存

00:25:06.807 --> 00:25:09.309 
这些是你的对象这些是你的堆式分配

00:25:09.576 --> 00:25:11.845 
静态 球态和所有你缓存的东西

00:25:11.912 --> 00:25:13.413 
其实差不多所有的东西

00:25:13.514 --> 00:25:15.115 
而且这不能被系统召回

00:25:15.182 --> 00:25:16.783 
因为这是你在用的

00:25:18.185 --> 00:25:19.720 
第二个类别叫做可清除的

00:25:20.020 --> 00:25:23.357 
这是除了脏的内存以外被明确标注

00:25:23.590 --> 00:25:25.893 
不被app使用的

00:25:25.959 --> 00:25:28.562 
这样系统知道
当有需要的时候它可以被召回

00:25:29.563 --> 00:25:30.864 
第三种我们叫干净的

00:25:30.931 --> 00:25:33.800 
这是在磁盘上备份的

00:25:33.867 --> 00:25:35.669 
系统可以召回这些内存

00:25:35.769 --> 00:25:38.639 
因为它永远可以召回
因为文件已经在这儿了

00:25:40.641 --> 00:25:42.543 
回到我们的系统内存条

00:25:42.609 --> 00:25:43.744 
这看起来怎么样

00:25:43.844 --> 00:25:46.847 
我们有一个非常非常小的内存局面

00:25:47.247 --> 00:25:48.982 
但是系统不这么看

00:25:49.616 --> 00:25:55.088 
系统知道当它想释放一些内存来增长时
它可以有余地使用

00:25:55.422 --> 00:25:57.324 
而不用发布内存警告

00:25:57.391 --> 00:25:59.126 
或要求apps来干预

00:26:00.327 --> 00:26:05.232 
你的app的目标和适应内存的使用

00:26:05.299 --> 00:26:07.034 
就是最小化你脏的内存

00:26:07.768 --> 00:26:10.537 
而最大化你的可清除的和干净的内存

00:26:11.004 --> 00:26:12.573 
我们从最小化脏的开始

00:26:14.341 --> 00:26:16.009 
首先 对 少用它

00:26:16.710 --> 00:26:18.846 
我知道我站在这里说的很容易

00:26:18.912 --> 00:26:21.281 
但如果你管理你的工作集

00:26:21.348 --> 00:26:24.017 
然后追溯你在定位的对象使用工具

00:26:24.084 --> 00:26:27.654 
来做所有的事情一旦你做好这些事下一

00:26:27.721 --> 00:26:30.357 
重新分类脏的内存为可清除的

00:26:31.291 --> 00:26:34.461 
如果你做了这些
它可以被系统自动召回

00:26:34.962 --> 00:26:37.097 
然后这是可有可无的数据中最好的

00:26:37.364 --> 00:26:39.733 
你现在不需要的数据
也许会在未来需要

00:26:39.800 --> 00:26:42.402 
所有你可能放到一个缓存里的事情 
比如说

00:26:43.804 --> 00:26:45.539 
我们把
这个应用到IconReel上

00:26:46.373 --> 00:26:48.308 
这个和我们中断的情况相似

00:26:48.375 --> 00:26:51.144 
我们在工作集的两旁有图标的缓存

00:26:51.445 --> 00:26:52.513 
另外 只是

00:26:54.248 --> 00:26:57.484 
对于这个例子 我将再重新
把我们的数据分一下类

00:26:57.551 --> 00:26:59.253 
比起在一个每个-图标块上工作

00:26:59.319 --> 00:27:01.421 
我会将图标群分成集列

00:27:01.488 --> 00:27:04.091 
就因为它可以在这儿变得比较轻松

00:27:04.491 --> 00:27:07.227 
这并不意味着会
改变我们app的动态

00:27:07.294 --> 00:27:09.563 
当用户来回滑动
我们更新我们的工作集

00:27:09.630 --> 00:27:11.865 
有些被缓存了 有些被拉出了缓存

00:27:12.199 --> 00:27:13.233 
这都是一样的

00:27:13.734 --> 00:27:15.335 
我们来给这个内存使用分一下类

00:27:16.737 --> 00:27:19.106 
首先 我们正在使用的内存

00:27:19.573 --> 00:27:20.541 
应被分类为脏的

00:27:20.908 --> 00:27:21.775 
这是我们的工作集

00:27:23.243 --> 00:27:26.346 
我们所有在缓存的对象都是可以清除的

00:27:27.181 --> 00:27:29.816 
这为我们展示了一个有趣的机会

00:27:30.851 --> 00:27:33.854 
来让我们跟高级地分类内存

00:27:34.721 --> 00:27:40.727 
比如说 标记更多在用着的数据

00:27:40.794 --> 00:27:42.863 
或是脏的甚至有一些是在缓存里的

00:27:43.697 --> 00:27:47.301 
这介绍了一个另一种缓存的方式

00:27:48.302 --> 00:27:50.470 
第一个那个最外的图标

00:27:50.904 --> 00:27:52.906 
是我们最迟使用到的

00:27:52.973 --> 00:27:55.909 
我们会让系统在它需要的时候重新召回
我们不在乎

00:27:56.810 --> 00:27:58.378 
但是我们想要确保有能力来控制

00:27:58.445 --> 00:27:59.980 
我们可能马上用到的图标

00:28:00.614 --> 00:28:02.983 
即使它们依然在缓存中
我们会标记它们为被使用中

00:28:03.050 --> 00:28:05.319 
这样系统就不会随意拿走它们

00:28:05.719 --> 00:28:08.121 
这些是我们在
应对一个内存警告的时可释放的

00:28:09.423 --> 00:28:10.757 
这就给了我们一个工作集

00:28:10.824 --> 00:28:12.192 
一个我们现在绝对会需要

00:28:12.259 --> 00:28:14.061 
但我们却无法为那个工作集做任何东西

00:28:15.395 --> 00:28:17.598 
这在多任务处理例子中是什么样的

00:28:18.365 --> 00:28:21.335 
我们回到那个出错的情况

00:28:21.802 --> 00:28:22.669 
PiP进来了

00:28:22.736 --> 00:28:23.604 
我们没有内存了

00:28:23.871 --> 00:28:25.906 
但现在系统知道初级和

00:28:25.973 --> 00:28:28.509 
二级的app是良好的多任务处理公民

00:28:28.809 --> 00:28:31.345 
它们有可以清除的内存的能力

00:28:31.545 --> 00:28:34.748 
这个系统 不用应对任何人

00:28:34.815 --> 00:28:36.517 
就可以从app中拿走

00:28:36.850 --> 00:28:38.819 
然后让系统回归到一个好的状态

00:28:40.988 --> 00:28:43.290 
但当然了 如果用户继续使用设备

00:28:43.357 --> 00:28:44.625 
内存将会重新增加

00:28:44.691 --> 00:28:46.093 
我们又收到了一个内存警告

00:28:46.593 --> 00:28:49.363 
但因为那些apps只失去了
可清除的数据

00:28:49.429 --> 00:28:51.632 
它们可以自由地响应内存警告

00:28:51.698 --> 00:28:55.769 
然后清除缓存
这样还系统一个好的状态

00:28:57.604 --> 00:28:59.673 
在你的apps中应该怎么用你的
可清除数据

00:28:59.740 --> 00:29:00.941 
这很简单

00:29:01.074 --> 00:29:02.609 
这里有一个等级是可清除的数据

00:29:02.676 --> 00:29:05.245 
然后它是一个NS不可变数据的子类别

00:29:05.312 --> 00:29:07.181 
它没有别的性能它很简单

00:29:07.614 --> 00:29:09.316 
唯一的分别是这三个方式

00:29:09.483 --> 00:29:11.285 
第一个就是Begin Content Access

00:29:11.351 --> 00:29:13.554 
这个告诉系统你正在使用内存

00:29:13.787 --> 00:29:15.122 
不要把它拿走

00:29:15.622 --> 00:29:18.325 
第二个方式Begin
Content Access

00:29:18.392 --> 00:29:20.027 
现在内存被认为是可清除的

00:29:20.093 --> 00:29:21.328 
而你可能随时都会失去它

00:29:21.962 --> 00:29:25.666 
第三个方式是断定系统是否在你不用的
时候把它拿走

00:29:27.034 --> 00:29:29.069 
回到系统资源条上 这差不多是

00:29:30.804 --> 00:29:32.840 
布蕾特妮结束的部分

00:29:32.906 --> 00:29:33.907 
我没有改变任何东西

00:29:33.974 --> 00:29:35.475 
这些图形差不多一样

00:29:35.676 --> 00:29:38.779 
不同的是我们抽取了一部分自适应内存

00:29:38.979 --> 00:29:40.581 
然后重新分类为可清除的

00:29:41.281 --> 00:29:44.318 
这使得我们成为一个更好的多任务公民

00:29:44.384 --> 00:29:46.920 
因为系统可以代替我们做工作

00:29:47.454 --> 00:29:50.290 
但是有相同的本质表现性能

00:29:50.357 --> 00:29:52.125 
就是如果我失去我的可清除内存

00:29:52.292 --> 00:29:55.229 
然后我清除了我的缓存 我现在怎么办

00:29:55.295 --> 00:29:57.164 
我需要重塑所有 我需要的数据

00:29:57.231 --> 00:29:59.099 
及我曾经建造的但这很昂贵

00:29:59.233 --> 00:30:02.169 
磁盘I/O和CPU出现尖峰 
这样不好

00:30:03.837 --> 00:30:06.373 
我们分析在app中使用的数据来

00:30:06.507 --> 00:30:09.343 
看是否我们可以做更多的事情

00:30:10.911 --> 00:30:13.514 
那么IconReel使用什么数据呢

00:30:13.981 --> 00:30:16.617 
它们是图标 然后第一个特性就是

00:30:16.683 --> 00:30:18.085 
它们绝对重要

00:30:18.151 --> 00:30:19.820 
我们没有图标就没有一个app

00:30:20.020 --> 00:30:21.788 
某时 用户会滑动到它们

00:30:21.855 --> 00:30:23.590 
我们需要它们 无法避免

00:30:24.758 --> 00:30:26.360 
第二个它们生成用到很多内存

00:30:27.127 --> 00:30:31.231 
从磁盘中读取它们破解它们并润色

00:30:31.298 --> 00:30:34.134 
你想干什么就干什么
这样费用浩大的内存

00:30:35.335 --> 00:30:37.571 
第三点 其实它们可以被预期计算的

00:30:37.638 --> 00:30:40.140 
我们将提前知道这些图片会怎样

00:30:40.507 --> 00:30:43.744 
如果我们有多余的空间
我们便可以计算它们

00:30:45.045 --> 00:30:47.381 
最后一点是它们非常静态

00:30:48.282 --> 00:30:49.616 
有很大的可能性

00:30:49.683 --> 00:30:52.352 
如果我提前生成一些东西
它会和我想要用它的时候一样

00:30:52.519 --> 00:30:55.022 
因为它不怎么经常改变

00:30:55.489 --> 00:30:56.790 
这些所有的观点结合起来

00:30:57.724 --> 00:31:01.662 
使得这个数据是一个
用于文件缓存的最佳选择

00:31:02.696 --> 00:31:03.764 
在我说别的之前

00:31:03.830 --> 00:31:07.367 
我想说这个依然是一个缓存
即使它是一个文件

00:31:07.434 --> 00:31:10.938 
不要将这些缓存写到用户的文件夹中

00:31:11.004 --> 00:31:12.639 
在你的app的缓存文件中保存

00:31:12.706 --> 00:31:14.007 
或在系统的临时目录中保存

00:31:15.843 --> 00:31:16.977 
回到我们的系统资源

00:31:17.311 --> 00:31:18.879 
我们刚介绍了一个新的题目

00:31:19.479 --> 00:31:20.414 
那就是磁盘空间

00:31:22.216 --> 00:31:25.085 
我们可以交换一些CPU
循环来生成这个数据

00:31:25.786 --> 00:31:28.355 
保存之后 当我们需要的时候
我们再把它拉出来用

00:31:28.889 --> 00:31:32.593 
我们事实上
完全去除了CPU的使用功能

00:31:33.493 --> 00:31:36.230 
现在
你也许已经注意到I/O已经运行了

00:31:36.296 --> 00:31:38.799 
因为完全渲染的图片会比

00:31:38.866 --> 00:31:41.201 
那些资源文件大 这没关系

00:31:41.502 --> 00:31:42.603 
这些都是和权衡有关

00:31:43.770 --> 00:31:47.241 
这就直接到了被净化最大的内存

00:31:48.242 --> 00:31:50.944 
你可能会记得我之前说过
被一个文件备份的内存

00:31:51.011 --> 00:31:52.746 
在磁盘上是被视为干净的

00:31:53.247 --> 00:31:56.083 
那么现在我们在磁盘上有一个文件
多巧啊

00:31:56.617 --> 00:31:58.352 
这样一个文件的数据可以被内存映射

00:31:58.418 --> 00:32:00.821 
系统会定位一块内存给你

00:32:00.888 --> 00:32:03.857 
然后直接映射磁盘中文件的位置和内容

00:32:04.992 --> 00:32:06.994 
这绝对值得注意内存

00:32:07.060 --> 00:32:10.197 
在文件内容上必须完全一致

00:32:10.264 --> 00:32:13.834 
你不能内存映射一个需要更多破解文件

00:32:13.901 --> 00:32:15.636 
或者当它已经加载了的

00:32:17.070 --> 00:32:19.740 
这对于只读数据来说很理想就像我说的

00:32:19.806 --> 00:32:20.807 
它不怎么经常改变

00:32:22.309 --> 00:32:24.845 
这里最酷的地方就是

00:32:24.912 --> 00:32:26.780 
以可清除的内存

00:32:26.880 --> 00:32:30.450 
系统可以在当你需要时
重新召回一些空闲的内存

00:32:31.285 --> 00:32:33.153 
但是 它没有消失

00:32:33.620 --> 00:32:35.622 
当你再次需要它时你再次取数它时

00:32:35.789 --> 00:32:37.925 
系统从磁盘中再次加载回来

00:32:37.991 --> 00:32:39.159 
就像它从没消失过一样

00:32:40.727 --> 00:32:42.896 
而且它有很大的随机存取性能

00:32:42.963 --> 00:32:45.065 
只因为你的工作集在这而你需要的一块

00:32:45.132 --> 00:32:46.733 
数据在别处并不重要

00:32:47.034 --> 00:32:49.002 
系统可以只读那块的部分文件

00:32:49.069 --> 00:32:50.838 
然后交给你 你就可以工作了

00:32:52.940 --> 00:32:54.007 
这个看起来是什么样的

00:32:54.074 --> 00:32:55.375 
我们从内存的数据开始

00:32:57.177 --> 00:32:58.745 
然后你在磁盘上写出来

00:32:58.812 --> 00:33:01.248 
系统现在把它当成 内存映射

00:33:01.515 --> 00:33:03.417 
如果你存取一部分的数据然后它

00:33:04.818 --> 00:33:07.387 
就会把它加载好 然后交给你

00:33:07.454 --> 00:33:09.990 
当你不再用它的时候 它就被拿走了

00:33:12.593 --> 00:33:14.728 
我们如何能
将此功能应用到IconReel上

00:33:14.895 --> 00:33:17.464 
我们从这个工作集开始
但是事实上我们是把

00:33:17.531 --> 00:33:21.468 
我们生成的每个图标去合拼工作集

00:33:21.535 --> 00:33:25.506 
创建一个大的数据文件然后写到磁盘上

00:33:29.476 --> 00:33:33.313 
现在回到我们的app中来
我们再次拿出我们的工作集 三页

00:33:34.548 --> 00:33:36.383 
我们访问这三页内存

00:33:36.450 --> 00:33:39.219 
然后系统只加载文件的那一部分

00:33:39.286 --> 00:33:41.722 
到内存中然后保持其它部分干净

00:33:41.788 --> 00:33:44.424 
不管那文件是不是上百MB

00:33:44.825 --> 00:33:45.993 
它其实并不在内存中

00:33:46.126 --> 00:33:48.128 
当我们四处滑动时 一样的事情发生了

00:33:48.762 --> 00:33:50.330 
系统加载了我们需要的数据

00:33:50.631 --> 00:33:53.367 
加入我们引进一个会显示通知的功能

00:33:53.433 --> 00:33:55.636 
用于在主界面上的其它图标

00:33:55.836 --> 00:33:57.471 
我们可以把它们拉出来然后

00:33:57.538 --> 00:33:59.139 
不用担心它们在哪和它们是什么

00:33:59.406 --> 00:34:02.509 
虚拟内存系统为我们做了大部分工作

00:34:05.112 --> 00:34:07.214 
这会如何改变我们的资源条

00:34:07.648 --> 00:34:09.315 
这里我们已经将CPU中断了

00:34:09.382 --> 00:34:12.085 
但是我们现在的缓存实际上在磁盘上

00:34:12.152 --> 00:34:13.687 
那么这个也消失了

00:34:14.487 --> 00:34:16.924 
然后我们现在唯一内存占用就是工作集

00:34:17.157 --> 00:34:18.692 
其它地方都被认为是干净的

00:34:19.193 --> 00:34:20.661 
所以不算是反对我们

00:34:21.495 --> 00:34:25.632 
且值得注意的是我们有效地消除CPU

00:34:25.699 --> 00:34:29.837 
对前端和后端的需求
对于我们的数据生命循环来说

00:34:30.170 --> 00:34:33.607 
我们不需要CPU来生成数据来展示给

00:34:33.674 --> 00:34:36.710 
用户或者我们也不用CPU来清理
干净来应对内存警告

00:34:36.777 --> 00:34:38.911 
系统都为我们做了

00:34:40.179 --> 00:34:42.049 
你如何能用内存映射数据

00:34:42.114 --> 00:34:45.085 
在一次 它是一个在NS数据上的
简单API

00:34:45.152 --> 00:34:46.719 
这里有些选择你可以

00:34:46.786 --> 00:34:48.388 
用来开始数据对象

00:34:48.789 --> 00:34:51.625 
如果你在初始化器中标注映射选项

00:34:52.092 --> 00:34:54.494 
你就会得到一个内存映射数据文件

00:34:56.563 --> 00:34:59.266 
如果我没有提到
我会被看做是玩忽职守

00:34:59.333 --> 00:35:01.235 
用这个系统时有一些警告

00:35:02.202 --> 00:35:04.004 
第一个就是它不适用于

00:35:04.071 --> 00:35:05.172 
少量的数据

00:35:05.472 --> 00:35:07.441 
在页面上自己工作的虚拟内存

00:35:07.508 --> 00:35:09.176 
也就是少量数据

00:35:09.409 --> 00:35:13.780 
如果你的甚至更小你会遇到

00:35:13.847 --> 00:35:16.383 
覆盖在你原有问题上的新问题

00:35:16.717 --> 00:35:20.187 
还有从内存映射文件中

00:35:20.254 --> 00:35:22.656 
如果你的内存映射一千个图标文件
比如

00:35:22.723 --> 00:35:25.792 
这其实有一个对于任何系统可以有的
打开文件的限制

00:35:25.859 --> 00:35:27.461 
这样你会惹上麻烦

00:35:27.928 --> 00:35:29.162 
这是其中一个主要原因

00:35:29.229 --> 00:35:31.665 
为什么我们将数据集合成大块

00:35:31.732 --> 00:35:33.867 
使其对于VM系统更加好管理

00:35:35.469 --> 00:35:38.238 
或者你也可以只是滥用虚拟内存系统

00:35:38.305 --> 00:35:40.974 
你所创造的每个可清除的数据对象创造

00:35:41.041 --> 00:35:42.442 
在你虚拟内存中的一个区域

00:35:42.809 --> 00:35:45.312 
如果你创造了太多那些内存映射文件

00:35:45.379 --> 00:35:47.447 
你会将你整个空间碎片化

00:35:47.881 --> 00:35:49.349 
你同样会使其耗尽

00:35:49.483 --> 00:35:51.752 
如果你决定来内存映射一个
10GB内存的文件

00:35:51.818 --> 00:35:53.754 
那么你会完全用光内存

00:35:53.954 --> 00:35:58.725 
不幸的是
虚拟内存系统的滥用会导致

00:35:58.792 --> 00:36:00.194 
你的程序被终结

00:36:00.260 --> 00:36:02.796 
而这是我们最初想要避免的 对吗

00:36:04.731 --> 00:36:07.301 
为了提供最好的多任务处理体验

00:36:07.367 --> 00:36:10.170 
对于用户理解你的app使用的数据

00:36:10.237 --> 00:36:13.407 
和数据性能是非常重要的

00:36:14.074 --> 00:36:16.844 
你现在必须能够分辨出可有可无的数据

00:36:17.177 --> 00:36:19.513 
和你需要的重要数据

00:36:20.247 --> 00:36:21.582 
你的数据可以被预计算吗

00:36:21.782 --> 00:36:23.550 
重新建立有多贵

00:36:24.184 --> 00:36:25.385 
它长时间改变一下

00:36:26.019 --> 00:36:28.856 
了解关于你使用的数据可以帮助你找到

00:36:28.922 --> 00:36:32.259 
让你的内存变得最大适用性的正确工具

00:36:33.160 --> 00:36:36.964 
我们可以一起
改善我们apps的适用性

00:36:37.030 --> 00:36:40.334 
和提供更好的多任务体验给我们的用户

00:36:42.202 --> 00:36:43.971 
在接下来的几周你会更新你的apps

00:36:44.037 --> 00:36:45.706 
为了iOS9的多任务处理

00:36:45.772 --> 00:36:47.741 
我希望你们把这些话题记住

00:36:48.475 --> 00:36:53.747 
首先用工具来识别并修复程序错误

00:36:54.281 --> 00:36:55.182 
这是简单的东西

00:36:55.249 --> 00:36:57.651 
你的内存泄露无效率的数据构造 算法

00:36:57.851 --> 00:36:58.986 
废弃的内存等

00:36:59.319 --> 00:37:00.487 
把它们都修好

00:37:00.988 --> 00:37:03.323 
其次适当优先化你的工作

00:37:03.390 --> 00:37:04.658 
然后别阻隔到主流程

00:37:04.992 --> 00:37:07.494 
我不知道你们多少人在
这个系列的第一阶段记住了

00:37:07.561 --> 00:37:09.563 
就是系统会真的终端

00:37:09.630 --> 00:37:11.632 
如果你阻隔主流程太长时间

00:37:11.832 --> 00:37:13.200 
最好了解

00:37:13.267 --> 00:37:15.102 
你的工作应该在哪然后将其归位

00:37:16.370 --> 00:37:18.672 
第三点就是辨别并管理你的工作集

00:37:18.939 --> 00:37:21.141 
然后了解工作集会改变

00:37:21.341 --> 00:37:23.644 
根据应用的目前执行环境

00:37:23.911 --> 00:37:26.813 
你是前台 后台 PiP

00:37:27.047 --> 00:37:28.315 
了解你现在的位置

00:37:28.382 --> 00:37:30.551 
因为你的工作集不应该是相同的

00:37:31.852 --> 00:37:34.588 
第四个是使用缓存 然后响应内存警告

00:37:34.655 --> 00:37:39.226 
这个是作为一个多任务处理
好公民的基本

00:37:39.626 --> 00:37:40.460 
请回应它们

00:37:42.362 --> 00:37:44.064 
下一个利用虚拟内存系统

00:37:44.131 --> 00:37:45.132 
也就是我们说过的

00:37:45.532 --> 00:37:47.734 
了解你的app的数据性能

00:37:47.801 --> 00:37:49.269 
然后看如果你可以利用那些工具

00:37:49.336 --> 00:37:51.939 
来让系统为你管理内存

00:37:53.807 --> 00:37:56.310 
最后就是良好的表现需要权衡

00:37:56.610 --> 00:37:57.678 
你的app是有需求的

00:37:57.878 --> 00:37:59.513 
apps在你旁边运行的有需求

00:37:59.580 --> 00:38:00.948 
系统也有局限

00:38:01.982 --> 00:38:05.519 
辨别你的app如何可以适应环境

00:38:06.086 --> 00:38:08.488 
用更约束的资源因为这是

00:38:08.555 --> 00:38:11.792 
改善所有人用户体验的关键

00:38:12.593 --> 00:38:14.862 
因为我由一句话开始
那么我就由一句话结束

00:38:15.596 --> 00:38:16.663 
我在网上找到的这句话

00:38:16.730 --> 00:38:18.565 
据查尔斯·达尔文

00:38:18.932 --> 00:38:21.602 
称不是最强
或者最智慧的生存

00:38:21.935 --> 00:38:23.704 
是那些最会改变的生存

00:38:24.271 --> 00:38:26.173 
多任务处理和适应有关

00:38:26.273 --> 00:38:29.376 
然后最能适应的apps将会

00:38:30.077 --> 00:38:32.312 
带来最佳的用户体验

00:38:34.248 --> 00:38:36.083 
获取更多的信息 我非常推荐你们去

00:38:36.149 --> 00:38:37.417 
看一看文件

00:38:37.484 --> 00:38:40.220 
这里有一个新的采取多任务的指南
它很棒

00:38:40.721 --> 00:38:42.823 
去论坛讨论有技术支持

00:38:43.390 --> 00:38:44.925 
如果你有任何问题

00:38:44.992 --> 00:38:47.427 
找柯特卢·瑟特 联系他吧

00:38:47.494 --> 00:38:49.630 
他也是一个
SpringBoard的前任工程师

00:38:49.696 --> 00:38:51.331 
所以我相信他很愿意聆听你们的想法

00:38:54.468 --> 00:38:56.069 
我们关于这个有两个之前的讲座

00:38:56.136 --> 00:38:58.138 
我建议你们也去看它们

00:38:58.205 --> 00:39:00.674 
接下来也有性能和GCD讲座

00:39:01.341 --> 00:39:02.643 
谢谢大家 今天的到来

00:39:03.277 --> 00:39:04.711 
我等不及要看你们的apps了