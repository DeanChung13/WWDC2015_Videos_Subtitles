00:00:20.454 --> 00:00:23.056 
应用内苹果支付

00:00:23.690 --> 00:00:25.492 
大家好

00:00:26.260 --> 00:00:31.098 
欢迎来到WWDC欢迎来学习
应用内苹果支付

00:00:31.598 --> 00:00:36.003 
我叫尼克我是iOS应用
和框架团队的软件工程师

00:00:36.403 --> 00:00:42.543 
我将邀请理查我们将一起谈谈苹果支付

00:00:43.277 --> 00:00:46.680 
现在 希望你们
已经非常熟悉苹果支付了

00:00:46.980 --> 00:00:50.784 
或许你已经使用过或许你已经使用
苹果支付到商店进行购物了

00:00:51.318 --> 00:00:55.022 
但你同样可以在你的
应用内使用苹果支付

00:00:55.455 --> 00:00:57.925 
这就是我们将在
今天的环节里讨论的内容

00:00:58.192 --> 00:01:01.628 
这是一个会超过一个小时的环节

00:01:01.695 --> 00:01:03.297 
请把你的手表设置为静音

00:01:03.530 --> 00:01:04.565 
你不必站起来

00:01:05.032 --> 00:01:08.468 
我们今天将说及四个主要的部分

00:01:09.002 --> 00:01:12.239 
因此我们首先要谈的是
苹果支付到底是什么

00:01:12.573 --> 00:01:14.875 
我们将谈谈
你如何在你的应用中使用苹果支付

00:01:15.142 --> 00:01:17.778 
还有更重要的是
为什么要在你的应用中使用

00:01:18.912 --> 00:01:20.714 
然后我们将说说结构

00:01:21.114 --> 00:01:26.486 
技术的角度而言苹果支付是如何完成
支付的在那里发生了什么接下来呢

00:01:27.487 --> 00:01:32.492 
紧接着我的同事理查将
出来与大家谈谈关于设计问题

00:01:32.893 --> 00:01:34.695 
如何让你的应用为苹果支付做好准备

00:01:34.761 --> 00:01:36.964 
以及如何让应用
在视觉和感觉上给人带来好的体验

00:01:37.898 --> 00:01:41.001 
在那之后我想我们
将深究一下Xcode

00:01:41.702 --> 00:01:45.606 
然后我们将看看我们如何
在简短的几行代码中迅速

00:01:45.672 --> 00:01:48.942 
且轻松地在我们的应用中
设置好苹果支付

00:01:49.543 --> 00:01:51.144 
我想会很有趣

00:01:52.012 --> 00:01:52.846 
现在让我们开始吧

00:01:54.348 --> 00:01:55.215 
什么是苹果支付呢

00:01:55.782 --> 00:01:57.985 
如何在你的应用中使用呢

00:01:59.753 --> 00:02:05.158 
苹果支付是一种在应用内运行的

00:02:05.492 --> 00:02:09.496 
具有隐私性和安全性
非接触式的支付方式

00:02:09.562 --> 00:02:14.201 
它允许触摸付款你可以
用来购买实体商品和服务

00:02:14.735 --> 00:02:16.770 
这是一个来自Groupon的例子

00:02:18.572 --> 00:02:25.245 
苹果支付有许多好处
无论是对开发者还是用户

00:02:26.246 --> 00:02:28.615 
对于用户来说苹果支付是容易使用

00:02:29.082 --> 00:02:32.186 
你不需要重新输入任何付款或联系信息

00:02:32.753 --> 00:02:36.557 
你不需要记住几个月前
在网站上创建的密码

00:02:36.990 --> 00:02:39.159 
它们已经在那里准备就绪了

00:02:39.593 --> 00:02:40.794 
而且很安全

00:02:41.762 --> 00:02:43.230 
我使用Touch ID支付

00:02:44.198 --> 00:02:46.967 
这真的很好用而且最重要的是很私密

00:02:47.768 --> 00:02:50.304 
卡号不会告知商家

00:02:50.704 --> 00:02:52.906 
相反 你发送一个带有验证码的设备号

00:02:53.140 --> 00:02:56.476 
它只对当次购买有效

00:02:56.743 --> 00:02:59.213 
因此它是绝对安全绝对私密的

00:03:00.280 --> 00:03:05.152 
所有这些综合在一起不仅让你受益
也让开发者受益

00:03:05.586 --> 00:03:07.688 
因为由于你没有获取真正的卡号

00:03:07.955 --> 00:03:09.156 
你也无需处理它们

00:03:09.489 --> 00:03:12.059 
如果你以前从事过
电子商务我确定你知道

00:03:12.125 --> 00:03:15.395 
所有你要处理的问题例如实卡信息

00:03:16.163 --> 00:03:18.398 
因为苹果支付是如此易于使用

00:03:18.465 --> 00:03:22.469 
你将会看到更高的转换率
和更快结账速度

00:03:23.103 --> 00:03:25.672 
它是如此容易你甚至不需要用户注册

00:03:26.039 --> 00:03:28.709 
他们仅需打开应用就可以立即开始购买

00:03:28.775 --> 00:03:30.444 
而不需要一个现有账号 

00:03:31.645 --> 00:03:36.149 
而且最重要的是
用户非常喜欢苹果支付 

00:03:36.283 --> 00:03:37.818 
它们也喜欢应用使用苹果支付 

00:03:37.985 --> 00:03:39.386 
他们会充分利用苹果支付

00:03:40.220 --> 00:03:43.023 
你真的不需要我来打包票

00:03:43.090 --> 00:03:46.460 
我们继续说说
成百上千中应用里的仅有几种 

00:03:46.527 --> 00:03:48.595 
已经在商店内使用苹果支付

00:03:49.162 --> 00:03:51.198 
并且它们已经取得了一些惊人的成功

00:03:52.165 --> 00:03:53.901 
首先 我想要说说StubHub

00:03:54.501 --> 00:03:55.802 
它是一个很棒的苹果应用

00:03:56.270 --> 00:03:58.305 
你可以在手机上直接购买入场券

00:03:59.072 --> 00:04:01.008 
它们与苹果支付相结合并且它们发现 

00:04:01.074 --> 00:04:04.244 
使用苹果支付用户交易比普通客户

00:04:04.611 --> 00:04:05.812 
交易频率高出20%

00:04:06.146 --> 00:04:07.047 
这是一个很棒的结果

00:04:07.981 --> 00:04:12.452 
另一个很棒的苹果支付
应用是OpenTable

00:04:12.953 --> 00:04:14.388 
这周你就应该使用这个应用

00:04:14.454 --> 00:04:16.656 
你不仅可以预约也可以到饭店

00:04:16.723 --> 00:04:20.827 
在餐桌上用手机直接支付你的餐费

00:04:21.595 --> 00:04:23.630 
当他们把产品与苹果支付相结合

00:04:23.697 --> 00:04:26.533 
他们会看到交易量增涨了50%

00:04:27.901 --> 00:04:29.303 
还有更好的 

00:04:29.770 --> 00:04:31.505 
我们说说Staples

00:04:32.239 --> 00:04:34.208 
他们有一个非常棒的应用 

00:04:34.274 --> 00:04:36.710 
你可以通过手机直接购买
所有你需要的办公专业用品 

00:04:36.977 --> 00:04:39.179 
他们会看到总体转化率增涨 

00:04:39.246 --> 00:04:42.382 
那就是109%的用户使用苹果支付 

00:04:42.749 --> 00:04:45.652 
并成功支付

00:04:46.353 --> 00:04:48.922 
这是一个令人惊讶的数字

00:04:49.189 --> 00:04:51.525 
应用开发者都非常喜欢苹果支付

00:04:51.992 --> 00:04:54.862 
我们说说Fancy的CEO
乔伊·爱因霍恩

00:04:55.295 --> 00:04:59.900 
他说苹果支付不仅促成了更多的交易

00:05:00.501 --> 00:05:03.570 
而且激活了我们最大的消费群

00:05:04.137 --> 00:05:08.976 
我还可以告诉你
Fancy的iOS用户

00:05:09.376 --> 00:05:13.547 
在所有移动平台的消费
将两个因素合并为一

00:05:14.248 --> 00:05:17.784 
这些客户非常喜欢用苹果支付

00:05:17.851 --> 00:05:20.454 
来买东西 而且他们想买许多东西

00:05:21.021 --> 00:05:22.523 
这对你的应用来说是非常好的事情

00:05:23.123 --> 00:05:26.326 
现在 你们当中一些人可能会想 嗯 

00:05:26.460 --> 00:05:29.329 
苹果公司已经有一种允许应用在应用内

00:05:29.396 --> 00:05:32.866 
购买东西的机制它就是程序内购买

00:05:33.700 --> 00:05:36.537 
关于程序内购买 苹果支付的位置何在

00:05:37.471 --> 00:05:40.007 
它们有一些不同之处 
现在我想让你弄清楚它们 

00:05:41.275 --> 00:05:43.210 
一个最主要的不同是

00:05:43.277 --> 00:05:45.979 
它们实际上位于SDK

00:05:46.046 --> 00:05:47.948 
苹果支付存在于PassKit框架

00:05:48.015 --> 00:05:52.019 
而程序内购买存在于StoreKit

00:05:52.419 --> 00:05:53.687 
它们有不同的代码基 

00:05:54.121 --> 00:05:55.756 
你可以用它们来处理不同的东西

00:05:56.924 --> 00:06:00.827 
对于苹果支付
你将它用于实体商品和服务

00:06:01.228 --> 00:06:03.697 
我的意思是诸如健身馆会员 

00:06:03.997 --> 00:06:08.635 
合乘 杂货派送以及在实体店购买东西

00:06:09.136 --> 00:06:09.970 
包括实体物品

00:06:10.170 --> 00:06:13.040 
程序内购买适用于程序内的内容

00:06:13.106 --> 00:06:17.644 
和功能性 程序内货币
服务 数码订阅

00:06:18.979 --> 00:06:22.382 
另一个很大的不同是谁负责处理付款

00:06:22.749 --> 00:06:25.619 
当你用苹果支付你将通过

00:06:26.019 --> 00:06:27.421 
你自己的支付平台来处理付款

00:06:28.222 --> 00:06:29.790 
而当你使用程序内支付的时候 

00:06:30.090 --> 00:06:31.992 
苹果公司代替你处理付款

00:06:32.292 --> 00:06:34.127 
并按月将你的余额

00:06:34.194 --> 00:06:36.396 
和剩余应用交易发送给你

00:06:37.197 --> 00:06:38.398 
因此这里有一点点不同之处

00:06:38.799 --> 00:06:41.101 
它们在应用商店指南中也有略微不同

00:06:41.635 --> 00:06:44.505 
如果你对此感兴趣
第29节是关于苹果支付

00:06:44.938 --> 00:06:46.440 
第11节是关于程序内购买

00:06:46.707 --> 00:06:50.110 
获取这些指南 
看看什么你可以做 什么你不可以做

00:06:51.879 --> 00:06:55.115 
现在我们所有有安全元件芯片的设备

00:06:55.182 --> 00:06:58.418 
都可以使用苹果支付

00:06:59.086 --> 00:07:02.856 
因此安全元件是用来安全储存

00:07:02.923 --> 00:07:05.092 
你的卡片信息的硬件芯片

00:07:05.959 --> 00:07:09.162 
这在iPhone 6
iPhone 6 Plus

00:07:09.696 --> 00:07:12.699 
iPad Air 2 和 
iPad mini 3上已经实现

00:07:13.333 --> 00:07:15.202 
所有这些设备都支持苹果支付

00:07:16.003 --> 00:07:19.306 
直到最近苹果支付在美国可用了

00:07:19.806 --> 00:07:23.911 
我们昨天宣布它也即将在英国可用

00:07:24.578 --> 00:07:26.480 
对于苹果支付我们还有长期目标

00:07:26.547 --> 00:07:28.415 
因此如果你是一个开发者但不是来自

00:07:28.482 --> 00:07:30.551 
其中任何一个国家 
那么仍然值得好好想想

00:07:30.617 --> 00:07:32.386 
在将来如何将苹果支付

00:07:32.653 --> 00:07:34.922 
整合到你的应用中

00:07:37.391 --> 00:07:40.394 
这就是一个关于苹果支付的大体情况

00:07:41.061 --> 00:07:43.063 
希望我已经成功地说服你 

00:07:43.297 --> 00:07:45.599 
苹果支付是非常值得你在应用中使用的

00:07:46.433 --> 00:07:48.235 
现在我想回答一些关于

00:07:48.302 --> 00:07:52.206 
苹果支付的结构问题 
从技术的角度上讲 

00:07:52.773 --> 00:07:54.107 
支付是如何实现的

00:07:55.742 --> 00:08:00.614 
关于苹果支付你要做的第一件事情
是创建一个商家识别符

00:08:01.448 --> 00:08:04.918 
我们需要这个 
它是唯一能识别你商家身份的东西

00:08:05.452 --> 00:08:07.588 
现在 你可以在开发者网站

00:08:07.654 --> 00:08:08.989 
或者通过Xcode属性窗口

00:08:09.189 --> 00:08:11.124 
设置商家识别符

00:08:11.792 --> 00:08:14.127 
而且识别符由私人秘钥证书保护

00:08:14.494 --> 00:08:17.064 
这类似于其他在iOS上的识别符

00:08:17.130 --> 00:08:19.333 
诸如推送令牌识别符 

00:08:19.633 --> 00:08:21.635 
或者Wallet App
Pass识别符

00:08:22.503 --> 00:08:24.004 
现在我们运用此证书

00:08:24.404 --> 00:08:27.341 
对生成的支付信息进行安全加密 

00:08:27.741 --> 00:08:29.643 
作为商家来说这是唯一的

00:08:30.043 --> 00:08:32.880 
没有人可以破解支付信息 

00:08:32.946 --> 00:08:35.616 
这是苹果支付的另一个很棒的安全优势

00:08:36.350 --> 00:08:38.519 
我们推荐你把它设计成

00:08:38.585 --> 00:08:40.520 
标准反向域名解析格式

00:08:40.921 --> 00:08:42.422 
就像其它 许多识别符一样

00:08:42.688 --> 00:08:43.590 
从商家开始

00:08:43.957 --> 00:08:46.927 
这是一个我们稍后在
样板应用中将用到的例子

00:08:47.394 --> 00:08:50.197 
这是你使用苹果支付要做的第一件事

00:08:50.931 --> 00:08:53.066 
一旦我们有了一个商家识别符 
我们就准备就绪

00:08:53.700 --> 00:08:55.002 
可以在应用内启动苹果支付了

00:08:56.236 --> 00:09:00.374 
你要做的第一件事是调用支付表 

00:09:01.275 --> 00:09:02.409 
它由我们提供 

00:09:02.543 --> 00:09:05.145 
它总结了你的应用
需要支付的所有费用

00:09:06.280 --> 00:09:08.849 
然后用户使用Touch ID授权

00:09:10.350 --> 00:09:12.653 
并且你的应用将收到一条支付口令

00:09:12.853 --> 00:09:16.590 
支付口令包含所有你需要
支付费用的信息

00:09:17.758 --> 00:09:20.561 
它将被加密通过使用你的商家ID证书

00:09:21.061 --> 00:09:23.931 
那是独一无二的 
只有作为开发者的你可以解密它

00:09:25.532 --> 00:09:27.801 
然后你可以验证生效并启动处理程序

00:09:28.001 --> 00:09:30.304 
在你的应用里显示一份
成功支付情况清单

00:09:31.572 --> 00:09:34.241 
那里有许多信息让我们来详细了解

00:09:35.242 --> 00:09:37.377 
流程很少

00:09:37.945 --> 00:09:40.380 
我将系统分解为两个部分

00:09:40.447 --> 00:09:42.049 
iOS和安全元件

00:09:42.149 --> 00:09:45.152 
记住安全元件是唯一

00:09:46.086 --> 00:09:47.788 
安全储存你卡片信息的硬件芯片

00:09:48.789 --> 00:09:51.325 
第一你的应用将会展示
你的日程验证流 

00:09:51.491 --> 00:09:55.395 
你将询问iOS用户是否有任何
可用的苹果支付卡片

00:09:56.163 --> 00:09:59.032 
因为如果用户没有任何
可用的苹果支付卡片

00:09:59.166 --> 00:10:02.769 
或者设备不支持你需要
使用传统的验证流

00:10:04.471 --> 00:10:08.008 
现在假设它们可以然后
你将展示苹果支付表

00:10:08.509 --> 00:10:12.813 
然后你或者iOS将会验证
Touch ID是否有效

00:10:14.248 --> 00:10:15.382 
现在假设是有效的

00:10:15.449 --> 00:10:16.717 
你将传输一些信息到 

00:10:16.783 --> 00:10:19.186 
专用安全原件它将安全打包 

00:10:19.253 --> 00:10:21.722 
所有支付信息

00:10:22.022 --> 00:10:27.160 
这包括密码文件即付款需要的加密数据

00:10:28.128 --> 00:10:29.563 
然后会将它们发送至服务器

00:10:29.630 --> 00:10:32.032 
现在服务器将使用商家识别符

00:10:32.566 --> 00:10:35.068 
进行重新打包
这就是我们所做的全部事情

00:10:35.135 --> 00:10:36.170 
这是因为我们不想

00:10:36.703 --> 00:10:38.872 
在应用里推送你的证书

00:10:38.939 --> 00:10:41.074 
因此我们的服务器按新的路线发送支付

00:10:41.408 --> 00:10:43.477 
对它进行独一无二的加密 
然后返回到系统 

00:10:43.610 --> 00:10:47.147 
从而你可以将它发送以便处理

00:10:48.582 --> 00:10:50.684 
现在假设处理成功 

00:10:50.751 --> 00:10:52.286 
你可以删除支付表

00:10:52.553 --> 00:10:54.855 
并回到自己的确认屏

00:10:57.057 --> 00:10:58.692 
我想你们当中的许多人会有疑问  

00:10:58.926 --> 00:11:00.394 
所有这些都很好尼克 

00:11:00.460 --> 00:11:02.396 
但是我如何处理支付 

00:11:03.030 --> 00:11:04.097 
那是如何运行的 

00:11:04.431 --> 00:11:06.433 
让我们来谈谈你如何获取你的钱

00:11:06.900 --> 00:11:08.402 
这可能是一个你内心更关心的话题

00:11:09.303 --> 00:11:11.939 
这里有两个方法处理苹果支付

00:11:12.739 --> 00:11:14.875 
第一个这个是我们最想向你推荐的 

00:11:14.942 --> 00:11:16.176 
就是使用一个支付平台

00:11:17.010 --> 00:11:19.379 
支付平台可以处理

00:11:19.613 --> 00:11:22.649 
解密并代替你理解密码文件

00:11:23.483 --> 00:11:26.820 
当你签名后你提供
商家ID和证书到平台

00:11:26.987 --> 00:11:29.690 
平台将为你解密你只需发送
一个支付令牌给平台

00:11:30.457 --> 00:11:33.193 
一些支付平台实际上

00:11:33.260 --> 00:11:35.963 
在Swift或者C语言上
提供一些本地iOS发展配套原件

00:11:36.129 --> 00:11:38.532 
因此你可以很容易地启动并运行

00:11:39.433 --> 00:11:41.768 
由于这原因我们认为支付平台对于

00:11:42.302 --> 00:11:43.570 
大多数开发者来说是首选

00:11:45.405 --> 00:11:48.375 
许多许多的支付平台已经支持苹果支付

00:11:48.942 --> 00:11:51.545 
这只是其中的一小部分还有许多
其它的我们把她们列成了

00:11:51.612 --> 00:11:52.913 
清单放在了我们的网站上

00:11:54.081 --> 00:11:55.115 
这些是在美国的

00:11:55.549 --> 00:11:57.718 
很有可能你已经
使用了这些当中的其中一个

00:11:58.619 --> 00:12:01.154 
许多英国支付程序已经

00:12:01.221 --> 00:12:02.389 
可以支持苹果支付

00:12:02.789 --> 00:12:04.391 
如果你在英国你现在就可以回公司

00:12:04.458 --> 00:12:05.659 
商量如何使用支付程序

00:12:08.195 --> 00:12:10.430 
现在 正如我说的还有其它一种方法 

00:12:11.298 --> 00:12:12.833 
那就是你自行处理支付

00:12:14.134 --> 00:12:16.737 
现在我们推荐这种方法给你

00:12:16.803 --> 00:12:20.207 
如果你很擅长处理支付问题
并且你有一些现有支付基础构架 

00:12:20.707 --> 00:12:21.575 
如果你需要这样做 

00:12:22.042 --> 00:12:25.078 
你可以在自己的服务
器上解密支付令牌 

00:12:25.646 --> 00:12:28.015 
然后发送底层密码文件 

00:12:28.148 --> 00:12:29.550 
那就是为商家收单者

00:12:30.350 --> 00:12:32.753 
即收单银行生成的安全原件

00:12:34.021 --> 00:12:36.790 
如果你觉得不合理再次说明

00:12:37.090 --> 00:12:39.459 
我们只在你有现有支付
基础构架的前提下

00:12:39.526 --> 00:12:40.894 
向你推荐这种方法 

00:12:40.961 --> 00:12:43.297 
今天我们不会涉及到解密令牌

00:12:43.931 --> 00:12:45.499 
但是如果你想了解更多

00:12:45.566 --> 00:12:47.968 
关于该部分的内容
我们已经将一些文档放在网站上 

00:12:48.235 --> 00:12:49.937 
你可以在网站上查找
支付令牌相关文件 

00:12:50.070 --> 00:12:52.573 
同样今天和明天
我们将有工作人员在实验室里 

00:12:52.639 --> 00:12:55.843 
他们可以回答你们
关于自行处理支付的问题

00:12:58.846 --> 00:13:01.081 
好的 这是对如何使用苹果支付 

00:13:01.682 --> 00:13:04.184 
它如何完成付款的一点简单介绍

00:13:04.251 --> 00:13:08.555 
我想我们现在可以看看iOS这边了 

00:13:09.423 --> 00:13:11.525 
第一步就是要查看设计 

00:13:12.059 --> 00:13:14.428 
非常重要的是当你
使用苹果支付的时候 

00:13:14.494 --> 00:13:16.530 
要确保你的应用
充分利用了我们提供的功能

00:13:16.730 --> 00:13:18.365 
以及我们提供的设计

00:13:18.866 --> 00:13:21.602 
关于这方面更多的东西我将请理查

00:13:22.269 --> 00:13:24.805 
来为你讲讲如何获得苹果支付
的最佳用户体验

00:13:25.239 --> 00:13:26.073 
理查

00:13:31.578 --> 00:13:35.649 
大家好 我是理查·劳斯
我是苹果公司的

00:13:35.716 --> 00:13:38.485 
一个用户体验专员今天我在这里讲讲

00:13:38.552 --> 00:13:40.220 
如何在你的应用里使用苹果支付

00:13:40.721 --> 00:13:42.456 
得到最佳的体验

00:13:43.657 --> 00:13:46.660 
嗯 正如尼克说的用户喜欢苹果支付 

00:13:46.727 --> 00:13:48.495 
因为它使购物变的容易

00:13:48.896 --> 00:13:51.131 
作为一个商家这对你来说是非常好的 

00:13:51.198 --> 00:13:53.567 
因为购物越容易

00:13:54.067 --> 00:13:55.903 
交易就越容易达成

00:13:56.904 --> 00:14:00.274 
现在人们的购买欲可以是很短暂的

00:14:00.741 --> 00:14:06.013 
因此任何影响交易流的障碍
都可能使交易终止

00:14:07.014 --> 00:14:10.551 
好消息是苹果支付会提供所有

00:14:10.617 --> 00:14:13.520 
你完成交易所需要的东西 
因此你可以消除

00:14:13.587 --> 00:14:16.123 
现如今阻碍交易达成的许多障碍

00:14:17.257 --> 00:14:19.493 
没有必要让人们在

00:14:19.593 --> 00:14:21.862 
购物之前注册一个账号

00:14:23.330 --> 00:14:27.668 
我想不会有人喜欢繁琐的形式填写表格

00:14:29.303 --> 00:14:32.039 
你不必担心过时的账单

00:14:32.105 --> 00:14:35.642 
配送信息干扰
或者了解谁购买了什么东西

00:14:36.710 --> 00:14:40.214 
最近我提出任何时候我要购物

00:14:40.747 --> 00:14:42.482 
如果应用不使用苹果支付

00:14:42.950 --> 00:14:47.921 
我就必须经历
更新账单及麻烦的配送信息

00:14:48.689 --> 00:14:51.758 
如果我时间紧迫或者没有心情

00:14:51.825 --> 00:14:54.528 
填一堆表格我会选择

00:14:54.595 --> 00:14:57.097 
走开而不是把表格填好

00:14:58.165 --> 00:14:59.066 
让我给你举一个例子

00:14:59.132 --> 00:15:01.168 
关于如果没有苹果支付
情况会是什么样子的

00:15:02.469 --> 00:15:04.972 
假设我的狗需要一个新的项圈

00:15:05.506 --> 00:15:07.174 
我的朋友告诉我这家店

00:15:07.241 --> 00:15:08.942 
生产很棒的宠物物品

00:15:09.209 --> 00:15:11.612 
我会下载他们的应用开始找商品

00:15:13.046 --> 00:15:15.349 
哦 我要做的第一件事竟然是注册

00:15:16.383 --> 00:15:20.521 
嗯 我的朋友告诉我
这边的宠物物品很棒

00:15:20.587 --> 00:15:23.724 
这对我的狗来说是一件很棒的事

00:15:23.790 --> 00:15:24.992 
因此我继续并注册

00:15:25.559 --> 00:15:28.929 
即使是我很有可能
收到一些我现在不想要的邮件简讯

00:15:30.864 --> 00:15:33.200 
啊 下一步竟然是创建一个账号

00:15:34.101 --> 00:15:37.504 
我还没买任何东西
我也不确定是否会买东西

00:15:38.071 --> 00:15:42.376 
正常情况下到这个点
我就会彻底关闭这个应用 

00:15:42.643 --> 00:15:46.013 
但是因为你们大家都在这里我将继续

00:15:46.079 --> 00:15:47.147 
我将完成这些

00:15:48.215 --> 00:15:50.884 
最后 我找到了狗项圈这太好了

00:15:50.951 --> 00:15:52.553 
我的狗戴上它一定很棒

00:15:52.953 --> 00:15:55.289 
我开始交易过程

00:15:56.723 --> 00:15:58.792 
好的 首先是账单信息

00:15:59.226 --> 00:16:02.996 
有许多类型需要区分我住在公寓里 

00:16:03.063 --> 00:16:06.633 
所以我要从键盘上输入
对应我公寓号的号码

00:16:08.202 --> 00:16:11.205 
我想要它运输到
我上班的地方而不是家里 

00:16:11.271 --> 00:16:13.874 
所以我也要输入这些信息

00:16:15.142 --> 00:16:17.044 
好的 配送选项

00:16:17.110 --> 00:16:18.979 
好的 好的 我将选择其中之一

00:16:19.913 --> 00:16:22.416 
最后 这里就是我将从我的口袋里

00:16:22.482 --> 00:16:25.619 
拿出信用卡并输入所有信息的地方

00:16:26.720 --> 00:16:29.823 
需要六次输入以及一大堆的打字

00:16:30.591 --> 00:16:34.461 
让我分心的时间太多了

00:16:34.695 --> 00:16:38.265 
容易被打断 感到沮丧 甚至离开

00:16:39.833 --> 00:16:41.902 
如果我在我的上下班路上

00:16:41.969 --> 00:16:45.439 
搜寻这个狗项圈 嗯 当我站在

00:16:45.506 --> 00:16:47.641 
拥挤的月台上让我掏出我的信用卡

00:16:47.708 --> 00:16:49.243 
我真的高兴不起来

00:16:49.510 --> 00:16:50.677 
真的不想这样的情况

00:16:51.979 --> 00:16:54.515 
苹果支付可以更加快速地完成这些

00:16:55.616 --> 00:16:56.450 
启动应用

00:16:57.384 --> 00:17:00.020 
找到一个产品 无需注册账号

00:17:00.821 --> 00:17:02.256 
点击苹果支付按钮

00:17:03.257 --> 00:17:05.291 
把我的大拇指
放到Touch ID 完成 

00:17:06.126 --> 00:17:08.127 
两次点击 不需要任何打字

00:17:08.829 --> 00:17:09.997 
这快多了

00:17:12.266 --> 00:17:15.669 
因为苹果支付
你省去了一大堆麻烦

00:17:16.236 --> 00:17:18.338 
更少次数的点击意味着更多的销售

00:17:19.873 --> 00:17:24.478 
接下来 让我们讨论
如何使苹果支付整合到你的交易流

00:17:25.444 --> 00:17:29.416 
第一件要考虑的事是
让人们可以快捷地购买物品

00:17:30.150 --> 00:17:32.686 
你不需要为了开始交易过程

00:17:32.753 --> 00:17:35.155 
而把所有东西都放入购物车

00:17:36.523 --> 00:17:38.859 
这是Chairish 我正找寻
一些适合我家里的

00:17:38.926 --> 00:17:40.994 
有趣的东西这些玻璃看起来很有趣

00:17:41.628 --> 00:17:43.130 
苹果支付按钮就在这里

00:17:43.830 --> 00:17:46.500 
我不需要把它们放入购物车

00:17:46.567 --> 00:17:49.269 
然后点击购物车 
然后说我准备好要结账了

00:17:49.870 --> 00:17:52.306 
这种方法减少了完成交易

00:17:52.372 --> 00:17:53.774 
需要敲击的次数

00:17:55.909 --> 00:17:58.011 
Groupon采取了一种
非常类似的方法

00:17:58.745 --> 00:18:01.014 
我即将在芝加哥度过几个星期

00:18:01.181 --> 00:18:02.816 
我正找寻一些有趣的事来做

00:18:02.883 --> 00:18:04.084 
这看起来很有趣

00:18:04.852 --> 00:18:06.520 
因此当我点击更多的信息

00:18:06.587 --> 00:18:09.089 
苹果支付按钮就在旁边

00:18:09.656 --> 00:18:13.026 
这让我很容易就可以快速购买

00:18:14.995 --> 00:18:19.066 
因此考虑一下添加苹果支付按钮
放在产品详情旁边

00:18:19.166 --> 00:18:22.102 
让人们可以快捷地开始交易

00:18:23.904 --> 00:18:26.440 
嗯 如尼克说的用户们喜欢苹果支付

00:18:26.907 --> 00:18:29.576 
因此如果安装到一台支持的设备上

00:18:30.277 --> 00:18:32.279 
并别激活一张你接受的银行卡 

00:18:32.646 --> 00:18:36.416 
很有可能他们将使用苹果支付因此你
应当将苹果支付设为默认设置

00:18:37.484 --> 00:18:38.719 
现在尼克将向你展示

00:18:38.785 --> 00:18:39.953 
如何在几分钟内进行设置

00:18:40.554 --> 00:18:42.422 
如果他们没有支持的设备

00:18:42.956 --> 00:18:45.359 
并且他们没有激活的卡你也不接受 

00:18:45.492 --> 00:18:48.962 
那就没有必要
展示苹果支付按钮或者信息 

00:18:49.530 --> 00:18:52.432 
仅需像今天那样完成交易即可

00:18:53.267 --> 00:18:56.904 
但如果他们有 
默认苹果支付为支付方式 

00:18:57.004 --> 00:18:59.273 
然后突出展示这些按钮

00:19:00.774 --> 00:19:05.279 
现在iOS 8.3苹果支付按钮
可以通过API使用

00:19:05.879 --> 00:19:08.348 
所以你无需担心要调整图形的大小

00:19:08.415 --> 00:19:10.083 
以及如何嵌入到你的应用

00:19:10.384 --> 00:19:11.418 
这是非常容易的

00:19:12.419 --> 00:19:15.122 
当你正考虑你要
你要将它们放置在哪里 

00:19:15.722 --> 00:19:17.925 
他们应该至少与

00:19:18.325 --> 00:19:20.027 
其他付款方式按钮一样大

00:19:21.061 --> 00:19:22.896 
更大一点当然更好

00:19:24.965 --> 00:19:26.400 
这就是Fancy的做法

00:19:26.466 --> 00:19:28.802 
他们将苹果支付按钮放于添加

00:19:28.869 --> 00:19:32.706 
到购物车按钮旁边 
Shoptiques将它并排着放置

00:19:32.873 --> 00:19:34.842 
这些都是很好的实现方法

00:19:36.977 --> 00:19:39.813 
现在一旦你的用户轻敲苹果支付按钮

00:19:40.147 --> 00:19:41.615 
下一个他们将看到的是付款单 

00:19:41.682 --> 00:19:45.953 
因此他们可以快速地
放下他们的大拇指并完成交易

00:19:46.753 --> 00:19:50.390 
你不会因为被询问其他任何信息
而打断这个过程

00:19:50.991 --> 00:19:53.393 
只有当你将要销售

00:19:53.460 --> 00:19:54.862 
即将达成的时候它才会被打断

00:19:57.097 --> 00:19:59.666 
苹果支付将提供给你

00:19:59.733 --> 00:20:01.602 
所有完成交易需要的核心信息

00:20:02.035 --> 00:20:05.439 
有一件你可能需要提前做的是促销代码

00:20:05.506 --> 00:20:07.174 
或者其他打折代码

00:20:08.108 --> 00:20:10.377 
在你的应用里找到一个位置

00:20:10.444 --> 00:20:12.980 
像在家里的地方在那里当某人点击

00:20:13.046 --> 00:20:15.048 
苹果支付按钮之后
它不会打断出现的付款单

00:20:16.717 --> 00:20:18.886 
好的 我们说了很多关于付款单 

00:20:18.952 --> 00:20:20.320 
让我给你一些提示 

00:20:20.420 --> 00:20:22.422 
关于自定义你所需要的东西

00:20:23.757 --> 00:20:25.826 
当然 你需要付款方式

00:20:25.893 --> 00:20:28.729 
但你还需要账单 配送

00:20:28.795 --> 00:20:30.998 
和联系信息如果你使用苹果支付 

00:20:32.766 --> 00:20:35.903 
正如尼克说的苹果支付是相当安全的

00:20:36.036 --> 00:20:38.939 
我们希望你不需要

00:20:39.039 --> 00:20:40.874 
只是验证而收到账单信息

00:20:41.375 --> 00:20:44.278 
如果系统如果请求的
用户仍然可以获得账单

00:20:45.746 --> 00:20:48.282 
如果你销售实体产品你需要

00:20:48.515 --> 00:20:50.651 
将它发送给某人你需要一个配送地址

00:20:51.552 --> 00:20:54.721 
在付款单里更改这些对于用户来说

00:20:54.788 --> 00:20:55.856 
是很容易的

00:20:55.923 --> 00:20:59.026 
他们只需轻敲它付款单里就会展示

00:20:59.092 --> 00:21:01.195 
最近用过的地址列表

00:21:01.695 --> 00:21:04.698 
并且可以快速添加一个新地址

00:21:05.666 --> 00:21:09.169 
你之前可能收集了

00:21:09.236 --> 00:21:11.405 
用户已有的配送信息 

00:21:11.572 --> 00:21:14.875 
但正如我之前说的 
很有可能苹果支付信息

00:21:14.942 --> 00:21:19.313 
是当前最新的因此我们推荐 ̨你相信它

00:21:21.381 --> 00:21:24.651 
你可以要求一封联系邮件和电话号码

00:21:25.085 --> 00:21:27.421 
因此如果你想要通过确认邮件

00:21:27.487 --> 00:21:30.624 
跟踪交易或者防止任何配送问题 
你可能需要一个电话号码 

00:21:30.691 --> 00:21:33.360 
这些都是可以获取的

00:21:34.194 --> 00:21:37.998 
在iOS 9你同样可以
要求一个联系人名字

00:21:38.932 --> 00:21:41.702 
让我们假设某人要订一些食物

00:21:41.835 --> 00:21:43.170 
然后到餐厅里选择

00:21:43.370 --> 00:21:45.572 
你可能需要一个联系人名字 

00:21:45.639 --> 00:21:48.575 
当他们到达柜台的时候 
你可以告诉职员订单是给哪个人的

00:21:50.677 --> 00:21:52.446 
现在 如果你不需要

00:21:52.513 --> 00:21:54.681 
所有这些信息不要提出请求

00:21:55.315 --> 00:21:58.652 
尊重你客户的隐私只问他们需要什么

00:21:59.319 --> 00:22:01.722 
Uber只要求邮件和电话号码

00:22:01.855 --> 00:22:03.390 
他们不要求填配送地址

00:22:03.457 --> 00:22:04.391 
因为他们不需要它

00:22:08.161 --> 00:22:10.664 
现在你可以具体说明配送方法

00:22:10.731 --> 00:22:12.733 
或在付款单中挑选出正确的方法

00:22:13.800 --> 00:22:16.403 
苹果商店中提供
多种多样的配送选择

00:22:16.470 --> 00:22:18.238 
因此客户可以点击选择

00:22:18.639 --> 00:22:20.607 
然后可以看见其它可行的选择

00:22:21.241 --> 00:22:23.177 
那里还有交付预测的位置 

00:22:23.644 --> 00:22:26.780 
因此你可以帮助你的客户
选择合适他们的选项

00:22:29.550 --> 00:22:33.453 
同样还可以列出配送花费 税收

00:22:33.654 --> 00:22:35.189 
甚至是负价值物品

00:22:35.255 --> 00:22:37.324 
如小计后的折扣

00:22:38.125 --> 00:22:42.296 
现在 这不是一行一行的

00:22:42.529 --> 00:22:43.897 
某人购买的所有产品清单 

00:22:44.464 --> 00:22:47.701 
而是加入小计的商品清单

00:22:49.336 --> 00:22:52.906 
因此在这里你可以看到Keep 
是如何列出配送清单

00:22:52.973 --> 00:22:56.543 
税收和商品小计处理

00:22:57.811 --> 00:23:00.781 
现在 如果你没有任何这些产品 

00:23:00.848 --> 00:23:03.817 
你甚至不需要列出小计 
你可以只列出总计

00:23:04.418 --> 00:23:07.354 
这使得付款单简洁 

00:23:07.487 --> 00:23:11.225 
这样客户就不用花太多时间在审核上 
这就意味着更快速的交易时间

00:23:12.860 --> 00:23:14.528 
如果你增加产品你可以列出它们 

00:23:14.595 --> 00:23:17.464 
如果你没有只需展示总数

00:23:18.999 --> 00:23:20.667 
可能会出现一些总数

00:23:20.734 --> 00:23:22.769 
不清楚的例子

00:23:23.604 --> 00:23:26.440 
在这些情况下很重要的是

00:23:26.540 --> 00:23:28.208 
你要有一个清洗的预估

00:23:29.710 --> 00:23:32.913 
Uber在Bay地区
是一款非常流行的汽车服务应付

00:23:33.347 --> 00:23:36.917 
而且总价直到乘行结束才会被结算

00:23:37.584 --> 00:23:39.419 
现在 它们处理付款单语言

00:23:39.486 --> 00:23:41.421 
非常清晰易懂

00:23:41.922 --> 00:23:47.361 
我发现总价总是在统计时间
和距离后可以计算得到

00:23:49.329 --> 00:23:51.198 
因此如果你正处理订阅

00:23:51.265 --> 00:23:54.301 
反复出现你预估的付款或情形 

00:23:54.701 --> 00:23:57.905 
确保你在付款单中使用的
语言是清晰易懂的 

00:23:58.238 --> 00:24:00.607 
因为没有人喜欢后来的惊喜收费

00:24:02.643 --> 00:24:05.779 
最后 确保你的地址你的公司名

00:24:06.380 --> 00:24:09.049 
显示在付款单下方的总额旁边

00:24:10.450 --> 00:24:13.086 
这就是客户希望在

00:24:13.153 --> 00:24:15.889 
银行费用上看见的名字和总额

00:24:16.390 --> 00:24:18.258 
因此在这里

00:24:18.458 --> 00:24:21.895 
我清楚地看到Fancy
有一个299美元的费用

00:24:22.763 --> 00:24:26.900 
再次重复 没人喜欢在他们的银行
对账单看到充满疑问的费用

00:24:26.967 --> 00:24:28.135 
以及让人惊讶的数量

00:24:28.335 --> 00:24:30.103 
因此现在你应该非常清楚了

00:24:31.839 --> 00:24:34.441 
这就是自定义付款单

00:24:34.508 --> 00:24:35.876 
另外一件你唯一要做的事情

00:24:35.943 --> 00:24:39.246 
是确认交易正如你今天已经做的那样

00:24:40.380 --> 00:24:42.983 
一旦有客户用Touch ID付款 

00:24:43.050 --> 00:24:45.519 
拇指打印按钮将会变为已完成状态 

00:24:46.587 --> 00:24:49.923 
付款单将被确认用户将返回到应用

00:24:50.657 --> 00:24:53.493 
<br/> 
因此你可以让他们安心

00:24:54.061 --> 00:24:57.364 
告诉他们订单已经在处理 

00:24:57.431 --> 00:24:59.933 
而且他们会在邮件中收到更多信息

00:25:02.569 --> 00:25:05.539 
当你正考虑如何使苹果支付

00:25:05.606 --> 00:25:07.774 
整合到你的应用之中 

00:25:07.841 --> 00:25:09.943 
尝试将所有的障碍移开进行一次购买

00:25:10.477 --> 00:25:14.448 
不需要让人们在购买
东西前注册一个账号

00:25:16.049 --> 00:25:18.585 
明显地展示苹果支付按钮

00:25:18.652 --> 00:25:21.788 
如果他们的设备支持苹果支付
而且有你接受的已激活的银行卡

00:25:22.756 --> 00:25:24.925 
你只要确保你定制的付款单

00:25:24.992 --> 00:25:26.026 
是合适的即可

00:25:26.360 --> 00:25:29.062 
别忘记把你的公司名放在

00:25:29.129 --> 00:25:33.333 
底部的总额旁边然后确认交易
就像你今天做的那样

00:25:34.568 --> 00:25:38.038 
我希望这些会
让你在应用里设置苹果支付的时候

00:25:38.105 --> 00:25:39.573 
有一个好的体验

00:25:40.040 --> 00:25:41.975 
我今天下午将在苹果支付实验室 

00:25:42.042 --> 00:25:45.245 
如果你还有任何关于
苹果支付的UI问题 

00:25:45.312 --> 00:25:47.948 
或者你想要更多关于

00:25:48.815 --> 00:25:52.052 
如何在你的应用里处理支付的建议 
我将很乐意为你们解决 

00:25:52.786 --> 00:25:54.755 
但是现在我将把舞台交回给尼克 

00:25:54.821 --> 00:25:57.224 
他将向你们展示如何将
所有这些放进代码里 谢谢

00:26:06.066 --> 00:26:06.900 
谢谢 理查

00:26:07.134 --> 00:26:09.837 
好的 我想我们已经
做好了准备看看总体情况了

00:26:10.003 --> 00:26:11.638 
我想我们已经准备好要谈谈一些代码

00:26:12.272 --> 00:26:13.173 
这是非常令人激动的

00:26:14.775 --> 00:26:17.277 
现在我们将建立一个样板应用

00:26:18.212 --> 00:26:21.648 
它将基于理查向你们展示的应用 

00:26:22.115 --> 00:26:23.483 
但我将把UI简化很多

00:26:23.684 --> 00:26:25.118 
因为我们只想专注于代码

00:26:25.786 --> 00:26:27.020 
它将要求一项付款

00:26:27.654 --> 00:26:30.924 
它将展示付款单然后处理授权

00:26:32.693 --> 00:26:35.863 
在我们深究Xcode之前
让我们来看看

00:26:36.163 --> 00:26:37.264 
组成苹果支付的类

00:26:39.566 --> 00:26:41.969 
我要讨论的第一类

00:26:42.169 --> 00:26:44.605 
是
PKPaymentSummaryItem

00:26:44.771 --> 00:26:46.807 
再次说明
苹果支付存在于Passkit 

00:26:47.307 --> 00:26:48.542 
因此我们可以在那里找到它

00:26:49.476 --> 00:26:53.247 
PKPaymentSummaryItem
描述你将在付款单上

00:26:53.313 --> 00:26:55.115 
索价的个别项目例如税收 

00:26:55.349 --> 00:26:57.351 
配送 或总额

00:26:58.519 --> 00:27:03.991 
然后你把所有项目综合起来
放入PKPaymentSummaryItem

00:27:05.092 --> 00:27:08.228 
现在PKPaymentRequest是一个对象

00:27:08.295 --> 00:27:10.531 
它描述你要索价的项目

00:27:10.731 --> 00:27:13.700 
以及你想如何支付的信息 

00:27:13.767 --> 00:27:15.836 
还有诸如你想要支持的卡网

00:27:16.069 --> 00:27:17.471 
你要求什么样的配送信息

00:27:17.538 --> 00:27:19.006 
如此这类的事

00:27:20.440 --> 00:27:22.176 
你作出询问并将它发送

00:27:22.276 --> 00:27:25.345 
到PKPaymentAuthorization 
ViewController 

00:27:25.412 --> 00:27:26.880 
这是付款单类

00:27:27.648 --> 00:27:29.116 
就像其它所有视图控制器

00:27:29.183 --> 00:27:31.652 
你运用
presentViewController进行展示

00:27:32.386 --> 00:27:35.856 
然后当这些都做完了你将接收到
一个PKPayment对象

00:27:36.990 --> 00:27:40.127 
一个PKPayment对象包含
你需要处理

00:27:40.194 --> 00:27:41.261 
付款的信息

00:27:42.062 --> 00:27:43.697 
以及展示确认单

00:27:43.764 --> 00:27:45.265 
或设备回执

00:27:45.332 --> 00:27:47.968 
可能需要的信息

00:27:51.271 --> 00:27:54.908 
因此第一件我们要做的事情是

00:27:55.275 --> 00:27:58.312 
检查设备是否支持苹果支付

00:28:00.214 --> 00:28:01.982 
我们要看看它们是否有

00:28:02.216 --> 00:28:03.350 
我们可接受的付款卡

00:28:03.917 --> 00:28:07.988 
首先 我创建一个
paymentNetworks数组

00:28:08.655 --> 00:28:11.358 
它包含字符串常量你可以

00:28:11.658 --> 00:28:13.627 
将它用于苹果支付支持的网络

00:28:14.161 --> 00:28:17.564 
我在这里检查用户是否有任何
MasterCard或Visa卡

00:28:19.733 --> 00:28:20.968 
然后你将这个数组

00:28:21.201 --> 00:28:23.670 
传输到一个类
PKPaymentAuthorization

00:28:23.737 --> 00:28:25.138 
ViewController

00:28:25.339 --> 00:28:28.041 
它称为
canMakePaymentsUsingNetworks

00:28:29.042 --> 00:28:32.913 
现在 如果这返回为真你将知道用户

00:28:32.980 --> 00:28:34.915 
创建了苹果支付

00:28:35.082 --> 00:28:37.484 
并且他们有与你要求相匹配的卡
他们可以付款

00:28:38.919 --> 00:28:41.388 
如果返回为假你可以把用户

00:28:41.555 --> 00:28:43.123 
带到传统支付流

00:28:44.424 --> 00:28:47.394 
现在你同样可以用其它一些方法

00:28:48.061 --> 00:28:51.265 
我们有一个方法可以测试硬件
是否支持苹果

00:28:51.331 --> 00:28:53.600 
因此你不必做任何复杂的设备检查

00:28:53.667 --> 00:28:55.769 
你只需要调用
canMakePayments 

00:28:55.836 --> 00:28:56.904 
然后它将回馈给你为真

00:28:56.970 --> 00:28:59.173 
如果设备有支持苹果支付的硬件

00:29:00.107 --> 00:29:03.544 
在iOS9中 有一点新的
你同样可以检查

00:29:03.710 --> 00:29:07.681 
银行卡的容量容量主要指的是信用额度

00:29:08.415 --> 00:29:11.585 
我想这在英国和欧洲是非常实用的

00:29:11.785 --> 00:29:15.589 
在那里你可能
只想对借记卡进行检查或收费

00:29:19.259 --> 00:29:22.863 
假设用户有一张卡可以用于付款

00:29:24.264 --> 00:29:26.133 
让我们创建一个PK付款请求

00:29:27.000 --> 00:29:28.435 
让我们将让付款生效

00:29:29.670 --> 00:29:31.672 
因此我们想要做的第一件事

00:29:32.239 --> 00:29:35.209 
是传输我们的商家识别符以便我们知道

00:29:35.809 --> 00:29:37.911 
如何正确地加密付款

00:29:38.846 --> 00:29:40.981 
现在你可能已经在开发者门户网站

00:29:41.114 --> 00:29:43.951 
或者在Xcode属性窗口设置了

00:29:44.284 --> 00:29:46.520 
如果你使用Xcode你也获得权限

00:29:47.054 --> 00:29:48.922 
因为所有这些API都授权了

00:29:50.691 --> 00:29:52.626 
然后你输入一个国家代码

00:29:52.693 --> 00:29:55.896 
这是一个标准的ISO
国家代码它是你的

00:29:56.597 --> 00:29:58.298 
付款处理器你将进行

00:29:58.365 --> 00:30:00.200 
收费的所在国家的代码

00:30:00.267 --> 00:30:02.102 
不是用户或者

00:30:02.669 --> 00:30:05.372 
货币所在的国家因为有货币代码

00:30:05.439 --> 00:30:09.643 
用来表示货币
在ISO标准代码中同样如此

00:30:10.511 --> 00:30:12.813 
你可以在苹果支付中
收取任何你想要的货币

00:30:13.413 --> 00:30:17.050 
这里我仅用USD但如果你想变为英镑

00:30:17.117 --> 00:30:18.585 
或欧元这是很容易做到的

00:30:20.954 --> 00:30:23.023 
下一步你将提供一些
supportedNetworks

00:30:24.091 --> 00:30:25.993 
supportedNetworks
再次说明

00:30:26.059 --> 00:30:27.561 
它是一个类似
canMakePayments的数组

00:30:27.628 --> 00:30:29.296 
检查你接受的
supportedNetworks

00:30:29.363 --> 00:30:31.298 
在这里我作出一点点变化

00:30:31.565 --> 00:30:34.368 
我说我可以支持American
 Express和Visa卡

00:30:36.436 --> 00:30:37.437 
这里还有另外一个

00:30:37.571 --> 00:30:39.273 
在PaymentRequest上
需要的特性

00:30:39.339 --> 00:30:41.074 
它起初看起来有点神秘

00:30:41.675 --> 00:30:43.844 
那就是
merchantCapabilities

00:30:44.378 --> 00:30:48.582 
结果是我们有两种方法生成付款数据

00:30:48.649 --> 00:30:51.685 
其中一种叫3DS另一种叫EMV

00:30:52.119 --> 00:30:55.722 
你不需要知道他们是如何运行的

00:30:56.156 --> 00:30:58.725 
你们中大多数人都会使用3DS 

00:30:58.792 --> 00:31:01.128 
你应该检查你的付款处理器
或者咨询银行

00:31:01.195 --> 00:31:02.963 
让它们为你进行正确的设置

00:31:03.297 --> 00:31:05.265 
再次说明
你们中的大多数都会用3DS 

00:31:05.532 --> 00:31:09.636 
但是付款平台或者处理器会给你
你需要的精确的建议

00:31:10.103 --> 00:31:12.773 
3DS标准就点到为止

00:31:14.474 --> 00:31:18.745 
最后PaymentRequest
最后一个也可能是最重要的属性

00:31:19.279 --> 00:31:20.647 
那就是我们实际要收费的东西

00:31:22.082 --> 00:31:24.218 
现在在我们讨论它之前我们先看看

00:31:24.284 --> 00:31:26.653 
一些iOS 9里的新东西

00:31:27.354 --> 00:31:29.756 
你可以使用
merchantCapabilities属性

00:31:29.823 --> 00:31:32.526 
来允许某些类型的卡可用于付款

00:31:32.860 --> 00:31:36.196 
这有一些掩码如果你想把
卡限制为借记卡

00:31:36.630 --> 00:31:39.066 
相比于在美国这方案在欧洲更普遍

00:31:39.132 --> 00:31:40.968 
你可以很容易地做到

00:31:43.737 --> 00:31:47.241 
因此一个
PKPaymentSummaryItem 

00:31:47.508 --> 00:31:49.543 
描述一些你想要收费的信息

00:31:49.910 --> 00:31:52.513 
它有一个数量和一个标签

00:31:52.579 --> 00:31:54.047 
标签是一个字符串

00:31:54.381 --> 00:31:57.551 
数量是一个类
称为NSDecimalNumber

00:31:58.085 --> 00:32:01.889 
它是一个Cocoa类之前你可能已经
发现NSDecimalNumber 

00:32:01.989 --> 00:32:04.258 
它精确地表示基数10的浮动点数

00:32:04.324 --> 00:32:07.594 
当你处理财务和货币工作时

00:32:07.861 --> 00:32:09.663 
浮动点数非常重要

00:32:10.597 --> 00:32:13.700 
因此这避免了任何基础2的浮点错误

00:32:14.401 --> 00:32:16.370 
这里有一些很方便的初始化器

00:32:16.436 --> 00:32:17.704 
它有一些字符串初始化器

00:32:18.405 --> 00:32:20.107 
它同样有一对初始化器

00:32:20.174 --> 00:32:22.543 
你可以从另外一个
NSDecimalNumber

00:32:23.076 --> 00:32:24.378 
进行初始化 我将使用字符串

00:32:25.179 --> 00:32:27.447 
我在这里创建一个总结项目

00:32:27.514 --> 00:32:30.450 
因为正如理查说的
我如果只有一件东西想要收费

00:32:30.517 --> 00:32:31.952 
我应该只有一个单独的总额

00:32:32.452 --> 00:32:36.323 
标签是Apple Inc 
因为那是将在账单上显示的物品

00:32:37.124 --> 00:32:40.694 
我从字符串中
创建一个数额$349.99

00:32:41.628 --> 00:32:43.230 
在我的数组中只有一个单独的项目

00:32:43.297 --> 00:32:45.065 
我将它传到我的
SummaryItems

00:32:46.266 --> 00:32:48.035 
强调说明一下总结项目数组

00:32:48.101 --> 00:32:50.838 
最后一个项目是你想要收费的总数

00:32:50.938 --> 00:32:53.407 
这是我们将授权并发送给你的

00:32:56.310 --> 00:32:58.278 
付款请求很完美

00:32:58.645 --> 00:32:59.646 
我们为把请求发送到

00:33:00.180 --> 00:33:02.182 
请求付款授权的视图控制器

00:33:03.784 --> 00:33:05.819 
这里显示了付款信息 

00:33:06.053 --> 00:33:08.288 
在应用上是这样显示模块

00:33:09.156 --> 00:33:12.526 
在iPad上 则是一种形式单
是多任务形式单

00:33:12.593 --> 00:33:14.494 
它将覆盖整个屏幕

00:33:14.561 --> 00:33:16.330 
如果你有两个并排应用

00:33:16.396 --> 00:33:19.266 
它们不会同时对两件东西收费

00:33:19.433 --> 00:33:20.734 
它完全是模块显示的

00:33:22.569 --> 00:33:24.872 
它的初始化很简单

00:33:25.172 --> 00:33:26.640 
仅需通过
paymentRequest

00:33:26.840 --> 00:33:29.343 
它同样有个指派我们等会会说到

00:33:30.477 --> 00:33:32.412 
你展示它就像其它任何控制器

00:33:32.513 --> 00:33:34.882 
你很有可能想要通过动画进行展示

00:33:37.251 --> 00:33:39.820 
而且你可能想要使用
苹果支付按钮进行展示

00:33:40.787 --> 00:33:45.559 
现在 从iOS8.3开始我们有这个
很棒的类PKPaymentButton

00:33:46.793 --> 00:33:49.196 
它有各种颜色的预定款式

00:33:49.496 --> 00:33:51.732 
而且很重要的是它已经完全本地化

00:33:51.798 --> 00:33:53.200 
因此我们真的推荐你使用

00:33:54.601 --> 00:33:57.037 
它就像一个UI按钮
它是一个UIButton子类

00:33:57.171 --> 00:33:59.606 
如果你需要8.3版本以下的

00:33:59.706 --> 00:34:01.408 
在我们的开发者网站

00:34:01.608 --> 00:34:03.243 
有一些可用的图片你可以使用

00:34:03.410 --> 00:34:05.279 
在环节的末尾
会有一个链接

00:34:07.714 --> 00:34:13.687 
关键时刻到了
让我们看看演示是否能够成功

00:34:14.487 --> 00:34:16.556 
我们将转换到演示机器

00:34:19.426 --> 00:34:20.260 
漂亮

00:34:20.594 --> 00:34:23.096 
好的 在这里
我创建了一些很简单的应用 

00:34:23.230 --> 00:34:25.364 
所有这些样板代码也将在

00:34:25.431 --> 00:34:28.335 
开发者网站上可以下载

00:34:29.902 --> 00:34:31.405 
让我们看看它现在是什么样子的

00:34:31.471 --> 00:34:33.239 
我还没有在苹果支付里执行任何东西

00:34:35.475 --> 00:34:36.643 
让我么把模拟器弄小一点

00:34:37.210 --> 00:34:39.146 
一个小的购物应用

00:34:40.581 --> 00:34:43.784 
你可以看见我获得一些价格
和通过苹果支付按钮购买的描述

00:34:44.952 --> 00:34:45.985 
好的 什么事也没发生

00:34:46.753 --> 00:34:47.688 
让我们把代码放进去

00:34:48.554 --> 00:34:50.257 
让我们谈谈到目前为止我获得了什么

00:34:50.324 --> 00:34:54.360 
在这里你可以看见我有一个
canMakePaymentsUsingNetworks

00:34:56.063 --> 00:34:58.265 
我还有这个
supportedNetworks属性

00:34:58.332 --> 00:34:59.900 
因此我进一步地明确这些

00:35:00.200 --> 00:35:01.335 
让我们看看那些

00:35:02.236 --> 00:35:03.070 
这里

00:35:04.037 --> 00:35:07.708 
你可以看到我支持所有四种银行卡
American Express卡

00:35:08.108 --> 00:35:10.644 
Discover卡 
MasterCard卡和Visa卡

00:35:12.312 --> 00:35:14.047 
如果支持可用我会添加一个按钮

00:35:14.815 --> 00:35:18.151 
我有这种
applePayButtonPressed方法

00:35:18.318 --> 00:35:20.087 
因此我将添加内容到那里

00:35:20.621 --> 00:35:22.456 
让我们设置我们的
paymentRequest

00:35:23.257 --> 00:35:24.324 
好的 在我们开始设置

00:35:24.391 --> 00:35:26.260 
在设置paymentRequest
之前我们要再三检查

00:35:26.326 --> 00:35:27.394 
我们的权限已经设置好

00:35:27.895 --> 00:35:30.063 
所以它们全都列举在权限里

00:35:30.731 --> 00:35:32.299 
你可以看见我的有点红

00:35:32.432 --> 00:35:33.333 
但不用担心

00:35:33.500 --> 00:35:35.068 
稍后你将看见这是为什么

00:35:37.271 --> 00:35:38.672 
好的 让我们返回到我们的代码

00:35:39.673 --> 00:35:41.975 
让我们设置它创建我们的
paymentRequest

00:35:42.843 --> 00:35:44.845 
我们一行一行地看发生了什么

00:35:45.546 --> 00:35:46.547 
把滚动条向上滚动一点

00:35:47.648 --> 00:35:51.084 
好的 首先我们
创建paymentRequest 

00:35:51.818 --> 00:35:54.922 
然后我们传输商家识别符

00:35:54.988 --> 00:35:58.258 
为了方便起见 我将它界定为结构类属

00:35:59.860 --> 00:36:02.129 
然后我传输必要属性
countryCode

00:36:02.196 --> 00:36:05.399 
和currencyCode 现在在
这个情况下我的应用只以USD收费

00:36:06.967 --> 00:36:09.436 
我同样将它传输到
supportedNetworks

00:36:11.371 --> 00:36:13.607 
现在 我和我的付款处理器对话

00:36:13.674 --> 00:36:15.843 
它们告诉我
应该使用3DS作为我的属性

00:36:16.877 --> 00:36:17.711 
我已经按如此做了

00:36:18.812 --> 00:36:21.682 
我也想
创建我的SummaryItems

00:36:21.748 --> 00:36:24.218 
我这里有一个
很方便的方法 将它隐藏起来了

00:36:24.284 --> 00:36:25.786 
但它将创建一个产品

00:36:25.853 --> 00:36:28.989 
在这个应用里所有的
产品都来自appealists

00:36:29.523 --> 00:36:30.724 
这是一个人为的例子

00:36:31.258 --> 00:36:32.926 
它将为我生成一个总结版本

00:36:33.594 --> 00:36:36.196 
我们将更加仔细地看看

00:36:37.464 --> 00:36:40.801 
好的 现在我已经准备就绪了
展示视图控制器

00:36:42.336 --> 00:36:44.271 
再次说明它被
PaymentRequest初始化

00:36:44.338 --> 00:36:45.172 
并获得一个授权

00:36:46.473 --> 00:36:47.875 
我的授权方法在这里

00:36:47.941 --> 00:36:48.775 
我们将再次查看

00:36:49.543 --> 00:36:50.477 
我只能展示它

00:36:51.011 --> 00:36:52.779 
让我们运行它

00:36:55.782 --> 00:36:58.785 
我刚想到某些东西我不知道

00:36:58.852 --> 00:37:01.255 
你们当中是否有人
尝试在iOS8中使用苹果支付

00:37:01.421 --> 00:37:02.923 
而实际上无法在模拟器上运行

00:37:02.990 --> 00:37:05.559 
因此我可能会有许多问题

00:37:06.026 --> 00:37:06.860 
让我们看看

00:37:07.961 --> 00:37:11.131 
哦 好的 我猜苹果支付
现在再模拟器上运行了

00:37:14.134 --> 00:37:16.970 
iOS 9支持苹果支付

00:37:17.037 --> 00:37:19.239 
我们将售卖你需要的

00:37:19.773 --> 00:37:21.942 
各种制式模拟卡

00:37:22.242 --> 00:37:23.143 
它们隐藏在这里

00:37:25.078 --> 00:37:27.714 
让我们通过密码付款
而无需Touch ID

00:37:27.781 --> 00:37:30.517 
哦 好的 我猜我又有一个难题

00:37:30.584 --> 00:37:33.253 
这就是这些麻烦的指派方法

00:37:34.254 --> 00:37:36.490 
让我们谈谈这里我们还需做些什么

00:37:36.557 --> 00:37:39.760 
让我们谈谈一旦情况发生
我们如何处理指派

00:37:43.830 --> 00:37:45.799 
因此一旦用户Touch ID 

00:37:45.866 --> 00:37:48.068 
我们将在
PaymentAuthorization

00:37:48.135 --> 00:37:51.004 
ViewControllerDelegate
收到一些反馈

00:37:51.772 --> 00:37:53.140 
我们将使用这些指派

00:37:53.273 --> 00:37:55.676 
来确认我们是否收到

00:37:56.143 --> 00:37:57.678 
付款以及是否可以处理它们

00:37:59.012 --> 00:38:01.715 
现在 有两种指派方法

00:38:02.583 --> 00:38:05.185 
第一种方法是
paymentAuthorization

00:38:05.252 --> 00:38:08.155 
ViewController
didAuthorizationPayment

00:38:08.589 --> 00:38:10.824 
你将取回一个PKPayment对象

00:38:11.491 --> 00:38:15.963 
你返回一个完成处理器
一个带有状态的数据块

00:38:16.096 --> 00:38:18.732 
这个状态会告诉我们你是否可以

00:38:18.799 --> 00:38:20.734 
在自己的服务器上处理付款

00:38:21.068 --> 00:38:23.170 
这个情况下
我们将在表单上显示一个核对符

00:38:23.737 --> 00:38:26.974 
或者如果有什么错误
我们将告诉用户发生了什么

00:38:28.308 --> 00:38:30.210 
然后你需要释放付款视图控制器

00:38:30.344 --> 00:38:32.045 
这会发生在另外一个指派方法

00:38:32.145 --> 00:38:33.847 
因此你不能在
didAuthorizationPayment中

00:38:33.947 --> 00:38:35.482 
释放视图控制器

00:38:35.716 --> 00:38:36.550 
你想要指派它

00:38:37.050 --> 00:38:40.554 
paymentAuthorization
ViewControllerDidFinish

00:38:42.456 --> 00:38:43.757 
现在PKPayment对象

00:38:43.824 --> 00:38:46.226 
它将取回其它
包含PKPayment令牌的对象

00:38:46.293 --> 00:38:47.461 
在成功授权之后

00:38:48.362 --> 00:38:50.330 
它将返回这就是你要

00:38:51.164 --> 00:38:54.301 
发送到付款处理器
或你自己的服务器上的

00:38:54.968 --> 00:38:56.837 
它将获得加密的付款数据

00:38:57.171 --> 00:38:59.373 
和任何其它你可能需要的元数据

00:38:59.940 --> 00:39:00.807 
所以 关于配送地址

00:39:02.576 --> 00:39:03.777 
好的让我们把这些添加进去

00:39:03.844 --> 00:39:05.946 
我们把它放入到应用中

00:39:10.117 --> 00:39:14.388 
好的让我们首先做
didAuthorizationPayment

00:39:14.454 --> 00:39:17.691 
现在 我将整合今天的付款处理器

00:39:18.192 --> 00:39:20.661 
所以 你只需要想象这些完成

00:39:21.295 --> 00:39:22.863 
这就是我将发布到服务器的东西

00:39:24.998 --> 00:39:25.832 
我们继续

00:39:27.434 --> 00:39:29.770 
现在我获得一个应用联线

00:39:29.870 --> 00:39:31.738 
用于发送确认表

00:39:32.906 --> 00:39:34.675 
已经定义好了 我必须找到它

00:39:36.710 --> 00:39:40.247 
找到了 我有一个简单的联线
在paymentToken上属性

00:39:40.314 --> 00:39:42.449 
我们称之为交易识别符

00:39:43.250 --> 00:39:45.219 
PKPayment令牌如我所说

00:39:45.285 --> 00:39:47.120 
它包含你需要的付款信息

00:39:47.254 --> 00:39:50.290 
它也获取一些有用的
你可能想要显示在收据中的元数据

00:39:51.058 --> 00:39:54.061 
比如银行卡名称的净化版本

00:39:54.628 --> 00:39:56.597 
这个东西称为交易识别符

00:39:57.130 --> 00:39:58.365 
这保证是唯一的

00:39:58.765 --> 00:40:00.934 
如果你喜欢你可以使用它
你可以在收据中使用它

00:40:01.001 --> 00:40:02.870 
它对每个苹果支付购买都是唯一的

00:40:05.205 --> 00:40:07.074 
最后但不是最重要的我可能想要

00:40:07.140 --> 00:40:08.542 
释放我的视图控制器

00:40:10.143 --> 00:40:10.978 
我们继续

00:40:12.045 --> 00:40:14.147 
现在 我发送成功了

00:40:14.414 --> 00:40:17.384 
但我们有一些其它
状态如果你想你可以发送

00:40:20.754 --> 00:40:23.757 
成功与失败
在你尝试授权它的时候

00:40:23.824 --> 00:40:25.025 
可能某些东西产生了错误

00:40:25.492 --> 00:40:28.195 
正如我们后来看到的我们有其它的状态

00:40:28.262 --> 00:40:31.598 
如无效支付地址以及无效邮寄地址

00:40:32.099 --> 00:40:34.034 
或者没有提供足够的联系信息

00:40:36.036 --> 00:40:37.704 
好的 让我们运行它

00:40:39.840 --> 00:40:43.210 
因为我觉得因此我想找铝颜色

00:40:43.277 --> 00:40:45.779 
这次在WWDC我们没有足够的铝

00:40:47.981 --> 00:40:49.016 
好的 用密码支付

00:40:50.150 --> 00:40:51.151 
好的 很好

00:40:51.218 --> 00:40:52.886 
你看交易识别器这里显示

00:40:53.020 --> 00:40:54.054 
模拟识别器

00:40:54.521 --> 00:40:57.858 
这是因为我在模拟器上
它返回给我虚拟信息

00:40:57.991 --> 00:40:59.993 
如果这是一个真的设备

00:41:00.194 --> 00:41:01.495 
我将有一个真实的交易识别符

00:41:02.529 --> 00:41:04.865 
我也将它发送到我自己的
服务器进行处理

00:41:05.866 --> 00:41:08.936 
我有一个应用可以接受苹果支付和付款

00:41:09.203 --> 00:41:11.171 
这看起来我不需要太多代码 对吗

00:41:11.238 --> 00:41:12.840 
我想十几行就可以了

00:41:13.841 --> 00:41:15.342 
我的应用里有一个小问题

00:41:16.376 --> 00:41:18.912 
我购买狗项圈
但我不知道要把它们运到哪里

00:41:19.580 --> 00:41:21.215 
所以我们必须把这安排好

00:41:21.515 --> 00:41:25.519 
我们必须看看我们如何获得联系信息

00:41:27.120 --> 00:41:28.789 
你可以在付款请求上

00:41:28.856 --> 00:41:31.692 
使用一些掩码来请求用户的联系信息

00:41:31.859 --> 00:41:34.361 
这叫做
requiredShippingAddressFields

00:41:34.795 --> 00:41:39.166 
我们有邮寄地址 邮件和电话 
然后在iOS8.3 

00:41:39.399 --> 00:41:41.502 
我们引入了名字它仅仅是名字

00:41:41.568 --> 00:41:43.504 
因此如果你是一个共享类应用

00:41:43.570 --> 00:41:44.938 
你不想收集用户的邮寄姓名

00:41:45.305 --> 00:41:47.174 
但你想要他们的名字让司机知道如何

00:41:47.241 --> 00:41:48.809 
称呼他们 你可以使用那个名字

00:41:51.812 --> 00:41:56.116 
另外你还可以请求账单 账单地址

00:41:56.450 --> 00:41:58.952 
这是另外一些
带有需要的账单地址区域的掩码

00:41:59.753 --> 00:42:02.723 
对于所有这些联系信息我们建议你

00:42:02.856 --> 00:42:05.459 
不要请求它除非你绝对需要它

00:42:06.493 --> 00:42:09.563 
这很重要 用户喜欢苹果支付
是因为它快速且易于使用

00:42:10.163 --> 00:42:11.331 
因此你不要反其道而行

00:42:12.065 --> 00:42:13.133 
尤其是账单地址

00:42:13.200 --> 00:42:15.302 
处理苹果支付并不需要该地址

00:42:15.402 --> 00:42:17.004 
付款过程也不需要用到

00:42:17.738 --> 00:42:19.940 
出于这个原因我们建议你不要请求它

00:42:20.007 --> 00:42:21.942 
但是我们明白你们中的
一部分人可能会有平台

00:42:22.009 --> 00:42:24.044 
欺诈系统 现有结构

00:42:24.111 --> 00:42:27.014 
因此这样的情况下你需要请求

00:42:27.080 --> 00:42:29.016 
但是请想一想避免的方法

00:42:31.418 --> 00:42:35.722 
因此联系人信息

00:42:36.089 --> 00:42:37.090 
与配送成本联系在一起

00:42:37.758 --> 00:42:40.394 
因为用户可以在苹果支付单里

00:42:40.460 --> 00:42:42.663 
更新配送信息或许你想要

00:42:42.729 --> 00:42:44.031 
更新收费的价格

00:42:45.132 --> 00:42:48.302 
所以你将通过选择性指派方法
接收到一个回调函数

00:42:48.769 --> 00:42:51.205 
paymentAuthorization
ViewController

00:42:51.271 --> 00:42:53.273 
didSelectShippingContact

00:42:54.541 --> 00:42:58.846 
它返还给你一个联系方式
并且它有完成处理器

00:42:59.746 --> 00:43:01.548 
现在完成处理器有一个状态

00:43:01.882 --> 00:43:04.318 
所以你可以有成功或无效信息

00:43:04.918 --> 00:43:05.819 
它将分为两个数组

00:43:06.587 --> 00:43:09.356 
最后一个数组是
PaymentSummaryItems数组

00:43:09.723 --> 00:43:12.459 
看起来很敏感
你可以更新你要收费的总项目

00:43:13.026 --> 00:43:15.495 
但还有一个数组
叫做ShippingMethods

00:43:15.562 --> 00:43:19.566 
所以苹果支付单也可以
展示配送方法及成本

00:43:19.633 --> 00:43:20.801 
这是一个独立的数组

00:43:23.403 --> 00:43:27.341 
PKShippingMethod是
PKPaymentSummaryItem

00:43:27.407 --> 00:43:31.578 
的一个子类就像SummaryItem 
它有一个标签和一个数量

00:43:32.112 --> 00:43:34.748 
但它有另外一个字符串属性称为详情

00:43:35.182 --> 00:43:36.583 
你可以用它告诉用户

00:43:37.317 --> 00:43:39.286 
送货需要多少时间

00:43:39.553 --> 00:43:41.555 
这里我创建一个单独的配送方法

00:43:42.256 --> 00:43:44.825 
把它分配到我的付款请求
这样它就会在表单中显示

00:43:47.160 --> 00:43:48.161 
联系信息

00:43:48.428 --> 00:43:52.566 
出于对于用户的隐私
在这个指派回调函数

00:43:53.333 --> 00:43:56.069 
你将不会得到完整的
未编辑的联系信息

00:43:56.136 --> 00:43:57.738 
因为用户
还没有使用Touch ID

00:43:58.172 --> 00:44:01.008 
我们把用户使用Touch ID视为

00:44:01.074 --> 00:44:02.042 
同意信息传输到应用

00:44:02.843 --> 00:44:08.682 
因此你将接收到城市 州以及邮编代码
或者英国邮政编码

00:44:08.749 --> 00:44:12.853 
或者净化版本的英国
邮政编码我该这样说

00:44:14.321 --> 00:44:16.890 
我们认为这对于
估算配送成本已经足够了

00:44:16.957 --> 00:44:18.825 
例如 在州际或国际上方面

00:44:19.526 --> 00:44:22.296 
但在最终付款一旦你取得授权

00:44:22.362 --> 00:44:25.899 
你就可以获得完整的联系方式

00:44:26.667 --> 00:44:29.570 
现在 这些API 
对你来说可能比较不熟悉

00:44:29.636 --> 00:44:31.972 
这是因为它们在iOS 9 

00:44:32.039 --> 00:44:33.807 
使用新的Contacts框架

00:44:34.241 --> 00:44:37.144 
所以此版本中通讯簿已被取消

00:44:37.211 --> 00:44:40.681 
是的 不用为我鼓掌
为Contacts团队鼓掌

00:44:41.348 --> 00:44:42.182 
我知道我做到了

00:44:44.318 --> 00:44:45.586 
那些已经远离我们了

00:44:45.719 --> 00:44:47.921 
我们也在苹果支付中找到代替方案

00:44:48.088 --> 00:44:50.257 
现在 我们将在接下来的版本中

00:44:50.357 --> 00:44:51.358 
对API作一点点改变

00:44:51.625 --> 00:44:53.260 
它们不会一模一样

00:44:53.327 --> 00:44:54.595 
如果你在线观看影像

00:44:54.728 --> 00:44:56.196 
查看最新信息的开发者文档

00:44:56.263 --> 00:44:58.131 
但这里有一个非常简单的例子

00:44:58.198 --> 00:45:01.702 
说明提取名字和邮箱地址的例子

00:45:02.569 --> 00:45:04.771 
让我们结束我们的应用

00:45:05.539 --> 00:45:08.542 
让我们把
所有的信息化为代码

00:45:10.143 --> 00:45:15.482 
我想做的第一件事是请求配送信息

00:45:20.921 --> 00:45:22.556 
我想要邮政地址

00:45:22.723 --> 00:45:23.657 
这是我的请求

00:45:25.592 --> 00:45:27.528 
然后我们需要放入指派方法

00:45:28.462 --> 00:45:30.230 
让我们找到正确的那个

00:45:30.330 --> 00:45:33.901 
didSelectShippingContact
让我们将代码放入

00:45:34.067 --> 00:45:35.235 
在应用里我将做什么

00:45:35.469 --> 00:45:37.104 
我这里可以人为做示例

00:45:37.171 --> 00:45:38.605 
我将一行一行地带你浏览

00:45:39.473 --> 00:45:41.141 
我将索要手续费

00:45:41.241 --> 00:45:43.277 
如果用户选择了
一个不在美国的配送地址

00:45:43.343 --> 00:45:45.779 
那么就产生一个国际手续费

00:45:47.381 --> 00:45:49.483 
现在这个paymentAuthorization 
ViewController  

00:45:49.550 --> 00:45:52.119 
didSelectShippingContact 
方法总是被调用

00:45:52.252 --> 00:45:53.687 
如果用户在表单内有地址

00:45:54.254 --> 00:45:56.356 
所以如果用户有一个默认地址

00:45:56.423 --> 00:45:58.525 
或许来自名片因此当表单被展示的时候

00:45:58.592 --> 00:45:59.693 
你将得到一个回调

00:46:00.360 --> 00:46:01.995 
我设定了一个配送方法

00:46:02.062 --> 00:46:03.730 
我将有一个标准配送

00:46:05.766 --> 00:46:07.734 
然后我将检查地址

00:46:07.868 --> 00:46:10.938 
现在这里
我将用新的联系API来获得地址

00:46:11.305 --> 00:46:13.140 
关于联系API 我们将有另一场说明

00:46:13.207 --> 00:46:14.708 
因此不用太担心这个

00:46:14.775 --> 00:46:16.510 
稍后有机会详细了解

00:46:17.544 --> 00:46:22.115 
然后我检查在这个例子中
地址是否在美国

00:46:22.549 --> 00:46:25.285 
我说这是人为的原因是因为在iOS上

00:46:25.752 --> 00:46:28.755 
地址信息可以有许多不同的来源

00:46:29.122 --> 00:46:31.525 
它可以来自用户在
Contaact应用输入

00:46:32.025 --> 00:46:34.494 
也可能来自
Facebook的同步信息

00:46:34.561 --> 00:46:36.230 
或者其他与iOS系统上的社交网络

00:46:36.797 --> 00:46:39.132 
所以很重要的是你要确认地址的正确性

00:46:39.433 --> 00:46:43.103 
不能假设它们永远是一样的信息

00:46:43.570 --> 00:46:45.339 
所以 为了展示之方便

00:46:45.672 --> 00:46:47.074 
我要把事情简化一些

00:46:48.442 --> 00:46:51.545 
之前 我看到我有
称作makeSummaryItems的

00:46:51.612 --> 00:46:52.613 
帮助功能

00:46:52.913 --> 00:46:55.849 
所以这实际上的功能是如果是国际费用

00:46:56.350 --> 00:47:00.354 
你可以检查样板代码

00:47:00.721 --> 00:47:02.256 
并在我的付款项目中添加了手续费

00:47:02.322 --> 00:47:03.957 
这也是为什么这里可以看到

00:47:04.024 --> 00:47:06.093 
称为requiresInternationalSurcharge
的布尔属性

00:47:06.960 --> 00:47:10.230 
然后我将返回我的完成
处理器成功完成的

00:47:10.731 --> 00:47:13.333 
这里获得了一个配送方法数组只有一个

00:47:14.301 --> 00:47:15.602 
以及我的总结项目数组

00:47:17.404 --> 00:47:19.840 
再次说明你可以在
这里返回一个失败状态

00:47:20.207 --> 00:47:23.477 
或许用户输入了
一个你不能配送到达的城市

00:47:23.544 --> 00:47:26.413 
州或国家这样你可以返回

00:47:26.480 --> 00:47:28.348 
一个无效的邮寄地址状态

00:47:30.150 --> 00:47:32.152 
好的 让我们试一下

00:47:34.621 --> 00:47:37.357 
我已经在我的苹果支付表中
获取了一些地址

00:47:37.891 --> 00:47:39.726 
我获得了一个加拿大地址

00:47:40.427 --> 00:47:41.261 
它不是在加拿大

00:47:41.461 --> 00:47:42.763 
我把它放在一起

00:47:43.230 --> 00:47:45.065 
你可以看到这里有国际处理

00:47:45.432 --> 00:47:47.634 
但如果我把它变为一个美国地址

00:47:49.903 --> 00:47:51.672 
你可以发现这里有个副标题

00:47:51.738 --> 00:47:54.041 
国际处理不见了这是一个单独的标题

00:47:54.474 --> 00:47:56.810 
在苹果支付单上更新你所有的

00:47:56.944 --> 00:48:01.682 
配送成本是很容易的
它们被列在单独的屏幕上

00:48:02.616 --> 00:48:04.818 
这里我随便获取一个
这里只有一个可供选择

00:48:05.853 --> 00:48:08.488 
直接从你的表单里获取配送信息

00:48:08.789 --> 00:48:11.658 
和另一个购买流的步骤
这是一个很好的方法

00:48:13.327 --> 00:48:15.529 
所有的样板代码都在开发者网站上

00:48:15.596 --> 00:48:16.797 
现在已经可以下载使用

00:48:18.332 --> 00:48:20.033 
这里还有一些其它东西我想谈谈

00:48:21.668 --> 00:48:24.104 
在iOS9里我们有一些新的API

00:48:25.439 --> 00:48:27.808 
其中有一个被称为
PKPaymentMethod

00:48:28.342 --> 00:48:30.844 
它让你可用找到更多的付款工具

00:48:31.078 --> 00:48:34.748 
我说的工具指的是用户选择的卡

00:48:35.682 --> 00:48:36.884 
它让你可用做这些事情

00:48:36.950 --> 00:48:39.820 
比如 申请借记或信用手续费或折扣

00:48:39.920 --> 00:48:43.056 
再次说明在美国不是很普遍

00:48:43.123 --> 00:48:44.691 
但适用世界的其它地方

00:48:45.425 --> 00:48:47.694 
当用户改变他们的支付方法

00:48:47.761 --> 00:48:49.096 
你将会收到一个指派回调函数

00:48:50.063 --> 00:48:51.198 
因此我在这里

00:48:51.565 --> 00:48:54.368 
可以通过确认屏提升
检查是不是使用借记卡付款

00:48:55.402 --> 00:48:58.405 
你可以使用这个API它真的很棒
它对你来说可能非常实用

00:48:59.573 --> 00:49:03.010 
这里有一个警告大多数添加

00:49:03.076 --> 00:49:06.246 
到苹果支付的旧卡
我们不知道它们的类型

00:49:06.446 --> 00:49:09.383 
因此你将会接收到
PKPaymentMethodTypeUnknown

00:49:09.716 --> 00:49:12.319 
现在由于这款API的主要目标在欧洲

00:49:12.386 --> 00:49:14.254 
我们下个月将启动英国

00:49:14.788 --> 00:49:16.857 
这不会是一个问题但如果你是在美国

00:49:16.924 --> 00:49:19.393 
并且你想要使用这款API 
那就请牢记这一点

00:49:19.459 --> 00:49:20.561 
你需要在这编写代码

00:49:22.996 --> 00:49:26.700 
我们在PKPaymentSummaryItem上
也有了一个新属性

00:49:26.934 --> 00:49:29.670 
用户或者开发者需要的某些东西

00:49:30.370 --> 00:49:33.874 
以及能够改变总结项目的功能

00:49:33.941 --> 00:49:38.579 
我们有两种类型一种叫做最终自解释
另一种叫做待定

00:49:39.513 --> 00:49:43.851 
你可以用它来表示你的收费不是最终的
如果你是一个共享类应用

00:49:44.384 --> 00:49:46.286 
而你不知道用户将花费多少

00:49:46.753 --> 00:49:48.822 
你可以选择待定类型

00:49:49.923 --> 00:49:52.159 
现在这个类型的相关文件

00:49:52.226 --> 00:49:54.828 
将在未来版本中发布
我们会再次做出许多改变

00:49:55.062 --> 00:49:56.496 
在此 如果你是在线观看

00:49:56.997 --> 00:49:59.566 
请查看开发者文档获取最新消息

00:50:03.270 --> 00:50:05.005 
我已经讨论过模拟器支持

00:50:06.139 --> 00:50:08.408 
很重要的是虽然我们已经

00:50:08.475 --> 00:50:10.944 
为模拟器添加了支持
但你仍需把应用放在真实硬件上

00:50:11.512 --> 00:50:14.014 
如果你有开发者在另一个国家

00:50:14.081 --> 00:50:16.750 
我想这是一个很棒的特点
如果你现在在英国

00:50:16.817 --> 00:50:18.218 
那么可以马上进行安排和运行了

00:50:18.619 --> 00:50:20.354 
很重要的是在你来到商店之前

00:50:20.420 --> 00:50:23.123 
你要在真实硬件上对你的应用进行测试

00:50:23.190 --> 00:50:24.825 
确保支付可以成功处理

00:50:27.494 --> 00:50:28.996 
我也想谈谈Apple Watch

00:50:29.062 --> 00:50:31.431 
当我向你展示硬件幻灯片

00:50:31.498 --> 00:50:34.501 
你可能在想Apple Watch 
有一个安全元件

00:50:35.068 --> 00:50:37.871 
Apple Watch在
WatchKit应用里

00:50:37.938 --> 00:50:39.173 
不支持苹果支付

00:50:39.640 --> 00:50:41.909 
然而它可能会使用Handoff 

00:50:41.975 --> 00:50:43.810 
在Apple Watch上
直接触发付款

00:50:43.944 --> 00:50:46.980 
一旦用户从锁屏上启动应用

00:50:47.047 --> 00:50:48.749 
你可以直接切换到

00:50:48.815 --> 00:50:51.151 
你手机上的应用并展示苹果支付单

00:50:51.952 --> 00:50:54.288 
在应用里我只展示
一些样本代码说明一下

00:50:54.354 --> 00:50:57.424 
我有一个WatchKit拓展

00:50:57.491 --> 00:51:00.427 
WatchKit在手机上触发付款

00:51:01.028 --> 00:51:02.563 
如果你感兴趣的话请看一下

00:51:03.030 --> 00:51:05.132 
实际上 我们也为手表 

00:51:05.199 --> 00:51:06.867 
打开了PassKit API

00:51:07.467 --> 00:51:08.569 
如果你想知道更多信息

00:51:08.969 --> 00:51:11.872 
请观看刚刚进行的关于
Wallet 苹果支付的主页的部分

00:51:12.406 --> 00:51:14.641 
你可以在线观看

00:51:17.044 --> 00:51:21.849 
总结一下 苹果支付使用非常方便

00:51:22.349 --> 00:51:24.318 
它具有隐私性和安全性

00:51:24.952 --> 00:51:27.020 
我强烈建议你使用它

00:51:27.421 --> 00:51:28.956 
去商店下载应用

00:51:29.022 --> 00:51:31.725 
我们在商店里有一个
很棒的精选部分可以下载

00:51:31.792 --> 00:51:36.363 
很多很棒的使用苹果支付的应用
今晚就试试吧想想它如何和你的应用

00:51:36.430 --> 00:51:41.001 
融合在一起不仅想想如何提高用户体验

00:51:41.301 --> 00:51:45.973 
也想想如何改善苹果支付的成果

00:51:46.607 --> 00:51:47.674 
让你的用户感到满意

00:51:47.774 --> 00:51:49.209 
我知道他们会很喜欢苹果支付的

00:51:50.844 --> 00:51:53.113 
我们为你准备了更多的信息

00:51:54.114 --> 00:51:57.651 
我们有一些文档我们为开发者
微型网站创建了一个苹果支付

00:51:58.452 --> 00:52:01.021 
如果你对安全元件和硬件有兴趣

00:52:01.121 --> 00:52:03.490 
你可以在iOS安全白皮书上

00:52:03.624 --> 00:52:05.392 
找到更多信息

00:52:05.726 --> 00:52:08.495 
它深究了许多
我们如何生成这些付款的细节

00:52:08.829 --> 00:52:10.864 
以及在设备上获取卡的过程

00:52:11.331 --> 00:52:12.966 
阅读起来非常有趣你可能会想查看

00:52:14.735 --> 00:52:16.904 
我们还有技术支持

00:52:16.970 --> 00:52:20.174 
以及开发者论坛如果你有任何问题

00:52:20.340 --> 00:52:23.744 
你可以跟我们的专员保罗或理查讨论

00:52:23.810 --> 00:52:25.145 
之前你在台上见过他们

00:52:25.379 --> 00:52:28.182 
我们的用户体验专员会为你解答任何
关于苹果支付的设计问题

00:52:30.117 --> 00:52:31.385 
另外还有相关的部分

00:52:31.585 --> 00:52:34.454 
包括我已经提到过Wallet部分
你可以在线观看视频

00:52:35.122 --> 00:52:37.257 
如果你对新的Contacts
框架感兴趣

00:52:37.591 --> 00:52:39.927 
我强烈建议你敢看该部分

00:52:39.993 --> 00:52:42.162 
时间是在周四3:30

00:52:42.629 --> 00:52:45.265 
了解我们已经所做的
如何让Contacts更方便的工作

00:52:47.201 --> 00:52:50.504 
最后一点我们有实验

00:52:51.171 --> 00:52:53.073 
今天和明天下午

00:52:53.240 --> 00:52:55.442 
有关于苹果支付的实验请来参加

00:52:55.509 --> 00:52:57.811 
我们将邀请来自服务器团队的人员

00:52:57.878 --> 00:52:59.680 
回答关于加密系统的问题

00:52:59.746 --> 00:53:01.515 
我们还会邀请来自iOS方面的人员

00:53:01.782 --> 00:53:03.750 
我们还邀请一些商业团队如果你有任何

00:53:03.817 --> 00:53:05.953 
关于如何接受苹果支付
以及支付手续的问题

00:53:06.186 --> 00:53:07.754 
理查今天将在实验室

00:53:08.055 --> 00:53:09.990 
到时候可以进行设计反馈

00:53:10.390 --> 00:53:12.860 
非常值得大家过来参加
我们将非常高兴看到你们

00:53:13.927 --> 00:53:15.362 
这是我和理查今天的全部内容

00:53:15.829 --> 00:53:16.830 
十份感谢

00:53:16.964 --> 00:53:18.298 
希望你喜欢余下的部分

00:53:18.632 --> 00:53:20.067 
午餐愉快 再见