伍迪·李德斯东：大家好
今天早些时候我对斯特凡说我希望有人能来
太不可思议你把这里都包了
感谢你能出来
我是伍迪很高兴给大家讲讲
用Swift改进现有的App
大家能不能举一下手
多少人实际上在用Swift 进行编码？
好的<c.blue> 很好
那你们大家就 都来对了
无论你是否用了都是如此
希望在讲座后你可以用Swift
打理现有的Objective-C项目
要知道 去年我也我也在这屋里 坐在后面的角落 
是个听众的身份还带着笔记本
想试着实践一下
我在之前讲座学到的新技术
同时还在回复着工作邮件 虽然我之前说过不会回复的
同时把一半的心思放在发言人身上
我相信在座的大部分现在也是这样
然后 角色换位 我从台下听众
走到了台前
我从加拿大新斯科舍省哈利法克斯 
来到了加利福尼亚
如今来这里帮助大家学习使用
Swift和Objective-C的部分技术
我就不必上前去翻动了
这里有遥控
我想来做的是
介绍部分技术内容让大家可以把Swift加到现有项目
让项目变得更好
本次讲座我就会用来
介绍这样的内容
我去过InfiniteLoop园区到了停车场
来到下面一层的地下迷宫
经过守卫工业设计入口的三头犬
在尽头 是我们
保存软件的保险库
我打开软件保险库
取出app<c.blue> The Elements 这可能在两三年内
都没在WWDC见到了
现在我就将向大家介绍它是怎么回事
好的 这就是 The Elements
有谁还记得以前见过?
啊? 有人见过 有人没有
有人当真喜欢它
我就是
这是个标准的基于UIKit的表视图app
我们有一束单元格 针对
针对原子表中的每个元素
我们还有这个小的详细视图
其中会有更多的信息
如果点击一个单元格
我们有这个导航控制器推动演示显示部分相关细节
非常棒
<c.blue> 我相信可能
很多人都会这么做
在不同的应用中移动
并且回来再来看有一阵子
没用的app 或是有一阵子没编程的app 
然后有人让你增添新的功能
或是支持新的操作系统 新的SDK
这就是我们马上要做的事情
我们会对Objective-Capp准备用Swift来实现现代化
意思是说：如果有现有应用
你必须要为它编写新代码
而现有的应用是Objective-C app
考虑利用Swift功能使用Swift来编写新代码
与此同时
把原始的Objective-C代码留在Objective-C
这也很好的
在本讲座中 我们先从
对应用的翻新讲起为用户界面
带来更为现代的外观
我们马上要做的是使用Swift
之后 我们还要来看看代码
Swift的结构及其函数比如映射
找到为应用增添新功能的办法
这个应用有大小tile框架
小tile框架是表视图
大tile框架是详细视图
这些tile框架包括背景
外加在背景上渲染的文本
因为这个app是个老版本app
背景最初是用Photoshop做的渲染
然后嵌入到应用之中
因为背景中的不同颜色取决于
原子状态固体 液体 合成气体
是仅为最初的iPhone做的渲染
其中并不包括Retina艺术设计
也就是说当我们拿到这个老版本app
在新版本硬件上运行时我们必须做扩展
当我们扩展这个老版本艺术设计时
我们最后是得到的是圆角失真效果 就是锯齿
因为没有足够的像素数据
来光滑地表现这些角
所以我们在本次讲座中就会解决这个问题
还有一个问题就是 当你看自己的
中学纪念册时
也许是80年代或90年代
对吗？
你看到了自己的照片
你在这里穿着马甲
还绣着小猫手里拿着键盘
因为当时这样很酷
背景还是激光效果
因为这当初也很酷
现在你再来看着它
心里会想着当时我脑子里在想什么呢？
有时 我们看着以前的app心里会想
当时我们脑子里是想什么呢？
还有闪亮 光泽 反射效果
我们这就来调整
时尚潮流改变了风格不一样了
有一种办法是从
背景上把光泽效果删除下去
我们得到了非常时尚的渲染矩形轮廓
看似在小tile框架上效果不错
就像是在app的大tile框架一样
现在我们可以在Photoshop渲染新 背景
并把它们嵌入应用中
不过要清楚这个应用我们
不会经常使用
要知道  我们再讲到
可能到了WWDC2020Elements 我希望确保
当时它看上去还不错不是简单的过去的硬件
和现在的硬件 而是潜在的未来硬件
那我继续选择放入一些自定义绘图代码
绘制圆角矩形背景因为它是个圆角矩形
我准备在Swift中实现 但是
我会从 Objective-C调用
为实现这一点 我用到的是Mix和Match技术
我们在去年和今年有许多讲座
都是介绍Swift和Objective-C的互操作性
对其中的机制都有很好的介绍
现在我想来为大家进行综述
来看技术怎样发挥作用
然后深入介绍一个演示 大家可以直观地了解
一般而言 当我们考虑到Objective-C中的类时
会有个头文件和一个执行文件
两部分共同构成类定义
但是可能我们会有部分
分类中执行的方法
这相当好
然后我们的类定义是基类
加上分类
并不是说
不可以有多个分类
实际上 我们可以用UI表视图做些什么
如果来看Objective-C中的头文件
会看到在UI表视图有很多分类
同样 也不是说这些分类之一
不可以在Swift中执行
其中 术语会改变可是概念还是一样
我们只是称其为Objective-C的Swift扩展
在本例中是基类
并不是说
不可以用多个Objective-C分类
与多个Swift扩展相混合 其中所有的内容构成类
我们在Objective-C中编写部分函数
这会让你在Swift中编写更新的函数
为了让互操作性技术可以实现我们用到
一组桥接头文件不是一组桥接头文件
我们是用桥接头文件和一个生成头文件
现在桥接头文件在Xcode中编成
首次向现有Objective-C项目中引入Swift
然后进行维护
基本上要进入其中加上部分输入语句
这样就可以针对性从Objective-C 
面向Swift使用选择数据类型
然后在倒数上Swift编译器编成生成的头文件
可以将之输入到Objective-C执行文件
来面对Swift 在本例中是针对
Objective-C的扩展和其他数据类型
现在我们有了两个头文件
你会在演示中看到它们
马上就好
好的<c.blue> 在项目中
这个类名为原子元素tile视图
这就是实际在绘制背景的
其中有个方法
这其实不仅是绘制背景
它为大小tile框架绘制了背景
和背景上的所有的文本
我准备介绍新的绘图代码
但我将用Swift来实现因此我会继续制作新的Swift文件
这是Xcode中的command-N
我们会选择Swift文件来创建
因为是这是首次将Swift加入
这个项目我可以选择
现在就生成接桥头文件
我想创建一个按下Return
现在我有两个文件其中包括Objective-C的
基类 外加Swift文件
我还有接桥头文件
还可以把这个再加宽一些 就这样
你可能注意到Swift文件的文件名
和Objective-C中的完全一样
并不是有这样的要求而是为了方便起见
因为这表示在Xcode 
可以用快捷方式 controlcommand-up arrow
并循环Swift和Objective-C头文件并执行
在这三个之间快速往复即可
现在我选定在桥接头文件
把在Objective-C中声明的数据类型
暴露Swift通过输入头文件来实现
因为我想将原子元素tile视图扩展到Swift
或使用Swift 将之输入给接桥头文件
此刻我只需要的是我已经强调过的原子元素tile视图
但是在演讲的稍后部分我还需要其他几个
我先来继续现在把它们全都输入
我们在来看Swift文件
我会编写原子元素tile视图的扩展
现在类原子元素tile视图 调用这个新函数
叫绘制原始背景
大家可以看到 我还用到了新的Xcode 7标记
给出文档注释文档注释
在本例中 是绘制原子元素背景tile框架
我来继续 把实际
进行绘制的代码加进去
这就是Swift的部分
但现在我想从Objective-C中调用Swift函数
这样反而是装载预渲染图像
我会用这种方法来绘制
然后切换到原子元素tile视图m
需要确保它可以看到我加入Swift中的
代码 因此我继续并输入生成的头文件
生成的头文件和产品使用完全相同的名称
因此元素再加上连字符 Swift.h
现在 在这种方法中我通常会装载
预渲染背景我会加注释
并反而调用“self draw”大家可以看到
Swift的方法作为原生方法
和这里的所有内容一起显示
你甚至可以看到注释显示为draw  
an atomicelementsbackground tile
我来传递交出这个元素
把它传递交给外包矩形
它会绘制圆角矩形
运行app
就这样运用Swift代码和Objective-C
获得部分圆角矩形 谢谢
这就是在观众里安排自己的朋友的好处
大部分内容 都是和我的预期相符
是圆角矩形
但是圆角矩形本身 它们并不
和我想要的方式相符
实际上 如果放大 大家可以看到
里边是圆角但外边不是圆角
这不是我的本意
我是希望是纯圆角纯粹的圆角
在里边和外边都是
我们来仔细看看为什么会是这样
我们来看Swift结构
Swift会怎么让它
更简单并与结构配合更自然
例如在Core Graphics框架中我们有许多 
基本结构
我们有CGrectsCGpoints CGsize等等
绘制的时候我有外包矩形是个CGrect我绘制了贝兹曲线路径
现在贝兹曲线路径是屏幕上的
灰色边框绘制贝兹曲线路径
接下来 把它被放在外包矩形内部
你就会看到这里是外包矩形
贝兹曲线路径你看到的不是这样本身并非是你所见
直到对之应用线条才会进行渲染
比如画线大家会看到
对贝兹曲线路径的渲染效果
我们来绘制贝兹曲线路径
在加上画线
例如 画线为10个单位宽 10点宽
但是会超过外包矩形的
边界
这会导致剪切
圆角矩形实际上是在外边
但是在外包矩形上发生的剪切防止它到达那里
我知道 在座的朋友有人会觉得
如果剪切存在问题 那就关闭剪切
问题就解决了
就可以继续了
当然可以 我觉得
在Xcode中Swift问题可以这么解决
只要重新安排Swift的感叹号位置
直至开始编译为止
可以这么做 只是我不会称之为最佳实践
当出现剪切问题时
这是性能表现的问题
通过所调用的每个API
通过发起的每个任务通过进行的每个动作
通过你的每一次呼吸
你需要考虑对功能和性能的影响
不断计算两个矩形的交叉部分并对之进行剪切
这不是很有效的方法
在一开始就把矩形设置为正确大小则更为有效
我们就要这么做
准备嵌入贝兹曲线路径
这样就不会自行剪切
为此 我们会用到一些方法
我是说CGrect上的方法
当它在Swift中使用的时候
考虑一下这些原始类型怎样正常使用
我们有CGrectsCGpoint等等
我说过它们可能会在这里
那么单独来看你获得了可适用的整套全局通用函数
例如CGrectZeroCGrectMake
或GetWidth或是部分实际函数
例如获得联合或交点
这是二者之间的认知区分
我们了解是这个类型 然后我们需要
了解是这些方法 不好意思
是作用的函数
我们用Swift工作时我们实际上改变的是
CGrect和CGpoint及CGsize进入Swift的方法
我们基本会用封装用所有这些
这些全局 正式来讲是作用于框架的全局函数
并在结构中搭建它以便使之完成代码
更为简单还可以更出色预测到API是什么
因为你可以处理点结构
然后为所有方法和属性获得它所具备的代码完成
然是如果我们把名称就保留成这样
这还不是原生的感觉
名称实际上都做了重新映射 
让人觉得这是数据类型的 第一类型方法
这样做的好处在于处理Swift中的结构的方法
调用函数或调用方法
或访问其属性这与类的处理方法
与枚举的处理方法完全相同
都是相同的一致风格
我们还要在所有不同数据类型中
使用同样的初始化器
我们有着更好的代码完成
总之在Swift中运用这些类型更为自然
因为它们作为第一类型数据类型和方法配合
好的我们还要做一件事情
在下面的演示中我不了解大家会怎样但是当我用图形代码时
特别是部分CoreGraphics代码时 
我使用的一个方法是渲染代码
然后会运行接着来构建并复制到
模拟器然后我导航到
模拟器中代码真正被激活被使用的位置
我还会进行检测 如果不喜欢
就会返回调整代码并运行全部内容
这是个循环
来回走一遍会非常耗时
来看如果把直线宽度
从3改到4 或是关闭光栅化 或是
进行某种设置更改试着让它运转会怎样
还有更好的方法
不需要这么来回反复
也不必经常注释出
部分代码只为尝试效果如何
如果真想试验 可以
拿一些代码试试看看效果怎样
体育场就是为这个准备的
通过体育场循环修改成
这个样子
只要调整代码你就会立刻看到改变如果不喜欢可以立 刻修改
这些都不会复制到模拟器中 导航并
现在通过体育场 解决圆角来看看是什么样子
矩形的问题并使用CGrect
的部分方法从中得到更好的CGrect
我来给大家看看
绘图代码在原子元素tile视图
<c.blue>.点Swift就在这里 
这是我在之前演示中
复制的函数
我就是想要处理这个
所以把它复制到体育场
复制好了点击command-N生成新的iOS体育场
粘贴进去
现在就有了绘图函数
开发人员并非身处孤岛
没有任何绘图函数是完全隔绝
绘图函数需要在有上下文来绘制
也就是绘图上下文或是图形上下文
获得图形上下文的最便捷方式
是在UIView生成子类
这就是我准备做的
我先来声明UIView的子类 这里
它所做的就是调用绘图函数
然后我会实例化这个类
然后我会采用绘图函数
绘制的图像并直接加入这里的故事板
放大些 这样都能看清
接着可以进行尝试
你可以指出自己该做什么
让它按照自己的意图来进行绘制
例如 我想看看是否看似
它只有120点
这就是结果
也许我想看看如果直线宽度不是6而是60圆角半径
为356会怎样
就是这样
大家可以一直做尝试
一旦代码运行方式符合要求
就可以复制并
粘贴到它来自的实际文件中
在本例中我希望获得直线宽度比例
那么如果是表视图中的小tile视图
就会是细边如果是大些的视图
相应的就是宽一些的边
因此我会让它关联到背景矩形的宽度上
那么背景矩形宽度在本例中会除以36
对圆角半径 我也会做同样处理
Backgroundrectangle.width除以
小一点的值 比如16
现在来看我希望它看的内容
但我仍然还有剪切的问题
我还是不能看到画线或者是
圆角矩形的全部内容
为此 在背景矩形
我会通过嵌入使用矩形方法
并且嵌入到直线宽度的一半
这里的直线宽度除以2 
然后 同样直线宽度除以2
我有个完美的圆角矩形
和我最初设想完全相同
我把这个代码从这里复制到扩展
代替这个文档 不对
代替这里的方法
用command-R再次运行app
正如我所愿圆角矩形
好的 很好
这很有WWDC的感觉如果你想鼓掌那就随时可以鼓掌
没有人会阻止这一点
没问题好的 谢谢大家
app看似没问题
我也实现了圆角矩形
非常好 就是我想要的
接下来 我想做的是
让这个app看上去像是当前的app
我不了解大家会怎样但是在参加WWDC大会之后你是否曾跑到客户那里
说 现在iOS的新版本出来了 
比如说iOS 9出来了
我觉得 应该不再支持iOS 8
我们应该只支持新的操作系统
很好<c.blue> 你们这么干过吗？
好 那你再去找下一个客户好了
因为大家都希望你支持这些旧版本
iOS 7 8现在可能9对大部分人而言会在秋天能用上
为实现这一点 我们在Swift2.0推出了新的可用性功能
只要是用Swift 2.0编写代码
我们有很好的办法来看所用的SDK
无论你是否真会用这种功能与否
去年在WWDC
我们推出了一些新的视图控制器显示API
可以在iPhone上弹出显示
我想用元素app做的是当我在支持它的任何设备上
例如在iOS 8或者更新
版本的设备上我想用弹出显示
但是当我在iOS 7上
我想继续使用导航推送显示样式
好 怎么做呢？
这是检测是否支持API的经典办法
无论是什么类型我们都要检测它是否对选择器有反应
如果有反应我们就用这款选择器
如果没有我们就做其他的事情
在Swift 到Swift 2.0我们都是这么做的
我们有这个井号标签指定想要的SDK
在本例中是iOS 8.3如果是这样
我们会用到弹出框如果不是我们用其他方法
这种样式的好处在于你并没有等待
运行时间来看是否实际工作正常
在编译时间编译器会告知你 
没问题 这可行或不可行 
根据你的部署目标而定
如果我在iOS 7部署
它会告知无法进行弹出
但是因为我进行了妥善保护 
提供了另外的路径就可以编译
在本例中 如果我没有进行保护如果我没有说这里是检测
我想要做编译 准备部署到iOS 7
它就会说 弹出显示控制器不可用
只能在8或者更新版本才行
然后会给我一些修复
但是我不会用更多的幻灯片
而是直接给大家看代码
好<c.blue> 首先
在第二个视图控制器显示的代码
保存在elementsviewcontroller.m.
表视图附件的执行但是点击了索引路径的行
因为我想使用可用性检测
我只能在Swift上执行
执行而不是Objective-C我现在就来添加注释
然后我会生成一个类扩展
更像20分钟左右前的那个最初演示的样子
这样我可以扩展元素视图控制器 并在Swift中执行部分功能
我点击command-N 生成新文件 是Swift文件
是元素视图控制器.Swift
然后我会在上面编写扩展
扩展 元素视图控制器
其中 我会用 等效的Swift函数
因此这基本上是我在Swift中
已有的相同代码
这里并没有新鲜内容
就是在Swift上执行的相同内容
但是这可以让我进行可用性检测
这个特殊应用是针对 iOS 7.1
我想在其中用这个新的弹出显示控制器技术 
那么就在这一行做注释
并加入代码试着直接调用弹出显示
我有些错误
一个错误是抱怨我没有
真正满足弹出框所需的委托协议
在旁边可以用Swift扩展
并用它来为额外的协议添加一致性
所以我将添加UI弹出显示控制器委托
这就会消除这个错误但我仍然还有问题
就是要用iOS7.1中不存在的API
而我却偏偏需要这样
嗯 是在演示中需要如此
我有两种解决办法
现在就给大家简单介绍一下
如果我是在运 在本例中是iOS 8.3
继续 并作为弹出显示
否则 就用导航控制器
现在 如果我运行它 并点击 
我们来看这里
我们得到一个弹出框
已经15年了 我们仍在WWDC上见到Carbon
好
若要了解可用性检测的更多详情
可去看周四的讲座《Swift实践》
其中会有大篇幅的相关介绍
接下来 之前的演示是关于
应用外观的改进和现代化处理
要知道 我们改变绘图来取消光泽
我们现在还有弹出框等等 不胜枚举
但是让我们实际增添部分功能
我们要执行智能搜索
为此 我们会来看看
Swift的过滤方法
在所有的集合中都有包括集合和数组
过滤可以用于驱动智能搜索函数其中只有满足搜索
字符串的原子元素会在表视图中显示
标准设置是这个样子我们有TableView
TableView加上视图控制器作为数据源
视图控制器有内容数组
我在搜索域输入一些东西时
就会有个委托方式在视图控制器上叫做
searchbar:textDidChange.
我找出传递的字符串
那只是一个参数
我过滤内容数组
并告知TableView用过滤后的
内容数组进行更新
Searchbar:textDidChange
基本是这样
实际上 就是这个样子
因为这就是我用的代码
现在我要大家注意
标亮的部分是个闭包
我正在运行过滤器 在过滤器中
会应用数组中的每一项
数组中的项我有占位控件
是$0我得到了它的名称接着询问它是否有前缀
无论搜索字符串是什么
都会这样运行 顶部是最初的数组
我有一个封闭的过滤器
会循环
每次都会传递元素
如果名称前有字母在本例中是N
它被传递给返回过滤数组
如果没有字母 那就不是
我给大家看看代码
但是为加快速度我已经运行过
把搜索条放在上面
但我还没搭建好
那么如果我试着在里面做点什么
都不会奏效 因为我没有加入委托方式
委托方式是这个
也就是说 如果搜索文本为空 就在这里
显示所有原子元素
如果不是空我想做个过滤器
这部分需要完成
我们现在就动手
我准备一个过滤器
如果这是大家第一次见到闭包
不错 欢迎闭包
我来给大家多讲几句
如果不是的话就当是复习了
当Xcode显示这种蓝色符号化背景
还都是单项可以双击
会展开需要填入空白部分
我会用这个闭包双击 会展开
我知道有原子元素数组数据类型叫原子元素
如果传递的参数是一个原子元素
我会明确在闭包中
所传递的参数是原子元素
我会给它一个本地名称这样原子元素有了自己的本地名称
而数据类型是原子元素
在闭包中 我需要检查是否要将它
包括在过滤结果中
因为我承诺给出Boolean返回值
我来看返回值是否是原子元素
名称有前缀 再看搜索条传递的搜索文本
像这样 现在 当我运行的时候
我们会搜索所有以字母N开始的内容
就这样 我们用Swift过滤器过滤了
但是有两方面内容需要给大家展示
其一 有两种方法可以来看闭包 
这里是个扩展句法
这里还有精简句法
我来给大家看看精简句法
Swift有非常强大的类型推断系统
我们可根据上下文和所使用的数据类型
推断出很多内容
例如 如果在闭包有个单独行
假设它将返回一个值 
那我不必放入返回值
实际上 如果前缀返回了Boolean类型
Swift可推断这个闭包的返回类型
就是Boolean 所以我不需要
把它放在这里也就是说我也不必
把它放在那里因为原子元素
我就不必明确 原子元素需要传递就可以不要这部分
因为我没有任何参数 我不必区分代码
和参数 那么我不需要关键词 
也就是说 可以不要这部分
节省空间 最后我得到的是这样的东西
因为最后的
过滤方法参数是闭包本身
我们可以把它变成结尾闭包并且可以删掉括号
我们得到的是这个样子
现在唯一的问题是
没有符号声明调用了原子元素
因为我删掉了
但是我可以每次传递给过滤闭包一个项
而且可以这样参考那个参数
这是完全一样的代码如果大家怀念Perl代码
这里就是
现在可以检测一下
我们放入字母N 不错
现在有了这些元素不过它们不是在正确的方向分类
实际上 它们就没有分类
我们快速继续加入分类
我会把它加在现有闭包的结尾
.sort在本例中
我双击这个蓝色的符号 让它展开
还有很多方式可以比较字符串 
比如大小写和区分比较本地化比较等等
但是因为我知道某种程度上 我得到
一个原子元素 接着又得到一个原子元素
我只需要明确哪个在前 哪个在后
或是否一个在另一个之前 我可以自己
编写闭包首先识别我会有两个原子元素传递过来 
拿到第一个来查看名称
然后是第二个
也要查看名称
其本身不会做比较
但是在Swift中我们过载了
许多标准运算符例如大于和小于
那么它们会在你可能不希望它们处理的类型上发挥作用 比如字符串
这是字符串比较
我再次运行
搜索字母N 现在分类妥当了
过滤和分类都在一行
我再检查一遍
我们搜索S 
我有一些非常重要的元素
比如Swiftonium 
非常重要
好的<c.blue> 我们回来
在这部分我们通过
Swift的过滤方法执行过滤表视图
然后用分类进行分类看到过载操作符是小于或是大于
下面的功能也是我想加入app中的最后一个功能
是可以选择多个行 再做累计以便得到
所选元素的原子量
是这样的
我们先从表视图开始
顶部的导航条说选择二或更多项
你选择二或更多项接着顶部的导航条确定其原子量总数
为实现这一点我从内容数组开始
这就是我有的全部原子元素
那些是在表视图中显示的全部
但是我只想要 选中的原子元素
为此 我不能前往表视图
让询问视图所选项的数组
我只能通过所选项的索引路径来找
表视图会给我所选项的索引路径数组
我可以询问索引路径 还获得这一行
我可以将这与支持数组内容相关联
从这里 生成所选元素
基本上 就是这个
我们生成新数组
循环索引路径
返回内容
为当前的索引路径的行找出对应的原子元素
如果你们习惯于这样编码
在Swift中也可以同样
这是映射函数
重要的内容 还是用橙色表示
周围所有的额外基础架构
都已经删除
接下来 一旦我有所有所选项的数组
我就想加上原子量
为此 我会传统地使用一个外循环
那里 我把其变量设置为零
接着重复所选对象并加上 
在本例中是D原子量
如果习惯用for-in循环做这类事
可以在Swift中也同样如此
通过化简函数 我们将初始值设为零
接下来我们加上采用初始值的闭包也就是零值
再把它附在传递来的下一项后面做累加
我给大家看看代码 不过我会把所做的
全部内容用一行代码
进行综述像这样
有个图形设计师看过演示后
曾经问过我能不能把这些放在一行中？
不 不可以
我觉得 你们看不到
我们转到演示电脑上
现在就是所有内容的函数
首先要确保选中的是两个以上的项
这样大家可以看到
只要选中的项大于或等于2就要继续执行这个代码
然后我会用映射这样可以获得通过表视图
而不是索引路径所选定的对象
接着用化简函数进行累加
最后通过数字格式器传递固定在标题部分
如果想在一行内看到同样内容就是这样
在我运行程序时
就会做累加并把结果放在顶部
这样显示映射和化简会使与支持表视图的项一起配合会更容易些
好 总之 
我希望大家发现使用Swift会有很多好处
甚至可以和现有的Objective-C项目配合使用
这并不难 而且还有诸多好处
大家不必把任何现有代码都扔掉
而且会习惯使用这些现代的强大技术例如化简和映射
和这些功能强大的结构等等 
若想了解更多详情可以来实验室找我们
查看文档资料访问开发人员论坛
给斯特凡发邮件
他喜欢收邮件
你可以告诉他大会开的非常好就行了
这么说 我会非常感谢你希望大家喜欢这次大会