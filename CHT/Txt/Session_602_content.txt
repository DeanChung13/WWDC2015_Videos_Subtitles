以Model I/O進行3D資源管理
大家好
歡迎來到這場關於以ModelI/O進行3D資源管理的演講
我是尼克 來自圖像 媒體 和圖形組
今天我很高興向大家介紹新的Model I/O框架
我們正在提高...或者說我們其實是正在讓大家
能夠提高交互式的真實感圖形的品質
到目前爲止你們一直使用的圖形框架和硬件都是過去開發的
當時的硬件與現在相比有太多的侷限
而現在你們口袋裏的設備擁有的功能絕對令人驚豔
現在我們有了新的框架使你們能夠充分發揮硬件的作用
爲客戶服務但是你們必須不斷給這個框架
增添真正好看的元素
所以既然現在有了高性能
和低功耗圖形應用程序接口你們就需要一種方法來把
圖片製作得具有真實感真實感意味着圖片要基於現實存在源於現實存在
那麼你們需要做有很多的研究還要有大量相關的知識
才能實現這個目標
你們需要了解相機的物理原理
各種材料的物理特性光的物理特性
當然你們也可以多讀相關的資料
我很贊成這種做法
要有效運用那些材料和光需要做大量繁瑣的工作
閱讀大量的資料然後再進行集成運用
那麼我們對Model I/O所做的就是我們已經着手進行這些工作
我們已經進行了大量的研究我們已做了一大堆的集成
我們已經準備了一套統一的數據結構
來連貫一致地描述這些性能我們還開發了一個使用簡便的應用程序接口
所以說Model I/O是一個處理
3D資源和數據的框架
所以在最基本的層面上你們可以利用Model I/O
導入和輸出常見格式的文件
你們可以以現實的方式描述採光情況
各種材料 環境條件
你們可以將美工人員提供的資源和作品
導入Model I/O再進行一些有趣的處理
在演講過程中我們會講到處理方法
現在有很多可以運用的工具
其主要關注點都是進行基於物理特性的渲染和材料屬性
I/O模型讓你們可以通過自己的管道利用那些工具
Model I/O已經集成到Xcode 7裏
還有GameKit的應用程序接口裏
可以在iOS 9和OS10.11中運行
所以概括地說這個綠色的大盒子是
Model I/O與你們的框架
或應用程序想融合的地方
我們就從聯繫創建工具講起首先美工人員製作一些很好的作品
然後你們要將其導入Model I/O
接下來由Model I/O快速完成那些原本繁瑣乏味又容易出現錯誤的步驟
爲各種框架創建緩衝區進行快速渲染
在這個盒子之外我們所支持的框架有SceneKit
Metal 和 OpenGL
現在Model I/O不僅可以加載文件和保存文件
它還讓你們能夠進行原本有用
但耗時太長或有其他弊端的操作
來改善資源的外觀
你們可以選取一項資源
對其進行接下來我會談到的各種熱處理操作的其中一項
再把這項資源恢復成統一的表示形式導回Model I/O
再把它放到硬件準備緩衝區
你也可以先利用Model I/O
提供的獨特的功能對資源進行處理
完成這裏的循環然後把它發送回
內容創作工具讓美工人員
進行調整也許再添加一些比如細節處理或進行其他改進
然後你可以不斷重複這個循環直到達到你的app 
所需要的外觀和質量水平爲止
那麼我們今天要講的是這些功能是什麼
其數據類型是什麼
那些數據類型的物理動機從何而來
我們將談論如何支持各種幾何功能三維像素
和一些先進的光照技巧以及我們的熱處理步驟
好的 我們開始麪包和黃油資料讀取中
導入格式我們從
一些最常用的格式開始
蒸餾器是一種性能非常高的格式
它來自電影行業現在也大量在遊戲中使用
這這裏所列出的格式中它是最現代的
它包括了關於動畫和材料綁定的信息
還有其他各種各樣的有趣的信息
多邊形是多邊形的標準格式使用這個格式
需要進行大量的學術研究
三角形通常用CAD和CAM這兩種應用程序製作和攝取
而且Wavefront .obj文件可以得到普遍的讀寫支持
如果要在此刻進行導出
你可以導出你的CAD / CAM材料
所以導入很容易
你使用URL通過內核自行啓動得到一個MDL資源
然後你可以用“輸出資源到URL”把它導出到其他位置
關於物理真實感我還要再說幾句
但是不做太細緻的解釋
光照一直以來都要有一個位置
比如一個錐角衰減區
還要有其他一些從物理角度來看不真實的參數
這些參數只是在數學上與過去的硬件和
圖形應用程序接口相統一
我們現在要爲大家提供的是對IES概要文件的訪問方法
現在如果你去五金店並且發現
比如你非常喜歡的一款燈具
比如說我真的很喜歡那裏的那款燈而且我在商店裏看到了它
我可以先讀一下旁邊的標籤再去生產商的網站
在網上我可以找到一個IES概要文件
它是一個數據文件裏面有關於這種燈的各種數據
我能瞭解每一個角度燈光的輻照度
我們把那個文件讀入到一個所謂的輕型網絡
就是一組很容易加載到着色器裏的數據
那麼如果你願意你可以在你的着色器裏
親自點亮可與真實世界的燈媲美的燈
現在你在五金店裏買燈時
不會專門提出RGB值或類似的要求
燈的特點通常由溫度描述比如4000開氏度或其他度數
那麼你也可以用開氏度來指定這些高度
我們還可以提供基於那邊正在工作的
挖掘機的燈光的圖像
這些材料以前都需要使用傳感器 
這意味着隨角度衰減現象
並且在Blinn-Phong高光區
會有可調節的亮點
我們還爲你們提供
一個基線物理雙向反射函數
也可以叫做BRDF如果你想要取得
絕對逼真的效果你絕度需要這個函數
請注意那臺挖掘機上就有BDRF
相機歷來是針孔相機
描述相機時我們從鏡頭一直介紹到傳感器
現在我們爲你們提供一些實用程序
來處理照片和程序中的各種環境元素
現在你們會看到用Xcode中的工具做熱處理
在這張幻燈片上我要告訴你們
在Xcode中你可以用來
執行這些操作的工具你也可以通過框架在Model I/O中使用
所以如果你想製作自己的管線
你自己的離線管道以便對自己的資源
進行徹底的熱處理無論批次大小
都可以通過應用程序接口框架
使用那些工具
我們已經介紹了三維像素
你們可以選取一個又大又舊的網格把它變成巨大的索引緩存
你們可以把自己的數據與它關聯起來
稍後我們會就此多談一些
再說一次在資源的基礎上
創建三維像素以及在特定區域找到三維像素非常簡單
你們可以運用實體幾何構造法
還可以把三維像素導回到一個網格
期間可以利用數據平滑法
類似的做法吧
所以通過系統集成將Model I/O直接集成到
SceneKit中可以在MetalKit和GLKit中使用
在取景器和快速瀏覽功能中Model I/O是用來做預覽的
所以你可以去找一個蒸餾器abc緩存文件按下空格鍵
然後會彈出取景器你可反覆查看你的資源
甚至不用打開任何類型的試鏡環境對其進行預覽
您可以在Xcode中編輯資源
這張圖片中的挖掘機就是用Xcode進行加載的
Model I/O使用Swift語言在Playgrounds中工作
好 這一切可以歸結到數據類型的本質
所以從一個URL得到的是MDL資源
它包含了你們往往會處理的所有對象
它是一個你知道快速列舉素材資料的索引容器
它有變換層次結構 網格
相機和燈光 這些你可以利用應用程序接口進行製作
或通過URL加載
所以一項典型的你可以利用的asset
比如一個又大又舊的蒸餾器文件會包含很多有趣的東西
這個舉一個例子裏面有幾個攝像頭
一盞燈 一個根變換
以及右上角的藍色框
下面是挖掘機的信息
橙色的框顯示 是的
橙色的框只是表明你也可以顯示你的材料賦值情況
這就是資源所包含的信息
這都是邏輯上的應爲一體的東西
所以你就有了很多的資源把它們組合成一個場景
asset有內存分配器
你需要的話可以添加分配器自己管理內存
Asset有內部事務描述符
這是導入導出工具
和大量子工具
這些子工具都是MDL對象
MDL對象自身可以組成一個層
現在完成了一個典型的標準圖當然應該有轉換層
MDL對象有轉換組件
我們並沒有執行轉換
你知道這是放置矩陣的標準步驟
實際上我們有轉換組件
這種組件非常有意思
因爲它允許我們創建一種場景圖
這種場景圖不必有父/子的類型關係
另外可以定義自己的組件
現在我想我應該已經提到了那個好東西
編寫自定義導入導出器的API已經設計出來了
你可以編寫如果你有自定義的文件格式
你可以編寫倒入導出氣讓我們回來
這裏有個自定義的觸發器組件
它擁有了一組你自己的功能會發生一系列相應的動作
這個編寫自定義導入導出器的API可以讓你自己創建功能
並定義它的動作是什麼定義它連接什麼
現在一個網格包含一個或多個頂點緩衝區
這是需要GPU進行位圖化的位置
法向下面是子網格
要想知道子網格實際是什麼
你應該有一個驅動挖掘器的功能
這個功能應該有些像安全帽一樣的可選組件
這個組件不應該是可選的但它確實是
在一個索引緩存中我應該有整個沒有可選組建功能
在另一個索引緩存中
我應該有所有指向原始網格頂點緩存的索引
它裏面應該有可選組件
所以通過渲染或者不渲染子網格
網格會有可選組件或者沒有可選組件
子網格之間可以用頂點緩存共享數據
所以這將會允許你向硬件單獨提交
因此網格除了有頂點和索引緩存
還有功能函數以及產生
常用事物的生成模板例如盒子 球等等
還有調節器
如果一個網格沒有法線或切線基值
或是類似的東西 你可以在需求中生成
回想一下烘焙和導出循環我前面提到過的
當然得有烘烤師
現在一個網格緩存必須訪問硬件
因爲它要去硬件取數據
取硬件中的真實值
緩存有多大取決於你如何分配它
你必須描述這些頂點緩存
你必須說出緩存的用途比如是存儲位置嗎
它有多大？
它佔用多少字節等等 等等
最後從一個頂點切到另一個硬件需要知道這些
子網格也一樣
確定你需要什麼樣的索引
是16s還是32s或是其它
下面講幾何類型三角帶？點？還是線？
最後是材質
如果你使用這些類庫能生產積極性
爲了告訴你這意味着什麼
我們使用了雙向反射函數
它有十個簡單參數這是爲了讓藝術家有更加直觀的感受
一個更重要的功能是設定物體是否貼合實際
像黏土或是金屬
如果你向一頭設定這個值
它就會像是黏土
如果向另一頭調
它就會表現得像是金屬
在這裏我把這兩者結合起來把一個丙烯酸透明的外套
放在金屬底座上面我調整了一個參數給出緞面的效果
這是一個真正藝術家般的作品
一個有着各種不同材料的太空船
只是給你一點思路只需很少的
參數就可以給出多種多樣的外觀
那麼材質應該有個名字類似於所有在Model I/O中配置屬性的東西
無論你是否想要Lambert Blinn-Phong
都要設定散射函數
因爲需要向下兼容舊系統並且真實可信
當然如果你想進入真實可信的勇敢新世界的話
這些材質是單獨繼承的這意味着
你可以通過改變每個功能的一個值或是某些東西
你可以指定基礎材質和跨越屬性
以及子類材質
材質屬性有名稱用來說明
它們如何使用的釋義
以及說明它是浮動值或是顏色值的類型
下面是光
光有物理參數
和物理屬性以及幾何形狀
它們有擴展度和寬度
光以特定的方式傳播
你可以指定它的流明和色溫
在整個Model I/O中真正讓我激動的
是得到了色彩方面的支持
可以指定使用現代色彩
如果你想用SRGB我們有設定好的SRGB
如果你想用Rec.709
或者是新的Asus CG色彩配置
這種色彩配置可以保證你的色彩
以一定的方式在app的內容里加載
它自始至終表現穩定
不會發生奇特的變化這可能會給你你知道意想不到的色彩
我們現在有了類似物理光
各種子類程序區光源
應該說是程序描述的區域光源
IES光度分析計
反光貼圖或發光貼圖的光探測器
你可以用它們來計算球面諧波諸如此類的代表正在發生什麼的東西
我們的相機也不僅僅是針孔無限聚焦相機
我們描述的相機發生了巨大的變化
我的照片這裏應該有個鏡頭這裏應該有個傳感器
我們描述鏡頭可以看到的範圍描述鏡頭屬性
失真的種類 桶形失真
或者是色差之類的東西鏡頭的幾何形狀
鏡片的有多大 鏡筒有多長
出口孔徑
你關了多少光圈 傳感器有多大
傳感器的曝光功能是什麼
所有上述設置的結果是
如果你裝載了一個35或者說50毫米F1.8光圈的相機
去查維基百科
一個這樣的鏡頭有什麼功能
視野是多大 離焦光怎樣
突出尺寸及MDL相機的實用功能等類似的東西
這個相機將和你在書上看到的一樣
所以這是一個方便而且有趣東西
我鼓勵你把這一類的計算整合到你的着色器和通道
這裏只是一個簡短的例子
當我第一次將它加載到我的查看器中
使用默認的曝光設置
有些細節的丟失
挖掘機的黑暗區域很多細節看不到
對不起 這裏的亮度不好我這圖像曝光不足
然後 使用閃關燈以
給出陰影的細節在減少炫光的同時提升整體水平
就像一個攝影師做的那樣
如果你玩的是自己真正的相機
現在 該天空了
我們有兩種方法創造天空
第一種方法是使用一個程序天空發生器
它使用物理學
你給出當天的時間本質上太陽有多高
天氣如何有沒有很多地面上來的背散射
空氣中是不是有很多垃圾
我們通過大量的數學運算
精確計算天空的樣子
另外一條路是
它創建一個立方體你知道使用...
現在你可以在這個基於物理的領域
創造天空的另一種方法是攝影
你可以用手機或DSLR
攝製一個球形全景圖我用IPHONE製作了這張圖
你可以使用mdltexture和initwithurl API
創建一個立方體
反射或發光地圖
從圖像中我們可以推斷出光是入射光
所以這已經轉換成一個立方體
然後從這些裏面你可以計算出輻照度
這三條顯示的是原始圖像
中間線是紋理貼圖以一定的卷積或水平的模糊度發光
第三個真的很好玩中間是一個紋理它使用大量的內存
第三個實際是球諧係數
所以他是27浮動重現的光照環境
之前用數十個K代表中間線或中間地帶
把這些放在一起
這個挖掘機和它周圍的環境非常和諧
我畫的這些作品我認爲另人激動我希望你們可以
用這些工具做出非常酷的作品
現在我只是想多說一點
關於如何整合Model I/O和SceneKit
本質上在Model I/O和SceneKit元素的頂層
有一對一的依賴關係
mdlasset對應SceneKit根節點
MDLMesh 和SCNNode通過SCN座標聯繫起來
MDLLight有SCNLight的相機和材質
在SceneKit參數和Model I/O參數間
沒有一致的模型我們就通過翻譯
得到一個近似的模型
現在Model I/O實際上沒有做渲染
你可能收集了既然我提到過其它渲染APIS
所以在metalkit更接近金屬
你將MDLMesh作爲
MetalK和Model I/O間的模型陣
網格陣列一旦你有了網格陣列
你就可以自己寫陰影遍歷網格
和照明條件並做渲染
但是得到這些爲你準備的金屬緩存是絕對透明的
說到這個我想把麥克風給克勞迪婭·羅伯茨
分享關於幾何圖形和體素的內容
大家好 我的名字是克勞迪婭·羅伯茨 尼克已經提到了
我將概述一些不同的方法以便你可以
描述和個性化Model I/O中的幾何圖形
幫助你創造更加有真實外觀和感覺的遊戲和應用
給你們講一下我們將要分享的重點
首先我將討論Model I/O如何支持正常平滑
然後進入細分曲面討論體素和一個快速的演示
好的 開始吧法線平滑
法線平滑是非常酷的技術
能讓人相信你的模型有更多幾何形狀
默認情況下多邊形的頂點都有相同的法線
這樣多邊形的表面也有相同的法線
這會造成相鄰多邊形之間的一個明顯的褶皺
這是突然變化和頂點法線的光柵化過程的結果
這種顏色的強烈對比可以減輕
通過引入一個共享的法線值
其值是共享相同的座標位置頂點法線的平均值
現在在GPU輕度計算下多邊形表面每個點的正常值
將是頂點法線插值
不再是同樣的值展現出很好的平滑明暗效果
使用mdlmesh API你可以通過調用addNormalsWithAttributeNamed方法
給對象添加平滑法線
你還可以通過設置皺紋閥值
控制什麼時候使用正常平滑
在我們的飛船上我們看到左邊有默認的平面陰影網格
右邊有平滑陰影
下面是細分曲面
細分曲面是一項普通技術
用來使用低細度的幾何圖形產生
和渲染平滑表面
這種技術可以讓你使用一個簡單的多邊形控制網格
創建所需的不同級別的細節
舉例來說當一個物體遠的時候
它以少量的多邊形來渲染
當物體離鏡頭越來越近的時候
它會提高顆粒度
通過改變模型的細分層次
你可以產生不同的網格
不需要全部人工創建
在Model I/O中你可以通過調用新的
SubdividedMesh程序或者MDLMesh來創建細分層次
在下面我們將細分級別設置爲2
實現了右邊的光滑網格
多邊形數顯著增加
最後是體素
除了提供各種以多邊形展示
3D模型的先進技術
Model I/O還支持容量展示
通過以物體近似真實世界
的情況展示模型這是一系列空間粒子或點
有固有的性質 如體積 質量 速度 顏色
以一系列的物理現實技術分析和操作
的大門向你敞開了
與多邊形網格一樣很難建模
和展現表面不規則的現象如雲 水 火
有了體積表現就變得非常容易了
現在與其試圖混合和扭轉
多邊形的剛性外殼該模型成爲一個變形的物質
任何時間都可以改變它的屬性
沿着相同的路線 這表示
允許程序生成建模意味着它可以製造
讓人興奮和感到新奇的機會和遊戲
考慮修改和毀壞對象和飛地
因爲體素模型能更準確地表現
真實世界它可以讓自己以
更自然和真實的方式被探索和操縱就像是切片技術
這事實上被證明在醫學影像領域
是特別有用的非常幸運
科學家已經證明我們頭骨不是一個三角形空殼
最後鑑於你已經有了固體體素模型
你可以執行構造實體幾何布爾
操作以便創建大量
更有趣複雜的模型
在Model I/O中我們以
MDLVoxelArray API暴露體素
我們的作品以稀疏網格表現
空間模型稀疏網格可以
使用簡單的空間索引訪問
這個表現形式具有快速找到並訪問鄰居的功能
網格除了連接得每個體素外還包含殼等級值
殼等級值是表明體素在正外部方向
和負內部方向離模型表面的遠近
Model I/O也支持
創建封閉網格模型的清理及轉回多邊形網格
我將向你展示少量你需要的API調用
以便能引入體素和Model I/O
假設有一個初始化的MDLVoxelArray
你可以通過調用setVoxelsForMesh方法
從MDMMesh模型產生體素數據
分離參數的作用是設置分辨率設定層的數量
將你的模型在垂直方向分開
你也可以設置模型內牆和外牆的厚度就用最後的這兩個參數
一旦你建立了體素數組對象
你可以在它們上面執行各種各樣的操作
例如體素的交集合集及差分
這些是基本布林操作
要實際加工和處理
檢查體素數據只需調用getvoxelindices方法
做完了上面的操作用meshUsingAllocator程序
就可以將體素模型
轉換回多邊形模型
非常簡單
現在我將用快速展示來展現一個動態的體素
讓我們看這個展示
它會用一個小時的時間來展示
如何使用SceneKit editor來創建
我們只需要在地面上拖拽
同樣地像昨天在華盛頓看到的紅色熊貓那樣
這是規則的多邊形網格你可以使用任意的網格來製作
下面是使用MDLVoxelArray API它僅用兩條線的代碼
就把網格變成了體素
那麼對於每個體素我們都創建一個SCN盒子 就像這樣
現在我們有了在SceneKit中的體素
讓人激動的是我們可以使用
SceneKit所提供的所有非常酷的東西
舉例來說使用一條線的代碼
我們可以把SCN盒子變成SCN球
讓大家開心下我們將SceneKit體素
提供給所有節點然後引爆它
現在由Remi來接着講
關於照明和Xcode支持的高級主體
大家好 謝謝克勞迪婭
如克里斯所說我將分享關於烘焙
以及Model I/O工作原理的高級內容
所以就是高級照明和烘焙目的是什麼
目的是介紹框架和喧染通道
在你的遊戲中叫做全局照明
是什麼呢？
這麼說不好立即 好吧我這裏有點的高度
有三角形讓我們用點工具照亮它就是了
我們將試圖讓場景看上去是真的
我們將要在光線因爲不能穿過三角板
而在牆上反射的和阻擋的場景中
仿真光線實際移動
問題是這消耗非常大
在影片中會花費很長的時間如果你想花費半個小時去重構的話
但這不適合我們
請看這張圖片你可以看到舉例來說
這裏的牆左邊的紅牆
在球上投射了一些紅色的光
牆不是真的光但光在
真實世界裏是從牆上反射到球上的
回到球上它有點暗因爲球吸收了牆上反射的光
它不是真實的直接陰影但是還有一些事情發生
問題是很難做到實時
所以我們將展示如何在
預編譯期間遊戲運行之前做一些預運算
這樣你可以得到近似真實的景象
而不用任何性能的回落
我們將平衡性能和質量
所以你可以用很少的性能開銷得到你想要的效果
因此今天的全局照明將有兩個點
首先我們將展示環境遮擋
然後是光照貼圖
爲了介紹環境遮擋我會展示一個示例
請看這個飛船它是默認的SceneKit飛船 看上去不錯
是一個大飛船我喜歡玩這個遊戲但是它有點平
如果你看看翅膀和發動機
它的翅膀尾部和發動機的開端部位有點不清楚
如果你看右邊圖像的兩翅片
它有點怪異因爲你給它的光
和前面的飛船的光一樣但是翅片應該擋住光線
如果你要添加環境遮擋 它會變成這樣
同樣的漸變但是看上去更真實了
因爲現在在翅膀和發動機之間的
遮擋有了陰影
如果我在第二個上面添加環境遮擋
它會這樣 同樣的
但你可以看到光的遮擋
這是更讓人信服的體驗
這是一個更好看的圖片環境遮擋實際是什麼
環境遮擋是非常簡單的幾何圖形遮擋測量
意思是我的點或是網格
在我的世界裏有多少光
可以真正的落在我的點
有多少光被我的網格或是它周圍的網格遮住了
所以它基本上是一個信號 1代表白色說明我完全無遮擋
全部的光發散出去了大多的光不能到那
如果我們看信號
是這樣的
幾何全白因爲大多數光都不能到那兒
但是你看一些...那裏的物理數據
我們如何計算？
使用離線光線追蹤
網格變成...我們把光線射向各個方向
然後計算如果我在我的點周圍照射光線
有多少光線
有多少光線射在網格上有多少射在天空盒子上
兩者之間的區別在於我的環境遮擋信號
我們需要什麼？
輸入 網格 我的太空船
一系列的遮擋網格
這裏它只是一個太空船
舉個例子如果我表現那個場景的光
我想做地面場景的它將計算地面的環境遮擋
我還要所有的椅子 人 地板
所有阻擋光線的東西這樣我就有了一個非常好看的網格
這是非常好的設定
我的輸出是
一組每個點的遮擋值
點的遮擋
我們如何存儲
2種方式頂點或紋理
如果我的網格有很多頂點
舉例來說一個有大量三角形的太空船
我們可以用頂點來存儲非常好
因爲它非常節省資源每個頂點只要一浮動
柵格化你的金屬或管道非常節省的渲染
舉例來說太空船是少量三角形
我們需要紋理來存儲
我們已經內建在Model I/O
一個UV映射創建二維紋理以其包裹3D網格
這樣這個紋理的每個象素都有了環境遮擋
我們要看看這個飛船的紋理是什麼樣子
它是這樣的
你可以看到紋理環繞在太空船周圍
你可以看到翅膀和發動機的基座等等
我們怎麼計算 非常簡單
簡單得不行
舉例來說你可以看最上邊的這個船網格
產生環境遮擋
這是紋理
我們有2個參數質量和衰減因子
如果我們提升質量它將會將會發射更多的光線
得到更好看的信號 但是它將會花費更多的時間去計算
因爲這是烘焙它會在遊戲加載前運行但問題還沒解決
如何我們做一個紋理烘焙那麼紋理會更大
所以它會提升一點內存消耗
那麼衰減僅僅會衰減信號
只有暗的部分仍然保持暗
最酷的是我們與SceneKit團隊開發了在SceneKit甚至是
SceneKit編輯器中的功能
大家在華盛頓看到過了
我將立刻向你展示這個
它有效了
這裏我只加載了一點場景
太空船和天空盒子
太空船在太空飛得非常好
我在這裏沒有加光所以非常平唯一可見的是環境光
你可以看到環境光線對
太空船的外觀沒有作用
它沒有以幾何圖形位置的形式
反饋給用戶 所以它非常平
我們要改變
我先點擊網格
我將看到實際上這裏有些頂點
所以我們做個頂點烘焙
我會帶入幾何選項卡
我將在這兒在環境烘焙下面 選擇頂點
這些值非常好 點烘焙
發生了什麼
對於船上的每一個小的頂點我們將發送100
到200光線到它的周圍看上去是這樣
看 更好的方式
我們有了這個 現在又有了這個
它感覺上更好了
如果你看 例如 這 頂板
在1號底部有遮擋因爲光線不能很容易的到達那裏
如果我們看這裏面的窗戶 在這裏
窗口的內口比外部有更多的遮擋
如果我們看這
縮小
如果 我們看下面的大炮
大炮的頂部非常暗
因爲整個船阻止光到達那裏
如果我們看底部
都是白的 有意義 是嗎
所以每個頂點增加一浮動，我們能
用環境光照亮我們的場景更好看了
在SceneKit中是可用的
讓我們回到幻燈片
這是環境遮擋
今天關於以高級光貼圖照射就分享到這裏
光貼圖是什麼
光貼圖是一種方法讓你的漫射照明
進入遊戲並預計算實時還是非實時情況下
擴散照明對紋理的影響
正如你們知道的如果你做了一些遊戲編程
光照是非常耗資源的
如果你有十個光源那麼每一幀
你需要計算光的方面以及它是如何幹擾你的遊戲的
這非常耗資源
這裏我拖拽了仿真器中的一個飛機
兩隻盒子八個光源
然後 我計算 在我加載遊戲前
使用光貼圖烘焙光貼圖如何照亮場景及照亮紋理
如果我們看這個場景
看上去這樣
非常真實
我們有了陰影和光
但是這實際耗費一個紋理獲取
這樣
通常渲染八個光特別是如果你有陰影
陰影貼圖非常耗資源
紋理看上去這樣
很簡單你看中間的箱子和陰影
這非常酷 只是一個紋理獲取 是嗎？
它支持非常多的光
我能有100,000個光源
它將具有相同的運行成本
甚至陰影看上去也很酷
當你象這樣做出個點光源它非常貼近地面
你會遇到精確性問題除非你這樣做
發送光線到這個東西上的每個象素
看看哪個象素有光哪個象素沒有光
你的陰影看上去將非常真實離線計算
我們支持超複雜的實時幻燈片
你甚至無法想像 這非常酷
舉個例子我們實際的光照在很長的時間裏很難
做到實時因爲用一般的點光
很難做到三角反射處理
這裏我們用的是光線追蹤
所以我們只要發出光線看看哪些有光哪些沒有光
我們也支持冷IS光源
尼克之前說過的
這是光貼圖
讓我們總結一下
今天我們介紹了一種非常新的框架對於它 我們非常高興
首先它做了基本的3D文件導入導出
但是對你來說做得非常多
它使用基於真實世界
而不是以浮動定義的模型 光 相機 物質和天空
介紹了渲染的物理基礎概念
我們有系統集成在Xcode中
的框架和工具中你可以玩 玩得很開心
爲得到更多的信息我們邀請你看我們的文檔
視頻 論壇和技術支持
任何一般的查詢您可以聯繫艾倫·謝弗
相關的會議有明天的“SceneKit進階”
和週二的Metal新功能
一會兒和明天早上9點
我們將在Model I/O實驗室見面
謝謝你們希望你們有一個偉大的WWDC