00:00:28.428 --> 00:00:29.930 
JAKE BEHRENS: 早上好

00:00:30.764 --> 00:00:32.866 
歡迎來到 
"WatchKit 提示和技巧"

00:00:32.933 --> 00:00:34.268 
我叫Jake Behrens，

00:00:34.334 --> 00:00:36.937 
我是蘋果watchOS框架的講師

00:00:38.038 --> 00:00:40.407 
今天，我們將討論
如何利用的不同的方法

00:00:40.474 --> 00:00:44.378 
去優化你在
watchOS上安裝的應用

00:00:44.444 --> 00:00:45.746 
在 watchOS 1中

00:00:46.780 --> 00:00:49.116 
將會有很多我們需要討論的東西

00:00:49.349 --> 00:00:52.653 
同樣這個也適用於watchOS 2

00:00:53.020 --> 00:00:55.155 
在討論的過程中 我將會指出這些

00:00:58.025 --> 00:01:00.794 
如今 隨着之前蘋果手錶的發佈之後

00:01:01.328 --> 00:01:03.230 
在寫第一個手錶app的過程中

00:01:03.297 --> 00:01:06.767 
我們有了和很多個
開發者一起工作的經歷

00:01:07.568 --> 00:01:10.537 
在這個過程中我們學到了很多

00:01:11.071 --> 00:01:13.740 
而今天我們也將會和你們分享很多關於

00:01:15.075 --> 00:01:17.411 
類似於怎樣優化你的網絡

00:01:17.945 --> 00:01:22.249 
或者怎樣減少你的
下載時間等很有用的知識

00:01:23.851 --> 00:01:25.953 
所以 首先讓我們從數據和交流開始吧

00:01:26.753 --> 00:01:28.355 
正如我前面所提到

00:01:28.655 --> 00:01:33.293 
從你的web服務器上或者安裝的蘋果
應用程序中 獲取信息是至關重要的

00:01:33.627 --> 00:01:35.395 
以至於你必須將一部分內容

00:01:35.729 --> 00:01:38.999 
去實際的顯示給用戶

00:01:41.201 --> 00:01:44.171 
現在，想象一下
你的用戶正在車站等候

00:01:44.738 --> 00:01:47.975 
他們擡高了自己的手腕
他們正在和你的應用程序進行交互

00:01:48.375 --> 00:01:50.544 
突然你啓動了一個網絡請求

00:01:50.611 --> 00:01:53.113 
然後公共汽車從拐角處開過來了

00:01:53.514 --> 00:01:55.916 
因爲他們得到了自己
想要的東西所以用戶們放下了胳膊

00:01:56.183 --> 00:02:00.287 
然後他們匆忙地朝着
公共汽車趕去上車然後坐下來

00:02:01.021 --> 00:02:03.357 
好了你要做的事情
就是確保下一次提高手腕

00:02:03.423 --> 00:02:05.893 
他們重新回到你的應用程序中的時候

00:02:06.193 --> 00:02:08.294 
數據仍然在那兒等着他們

00:02:08.895 --> 00:02:11.164 
而不是你必須重新讀取它

00:02:11.932 --> 00:02:13.734 
所以 你怎樣纔能有
效的完成這個過程呢？

00:02:14.368 --> 00:02:17.638 
好 第一部分就是你需要一個網絡請求

00:02:18.038 --> 00:02:20.007 
這是你如何獲得信息的過程

00:02:21.708 --> 00:02:26.914 
下一步你需要做的就是
詢問系統是誰請求了

00:02:26.980 --> 00:02:28.182 
後臺的任務中斷處理

00:02:28.549 --> 00:02:33.086 
這種方法是向系統提出要求
說“嘿 我需要一些時間

00:02:33.554 --> 00:02:36.490 
因爲我可能需要完成某個進程
一旦你開始

00:02:36.557 --> 00:02:38.358 
暫停我的 WatchKit 
擴展程序時”

00:02:40.794 --> 00:02:44.164 
更進一步 如果你碰上後臺任務聲明

00:02:44.431 --> 00:02:46.166 
你會需要將其保持在打開的狀態上

00:02:46.366 --> 00:02:49.236 
以便你的網絡請求能夠得以完成

00:02:51.205 --> 00:02:52.773 
那我們怎樣去完成這些呢？

00:02:53.173 --> 00:02:54.508 
現在我們要一起走過整個過程

00:02:55.609 --> 00:03:00.480 
第一件事你需要做的
是設置好你的網絡請求

00:03:00.881 --> 00:03:04.351 
爲此我們將使用
默認 NSURLSession

00:03:05.219 --> 00:03:09.423 
現在注意 我不會
使用後臺 NSURLSession

00:03:09.790 --> 00:03:11.024 
因爲在哪種情況下

00:03:11.091 --> 00:03:13.227 
如果我們的 WatchKit 
擴展程序被暫停了

00:03:13.293 --> 00:03:14.862 
其完成就會取決

00:03:14.962 --> 00:03:16.730 
於我們總的 iPhone 應用程序

00:03:16.797 --> 00:03:19.032 
如果我們要把我們能做的一切

00:03:19.299 --> 00:03:21.301 
都在 WatchKit 
擴展程序中完成

00:03:22.803 --> 00:03:26.273 
所以 接下來我們要索求
那個後臺任務的聲明

00:03:26.640 --> 00:03:27.774 
我們怎樣做到這一步？

00:03:29.443 --> 00:03:31.678 
做到這一步我們需要使用

00:03:33.113 --> 00:03:35.449 
“合理執行到期活動”

00:03:35.883 --> 00:03:38.318 
這一NSProcessInfo
上的方法。

00:03:39.486 --> 00:03:42.990 
這一方法會向系統索求
一個後臺任務聲明

00:03:43.056 --> 00:03:45.926 
並說“嘿 我可能仍需做件事情

00:03:45.993 --> 00:03:48.228 
一旦你要暫停 WatchKit 
擴展程序”

00:03:49.329 --> 00:03:53.634 
做法是 你向系統
傳遞一個調試字符串

00:03:53.700 --> 00:03:55.302 
這裏字符串是 networkReq

00:03:55.669 --> 00:03:57.771 
然後系統就會執行那個程序塊

00:03:58.505 --> 00:04:02.242 
現在 該程序塊就會立即被調用

00:04:02.342 --> 00:04:05.145 
當系統調用
“合理執行到期活動 ”時

00:04:05.879 --> 00:04:08.048 
現在 有些事情要牢記於心

00:04:08.115 --> 00:04:09.650 
這些事情實在重要

00:04:10.117 --> 00:04:13.854 
第一件事情是該程序塊的執行

00:04:13.921 --> 00:04:15.389 
將會在一個異步隊列上安排

00:04:16.223 --> 00:04:19.392 
所以你的主隊列依然
會被釋放出來用戶將能與其界面

00:04:19.459 --> 00:04:21.495 
進行互動這不會有任何問題

00:04:21.762 --> 00:04:25.032 
用戶不會感覺到有任何不同

00:04:25.999 --> 00:04:30.737 
如果 “已到期” 變量設置爲
“假”那就意味着

00:04:30.804 --> 00:04:32.906 
我們的時間還沒用完

00:04:33.173 --> 00:04:36.410 
也就是 系統已經給了我們
一個後臺任務聲明

00:04:37.511 --> 00:04:39.713 
然而 如果失效了

00:04:40.013 --> 00:04:44.151 
那麼久意味着系統不能給
我們提供一個後臺任務中斷

00:04:44.785 --> 00:04:47.054 
這意味着系統不能正常的運行

00:04:48.088 --> 00:04:52.192 
然而 如果說我們
已經有了一個後臺任務中斷

00:04:52.459 --> 00:04:55.262 
這就意味着系統可能已經
覺得我們完全沒有時間了

00:04:55.429 --> 00:04:59.700 
所以便在把失效設定爲正確之後

00:04:59.766 --> 00:05:01.468 
再執行這個模塊

00:05:02.002 --> 00:05:04.071 
將會給你一段時間

00:05:04.371 --> 00:05:08.242 
來確保你已經刪除了
你所擁有的任何狀態

00:05:08.542 --> 00:05:11.445 
或者在WatchKit
擴展完全終止之前

00:05:11.512 --> 00:05:13.046 
你需要做一些事情

00:05:14.448 --> 00:05:19.820 
正如我所說的那樣最關鍵的事情就是
這個模塊需要用異步序列的方式去執行

00:05:21.355 --> 00:05:24.424 
第二個很重要的就是一旦這個

00:05:24.791 --> 00:05:27.661 
模塊執行完畢

00:05:28.128 --> 00:05:30.197 
然後你的時間消失

00:05:30.397 --> 00:05:32.599 
它放棄了後臺的任務中斷

00:05:33.233 --> 00:05:36.703 
因此我們要做的就是確保

00:05:36.770 --> 00:05:39.673 
我們有足夠的時間
去完成我們的網絡請求

00:05:40.340 --> 00:05:41.808 
可能需要兩秒

00:05:42.042 --> 00:05:43.510 
可能需要十秒

00:05:43.911 --> 00:05:44.878 
可能花更多時間

00:05:47.481 --> 00:05:50.284 align:start position:10%
我們將會利用稱爲調度信號量的東西

00:05:51.151 --> 00:05:55.422 
調度信號量是中央調度
（GCD)的一部分

00:05:55.923 --> 00:06:00.527 
這本質上允許我們
用一種異步隊列的方式

00:06:00.594 --> 00:06:02.296 
去暫停執行

00:06:03.830 --> 00:06:06.834 
所以稱之爲“調度信號量等待”

00:06:07.301 --> 00:06:09.369 
與此同時 它將會暫停執行

00:06:10.137 --> 00:06:13.507 
但是 在你需要再一次重新啓動的時候

00:06:13.640 --> 00:06:15.976 
你可以請求“調度信號量信號”

00:06:16.977 --> 00:06:19.413 
現在 請注意我已經經過了一段時間

00:06:19.713 --> 00:06:21.682 
這本質上是一個超時

00:06:22.282 --> 00:06:24.251 
在這兒我已經把它設置到30秒了

00:06:24.318 --> 00:06:25.519 
當然也可以是其他數字

00:06:25.586 --> 00:06:29.489 
然而我想確定的是
你知道一旦它到達30秒

00:06:29.923 --> 00:06:33.093 
我應當獲得我的數據或者報失

00:06:36.630 --> 00:06:38.665 align:start position:10%
所以這可能有點抽象

00:06:38.999 --> 00:06:41.602 
而且是有一點點先進的概念

00:06:41.802 --> 00:06:44.371 
所以讓我們看看實際中真正需要的代碼

00:06:51.478 --> 00:06:55.816 
好的 因此我這裏有一個爲
watchOS 1建立的

00:06:55.883 --> 00:06:57.584 
WatchKit 擴充

00:06:58.452 --> 00:07:01.955 
我面前是一個子集工作界面控制器

00:07:02.990 --> 00:07:06.260 
您可以看到我做的
第一件事是創建一種屬性

00:07:06.326 --> 00:07:08.529 
用於執行會話數據任務

00:07:08.996 --> 00:07:11.331 
我們將要用這個數據任務來

00:07:11.765 --> 00:07:14.835 
從我們的網絡服務中提取信息

00:07:17.104 --> 00:07:18.972 
接下來將激活

00:07:19.606 --> 00:07:23.510 
並實現您隨時隨地可以網絡編碼

00:07:23.710 --> 00:07:25.812 
就這個例子來說 簡而言之

00:07:26.046 --> 00:07:27.514 
我正在做的就是即將激活

00:07:28.682 --> 00:07:31.318 
首先我會檢查數據任務的狀態

00:07:31.485 --> 00:07:33.520 
我還會看一下它是否已在運行

00:07:34.221 --> 00:07:37.858 
因爲如果用戶擡起手腕 開始了互動

00:07:37.925 --> 00:07:40.994 
開啓了網絡請求 放低了手腕

00:07:41.195 --> 00:07:44.798 
啓動了後臺時間 接着又擡起手腕

00:07:44.865 --> 00:07:49.102 
但是該請求還沒有完成 
那麼我不想再次啓動網絡請求

00:07:49.469 --> 00:07:51.772 
我只會在當前沒有網絡請求運行時

00:07:51.839 --> 00:07:53.440 
再次啓動網絡請求

00:07:56.677 --> 00:07:59.146 
因此接下來我將創建一個網址

00:07:59.313 --> 00:08:01.748 
僅指向我的網絡服務

00:08:01.815 --> 00:08:04.918 
這裏它指向了應用商店的元數據

00:08:06.119 --> 00:08:09.690 
一旦我有了這個網址我就開始創建信號

00:08:10.023 --> 00:08:11.992 
稱爲“發送信號創建”

00:08:13.994 --> 00:08:17.998 
接下來我將使用一種方法 我稱之爲

00:08:18.065 --> 00:08:19.533 
“請求確認信號”

00:08:19.600 --> 00:08:21.702 
來傳送這個新創建的信號

00:08:23.103 --> 00:08:26.306 
因此 如果我們審視使用
這種方法時正在發生的情形

00:08:26.440 --> 00:08:30.277 
這其實就是我們所說的
“理性執行到期的活動”

00:08:30.711 --> 00:08:34.248 
我們正在調試字符串傳送
如果到期設設定爲假

00:08:34.313 --> 00:08:37.417 
那就意味着我們獲得了一些後臺時間

00:08:37.818 --> 00:08:40.087 
而我正在通過我的逾時進行傳送

00:08:40.386 --> 00:08:42.188 
我稱之爲“發送信號等待”

00:08:42.923 --> 00:08:47.494 
記住 這將會導致異步隊列暫停執行

00:08:48.095 --> 00:08:51.665 
沒問題 用戶依然可以與應用進行互動

00:08:51.732 --> 00:08:53.300 
假如WatchKit
擴充進入了後臺

00:08:53.367 --> 00:08:55.369 
它就保持在那裏

00:08:55.669 --> 00:08:58.539 
確保了我們有足夠的時間

00:08:58.772 --> 00:09:00.140 
完成我們的網絡請求

00:09:01.675 --> 00:09:04.545 
那麼 如果到期設定爲“真”，

00:09:04.778 --> 00:09:07.648 
這意味着我們或者沒有接收到背景任務

00:09:07.714 --> 00:09:09.349 
執行或者我們可能接受到了

00:09:09.516 --> 00:09:12.886 
但是現在系統又再次調用它
說你已經超時

00:09:13.253 --> 00:09:15.189 align:start position:10%
那麼 我們將調用一個方法

00:09:15.255 --> 00:09:18.158 
是我創建的稱作“用信號釋放執行” 

00:09:18.258 --> 00:09:20.194 
再一次傳那個信號

00:09:21.195 --> 00:09:25.065 
所有這些方法實際上就叫“發送信號”

00:09:25.632 --> 00:09:28.502 align:start position:10%
這允許執行恢復 而且它允許完成

00:09:28.569 --> 00:09:33.907 
阻止 它也對調用非常關鍵

00:09:33.974 --> 00:09:38.545 
因爲如果我們停止
執行的時間太長 系統會認爲

00:09:38.612 --> 00:09:41.682 
我們的進程已經暫停 這樣不好

00:09:41.815 --> 00:09:45.185 
因爲最後它直接停止了進程

00:09:45.485 --> 00:09:49.022 
所以，我們沒有任何
機會保存狀態或做任何清理

00:09:49.323 --> 00:09:51.425 
我們直接就被停止了

00:09:53.427 --> 00:09:55.863 
好 那麼讓我們回到“意願激活”

00:09:56.597 --> 00:09:58.632 
所以我們被要求執行任務

00:09:58.699 --> 00:10:01.935 
接下來要做的事情就是我們要使用

00:10:02.002 --> 00:10:04.137 
我們的URL來創建數據任務

00:10:04.905 --> 00:10:07.407 
現在 注意到我沒有傳送它

00:10:07.474 --> 00:10:10.844 
不管我有沒有背景任務執行

00:10:11.712 --> 00:10:13.981 
背景任務執行技術

00:10:14.147 --> 00:10:16.884 
是一個獲得額外時間的方法 對吧？ 

00:10:17.117 --> 00:10:21.288 
我的意思是它不能確保
但是我們希望能用此得到更好的體驗

00:10:21.722 --> 00:10:24.424 
所以我就創建我們網絡要求

00:10:24.491 --> 00:10:28.762 
因爲可能用戶
正在這時用app互動交流

00:10:29.196 --> 00:10:33.901 align:start position:10%
網絡要求已經開始並且
在很短的時間應答一切都很順利

00:10:35.435 --> 00:10:39.740 
你在此還看到有一個
用於數據任務的便利完成處理程序

00:10:40.240 --> 00:10:42.142 
所以當要求結束時

00:10:42.409 --> 00:10:45.379 
我將調用“用信號釋放執行”

00:10:45.612 --> 00:10:47.347 
再次傳遞那一信號

00:10:47.748 --> 00:10:51.185 
所以我們允許對異步隊列執行恢復

00:10:51.251 --> 00:10:54.221 
這允許阻止完成

00:10:54.288 --> 00:10:57.057 
然後 WatchKit
擴展可以完全掛起。

00:10:57.891 --> 00:11:01.428 
這會確保系統不會認爲操作進程已掛起

00:11:02.996 --> 00:11:06.033 
這樣 一旦創建數據任務

00:11:06.600 --> 00:11:11.271 
我們就可以調用恢復來啓動
這樣它可以去網路

00:11:11.338 --> 00:11:15.309 
獲取信息 我們處理其餘工作

00:11:19.780 --> 00:11:20.614 
現在

00:11:22.149 --> 00:11:25.853 
你對這項技術有了一些瞭解

00:11:25.919 --> 00:11:28.222 
可以使用它嘗試並行使

00:11:28.288 --> 00:11:32.826 
WatchKit
extension內的聯網權利

00:11:33.393 --> 00:11:37.197 
這是非常不錯的體驗
因爲進入到watchOS2

00:11:37.698 --> 00:11:40.634 
你就會有很多可以利用的東西

00:11:40.767 --> 00:11:42.569 
我們將對此稍作介紹

00:11:42.936 --> 00:11:45.739 
但你如果已經聯網到

00:11:45.873 --> 00:11:47.608 
WatchKit
extension

00:11:47.674 --> 00:11:51.044 
這將會使你做好準備一切都已經就緒

00:11:51.411 --> 00:11:56.083 
我看到過許多例子在使用打開父代程序

00:11:56.350 --> 00:11:59.653 
使內置的
iPhone app 完成聯網

00:11:59.920 --> 00:12:01.722 
這會中斷橋接

00:12:05.826 --> 00:12:10.264 
現在 在某些情況下
我們的網絡服務不提供數據

00:12:10.564 --> 00:12:13.734 
數據實際已經在內置的
iPhone app內

00:12:14.301 --> 00:12:15.502 
如需要得到數據

00:12:15.836 --> 00:12:20.007 
我們實際需要越過
watchOS 1中的進程

00:12:20.073 --> 00:12:22.009 
從WatchKit
extension

00:12:22.075 --> 00:12:23.577 
進入到內置的iPhone app

00:12:24.578 --> 00:12:27.748 
我們可以使用打開父代程序來完成

00:12:27.814 --> 00:12:30.951 
這是基於WK界面控制器的方法

00:12:31.185 --> 00:12:34.021 
可以讓我們發送信息詞典

00:12:34.321 --> 00:12:37.391 
到iPhone app
並在後臺啓動它

00:12:37.691 --> 00:12:40.961 
讓它進行一些處理併發送響應

00:12:42.429 --> 00:12:44.398 
在UI程序委託上

00:12:44.665 --> 00:12:47.835 
我們選擇‘處理WatchKit 
extension請求響應’

00:12:48.502 --> 00:12:51.004 
這將會進入信息詞典

00:12:51.572 --> 00:12:55.008 
進行一些處理併發送響應

00:12:56.276 --> 00:12:59.012 
在使用中還需要考慮一些問題

00:13:00.047 --> 00:13:03.584 
第一如果在‘處理WatchKit 
extension請求’中

00:13:03.650 --> 00:13:07.120 
有任何異步操作 你應確保創建了

00:13:07.454 --> 00:13:10.457 
一個後臺任務

00:13:11.191 --> 00:13:14.328 
你想在進入該方法後立刻完成

00:13:14.394 --> 00:13:17.631 
原因是如果你離開並決定

00:13:17.698 --> 00:13:20.234 
完成一些異步操作
那麼不管它是多麼瑣碎

00:13:20.567 --> 00:13:22.703 
系統會說‘好

00:13:22.769 --> 00:13:24.972 
我想我們實際並不想做什麼

00:13:25.038 --> 00:13:28.242 
那麼我就要去暫停
iPhone app了’

00:13:28.709 --> 00:13:31.512 
然後 你將失去機會發送響應

00:13:33.180 --> 00:13:36.250 
另一件事是在你將發送響應時

00:13:36.884 --> 00:13:38.752 
如果使用定製對象

00:13:39.052 --> 00:13:41.255 
則應把它們變成NSData

00:13:42.089 --> 00:13:45.359 
如果使用定製的二元格式

00:13:45.425 --> 00:13:47.761 
則可以在WatchKit
extension打開

00:13:47.928 --> 00:13:50.731 
這樣更可取因爲一個重要的方面

00:13:50.797 --> 00:13:55.202 
就是使數據儘可能變小這樣傳輸才最快

00:13:58.272 --> 00:14:03.110 
現在 對於設備對設備的交流
我們已有很多瞭解

00:14:04.278 --> 00:14:08.215 
現在，在watchOS 2中
‘打開父代程序’標爲不可用

00:14:08.649 --> 00:14:10.918 
這是因爲不再有這個必要

00:14:11.151 --> 00:14:12.286 
也不再需要

00:14:12.853 --> 00:14:15.522 
因爲現在我們有了
WatchConnectivity

00:14:15.589 --> 00:14:16.490 
framework

00:14:16.924 --> 00:14:20.594 
這對我們有很大幫助

00:14:21.061 --> 00:14:25.132 
我們不僅可以在iPhone
app之間發送信息

00:14:25.499 --> 00:14:27.034 
而且還可以輸送文件

00:14:27.334 --> 00:14:29.903 
你還可以 也應當利用

00:14:30.170 --> 00:14:34.341 
應用程序上下文

00:14:34.875 --> 00:14:37.678 
這樣就可以用最新信息

00:14:38.011 --> 00:14:40.080 
更新該上下文

00:14:40.914 --> 00:14:44.151 
同時使你可以獲得網絡上
Watch app內的信息

00:14:44.518 --> 00:14:47.487 
也許這是提供的最新功能

00:14:48.021 --> 00:14:52.526 
然後 你會說‘iPhone app
以後會需要這樣所以我想終止它’

00:14:53.060 --> 00:14:54.494 
它將會被轉移

00:14:54.928 --> 00:14:56.797 
但是iPhone app並未被啓動

00:14:56.864 --> 00:14:59.766 
因爲它現在實際並不需要處理任何事情

00:15:00.267 --> 00:15:02.636 
所以在這種情況下 它只是等待

00:15:02.803 --> 00:15:04.905 
下一次iPhone app的啓動

00:15:05.305 --> 00:15:10.110 
這是在設備之間完成交流的高效方式

00:15:11.512 --> 00:15:13.113 
這裏 有一個精彩的演講題目爲

00:15:13.180 --> 00:15:15.516 
“Watch 
Connectivity 介紹”

00:15:15.582 --> 00:15:18.252 
你應當進行了解
如果還沒這樣做的話

00:15:20.821 --> 00:15:24.558 
現在 一旦我們獲得了數據
就需要進行管理

00:15:24.825 --> 00:15:28.428 
和維護 然而我們需要
把它存放在硬盤中

00:15:29.563 --> 00:15:30.864 
在watchOS 1中

00:15:30.998 --> 00:15:34.134 
使用應用程序組是
做這項工作的一個非常好的方法

00:15:34.501 --> 00:15:36.904 
你可以使用共享的應用組集合

00:15:37.104 --> 00:15:40.574 
儲存一些模型數據或一些共享資產

00:15:40.707 --> 00:15:42.176 
內置iPhone app

00:15:42.242 --> 00:15:44.278 
和WatchKit
extension

00:15:44.511 --> 00:15:46.613 
可以指向並找到它們

00:15:49.216 --> 00:15:53.053 
現在 你也可以使用共享的
NSUserdefaults

00:15:53.587 --> 00:15:57.191 
但應當用於較小的狀態數據

00:15:57.324 --> 00:15:59.560 
比如 Boolean 
configuration

00:15:59.626 --> 00:16:01.662 
或類似數據它並不適用於模型數據

00:16:01.862 --> 00:16:04.398 
模型數據一般比較大

00:16:04.598 --> 00:16:09.603 
應以平面文件保存

00:16:09.670 --> 00:16:13.574 
在你的共享集合或數據存儲中

00:16:15.976 --> 00:16:19.680 
通常 針對watchOS 1
或watchOS 2

00:16:19.913 --> 00:16:23.183 
你應考慮簡化模型

00:16:24.351 --> 00:16:26.920 
Apple Watch上的體驗與

00:16:26.987 --> 00:16:28.422 
iPhone是非常不同的

00:16:28.856 --> 00:16:34.261 
所以你想確保得到信息是你所需要的

00:16:35.329 --> 00:16:38.165 
這方面的一個例子是WWDC app

00:16:38.732 --> 00:16:41.468 
多年以來 在WWDC app之中

00:16:41.735 --> 00:16:43.971 
我們不再把實體增添到

00:16:44.037 --> 00:16:45.272 
Core Data模型中

00:16:46.340 --> 00:16:50.277 
當我們去進行Apple 
Watch的體驗時

00:16:51.044 --> 00:16:52.446 
我們看看它然後說

00:16:52.913 --> 00:16:55.616 
我們實際上不需要
Watch上的這一切

00:16:56.183 --> 00:16:59.253 
我們對此進行了討論
並且最終認識到

00:16:59.319 --> 00:17:02.556 
我們所需要的是數據的簡化版

00:17:03.524 --> 00:17:06.226 
我們僅僅需要這些演講的簡單列表

00:17:06.326 --> 00:17:09.863 
包括演講 實驗以及收藏

00:17:10.964 --> 00:17:15.035 
我們需要做的是
創建一個操作在任何時間

00:17:15.102 --> 00:17:16.936 
內置iPhone app的
數據可以變化

00:17:17.304 --> 00:17:20.874 
它可以輸出一套簡化的JSON文件

00:17:20.941 --> 00:17:22.675 
到共享組集合

00:17:23.010 --> 00:17:25.412 
WatchKit 
extension可以讀取

00:17:25.479 --> 00:17:26.547 
並予以展示

00:17:27.681 --> 00:17:28.749 
這是非常棒的體驗

00:17:31.385 --> 00:17:35.956 
設備對應設備交流的最後一種方式是

00:17:36.256 --> 00:17:37.591 
使用Handoff

00:17:38.358 --> 00:17:41.361 
Handoff是一種
非常的方式可以讓用戶

00:17:41.428 --> 00:17:44.865 
從Apple Watch到
iPhone上繼續一項活動

00:17:46.099 --> 00:17:48.969 
這方面的一個例子是如果你使用

00:17:49.036 --> 00:17:51.839 
Apple Watch上的
WWDC app

00:17:52.573 --> 00:17:55.943 
你會注意到iPhone的鎖屏上

00:17:56.043 --> 00:17:57.578 
在要查看的特定區域的左下角

00:17:58.111 --> 00:18:02.649 
有WWDC app的圖標

00:18:03.650 --> 00:18:06.320 
現在 如果你從左下角向上滑動

00:18:06.653 --> 00:18:08.989 
就會進入iPhone上
WWDC app 

00:18:09.256 --> 00:18:11.692 
你想要的位置

00:18:12.860 --> 00:18:14.795 
這對於用戶來說非常有用

00:18:16.997 --> 00:18:19.166 
使用Handoff非常簡單

00:18:20.534 --> 00:18:22.569 
你可以使用WK界面管理器

00:18:22.836 --> 00:18:24.972 
更新用戶活動

00:18:25.539 --> 00:18:30.344 
你還可以向用戶發送一個NS數據詞典

00:18:30.711 --> 00:18:32.980 
記住該詞典應

00:18:33.046 --> 00:18:35.282 
包括你需要的一切

00:18:35.616 --> 00:18:38.685 
這樣iPhone app
才能使用戶到達

00:18:38.752 --> 00:18:40.053 
他們想去的位置

00:18:40.287 --> 00:18:43.357 
因此 無論你需要的數據多麼瑣碎

00:18:43.690 --> 00:18:46.159 
都需要輸入到詞典中

00:18:48.729 --> 00:18:53.066 
這樣 系統會自動爲你工作

00:18:53.433 --> 00:18:58.405 
其中之一是自動使用戶活動

00:18:58.639 --> 00:18:59.973 
在一段時間後失效

00:19:00.574 --> 00:19:02.843 
所以你什麼都不用做

00:19:02.910 --> 00:19:06.513 
給用戶足夠的時間拿出電話

00:19:06.680 --> 00:19:07.915 
去他們想去的地方

00:19:08.382 --> 00:19:11.418 
如果你再次調用‘更新用戶活動’

00:19:11.652 --> 00:19:14.021 
即是目前的活動

00:19:14.588 --> 00:19:16.957 
如果他們切換到另一應用

00:19:17.157 --> 00:19:19.092 
而該應用調用‘更新用戶活動’

00:19:19.193 --> 00:19:20.794 
即是目前的活動

00:19:22.362 --> 00:19:25.532 
現在 如果你
已經調用了‘更新用戶活動’

00:19:25.766 --> 00:19:28.769 
但是當時用戶正在與你的應用進行交互

00:19:29.136 --> 00:19:31.939 
他們輕敲一個按鈕
確實可以使背景發生轉換

00:19:32.673 --> 00:19:36.476 
你實際上可自己手動使用戶活動無效

00:19:37.878 --> 00:19:41.548 
如果沒有出現這種情況你什麼都不用做

00:19:44.117 --> 00:19:45.552 
因此數據足夠

00:19:46.753 --> 00:19:51.525 
我希望watchOS 1對你有用

00:19:51.625 --> 00:19:53.760 
尤其是 一旦你開始使用

00:19:54.127 --> 00:19:56.797 
WatchConnectivity
framework 

00:19:56.864 --> 00:19:59.900 
它即會幫你
向watchOS 2過渡

00:20:01.068 --> 00:20:03.237 
現在讓我們來談談界面組件

00:20:04.037 --> 00:20:06.607 
在你創造這個世界創建這些數據時

00:20:06.940 --> 00:20:11.345 
你最不希望給用戶的體驗

00:20:11.612 --> 00:20:13.480 
是加載指示條

00:20:13.547 --> 00:20:15.983 
你所做所有這些是爲了一個控制器

00:20:16.416 --> 00:20:18.952 
每一件東西用戶可能都會想要或需要

00:20:20.787 --> 00:20:24.625 
讓我們看看如何能夠優化這種體驗

00:20:25.058 --> 00:20:26.660 
我們如何能夠加載更快？

00:20:28.729 --> 00:20:30.230 
其中一種方法是我們可以...

00:20:30.397 --> 00:20:34.902 
通過優選加載方法和時間來實現

00:20:35.402 --> 00:20:37.237 
所以你這裏可以看到
watchOS 1的

00:20:37.371 --> 00:20:38.605 
Weather app

00:20:39.039 --> 00:20:42.009 
而且我們有這個漂亮的大信息環

00:20:42.643 --> 00:20:45.946 align:start position:10%
對嗎？我們想立刻把它呈現給用戶

00:20:48.248 --> 00:20:50.484 
但是我們還有個10日預報

00:20:50.984 --> 00:20:53.987 
這個10日預報包括另外一些圖像

00:20:54.288 --> 00:20:58.458 
表格行 數據 而我們也
不一定想要用戶

00:20:58.525 --> 00:21:01.728 
等我們加載所有這些東西

00:21:02.963 --> 00:21:04.464 
因此我們採用一種技術使得我們在

00:21:04.531 --> 00:21:06.433 
‘異步分派’內加載10日預報時

00:21:06.733 --> 00:21:10.204 
call within將激活

00:21:11.705 --> 00:21:14.441 
現在，這樣做可以使得
will activate完成

00:21:14.575 --> 00:21:16.009 
而一旦我們有了這個圖像

00:21:16.243 --> 00:21:18.145 
則最先顯示它

00:21:18.412 --> 00:21:21.081 
因此我們將其呈現在
will activate即可完成

00:21:21.248 --> 00:21:25.519 
之後即立刻加載10日預報

00:21:26.119 --> 00:21:28.689 
而用戶實際並未看出有什麼不同

00:21:28.956 --> 00:21:32.960 
當我們向下滾動至10日預報
則它已經在那裏了

00:21:33.594 --> 00:21:38.065 
但是我們已經能夠
給大家所有數據立即加載

00:21:38.131 --> 00:21:39.867 
並且更快的印象了

00:21:41.902 --> 00:21:45.305 
其他你能夠做的就是
少直接加載幾個表格單元格

00:21:46.039 --> 00:21:50.010 
對嗎？如果你確實
有帶圖表和數據的單元格

00:21:50.177 --> 00:21:54.515 
那麼你可能只要四五個這樣的單元格

00:21:54.581 --> 00:21:56.750 
直接顯示給用戶即可

00:21:56.817 --> 00:21:59.620 
這些加載之後

00:22:00.020 --> 00:22:01.421 
你可能希望能夠在別處加載

00:22:01.822 --> 00:22:03.290 
因此看一下

00:22:05.692 --> 00:22:09.196 
同時 只要更新
實際發生變更的信息即可

00:22:09.463 --> 00:22:11.899 
我見過許多數據只做了一點小小變更

00:22:11.965 --> 00:22:15.002 
就全部重新加載的例子

00:22:15.636 --> 00:22:16.670 
無需如此

00:22:16.970 --> 00:22:21.141 
只要更新這個屏面實際
需要更新的內容就可以了

00:22:23.277 --> 00:22:26.513 
現在 我們一旦進入界面
Builder你就能看到

00:22:26.580 --> 00:22:29.283 
我已經在爲控制器創建我的佈局了

00:22:30.017 --> 00:22:32.519 
而我將用到許多不同的羣組

00:22:32.586 --> 00:22:34.488 
我將隱藏和顯示許多不同的羣組

00:22:34.755 --> 00:22:37.591 
因爲根據某些數據或啓發

00:22:37.658 --> 00:22:40.827 
我只打算一次顯示一個
也可能一次兩個

00:22:42.362 --> 00:22:45.232 
但是實際上我已經將所有這些東西

00:22:45.299 --> 00:22:50.437 
放在我的控制器裏了也就是說
系統將會把這些全部實例化

00:22:50.938 --> 00:22:55.442 
因爲我們實際上並不知道你什麼
時候會決定隱藏或顯示其內容

00:22:55.776 --> 00:22:59.313 
因此在某些情形下你可以對其稍作優化

00:22:59.479 --> 00:23:02.049 
方法是將這些分到一些單獨的控制器中

00:23:02.683 --> 00:23:05.485 
如果必要時你能夠加載其中某個

00:23:05.552 --> 00:23:07.087 
你確實會需要的控制器

00:23:07.421 --> 00:23:08.922 
那麼就最好了

00:23:12.259 --> 00:23:14.828 
現在 穿過我們的界面組件

00:23:15.362 --> 00:23:18.799 
其中你可能常用的是圖像

00:23:19.600 --> 00:23:23.537 
而圖像應該大小合適 來自你的服務器

00:23:23.704 --> 00:23:25.172 
或所包括的iPhone app

00:23:25.906 --> 00:23:30.010 
我看到過許多這樣的例子圖像較大

00:23:30.077 --> 00:23:33.413 
甚至比42毫米的watch還大

00:23:33.780 --> 00:23:36.917 
而該圖像其實只是
隨處被重複使用和重新縮放

00:23:37.618 --> 00:23:40.187 
我這裏的意思是
對於縮放 還有其他性能上的含義

00:23:40.254 --> 00:23:43.857 
而圖像不會像它看起來那麼好

00:23:43.924 --> 00:23:48.195 
因爲你沒有給它你恰好需要的尺寸

00:23:48.729 --> 00:23:51.899 
所以要給出正確尺寸的asset

00:23:52.232 --> 00:23:56.937 
在watchOS 2中
這可能對視頻很關鍵

00:23:59.106 --> 00:24:01.909 
你也可以優化你的圖像

00:24:02.242 --> 00:24:06.046 
方法是採用‘設定圖像數據’
而不只是‘設定圖像’

00:24:07.114 --> 00:24:09.716 
此時‘設定圖像’

00:24:09.783 --> 00:24:12.886 
只是要採用我們所用的默認壓縮

00:24:13.654 --> 00:24:15.155 
通過‘設定圖像數據’

00:24:15.222 --> 00:24:20.294 
你可以得到PNG壓縮或JPG壓縮

00:24:20.694 --> 00:24:23.630 
之後轉成NS數據blob

00:24:24.131 --> 00:24:26.099 
以傳送至Watch

00:24:26.300 --> 00:24:29.770 
從而你可以確保其大小符合你的需要

00:24:32.172 --> 00:24:35.242 
同時 我確信你聽人們說過這樣的話

00:24:35.309 --> 00:24:37.311 
你應該用asset catalog

00:24:37.978 --> 00:24:42.316 
asset catalog不僅是
整理其中內容的好方法

00:24:42.783 --> 00:24:45.319 
而且還能夠爲你做很多別的事情

00:24:45.385 --> 00:24:50.624 
你可以設定該
asset用於哪些具體設備

00:24:51.325 --> 00:24:56.129 
你可以設定並輕鬆看到
‘是的 我有了2x asset

00:24:56.530 --> 00:25:00.467 
38毫米版本和42毫米版本’

00:25:02.102 --> 00:25:06.006 
目前 許多開發者問我...

00:25:06.173 --> 00:25:07.975 
這些插槽每一個
都什麼時候用以及用在哪

00:25:08.041 --> 00:25:09.710 
那麼讓我們一起來看看。

00:25:10.777 --> 00:25:13.480 
首先是2x asset

00:25:13.947 --> 00:25:18.418 
這個用於你想要在兩臺設備

00:25:18.552 --> 00:25:20.721 
以相同尺寸採用的圖像

00:25:21.088 --> 00:25:25.292 
所以 如果是這樣
你可以將它插入2x插槽即可

00:25:25.359 --> 00:25:27.094 
其他地方用法相同

00:25:28.729 --> 00:25:33.267 
你還可以針對38毫米
提供具體的asset

00:25:34.334 --> 00:25:38.338 
現在 這可能就是
你要插入2x插槽的圖像

00:25:38.739 --> 00:25:39.573 
沒問題

00:25:41.074 --> 00:25:44.444 
然後你可以給出
一個具體的asset

00:25:44.511 --> 00:25:49.082 
針對可能大一些的
42毫米版本會有所不同

00:25:49.950 --> 00:25:52.986 
現在 如果你既有38毫米

00:25:53.053 --> 00:25:57.057 
也有42毫米 沒問題
也用2xasset

00:25:57.124 --> 00:26:00.961 
因爲我們要回退到該asset

00:26:01.361 --> 00:26:06.300 
所以 如果我們用
38毫米版本或42毫米版本

00:26:06.600 --> 00:26:08.802 
我們要回退到2x asset

00:26:09.636 --> 00:26:12.606 
這樣 你的代碼庫將永不過時

00:26:15.375 --> 00:26:19.379 
另一項我們發現對WWDC app
確實有用的技術

00:26:19.847 --> 00:26:21.315 
正在採用PDFs

00:26:22.950 --> 00:26:26.720 
通過採用PDFs 你可以從各工具中

00:26:26.954 --> 00:26:29.122 
去除整批free work

00:26:30.190 --> 00:26:32.426 
首先 你可以設定縮放因子

00:26:33.760 --> 00:26:37.497 
你還可以設定圖像生成的類型

00:26:37.698 --> 00:26:40.767 
作爲模板圖像所以如果你要給圖像着色

00:26:40.934 --> 00:26:43.637 
那麼去看看PDF的α值

00:26:44.905 --> 00:26:48.709 
如果你仍然想要你特別放入
你的asset中的這些顏色

00:26:48.775 --> 00:26:51.144 
你也可以設定爲原圖

00:26:52.312 --> 00:26:57.851 
這裏所有事情就是當系統爲你打包時

00:26:57.918 --> 00:27:01.421 
當你前去創建它時
我們要剪切這個PDF

00:27:01.488 --> 00:27:06.193 
所有尺寸及比例按你的需要
用於你支持的設備

00:27:07.027 --> 00:27:08.962 
免費的資源很多

00:27:10.264 --> 00:27:13.534 
另一件很酷的事情
是你可以把PDF文件

00:27:13.600 --> 00:27:16.036 
與位圖進行混合和匹配

00:27:16.470 --> 00:27:20.674 
你可以把這兩種格式的文件
組合進一個PDF備用腳本

00:27:21.475 --> 00:27:26.046 
這樣就可以分別得到38毫米

00:27:26.113 --> 00:27:27.681 
和42毫米版本的位圖了

00:27:31.084 --> 00:27:35.689 
說完圖片 我們來說說動畫圖像

00:27:36.223 --> 00:27:41.461 
在watchOS 1裏 我們提供了
一個你可以大加利用的動畫圖像序列

00:27:41.895 --> 00:27:44.164 
在watchOS2裏也可以這樣做

00:27:44.898 --> 00:27:48.001 
但是不要忘了如果你的屏幕上

00:27:48.068 --> 00:27:50.571 
同時有多個動畫圖像 嗯

00:27:50.637 --> 00:27:53.440 
你就需要做更多處理和渲染

00:27:55.809 --> 00:27:59.346 
你需要注意的另外一點是你要儘量控制

00:27:59.613 --> 00:28:05.052 
自己減少每部動畫的幀數

00:28:05.819 --> 00:28:09.189 
我見過很多的這樣的案例
一段只有兩秒的動畫

00:28:09.256 --> 00:28:10.691 
裏面足足有300幀

00:28:11.291 --> 00:28:12.659 
似乎有點兒過分了

00:28:13.427 --> 00:28:16.363 
如果幀數減少了 但是仍然

00:28:16.430 --> 00:28:18.732 
可以得到你真正想要的效果

00:28:18.799 --> 00:28:20.300 
你會感到驚喜的

00:28:21.969 --> 00:28:26.673 
另一項你可以對這些動畫圖像
進行的操作是逆向播放

00:28:27.274 --> 00:28:29.643 
你不必另行創建一個全新的圖像集

00:28:30.077 --> 00:28:32.412 
你只需選取一個已有的動畫文件

00:28:32.579 --> 00:28:35.215 
將時間設置爲負值

00:28:35.949 --> 00:28:39.887 
這項操作叫做“用圖片啓動動畫”

00:28:40.287 --> 00:28:42.422 
你來設定一個負時間值

00:28:43.423 --> 00:28:46.560 
請注意我的時間範圍是正向的

00:28:47.094 --> 00:28:50.430 
跨度是從0到15

00:28:50.497 --> 00:28:51.765 
這裏我沒做改變

00:28:52.466 --> 00:28:53.500 
只更改了持續時間

00:28:55.502 --> 00:29:01.775 
現在如果你喜歡動畫在watchOS
2環境裏 你可以大展拳腳了

00:29:02.709 --> 00:29:06.280 
在watchOS 2裏 我們引入了
一個動畫應用程序界面API

00:29:06.346 --> 00:29:07.848 
它是WatchKit的一個部分

00:29:08.048 --> 00:29:11.385 
讓你可以在你的Watch
app裏製作出流暢的

00:29:11.451 --> 00:29:12.819 
效果強大的動畫作品

00:29:13.921 --> 00:29:16.857 
它與UIView的動畫工作原理近似

00:29:17.191 --> 00:29:20.460 
你可以自行設定時間長度 還一個模塊

00:29:20.527 --> 00:29:22.829 
可以在這個區域重置一些屬性

00:29:22.896 --> 00:29:24.631 
這些最終都將合成在你的動畫作品裏

00:29:25.732 --> 00:29:30.204 
你可以設置動畫的高度 寬度 通道

00:29:30.571 --> 00:29:32.639 
內容嵌入以及其他屬性

00:29:32.806 --> 00:29:36.743 
到目前爲止 我已經見到了人們用這個
程序製作的一些相當了不起的作品

00:29:36.810 --> 00:29:39.680 
而且只用到了間隔組和移動項

00:29:39.847 --> 00:29:41.014 
相當了不起

00:29:42.316 --> 00:29:47.588 
在“WatchKit佈局
和動畫技術”中 還有很多有用的工具

00:29:48.789 --> 00:29:53.927 
關於圖像處理 我建議大家

00:29:53.994 --> 00:29:57.397 
關注今天的講座中"Apple
Watch設計建議與技巧"這一部分

00:29:57.564 --> 00:30:02.636 
它將會從設計者心態的
角度涉及很多的相關技巧

00:30:02.703 --> 00:30:04.605 
還會談及大量

00:30:04.671 --> 00:30:06.273 
你可以做和應該瞭解的操作

00:30:06.640 --> 00:30:07.574 
所以 一定要關注

00:30:09.209 --> 00:30:14.348 
配置的最後一塊是
文本輸入控制器的使用

00:30:15.649 --> 00:30:18.719 
現在 很多開發人員問我怎樣才能

00:30:18.785 --> 00:30:23.457 
使用戶直接從我的UI進入?聽寫UI

00:30:25.592 --> 00:30:27.828 
他們不希望自己的用戶要經過

00:30:27.895 --> 00:30:30.864 
中間篩屏幕 並不停地敲擊麥克風

00:30:30.931 --> 00:30:33.433 
這樣做相當 相當直接

00:30:34.301 --> 00:30:39.940 
你只要在調用“目前的文本輸入器
與建議”時 把建議設定爲零

00:30:40.541 --> 00:30:43.777 
然後把“允許輸入模式”設定爲普通

00:30:44.611 --> 00:30:47.447 
這樣就可以把用戶從你的app直接

00:30:47.514 --> 00:30:51.018 
轉入聽寫UI然後再返回你的app

00:30:51.451 --> 00:30:52.653 
極其簡單

00:30:56.857 --> 00:30:59.026 
現在我們要談談通知機制

00:30:59.459 --> 00:31:02.896 
消息通知是Apple Watch上
一項意義重大的體驗

00:31:02.963 --> 00:31:05.732 
Apple Watch能夠如此
操作簡便 表現驚人

00:31:05.799 --> 00:31:07.935 
很大程度上歸功於此

00:31:10.003 --> 00:31:14.408 
讓我們看一個遠程
通知的有效載荷的例子

00:31:14.775 --> 00:31:17.110 
讓我們瀏覽一些你應該清楚的

00:31:17.177 --> 00:31:20.047 
爲了讓用戶的手腕得到最好

00:31:20.113 --> 00:31:22.583 
最高效的體驗而使用的技術

00:31:23.984 --> 00:31:29.089 
首先要注意的是
你應該正在使用報警鍵的字典值

00:31:29.890 --> 00:31:32.426 
這讓你可以不僅提供一段正文

00:31:32.726 --> 00:31:34.661 
還可以設定一個標題

00:31:35.629 --> 00:31:38.999 
而且這個標題可以被用在
short-look通知裏

00:31:39.633 --> 00:31:43.437 
所以當用戶在Apple 
Watch上收到通知時

00:31:43.504 --> 00:31:47.374 
他們首先看到的就是你的app的又大

00:31:47.441 --> 00:31:51.812 
又漂亮的圖標 然後要看到的
是在屏幕底部的你的app的名字

00:31:52.412 --> 00:31:55.315 
如果你在有效負荷裏提供了一個標題

00:31:55.382 --> 00:31:58.986 
圖標和app名稱之間看到那個標題

00:31:59.620 --> 00:32:03.557 
這樣可以使通知的內容大爲豐富 

00:32:03.924 --> 00:32:07.694 
非常了不起 因爲那麼多的用戶 

00:32:07.761 --> 00:32:10.397 
要看他們的手腕他們會看到那條通知

00:32:10.464 --> 00:32:13.467 
並根據其信息決定他們是要繼續看

00:32:13.534 --> 00:32:15.502 
long-look 通知

00:32:15.903 --> 00:32:19.439 
還是把它先放下 
過一段時間再到通知中心查看

00:32:20.240 --> 00:32:22.009 
所以要好好利用它

00:32:23.844 --> 00:32:26.180 
另一個要運用的功能
是categary(類別)

00:32:26.780 --> 00:32:29.349 
Categories（類別）
讓你可以指定

00:32:29.516 --> 00:32:33.587 
使用記事板中的具體哪一種控制器

00:32:33.921 --> 00:32:36.089 
來發送某種類型的信息

00:32:36.823 --> 00:32:40.027 
所以如果你點擊通知類別對象

00:32:40.460 --> 00:32:42.462 
你可以在這裏看到 你可以給它設置

00:32:42.529 --> 00:32:48.168 
與在有效負荷中相同的名稱
所以你可以給每條通知設置

00:32:48.502 --> 00:32:51.271 
文本顏色和標題顏色

00:32:51.505 --> 00:32:55.542 
所以你就有很多辦法

00:32:55.609 --> 00:32:57.578 
可以給通知設置多種屬性

00:32:57.878 --> 00:32:59.980 
給用戶更好的體驗

00:33:02.249 --> 00:33:06.153 
現在是最後一步 
如果你想讓客戶收到通知

00:33:06.386 --> 00:33:10.123 
聽到通知提示音並收到觸覺反饋

00:33:10.591 --> 00:33:13.894 
你需要設置音量值爲默認值

00:33:15.028 --> 00:33:16.330 
這樣可以確保

00:33:16.597 --> 00:33:19.533 
他們收到提示音和反饋

00:33:21.134 --> 00:33:26.473 
現在 我非常高興地告訴大家你也
可以用UI本地通知來實現這些效果

00:33:26.907 --> 00:33:29.810 
所以 這些設置不僅可以用在遠程通知

00:33:32.913 --> 00:33:36.517 
現在 共有兩個通知的概念

00:33:37.217 --> 00:33:39.620 
第一個是動態通知

00:33:39.786 --> 00:33:42.189 align:start position:10%
你可能在有效負荷中收到一些信息

00:33:42.422 --> 00:33:44.858 
你需要處理這些信息
你需要得到一種資產

00:33:44.925 --> 00:33:47.528 
你需要進行一些操作 然後你要上傳

00:33:47.828 --> 00:33:50.998 align:start position:10%
更多豐富的內容到你的動態信息中

00:33:51.431 --> 00:33:53.467 
還有一種靜態信息

00:33:53.800 --> 00:33:57.070 
很多人問過我哪裏會用到這種信息

00:33:57.804 --> 00:34:03.043 
靜態信息總是由通知中心發出

00:34:03.610 --> 00:34:08.849 
所以如果用戶點擊通知中心發出的信息

00:34:08.916 --> 00:34:11.552 
他們一定會看到靜態界面

00:34:11.985 --> 00:34:15.222 
所以你要確保這同時是一個很好的體驗

00:34:16.389 --> 00:34:19.659 
使用靜態通知的另一種情況

00:34:20.027 --> 00:34:23.897 
是你的動態通知下載時間過長

00:34:24.364 --> 00:34:27.868 
你可能正在處理一些數據從網絡檢索

00:34:27.935 --> 00:34:30.670 
一些資產 而且需要很長時間

00:34:31.004 --> 00:34:33.306 
那麼我們就要稱之爲損耗

00:34:33.607 --> 00:34:38.545 
並以靜態信息的方式
立即爲客戶提供一些有價值的信息

00:34:41.547 --> 00:34:44.217 
現在我們終於可以聊一聊
Glances

00:34:45.918 --> 00:34:49.822 
有了Glances就可以爲客戶提供

00:34:49.889 --> 00:34:52.993 
有價值的及時信息

00:34:54.761 --> 00:34:58.365 
你可能見過這樣的情況在隔了一會兒

00:34:58.432 --> 00:35:01.468 
查看Glances時試圖顯示

00:35:01.535 --> 00:35:03.637 
內容有了更新

00:35:03.704 --> 00:35:07.574 
你在頁面底部看到
這個更新了的最近的標題字符串

00:35:07.875 --> 00:35:11.211 
在頁面上端右部看到
這個旋轉的進度指示器

00:35:12.279 --> 00:35:15.115 
但是也許你看見它的時候正在下載信息

00:35:17.217 --> 00:35:18.352 
所以 讓我們再看一遍

00:35:18.986 --> 00:35:21.555 
你正在下載內容一切進展順利

00:35:21.622 --> 00:35:24.791 
然後 哦 內容去哪兒了 嘣

00:35:24.858 --> 00:35:26.827 
更新完全停止了

00:35:28.028 --> 00:35:29.196 
爲什麼會發生這種情況?

00:35:29.930 --> 00:35:33.534 align:start position:10%
這種情況能夠發生
是因爲在你的Glance控制器中

00:35:33.600 --> 00:35:35.669 
對於“將要激活”要採取
稍有不同的處理方式

00:35:36.537 --> 00:35:41.909 
那麼會發生的情況是當“將要激活”
完成的時候這個系統提供的快照

00:35:42.176 --> 00:35:44.077 
就會從UI上移除

00:35:44.778 --> 00:35:49.049 
所以與你在Watch app裏
的做法稍有不同

00:35:49.383 --> 00:35:53.487 
你在這裏要確保的是
你要在“將要激活”完成之前

00:35:53.620 --> 00:35:54.621 
選擇完全安裝

00:35:54.988 --> 00:35:56.857 
你要得到你需要的所有信息

00:35:57.024 --> 00:36:00.527 
這樣設置 就會完全安裝UI

00:36:00.594 --> 00:36:03.564 
在我們移除那個快照的時候
UI已經安裝好了

00:36:03.830 --> 00:36:07.367 
整個鏡像消失沒有中間狀態

00:36:07.634 --> 00:36:10.904 
在你的記事本中
可能有你會看到的佔位符文本

00:36:10.971 --> 00:36:13.273 
或者作用近似的文件

00:36:13.774 --> 00:36:15.943 
這些並不能提供真正好的體驗

00:36:17.511 --> 00:36:21.281 
另一件你應該做的事
是慎重對待重新加載內容

00:36:21.682 --> 00:36:24.985 
用戶在Glances中切換屏幕時

00:36:25.853 --> 00:36:28.388 
"將要激活" 會出現在你的頁面上

00:36:28.455 --> 00:36:31.058 
所以 如果它出現在你的頁面上

00:36:31.124 --> 00:36:34.194 
而且在 "將要激活"中
你正在下載一大堆東西 

00:36:34.261 --> 00:36:37.064 
進行文件處理 進行網絡請求

00:36:37.598 --> 00:36:40.734 
恐怕你的效率會大打折扣

00:36:40.868 --> 00:36:43.971 
所以重新裝載時一定要慎重

00:36:44.137 --> 00:36:47.074 
根據其他情形而不僅僅是 哦

00:36:47.140 --> 00:36:48.442 
他們看了我的內容

00:36:50.077 --> 00:36:52.646 
另外 與Watch app一樣

00:36:52.713 --> 00:36:54.781 
要限制比較設計的數量

00:36:55.148 --> 00:36:59.353 
因爲和之前一樣我們將需要
在最前面實例化那些對象

00:37:02.189 --> 00:37:05.726 
最後 如果你要在
Glances中顯示時間或日期

00:37:06.059 --> 00:37:10.063 
你應該使用WK界面的時間標籤

00:37:10.130 --> 00:37:11.965 
或者絕對時間或日期

00:37:12.900 --> 00:37:14.868 
如果你要這這裏找到一個例子

00:37:15.002 --> 00:37:18.038 
本次講座在35分鐘前開始

00:37:18.572 --> 00:37:23.410 
那麼 如果現在是
下午1:00讓人有點糊塗了

00:37:23.644 --> 00:37:24.912 
我看到講座在不斷進行

00:37:24.978 --> 00:37:27.214 
我知道 但是它是在35分鐘前開始的

00:37:27.281 --> 00:37:29.883 
讓我有種下意識地反應像是 等等

00:37:30.150 --> 00:37:31.652 
現在究竟是什麼時間

00:37:32.486 --> 00:37:36.290 
這種情況下比較好的做法是
給出一個絕對時間

00:37:36.857 --> 00:37:38.625 
講座在10:00開始

00:37:38.959 --> 00:37:41.728 
這就已經給了我可視性

00:37:41.795 --> 00:37:45.098 
"哦，既然現在是
1:00 或 3:00"

00:37:45.399 --> 00:37:46.466 
我並沒有糊塗

00:37:46.700 --> 00:37:48.869 
內容在載入中 進展順利

00:37:50.938 --> 00:37:53.974 
我們已經談到了很多東西

00:37:54.741 --> 00:37:56.176 
首先 我們談到過優化

00:37:56.243 --> 00:37:59.479 
watchOS 1
應用程序的網絡的方法

00:37:59.546 --> 00:38:02.349 
這樣要轉換爲watchOS 2

00:38:02.416 --> 00:38:04.451 
就更容易了 而且這很有可能

00:38:04.751 --> 00:38:08.222 
對你的應用程序有幫助

00:38:09.723 --> 00:38:12.392 
然後 我們談到過改善

00:38:12.459 --> 00:38:17.564 
性能佈局的方法 以縮短
下載時間 提高運行效率

00:38:18.866 --> 00:38:21.134 
然後 我們又談到了如何確保

00:38:21.201 --> 00:38:23.370 
你的Glances的內容可視

00:38:23.704 --> 00:38:26.840 
這樣就不會讓用戶看到
面前的鏡像一片空白

00:38:28.876 --> 00:38:33.380 
最後在watchOS 2 還有許多
需要覈查的東西

00:38:33.747 --> 00:38:37.518 
除了在WatchKit中對
watchOS 2的更新

00:38:37.584 --> 00:38:39.119 
我們還有ClockKit

00:38:39.186 --> 00:38:42.155 
來爲時鐘表面進行復雜設計

00:38:42.389 --> 00:38:43.223 
我們還有

00:38:43.290 --> 00:38:45.125 
WatchConnectivity
框架

00:38:45.192 --> 00:38:48.095 
來進行所有設備到設備的交流

00:38:48.161 --> 00:38:50.731 
你還可以利用WatchKit 

00:38:50.797 --> 00:38:52.566 
本身的延伸NSURL

00:38:54.735 --> 00:38:58.038 
如果你想了解更多的信息
可以查看我們的文檔

00:38:58.172 --> 00:38:59.373 
我們有代碼樣本

00:38:59.573 --> 00:39:03.010 
如果你有技術問題 可以讓論壇諮詢

00:39:03.243 --> 00:39:06.346 
你會得到與開發人員技術支持部
提供的相似的一對一的幫助

00:39:07.114 --> 00:39:09.216 
最後 如果你有任何問題

00:39:09.283 --> 00:39:11.552 
請隨時與我聯繫這是我的email

00:39:13.020 --> 00:39:17.724 
今天我們還有一場關於Apple
Watch 的精彩演講

00:39:17.791 --> 00:39:20.060 
題目是 "Apple Watch
設計建議與技巧"

00:39:20.460 --> 00:39:23.897 align:start position:10%
演講會涉及許多很棒的信息

00:39:24.097 --> 00:39:26.667 
幫助你開發了不起的
Watch app

00:39:26.733 --> 00:39:28.702 
我們還進行了一場
名爲 "Designing

00:39:28.769 --> 00:39:30.504 
for Apple 
Watch" 的演講

00:39:30.571 --> 00:39:32.606 
一場名爲"Introduction
to WatchKit

00:39:32.673 --> 00:39:34.441 
for watchOS 2"
 的演講 還有其它演講

00:39:34.508 --> 00:39:36.143 
總之 非常感謝