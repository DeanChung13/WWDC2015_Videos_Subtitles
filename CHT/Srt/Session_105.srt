00:00:19.553 --> 00:00:23.156 
介紹watchOS 2的
WatchKit

00:00:23.223 --> 00:00:24.525 
喬希·謝弗: 好的 上午好

00:00:25.025 --> 00:00:27.694 
感謝大家今天來到這裏學習

00:00:27.761 --> 00:00:30.097 
有關watchkit和
watchOS 2的新知識

00:00:30.464 --> 00:00:32.698 
今天上午要講的東西有很多

00:00:33.433 --> 00:00:36.503 
當然
最重要的部分是WatchKit

00:00:36.770 --> 00:00:38.238 
以及WatchKit相關最新信息

00:00:38.805 --> 00:00:43.277 
WatchKit
作爲watchOS系統平臺的一部分

00:00:43.677 --> 00:00:45.579 
存在一系列其他框架

00:00:45.879 --> 00:00:47.414 
其中很多是各位已經熟悉的

00:00:47.481 --> 00:00:48.882 
用於開發iOS應用的框架

00:00:49.349 --> 00:00:52.085 
此外還有一些用於專屬watchOS

00:00:52.486 --> 00:00:55.322 
用於提供特性的新內容
都屬於Apple Watch所獨有

00:00:55.589 --> 00:00:57.724 
今天我們將討論這些新信息

00:00:57.791 --> 00:01:02.663 
以及一些各位已經熟悉的
涉及watchOS專屬的新內容

00:01:06.166 --> 00:01:07.734 
也就是watchOS 2

00:01:09.102 --> 00:01:11.271 
首先讓我們簡單談談系統結構

00:01:12.840 --> 00:01:16.510 
各位已經熟悉用於WatchOS 1
的Watch系統應用

00:01:17.144 --> 00:01:17.978 
其運行方式是

00:01:18.278 --> 00:01:21.582 
需要在iPhone和Apple
Watch上同時有用戶界面

00:01:22.049 --> 00:01:24.418 
你推出了一款iPhone app

00:01:24.918 --> 00:01:26.420 
這款iPhone app中有

00:01:26.720 --> 00:01:29.756 
適合Apple Watch
作爲Watch app的一部分

00:01:31.558 --> 00:01:33.861 
用戶界面
分鏡故事板

00:01:34.161 --> 00:01:36.430 
在Apple Watch中存在
並安裝在這裏

00:01:36.830 --> 00:01:38.332 
但app拓展在手機上運行

00:01:38.966 --> 00:01:41.101 
watchOS 2的一大進展就是

00:01:41.301 --> 00:01:45.272 
app拓展並運行
在Apple Watch

00:01:47.841 --> 00:01:50.544 
這給各位的用戶帶來了一些便利

00:01:51.011 --> 00:01:56.083 
首先 當然是用戶界面
和運行的後臺代碼處於同一設備

00:01:56.383 --> 00:01:58.986 
可使交互等待時間更短

00:01:59.286 --> 00:02:01.822 
從而使應用反應速度更靈敏

00:02:03.123 --> 00:02:05.692 
顯然 這一改善帶來了很好的效果

00:02:06.093 --> 00:02:08.362 
比如在手機不在身邊時
仍然可以運行應用

00:02:09.530 --> 00:02:11.665 
爲了確保這一效果高效運行

00:02:11.999 --> 00:02:16.937 
各位應該現在花時間瞭解清楚
如何將應用程序邏輯移動到程序拓展中

00:02:18.071 --> 00:02:19.273 
如果在watchOS 1中

00:02:19.373 --> 00:02:24.378 
你耗費大量時間用於打開父應用程序
在iPhone app中運行代碼

00:02:24.778 --> 00:02:27.981 
你想要重構該邏輯並移動到拓展中

00:02:29.483 --> 00:02:31.251 
app拓展獲得的代碼越多

00:02:31.652 --> 00:02:35.556 
在iPhone不在身邊的情況下
就可以提供越多的單機功能

00:02:36.623 --> 00:02:38.959 
當然 有關單機功能
另一個重要的部分是

00:02:39.326 --> 00:02:43.163 
Apple Watch可以通過
Wi-Fi訪問網絡

00:02:43.730 --> 00:02:47.301 
以便你的app可以從HTTP服務器
獲得數據

00:02:47.434 --> 00:02:49.436 
即使在iPhone不在身邊時
也能訪問網絡

00:02:49.670 --> 00:02:52.906 
如果你習慣在iOSapp中
使用NSURL Session

00:02:53.307 --> 00:02:54.975 
那麼你已經知道如何操作了

00:02:55.275 --> 00:02:56.410 
稍後我們會討論這個問題

00:02:57.144 --> 00:02:58.712 
但首先我們來談談

00:02:59.012 --> 00:03:00.514 
WatchKit框架下的新特性

00:03:00.981 --> 00:03:04.751 
除了將代碼運行移動到Apple
Watch這一巨大進展

00:03:05.052 --> 00:03:07.387 
我們也爲WatchKit
加入了一系列新的性能

00:03:07.855 --> 00:03:10.591 
以便各位在watchOS 2
開發更酷的應用程序

00:03:11.658 --> 00:03:13.160 
爲了給大家一些有關新性能的概述

00:03:13.427 --> 00:03:15.629 
這裏的列表舉出了我們即將談到的性能

00:03:15.929 --> 00:03:18.498 
我們擁有數碼錶冠 設計和動畫

00:03:18.732 --> 00:03:21.301 
因此現在我們來介紹這些優秀的性能

00:03:21.668 --> 00:03:23.504 
首先我們來看數碼錶冠

00:03:24.071 --> 00:03:27.641 
這是屬於Apple Watch的
獨特交互機制

00:03:28.408 --> 00:03:31.311 
一系列新的簡單的控制

00:03:31.645 --> 00:03:35.048 
方便您將數碼錶冠
應用於工作界面選取器

00:03:36.250 --> 00:03:42.422 
選擇器控件是通過
數碼錶冠滾動單元列表

00:03:42.756 --> 00:03:43.590 
並選擇其中一項

00:03:44.191 --> 00:03:45.993 
數碼錶冠有三種類型

00:03:46.560 --> 00:03:47.528 
現在詳細介紹每一類

00:03:47.628 --> 00:03:50.230 
我們現在看到的是第一類列表類型

00:03:50.864 --> 00:03:53.934 
如果你瞭解錶盤上的配置合併

00:03:54.268 --> 00:03:55.469 
那你已經瞭解其基本運行了

00:03:55.936 --> 00:03:56.803 
這是一個項目列表

00:03:57.638 --> 00:04:00.374 
可以在周圍列出可選的焦點框

00:04:00.908 --> 00:04:04.912 
並在頂端給出有關已選項目
更多的細節信息介紹

00:04:05.145 --> 00:04:08.582 
以防列出的項目本身
代表的含義並不明確

00:04:10.083 --> 00:04:12.986 
用戶可以選擇顯示或隱藏更多細節信息
針對任意一項用戶交互單元

00:04:13.387 --> 00:04:16.023 
如果屏幕中同時列出多個選擇器

00:04:16.190 --> 00:04:18.257 
用戶可能需要顯示焦點框

00:04:18.458 --> 00:04:22.129 
以便清晰告知用戶
一旦按下表冠將要進行何種操作

00:04:23.330 --> 00:04:27.868 
第二種模式是堆疊式

00:04:28.936 --> 00:04:32.539 
堆疊式提供一系列圖像

00:04:32.673 --> 00:04:34.608 
使用戶可以滾動並選取其中之一

00:04:34.942 --> 00:04:39.112 
這一模式可以進行自動轉換
其他項目自動淡出

00:04:39.646 --> 00:04:43.784 
如果你想給用戶提供一系列選擇
並生動地呈現出來

00:04:44.017 --> 00:04:46.854 
你可以選擇這一模式
它的視覺效果很好

00:04:47.788 --> 00:04:49.923 
第三種模式是圖像序列

00:04:50.891 --> 00:04:54.661 
圖像序列模式提供一個可以滾動的列表

00:04:54.928 --> 00:04:56.730 
其中是相互沒有過渡效果的圖像

00:04:57.197 --> 00:05:00.868 
如果經過一個程序到另一個的轉換後看
起來十分自然

00:05:01.168 --> 00:05:05.506 
那麼你可以選擇這個十分適合此類情況
更適合使用這種圖像的模式

00:05:07.140 --> 00:05:09.076 
我們可以看到右上角這裏

00:05:09.443 --> 00:05:11.044 
這裏設有一個滾動指示

00:05:11.678 --> 00:05:15.782 
這是一個三種模式都適用的
可選用戶交互元素

00:05:16.717 --> 00:05:19.820 
這個滾動指示器使用的情況是

00:05:19.953 --> 00:05:23.724 
用戶不能準確看到列表內容
或列表內容數量的情況

00:05:24.291 --> 00:05:26.760 
例如 用戶在應用中選擇一天中的時刻

00:05:27.594 --> 00:05:28.896 
選擇一天中的一個小時

00:05:29.463 --> 00:05:31.598 
這時可能不需要滾動指示

00:05:31.865 --> 00:05:36.170 
因爲用戶明確知道一天有多少小時
並且在列表中有明顯顯示

00:05:36.970 --> 00:05:41.208 
加入選擇的內容是其他多少不能像選擇
表情符號那樣清楚顯示的

00:05:41.508 --> 00:05:42.709 
那麼適合選擇滾動指示

00:05:42.776 --> 00:05:45.979 
以便用戶瞭解所面臨的選項
以及一共有多少個選擇

00:05:48.182 --> 00:05:49.983 
除了這三種模式

00:05:50.217 --> 00:05:53.287 
選擇器控件事實上還有另一個性能

00:05:53.487 --> 00:05:56.857 
在運行中可以帶來更多的靈活性
實現更便捷的用戶交互

00:05:57.324 --> 00:05:59.293 
也就是協調化圖像

00:05:59.860 --> 00:06:01.528 
這一特性的最大優點在於

00:06:01.595 --> 00:06:05.132 
可以用於創建動態的圖像
在其他交互元素中

00:06:05.199 --> 00:06:08.535 
例如羣組背景 或其他交互圖像

00:06:08.836 --> 00:06:12.072 
你可以將它們設置爲
與選擇性控件相協調

00:06:12.639 --> 00:06:17.911 
當用戶進行整理時
我們會調整動態圖像的框架的偏移量

00:06:18.078 --> 00:06:20.881 
從而與列表項目中相關的偏移量相對應

00:06:21.348 --> 00:06:23.984 
從而方便您建立用戶交互
看起來就像這樣

00:06:24.685 --> 00:06:29.323 
當用戶瀏覽 進行選擇時
有一個協調話圖像填充環形

00:06:30.157 --> 00:06:32.025 
不同模式的相互結合使用

00:06:32.092 --> 00:06:36.129 
並通過數碼錶冠操控
可以方便你開發一個有趣 獨特的模式

00:06:37.698 --> 00:06:40.100 
接下來讓我們談談動畫技術和設計

00:06:40.968 --> 00:06:41.869 
正如各位所知

00:06:41.935 --> 00:06:44.037 
應該在storyboards上
在watchOS上建立用戶交互

00:06:44.104 --> 00:06:45.506 
並且基於Xcode

00:06:47.541 --> 00:06:50.978 
Xcode中你有各種選擇可用於設置

00:06:51.044 --> 00:06:53.080 
storyboard中
不同的交互元素

00:06:53.814 --> 00:06:57.451 
現在watchOS 1中推出了很多
此類選擇可以以編程的方式進行改變

00:06:57.551 --> 00:06:59.853 
但是有一些選擇
只能在storyboard中運行

00:07:00.320 --> 00:07:02.723 
在watchOS
2中我們不斷推出新性能 進行提高

00:07:02.823 --> 00:07:04.558 
從而爲這些項目提供設置

00:07:04.625 --> 00:07:08.362 
改變這些項目之前在設計過程中
只能在Xcode中設置的狀態

00:07:09.096 --> 00:07:11.732 
這一性能可以極大改善
程序運行時的效果

00:07:11.798 --> 00:07:13.300 
改變之前只能靜態呈現的狀態

00:07:14.334 --> 00:07:19.206 
此外我們還添加了新的動畫API界面

00:07:19.473 --> 00:07:24.344 
其持續時間可以通過一個訊息塊
並可以將你設置的改動加入到交互元素

00:07:24.811 --> 00:07:27.080 
在該模塊中
做的任何改動都會隨之被動態化

00:07:27.381 --> 00:07:30.751 
如果您熟悉用戶界面套件動態API
那麼對這一特性就十分熟悉

00:07:31.451 --> 00:07:36.757 
這一特性有助於用動畫開發
一系列很酷 運行流暢的交互

00:07:37.457 --> 00:07:39.159 
另外要介紹許多WatchKit方面

00:07:39.226 --> 00:07:42.763 
比如有關設計的整個過程和動畫技術

00:07:43.030 --> 00:07:44.331 
所以您可以對此進行了解

00:07:45.065 --> 00:07:46.767 
有一些不能顯示的很清楚的部分

00:07:46.834 --> 00:07:49.336 
和使用這些API時一些很酷的手法

00:07:49.703 --> 00:07:51.038 
可以帶來很好的效果

00:07:51.338 --> 00:07:53.907 
因此如果你進行更多瞭解
會發現它們也是很出色的部分

00:07:55.342 --> 00:07:57.010 
下面 讓我們介紹Taptic引擎

00:07:57.611 --> 00:08:00.647 
這是Apple Watch
又一項獨特的性能

00:08:00.848 --> 00:08:05.752 
使信息傳達到用戶
而不用用戶真的在屏幕中讀取出來

00:08:06.053 --> 00:08:06.920 
這個功能真的很棒

00:08:07.154 --> 00:08:08.989 
Taptic引擎的
一個很棒的特點就是

00:08:09.056 --> 00:08:13.794 
可以通過用戶觸覺掌握用戶感受和聲音

00:08:14.094 --> 00:08:17.030 
以及在app環境下的意義

00:08:17.631 --> 00:08:23.637 
我們推出一個簡潔的API
方便您在工作交互設備上使用觸覺技術

00:08:23.837 --> 00:08:25.973 
有不同的模式可供選擇

00:08:26.473 --> 00:08:29.343 
我所提到的每一個模式

00:08:29.409 --> 00:08:31.945 
都有預期使用環境
您的用戶會瞭解這一模式

00:08:32.145 --> 00:08:35.883 
因爲這一性能的目的就是傳遞信息
而不用真的讀取屏幕

00:08:36.316 --> 00:08:38.485 
你會需要確保不斷使用這一功能

00:08:38.784 --> 00:08:42.089 
這些模式的命名就是爲了幫助你
瞭解他們所使用的情況

00:08:42.489 --> 00:08:46.026 
我們在說明文件中準備了相關文件

00:08:46.226 --> 00:08:49.429 
深度介紹每一個模式在設計Apple
Watch中有的預期使用環境

00:08:49.863 --> 00:08:52.499 
所以如果你想在開發應用中
使用觸覺技術並持續使用

00:08:52.833 --> 00:08:54.401 
請繼續瞭解此功能

00:08:54.468 --> 00:08:58.205 
最終達到用戶可以直接瞭解程序運行
而不用讀取屏幕

00:09:01.074 --> 00:09:05.479 
此外還有一些其他硬件
我們想要在WatchKit中應用

00:09:05.979 --> 00:09:07.481 
第一 是麥克風

00:09:08.382 --> 00:09:10.284 
我們在watchOS 2中
採用新的API

00:09:10.551 --> 00:09:12.286 
從而方便您採用錄音表

00:09:12.753 --> 00:09:18.325 
錄製記錄音頻
在用戶進行處理之前回放

00:09:18.692 --> 00:09:21.528 
最後通過按下右上角的按鍵
對音頻進行最終處理

00:09:23.197 --> 00:09:28.569 
因此右上角的按鍵
可以根據您的應用來命名

00:09:28.936 --> 00:09:31.839 
在此環境下我將它命名爲“發送”
因爲我預設它會發送一條消息

00:09:32.206 --> 00:09:35.275 
但你也可以將它命名爲“保存”
如果你開發的是語音備忘錄一類應用

00:09:36.710 --> 00:09:40.514 
它操作十分簡單
先錄製成文件 用戶點擊確認鍵時

00:09:40.747 --> 00:09:41.949 
你會收到一個文件 以便處理

00:09:42.216 --> 00:09:45.185 
任何的方式對於你的應用都是合適的

00:09:46.520 --> 00:09:50.023 
當然 除了麥克風
我們也想要開發揚聲器的功能

00:09:50.724 --> 00:09:55.128 
我們通過爲您的應用提供
回放視頻音頻內容

00:09:55.863 --> 00:09:58.632 
有三種API
用不同的方式實現這一操作

00:09:59.299 --> 00:10:03.270 
第一種是新的交互對象
叫做工作交互影片

00:10:03.971 --> 00:10:06.807 
這一元素提供標準的外觀

00:10:07.207 --> 00:10:11.044 
方便視頻文件播放以及重放

00:10:11.712 --> 00:10:13.514 
在屏幕上這個案例中我準備了兩個視頻

00:10:13.847 --> 00:10:15.048 
假設現有一個海報形象

00:10:15.415 --> 00:10:17.451 
全球資源定位器可以定位你的內容

00:10:17.784 --> 00:10:19.186 
WatchKit操作爲你重放

00:10:19.653 --> 00:10:23.190 
如果你已經將內容輸入到手錶中
這個全球資源定位器可以是本地文件

00:10:23.390 --> 00:10:26.627 
如果不是本地文件
則使用遠程HTTP URL

00:10:27.094 --> 00:10:28.862 
如果提供一個遠程資源

00:10:29.129 --> 00:10:33.967 
WatchKit可以下載 顯示進程
並在下載完成後立即播放

00:10:34.468 --> 00:10:36.904 
如果是本地文件
可以很快進行重放

00:10:38.272 --> 00:10:39.907 
當用戶點擊播放鍵

00:10:40.140 --> 00:10:45.746 
則可以看到優質的全屏播放的視頻
以及全屏視頻回放

00:10:46.079 --> 00:10:50.951 
回放控制將在簡要瀏覽全部內容後
立即淡出

00:10:53.787 --> 00:10:57.558 
此外 如果你想要用其他方式回放
而不採用標準界面

00:10:57.758 --> 00:11:01.962 
也有一個API可
直接從其他界面呈現控制器

00:11:04.598 --> 00:11:07.234 
這些API可以播放視頻音頻內容

00:11:07.568 --> 00:11:10.037 
且十分適用於回放小型文件

00:11:10.404 --> 00:11:12.773 
Apple Watch
被設計爲簡短的互動

00:11:13.140 --> 00:11:17.077 
7所以在這裏播放的
最好是不太長的東西

00:11:17.277 --> 00:11:19.379 
你也許不想以這種方式

00:11:19.713 --> 00:11:21.815 
在Apple Watch上
播放兩個小時的電影

00:11:21.915 --> 00:11:26.854 
有時你想播放的音頻類型
內容很長

00:11:27.287 --> 00:11:30.023 
如果你正在編寫類似播客的app

00:11:30.257 --> 00:11:32.192 
你也許想要下載一些播客

00:11:32.392 --> 00:11:35.195 
然後運行一下
在你的藍牙耳機上聽一聽

00:11:35.696 --> 00:11:40.100 
我們有另外一個API
對於播放這類較長形式的音頻確實不錯

00:11:40.834 --> 00:11:44.371 
如果你熟悉AV基礎的API
你就知道如何使用這些

00:11:44.438 --> 00:11:45.606 
因爲它們非常相似

00:11:46.473 --> 00:11:51.111 
你也許從iOS瞭解到這與以AV爲基
礎的API之間唯一的不同是

00:11:51.278 --> 00:11:58.185 
爲了使應用程序獲得真正的高性能
和更大的電池使用

00:11:58.585 --> 00:12:03.123 
它不要求你的應用程序
爲了播放那個音頻而持續在後臺運轉

00:12:03.524 --> 00:12:05.926 
該文件可以被切換到系統來播放

00:12:05.993 --> 00:12:08.228 
即使你的應用程序被懸置沒有運行

00:12:08.829 --> 00:12:11.565 
如果用戶在外奔跑時查看錶盤

00:12:12.866 --> 00:12:14.668 
它們可以提供正在播放的信息

00:12:14.868 --> 00:12:17.604 
並且控制來自你應用程序的音頻播放

00:12:17.738 --> 00:12:19.173 
即使你的應用程序沒有在運行

00:12:22.409 --> 00:12:27.447 
我想在這裏快速地談一下
還有幾個其他與硬件無關的API

00:12:28.182 --> 00:12:29.750 
第一個是提醒

00:12:30.284 --> 00:12:34.221 
我再重複一次Apple Watch
是爲簡短的互動而設計的

00:12:34.655 --> 00:12:38.525 
因此你也許真的要小心
不要過度使用這種API

00:12:38.592 --> 00:12:43.530 
因爲它確實將額外的步驟引入了
你的應用程序中的一些工作流程中

00:12:44.097 --> 00:12:48.135 
有時候你只需要在獲得回答前
問用戶一個問題即可

00:12:48.468 --> 00:12:50.470 
對於那些情況
我們有提醒API

00:12:50.537 --> 00:12:53.607 
向你提供這種類UI
的統一外觀

00:12:54.441 --> 00:12:55.909 
你提供一個標題 一個描寫

00:12:56.243 --> 00:12:59.513 
塊中應該採取的按鈕列表和動作

00:13:00.180 --> 00:13:01.081 
它們只是被顯示出來

00:13:01.148 --> 00:13:03.417 
當用戶點擊它們中的一個時
你就會獲得回調

00:13:03.750 --> 00:13:07.454 
在這種情況下
我包含了一個破壞按鈕

00:13:07.521 --> 00:13:09.990 
明確說明當我點擊這裏的刪除
破壞的事情就會發生

00:13:13.193 --> 00:13:15.896 
我們有個非常不錯的
開放系統URL API

00:13:16.096 --> 00:13:17.798 
它允許做許多新的事情

00:13:18.198 --> 00:13:20.601 
開放系統URL可以採用另外的URL

00:13:20.767 --> 00:13:26.940 
併發送給用戶一個小型應用程序
使其發送信息給app中已有的接受者

00:13:28.275 --> 00:13:30.777 
更酷的是你可以傳遞來自
始於Apple Watch的

00:13:30.978 --> 00:13:34.882 
電話呼叫應用程序
tel URL

00:13:35.649 --> 00:13:36.483 
當那個發生的時候

00:13:36.550 --> 00:13:38.852 
通話中的UI就會出現在你的app中

00:13:39.186 --> 00:13:41.688 
用戶可以打電話
他們只要一掛機

00:13:41.922 --> 00:13:45.225 
他們立刻就能回到他們開始打電話時
離開的app界面

00:13:48.962 --> 00:13:51.798 
我們還對票據進行集成-票據工具箱

00:13:52.432 --> 00:13:56.103 
實際上
票據工具箱是手錶操作系統的一部分

00:13:56.803 --> 00:14:01.141 
這樣你就能夠訪問
在iPhone上可能具有的票據

00:14:01.275 --> 00:14:03.677 
票據庫與iPhone
Apple Watch是同步的

00:14:03.744 --> 00:14:04.678 
這樣你能同時獲得

00:14:05.345 --> 00:14:07.681 
更不錯的是
WatchiKit有個API

00:14:07.748 --> 00:14:09.750 
允許你添加票據到票據庫中

00:14:10.117 --> 00:14:13.720 
你以這樣的方式將PK票據
交給WatchKit API

00:14:14.188 --> 00:14:17.691 
用戶能夠滾動它
來查看那個票據中有什麼

00:14:17.925 --> 00:14:20.928 
一直到最後有個添加按鈕
將它添加到庫中

00:14:21.695 --> 00:14:22.529 
當他們點擊那個時

00:14:22.596 --> 00:14:23.997 
它就會被添加到
Apple Watch庫中

00:14:24.064 --> 00:14:27.935 
但是也在iPhone
及其它通過雲端服務同步的設備中

00:14:28.802 --> 00:14:32.773 
因此從輸入一直到後來票據的使用

00:14:32.840 --> 00:14:35.676 
所有的端到端的票據情況
都在Apple Watch上

00:14:38.846 --> 00:14:42.082 
這就是WatchKit的新性能
那裏還有許多新奇的東西

00:14:42.783 --> 00:14:47.154 
正如我所說過的WatchKit只是
整個的手錶操作系統STK的一部分

00:14:47.621 --> 00:14:49.056 
還有其他的框架

00:14:49.156 --> 00:14:54.161 
一些是新的
一些是已有的並添加了新功能

00:14:54.962 --> 00:14:57.231 
我現在就要談談其他的幾個

00:14:57.464 --> 00:15:00.067 
先說兩個對WatchOS
很特別的特性

00:15:00.934 --> 00:15:02.970 
第一個是Clock Kit

00:15:05.339 --> 00:15:08.742 
Clock Kit是不需要構建信息

00:15:08.809 --> 00:15:12.579 
直接在錶盤上顯示的框架

00:15:12.846 --> 00:15:16.116 
它可以迅速地將你的數據
放在用戶的面前

00:15:19.052 --> 00:15:20.821 
信息有幾種模式

00:15:21.121 --> 00:15:22.789 
但Clock Kit支持所有的模式

00:15:22.990 --> 00:15:26.393 
讓我們來仔細查看錶盤
來看看它是什麼樣子的

00:15:27.194 --> 00:15:29.496 
這裏是我們的實用錶盤

00:15:29.563 --> 00:15:32.432 
現在錶盤上能看到
有三種不同的信息特性

00:15:32.833 --> 00:15:37.871 
你可以看到有不同的尺寸
和形狀的信息特性

00:15:38.172 --> 00:15:44.411 
爲了顯示信息 Clock Kit
以恰當的方式格式化數據

00:15:45.078 --> 00:15:47.214 
例如 如果我們看彩色的錶盤

00:15:47.481 --> 00:15:49.650 
這個有着更寬尺寸的信息特性

00:15:49.716 --> 00:15:53.620 
且更高些可顯示兩行的文本或圖像

00:15:54.588 --> 00:15:56.657 
最後 在數字模塊錶盤上

00:15:56.723 --> 00:16:00.160 
我們將最大的信息放在正中央
其他的放在邊緣上

00:16:00.527 --> 00:16:03.163 
Clock Kit提供了
一些非常好的API

00:16:03.297 --> 00:16:07.768 
讓你以多種不同模板來格式化你的數據
並滿足不同的外觀需求

00:16:08.101 --> 00:16:14.708 
使它能針對不同大小的信息進行調節
來顯示合適的數據數量

00:16:16.743 --> 00:16:18.745 
現在有關信息的另一個重要特性是

00:16:18.979 --> 00:16:20.714 
它們正好在你的錶盤上

00:16:21.081 --> 00:16:23.884 
這就意味着每次用戶舉起手腕看錶

00:16:24.051 --> 00:16:26.687 
他們想要立即看到最新的數據

00:16:27.421 --> 00:16:32.459 
如果每次都要用戶舉起手腕詢問代碼
來提供要顯示的當前數值

00:16:32.793 --> 00:16:33.861 
我們就已經失敗了

00:16:34.361 --> 00:16:38.699 
在用戶舉起他們的手腕之前
信息需要立即在那兒

00:16:39.166 --> 00:16:40.400 
爲了實現這個目標

00:16:40.667 --> 00:16:44.471 
你以時間軸的形式向ClockKit
提供應用程序數據

00:16:45.272 --> 00:16:48.242 
在這種情況下
我以這裏的信息和時間軸的形式

00:16:48.642 --> 00:16:50.577 
向WWDC提供應用程序數據

00:16:51.178 --> 00:16:52.713 
如果是上午10:00

00:16:53.113 --> 00:16:54.314 
它將顯示的早晨的主題

00:16:54.581 --> 00:16:57.217 
表明當前正在召開會議

00:16:58.685 --> 00:17:01.922 
隨着一天的流逝
現在到2:00

00:17:02.155 --> 00:17:03.290 
因爲它已經有了數據

00:17:03.423 --> 00:17:06.492 
所以ClockKit選擇
那個時間點合適的事情

00:17:06.760 --> 00:17:08.595 
它會移動到國情諮詢平臺

00:17:09.162 --> 00:17:11.598 
移動到4:00
蘋果設計獎勵

00:17:12.398 --> 00:17:15.435 
這種格式的了不起的地方是

00:17:15.502 --> 00:17:20.674 
你整天都可獲得自動的行爲
不需要代碼一直在運行

00:17:21.074 --> 00:17:25.311 
但是你可以參與時空之旅
而不需要你費任何事

00:17:25.811 --> 00:17:30.217 
如果用戶將數字表冠向後移動
想看看這一天的早些時候都發生了什麼

00:17:30.651 --> 00:17:34.988 
Clock Kit就會轉換到顯示
那一時刻的合適的數據段

00:17:35.789 --> 00:17:42.229 
這很容易爲信息添加支持
也很有效地將數據放在用戶面前

00:17:43.830 --> 00:17:44.965 
這就是Clock Kit

00:17:45.032 --> 00:17:49.403 
有一個全程的講座
將會對此詳細地進行說明及相關API

00:17:49.636 --> 00:17:52.739 
和不同的模板
甚至你起始要做的一切東西

00:17:53.040 --> 00:17:55.409 
離開時請領取
一本名叫用Clock Kit的書

00:17:57.811 --> 00:17:59.613 
下來我想說的是連網

00:18:01.114 --> 00:18:03.483 
在Apple Watch和
IPhone上

00:18:03.550 --> 00:18:07.087 
有代碼運行連網是很重要的內容

00:18:09.089 --> 00:18:12.125 
有兩種連網也許你想要在app中使用

00:18:12.459 --> 00:18:16.363 
第一個
你也許要有較寬的因特網

00:18:17.764 --> 00:18:23.904 
當你處於獨立模式或手錶和手機在相同
的地方使用NSURL對話API時

00:18:23.971 --> 00:18:26.340 
你可以使用這種連網方式

00:18:27.608 --> 00:18:32.613 
它會根據用戶使用手機的方式

00:18:33.013 --> 00:18:37.384 
包括手機檢測並連接Wi-Fi的方式
以最佳的方式連接到網絡

00:18:40.287 --> 00:18:42.556 
有個全程的講座都
將討論NSURL連網

00:18:42.823 --> 00:18:45.292 
NSURL連網將會單獨講解

00:18:46.426 --> 00:18:51.598 
點擊因特網上的任何服務器
都可以下載數據

00:18:51.865 --> 00:18:55.035 
如果你曾使用過iOS
它們是相同的API

00:18:55.536 --> 00:18:58.672 
且還具有相同的特性設置
包括後臺下載

00:19:00.807 --> 00:19:06.079 
有時你想在Apple Watch和
iPhone上運行代碼

00:19:06.313 --> 00:19:08.649 
你想讓它們分享數據並且彼此對話

00:19:09.583 --> 00:19:13.654 
我們爲WatchOS和iOS提供了
嶄新的框架

00:19:13.720 --> 00:19:14.888 
叫做手錶連通性

00:19:15.189 --> 00:19:16.623 
它允許你來做那樣的事情

00:19:16.823 --> 00:19:20.360 
你的iPhone可以連通正在
iPhone上運行的代碼

00:19:20.527 --> 00:19:23.330 
同時你的手錶可以連通正在
手錶上運行的代碼

00:19:26.400 --> 00:19:32.105 
比如當你想要從因特網上下載數據

00:19:33.040 --> 00:19:37.044 
構建一個天氣應用程序
去下載當前的天氣信息

00:19:37.744 --> 00:19:39.746 
我們可以說
你的用戶拿起他們的iPhone

00:19:39.980 --> 00:19:40.981 
並且啓動了該應用程序

00:19:41.148 --> 00:19:45.118 
你來到因特網獲取最新的天氣
並將它顯示在他們的iPhone上

00:19:45.786 --> 00:19:47.354 
如果你沒有做其它的任何事

00:19:47.521 --> 00:19:49.790 
你構建手錶應用程序
來做相同的事情

00:19:50.157 --> 00:19:52.192 
下次他們看到手錶上的應用程序

00:19:52.359 --> 00:19:55.429 
來到網絡上下載最新的數據
並將它顯示在那兒

00:19:56.430 --> 00:19:59.233 
但是那不是我們能做的最好的做法
我們肯定可以做得更好

00:19:59.433 --> 00:20:03.370 
因爲我們有剛從iPhone獲得的數
據 它現在在用戶的口袋中

00:20:04.238 --> 00:20:10.611 
如果我們能充分利用已經下載的數據
並在我們設備中的多次使用

00:20:10.677 --> 00:20:12.145 
那就太好了

00:20:13.113 --> 00:20:15.148 
爲達到這個目的
可以做類似這樣的事情

00:20:15.649 --> 00:20:17.484 
用戶將數據下載
在他們的iPhone上

00:20:17.551 --> 00:20:20.921 
你將它轉移並保存在手錶上

00:20:21.088 --> 00:20:24.224 
因此如果用戶看到手錶上的應用程序

00:20:24.458 --> 00:20:28.495 
數據已經在那兒且不需要再次下載

00:20:29.196 --> 00:20:32.533 
當然 你仍然可以下載最近的更新版本

00:20:32.666 --> 00:20:36.403 
如果你知道天氣數據是
每小時更新一次

00:20:36.603 --> 00:20:39.039 
你可能已經獲得了最新的數據
那就不需要這樣做了

00:20:39.406 --> 00:20:43.744 
你現在就有更新的東西
可以立即顯示

00:20:44.978 --> 00:20:47.714 
手錶連通性就提供了這個功能

00:20:48.282 --> 00:20:51.185 
有兩個提供後臺下載的API

00:20:51.385 --> 00:20:52.853 
第一個叫做應用程序語境

00:20:53.086 --> 00:20:58.091 
你將它做的一切都
移交到一個數據字典中

00:20:58.358 --> 00:21:02.196 
你希望每當再次運行在另一側的應用程
序時 都可以獲得該數據

00:21:02.596 --> 00:21:04.998 
它總是獲得最新的數據版本

00:21:05.199 --> 00:21:07.234 
所以你只是設置爲無論如何都是當前的

00:21:07.434 --> 00:21:10.304 
下次你的應用程序運行的時候
就可以在那裏得到

00:21:11.071 --> 00:21:16.777 
在幕後 手錶連通性在能量
和性能最佳的時機傳輸數據

00:21:18.212 --> 00:21:22.282 
還有個文件傳輸API
如果你有較大的數據

00:21:22.549 --> 00:21:26.720 
你可以將更多的數據從的iPhone
傳輸到你的手錶 反之亦然

00:21:27.154 --> 00:21:31.358 
同樣的 它會在後臺
能量和性能的最佳時機完成

00:21:32.860 --> 00:21:37.130 
還有時你還需要在兩側
互動消息傳遞

00:21:37.764 --> 00:21:41.401 
如果你的手錶應用程序將要在
你的iPhone上啓動一些操作

00:21:41.635 --> 00:21:43.170 
你也許想要發送一個消息過去

00:21:43.670 --> 00:21:46.540 
在這個例子中
我在手錶上有個去按鈕

00:21:46.874 --> 00:21:49.443 
當我點擊它的時候
我想給iPhone發送一個消息

00:21:50.577 --> 00:21:55.315 
下來要發生的就是
若應用程序已在iPhone後臺運行

00:21:55.549 --> 00:21:56.717 
消息就會被轉發

00:21:56.783 --> 00:22:01.555 
這樣你就可以做類似開始一個會話
或在iPhone上進行一些活動

00:22:02.623 --> 00:22:05.859 
現在我提到這些API在兩側都存在
它們是雙向的

00:22:06.193 --> 00:22:08.128 
應用程序語境可以到達兩個方向

00:22:08.562 --> 00:22:11.498 
文件傳輸API
可以在兩個方向傳輸文件

00:22:11.999 --> 00:22:14.368 
一個不同之處是在發送消息API

00:22:14.801 --> 00:22:16.837 
當從手錶到iPhone發送消息時

00:22:16.904 --> 00:22:20.340 
可以喚醒iPhone後臺的應用程序
進行一些活動

00:22:20.841 --> 00:22:23.577 
但是當從iPhone到手錶的時候

00:22:23.744 --> 00:22:25.512 
它就不會喚醒後臺的手錶

00:22:25.579 --> 00:22:29.650 
你的app在手錶上運行的目的
就是爲了接受來自iPhone的消息

00:22:31.952 --> 00:22:34.755 
在這些API中還有很多細節需要注意

00:22:34.821 --> 00:22:38.025 
還有一個完整的講座講的是這些東西
這個講座的名字是介紹手錶的連接性

00:22:38.091 --> 00:22:39.393 
所以你需要看一下

00:22:39.593 --> 00:22:45.199 
並學習一下如何將後端從只能在一個
設備上運行

00:22:45.766 --> 00:22:48.902 
變成同時在iPhone
和Apple Watch運行

00:22:51.805 --> 00:22:54.474 
所以這些就是那三個新的構架

00:22:54.808 --> 00:22:57.344 
對於WatchOS來講
是全新並且獨有的

00:22:57.878 --> 00:23:00.480 
現存的IOS上有很多框架

00:23:00.714 --> 00:23:02.783 
你已經熟悉了在你的app中使用它們

00:23:03.150 --> 00:23:07.921 
我們在Apple Watch上添加
了一些新功能或者說加強了獨有的功能

00:23:08.555 --> 00:23:10.457 
我現在想要概述一下這些功能

00:23:11.091 --> 00:23:13.026 
第一個是Core Motion

00:23:13.760 --> 00:23:20.133 
正如你所知 Core Motion
可以讓你訪問IOS設備的運動傳感器

00:23:20.634 --> 00:23:22.369 
WatchOS中同樣存在

00:23:22.436 --> 00:23:24.171 
可以讓你能夠訪問加速度計

00:23:24.972 --> 00:23:26.907 
和在IOS上一樣
在WatchOS上

00:23:26.974 --> 00:23:30.611 
Core Motion
給你程序運行的實時數據

00:23:31.411 --> 00:23:35.315 
但對於Apple Watch來講
這是新的而且很讚的是

00:23:35.649 --> 00:23:42.189 
它可以在程序中記錄運動數據
即使它不是以一個較低的刷新速率運行

00:23:42.456 --> 00:23:46.627 
然後將加速度計的數據批量發送給你
在下次你的應用程序運行的時候

00:23:47.561 --> 00:23:50.531 
這在你的APP沒有運行的時候

00:23:50.831 --> 00:23:52.466 
是一種很酷地檢測運動數據的方法

00:23:53.467 --> 00:23:56.403 
關於這有一個完整的講座
叫做Core Motion的新功能

00:23:56.603 --> 00:23:57.871 
所以你一定要去看一下

00:23:59.173 --> 00:24:02.009 
另外Core Location
是WatchOS的一部分

00:24:02.376 --> 00:24:06.180 
這是尋找用戶新位置的很棒的方法

00:24:06.613 --> 00:24:10.317 
現在iOS 9和watchOS
2有個新的API

00:24:10.584 --> 00:24:15.355 
就可以非常簡單地實現一些很讚的事情

00:24:17.157 --> 00:24:20.194 
現在另一件需要注意的是

00:24:20.527 --> 00:24:23.630 
WatchOS上
CoreLocation的位置信息

00:24:23.697 --> 00:24:26.633 
可以授權在iPhone上
運行的IOS APP

00:24:26.800 --> 00:24:29.336 
和Apple Watch上的
WatchOS APP之間共享

00:24:29.937 --> 00:24:32.472 
衆所周知 當你使用
Core Location的時候

00:24:32.539 --> 00:24:37.144 
在app進行定位之前
要請求用戶進行位置授權

00:24:37.578 --> 00:24:39.246 
在Apple Watch上也是這樣

00:24:39.880 --> 00:24:44.418 
當用戶允許了iPhone
或者Watch上的授權

00:24:44.484 --> 00:24:46.453 
它會同時提供給
IPhone和Watch

00:24:46.753 --> 00:24:48.455 
所以他們不需要對這個問題回答兩次

00:24:48.789 --> 00:24:51.758 
有一個辦法可以管理
用戶的這種授權

00:24:54.127 --> 00:24:55.796 
有一完整的講座介紹了
Core Location

00:24:55.863 --> 00:24:57.331 
叫做Core Location
的新功能

00:24:57.397 --> 00:24:58.765 
很多東西都能在那裏找到

00:25:00.567 --> 00:25:01.869 
接下來是HealthKit

00:25:02.336 --> 00:25:04.705 
HealthKit也是
WatchOS的一部分

00:25:04.771 --> 00:25:08.509 
和你在IOS中使用的
是相同的API設置和相同的構架

00:25:09.376 --> 00:25:12.246 
在WatchOS上使用
HealthKit的最大優點是

00:25:12.579 --> 00:25:16.817 
有非常多的健康數據被記錄在了手表上

00:25:17.084 --> 00:25:20.854 
你現在可以訪問更多最新的實時數據

00:25:20.921 --> 00:25:22.422 
因爲這都在手錶其本身上

00:25:22.823 --> 00:25:25.526 
你現在可以在產生那些數據的設備上
進行查看

00:25:26.760 --> 00:25:30.430 
例如你可以看到實時的心率信息

00:25:30.697 --> 00:25:32.699 
當它正在記錄並存儲
在HealthKit中

00:25:33.534 --> 00:25:35.702 
HealthKit和WatchOS
的另一件很棒的事情是

00:25:35.769 --> 00:25:39.706 
它爲API提供了
提醒你開始鍛鍊的功能

00:25:40.507 --> 00:25:43.877 
這些鍛鍊會話能夠做很多這一類的事情

00:25:44.178 --> 00:25:48.348 
Watch本身的鍛鍊app也能做

00:25:48.448 --> 00:25:53.453 
例如如果你開始跑步
你想要記錄用戶的高頻率心率數據

00:25:53.620 --> 00:25:55.822 
可以使用HealthKit API
打開那個會話

00:25:55.889 --> 00:26:00.627 
選擇記錄高頻率的心率數據信息

00:26:01.895 --> 00:26:05.599 
使用這個API中健身應用的
另一個很棒的事情是

00:26:06.133 --> 00:26:12.639 
每當用戶舉起手腕使用的時候
它允許程序繼續回前臺

00:26:13.106 --> 00:26:17.411 
如果你在寫一個騎行APP
用戶開始一個騎行會話

00:26:17.911 --> 00:26:19.213 
每次他們舉起手腕的時候

00:26:19.279 --> 00:26:21.582 
在會話中他們能夠通過app
查看最新的實時的數據

00:26:21.782 --> 00:26:26.753 
並看到自己在運動的時候表現的怎麼樣

00:26:28.322 --> 00:26:32.426 
現在當用戶放下手腕
屏幕關閉的時候 應用程序被暫停

00:26:33.060 --> 00:26:36.864 
但是HealthKit將
默默地爲你記錄所有的數據

00:26:37.097 --> 00:26:39.633 
所以當用戶舉起手腕
能夠再次運行起來

00:26:39.833 --> 00:26:43.770 
app被暫停時的數據得到了更新

00:26:45.239 --> 00:26:51.678 
這提供了一種很棒的方法
實現所有數據的統一

00:26:51.912 --> 00:26:54.381 
併爲用戶提供優秀的用戶體驗

00:26:56.583 --> 00:26:59.386 
也有一個完整的講座
叫做HealthKit的新功能

00:26:59.753 --> 00:27:02.623 
如果你正在寫一個鍛鍊類型的app

00:27:03.090 --> 00:27:05.492 
或者任何可能使用
Health Kit數據優點的程序

00:27:06.927 --> 00:27:09.496 
我也想花一點時間講一下
關於安全構架的問題

00:27:09.563 --> 00:27:12.499 
這也許不是最令人興奮的消磨時間方法

00:27:13.033 --> 00:27:14.801 
但是請相信我
這裏有非常重要的東西

00:27:15.969 --> 00:27:19.273 
如果你使用過IOS的安全構架

00:27:19.706 --> 00:27:23.043 
你就會知道它允許你
訪問Keychain

00:27:24.278 --> 00:27:26.780 
Apple Watch上的
Keychain非常有意思

00:27:26.914 --> 00:27:29.183 
Apple Watch獨一無二的是

00:27:29.349 --> 00:27:32.553 
當它在用戶的手腕上的時候
它會保持開啓

00:27:33.220 --> 00:27:35.122 
一旦當用戶摘掉手錶

00:27:35.756 --> 00:27:37.324 
這個設備就會馬上鎖定

00:27:38.392 --> 00:27:39.760 
你可以利用這一點

00:27:40.027 --> 00:27:44.932 
在Keychain中存儲
你的憑據和安全數據

00:27:46.466 --> 00:27:47.301 
這樣可以保證

00:27:47.367 --> 00:27:51.638 
當手錶在用戶的手腕上的時候
你能夠訪問數據

00:27:52.172 --> 00:27:56.643 
一旦手錶被取下來
數據將不能夠被訪問因爲手錶被鎖定了

00:28:00.214 --> 00:28:01.048 
謝謝

00:28:03.984 --> 00:28:05.185 
他感到非常興奮

00:28:08.322 --> 00:28:09.790 
好吧
這就是安全部分

00:28:11.258 --> 00:28:12.259 
接下來是MapKit

00:28:13.861 --> 00:28:18.599 
有一個MapKit API子集可以
作爲WatchOS STK的一部分

00:28:18.832 --> 00:28:21.168 
特別是MK Map API

00:28:21.802 --> 00:28:22.769 
它很酷的方面是

00:28:22.836 --> 00:28:27.241 
你可以從你的應用程序中
發送一個定位到地圖APP

00:28:27.474 --> 00:28:30.010 
可以讓用戶在完整的地圖應用中查看

00:28:30.611 --> 00:28:35.916 
他們不僅能夠查看
還能夠開始導航並在APP中尋找路線

00:28:36.483 --> 00:28:40.521 
如果你有一個位置
並且想使用戶能夠找到直接到那裏

00:28:40.854 --> 00:28:42.389 
你可以在Apple Watch
和iPhone上

00:28:42.456 --> 00:28:45.292 
使用MapKit API開始導航

00:28:45.459 --> 00:28:48.262 
向用戶發送導航信息

00:28:50.163 --> 00:28:51.765 
同樣有一個關於MapKit的講座

00:28:51.832 --> 00:28:54.268 
叫做MapKit的新功能
你可以瞭解到所有信息

00:28:55.936 --> 00:28:57.938 
最後兩個我想要講的構架是

00:28:58.005 --> 00:29:01.642 
都是關於訪問
Apple Watch上數據的

00:29:02.042 --> 00:29:04.077 
在Apple
Watch上的用戶數據類型

00:29:04.478 --> 00:29:07.047 
我們已經進行了同步處理

00:29:08.615 --> 00:29:10.350 
第一個是聯繫構架

00:29:11.385 --> 00:29:15.289 
在IOS 9和WatchOS 2中
聯繫是一個全新的構架

00:29:15.722 --> 00:29:19.927 
可以讓你訪問
Apple Watch中的通訊簿

00:29:19.993 --> 00:29:23.397 
因爲在我們的應用程序中使用了
所以它已經同步了

00:29:23.597 --> 00:29:27.134 
你不需要傳輸就可以訪問本地數據

00:29:28.035 --> 00:29:29.803 
有一個講座講了這個全新的構架

00:29:30.137 --> 00:29:33.040 
叫做iOS和OS 10的聯繫架構

00:29:33.340 --> 00:29:36.243 
如果你準備使用聯繫信息的話
就應該查看一下

00:29:36.844 --> 00:29:38.579 
就像Core Location一樣

00:29:38.846 --> 00:29:41.682 
訪問IOS APP
和WatchOS APP的

00:29:41.748 --> 00:29:44.785 
共享通訊簿數據需要用戶的授權

00:29:45.452 --> 00:29:49.423 
當用戶授權你訪問通訊簿

00:29:49.656 --> 00:29:51.091 
你在任何一邊都有訪問的授權

00:29:51.391 --> 00:29:56.964 
在Apple Watch和
iPhone上都有個管理授權信息

00:29:59.099 --> 00:30:00.868 
最後一個是EventKit

00:30:01.168 --> 00:30:03.704 
EventKit是用作
訪問用戶日曆的

00:30:04.638 --> 00:30:08.675 
這和我們講過的聯繫構架上
有很多相同點

00:30:09.076 --> 00:30:10.944 
一旦你得到訪問它的授權

00:30:11.311 --> 00:30:14.114 
對於iPhone APP
和Watch APP來講是相同的

00:30:16.817 --> 00:30:20.487 
所以在WatchOS 2中
有非常多的東西

00:30:21.688 --> 00:30:23.156 
三個全新的構架

00:30:23.891 --> 00:30:28.896 
三個全新的構架
WatchKit 手錶連接

00:30:34.568 --> 00:30:35.869 
還有Clock Kit
謝謝

00:30:42.709 --> 00:30:45.279 
WatchOS獨有的三個全新的構架

00:30:45.979 --> 00:30:51.051 
在所有的其他構架中
有很多新功能是WatchOS特有的

00:30:51.351 --> 00:30:54.688 
有一些是在你的App之間共享的

00:30:55.689 --> 00:31:02.129 
當你在一個平臺上學習並將其運用到其
他平臺上的app時有大量的工作要做

00:31:02.396 --> 00:31:05.499 
其他的框架能夠利用
Watch獨有的功能

00:31:06.466 --> 00:31:10.070 
這一週有非常多的講座
可以在其他地方學到更多東西

00:31:10.704 --> 00:31:12.840 
在文檔中有一個過渡指南

00:31:12.906 --> 00:31:14.541 
WatchKit過渡指南

00:31:14.808 --> 00:31:18.545 
將幫你學習支持
WatchOS1的WatchKit

00:31:18.745 --> 00:31:23.350 
升級後支持在WatchOS 2上
運行作爲手錶本身的本地程序運行

00:31:24.484 --> 00:31:27.454 
有非常多的實例代碼和開發者論壇

00:31:27.521 --> 00:31:31.658 
技術支撐是最好的解決所有問題的去處

00:31:32.025 --> 00:31:33.560 
這就是WatchKit的新東西

00:31:33.627 --> 00:31:35.162 
感謝您今早的到來

00:31:35.395 --> 00:31:39.166 
我非常期待你們
使用這些東西能做出來什麼