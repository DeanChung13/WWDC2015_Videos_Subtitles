00:00:20.754 --> 00:00:23.524 
Xcode的app切割

00:00:24.191 --> 00:00:26.460 
早上好 我是安德斯

00:00:26.793 --> 00:00:30.531 
歡迎你們來參加404會議
Xcode的app切割

00:00:32.533 --> 00:00:35.602 
APP切割在這個舞臺上已經多次提及

00:00:35.769 --> 00:00:40.107 
但從你們昨天
提出的問題和問題數量看來

00:00:40.174 --> 00:00:41.842 
很多人深感興趣並且仍有疑問

00:00:42.509 --> 00:00:45.379 
所以在這個會議上我們會講的更詳細些

00:00:45.946 --> 00:00:48.081 
尤其是關於

00:00:48.148 --> 00:00:52.319 
當今
APP切割如何影響APP傳播途徑

00:00:52.553 --> 00:00:54.788 
我們會看看其工作原理以及改善

00:00:56.123 --> 00:00:57.090 
我們會討論

00:00:57.157 --> 00:01:01.161 
如何進行高效的APP切割

00:01:01.628 --> 00:01:03.697 
減少內存佔用率

00:01:05.632 --> 00:01:06.667 
然後我們要討論

00:01:06.733 --> 00:01:08.135 
這對你工作流程的意義

00:01:08.302 --> 00:01:11.772 
當你在開發和測試應用以及
提交到App Store等過程中

00:01:13.941 --> 00:01:15.442 
現在我們快速瀏覽一下

00:01:15.509 --> 00:01:17.044 
當前的APP是如何傳播的

00:01:17.744 --> 00:01:20.314 
你會使用
Xcode開發iOS系統app

00:01:21.281 --> 00:01:23.951 
然後測試並提交應用商店

00:01:25.252 --> 00:01:26.186 
當你提交時 

00:01:26.253 --> 00:01:30.157 
App會被標記上開發者證書

00:01:31.024 --> 00:01:35.229 
在經過檢驗後
App Store會重新證書標記

00:01:35.562 --> 00:01:37.531 
然後上架以供下載

00:01:40.234 --> 00:01:43.604 
然後有一臺設備下載了你的App

00:01:43.670 --> 00:01:47.541 
這樣設備就獲得了你上傳的的App

00:01:47.875 --> 00:01:49.409 
現在我們來看看裏面的內容

00:01:50.644 --> 00:01:52.579 
首先 這是你的執行代碼

00:01:53.180 --> 00:01:56.383 
這裏有很多資源
幾乎所有的東西都羅列在內

00:01:58.218 --> 00:02:01.221 
有些App代碼很繁重 很多

00:02:01.288 --> 00:02:02.923 
資源也比較少

00:02:03.423 --> 00:02:06.226 
有些則正好相反 媒體文件較多

00:02:06.293 --> 00:02:08.529 
大部分是資源

00:02:09.596 --> 00:02:11.598 
我們舉一個例子看一看

00:02:14.067 --> 00:02:19.373 
現在代碼基本上
有兩種版本64位或32位

00:02:19.439 --> 00:02:21.508 
實際上 還可能是RMV7

00:02:21.675 --> 00:02:24.478 
也包括NRV64切片

00:02:24.745 --> 00:02:29.416 
爲了在
Apple硬件上運作良好RMV7

00:02:31.485 --> 00:02:34.021 
當然 資源中如果有圖像的話

00:02:34.087 --> 00:02:38.625 
你會使用
1X 2X 3X或Retina

00:02:38.859 --> 00:02:41.361 
以使圖像在各類設備上運行良好

00:02:44.198 --> 00:02:46.300 
你也許會想對圖像進行一部分區分

00:02:46.466 --> 00:02:48.468 
分爲適用iPhone的 

00:02:48.669 --> 00:02:50.003 
和適用iPad的

00:02:52.105 --> 00:02:56.543 
如果是
遊戲app或者是3D圖像型APP 

00:02:56.910 --> 00:03:00.714 
那麼1X和2X在處理文本壓縮和

00:03:00.781 --> 00:03:04.451 
文字模塊方面並無太大意義

00:03:06.286 --> 00:03:09.957 
事實上 如果想利用
OpenGL AS和Metal語言

00:03:10.023 --> 00:03:12.759 
那麼可能需要不同類型的資源紋理

00:03:12.960 --> 00:03:14.695 
而且還進行進一步的區分

00:03:14.761 --> 00:03:16.496 
優質和劣質文件

00:03:16.630 --> 00:03:20.300 
這樣都能讓設備在
不同內存大小上良好地運行

00:03:20.367 --> 00:03:24.438 
在任何設備上運行
取決於內存大小的圖像清晰度

00:03:25.506 --> 00:03:26.907 
可能你還有聲頻資料

00:03:27.307 --> 00:03:29.710 
所以你還可能需要根據比特率進行區分

00:03:31.411 --> 00:03:35.482 
當然還有其他數據 像是遊戲等級

00:03:35.782 --> 00:03:38.452 
又或者你的app需要認證文件

00:03:38.519 --> 00:03:40.554 
可能有些模板及其他一些信息

00:03:40.988 --> 00:03:45.259 
無法讓設備進行區分
所有設備上都可能發生這種事

00:03:47.027 --> 00:03:49.596 
實際上
現在很多App都有所有類型的數據

00:03:49.930 --> 00:03:54.301 
所以你可能要費力進行歸類

00:03:54.368 --> 00:03:57.137 
做好備註

00:03:57.304 --> 00:03:59.640 
這樣相應資料才能安裝在相應的設備上

00:04:01.008 --> 00:04:04.311 
這再好不過
這實際上就是APP切割的優勢所在

00:04:05.145 --> 00:04:06.747 
如果你有一個iPad Mini

00:04:07.714 --> 00:04:11.018 
當它運行的時候 會運行RMV7切割

00:04:11.285 --> 00:04:13.654 
iPad等設備也是如此

00:04:14.688 --> 00:04:17.457 
另外APP切割所做的就是

00:04:17.524 --> 00:04:20.527 
在運行時決定加載資料

00:04:20.928 --> 00:04:22.296 
放到Store的資料

00:04:22.896 --> 00:04:25.666 
設備上的內容就是保存到設備上

00:04:26.033 --> 00:04:30.470 
始終保存在設備上
雖然不會在iPad1上下載

00:04:30.537 --> 00:04:34.942 
所以RM 64切割
無法在ipad Mini上使用

00:04:35.542 --> 00:04:38.345 
那麼 
爲什麼要全部上傳到Store中呢？

00:04:40.247 --> 00:04:41.982 
在App Store上

00:04:42.416 --> 00:04:45.953 
我們將爲ipad
Mini預構建一個定製版本 

00:04:47.688 --> 00:04:50.657 
iPhone 6+也是如此

00:04:50.724 --> 00:04:53.927 
這時候 我們使用3X art
work RM 64等

00:04:54.428 --> 00:04:55.362 
此類的工具

00:04:55.796 --> 00:04:57.264 
值得注意的是

00:04:57.331 --> 00:05:02.903 
你仍會上傳包括各種原圖變體

00:05:02.970 --> 00:05:05.439 
和其他資源的通用APP  

00:05:05.772 --> 00:05:08.609 
於是在App Store裏

00:05:08.675 --> 00:05:09.977 
切割就會發生

00:05:11.445 --> 00:05:14.147 
實際上 App Store的作用是

00:05:14.214 --> 00:05:18.752 
查看你的App能夠支持的不同設備
即使不同設備特性

00:05:19.253 --> 00:05:21.788 
然後再查看App中的實際內容

00:05:21.889 --> 00:05:25.692 
以及你如何
使用1X 2X等工具進行標註

00:05:25.759 --> 00:05:30.163 
然後Store
會預製並分離被下載的IPA

00:05:30.230 --> 00:05:33.267 
我們來看一個已經看過的例子

00:05:33.500 --> 00:05:36.570 
這是個演示箱 曾在美國展示過

00:05:37.938 --> 00:05:39.673 
在這個例子中 我們有一個App

00:05:40.440 --> 00:05:42.309 
74兆字節的通用APP

00:05:42.743 --> 00:05:46.513 
適用於所有架構和設備

00:05:47.214 --> 00:05:50.717 
通過切割 我們得到16至29兆字節

00:05:51.084 --> 00:05:55.789 
平均在22兆字節的文件

00:05:56.156 --> 00:05:58.625 
我們在這款App上運行切割

00:05:58.892 --> 00:06:00.861 
實際上 其中產生了19種變量

00:06:00.928 --> 00:06:02.963 
包括不同的特性組合

00:06:03.330 --> 00:06:07.634 
這一些都在後臺自動進行

00:06:07.701 --> 00:06:10.771 
而你只需對app內容進行標註即可

00:06:12.573 --> 00:06:14.408 
這是第一級保存 實在酷

00:06:14.675 --> 00:06:16.410 
但是 有改善的空間嗎？

00:06:16.476 --> 00:06:18.245 
當然了 有

00:06:18.946 --> 00:06:23.517 
設備上有些資料是我們一直使用到的

00:06:23.584 --> 00:06:24.952 
首先 代碼

00:06:25.352 --> 00:06:29.489 
那裏可能會有一些原圖比如故事板
當你啓動你的應用程序

00:06:30.090 --> 00:06:32.693 
或者將原圖添加到主菜單

00:06:32.759 --> 00:06:34.428 
讓我們假設
你需要不斷使用這些原圖

00:06:35.729 --> 00:06:38.198 
然後還有其它這些東西  

00:06:38.265 --> 00:06:41.502 
這個應用程序之後會需要用到
但現在不需要用到

00:06:41.568 --> 00:06:45.506 
你之前聽過的一個典型例子
比如遊戲的第19級

00:06:46.106 --> 00:06:49.676 
正在玩遊戲第一級的用戶
還不需要19級的資料

00:06:50.544 --> 00:06:51.945 
同樣地 還有其它例子

00:06:52.012 --> 00:06:53.747 
如果App是文件類應用

00:06:53.814 --> 00:06:55.482 
那麼媒體模板就會比較豐富

00:06:55.816 --> 00:06:58.585 
你可能會想把這些推向市場

00:06:58.785 --> 00:07:02.422 
爲了提供豐富的體驗
你可能要有很多的模板

00:07:02.589 --> 00:07:05.826 
但是它們可能會佔用很多空間
你可能會根據需要進行下載

00:07:06.560 --> 00:07:09.496 
對於音頻工具也是這樣的或者此類的

00:07:11.265 --> 00:07:13.467 
很好的示範例子是

00:07:13.534 --> 00:07:16.069 
許多用戶看過一次就不再想讓文件

00:07:16.136 --> 00:07:17.371 
佔用設備的空間

00:07:18.739 --> 00:07:22.009 
如果我們看看我們以前討論過的

00:07:22.342 --> 00:07:24.478 
應用切割其實應用已經進行簡化了

00:07:24.545 --> 00:07:26.246 
因而只剩下一個結構

00:07:26.313 --> 00:07:31.785 
以及一種資源類型的質量變體

00:07:33.820 --> 00:07:37.090 
下一等級劃分 我們可以做的只有

00:07:37.157 --> 00:07:41.728 
在瞭解應用程序的特定區域後才能執行

00:07:41.862 --> 00:07:44.531 
就是基於給定的時間所需要的資料

00:07:44.731 --> 00:07:46.700 
因爲這些是基於你的代碼邏輯

00:07:47.434 --> 00:07:51.405 
因此在這個例子中我們有圖像

00:07:51.705 --> 00:07:53.607 
Metal着色器諸如此類的

00:07:54.007 --> 00:07:56.043 
我們可以把這些分爲共享的

00:07:56.310 --> 00:07:59.446 
以及歸入到
應用程序本身時刻所必須的一類

00:07:59.880 --> 00:08:02.850 
我們可以按需選擇

00:08:03.951 --> 00:08:05.319 
通過劃分

00:08:06.386 --> 00:08:09.156 
實際上你就可以減小

00:08:09.223 --> 00:08:12.259 
應用程序佔用的基礎空間
這樣就可以保存更多文件

00:08:13.427 --> 00:08:17.264 
在這種特定的情況下
使用Xcode建立的

00:08:17.331 --> 00:08:20.634 
標記資源包就會被清除

00:08:20.801 --> 00:08:23.904 
保存到App Store中的IPA

00:08:24.972 --> 00:08:27.007 
你可以根據需要進行下載

00:08:27.608 --> 00:08:29.409 
你可以指定其中的一部分

00:08:29.476 --> 00:08:32.078 
作爲初始下載 當用戶下載展示的

00:08:32.145 --> 00:08:34.347 
應用程序並在進度條達到百分之百之後

00:08:34.982 --> 00:08:37.251 
應用程序就準備就緒了

00:08:37.351 --> 00:08:39.152 
App已經有了一些初始內容

00:08:40.453 --> 00:08:44.324 
你可以根據需要下載更多的內容

00:08:44.558 --> 00:08:48.195 
這已經不是存儲在設備上應用程序包裏

00:08:48.262 --> 00:08:51.698 
也不會備份到iCloud存儲空間裏

00:08:51.765 --> 00:08:55.335 
而是存儲在系統內存中

00:08:55.936 --> 00:08:58.505 
系統可以進行高速緩存資源

00:08:58.572 --> 00:09:00.908 
並按需加載資源

00:09:02.242 --> 00:09:03.310 
因此在這種情況下

00:09:03.377 --> 00:09:06.613 
假如你在這個場景中
實際上我們會有更多的空間

00:09:06.680 --> 00:09:08.348 
而不僅只有三個等級的空間

00:09:08.415 --> 00:09:10.617 
我們可以有更多的等級空間

00:09:10.684 --> 00:09:12.419 
假如你不使用按需加載資源的話

00:09:12.553 --> 00:09:16.156 
當我們來到第四級系統會自動清理

00:09:16.223 --> 00:09:21.128 
最近使用過的資源包包括你的第一級資
源

00:09:21.695 --> 00:09:22.696 
對於第五級同樣如此

00:09:24.164 --> 00:09:26.733 
如果用戶有段時間沒使用你的應用程序

00:09:26.867 --> 00:09:29.670 
以及其它需要下載需加載資源的App

00:09:30.037 --> 00:09:31.405 
則可進行空間回收

00:09:31.471 --> 00:09:32.873 
當應用程序再次被使用時

00:09:32.940 --> 00:09:34.141 
則再次自動下載

00:09:36.076 --> 00:09:38.979 
說說一些關於 按需加載資源的事

00:09:39.546 --> 00:09:43.116 
你通過
在Xcode中標記資源建立資源包

00:09:43.183 --> 00:09:47.421 
昨天你觀看了一個簡短演示

00:09:47.788 --> 00:09:51.425 
今天晚一點的時候
將會有一整個環節說明按需加載資源

00:09:53.594 --> 00:09:56.897 
資源包可以包含任何不可執行資源

00:09:57.664 --> 00:10:00.767 
應用切割在在資源類型下

00:10:00.834 --> 00:10:02.236 
資源目錄起作用

00:10:02.302 --> 00:10:05.305 
通過按需加載資源
你可以下載任何的鬆散文件並標記它們

00:10:05.372 --> 00:10:07.941 
它們會成爲資源包一部分
然後從App Store中下載

00:10:08.008 --> 00:10:09.676 
它們存儲在App Store中

00:10:10.043 --> 00:10:12.579 
你把
它們一起提交到App Store

00:10:12.646 --> 00:10:16.416 
作爲IPA的一部分
但是App Store會把它們分開

00:10:17.217 --> 00:10:18.318 
並單獨存儲

00:10:19.653 --> 00:10:22.856 
它們會根據代碼在需要時被下載

00:10:23.257 --> 00:10:24.992 
它們作爲必需品被回收

00:10:26.326 --> 00:10:29.229 
它們就像其它內容一樣被切割

00:10:29.763 --> 00:10:32.366 
因此你可以把資源包放在這裏

00:10:32.432 --> 00:10:36.436 
實際上 如果你在資源包裏標記資源

00:10:36.503 --> 00:10:39.907 
Xcode會自動爲你建立

00:10:41.208 --> 00:10:42.376 
在資源目錄裏面

00:10:45.078 --> 00:10:47.247 
我們來看下儲存大小

00:10:47.314 --> 00:10:51.618 
對了 今天下午4：30分

00:10:51.685 --> 00:10:53.320 
在太平洋大廈會有一個會議

00:10:54.788 --> 00:10:58.192 
讓我們看看 我們得到什麼種類的儲存
程序片切割後

00:10:58.525 --> 00:11:02.663 
我們得到的程序片平均爲22兆字節

00:11:03.397 --> 00:11:04.531 
在這種情況下 

00:11:04.598 --> 00:11:09.670 
我們得根據核心app
下載5-11兆字節的內容

00:11:10.103 --> 00:11:13.173 
而資源本身則是11-18兆字節

00:11:13.240 --> 00:11:16.476 
關鍵是並非所有文件

00:11:16.543 --> 00:11:18.312 
同時存在在設備中

00:11:19.046 --> 00:11:21.748 
所以總量大約有8兆字節

00:11:21.815 --> 00:11:23.217 
這是一個非常精簡的app

00:11:23.283 --> 00:11:27.387 
但你可以看到它是一個巨大的運用程序
尤其是它有大量媒體資源文件

00:11:27.888 --> 00:11:30.424 
更精簡app的就會很有幫助

00:11:32.593 --> 00:11:36.496 
更小的APP更好的使用體驗

00:11:36.930 --> 00:11:40.934 
有些設備有8GB的空間

00:11:41.001 --> 00:11:45.405 
我們會小心使用這些空間
沒必要用的東西不會佔用你的設備容量

00:11:46.940 --> 00:11:51.645 
通過app簡化設備就可支持更多應用

00:11:52.713 --> 00:11:57.417 
更棒的是這同時也意味着
更短的下載用時 更少的電線傳送

00:11:57.918 --> 00:12:01.822 
更不容易超過100MB的限制

00:12:03.924 --> 00:12:04.892 
這使你下載的應用

00:12:05.993 --> 00:12:08.128 
這意味着你可以使用

00:12:08.428 --> 00:12:11.098 
更多類型的設備而不受太多限制

00:12:11.164 --> 00:12:14.434 
如果你一直很想使用那種

00:12:14.501 --> 00:12:17.337 
不但可以在大功率設備上運行地很好

00:12:17.938 --> 00:12:20.707 
而且也可以
在低能耗設備上使用的Metal 

00:12:20.774 --> 00:12:24.178 
有更好的用戶體驗 那該怎麼做呢 

00:12:24.244 --> 00:12:26.480 
下面這個能使你克服其中一些限制

00:12:26.547 --> 00:12:28.015 
你可以現在就提交 

00:12:28.081 --> 00:12:33.787 
提交到Store
和用戶下載的體積都變小

00:12:36.056 --> 00:12:38.692 
這意味着你確實

00:12:38.759 --> 00:12:42.896 
可以長期利用回收的空間

00:12:42.963 --> 00:12:45.332 
處理之前因爲容量問題

00:12:45.399 --> 00:12:46.733 
而不能安裝的應用

00:12:46.800 --> 00:12:48.869 
這不是說你又得佔據大量的容量 

00:12:48.936 --> 00:12:51.805 
相反的 這意味着當你面臨容量不夠

00:12:51.872 --> 00:12:55.709 
而又想放
更多的東西進app時可以更自由

00:12:57.878 --> 00:13:02.549 
現在 我想請我的同事帕特里克·海寧

00:13:02.616 --> 00:13:04.484 
來告訴你們具體如何做到這一點

00:13:07.721 --> 00:13:08.555 
謝謝你 安德斯

00:13:11.758 --> 00:13:12.793 
我是帕特里克·海寧

00:13:12.860 --> 00:13:15.095 
我想談論一些關於
資源切割的更多一些細節

00:13:16.697 --> 00:13:18.632 
它的工作原理是什麼呢

00:13:20.601 --> 00:13:22.202 
好吧 非常高興告訴大家

00:13:22.269 --> 00:13:24.505 
資源切割和App簡化已經無縫

00:13:24.571 --> 00:13:27.641 
整合到Xcode的開發
 輸出和工作流之中了

00:13:27.708 --> 00:13:29.142 
也許你們已經很熟悉

00:13:29.209 --> 00:13:30.644 
如何開發應用

00:13:32.079 --> 00:13:35.916 
這一切的改善

00:13:35.983 --> 00:13:38.352 
可以讓你真正
實現資源切割和App簡化的關鍵在於

00:13:38.418 --> 00:13:44.024 
我們爲產品開發和資源目錄
設立工作流 

00:13:44.391 --> 00:13:49.296 
並同時考慮了
各種不同設備和變量從而方便開發應用

00:13:51.231 --> 00:13:53.500 
那麼你需要做的是什麼呢

00:13:54.701 --> 00:13:59.506 
如果你已經習慣使用
iOS的app 亦或者

00:14:00.707 --> 00:14:04.945 
習慣開發iOS應用

00:14:05.012 --> 00:14:07.214 
那麼你們
會使用1X 2X 3X原圖 

00:14:07.281 --> 00:14:11.285 
適應各類尺寸的屏幕 

00:14:11.818 --> 00:14:13.687 
甚至可能早就在使用

00:14:13.754 --> 00:14:17.090 
iOS 7的資源目錄了

00:14:18.892 --> 00:14:20.327 
這一些確實也是你必須要有的

00:14:20.894 --> 00:14:24.431 
什麼是資源目錄 它們有什麼作用呢

00:14:25.265 --> 00:14:26.967 
資源目錄就是根據

00:14:27.034 --> 00:14:29.169 
資源的相關設備特徵

00:14:29.236 --> 00:14:31.405 
進行資源組織的功能

00:14:31.505 --> 00:14:33.507 
因此非常重要且具有針對性

00:14:35.008 --> 00:14:36.577 
這裏需要重點強調一下

00:14:37.211 --> 00:14:39.146 
爲了能利用應用簡化功能

00:14:39.379 --> 00:14:42.816 
你的資源必須處於資源目錄內才行

00:14:43.250 --> 00:14:45.185 
我們無法處理鬆散資源

00:14:45.886 --> 00:14:50.257 
這不能限制這項強大功能

00:14:50.324 --> 00:14:51.592 
以後我們會進行改善

00:14:51.959 --> 00:14:53.026 
需要重點說明

00:14:54.895 --> 00:14:56.597 
所以我剛剛提到了設備特徵

00:14:56.897 --> 00:15:00.767 
因爲在資源目錄內

00:15:00.834 --> 00:15:03.837 
資源可以用設備關鍵組特徵進行優化

00:15:04.204 --> 00:15:06.306 
這包括你很熟悉的

00:15:06.373 --> 00:15:11.111 
屏幕分辨率
 2X 3X和其他系列設備

00:15:11.478 --> 00:15:15.816 
不管它是ipad還是 iPhone

00:15:18.285 --> 00:15:23.457 
更新
Xcode 7的iOS 9系統後 

00:15:23.790 --> 00:15:25.192 
我們在設備硬件特徵的基礎上

00:15:25.259 --> 00:15:26.727 
開發了一組設備特性

00:15:27.327 --> 00:15:30.998 
尤其是圖片處理能力和內存級別

00:15:31.765 --> 00:15:34.201 
這確實引起了兩個需求

00:15:34.268 --> 00:15:38.005 
第一 我們可使用的一系列設備

00:15:38.071 --> 00:15:39.540 
性能特點更多強大

00:15:39.606 --> 00:15:41.475 
從最低終端到最高終端設備各有不同

00:15:41.542 --> 00:15:45.579 
單一的資源並不適用於

00:15:45.779 --> 00:15:48.015 
所有類別的設備

00:15:48.315 --> 00:15:52.686 
對於最終的使用體驗
會是怎樣真的很難達成一致

00:15:53.153 --> 00:15:57.658 
這對高端和低端的內存級別都是一樣的

00:15:57.858 --> 00:16:02.763 
新的設備特性使你能
給不同的功能制定相應的資源

00:16:04.831 --> 00:16:08.235 
資源目錄裏又有哪些內容呢 

00:16:10.571 --> 00:16:13.373 
好吧 目前爲止 

00:16:13.440 --> 00:16:15.776 
在我們所推出的資源目錄中 
最熱門的是image

00:16:16.977 --> 00:16:21.715 
這主要是你應用裏的原圖資源

00:16:22.282 --> 00:16:26.353 
特別是位圖資源和載體類型

00:16:26.420 --> 00:16:30.490 
你的圖片可以是
png jpg或者pdf的格式

00:16:30.557 --> 00:16:33.794 
這些會先壓縮以節省空間

00:16:33.861 --> 00:16:36.964 
編譯成最佳的傳送格式

00:16:37.030 --> 00:16:42.569 
然後通過
UI工具包的API傳送到你應用 

00:16:46.373 --> 00:16:50.477 
iOS 9和Xcode7更新後有了

00:16:51.111 --> 00:16:53.080 
新的的數據類別

00:16:53.614 --> 00:16:54.882 
至少一個新的數據類別

00:16:55.549 --> 00:16:56.817 
那就是Name數據

00:16:57.751 --> 00:16:58.785 
這是用來做什麼的呢

00:16:59.453 --> 00:17:03.390 
Name數據讓你可以
隨心所欲的儲存文件內容

00:17:04.625 --> 00:17:06.660 
現在 可能你們會擔心的事情是 

00:17:06.727 --> 00:17:08.362 
我們只是根據內容

00:17:08.428 --> 00:17:10.830 
對資源目錄進行簡化 

00:17:10.897 --> 00:17:14.601 
你們會問
如果我嘗試簡化非Image類的資源

00:17:14.667 --> 00:17:16.203 
這正是Name數據的作用所在

00:17:16.270 --> 00:17:20.440 
Name數據讓你可以
在資源目錄中隨意放入文件

00:17:20.507 --> 00:17:23.310 
並根據硬件水平進行分類

00:17:23.377 --> 00:17:25.244 
正如我之前提到的

00:17:27.247 --> 00:17:30.584 
然後 在運行時 
可以使用OS X系統UI工具包

00:17:30.651 --> 00:17:35.722 
新的NSDataAsset
類別在app內進行內容檢索

00:17:37.224 --> 00:17:39.092 
側邊欄在這裏

00:17:39.393 --> 00:17:42.796 
資源目錄的特徵 

00:17:42.863 --> 00:17:46.800 
正如我描述的Name數據和其他特點

00:17:46.867 --> 00:17:48.368 
在OS X系統中也有

00:17:48.435 --> 00:17:50.637 
我們不會在OS X系統中

00:17:50.704 --> 00:17:53.807 
進行應用簡化
但是在目錄裏儲存資源製品格式可以

00:17:53.874 --> 00:17:55.876 
用於從所有目標上獲取資源 

00:17:55.943 --> 00:17:58.345 
包括OS X系統和Watch

00:17:58.412 --> 00:18:00.347 
所有這些功能都能起作用

00:18:00.414 --> 00:18:01.615 
API在所有平臺均可使用

00:18:01.949 --> 00:18:04.084 
簡化只適用於iOS系統

00:18:04.651 --> 00:18:05.619 
側邊欄結束

00:18:07.254 --> 00:18:10.791 
在Xcode 7 和iSO 9
系統我們引入了另一種新的數據類型 

00:18:10.858 --> 00:18:14.761 
就是Sprite地圖集

00:18:15.429 --> 00:18:21.802 
這意味資源目錄
和SpriteKit已經實現整合

00:18:23.604 --> 00:18:26.373 
讓你們可以使用一般的方式
可以讓你分組圖像資源

00:18:26.440 --> 00:18:28.408 
以一種普通的方式在資源目錄內組織 

00:18:28.475 --> 00:18:30.444 
並重命名爲Sprite地圖集 

00:18:30.511 --> 00:18:32.412 
另外可以在創建時候

00:18:32.579 --> 00:18:36.884 
自動創建紋理地圖集

00:18:36.950 --> 00:18:42.256 
從而在圖像資源裏
檢索SK紋理地圖集類型

00:18:42.890 --> 00:18:44.458 
一項關鍵功能是 

00:18:44.758 --> 00:18:49.696 
如果你已經在iPhone
iPad上完成常規組織 

00:18:50.063 --> 00:18:54.401 
那麼它將自動創建

00:18:54.535 --> 00:18:57.971 
編譯好的紋理地圖集的簡化版本 

00:18:58.105 --> 00:19:01.675 
然後作爲簡化資源 

00:19:01.775 --> 00:19:05.979 
與AppStore上和我稍後會談到
的其他工作流簡化的版本一致

00:19:07.948 --> 00:19:11.118 
那麼我們如何
從資源目錄中進行app簡化呢 

00:19:12.553 --> 00:19:14.922 
好的 這實在很簡單
也許大家已經猜到了 

00:19:15.222 --> 00:19:18.225 
每個資源目錄中的資源都有標記 

00:19:18.525 --> 00:19:23.263 
用於描述資源相關特徵
以及有用的特徵

00:19:24.865 --> 00:19:28.268 
在創建之時當我們建立流程後

00:19:28.702 --> 00:19:31.004 
這些特徵會在資源

00:19:31.071 --> 00:19:32.806 
和相關簡化app變體之間建立路徑

00:19:34.107 --> 00:19:37.678 
就是這麼簡單
我想要在這裏重點說明一下

00:19:38.679 --> 00:19:41.081 
資源目錄已經存在好一會兒了

00:19:41.148 --> 00:19:43.417 
它們可以讓你能夠在運行的時候

00:19:43.483 --> 00:19:45.986 
選擇適合請求該資源的

00:19:46.353 --> 00:19:48.088 
設備的正確資源

00:19:48.155 --> 00:19:51.625 
在簡化app變體路徑方面

00:19:51.725 --> 00:19:55.195 
也是基於同樣的算法
和一樣的選擇標準

00:19:55.529 --> 00:19:58.699 
如果你的
app今天在不同設備上工作正常 

00:19:58.765 --> 00:20:01.435 
那麼app簡化也同樣工作正常 

00:20:01.735 --> 00:20:04.238 
因爲它們使用同一個原理

00:20:06.707 --> 00:20:11.478 
好了我之前提到單詞組織 

00:20:12.112 --> 00:20:13.780 
我想要再強調一下

00:20:14.114 --> 00:20:18.252 
有效對
資源目錄進行歸類絕對是關鍵所在

00:20:18.952 --> 00:20:19.820 
爲什麼呢？ 

00:20:19.987 --> 00:20:23.056 
因爲對資源進行

00:20:23.323 --> 00:20:27.494 
大規模標註意味着
程序片變體中的冗餘數據就越少

00:20:28.128 --> 00:20:32.699 
你不會
獲取app變體產生的額外數據 

00:20:32.866 --> 00:20:35.802 
而這些數據在目標設備上運行時

00:20:35.869 --> 00:20:38.105 
是不會使用到的

00:20:39.373 --> 00:20:43.377 
例如 即使應用之前可以正常工作 

00:20:43.443 --> 00:20:48.248 
但是如果只是在一臺設備上使用那麼就
沒有必要保留通用資源了 

00:20:48.315 --> 00:20:53.120 
考慮一下比如你的iPad上的應用有
自己的UI彈出按鈕

00:20:53.187 --> 00:20:54.755 
是在iPhone上的應用

00:20:54.821 --> 00:20:59.393 
卻不會在你的iphone上顯示出來

00:20:59.459 --> 00:21:02.863 
通用資源的話可以使用可以顯示正常

00:21:02.930 --> 00:21:07.034 
但是
現在我們可以重新訪問並進行歸類 

00:21:07.100 --> 00:21:09.970 
這樣就無需
傳送到iPhone版本的應用上 

00:21:10.470 --> 00:21:15.108 
因爲在那裏沒法顯示
好的

00:21:16.143 --> 00:21:17.644 
以上是基礎的知識

00:21:17.711 --> 00:21:19.980 
關於該系統工作的原理

00:21:20.047 --> 00:21:23.784 
我們來舉個例子 
說說具體的工作流程

00:21:23.884 --> 00:21:25.085 
以及如何產生影響的

00:21:27.154 --> 00:21:28.622 
首先說說創建

00:21:28.689 --> 00:21:30.257 
你是如何創建資源目錄的

00:21:30.891 --> 00:21:34.361 
創建資源目錄內容的首要方法是

00:21:34.428 --> 00:21:36.496 
通過Xcode上的資源目錄編輯器

00:21:38.131 --> 00:21:41.401 
在IDE上使用用戶界面很簡單

00:21:41.468 --> 00:21:43.570 
或許你對此很熟悉了

00:21:44.104 --> 00:21:48.408 
創建一個新資源

00:21:48.475 --> 00:21:50.811 
只需增加一個新項目

00:21:51.879 --> 00:21:53.647 
你可以看到這裏有個值域

00:21:53.714 --> 00:21:56.717 
這裏 你可以看到數據集 
圖像集 Sprite地圖集

00:21:56.783 --> 00:21:59.353 
以及其他平臺的其他數據類型

00:22:01.622 --> 00:22:03.490 
當你將這增加到項目中時

00:22:03.557 --> 00:22:06.093 
你可以看到在左邊
有一個組織數組和範圍

00:22:06.159 --> 00:22:08.695 
顯示的是設備特徵
你可根據這些特徵進行分類

00:22:08.762 --> 00:22:14.201 
並顯示你想要的資料豐富性

00:22:14.768 --> 00:22:18.238 
將資源放到合適的源中

00:22:18.639 --> 00:22:20.974 
然後離開 前往種類完成了

00:22:23.277 --> 00:22:25.212 
好極了 用起來很簡單

00:22:26.046 --> 00:22:30.284 
倘若你的團隊無法在資源
產品裏使用Xcode將會怎麼樣

00:22:31.652 --> 00:22:33.754 
倘若這是個遊戲工作室

00:22:33.820 --> 00:22:36.990 
在現有資源工具鏈和管道上投資巨大

00:22:37.057 --> 00:22:40.694 
但對於創造出合適原圖的

00:22:40.827 --> 00:22:43.397 
內容工程師或設計者來說
現有的資源工具鏈和管道

00:22:43.463 --> 00:22:45.866 
並不適合使用Xcode這將會怎樣

00:22:46.800 --> 00:22:50.337 
很高興的告訴你們我們考慮到這種情況

00:22:50.671 --> 00:22:53.740 
我們仔細地設計了資源目錄特徵

00:22:53.807 --> 00:22:56.610 
與簡化相配使之適用於這些情況

00:22:58.045 --> 00:23:00.314 
我們特別地將它設計成

00:23:00.380 --> 00:23:04.151 
很容易從現有資源管道

00:23:04.218 --> 00:23:05.786 
導出圖像集和數據集

00:23:06.787 --> 00:23:07.988 
如何做到這點呢

00:23:09.723 --> 00:23:13.193 
我們將通過
XC資源來源工件格式進行講解

00:23:13.493 --> 00:23:17.698 
我很高興的告訴大家
我們將進行文件編制和發行

00:23:18.098 --> 00:23:21.034 
使得外部工具鏈

00:23:21.101 --> 00:23:22.903 
可以很容易的執行這個格式

00:23:24.638 --> 00:23:28.575 
這算不上什麼格式

00:23:28.642 --> 00:23:31.745 
因爲它只是JSON標記上一個簡單的
文件夾結構而且很容易配合使用

00:23:32.246 --> 00:23:33.814 
我想要強調的是

00:23:34.314 --> 00:23:39.853 
這並不是下面提到的這種格式
先創建 然後導入Xcode中

00:23:39.920 --> 00:23:42.055 
然後就變成了一個項目工件

00:23:42.456 --> 00:23:44.992 
這是源工件格式

00:23:45.058 --> 00:23:47.194 
在創建時 

00:23:47.594 --> 00:23:49.396 
Xcode創建系統就開始用來

00:23:49.463 --> 00:23:51.532 
處理和產生最後執行成品

00:23:53.500 --> 00:23:56.470 
我們來看看它的細節信息

00:23:56.904 --> 00:24:02.009 
來看看先前說過的
例子AirPlay圖像原圖

00:24:02.276 --> 00:24:03.944 
在磁盤中看起來是這樣的

00:24:04.011 --> 00:24:05.145 
事實上 這就是格式

00:24:05.812 --> 00:24:06.780 
非常簡單

00:24:06.980 --> 00:24:09.550 
它所包含的是一個文件夾命名約定

00:24:09.616 --> 00:24:10.984 
包含資源的名字

00:24:11.051 --> 00:24:13.654 
這是使用UI圖像名稱在代碼中

00:24:13.720 --> 00:24:15.589 
重新得到的名字

00:24:16.490 --> 00:24:19.159 
隨後文件夾裏包含了單獨原圖源

00:24:19.593 --> 00:24:24.932 
我想指出的是
儘管在這個特別例子中

00:24:24.998 --> 00:24:28.435 
用了一個衆所周知半標準文件命名約定

00:24:28.502 --> 00:24:30.771 
來顯示比例係數和設備習語

00:24:30.938 --> 00:24:32.739 
但它並不需要

00:24:32.806 --> 00:24:34.675 
任何特別的文件命名約定

00:24:34.741 --> 00:24:36.944 
你可以使用任何工作流程

00:24:37.010 --> 00:24:38.679 
或工具鏈或任何你所喜歡的方法

00:24:39.346 --> 00:24:40.347 
爲什麼可以做到這樣

00:24:40.547 --> 00:24:42.950 
因爲在這個設計中

00:24:43.016 --> 00:24:45.452 
有重要的第三元素
即contents.JSON文件

00:24:46.920 --> 00:24:49.022 
contents.JSON文件

00:24:49.256 --> 00:24:52.593 
包含所有資源標記信息

00:24:52.659 --> 00:24:54.228 
並將信息連接在一起

00:24:54.294 --> 00:24:55.796 
並告訴系統

00:24:55.863 --> 00:24:59.533 
與特別資源有關的特性

00:25:00.200 --> 00:25:02.369 
來看看

00:25:02.903 --> 00:25:07.574 
先前在Xcode編輯器上顯示的
AirPlay圖標

00:25:07.641 --> 00:25:09.309 
現在看起來是這樣子的

00:25:09.476 --> 00:25:11.378 
你可以看到 它非常的簡單明瞭

00:25:12.045 --> 00:25:16.416 
這只是單獨圖像中的一個數組你可以看
到單獨文件名稱

00:25:16.483 --> 00:25:20.854 
然後是設備習語和比例係數標記信息

00:25:21.355 --> 00:25:24.691 
這些屬性你看到的這些關鍵數值組

00:25:24.758 --> 00:25:26.693 
就是將被記錄在

00:25:26.760 --> 00:25:28.295 
SES源工件格式中的東西

00:25:30.464 --> 00:25:34.968 
舉個高一級的例子 名字數據

00:25:35.102 --> 00:25:38.705 
我們叫它數據集
不出所料 看起來很相似

00:25:38.772 --> 00:25:41.308 
再一次 裏面有單獨源的文件名

00:25:41.375 --> 00:25:44.411 
然後是通用型標識符

00:25:44.678 --> 00:25:47.614 
和存儲器的屬性

00:25:47.781 --> 00:25:48.815 
或顯卡未來集類

00:25:50.284 --> 00:25:52.452 
你可看到 它真的很好配合使用

00:25:52.519 --> 00:25:54.454 
你可以看到它是如何操作的

00:25:54.521 --> 00:25:57.224 
如何命名文件名和屬性

00:25:57.291 --> 00:26:00.227 
這也是爲什麼不管你在

00:26:00.294 --> 00:26:03.463 
數據集和圖像集加入什麼名字沒有關係

00:26:03.530 --> 00:26:05.999 
重要的是
contents.JSON是正確的

00:26:08.836 --> 00:26:10.637 
你可以用它來做什麼呢

00:26:10.704 --> 00:26:12.439 
這是用來做什麼的呢

00:26:13.140 --> 00:26:16.043 
我來舉個例子

00:26:16.109 --> 00:26:18.679 
假設有用Xcode創建的圖像集

00:26:19.046 --> 00:26:20.514 
我將展示的這個假設工作流程

00:26:20.581 --> 00:26:23.650 
是在PhotoShop中
使用PhotoShop CC生成器

00:26:26.587 --> 00:26:29.556 
假設你的設計者創建了漂亮的原圖

00:26:29.623 --> 00:26:32.826 
他們決定今天iPad是藍色的

00:26:32.893 --> 00:26:33.961 
iPhone是紅色的

00:26:34.027 --> 00:26:35.362 
這只是我們工作的方法

00:26:35.829 --> 00:26:36.964 
設計者有時會這麼做

00:26:39.366 --> 00:26:41.468 
他們有漂亮的主文件

00:26:42.069 --> 00:26:44.471 
並在這裏陳列所有這些變體

00:26:44.538 --> 00:26:47.274 
事實上 

00:26:47.341 --> 00:26:49.343 
他們用生成器工作流程
創建了主文件

00:26:49.409 --> 00:26:51.245 
打開圖像資源生成

00:26:51.512 --> 00:26:53.981 
由合適的命名約定

00:26:54.047 --> 00:26:57.684 
構造他們的層級清單

00:26:57.951 --> 00:27:00.354 
默認層級直接導出到一個圖像集

00:27:00.988 --> 00:27:04.391 
有一個生成器的特別版本

00:27:04.958 --> 00:27:08.428 
他們小心地進行擴展

00:27:08.495 --> 00:27:12.699 
這是產生
contents.JSON假想事例

00:27:12.966 --> 00:27:15.269 
這就是將從
PhotoShop工作流程中輸出的

00:27:15.569 --> 00:27:17.738 
對於以前使用過生成器的人來說

00:27:17.871 --> 00:27:20.707 
他們很熟悉照片佈局了

00:27:20.774 --> 00:27:21.842 
這是資源文件夾

00:27:22.009 --> 00:27:24.745 
裏面有生成的圖像集 

00:27:24.811 --> 00:27:29.716 
所有不同的原圖實體
和contents.JSON

00:27:30.450 --> 00:27:33.921 
我們要做的僅是拖出圖像集

00:27:33.987 --> 00:27:35.989 
並將圖像集放到
XE資源文件夾下的文件夾中

00:27:36.056 --> 00:27:39.593 
之後就可以進入競態

00:27:43.330 --> 00:27:47.534 
就這樣簡單說來就是
帶Xcode項目的動態集成

00:27:49.469 --> 00:27:51.305 
唯一的要求是

00:27:51.371 --> 00:27:55.676 
從一個Xcode項目文件水平來說
你的項目必須有XE資源文件夾

00:27:55.742 --> 00:27:58.512 
這是唯一的要求

00:28:00.047 --> 00:28:01.982 
裏面的所有內容

00:28:02.549 --> 00:28:06.019 
都必須有一個任意層級 任意結構

00:28:06.520 --> 00:28:09.022 
它必須符合圖像集和數據集

00:28:09.089 --> 00:28:13.694 
你可以按照任意深度進行嵌套

00:28:14.261 --> 00:28:16.864 
你可以使用
受它支配的自己的文件系統組織

00:28:17.064 --> 00:28:19.166 
假設你正確授權圖像集和數據集

00:28:19.366 --> 00:28:23.103 
在創建時Xcode將遞歸地下降層級

00:28:23.203 --> 00:28:28.408 
發現所有圖像集 數據集
和傳播地圖集並自動進行創建 

00:28:31.044 --> 00:28:34.581 
現在你知道怎麼創建資源目錄了

00:28:35.115 --> 00:28:37.451 
現在進入下一步 創建

00:28:39.253 --> 00:28:42.456 
或許最普通最重要的創建工作流程是

00:28:42.789 --> 00:28:45.259 
坐在座位上
在Tether設備的app上作

00:28:45.592 --> 00:28:49.630 
或者你在模擬器上操作

00:28:49.696 --> 00:28:51.765 
此種情況下如何簡化應用呢

00:28:51.832 --> 00:28:53.534 
很高興的告訴你

00:28:53.600 --> 00:28:56.637 
創建和運行工作流程

00:28:56.703 --> 00:29:00.541 
可自動地爲現有有效運作目標簡化資源

00:29:01.074 --> 00:29:02.109 
在Xcode中

00:29:02.910 --> 00:29:05.312 
意思是說 每次進行創建

00:29:05.712 --> 00:29:07.681 
事實上它僅會對

00:29:07.748 --> 00:29:10.617 
你正在使用的目標設備分析

00:29:10.684 --> 00:29:15.989 
產生並自動創建適當的執行資源目錄

00:29:17.424 --> 00:29:21.461 
所有的模擬器和設備均支持這功能

00:29:22.930 --> 00:29:25.566 
這是利用應用簡化

00:29:25.632 --> 00:29:28.335 
絕佳的範例

00:29:29.736 --> 00:29:31.171 
這個功能是

00:29:31.238 --> 00:29:33.674 
由已經在目標編輯器資源目錄顯示的

00:29:33.740 --> 00:29:37.978 
新創建設置激發或控制的

00:29:38.145 --> 00:29:40.447 
僅在有效資源下啓用創建

00:29:41.982 --> 00:29:43.650 
這很方便

00:29:43.717 --> 00:29:46.386 
倘若 你試着解決

00:29:46.453 --> 00:29:48.255 
一個由應用簡化引起的問題將會怎麼樣

00:29:48.322 --> 00:29:50.591 
倘若簡化全面影響了
特定的目標設備情況會怎麼樣

00:29:50.657 --> 00:29:54.862 
爲此 你可以不斷撥動開關

00:29:57.631 --> 00:29:59.833 
此創建工作流程的其他優勢是

00:29:59.900 --> 00:30:03.070 
極大的加快重複編譯

00:30:03.136 --> 00:30:04.238 
或增量編譯

00:30:04.304 --> 00:30:06.673 
在應用內容繁多的時候尤其適用

00:30:07.007 --> 00:30:12.346 
它只處理並
只與當下適合目標的源進行匹配

00:30:12.412 --> 00:30:16.250 
當它創建一個應用的
普通版本時

00:30:16.316 --> 00:30:19.520 
並不需要像以前一樣每一個都需做完

00:30:20.888 --> 00:30:22.256 
另一個重要優勢是

00:30:22.322 --> 00:30:25.626 
對於一個特別設備或一組設備

00:30:25.692 --> 00:30:28.862 
可以很容易測試

00:30:29.263 --> 00:30:30.697 
若你想要理解

00:30:30.764 --> 00:30:34.334 
目錄變動對簡化輸出的影響

00:30:34.401 --> 00:30:37.004 
整體創建應用的大小或
用戶體驗的其他方面的影響

00:30:37.237 --> 00:30:40.407 
你可以迅速變動這些目錄創建並運行 

00:30:40.641 --> 00:30:44.811 
隨後通過在其他設備
和Xcode中運行目標間進行轉化

00:30:44.878 --> 00:30:49.550 
來檢查其他設備
可以極其快速簡單地測試這些變動

00:30:53.220 --> 00:30:56.590 
創建就講到這裏 接下來是什麼呢

00:30:56.657 --> 00:30:58.325 
傳播

00:30:58.392 --> 00:31:03.297 
這是簡化應用的基本步驟

00:31:05.699 --> 00:31:08.468 
現在 有很多方法

00:31:08.535 --> 00:31:10.337 
可用來傳播你的iOS應用

00:31:11.171 --> 00:31:13.307 
使你能夠傳播你的iOS應用

00:31:13.373 --> 00:31:15.542 
最大且最有效的一個 

00:31:15.609 --> 00:31:18.245 
當然是你的終端用戶 顧客

00:31:18.312 --> 00:31:21.114 
通過AppStore
購買正在使用的用戶這是最核心的 

00:31:21.181 --> 00:31:25.719 
安德斯提到
這是你提供普通IPA的地方

00:31:26.320 --> 00:31:27.888 
商店做了這個工作

00:31:27.955 --> 00:31:30.023 
處理了所有簡化變體

00:31:30.090 --> 00:31:32.226 
當用戶購買app時

00:31:32.292 --> 00:31:35.662 
它將從商店裏自動選擇適合設備的變體

00:31:35.729 --> 00:31:38.065 
下載並進行安裝完成了 完全自動的

00:31:38.265 --> 00:31:39.233 
不需要操心什麼

00:31:39.733 --> 00:31:42.202 
在發佈應用前

00:31:42.536 --> 00:31:47.875 
你或許也想爲beta C
測試者創造完全相同的體驗

00:31:48.242 --> 00:31:53.413 
也可通過TestFlight支持測
試傳播我們將通過簡化傳播

00:31:56.016 --> 00:31:58.652 
然後 當然有ad hoc和企業傳播

00:31:58.719 --> 00:32:01.788 
這是個常用方法
可用來在你的組織中傳播應用

00:32:01.855 --> 00:32:04.725 
或在你的組中進行QA測試其他事情

00:32:05.692 --> 00:32:08.695 
這是傳播極其重要的一種方法

00:32:08.762 --> 00:32:12.499 
我們也在其中創建了簡化支持

00:32:12.566 --> 00:32:16.003 
最後 還有已經更新的Xcode服務

00:32:16.637 --> 00:32:19.006 
和Ecos服務器

00:32:19.072 --> 00:32:21.675 
用來支持傳播簡化應用

00:32:22.042 --> 00:32:23.510 
隨後 我會講到更多細節

00:32:24.545 --> 00:32:30.017 
上述方法的自動化程度非常高

00:32:30.083 --> 00:32:31.885 
你無需做太多事情

00:32:32.252 --> 00:32:35.589 
等下要我要講的是

00:32:35.656 --> 00:32:37.491 
Ad hoc企業解決方案

00:32:37.558 --> 00:32:40.894 
這裏 你需要自己託管傳播流程

00:32:40.961 --> 00:32:44.998 
你可能需要理解
他們是如何放到一起如何運作的

00:32:45.432 --> 00:32:47.134 
我們現在就來說這個它們是如何運作的

00:32:48.836 --> 00:32:52.039 
Xcode中已增加的一個功能是

00:32:52.206 --> 00:32:54.875 
現在 對於特別設備

00:32:54.942 --> 00:32:56.343 
你可以從組織器中導出

00:32:56.610 --> 00:33:00.480 
若你將測試一個創建或要將創建切換到

00:33:00.547 --> 00:33:02.149 
制定設備 非常管用

00:33:02.216 --> 00:33:05.052 
你可立即創建一個IPA

00:33:05.118 --> 00:33:07.521 
用於直接指向到特定設備和爲特定設備
提供的組織器

00:33:10.991 --> 00:33:15.162 
未來 我們將爲你提供一種方法

00:33:15.229 --> 00:33:19.166 
可在所有的兼容設備上

00:33:19.233 --> 00:33:22.936 
導出所有簡化變體

00:33:23.003 --> 00:33:25.839 
爲應用的所有
可能支持設備提供完整的傳播單元

00:33:25.906 --> 00:33:27.174 
這很重要

00:33:27.241 --> 00:33:30.711 
你或許不知道或能夠爲

00:33:30.777 --> 00:33:33.013 
所有的設備生成所有的簡化變體

00:33:33.080 --> 00:33:35.549 
你想要獲得全組信息

00:33:37.384 --> 00:33:40.854 
事實上 它將做的是

00:33:40.921 --> 00:33:43.824 
處理你所有的普通app創建存檔

00:33:45.993 --> 00:33:49.596 
生成適合所有不同兼容設備的

00:33:49.663 --> 00:33:52.099 
所有簡化變體
並將它們放入一組產品中

00:33:54.234 --> 00:33:57.271 
現在 你有很多應用

00:33:58.038 --> 00:34:03.544 
你或許會問自己 何才能爲設備

00:34:03.610 --> 00:34:06.446 
獲取一個正確的應用 是個大問題

00:34:06.713 --> 00:34:09.716 
將app發送到企業和adhoc設備

00:34:09.783 --> 00:34:11.185 
最常用的方法是

00:34:11.251 --> 00:34:12.452 
空中安裝

00:34:14.321 --> 00:34:16.723 
隨後我會講到這個
化配合使用並會講到如何與簡

00:34:16.790 --> 00:34:20.827 
第一步保存爲ad hoc或企業傳播

00:34:20.893 --> 00:34:25.899 
這很重要 包了傳播顯示選項

00:34:25.966 --> 00:34:28.768 
左下角的複選框

00:34:29.837 --> 00:34:30.904 
這是用來做什麼

00:34:32.206 --> 00:34:34.007 
它的作用是

00:34:34.074 --> 00:34:37.678 
當Xcode在生成IPA的導出集時

00:34:37.744 --> 00:34:40.681 
它將爲它所生成的每個app變體

00:34:40.746 --> 00:34:42.783 
生成一個含有URL的顯示清單

00:34:42.850 --> 00:34:44.585 
它將通過app變體的支持產品類型

00:34:45.351 --> 00:34:50.924 
更重要的是 將編插入索引
由不同產品門類區分支持

00:34:51.592 --> 00:34:52.693 
取決於那app的門類

00:34:53.927 --> 00:34:55.161 
影響在於

00:34:55.395 --> 00:35:00.767 
當設備試圖安裝app時

00:35:00.834 --> 00:35:03.036 
使用空中顯示PO清單

00:35:03.403 --> 00:35:06.139 
它將會過一遍清單爲設備 

00:35:06.373 --> 00:35:08.942 
產品類型找到合適的URL

00:35:09.276 --> 00:35:12.045 
並對其進行安裝 

00:35:12.346 --> 00:35:13.180 
這就是它的運作方式

00:35:13.247 --> 00:35:17.351 
概念上與簡化應用商店
實際所發生的相類似

00:35:17.718 --> 00:35:20.420 
但所有的這些移動塊

00:35:20.487 --> 00:35:25.125 
都是由你通過Xcode進行生成並在
Web服務器上進行託管

00:35:26.793 --> 00:35:28.962 
倘若更進一步將會怎麼樣

00:35:30.030 --> 00:35:33.367 
這就是
Xcode服務器持續集成服務所做的

00:35:36.637 --> 00:35:38.939 
Xcode服務器所做的是

00:35:39.006 --> 00:35:41.775 
爲創建代管和傳播簡化app

00:35:41.842 --> 00:35:43.577 
包括代管按需資源包

00:35:43.644 --> 00:35:45.012 
將我剛描述的原理

00:35:45.245 --> 00:35:48.582 
變成完整解決方案

00:35:51.318 --> 00:35:52.853 
非常簡單

00:35:53.187 --> 00:35:55.923 
Xcode服務器
你在Xcode中創建集成盒

00:35:55.989 --> 00:35:59.493 
與Xcode服務器展開配合使用

00:36:00.360 --> 00:36:03.497 
項目自動創建應用

00:36:03.564 --> 00:36:06.667 
生成變體生成顯示P清單

00:36:07.134 --> 00:36:09.636 
甚至在你在Xcode服務網站上

00:36:09.803 --> 00:36:13.473 
選定設備和選擇特別創建的地方

00:36:13.674 --> 00:36:16.410 
覆蓋web服務你所需做的

00:36:16.610 --> 00:36:18.245 
只是點擊安裝按鈕

00:36:18.445 --> 00:36:20.614 
以及我先前所描述的
對顯示P清單進行定位

00:36:20.681 --> 00:36:22.482 
牽引合適變量的所有原理

00:36:22.549 --> 00:36:25.719 
它是自動進行的

00:36:26.453 --> 00:36:30.324 
將設備指向Web服務並運行很簡單

00:36:30.557 --> 00:36:33.126 
我鼓勵你來看一看這個 尤其是

00:36:33.193 --> 00:36:35.195 
感受一下所有的一切是如何運作的

00:36:35.863 --> 00:36:39.166 
我鼓勵你看看

00:36:39.233 --> 00:36:43.337 
這個模式和你在進行託管可能用來創建
你自己的企業傳播工作流程

00:36:43.403 --> 00:36:48.242 
或ad hoc
傳播工作流程的模式是相同的

00:36:48.976 --> 00:36:51.044 
所有的這些你都可以自己創建

00:36:53.447 --> 00:36:56.850 
整合各功能的Xcode服務

00:36:56.917 --> 00:36:59.753 
是使用空中顯示的簡化app變體的

00:36:59.820 --> 00:37:02.623 
一種流線型的安裝方法

00:37:03.490 --> 00:37:07.127 
漂亮簡單的解決方案  一站式

00:37:09.663 --> 00:37:12.099 
好了 我們剛講的是

00:37:12.165 --> 00:37:14.868 
如何創建資源目錄從而進行app劃分

00:37:15.002 --> 00:37:16.703 
我們講了

00:37:17.204 --> 00:37:18.939 
它如何與你的創建工作流程相結合

00:37:19.106 --> 00:37:21.375 
我們也講了傳播的不同方法

00:37:21.441 --> 00:37:23.010 
app簡化如何與它們相互作用

00:37:23.911 --> 00:37:25.245 
現場交給安德斯

00:37:25.312 --> 00:37:27.114 
請安德斯爲我們做總結

00:37:31.985 --> 00:37:32.819 
謝謝你  帕特里克

00:37:35.322 --> 00:37:37.491 
好了 在這部分 我們看了 

00:37:37.558 --> 00:37:40.460 
app傳播工作流程是如何運作的

00:37:41.862 --> 00:37:44.164 
以及如何改進app簡化

00:37:46.099 --> 00:37:49.269 
你可以幫助它變得更加有效的方法

00:37:49.336 --> 00:37:55.409 
當你恰地標記資源和傳播特徵

00:37:56.510 --> 00:38:01.048 
對於你的工作流程來說
在測試及提交到App Store

00:38:01.815 --> 00:38:04.017 
這意味着什麼在這裏需要進行一些操作

00:38:04.518 --> 00:38:05.352 
你所應做的是

00:38:05.786 --> 00:38:08.522 
不斷開發資源的定製版本

00:38:08.589 --> 00:38:11.358 
太好了 爲你想開發出最好的app

00:38:11.425 --> 00:38:13.594 
並在所有的設備上運作良好

00:38:13.894 --> 00:38:15.095 
使用app簡化

00:38:15.162 --> 00:38:17.898 
現在稍微放寬了上傳大小限制

00:38:18.565 --> 00:38:22.135 
每個用戶將只獲得他們所需的

00:38:23.170 --> 00:38:25.506 
不斷開發資源的定製版本

00:38:26.240 --> 00:38:29.643 
使用資源目錄使你的資源系統化

00:38:29.710 --> 00:38:33.447 
正如帕特里克提到的 你可以
在其中放置數據和Sprite地圖集

00:38:33.514 --> 00:38:37.384 
且這些可根據設備進行改變

00:38:39.386 --> 00:38:42.356 
同樣地
使用Xcode測試你簡化app變體

00:38:42.789 --> 00:38:44.491 
這個現在變得很重要

00:38:44.558 --> 00:38:45.993 
因爲我們是

00:38:46.059 --> 00:38:47.628 
根據每個設備所需進行資源傳播的

00:38:48.161 --> 00:38:51.231 
正如帕特里克所提到的
你可通過使用Xcode目標做到這個

00:38:51.298 --> 00:38:56.737 
使用Xcode
服務器創建多樣的簡化變體

00:38:56.803 --> 00:38:59.006 
並在真實的設備上進行測試

00:39:01.675 --> 00:39:06.480 
充分利用按需資源 資源進行標記

00:39:06.547 --> 00:39:08.849 
使它們成爲按需加載

00:39:08.916 --> 00:39:11.118 
資源包的一部分

00:39:14.087 --> 00:39:18.692 
我將檢索數個地方以獲取更多信息

00:39:18.992 --> 00:39:21.094 
一是app簡化指南

00:39:21.161 --> 00:39:23.630 
app傳播指南中的章節

00:39:24.364 --> 00:39:27.434 
可在Apple的開發者網站上找到

00:39:27.601 --> 00:39:30.270 
另一個是資源目錄格式文件

00:39:30.337 --> 00:39:32.673 
這個將
會放到Apple的開發者網站上

00:39:35.008 --> 00:39:36.543 
我們有相關聯的會議

00:39:36.610 --> 00:39:37.845 
第一部分已經有了

00:39:37.911 --> 00:39:39.246 
你可以通過錄像進行了解

00:39:39.913 --> 00:39:42.716 
另一點是
SpriteKit有什麼新特性

00:39:42.783 --> 00:39:46.553 
這個在20分鐘後

00:39:47.187 --> 00:39:51.358 
會詳細討論

00:39:51.592 --> 00:39:53.393 
它側重於按需資源部分
今天4:30在太平洋大廈進行

00:39:53.460 --> 00:39:55.028 
我鼓勵你們參加這會議

00:39:55.429 --> 00:40:00.067 
明天1:30在Mission會議上

00:40:00.501 --> 00:40:02.836 
將詳細討論DemoBots

00:40:03.704 --> 00:40:04.938 
我們有許多實驗室

00:40:05.005 --> 00:40:07.908 
歡迎來我們的實驗室學習更多信息

00:40:07.975 --> 00:40:09.776 
繼續觀看WWDC的其他部分