改善全屏窗口體驗
嗨！
歡迎蒞臨《改善全屏窗口體驗》專題講座
我叫 Corbin Dunn是一名 AppKit 軟件工程師
今天我將與我的同事Taylor Kelly一起完成這個講座
就讓我們直入主題吧！
那麼我們今天要講些什麼呢?
首先我要講的是全屏幕
它將包括三個部分
我將討論全屏幕的採用
以及如何正確採用
我將談到標題欄附件視圖控制器
它們是什麼以及如何使用它們
然後我將講一下全屏幕平鋪 API
查看並利用一些大家已在
Mac OS 10.11中看到的新特性
Taylor將會上臺 並講一下
Split View控制器內的靈活佈局 自動佈局 堆疊視圖
並在最後講下關於集合視圖方面的內容
那麼 全屏幕
全屏幕的目的是什麼？
它是爲了讓您的用戶將注意力集中到某個單一任務上
您可以充分利用您的屏幕空間
其他一切都靠邊站
您要全神貫注於一個窗口
那麼我們爲何使其成爲一個系統特性呢？
我們使其成爲一個系統特性
因爲它一種非常一貫的用戶體驗
你進入全屏幕的方式
你退出全屏幕的方式都是一樣的
你在不同的位置之間導航定位的方式等等
那麼 什麼是“可全屏化的窗口”？
這裏有一個Safari窗口的例子
我肯定您知道只要點擊綠色按鈕
它就會把您帶入全屏狀態
一旦您進入全屏狀態您可以將鼠標移到窗口的上方
標題欄和工具欄將會向下展開
而你可以再次點擊綠色按鈕
它將把你帶回全屏狀態
那麼爲了採用全屏幕需要做些什麼呢？
希望大家已經對此有所瞭解
不過它是相當容易的
您將指定哪些窗口是您希望可以全屏化的
您將爲它增加一個菜單項
而且你很可能會做些額外的事情
你可能希望做的額外的事情
是自動隱藏您的工具欄修改您的內容
以便更充分地利用全屏幕帶來的空間
利用新的標題欄
輔助視圖控制器
而我將談一下如何以及爲何我要那麼做
當然 您希望進行很好的全屏平鋪操作
因此我將討論一些我們已有的API來實現那種效果
首先 有兩種類型的窗口
或者實現全屏化有兩種可選窗口
通常當一個窗口是全屏時
就不允許對其進行進一步操作了
而那樣的窗口也是我們所謂的“主窗口”
它是您的應用的
主文件窗口
它是您能夠使其全屏化的東西
然而還有另一種選擇如果你已經看到它的話
那就是“輔助窗口”通常你並不需要這個
它的目的是什麼？如果你在某個應用中有一個窗口
想要佔據另一個應用的全屏空間
它允許你那麼做
我不會討論這方面
而我鼓勵您查閱幾年前的AppKit  版本說明
瞭解關於它的一些細節
那麼您如何採用全屏窗口呢？
在Xcode和InterfaceBuilder中它非常簡單
您選擇您的窗口有一個FullScreen(全屏)部分
您將菜單項下拉
就有主窗口和輔窗口的選項
那麼您將很可能希望
在您作爲主窗口的全屏窗口上設置主窗口
當然您也可以用代碼實現,而在InterfaceBuilder選項下
它所做的不過是修改
window.collectionBehavior
而它將向窗口添加.FullScreenPrimary
或.FullScreenAuxiliary
以便讓那些選項進入窗口並讓窗口實現全屏化
一旦您進入全屏狀態您可能需要
做各種基於全屏幕的事情
而且您可以通過查看樣式蒙板進行檢查
就是當您的窗口進入全屏的時候
我們添加
NSFullScreenWindowMask
而且您可以在樣式蒙板中查看
您的窗口是否處於全屏狀態
並有可能做其他的事情
現在讓我們談下如何自動隱藏工具欄
通常如果您在窗口內有一個工具欄
它總是可見的就像這裏顯示出來的一樣
當您把鼠標移到窗口的上部
菜單欄會向下展開
標題欄的控制按鈕向下展開
從而露出了工具欄
有一個選項可以讓您將工具欄自動隱藏
所以當你進入全屏的時候其他什麼都看不到
而你可以最充分利用您的屏幕的空間
當您將鼠標向上移動到菜單欄的時候
工具欄會與菜單欄和標題欄一起
同時向下展開
這確實是很容易做的
有一個windowdelegate方法
Window.WillUseFullScreenPresentationOptions
再加上 proposedOptions
您選擇那些建議的選項並且增加AutoHideToolbar並將其返回
而工具欄將自動隱藏
因此是非常容易的
那麼然後是自定義動畫您可以創建全屏進入和退出
自定義動畫
我們有兩種delegate方法實現它
customWindowsToEnter
FullScreenForWindow
這種方法可以返回一系列的窗口來實現您的動畫
然後我們把您叫回來說 嗨！
開始您的自定義動畫進入全屏狀態吧
並請指定持續時間
關於這些操作我們需要注意的一點是
在 Mac OS 10.11 中通過我們進入全屏的方式
您可能不會讓這些參數得到調用
因此重要的一點是
不要依賴這些參數一直被調用並設置狀態
相反 有更好的方式實現過一會兒我將講到這些方式
好了 關於全屏幕以及如何正確採用就講這麼多
讓我們繼續往下進行
談一下標題欄輔助視圖控制器
那麼在我講標題欄輔助控制器之前
讓我們先看一下全屏幕窗口
而且我將對標題欄區域突出顯示以便於您覺察到它
那麼這就是全屏中的標題欄
在標題欄下面是工具欄
而在工具欄下面是我們所謂的“輔助視圖”
那麼您可以在窗口中的這個位置增加您自己的標題欄
輔助視圖控制器
好在窗口不是全屏狀態下
也能添加它們
那麼這就是在窗口不是全屏狀態下它們看上去的樣子
然後它們被自動地反覆管理
爲了理解這種模式的重要性
最好先理解我們爲什麼會用這種模式
那麼讓我們看下您的窗口
通常 在工具欄和標題欄下方的區域
是內容被替換的地方
您的內容就在它下面
但是從Mac OS X.10 開始
您可實際利用一個完整的內容區
它可以在標題欄和工具欄下面擴展
那麼您的標題欄
和工具欄將會在它後面自動爲您進行模糊化處理
而您可以在這個位置爲您的視圖
放置全屏輔助視圖控制器
那麼您怎樣才能實現那種全屏蒙板效果呢？
它真的是很容易的您只需在window.styleMask後面
加上NSFullSizeContentViewWindowMask
而那將讓您的內容在標題欄下以全尺寸顯示
用於使用標題欄輔助視圖控制器的實際API
這些控制器是NSViewController的
一個非常簡單的子類
因此所有的標準視圖控制器
將會與它互動決定如何加載它們
而它增加了兩個屬性一個是layoutAttribute
另一個是FullScreenMinHeight
過一會我將談到它們
但是讓我們看一下
標題欄輔助視圖控制器能爲您做的幾件事情
正如我以前所說的
它們將自動爲您模糊化處理它們後面的一切東西
您無須做任何特別的事情
它自動以某種視覺效果爲您呈現
那就是實際的模糊化處理
它們自動以全屏狀態顯示
因此當您的窗口進入全屏或退出全屏時
它們被放置在正確的位置
而且在某種程度上它的大小也是自動爲您管理的
而我們稍後將討論這個內容
那麼讓我們看一下第一個屬性layoutAttribute（佈局屬性）
那麼這裏就是佈局屬性當它被設置爲“.bottom”時
“.bottom”的意思是您的視圖
將被放在標題欄的下方
它的高度是您在NIB文件中爲該視圖實際指定的任何高度
或者是您以任何方式指定的高度
而寬度會隨着窗口大小的更改而自動變化
另一個選項是 “.right”
這是一個 Safari 的例子
他們在使用 “.right” 選項
以便當Safari窗口處於非全屏或全屏時
向Safari窗口添加 “+” 按鈕
寬度是視圖已經指定的任何寬度
而高度則是自動設定爲標題欄或工具欄的高度
Mac OS 10.11 的新特性還包括指定一個“.left”的能力
通過它 你可以把項目
放在窗口按鈕旁邊
所以您可以在這裏添加一個註冊按鈕
或者您希望向用戶展示的其他備註
而這就是X.11的另一個新特性
接下來我們有全屏幕最小高度
讓我們看一下那個屬性
那麼全屏幕最小高度是什麼意思呢？
這個屬性僅當您
已處於全屏狀態時才適用
而這就是您在全屏狀態下
能夠看見的最小高度
當您將鼠標移動到工具欄之上時
任何未被顯示的內容將被自動顯示
過一會兒我將向您展示那種情況的一些屏幕快照
工具欄的默認高度爲 0
那麼讓我們看一下它的意思是什麼
那麼 全屏幕最低高度爲 0
這裏是一個工具欄
那裏是一個輔助視圖控制器但它是隱藏的
因爲高度爲 0
如果高度不是 0
您在那裏將總是會看到您設定的任何值
用戶讓其顯示的方式是
當你把鼠標移到菜單欄上部時標題欄將被顯示
而您的全屏輔助視圖也將隨其自動顯示
那樣將把該部位突出顯示
如果您已經用過 NSToolbar您可能已經熟悉了
NSToolbar實現的全屏輔助視圖
而這個新的標題欄輔助視圖控制器取代了這個舊的 API
因此我們不鼓勵您再使用它
但是最小高度和最大高度屬性的工作原理
與標題欄輔助視圖控制器裏面的非常類似
那麼您如何實際添加它們呢?
我們在 NSWindow 上有四種方法
我們有一系列的標題欄輔助視圖控制器
您可以讀取窗口的附件
您可以添加它們
您可以將它們作爲特殊索引插入
而且您也可以將其作爲特殊索引刪除
但它確實是容易添加和刪除的
那麼這裏是您通常將要做的事情
您將調用Window.AddTitleBarAccessoryViewController
將您的輔助視圖控制器傳遞給它然後當您希望去掉它時
您將使用默認的NSViewController API
將其從父視圖控制器中移除父視圖控制器自動確定它的位置
並將其移除
關於標題欄輔助視圖控制器就講那麼多
讓我們談一下全屏幕平鋪
以及 Mac OS 10.11裏面的一些新特性
那麼全屏幕平鋪的目的是什麼？
它們仍然讓您或用戶的注意力
集中在某個單一任務上
但是它可能涉及到多個窗口
您必須利用屏幕的全部空間
那麼在這個屏幕快照上我們有Safari瀏覽器窗口
在邊上有提示信息讓我們同時關注幾個任務
那麼讓我們看一下當您實際處於這一狀態
並調整分割器大小的時候會發生些什麼
請注意 隨着我改變其大小Safari窗口達到了最小狀態
並且提醒欄也達到最小狀態
而且對於一個給定窗口不會讓它收縮得太厲害
因此它有一個可以達到的最小和最大狀態
那麼我將談一下如何實現
以及您需要做些什麼
但是讓我們先討論一下什麼樣的窗口
可以進行全屏幕平鋪
我們將明確允許任何窗口
進入全屏平鋪只要它的大小可調並且不是面板
那意味着你的窗口不必
一定是可全屏化的
但是它仍可以被添加並平鋪到
另一個可全屏化的窗口內
具體我們做些什麼
以及如何確定都會隨時間改變
因此您可能希望讓這個過程更明確
那麼讓我們假定您有一個可調整大小的窗口
它無法被放入平鋪窗口而你希望將它放入平鋪窗口
您可以在collection Behavior後
明確添加FullScreenAllowsTiling
使其能夠被放入平鋪窗口
類似地 您可能有一個窗口
您希望它永遠不被放入平鋪
那麼我們就規定...它可以被放入平鋪
但是您不希望它被放入平鋪
因此您可以讓FullScreenDisallowsTiling
來防止它被平鋪
此外 您可能有一個窗口您讓它全屏化
而且希望它總是獨立狀態您可以在那個窗口上設置
FullScreenDisallowsTiling
以防止任何其他窗口與它放在一起
那麼現在您瞭解瞭如何
讓一個窗口進入平鋪
讓我們談一下那個窗口的
最小和最大尺寸
通常 當您的窗口未處於全屏狀態時
您可以調整其大小並且自動受到
其最小和最大尺寸限制
而當你使用 AutoLayout 時那通常是由 AutoLayout
自動確定的
如果您沒有使用 AutoLayout
那麼窗口的最大和最小尺寸就發揮作用了
那些只是顯示的
您在窗口內設置的屬性
或者是內容的最小尺寸或者是內容的最大尺寸,
都取決於您使用的API
如果您選中一個窗口並準備將其全屏化
或者您準備全屏平鋪那些就是您
通常應該使用的API
但是那個規則也會有例外
而我們有更多的API來解決例外
首先讓我們談一下該規則的一個例外以及您將做些什麼
那麼這裏是可能是一個小的
計算器應用
它的尺寸是不可調整的
那麼這位開發者就可能說好吧 我們將讓它
放入平鋪
但是當它被放入平鋪的時候如這裏所示
現在那個計算器應用的高度比以前高了很多
即使它是不可調整大小的
因此它需要對其進行處理並做些特殊的事情
您可能還會在那裏加些額外視圖以便在其全屏平鋪時
向用戶顯示更多信息
因此您可以動態實現這種效果
而且您只是使用一些window delegate方法
WindowWillEnterFullScreen
而在這種特定情況下當我們進入全屏模式時
我們將取消一些視圖的隱藏狀態
更改一些約束優先級
當窗口處於全屏化時它們讓系統對窗口大小
實際進行調整
而當它退出全屏幕時它再將那些工作取消
重要的一點是知道你實際可能必須
使用這些 delegate 方法即使您的窗口
通常並不構成一個全屏幕主窗口
因此這可能是爲一個平鋪窗口調用
現在那些窗口在進入全屏狀態之前
它們的尺寸是尤其厚的
但是當它們處於全屏狀態時尺寸就不同了
當它將進入全屏狀態時您很可能
需要告訴系統那些尺寸
那麼我們有一個顯式API來實現
我們有一個minFullScreenContentSize
和一個maxFullScreenContentSize來實現
您需要及早設置這些參數因爲如果您
曾經嘗試 Mac OS 10.11您可能注意到當您點擊並
按住綠色按鈕不放的時候系統會爲您提供
尺寸符合可用空間的其他備選窗口供您選擇
因此 作爲開發者您需要及早設置這些最小值
以便讓系統能夠確定
適合該區域的潛在備選窗口
正如我以前所言通常您不需要使用這些設置
當您的窗口正好是通常的尺寸可調窗口的話
它們在很大程度上是自動的
那麼這就會導致一種兩難困境
如果您的窗口尺寸比如說是1200
而另外一個窗口窗口 B 的尺寸是 300
會發生什麼?
那麼系統將不會
讓這兩個窗口在一起
它們的minFullScreenContentSize值太大
而無法實現
那麼作爲開發者您需要做些什麼呢？
對於這方面我將請上我的同事Taylor Kelly
他將會討論如何通過靈活佈局
而解決那個問題
謝謝大家！
大家好！
在這下半個環節中我們將討論
如何讓您的佈局更靈活
尤其當它們處於新的SplitView中時可以被調整到多窄
在 Mac 平臺上我們有多種顯示尺寸
供您的應用在其上運行
而在全屏狀態下用戶能夠將其自身全部浸入
佔據整個顯示空間
在Split View下用戶現在可以讓另外一個窗口
進入這個環境從而營造一種更豐富的體驗
但是這要求兩個窗口靈活的
其尺寸大小可以調整
以防止出現衝突的情況
Corbin 早些時候也談到了這一點
這對於較小顯示尺寸如Retina MacBook
可能是尤其嚴格的
它的默認分辨率爲1280*800
表示在Split View中
當平均分割時每個窗口大約被分配638
每個窗口大約被分配638個點
如果您的應用的最小寬度
目前比這個大這些顯示尺寸的用戶
通常將不能將您的應用平鋪
因此我將談一下您可以使用的四種技巧
以確保您的窗口在全屏狀態下有令人滿意的表現
首先 是使用自動佈局和優先條件
其次是自動摺疊的新側欄行爲
然後是使用 NSStackView輕易地構建
您的界面的各個部分同時將靈活性內置其中
最後是更新過的NSCollectionView
它有了強大的佈局支持
那麼自動佈局是一個我們在OSX Lion和iOS 6中
推出的基於約束條件的佈局系統
它讓您聲明不同的UI 元素之間的關係
比如它們的間隔或者對齊
而它確實是強大的
窗口的視圖尺寸被動態調整
比如在進行本地化的時候
您可以在這些約束條件之間建立優先順序
讓級別高的優先於級別低的
對此我將不去過多討論細節
今天早些時候有兩個講座
《自動佈局的奧祕》的第一和第二部分
不管您在自動佈局方面是初次接觸還是已有接觸
它都有一些確實不錯的內容
相反 在這個 UI 例子中
我將重點關注優先順序
我們在中部有一個標籤它的左右兩側
都有固定按鈕
這些可能是您會用來創建那種效果的水平約束
僅僅使用這些約束的話如果視圖的尺寸動態調整
您最後可能會讓標籤和較寬的按鈕相互重疊
這是非常容易解決的
您可以在按鈕和標籤之間增加一個最小間隔約束
而現在當容器的尺寸調整時
它的尺寸只能調整到
它能同時滿足居中對齊和最小間隔的程度
這是一個完美的佈局除非這個視圖
能夠變得更緊湊
去掉較窄按鈕和標籤之間的	那些空白就太好了
回過來 我們可以讓這個居中對齊成爲可選條件
意思是它可以被更優先的約束條件打破
此外 我們將會在標籤和較窄按鈕之間
增加一個最小間隔以防在那一側出現重疊
這次 標籤儘可能居中
直到它觸及了最小間隔的填充
而如果我們繼續調整容器的大小我們可以打破居中條件
以便最大化地壓縮佈局
直到我們滿足兩側的最小填充
您可以僅僅通過設置優選順序屬性
來爲您的約束條件進行這樣的設置
而這也通過InterfaceBuilder暴露出來
默認情況下 需要滿足約束條件
就是說它們必須被滿足
但是任何低於那個的約束條件將成爲可選的
我們有些要點幫您決定您的約束條件
優先順序應該是什麼樣子
另外還有Default Low它是一個優先條件
通常您的約束條件弱於大多數其他約束軟件
還有DragThatCannotResizeWindow
它是一個特定的優先條件
在此條件下一個SplitView分割線會被拖動
如果您希望自己的約束條件
比這種行爲更加強大您應讓您的優先條件級別更高,
否則更低
您通常永遠不會設置跟這個完全一樣的優先條件
此外還有WindowsSizeStayPut
這個優先條件規定一個窗口維持當前的尺寸
最後是DragThatCanResizeWindow
在這個條件下一個窗口被拖拽
但是還有 Default High它是另外一個優先條件
在此條件下您的約束條件
通常高於多數其他條件
那麼這就是Auto Layout的優先條件
在此後的幾個部分內
我將回過頭來參考一下優先權的概念
但是接下來我想談一下NSSplitViewController
這是我們在Yosemite中推出的一個容器視圖控制器類
它讓您的子視圖控制器
被安排在 NSSplitView 內
並且暴露了NSSplitView 項目的概念
它概括了那些在SplitView中的子類的狀態
這些子類包括holdingpriority
Collapsed狀態而且它允許以一種真正簡單的方式獲得動態摺疊效果
去年的OSX Storyboard和控制器講座更多地討論了
這個特性以及其他視圖控制器特性
但是我想重點談一下OS 10.11中的新內容
首先是側邊欄的顯式概念
及其伴隨的特殊行爲
以及spring loading它是當一個項目
被在Split View中拖拽時可能發生的行爲
以及幾個新的度量指標
它們讓您在調整大小期間精確地聲明
Split View的行爲
我們看一個例子這裏是 Safari 中的側邊欄
隨着窗口尺寸的調整一旦它達到某個點
側邊欄將會自動摺疊
而如果它在全屏狀態被重新顯示
它將覆蓋其他窗口內容
這個過程是短暫的類似於彈出框
因此點擊其外側將使其自動消失
這真的是容易理解的
您只須在NSSplitViewItem上
使用sidebarWithViewController這一構造函數
或者在InterfaceBuilder中將行爲傳遞給側邊欄
這將返回給您一個split view項目
您可以把它添加到您的split view控制器上
而且它也伴隨一些特殊行爲比如 Yosemite 中將推出的
內置的半透明材質背景和醒目的分割線
您不必再加入您自己的視頻效果視圖
才能獲得這種效果
NSSplitViewItem將會爲您進行添加和管理
此外還有您剛纔看到的
autocollapse和autouncollapse行爲
通過它 覆蓋層將佔據整個屏幕
此外還有另外幾個默認屬性
以及側邊欄的標準值
因此您的側邊欄對系統的行爲正如其他要素一樣
伴隨它的還有一個split view方面的
新的行爲方法即 toggleSidebar
它將具有動畫效果地摺疊或
展開它包含的第一個側邊欄
通過這種方式 無須書寫一行代碼
您就可以關聯菜單項使其具有這種效果 或切換按鈕
另外一個確實很酷的行爲是spring loading
這是當用戶在您的splitview邊緣上存在摺疊窗格
並將一個項目向該邊緣拖拽時發生的行爲
我們將平移並讓側邊欄展開
讓它們與其互動在它們的動作完成之後讓側邊欄再次摺疊
您可通過將springLoaded設爲True來達到此效果
在您的split view項目中您將獲得此行爲效果
且對側邊欄和非側邊欄同樣適用
區別在於側邊欄將默認爲 True
我們認爲大多數的側邊欄將希望這種行爲
接下來我想談一下我們在NSSplitViewItem控制器上的
幾個新的度量指標
我將每次講兩個
首先是minimumThickness
和maximumThickness
這些與split view項目正在自我管理的
約束條件直接相關
它們描述了這個項目可以實際變得多大或多小
側邊欄將默認將這些值設爲標準值
但這的確是一個
您自己設置約束條件的非常方便的方式
HoldingPriority是OS 10.11中惟一的一個不是新的度量指標
它描述了split view 項目
維持其當前大小的一個優先權
在本例中側邊欄被默認設置爲
一個略高的值因此這意味着它們比其他項目
被調整尺寸的可能性更小
那麼作爲一個例子當它調整此窗口大小時
尺寸調整的全部權重都分配給了內容區
而側邊欄的寬度保持不變
回顧一下 你可能也將這個
設置爲在兩個項目間
具有同樣的保持優先權
如果您熟悉自動佈局您可能將這種情況
認爲是一種模棱兩可的情況
但是NSSplitView會對這種情況進行特殊處理
這次當您調整其大小時
兩個視圖會根據它們在尺寸調整之前的大小
按比例地調整大小
因此兩個視圖都尺寸都被調整得稍微大一點
那就是 holdingPriority
下一個度量指標是preferredThicknessFraction
它描述了某個splitview項目希望佔據的空間
佔split view的理想百分比
例如 側邊欄被默認爲15 %
當用戶進入全屏狀態或雙擊分割線的時候
該項目將自動跳到那個首選厚度
它們的確非常容易地就能恢復到那一標準值
作爲一個限值 自動最大厚度對所有這些尺寸調整行爲
都發揮作用
如果15%對應於350的話
那麼它將被限制爲不超過280
那些是NSSplitViewItem度量指標
在NSSplitViewController上還有另一個度量指標
那就是用於內嵌側邊欄的minimumThicknessForinlineSidebars
它描述了您的split view控制器中側邊欄將自動摺疊的寬度
因此 將尺寸調整到那一數值將讓它們保持內嵌狀態
進一步拖拽將讓您的側邊欄摺疊
這也適用於全屏幕狀態
關鍵區別在於當處於全屏幕狀態時
如果它總是被明確重新顯示它就被顯示爲疊加狀態
這說明瞭全屏狀態下的一個重要概念
在全屏狀態下我們希望避免讓窗口運行
以防止和相鄰元素的可能的衝突
在您的窗口內重新安排各個元素
總是比擴大窗口要好
爲支持NSSplitViewController中的
這樣一些新特性我們已經對 NSSplitView
做出了一些改進具體而言是通過對子視圖的排列
在 El Capitan 之前
split view中的所有子視圖都被視爲分割開來的窗格
這意味着管理它的 API
只是從NSView繼承來的子視圖 API
這是方便的但是也帶來了兩個確實很大的問題
一個問題是您不能增加
您不希望被視爲分割窗格的子視圖
例如 分割線
在此模型中分割線不可以由視圖表示
此外 您不能將 Z-順序
與子視圖的排列順序區別開來
因此您的零索引子視圖是按Z順序的第一個也是最下的
而沒有辦法將它們區別
因此 現在在10.11中您可以指定一定的子視圖
作爲使用NSSplitView的新API而創建的split view
所排列的子視圖
在管理已被排列的子視圖方面這個API與NSStackView的API
和UIStackView的API精確匹配
此外還有這個屬性ArrangesAllSubviews
它默認是 True
意思是說您的子視圖仍總與被排列的子視圖相同
並且匹配那種遺留行爲
即使您將此屬性設爲FalseNSSplitView 仍會確保
您的已被排列的子視圖
永遠是子視圖的一個子集
例如 如果您添加了一個還不是子視圖的
被排列的子視圖它將被添加爲子視圖
最後 我們鼓勵您開始使用被排列的子視圖
並將ArrangesAllSubviews設爲False
因爲當您那麼做的
時候NSSplitView現在能夠使用視圖
代表分割線併爲分割線的醒目性
和特殊的窗口拖拽行爲創造條件
您可通過Interface Builder控制它
選中這個ArrangesAll Subviews 複選框
更新後的 NIB 文件將選中此複選框以匹配遺留行爲
但是從對象庫裏面拖拽出來的新的split view將不會將其選中
這也是將來我們鼓勵的行爲
爲了幫研究您目前在split view上可能有的問題或試圖理解
您的split view的工作機制
我們已經改進了對調試的描述以便告訴您
諸如它如何執行佈局
以及它將用什麼代表它的分割線
關於佈局 有幾種可能性
但是我們建議確保split view使用約束條件
這讓它簡單地描述它的分割窗格之間的關係
並與您在窗口中的其他約束條件互動
此外 它將允許對您的split view窗格的
從右到左的翻動
而且我們也建議...
開始使用視圖代表分割線
原因如我以前所述
爲了幫助弄清楚爲何您的split view可以或不可使用約束條件
我們已經添加了這個DebugReasonForLayoutMode
它將給您提供具有可讀性的描述以便了解它是否會使用約束條件及其原因
最常見的原因是Delegate將優先於特定的
與自動佈局不相容的方法
而且將準確地告訴您那些方法是什麼
它是否在一個使用自動佈局的窗口內
還將決定它是否可以使用約束條件
最後如果它正在被NSSplitView Controller使用
則要求它使用約束條件
而如果您曾試圖調試splitview的一些佈局問題
並已輸出約束條件
它很可能看上起像是這樣
它是很難解讀的
如果您確實希望理解它您必須畫一張圖
您無法很好地辨別哪些約束條件是您的app添加的
哪些約束條件是框架添加的
在OS10.11中NSSplitView目前爲所有它添加的約束條件
給出識別符
因此您不僅可以辨別您在使用哪些約束條件
而且還可知道它在試圖用那個約束條件做些什麼
您可以快速地辨別
您的app添加了哪些約束條件
或者是否有怪異的您無法確定在發生什麼的
尺寸調整行爲您可以快速地看出
哪些約束條件可能會解決那一問題
NSStackView有適用於其每個約束條件的
類似的識別符
現在我想談一下NSStackView
這是一個我們在 Mavericks中引入的類
它確實簡化了
使用自動佈局進行的水平或垂直視圖堆疊
它完全與您在窗口中使用的其他約束條件相容
但是它會管理它使用的所有約束條件
來創建堆疊
因此您可以添加或移除視圖而不必擔心
對那些約束條件的更新
它內置了對齊和分佈的概念
因此您可以控制您的視圖
在堆疊視圖內的放置方式
以及剪裁和附加行爲因此當堆疊視圖
試圖建立比它所包含的視圖更小的視圖時
您可以控制發生的事情
此外 在 10.11 中我們做出了一系列性能改進
降低了它使用的約束條件的數量
並且從使用內部專用視圖轉換到使用 NS 佈局指南
而我們已經看到一些非常不錯的性能改進
《自動佈局的奧祕》的第一部分談到了這一點
和新的UIStackView 在 iOS
以及對我們現在所擁有的
新的InterfaceBuilder的很好的支持
我的確想重點談一下新的分配形式
它們描述了堆疊視圖如何沿着堆疊軸排列
您可以通過NSStackView的Distribution屬性
對此進行設置我將逐一說明它們是如何工作的
那麼GravityAreas匹配10.11 版本之前的行爲
通過它您可以指定特定的視圖被吸引到split view的
特定的邊緣
對於水平方向有領先 居中和尾隨
對於垂直方向有頂部 居中和底部
那麼在本例中隨着我們讓堆疊視圖的增加
這些視圖將趨向於朝邊緣移動
.Fill 是一個新的行爲它要求各個視圖
將堆疊視圖完全填充
而通過使用其他約束條件您可以決定它們的增長方式
或尺寸分配方式
在本例中 Tiny 已經設置了最低的拖拽優先權
因此隨着我們讓堆疊視圖的增長
它獲得了全部的尺寸調整權重
.FillEqually 是類似的
只是現在堆疊視圖將增加約束條件
各個視圖將有相同的尺寸
在本例中 我們將增加更強的約束條件
以便將堆疊視圖向下擠壓
而且它將優先於這些均等填充的約束條件
但是隨着我讓堆疊視圖增長
它們趨向於朝着尺寸均等化發展
.FillProportionally也是類似不過它們是
根據其自身內容的尺寸按比例增長
那麼在本例中較大的視圖增長得更大
而更小的視圖增長不多
.EqualSpacing是一種分配方式根據此方式
獲得額外尺寸的並不是視圖
而是視圖之間的間隔
在本例中隨着我們讓邊緣之間的間隔增大
各個視圖之間的距離都被調整到相同大小
.EqualCentering也是類似不過在這裏
不是視圖邊緣之間的間隔
而是視圖中心的間隔被調整到相同
有了這些新的分配行爲
我們認爲您可以將堆疊視圖用於您的 UI 中的更多地方
而且真正從它所帶來的變化中獲益
堆疊視圖的另一個方面是剪裁行爲
堆疊視圖可被默認增大到
包含所有其他項目所需的最小尺寸
但是您可能也需要設置剪裁抵抗優先權
讓視圖根據該優先權剪裁其內容
所以 現在我們的堆疊視圖可以被調整到小於它的容器
通常您並不希望對視圖進行這種部分剪裁
但這比視圖被完全丟棄的情況要好
您可以通過爲不同視圖設置可見性優先權進行控制
一旦堆疊視圖開始剪裁其中的視圖
有最低可見性優先權的視圖	將被完全丟棄
在本例中我們將設置由高到低的順序
以便隨着堆疊視圖開始剪裁某一視圖
它只是暫時性的完全脫離
因此在本例中第6個不再看得見了
如果堆疊視圖再次增大
它將重新附加這些項目因爲有了足夠的尺寸容納它們
此外 當這種脫離或重新附加發生時
您會獲得回調告訴您脫離或重新附加何時發生
以便於您對您的UI的其他部分做出可能的調整
比如增加一個溢出菜單
接下來我想快速地概述一下
最新更新過的集合視圖
現在它與 UI 集合視圖有等同的特色
包括項目的可重用性
因此 對那些本部分支持的項目的大型集合
您可以有真正可擴展的呈現方式
此外 有一些真正強大的佈局支持
所以不管您的集合視圖的尺寸多大它的行爲都是極其良好的
包括內置的網格佈局
與 iOS 匹配的流程佈局
以及創建您自己的定製化佈局的能力
Troy 將在今天稍晚時就此做一個很棒的講座
名爲《集合視圖中的新特性》
我真心建議您看一下
與此講座相關聯的還有示例代碼
它是一個圖片瀏覽app
展示Corbin和我談到的各種特性 API 以及行爲
例如 它展示各種全屏 API
尤其是最新的平鋪 API
我們這個單獨的小窗口
通常被要求尺寸符合寬高比
而且可被全屏化
然而 我們讓它可被平鋪
且一旦處於平鋪狀態便會有自定義佈局
它還採用了最新的split view 控制器特性
比如帶有覆蓋效果的自動摺疊側邊欄
以及 NSStackView
它使用零約束條件創建了這個底部工具欄
的的確確是很棒的
它還使用脫離行爲
以便能夠讓菜單調整到更小
並顯示這個小巧的溢出菜單
以便用戶仍能使用那些被隱藏的菜單項目
它還使用經過更新的NSCollectionView
用於顯示這個小圖片網格它的表現非常可靠
那麼 Corbin 帶我們概覽了Full Screen 的各種特性
比如如何在我們的應用中採用全屏
以及使用標題欄輔助視圖
讓那些在工具欄下方的標題欄在全屏幕狀態下有真正不錯的表現
此外 他還向我們展示了一些全屏幕平鋪 API
以便讓我們能夠確保
我們在特定情況下的窗口是否在全屏狀態下表現正常
最後是一些確保我們的佈局真正具有靈活性的方法
尤其是在這種狹窄環境下
比如將新的標題欄與Split View控制器
自動佈局和NSStackView配
合使用以在您的UI的其他部分構建靈活性
而NSCollectionView有真正很棒的對佈局的支持
若您有任何問題您可以聯繫 Paul Marcos
他樂於接收電子郵件
此外我們還有一些相關的講座環節我早些時候也提到了
現在它們已經都講完了但是您可以在視頻上觀看它們
此外 我們今天晚些時候還有一些實驗室活動
有的正在進行中有的將在今天稍晚和明天進行
如果您有任何問題敬請提出
祝您在WWDC上有美妙體驗敬請歡享盛會！
回頭見！