00:00:32.499 --> 00:00:33.400 
尼尔·德赛: 大家好

00:00:33.467 --> 00:00:35.035 
欢迎来到《构建Watch App》
讲座

00:00:35.102 --> 00:00:37.004 
我是尼尔·德赛是位工程师

00:00:37.271 --> 00:00:38.906 
在watchOS项目工作

00:00:39.940 --> 00:00:43.210 
今天我给大家演示如何
从下到上构建watchOS app

00:00:44.778 --> 00:00:48.215 
我们要谈谈
Watch app的架构

00:00:48.282 --> 00:00:51.652 
我们正在全面了解
app的生命周期布局模型

00:00:52.352 --> 00:00:54.888 
我们会使用不同的界面元素

00:00:54.955 --> 00:00:57.791 
以便为用户实现美好的体验

00:00:58.792 --> 00:00:59.927 
我们会调试app

00:01:01.261 --> 00:01:04.897 
还将通过不同的watchOS 2
功能增强app的性能

00:01:05.966 --> 00:01:10.170 
那么 在Apple Watch中
你有四个机会来展示信息

00:01:10.537 --> 00:01:12.339 
从Apple Watch的
Home屏幕 

00:01:12.439 --> 00:01:14.441 
到在Watch app中
可以手工启动的位置

00:01:14.741 --> 00:01:17.678 
Watch app可以提供
深度用户体验

00:01:17.744 --> 00:01:20.080 
大家会主要集中进行开发方面的工作

00:01:21.448 --> 00:01:23.083 
可以选择提供Glance

00:01:23.317 --> 00:01:26.887 
这可以从app给出最及时的相关数据

00:01:26.987 --> 00:01:28.255 
还是以缩略形式

00:01:30.090 --> 00:01:34.528 
可以为app的远程和
本地通知提供自定义UI

00:01:34.962 --> 00:01:36.163 
Apple Watch利用

00:01:36.230 --> 00:01:39.333 
iOS的现有互动通知支持允许

00:01:39.833 --> 00:01:42.936 
佩戴者对具体行动做出反应

00:01:43.203 --> 00:01:45.506 
将app转移到指定区域

00:01:45.772 --> 00:01:48.375 
或是在Apple Watch的
Notification

00:01:48.442 --> 00:01:49.710 
Center 晚些查看通知

00:01:50.611 --> 00:01:54.915 
最后 可以添加
Complication

00:01:54.982 --> 00:01:56.884 
在表盘显示信息的这一功能

00:01:57.284 --> 00:01:59.052 
让我非常兴奋

00:01:59.186 --> 00:02:01.421 
对于少量信息条而言这一点非常棒

00:02:01.722 --> 00:02:04.091 
用户可能会在查看时间时
希望了解这些信息

00:02:06.226 --> 00:02:09.997 
那么我们现在了解了
用户会与app交动的不同方式

00:02:10.163 --> 00:02:12.332 
我们来谈谈
Watch app的架构

00:02:14.401 --> 00:02:17.304 
现有的iPhone app
包括WatchKit扩展

00:02:17.371 --> 00:02:18.272 
和Watch app

00:02:18.739 --> 00:02:22.843 
经过用户要求的初始配对后
这些都已经装在了Watch 上

00:02:23.110 --> 00:02:25.879 
或是后来通过
Apple Watch app

00:02:25.946 --> 00:02:26.980 
用户发起的安装也可以

00:02:27.781 --> 00:02:29.816 
Watch app包括两部分内容

00:02:30.250 --> 00:02:33.854 
首先是WatchKit扩展
这一扩展现在就在...

00:02:33.921 --> 00:02:35.856 
Apple Watch上运行

00:02:36.089 --> 00:02:38.125 
并根据用户互动 执行代码

00:02:38.492 --> 00:02:40.360 
第二部分是Watch app

00:02:40.661 --> 00:02:42.029 
Watch app的UI已经 

00:02:42.095 --> 00:02:46.900 
从包括故事板和静态资源捆绑包中
得以加载例如图像

00:02:48.769 --> 00:02:51.205 
因此 存在于 Watch app

00:02:51.605 --> 00:02:53.707 
的这个UI随后
会与WatchKit扩展通话

00:02:53.841 --> 00:02:55.475 
可以将全部逻辑置于其中

00:02:56.210 --> 00:02:58.078 
现在 这个扩展程序就在Watch中

00:02:58.345 --> 00:03:00.480 
可以启动各类新的能力

00:03:00.681 --> 00:03:01.748 
这部分稍后介绍

00:03:02.749 --> 00:03:05.619 
当Watch app需要
与iOS app

00:03:05.953 --> 00:03:09.256 
进行沟通时
WatchConnectivity

00:03:09.656 --> 00:03:12.025 
可用于卸载重型进程

00:03:12.226 --> 00:03:13.260 
或网络任务它存在于

00:03:13.794 --> 00:03:16.230 
iOS和watchOS 2上

00:03:16.463 --> 00:03:19.433 
所以可以来回沟通

00:03:23.370 --> 00:03:28.108 
总之 故事板和所有静态资源
存储在Watch app捆绑包中 

00:03:28.976 --> 00:03:31.245 
Xcode提供的
Watch app已经包括

00:03:31.311 --> 00:03:34.481 
故事板在内在开发期间将会用到

00:03:35.382 --> 00:03:38.018 
因为这些资源
是Watch app的一部分

00:03:38.352 --> 00:03:40.487 
在设计时必须全部明确

00:03:40.621 --> 00:03:43.090 
只有在运行时可以稍作调整

00:03:43.690 --> 00:03:45.392 
这意味着需要将可能用到的

00:03:45.559 --> 00:03:47.594 
所有UI元素并入

00:03:47.661 --> 00:03:49.263 
故事板的各个场景

00:03:50.230 --> 00:03:53.834 
运行时 对WatchKit
扩展进行编码 

00:03:53.901 --> 00:03:56.470 
可以更新UI元素包括按照需要

00:03:56.537 --> 00:03:57.938 
对之隐藏 展示或动画处理

00:03:58.405 --> 00:04:01.141 
此外 WatchKit扩展
可以发送动态

00:04:01.208 --> 00:04:03.844 
生成的内容
至Watch app便于显示 

00:04:05.879 --> 00:04:09.082 
因此Interface
Controller对单个内容流

00:04:09.149 --> 00:04:10.450 
管理UI元素

00:04:10.918 --> 00:04:12.886 
会设置这些元素的初始值

00:04:13.120 --> 00:04:14.688 
对用户交互做出反应

00:04:15.055 --> 00:04:16.923 
适度更新UI

00:04:17.791 --> 00:04:20.226 
创建Interface
Controller子类时

00:04:20.560 --> 00:04:23.463 
需要为需要管理的每个UI添加输出口

00:04:23.997 --> 00:04:26.400 
这些输出口与故事板中的对象连接

00:04:26.667 --> 00:04:31.238 
并处理WatchKit扩展
和Watch app之间的信息传送

00:04:32.139 --> 00:04:37.444 
除了输出口还要为故事板的
互动元素设置行动方法

00:04:37.845 --> 00:04:41.081 
对输出口而言要将每个动作方法

00:04:41.381 --> 00:04:42.883 
和对应的UI元素

00:04:43.617 --> 00:04:46.520 
当佩戴者和Watch的元素交互时

00:04:46.987 --> 00:04:49.590 
WatchKit就会调用行动方法

00:04:50.791 --> 00:04:54.828 
因此我们先来考虑如何
调整现有iPhone app

00:04:56.563 --> 00:05:00.734 
在试运行WWDC时我忘记了

00:05:00.801 --> 00:05:03.303 
联系家人和朋友这方面的内容

00:05:03.904 --> 00:05:06.240 
所以我想创建个app可以提醒我

00:05:06.373 --> 00:05:08.075 
我联系过谁谁还没有联系

00:05:08.475 --> 00:05:12.613 
这就是WWDC Call Me
Lately 并可以通知我 

00:05:12.679 --> 00:05:13.580 
何时该联系他们

00:05:14.214 --> 00:05:17.184 
所以我和服务器沟通

00:05:17.251 --> 00:05:19.820 
跟踪我需要通过
NSURLSession 联系的人

00:05:20.254 --> 00:05:22.656 
这是我做的一个不错的iOS 

00:05:23.023 --> 00:05:25.959 
不过它更像是Watch app

00:05:26.693 --> 00:05:30.564 
当我特别忙时 很快就可以
知道接下来该联系谁

00:05:31.431 --> 00:05:33.433 
现在就开始制作Watch app

00:05:34.968 --> 00:05:37.337 
我想做的是希望给大家展示

00:05:37.404 --> 00:05:40.040 
怎样在现有的iOS app中
添加Watch app目标

00:05:40.941 --> 00:05:44.611 
接下来我们会涉及在哪里开始设置界面

00:05:45.212 --> 00:05:46.980 
最后 我们要构建和运行

00:05:47.080 --> 00:05:48.749 
看看模拟器里的状况

00:05:50.117 --> 00:05:51.418 
说到模拟器

00:05:51.718 --> 00:05:55.055 
在watchOS 2 SDK中
实际上有个崭新的模拟器

00:05:56.089 --> 00:05:59.193 
大家可能对iOS模拟器很熟悉

00:05:59.259 --> 00:06:00.460 
这个看起来是这个样子

00:06:01.461 --> 00:06:03.597 
现在就有了新的Watch模拟器

00:06:04.331 --> 00:06:07.434 
特别棒的一点是
这是个全功能模拟器

00:06:07.868 --> 00:06:12.272 
可以轻松看到38毫米
和42毫米的大小

00:06:13.240 --> 00:06:14.942 
可以模拟触控压力

00:06:16.210 --> 00:06:18.111 
可以看到不同的表盘

00:06:18.312 --> 00:06:20.781 
正如我之前所述
现在可以在watchOS 2中

00:06:21.114 --> 00:06:24.151 
支持Complication 
因此可以

00:06:24.751 --> 00:06:27.321 
看到Complication视图

00:06:27.387 --> 00:06:29.489 
在模拟器不同表盘的视图效果

00:06:31.024 --> 00:06:33.393 
最后 同时可以安装多个app

00:06:33.460 --> 00:06:36.230 
我们认为这会令制作新项目

00:06:36.463 --> 00:06:38.866 
重复想法等变得非常容易

00:06:39.266 --> 00:06:42.636 
随后可以快速在不同app之间往复

00:06:44.771 --> 00:06:47.941 
那么 模拟触控压力
可以进入Simulator菜单 

00:06:48.008 --> 00:06:49.243 
来到 Hardware
Simulate

00:06:49.309 --> 00:06:50.511 
Touch Pressure

00:06:50.577 --> 00:06:52.212 
接着可以选择
Deep Press

00:06:52.613 --> 00:06:55.315 
这对于想在模拟器中改变

00:06:55.382 --> 00:06:57.284 
表盘这类问题非常有用

00:06:58.585 --> 00:07:02.256 
现在跳到Xcode 
来看怎么添加Watch app

00:07:02.322 --> 00:07:03.857 
使用这个崭新的模拟器

00:07:05.225 --> 00:07:06.326 
来看演示

00:07:18.572 --> 00:07:19.907 
非常棒 启动Xcode

00:07:22.342 --> 00:07:23.644 
选择app

00:07:24.978 --> 00:07:26.847 
这样看起来更容易些

00:07:27.447 --> 00:07:28.115 
非常棒

00:07:29.349 --> 00:07:32.052 
现在如果想添加新的app

00:07:32.119 --> 00:07:33.854 
只需进入File New 
Target 接着就有了

00:07:33.921 --> 00:07:35.022 
新的WatchOS窗口

00:07:39.159 --> 00:07:41.395 
那么 在库里就有了应用和框架

00:07:41.461 --> 00:07:43.764 
选择Framework In 
Library就可以

00:07:44.298 --> 00:07:46.967 
添加Watch框架

00:07:47.034 --> 00:07:48.302 
或是Watch静态库

00:07:48.735 --> 00:07:51.538 
现在我来添加
WatchKit app

00:07:51.905 --> 00:07:54.708 
双击 加上产品名称

00:07:56.743 --> 00:08:00.113 
主app总是默认启动状态

00:08:00.180 --> 00:08:02.316 
但我还要加入
Notification场景

00:08:02.482 --> 00:08:04.685 
Glance场景 
以及Complication

00:08:04.985 --> 00:08:06.019 
可以加在这里

00:08:06.620 --> 00:08:08.322 
已经在这款app上加好了

00:08:08.822 --> 00:08:09.756 
按下Cancel

00:08:11.091 --> 00:08:12.793 
看看都有些什么

00:08:13.994 --> 00:08:16.730 
这就是Watch app
以及WatchKit扩展

00:08:17.331 --> 00:08:20.601 
我刚才说过Watch app 
包含故事板

00:08:20.667 --> 00:08:23.737 
所有的静态资源以及资产目录

00:08:24.004 --> 00:08:26.340 
WatchKit扩展包括所有界面

00:08:26.406 --> 00:08:28.842 
控件和可能会添加的任何其他代码

00:08:31.845 --> 00:08:33.480 
进入故事板

00:08:37.217 --> 00:08:39.820 
大家都看到我有主界面

00:08:40.020 --> 00:08:45.058 
Glance界面接下来
还有通知的静态和动态界面

00:08:46.293 --> 00:08:48.529 
进入实用工具检测器

00:08:49.796 --> 00:08:51.365 
可以看到对象库发现这里有许多

00:08:51.565 --> 00:08:55.035 
可以使用的不同对象

00:08:55.169 --> 00:08:57.971 
还有所有的WatchKit界面元素

00:08:59.706 --> 00:09:02.476 
拖拽过一个界面控制器

00:09:04.811 --> 00:09:08.682 
例如 如果我只想制作一个页面控制器

00:09:09.149 --> 00:09:11.351 
可以在键盘上选择Control

00:09:11.818 --> 00:09:14.021 
再拖拽到新的界面控制器中

00:09:14.288 --> 00:09:15.989 
并为下一个页面创建引线

00:09:17.591 --> 00:09:20.294 
现在就可以处理掉这些
如果看下面的内容

00:09:22.429 --> 00:09:25.499 
有一个静态界面和动态界面

00:09:25.699 --> 00:09:28.235 
因此动态界面实际上是与
Notification

00:09:28.302 --> 00:09:30.204 
Controller类相连接

00:09:30.671 --> 00:09:35.108 
所以当用户收到通知
先抬起手腕时就会看到

00:09:35.576 --> 00:09:38.679 
Notification
+Controller类 就会调用

00:09:38.946 --> 00:09:41.448 
而且还可以提供非常丰富的UI

00:09:42.583 --> 00:09:46.653 
现在静态界面通常会被调用

00:09:46.987 --> 00:09:49.356 
例如当用户错过了通知

00:09:49.423 --> 00:09:51.825 
想在Notification
Center再看一遍时

00:09:51.892 --> 00:09:54.027 
一般这种时候会看到静态界面

00:09:56.396 --> 00:09:59.433 
因此 我这有My Category

00:10:00.834 --> 00:10:05.038 
针对不同的分类
我们发送不同的装载模式

00:10:05.105 --> 00:10:08.242 
我们实际上可以创建
自定义UI和自定义通知

00:10:08.775 --> 00:10:10.277 
来针对不同的分类

00:10:10.544 --> 00:10:13.680 
而这并非一对一的界面

00:10:14.114 --> 00:10:16.383 
而是针对所发出的所有通知的界面

00:10:16.450 --> 00:10:19.520 
实际上可以调整并创建多个界面

00:10:20.754 --> 00:10:22.956 
我们再加一个新的通知控制器

00:10:27.561 --> 00:10:28.395 
放在这里

00:10:29.196 --> 00:10:32.466 
如果我想的话可以拖拽一个界面控制器

00:10:32.533 --> 00:10:35.169 
接下来
和刚才一样点击Control

00:10:35.536 --> 00:10:37.271 
在创建我新的动态界面

00:10:38.138 --> 00:10:41.441 
还可以进入这里属性检测器

00:10:41.575 --> 00:10:43.677 
选择Has Dynamic
Interface

00:10:44.044 --> 00:10:46.613 
现在我可以调整分类

00:10:46.680 --> 00:10:48.048 
并创建新的界面

00:10:48.482 --> 00:10:50.384 
然后可能我想...

00:10:50.450 --> 00:10:53.220 
创建新的Notification
Controller类

00:10:53.353 --> 00:10:54.688 
接着在做好连接

00:10:55.889 --> 00:10:57.991 
我们还有模板

00:10:58.292 --> 00:11:02.296 
推送通知装载模式 .apns文件 

00:11:03.363 --> 00:11:04.398 
如果看这里

00:11:04.464 --> 00:11:06.834 
看似是我们会有的普通装载模式

00:11:07.167 --> 00:11:10.571 
其中有提醒 主体 题目 分类

00:11:11.205 --> 00:11:13.740 
最棒的部分是在模拟器中

00:11:13.907 --> 00:11:16.176 
可以使用这些不同的装载模式文件

00:11:16.610 --> 00:11:18.145 
模拟不同界面

00:11:18.445 --> 00:11:21.849 
如果想要测试所有这些不同的通知

00:11:22.182 --> 00:11:23.584 
我们不必一定在设备上进行

00:11:24.017 --> 00:11:25.853 
可以使用模拟器

00:11:25.919 --> 00:11:29.389 
这些通知装载模式
快速重复不同的想法

00:11:31.191 --> 00:11:32.793 
我们再回到故事板

00:11:33.393 --> 00:11:35.262 
现在我就想在模拟器中

00:11:35.662 --> 00:11:37.764 
构建 运行并查看主app

00:11:38.999 --> 00:11:40.334 
那我来打开我的计划

00:11:40.801 --> 00:11:44.738 
我看到我有iOS计划接下来
是WatchKit app计划

00:11:45.606 --> 00:11:48.809 
我有两个模拟器
这是iPhone 6 Plus

00:11:48.876 --> 00:11:49.810 
38毫米的

00:11:50.043 --> 00:11:52.579 
还有iPhone 6 Plus
42毫米的

00:11:52.980 --> 00:11:56.183 
我刚才说过这实际
是个Watch的全功能模拟器

00:11:56.350 --> 00:11:58.919 
实际上需要和我的
iPhone模拟器相配对

00:12:00.087 --> 00:12:04.458 
我们来选择 iPhone 6
计划 构建并运行

00:12:06.460 --> 00:12:09.897 
现在打开了两个模拟器

00:12:11.131 --> 00:12:15.802 
那么我预计到主app会启动

00:12:15.869 --> 00:12:17.771 
我会把它连在调试器上

00:12:18.572 --> 00:12:22.309 
非常棒按下Allow
因为我确实要允许这么做

00:12:22.910 --> 00:12:24.678 
现在是在连接调试器

00:12:24.878 --> 00:12:27.681 
这里出现了一个小东西

00:12:27.748 --> 00:12:31.118 
是说“扩展收到请求 启动
表盘组件支持”

00:12:31.652 --> 00:12:34.488 
如果要执行
Complication

00:12:34.555 --> 00:12:35.989 
稍后这就会消失

00:12:37.491 --> 00:12:40.627 
现在来停止这个调试会话

00:12:41.261 --> 00:12:42.529 
返回Watch模拟器

00:12:43.830 --> 00:12:47.401 
现在就是新的模拟器
我有表盘

00:12:47.701 --> 00:12:50.804 
现在如果我只想调整表盘

00:12:50.871 --> 00:12:52.573 
可以打开Hardware
Simulate

00:12:52.639 --> 00:12:53.941 
Touch Pressure

00:12:55.042 --> 00:12:58.679 
现在可以模拟强压接着返回

00:12:59.446 --> 00:13:02.749 
轻压 接着调整表盘

00:13:03.750 --> 00:13:06.019 
现在可以自定义模拟器上的时钟

00:13:06.954 --> 00:13:09.756 
那么如果在设备上进入这个屏幕

00:13:09.823 --> 00:13:11.158 
可以使用Digital
Crown

00:13:11.225 --> 00:13:12.726 
接着可以轻松改变颜色

00:13:13.060 --> 00:13:15.295 
那么鼠标上
没有Digital Crown

00:13:15.462 --> 00:13:17.865 
不过幸好我有滚轮

00:13:18.398 --> 00:13:20.968 
还可以使用触控板
或Magic Mouse

00:13:21.869 --> 00:13:23.637 
我还可以调整颜色像这样

00:13:23.704 --> 00:13:26.073 
现在就可以模拟
Digital Crown行为

00:13:26.974 --> 00:13:29.376 
同样 进入
Complication视图时

00:13:29.676 --> 00:13:34.948 
手指划过
就可以启动Complication

00:13:35.215 --> 00:13:38.752 
这样如果想在
Complication上重复想法

00:13:38.819 --> 00:13:41.855 
可以在不同表盘构建新的
Complications

00:13:41.922 --> 00:13:44.658 
我可以像这样
启动这些Complication

00:13:45.959 --> 00:13:49.997 
现在 执行
Command-Shift-H

00:13:52.299 --> 00:13:54.968 
返回主页 再次执行
Command-Shift-H 

00:13:55.669 --> 00:13:58.372 
现在回到了Home屏幕
于是有了Settings app

00:13:58.438 --> 00:14:00.140 
表盘和已有的app 

00:14:02.042 --> 00:14:04.278 
然后启动app也正常看到了

00:14:04.678 --> 00:14:05.579 
再回到主页

00:14:09.149 --> 00:14:12.186 
现在 正如我所讲这些模拟器实现配对

00:14:12.252 --> 00:14:14.421 
我有两款不同的模拟器可供选择

00:14:14.821 --> 00:14:17.257 
进入计划看到两款模拟器

00:14:17.691 --> 00:14:19.259 
可是如果是iPhone 5

00:14:19.693 --> 00:14:22.296 
42毫米模拟器会怎样呢

00:14:22.796 --> 00:14:25.532 
我来做个新模拟器再实现配对

00:14:26.834 --> 00:14:31.538 
打开Xcode 
选择Xcode 然后是Device

00:14:32.406 --> 00:14:35.509 
现在在侧边栏我有所有不同的模拟器

00:14:35.776 --> 00:14:39.413 
如果来到底部左侧可以添加模拟器

00:14:40.447 --> 00:14:41.915 
可以称之为iPhone 5

00:14:43.717 --> 00:14:44.985 
改变设备类型

00:14:45.853 --> 00:14:47.254 
继续保持iOS版本

00:14:47.921 --> 00:14:50.757 
我将会把配对的手表改为42毫米

00:14:51.158 --> 00:14:52.726 
很容易就可以创建

00:14:53.260 --> 00:14:57.197 
现在如果返回计划这就是新的模拟器

00:14:59.199 --> 00:15:01.835 
那么回到故事板

00:15:05.572 --> 00:15:08.642 
正如我说讲有这些计划

00:15:08.709 --> 00:15:11.278 
可供选择这有个
Notification计划

00:15:11.345 --> 00:15:13.780 
还有Glance计划
以及Complication

00:15:13.847 --> 00:15:15.282 
那么我可以选择这些不同的计划

00:15:15.682 --> 00:15:17.851 
并快速调试app的不同部件

00:15:18.619 --> 00:15:20.721 
例如 现在我想测试

00:15:20.787 --> 00:15:22.389 
Notification计划

00:15:22.456 --> 00:15:24.391 
想看看在模拟器中是什么样子

00:15:24.858 --> 00:15:26.460 
我们已经讲过了APNS文件

00:15:26.527 --> 00:15:28.529 
我想看看是否正确显示

00:15:30.597 --> 00:15:33.500 
那就在动态界面添加标签

00:15:34.801 --> 00:15:35.736 
拖动过来

00:15:36.436 --> 00:15:38.272 
直接改成Dynamic

00:15:40.641 --> 00:15:42.910 
现在我选择了
Notification计划

00:15:43.710 --> 00:15:46.246 
准备在模拟器上构建并运行

00:15:50.717 --> 00:15:53.554 
我希望在Watch
模拟器上看到这种情况

00:15:54.655 --> 00:15:57.357 
会出现通知接着是Dynamic

00:15:57.791 --> 00:15:59.459 
现在需要介绍的就是这些内容

00:16:04.064 --> 00:16:07.000 
这里就是通知
上面写着Test Message

00:16:07.634 --> 00:16:10.237 
我准备打开控制台

00:16:11.004 --> 00:16:14.908 
上面写着“用时过长
无法显示自定义通知返回静态”

00:16:15.742 --> 00:16:19.112 
好的再来看通知控制器

00:16:19.179 --> 00:16:20.647 
看看为什么会出现这种情况

00:16:21.481 --> 00:16:23.684 
这就是通知控制器的代码

00:16:24.785 --> 00:16:27.554 
检查一下

00:16:27.955 --> 00:16:29.923 
Did Receive
Remote

00:16:29.990 --> 00:16:33.193 
Notification有标注提示
我应该解决标注问题

00:16:37.364 --> 00:16:38.799 
现在再来构建和运行

00:16:40.734 --> 00:16:43.971 
希望现在经过取消旧的通知

00:16:45.072 --> 00:16:47.674 
就能看到新的正如我所愿
上面写着Dynamic

00:16:48.609 --> 00:16:52.646 
在设备上 如果是
这样的情形并获得通知

00:16:52.713 --> 00:16:54.681 
我可以选择App图标或按钮

00:16:54.748 --> 00:16:56.149 
我就会回到这款app上

00:16:56.483 --> 00:16:59.019 
在模拟器中可以同样这么做

00:16:59.086 --> 00:17:01.321 
正如我所愿回到了这款app中

00:17:08.362 --> 00:17:13.599 
现在可以完善代码 在通知中添加

00:17:13.834 --> 00:17:16.270 
不错的UI故事我还想测试

00:17:16.336 --> 00:17:18.137 
自己的静态界面

00:17:18.204 --> 00:17:20.607 
想实现这些的唯一办法是
需要在Did Receive

00:17:20.674 --> 00:17:23.844 
Remote
Notification标注提示

00:17:23.911 --> 00:17:26.180 
以获得静态界面
而我在重复编码时

00:17:26.613 --> 00:17:28.214 
并不希望这样做

00:17:28.882 --> 00:17:30.717 
那么我可以有两种办法这么做

00:17:31.018 --> 00:17:34.188 
第一 我可以将完成处理程序的自定义

00:17:34.421 --> 00:17:38.492 
改为调用Default
或者实际上我可以进入计划

00:17:39.660 --> 00:17:44.831 
可以编辑计划
现在我可以选择Watch界面

00:17:44.898 --> 00:17:48.268 
就可以把它改成静态通知

00:17:48.335 --> 00:17:50.971 
而不是动态的大家可以看到

00:17:51.038 --> 00:17:52.773 
这里是推送通知装载模式

00:17:53.173 --> 00:17:55.409 
如果我有多个装载模式这里会有显示

00:17:55.642 --> 00:17:59.079 
我可以快速调整我准备测试的装载模式

00:18:00.981 --> 00:18:04.685 
我的目的是想保持静态计划

00:18:04.818 --> 00:18:07.821 
一阵子 那我就准备复制这个计划

00:18:08.956 --> 00:18:11.458 
我们可以称之为Static
 Notification

00:18:14.461 --> 00:18:15.629 
接着打开Run

00:18:16.330 --> 00:18:18.165 
再来把Watch界面改成静态

00:18:19.132 --> 00:18:20.367 
按下Close

00:18:21.134 --> 00:18:22.903 
现在静态通知也有了

00:18:22.970 --> 00:18:25.072 
以及正常的动态通知

00:18:27.307 --> 00:18:29.309 
非常好 这就是模板项目的

00:18:29.376 --> 00:18:33.247 
开始部分但需要理解部分上下文

00:18:33.313 --> 00:18:35.516 
关于app生命周期
在watchOS上如何运行

00:18:43.357 --> 00:18:46.059 
来介绍一下watchOS app的
生命周期

00:18:47.995 --> 00:18:52.232 
我们来看Watch app界面
但是并没有看到它的生命周期

00:18:52.666 --> 00:18:55.669 
很重要的一点 是需要
了解什么时候扩展以及界面控制

00:18:56.069 --> 00:18:57.671 
器何时需要调用安装和拆解

00:18:58.071 --> 00:19:01.141 
那么需要在正确的时间配置UI元素

00:19:01.241 --> 00:19:04.444 
并进行清理操作或完成任务

00:19:04.545 --> 00:19:06.713 
这时佩戴者会停止
与Watch app进行交互

00:19:07.581 --> 00:19:08.815 
启动Watch app时

00:19:08.882 --> 00:19:11.952 
扩展委托可以启动get
 Application Did

00:19:12.019 --> 00:19:13.520 
Finish Launching

00:19:13.921 --> 00:19:17.591 
扩展委托和在iOS上的
UI应用委托类似

00:19:18.125 --> 00:19:21.128 
这样 你也会收到
Did Become Active

00:19:21.195 --> 00:19:23.597 
回调 以便升级模型数据

00:19:24.865 --> 00:19:28.035 
接下来Watch app捆绑包的
故事板会装载到

00:19:28.435 --> 00:19:30.571 
Apple Watch 初始
界面控制器即可生成

00:19:31.371 --> 00:19:32.906 
UI一旦生成

00:19:33.173 --> 00:19:36.276 
界面控制器就会收到Awake
 With Context

00:19:36.777 --> 00:19:39.079 
调用 使其有机会启动状态变量

00:19:39.446 --> 00:19:42.082 
并运用初始值配置UI元素

00:19:43.150 --> 00:19:45.586 
Watch app的UI正在屏幕上

00:19:45.652 --> 00:19:49.122 
显示的过程中
将调用Will Activate

00:19:49.389 --> 00:19:51.859 
允许执行紧急任务

00:19:51.925 --> 00:19:53.894 
或最终的UI元素配置

00:19:54.695 --> 00:19:57.064 
现在 如果佩戴者与UI元素交互

00:19:57.231 --> 00:20:00.634 
WatchKit调用在界面
控制器上定义的动作方法

00:20:01.401 --> 00:20:04.538 
可以通过这些动作方法执行代码

00:20:04.972 --> 00:20:06.340 
并更新app的UI

00:20:06.940 --> 00:20:09.209 
要记住交互时间很短

00:20:09.810 --> 00:20:13.247 
在iOS上　我们以往认为
在用户和app交互方面

00:20:13.313 --> 00:20:16.517 
都是按照分钟计算
但是在watchOS上

00:20:16.650 --> 00:20:18.552 
我们是在以秒计算考虑问题

00:20:19.386 --> 00:20:22.623 
实际上要在佩戴者停止与app交互后

00:20:22.689 --> 00:20:24.992 
点击
Did Deactivate调用

00:20:26.527 --> 00:20:30.063 
调用这种方法后在未来的某个点

00:20:30.130 --> 00:20:34.434 
界面控制器将会被释放

00:20:36.503 --> 00:20:38.172 
现在扩展委托

00:20:38.338 --> 00:20:40.741 
在佩戴者完全停止和手表交互后

00:20:40.841 --> 00:20:43.210 
例如可能会返回Home屏幕

00:20:43.644 --> 00:20:45.846 
你会收到
Application Will

00:20:45.913 --> 00:20:47.314 
Resign Active回调

00:20:47.514 --> 00:20:52.319 
借此机会可以保存任何
app相关状态信息

00:20:52.452 --> 00:20:53.854 
并关闭任何运行的任务

00:20:56.723 --> 00:20:59.293 
我们了解WatchKit
扩展的 生命周期

00:20:59.560 --> 00:21:01.061 
但是要谈谈另一个重要问题

00:21:01.128 --> 00:21:02.863 
是关于Watch app的布局

00:21:05.299 --> 00:21:08.135 
watchOS中的WatchKit

00:21:08.702 --> 00:21:11.271 
模型不同于UIKit

00:21:11.338 --> 00:21:13.874 
及AppKit 因为它是流式布局

00:21:14.474 --> 00:21:18.378 
因此所有的元素都是连续出现

00:21:19.346 --> 00:21:20.547 
我们的UI主要是在...

00:21:20.614 --> 00:21:22.549 
Interface 
Builder中创建

00:21:23.584 --> 00:21:25.619 
因此具备界面控制器时

00:21:25.686 --> 00:21:28.689 
可以使用对象库并拖拽图像

00:21:29.022 --> 00:21:32.993 
或拖拽按钮当我们需要...

00:21:33.427 --> 00:21:36.997 align:start position:10%
更为相关联的布局时

00:21:37.497 --> 00:21:39.433 
我们会使用WK界面组

00:21:39.533 --> 00:21:42.669 
用于管理不同项的布局

00:21:43.370 --> 00:21:46.073 
例如 我们可以在组中添加图像和标签

00:21:47.908 --> 00:21:50.377 
因此编程模型非常值得注意

00:21:50.878 --> 00:21:53.714 
不要使用WatchKit编写
对象生成代码

00:21:54.781 --> 00:21:57.050 
在Interface 
Builder有微调控制

00:21:57.851 --> 00:22:02.789 
处理位置和大小布局分层和动画

00:22:05.459 --> 00:22:07.594 
我非常鼓励大家参加周四的...

00:22:07.661 --> 00:22:11.265 
《WatchKit布局和动画技术》
讲座

00:22:11.431 --> 00:22:15.802 
是有关如何为用户生成丰富UI的内容

00:22:16.803 --> 00:22:19.406 
我在考虑
怎样最好地制作Watch app

00:22:19.473 --> 00:22:23.143 
回想一下 我的iOS app
是个简单的UI表格视图

00:22:24.077 --> 00:22:26.947 
我的第一个想法是罗列出

00:22:27.014 --> 00:22:29.683 
我需要呼叫的所有人
与iOS app非常类似

00:22:30.317 --> 00:22:31.919 
当我开始这么考虑时

00:22:32.653 --> 00:22:35.689 
我意识到Watch app
并不需要所有这些信息

00:22:36.390 --> 00:22:38.592 
其实 我只需要了解下一个该联系谁

00:22:38.659 --> 00:22:41.128 
而不是要了解所有需要联系的人

00:22:41.562 --> 00:22:43.697 
所以UI可以是这个样子

00:22:44.498 --> 00:22:46.733 
非常棒 现在我知道需要怎么做了

00:22:47.401 --> 00:22:49.503 
我想开始生成UI

00:22:49.803 --> 00:22:53.106 
接下来讲讲怎样为主app 

00:22:53.173 --> 00:22:55.909 
Glance和
Notification生成UI

00:22:56.410 --> 00:22:58.779 
我们跳到Xcode来看我们有什么

00:23:00.414 --> 00:23:02.115 
我们了解生命周期是什么

00:23:02.182 --> 00:23:04.351 
一般而言布局代表什么

00:23:04.551 --> 00:23:05.919 
那我们打开故事板

00:23:07.387 --> 00:23:10.591 
我想在界面控制器添加图像

00:23:10.958 --> 00:23:12.759 
先在对象库里选择图像

00:23:13.560 --> 00:23:16.697 
然后快速拖拽一个图像过来

00:23:17.698 --> 00:23:19.466 
我还要添加一个标签

00:23:19.967 --> 00:23:23.504 
那么去找到标签拖拽过来

00:23:24.304 --> 00:23:26.240 
如果发现出现了一条蓝线

00:23:26.306 --> 00:23:30.110 
那么在流式布局中可以把标签

00:23:30.210 --> 00:23:32.045 
放在图像的前或后

00:23:32.513 --> 00:23:35.048 
那就把它放在后面

00:23:35.249 --> 00:23:40.153 
举例来说 如果我想把
它们水平方向前后放置 

00:23:41.121 --> 00:23:43.857 
好吧 在Interface 
Builder中 其实无法实现

00:23:43.924 --> 00:23:45.959 
没有蓝线出现 帮不了我

00:23:46.827 --> 00:23:49.863 
我用WK界面组来实现

00:23:50.998 --> 00:23:55.402 
把这个拖拽过来重新调整图像大小

00:23:56.803 --> 00:23:58.705 
把标签加入组中

00:23:59.439 --> 00:24:02.109 
把图像就加在标签旁边

00:24:02.242 --> 00:24:04.278 
这样就可以在水平方向排布

00:24:05.312 --> 00:24:08.815 
现在把标签和图像取出

00:24:09.483 --> 00:24:10.551 
把组删除

00:24:11.985 --> 00:24:13.687 
接着在属性检测器中

00:24:14.221 --> 00:24:15.455 
已经在资产目录里了

00:24:15.522 --> 00:24:17.024 
我有个图像是朋友伊桑的

00:24:17.791 --> 00:24:20.961 
就以这张图像作为参考

00:24:21.328 --> 00:24:22.696 
伊桑好像有点走形

00:24:22.863 --> 00:24:25.165 
让他看起来更开心点

00:24:26.600 --> 00:24:27.434 
就这样

00:24:27.501 --> 00:24:28.368 
他开心多了

00:24:28.802 --> 00:24:32.139 
还要把标签文字改成伊桑

00:24:33.106 --> 00:24:35.976 
现在布局位置确定是左对齐

00:24:36.443 --> 00:24:39.112 
我其实是想让它在屏幕居中

00:24:39.713 --> 00:24:41.815 
如果我选定了图像

00:24:42.115 --> 00:24:43.684 
那么打开属性检测器中

00:24:44.251 --> 00:24:46.987 
可以将位置调到中心

00:24:47.621 --> 00:24:51.024 
我还可以垂直方向调整位置

00:24:51.091 --> 00:24:53.327 
可以调大小改变视图

00:24:53.393 --> 00:24:56.363 
针对这个图像标签也一样

00:24:56.430 --> 00:24:58.365 
我只想它放在中间位置

00:24:59.867 --> 00:25:01.802 
那就来看Glance

00:25:02.002 --> 00:25:05.939 
如果仔细观察会发现
Glance控制器不同于主app

00:25:06.206 --> 00:25:07.241 
有两个组

00:25:07.674 --> 00:25:09.710 
是因为Glance实际上是模板制成

00:25:10.277 --> 00:25:12.412 
我有上模板和下模板

00:25:12.746 --> 00:25:16.550 
如果选择上模板的属性检测器

00:25:16.750 --> 00:25:18.886 
有一系列选项可供选择

00:25:19.820 --> 00:25:23.257 
在这个具体案例中我们使用大号的文字

00:25:24.024 --> 00:25:25.893 
改成Call

00:25:28.428 --> 00:25:31.632 
接着在下模板中添加图像

00:25:33.400 --> 00:25:35.102 
和刚才做的一样

00:25:35.169 --> 00:25:37.838 
只需要把图像变为伊桑即可

00:25:38.739 --> 00:25:41.742 
当我看着Glance时感觉app

00:25:41.808 --> 00:25:44.111 
是要对我发火
因为调用伊桑这里我做的极差

00:25:44.878 --> 00:25:46.380 
那么app会帮我做

00:25:49.850 --> 00:25:54.354 
在通知界面也是同样的做法

00:25:55.189 --> 00:25:58.992 
大部分情况下我可以找到新界面

00:25:59.459 --> 00:26:04.031 
现在通过选择计划来构建并运行界面

00:26:05.465 --> 00:26:07.668 
我们来构建和运行Watch模拟器

00:26:15.642 --> 00:26:18.812 
希望我的新界面会出现

00:26:20.848 --> 00:26:21.648 
好的 非常棒

00:26:21.715 --> 00:26:23.650 
好 在这里 我再连上调试器

00:26:24.451 --> 00:26:27.888 
停止这个会话看看iOS模拟器

00:26:28.255 --> 00:26:30.524 
因为 重要的是
需要注意这些是配对设备

00:26:32.059 --> 00:26:34.428 
那么向上滚动向右摇

00:26:35.028 --> 00:26:37.531 
看到iOS app已经安装到位

00:26:37.731 --> 00:26:40.501 
和设备上一样
app只有通过这一种办法

00:26:40.701 --> 00:26:43.637 
可以装在用户的Watch上

00:26:43.704 --> 00:26:45.105 
也就是装在iOS设备上

00:26:45.706 --> 00:26:47.107 
那么就是现在这样

00:26:47.641 --> 00:26:51.044 
我们来选择Apple
Watch app在模拟器里

00:26:51.345 --> 00:26:53.080 
可以调整
Complication

00:26:53.714 --> 00:26:56.016 
那么Call Me Lately
已经启动了

00:26:57.384 --> 00:27:02.022 
我还可以卸载app再重新安装

00:27:02.289 --> 00:27:05.592 
还可以关闭Glance再重新启动

00:27:06.693 --> 00:27:08.195 
如果我想查看Glance

00:27:08.262 --> 00:27:11.832 
可以打开模拟器返回表盘

00:27:12.266 --> 00:27:16.637 
就像在设备上一样
划动一下 接着Glance

00:27:17.037 --> 00:27:18.105 
那我们再重新启动

00:27:18.939 --> 00:27:21.308 
哎呀 不好意思

00:27:22.309 --> 00:27:24.111 
我以为会出现新的UI

00:27:24.444 --> 00:27:26.947 
结果没成功不过我们还是继续

00:27:28.782 --> 00:27:32.186 
我找到了新界面不过我需要了解

00:27:32.252 --> 00:27:34.254 
下一个该联系谁还需要了解

00:27:34.421 --> 00:27:36.056 
怎样更新app实现这一点

00:27:37.457 --> 00:27:38.625 
回到幻灯片

00:27:42.496 --> 00:27:45.065 
iOS app主要是
通过NSURLSession

00:27:45.132 --> 00:27:48.268 
与服务器沟通获取亲爱的朋友们的名单

00:27:48.669 --> 00:27:51.138 
watchOS 2很出色的
一点是我可以使用

00:27:51.205 --> 00:27:54.208 
许多相同的NSURLSession
与服务器对话

00:27:55.275 --> 00:27:57.144 
不过 有时候当我需要确认

00:27:57.211 --> 00:28:00.347 
iOS app和watchOS
app 彼此在接触

00:28:00.814 --> 00:28:03.317 
可以使用Watch-
Connectivity 来完成

00:28:03.584 --> 00:28:05.586 
我们花些时间

00:28:05.652 --> 00:28:07.788 
介绍一下新
WatchConnectivity

00:28:07.855 --> 00:28:10.390 
框架然后来看怎样在
Call Me Lately中使用

00:28:11.792 --> 00:28:13.694 
那么
WatchConnectivity

00:28:13.760 --> 00:28:15.662 
是iOS和watchOS

00:28:16.563 --> 00:28:19.333 
之间交流的四个核心用途框架

00:28:20.000 --> 00:28:22.536 
主要注意的是
WatchConnectivity 

00:28:22.603 --> 00:28:27.541 
在iOS和watchOS之中都有
在两个平台上均可使用API

00:28:27.941 --> 00:28:30.644 
不仅是Watch app
在与iOS app对话

00:28:30.944 --> 00:28:32.746 
有时还需要iOS app

00:28:32.813 --> 00:28:33.981 
来更新Watch app

00:28:34.982 --> 00:28:37.184 
第一个用途是允许iOS app

00:28:37.417 --> 00:28:39.720 
更新Watch app的应用上下文

00:28:39.786 --> 00:28:40.654 
反之亦然

00:28:41.255 --> 00:28:43.123 
这也许不是紧急的数据 

00:28:43.190 --> 00:28:45.158 
但是需要向用户更新这些内容

00:28:45.792 --> 00:28:47.361 
第二个是Send Message

00:28:47.494 --> 00:28:49.696 
这是需要在iOS app
和Watch app之间

00:28:49.763 --> 00:28:51.465 
来回传送的

00:28:51.798 --> 00:28:53.834 
小量信息和Watch app

00:28:54.768 --> 00:28:57.104 
第三个是简易传送文件API

00:28:57.871 --> 00:29:00.541 
最后是传送用户信息
API 可以和更多

00:29:00.607 --> 00:29:02.242 
Complications相连接

00:29:03.777 --> 00:29:06.280 
还有很多内容可以完成

00:29:06.346 --> 00:29:07.314 
我鼓励大家和...

00:29:07.381 --> 00:29:10.617 
WatchConnectivity
对话发现更多信息

00:29:11.251 --> 00:29:14.888 
来看Call Me Lately 
来看怎么充分利用

00:29:14.955 --> 00:29:16.657 
WatchConnectivity

00:29:17.090 --> 00:29:19.693 
我想在app上添加
WatchConnectivity 

00:29:20.360 --> 00:29:25.666 
还要进行调试最后我想
用Instrument进行调试

00:29:26.166 --> 00:29:28.635 
谈到Instrument
有人可能还不知道

00:29:28.936 --> 00:29:31.371 
Instrument是非常强大的
调试工具

00:29:31.438 --> 00:29:33.407 
可以检测app的性能

00:29:34.675 --> 00:29:36.610 
于是我获得调试模板

00:29:36.910 --> 00:29:38.812 
先要启动Instrument

00:29:39.313 --> 00:29:44.117 
然后可以从时间事件查看器
泄露 分配中进行选择

00:29:45.819 --> 00:29:48.856 
然后大家会看到
如果我选择时间事件查看器

00:29:48.922 --> 00:29:50.390 
例如 我要看这个视图

00:29:50.457 --> 00:29:52.092 
可以轻松调试app

00:29:53.794 --> 00:29:55.262 
这一点很重要

00:29:55.762 --> 00:29:57.798 
Watch上 互动时间非常短

00:29:57.865 --> 00:30:00.133 
也就是说性能非常关键

00:30:00.734 --> 00:30:02.970 
我们希望使用
Instrument来确保

00:30:03.036 --> 00:30:06.740 
app在提供良好的用户体验

00:30:06.974 --> 00:30:09.376 
我们希望在
设备和模拟器上都进行检测

00:30:10.143 --> 00:30:12.913 
现在我们了解了一些
WatchConnectivity

00:30:12.980 --> 00:30:15.115 
和Instrument
我们再来看演示

00:30:15.182 --> 00:30:16.483 
在app中

00:30:16.850 --> 00:30:20.821 
我可能有某种算法称

00:30:20.921 --> 00:30:22.823 
下一个该联系这个人了

00:30:23.056 --> 00:30:25.993 
所以当得到这个数据时

00:30:26.059 --> 00:30:31.498 
我需要更新iOS app
了解这人是谁查看Watch 

00:30:31.565 --> 00:30:32.999 
就知道接下来该联系他了

00:30:33.500 --> 00:30:36.003 
也许我需要初始启动app

00:30:36.069 --> 00:30:38.305 
只为在iOS app上更新应用

00:30:38.572 --> 00:30:41.375 
上下文看看会出现什么

00:30:42.576 --> 00:30:44.811 
我可能希望在扩展委托中

00:30:44.878 --> 00:30:48.282 
在Application Did
Become Active完成这些

00:30:49.483 --> 00:30:51.451 
我可以只在这里放置代码

00:30:51.518 --> 00:30:53.887 
我先来导入
WatchConnectivity

00:30:59.526 --> 00:31:02.429 
现在在Application
Did Become Active

00:31:02.796 --> 00:31:03.931 
我想添加部分代码

00:31:04.264 --> 00:31:07.034 
生成上下文即名为伊桑的字符串

00:31:07.267 --> 00:31:10.404 
接着在WC Session 这是
WatchConnectivity

00:31:10.470 --> 00:31:12.239 
我有默认的会话

00:31:12.306 --> 00:31:13.607 
并且调用方法
Update

00:31:13.674 --> 00:31:14.908 
Application
Context

00:31:14.975 --> 00:31:17.511 
连同主要WCApplication
Context

00:31:17.945 --> 00:31:19.646 
我将只发送上下文部分

00:31:19.980 --> 00:31:23.016 
结果却更糟糕现在就来打印出我的错误

00:31:25.485 --> 00:31:26.453 
来看这个工作

00:31:27.788 --> 00:31:28.856 
我们来构建和运行

00:31:34.995 --> 00:31:36.296 
选择Watch app...

00:31:37.798 --> 00:31:38.465 
app启动

00:31:41.368 --> 00:31:45.973 
但我看到WC错误提示7004

00:31:46.440 --> 00:31:49.009 
根据以往的经验我可以判断

00:31:49.076 --> 00:31:50.811 
我的会话没有激活

00:31:51.411 --> 00:31:52.646 
来看看代码

00:31:53.947 --> 00:31:56.149 
我还没有设置委托

00:31:56.383 --> 00:31:58.585 
我想设置WC会话委托然后在更新应用

00:32:01.121 --> 00:32:05.759 
上下文代码之后或之前

00:32:07.561 --> 00:32:09.897 
我只想自己设置委托接着还要激活

00:32:10.330 --> 00:32:11.932 
会话部分

00:32:12.065 --> 00:32:13.667 
需要注意的是在激活会话前

00:32:13.734 --> 00:32:19.006 
需要设置委托因为在激活会话时

00:32:19.273 --> 00:32:20.574 
可能有信息在等着

00:32:20.974 --> 00:32:23.944 
所以你需要收到适当的委托回调

00:32:25.045 --> 00:32:26.680 
我们现在再来构建和运行

00:32:30.150 --> 00:32:33.921 
需要确定错误代码已经不存在

00:32:41.795 --> 00:32:42.563 
好了 非常棒

00:32:42.729 --> 00:32:44.064 
现在没有错误了

00:32:44.531 --> 00:32:46.867 
这就是说正在将应用上下文

00:32:46.934 --> 00:32:49.002 
妥善发送至iOS app

00:32:49.303 --> 00:32:51.939 
但是我需要了解
iOS app确实收到了

00:32:52.439 --> 00:32:54.508 
所以要打开Scheme来查看

00:32:55.509 --> 00:32:56.777 
并选择iOS计划我会选择

00:32:57.845 --> 00:33:02.382 
与Watch模拟器配对的相同模拟器

00:33:02.516 --> 00:33:04.885 
现在来选择iPhone 6模拟器

00:33:05.452 --> 00:33:09.289 
如果点击Control
再按下Build和Run

00:33:09.356 --> 00:33:10.924 
不必构建即可运行

00:33:11.191 --> 00:33:14.528 
这样的话 如果app确实很大

00:33:14.595 --> 00:33:18.498 
我就不必等着它
一直编译并安装app等等

00:33:18.565 --> 00:33:22.202 
我们按下Control
然后无需构建直接运行

00:33:24.204 --> 00:33:27.174 
看似app启动了在iOS app

00:33:27.241 --> 00:33:29.076 
点击了app委托

00:33:29.276 --> 00:33:30.944 
点击委托回调
Did Receive

00:33:31.011 --> 00:33:32.813 
Application
Context

00:33:33.080 --> 00:33:36.316 
然后可以在iOS app上更新UI

00:33:37.751 --> 00:33:38.986 
我们继续

00:33:40.787 --> 00:33:44.558 
现在如果我在Watch
模拟器上我们返回主页

00:33:46.093 --> 00:33:49.796 
调试对话还在iOS app中继续

00:33:50.130 --> 00:33:53.433 
还有Watch app
激活状态 不好意思

00:33:53.600 --> 00:33:56.737 
当它启动时 将会更新应用上下文

00:33:58.105 --> 00:34:00.374 
可以在iOS app再次点击

00:34:00.440 --> 00:34:01.775 
并点击委托回调

00:34:02.342 --> 00:34:05.179 
这非常棒因为现在可以同时

00:34:05.245 --> 00:34:07.314 
调试两个模拟器

00:34:07.381 --> 00:34:09.183 
使用
WatchConnectivity

00:34:09.248 --> 00:34:10.050 
这一点非常棒

00:34:10.117 --> 00:34:12.553 
因此你必须确认所有的调用

00:34:12.652 --> 00:34:16.556 
都是按照在watchOS和iOS中
都需要的顺序进行

00:34:21.228 --> 00:34:21.895 
谢谢大家

00:34:24.630 --> 00:34:27.201 
现在会话部分告一段落我想快速

00:34:27.467 --> 00:34:28.869 
调试一下Instrument

00:34:30.771 --> 00:34:32.773 
先来点击Product
Profile 

00:34:33.607 --> 00:34:36.577 
会启动Instrument
希望会出现模板

00:34:38.045 --> 00:34:39.513 
我的模板选择

00:34:40.147 --> 00:34:41.748 
来看一下 好的

00:34:41.882 --> 00:34:43.483 
找到了时间事件查看器

00:34:44.117 --> 00:34:45.219 
就选择这个

00:34:46.018 --> 00:34:49.690 
接下来不是iOS模拟器

00:34:49.989 --> 00:34:52.458 
我实际是想调试扩展

00:34:53.293 --> 00:34:54.328 
选择这里

00:34:54.661 --> 00:34:55.762 
可以按下Record

00:34:56.663 --> 00:34:58.498 
看似我点击错误

00:34:58.565 --> 00:35:02.002 
打开Watch模拟器 把它放在这里

00:35:03.370 --> 00:35:04.338 
按下Record

00:35:04.671 --> 00:35:07.341 
连上了现在可以调试app

00:35:08.442 --> 00:35:12.412 
在调用树上还可以看到示例列表

00:35:12.479 --> 00:35:15.349 
和iOS app一样
可以做同样的事情

00:35:15.582 --> 00:35:17.251 
可以看到大部分代码都在运行

00:35:17.317 --> 00:35:19.720 
在主线程这里非常棒

00:35:20.187 --> 00:35:22.422 
接着可以返回调用树

00:35:22.856 --> 00:35:26.393 
也就是说使用Instrument

00:35:26.593 --> 00:35:27.694 
可以轻松调试

00:35:28.729 --> 00:35:30.063 
停下这一段会话

00:35:32.666 --> 00:35:34.334 
现在我编写好一个app

00:35:34.401 --> 00:35:37.137 
基本上是有着很简单的界面

00:35:37.204 --> 00:35:38.705 
用到了
WatchConnectivity

00:35:38.772 --> 00:35:40.707 
并且用Instrument
调试了app

00:35:41.041 --> 00:35:43.143 
现在可以和设计师聊聊了

00:35:43.210 --> 00:35:44.444 
可以真正进行完善

00:35:45.779 --> 00:35:47.948 
我们来谈谈可以做些什么

00:35:48.749 --> 00:35:51.752 
那么我们在现有iPhone 
app上添加了Watch app

00:35:52.786 --> 00:35:54.955 
生成了app和Glance界面

00:35:55.923 --> 00:35:57.925 
用到了
WatchConnectivity

00:35:58.492 --> 00:36:01.762 
我们同时调试了
iOS和watchOS app

00:36:02.829 --> 00:36:04.731 
还使用Instrument
调试了app

00:36:07.234 --> 00:36:10.304 
还有几个问题
需要大家运用WatchKit

00:36:10.838 --> 00:36:14.908 
另外还有很多
其他的watchOS 2功能 

00:36:14.975 --> 00:36:16.476 
令我非常兴奋

00:36:16.977 --> 00:36:19.379 
正如我提到的
有Complication

00:36:19.746 --> 00:36:22.182 
昨天在专题讲座中大家可能也见过

00:36:22.382 --> 00:36:24.017 
甚至可以实现Time Travel

00:36:24.084 --> 00:36:28.422 
我觉得不远的将来就可以
大家就像是在来回往复

00:36:28.488 --> 00:36:29.690 
非常神奇 太酷了

00:36:29.957 --> 00:36:32.659 
大家还可以使用
Digital Crown

00:36:32.726 --> 00:36:34.828 
因此可以通过
Digital Crown

00:36:34.895 --> 00:36:37.364 
为用户创建非常直观的体验

00:36:38.632 --> 00:36:41.735 
还可以有简易动画来生成

00:36:42.035 --> 00:36:44.705 
真正的响应式app非常漂亮有趣

00:36:46.006 --> 00:36:47.708 
还可以使用心率传感器

00:36:47.774 --> 00:36:50.410 
那么如果在制作 Workout
app 或其他健身 app

00:36:50.611 --> 00:36:52.613 
可以通过HealthKit 
获取数据

00:36:52.980 --> 00:36:56.750 
并以此为客户提供更好的体验

00:36:57.784 --> 00:37:00.420 
还可以运用交互式
虚拟触觉实现更棒的体验

00:37:00.854 --> 00:37:04.224 
轻触用户并提供部分上下文

00:37:04.291 --> 00:37:06.994 
和在app中的做法一样

00:37:08.262 --> 00:37:13.600 
还有媒体播放就和昨天在
专题讲座中看到的一样

00:37:16.436 --> 00:37:18.705 
大家也可以有音频播放

00:37:18.772 --> 00:37:20.474 
可以在Watch上使用扬声器

00:37:20.674 --> 00:37:22.776 
或是用户可以配上蓝牙耳机

00:37:23.043 --> 00:37:24.745 
接着还可以有路由

00:37:25.913 --> 00:37:28.782 
还可以录制音频首次实现

00:37:28.849 --> 00:37:31.919 
可以使用Watch本身的 麦克风

00:37:32.286 --> 00:37:33.654 
并提供绝妙体验

00:37:35.455 --> 00:37:37.491 
现在来看 Keychain

00:37:37.558 --> 00:37:40.427 
这样可以为用户实现非常安全的体验

00:37:42.462 --> 00:37:46.967 
复习一下
我们可以探讨app的架构

00:37:47.267 --> 00:37:49.903 
增添了Watch app

00:37:50.604 --> 00:37:52.406 
谈到了app生命周期

00:37:53.006 --> 00:37:56.109 
我们用到了不同界面元素 制作app

00:37:56.543 --> 00:37:58.445 
和Glance 还谈到了

00:37:58.512 --> 00:38:00.080 
通知界面以及怎样轻松重复

00:38:00.314 --> 00:38:05.652 
不同的通知 并使用
不同的类别和不同的装载模式

00:38:07.287 --> 00:38:09.857 
我们可以在新的模拟器中构建并运行

00:38:10.424 --> 00:38:11.692 
还调试了app

00:38:12.926 --> 00:38:15.863 
我们用到了不同的watchOS能力

00:38:17.464 --> 00:38:19.566 
网上还有部分更棒的资料

00:38:19.633 --> 00:38:22.135 
《watchOS 2转换指南》
就非常不错

00:38:22.202 --> 00:38:24.271 
我很希望大家都能看看

00:38:24.338 --> 00:38:25.639 
还有些不错的技术支持

00:38:26.073 --> 00:38:28.742 
可以去论坛看看有些示例代码

00:38:28.909 --> 00:38:31.645 
如果有一般性问题
可以联系杰克·贝伦斯

00:38:31.712 --> 00:38:33.413 
他是watchOS框架的开发顾问

00:38:34.481 --> 00:38:37.951 
本周还有很多有趣的讲座

00:38:38.185 --> 00:38:40.921 
可以发现很多信息
WatchKit in Depth

00:38:41.421 --> 00:38:44.925 
Complications 
Layout等等

00:38:45.893 --> 00:38:49.263 
如果有任何问题如果有一般性问题

00:38:49.329 --> 00:38:51.064 
或是首次深入学习代码

00:38:51.665 --> 00:38:54.268 
或是对WatchKit开发很有经验

00:38:54.568 --> 00:38:56.537 
都欢迎过来 我们很高兴
回答大家的任何问题

00:38:58.205 --> 00:38:59.306 
谢谢大家

00:39:00.641 --> 00:39:01.308 
谢谢