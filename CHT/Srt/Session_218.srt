00:00:19.286 --> 00:00:23.824 
歡迎來到自動佈局迷宮 第一部分

00:00:26.860 --> 00:00:27.995 
哇 

00:00:28.629 --> 00:00:29.830 
大家早上好

00:00:29.897 --> 00:00:30.731 
早上好

00:00:31.031 --> 00:00:32.198 
我是傑森·姚

00:00:32.266 --> 00:00:33.834 
是界面設計器工程師

00:00:33.901 --> 00:00:36.703 
我和iOS鍵盤工程師卡西亞
一起給大家來介紹

00:00:37.037 --> 00:00:39.072 
《歡迎來到自動佈局迷宮》

00:00:40.374 --> 00:00:43.443 
作爲開發人員
大家都想設計出

00:00:43.510 --> 00:00:45.512 
令用戶驚喜的漂亮
且出彩的app

00:00:46.213 --> 00:00:49.049 
佈局出色會讓你的
app棋高一着

00:00:49.116 --> 00:00:51.318 
用戶也會對你
大加讚賞

00:00:51.952 --> 00:00:54.454 
需要面對所有
不同的設備

00:00:54.521 --> 00:00:57.324 
配置以及
多任務處理

00:00:57.424 --> 00:01:00.360 
和本地化 
要面面俱到確有難度

00:01:00.627 --> 00:01:02.963 
幸好 有個工具
可以幫忙Auto Layout

00:01:08.168 --> 00:01:11.738 
Auto Layout從本質而言
就是將大量的數據

00:01:12.039 --> 00:01:16.143 
加以約束
將其轉化爲等式

00:01:16.476 --> 00:01:18.846 
運用線性代數
構成一系列框架

00:01:20.447 --> 00:01:23.016 
可以實現
所規定的佈局

00:01:23.450 --> 00:01:25.819 
現在有了Auto Layout
你會發現它的強大

00:01:25.886 --> 00:01:30.891 
和靈活功能 不過貌似
有時也會有些神祕

00:01:31.491 --> 00:01:33.894 
所以纔會安排
今天的講座 發現並

00:01:33.961 --> 00:01:36.129 
揭開瞭解Auto Layout的
神祕面紗所在

00:01:37.965 --> 00:01:42.002 
我們會介紹若干
訣竅和技巧 

00:01:42.503 --> 00:01:47.407 
通過學習 幫助大家
節約開發時間

00:01:47.708 --> 00:01:49.042 
讓大家不至於沮喪

00:01:49.109 --> 00:01:50.110 
現在就開始

00:01:50.611 --> 00:01:53.647 
如果不瞭解Auto Layout
無論你是新人還是老手

00:01:53.714 --> 00:01:55.315 
都有必要
參加本次講座

00:01:57.284 --> 00:01:59.753 
如果需要溫故知新
可以看看WWDC 

00:02:00.254 --> 00:02:01.121 
以往的講座

00:02:01.989 --> 00:02:03.190 
我們來看
概要部分

00:02:05.125 --> 00:02:06.360 
講座分兩部分

00:02:06.693 --> 00:02:09.329 
上午的半天講座
現在就開始

00:02:09.530 --> 00:02:12.866 
下午的部分是在
同一地點 晚些時候開始

00:02:14.101 --> 00:02:15.903 
我們現在開始
瞭解第一個謎題

00:02:16.737 --> 00:02:20.207 
第一謎題
可維護佈局

00:02:22.509 --> 00:02:24.378 
現在 如果你在用
Auto Layout

00:02:24.444 --> 00:02:27.080 
那麼很快就會發現
需要涉及到約束內容

00:02:27.648 --> 00:02:31.652 
設想在兩個視圖之間
建立關係

00:02:32.252 --> 00:02:35.022 
可以在一邊加標籤
在另一邊加包裹

00:02:35.355 --> 00:02:39.793 
確定間距是多少
在父視圖中

00:02:39.860 --> 00:02:40.961 
具體在什麼位置

00:02:41.028 --> 00:02:43.797 
並沿着基線
做出美觀的安排

00:02:44.698 --> 00:02:47.234 
現在無論規格變動的是
運行時間或是

00:02:47.801 --> 00:02:50.737 
設計時間
Auto Layout都可以實現

00:02:53.207 --> 00:02:54.541 
設想一個更爲複雜的例子

00:02:55.108 --> 00:02:56.210 
這裏是App Store

00:02:56.276 --> 00:02:58.078 
還有GarageBand 
顯示爲app

00:02:58.245 --> 00:02:59.580 
其中有若干
控件

00:03:00.247 --> 00:03:03.517 
上端有標籤
和一些按鈕

00:03:03.584 --> 00:03:06.587 
一側還有圖標 
中間是段控件

00:03:06.653 --> 00:03:09.122 
在底部是
幾個預覽圖像

00:03:09.823 --> 00:03:11.925 
可以使用Auto Layout
把內容鋪開

00:03:12.292 --> 00:03:13.794 
適應不同的大小

00:03:14.027 --> 00:03:15.963 
約束大致
是這個樣子

00:03:20.467 --> 00:03:22.469 
現在來看
可維護部分

00:03:23.904 --> 00:03:26.540 
假設你不是
創建佈局的

00:03:26.607 --> 00:03:27.508 
開發人員

00:03:28.342 --> 00:03:30.544 
可是老闆
過來說

00:03:30.711 --> 00:03:34.047 
我要一個新的控件
就在基礎內容下邊

00:03:34.214 --> 00:03:35.382 
在星級評分上面

00:03:35.949 --> 00:03:36.984 
那該怎麼動手開始呢？

00:03:37.818 --> 00:03:39.453 
你可能要查看
這一區域的

00:03:39.520 --> 00:03:41.188 
控件
看看約束規則

00:03:41.622 --> 00:03:44.191 
試着插入
自己的按鈕 打亂佈局

00:03:44.591 --> 00:03:46.660 
再重新組合
希望沒有問題

00:03:47.995 --> 00:03:49.630 
正如大家所想
還有更爲

00:03:49.730 --> 00:03:51.865 
可維護的方法
就是Stack View

00:03:53.467 --> 00:03:57.771 
這是iOS 9的新增功能
比以前Mac上還要好用

00:03:58.505 --> 00:04:00.974 
Stack View能讓你
線性安排視圖

00:04:02.509 --> 00:04:04.444 
Stack View在兩個平臺上
有校驗位

00:04:06.079 --> 00:04:08.282 
是在Auto Layout
上方搭建

00:04:10.017 --> 00:04:13.854 
可以管理子視圖的
約束

00:04:13.921 --> 00:04:15.722 
當加入用戶約束時
你就不用再管理

00:04:15.789 --> 00:04:17.257 
就可運行順暢

00:04:18.858 --> 00:04:22.529 
可以有水平或
垂直定位或是座標軸

00:04:23.797 --> 00:04:25.532 
以及其他
自定義屬性

00:04:25.966 --> 00:04:27.067 
比如對齊等等

00:04:28.202 --> 00:04:30.404 
這裏有全部的
水平堆棧視圖

00:04:30.470 --> 00:04:32.539 
這裏是上端
中心 底部

00:04:32.739 --> 00:04:33.707 
和基線對齊的示例

00:04:33.774 --> 00:04:35.042 
還有其他的
對齊功能

00:04:35.843 --> 00:04:39.012 
以及矢量堆棧視圖

00:04:39.479 --> 00:04:42.883 
這裏是填充示例 
左對齊 居中和右對齊

00:04:44.051 --> 00:04:47.054 
現在 需要注意
一個屬性

00:04:47.120 --> 00:04:49.223 
相當酷
就是分佈屬性

00:04:49.289 --> 00:04:51.358 
這也是NSStackView
和iOS 9的

00:04:51.425 --> 00:04:53.427 
新功能

00:04:54.561 --> 00:04:57.831 
這可以實現
沿着座標軸分佈

00:04:58.832 --> 00:05:02.202 
還可以完成
相當複雜的行爲

00:05:02.436 --> 00:05:04.338 
不需要理會
任何約束規則

00:05:05.072 --> 00:05:06.473 
這裏是填充示例

00:05:07.241 --> 00:05:08.575 
這樣我們來
填充堆棧視圖

00:05:09.343 --> 00:05:12.045 
等量填充 
按比例填充

00:05:12.112 --> 00:05:15.349 
根據子視圖內容大小
以及等距

00:05:15.482 --> 00:05:17.384 
還有其他
分佈選項

00:05:18.051 --> 00:05:21.688 
可以搭建 謝謝 

00:05:26.226 --> 00:05:28.228 
可以從堆棧視圖
來搭建 我給大家

00:05:28.295 --> 00:05:30.397 
Interface Builder
內部的演示

00:05:40.674 --> 00:05:41.508 
好

00:05:41.575 --> 00:05:42.676 
要裝載Xcode 

00:05:43.410 --> 00:05:45.913 
加上視圖控制器
設置場景

00:05:45.979 --> 00:05:47.047 
我只需從
Object Library

00:05:47.114 --> 00:05:48.515 
和Media Library

00:05:48.582 --> 00:05:50.350 
拖拽一系列整包
控件和圖像

00:05:50.417 --> 00:05:52.286 
大家可以看到
這些都是頂層標籤

00:05:52.352 --> 00:05:53.420 
按鈕和圖像

00:05:53.987 --> 00:05:57.558 
現在我們繼續
把這些加入佈局

00:05:58.492 --> 00:06:02.696 
首先來選擇
按鈕和標籤

00:06:03.096 --> 00:06:04.965 
大家要注意
在IB畫布上的

00:06:05.032 --> 00:06:07.935 
新按鈕Stack
View按鈕上的Embed 

00:06:08.435 --> 00:06:11.705 
點擊它的時候
就可以生成堆棧視圖

00:06:11.805 --> 00:06:14.641 
確定我的對齊安排
和座標軸

00:06:21.315 --> 00:06:23.150 
現在來調整
屬性

00:06:23.483 --> 00:06:26.420 
可以看到Property Inspector
在這裏

00:06:29.389 --> 00:06:32.192 
還有座標軸
對齊方式 分佈

00:06:32.259 --> 00:06:33.493 
間距以及
部分選項

00:06:33.560 --> 00:06:35.362 
大家會注意到
這裏還有個加號

00:06:35.762 --> 00:06:38.599 
可以把iOS 9的尺寸
變成可類化

00:06:40.567 --> 00:06:44.037 
現在我們繼續
來調整對齊安排

00:06:44.104 --> 00:06:47.875 
以前用過Auto Layout
來處理約束功能的朋友

00:06:47.941 --> 00:06:50.544 
會注意到
我們現在只需

00:06:50.611 --> 00:06:53.647 
把它從右對齊
改爲左對齊

00:06:55.082 --> 00:06:56.183 
不需要碰任何約束

00:06:57.050 --> 00:07:00.220 
我們繼續 將整包的其他
視圖在這裏做堆棧

00:07:00.287 --> 00:07:03.557 
我會繼續
點擊我的評級

00:07:04.525 --> 00:07:08.095 
堆棧是水平方向
創建水平堆棧視圖

00:07:08.161 --> 00:07:10.130 
那我繼續
把這個拖拽到

00:07:10.664 --> 00:07:11.598 
第一個堆棧視圖

00:07:12.666 --> 00:07:16.470 
現在來選擇
圖標和頭部

00:07:17.938 --> 00:07:20.140 
點擊Stack View按鈕
最後

00:07:20.707 --> 00:07:24.711 
前三個控件和
我的佈局就基本搞定

00:07:31.718 --> 00:07:33.854 
我們來繼續
調整部分屬性

00:07:33.921 --> 00:07:35.622 
選中上層
堆棧視圖

00:07:36.456 --> 00:07:39.626 
我來繼續
先調整對齊方式

00:07:39.693 --> 00:07:43.597 
不是居中 而是填充
那就真是

00:07:43.664 --> 00:07:44.865 
在整個堆棧視圖填充

00:07:44.932 --> 00:07:46.800 
我還要做延伸
那麼這就

00:07:46.867 --> 00:07:49.269 
有點
間距有點太大

00:07:49.603 --> 00:07:54.374 
比如說是20點
也許是25

00:07:57.044 --> 00:08:00.447 
然後在標籤和按鈕
的堆棧視圖

00:08:00.514 --> 00:08:03.283 
加點間距
我來繼續

00:08:03.350 --> 00:08:05.586 
點擊
改變間距

00:08:05.652 --> 00:08:08.188 
我們再加上
大約5點

00:08:08.589 --> 00:08:12.793 
我想在圖標和頭部
之間增加間距

00:08:13.093 --> 00:08:14.394 
我可以繼續

00:08:14.461 --> 00:08:16.730 
選擇使用文檔大綱的
堆棧視圖

00:08:17.431 --> 00:08:21.635 
或者可以按下
鍵盤的Control-Shift

00:08:22.503 --> 00:08:25.772 
點擊圖標
用鼠標點擊

00:08:25.839 --> 00:08:26.740 
所有視圖

00:08:28.876 --> 00:08:31.044 
我們點擊
離我最近的堆棧視圖

00:08:31.111 --> 00:08:36.049 
水平方向的 
再調高25點

00:08:36.283 --> 00:08:37.751 
我們繼續 運行一下

00:08:42.054 --> 00:08:45.025 
大家看 這就是我的佈局
但我們還沒有把它

00:08:45.092 --> 00:08:46.527 
放在父視圖裏
我們會在這裏

00:08:46.593 --> 00:08:48.028 
運用
約束

00:08:48.996 --> 00:08:52.466 
我來繼續
將堆棧視圖

00:08:52.533 --> 00:08:54.468 
放在上端
用左對齊

00:08:55.135 --> 00:08:58.672 
大家要注意
IB畫布上的

00:08:59.973 --> 00:09:03.744 
另一個按鈕
可以打開Pin菜單

00:09:03.810 --> 00:09:05.479 
以及彈出窗口

00:09:05.612 --> 00:09:08.448 
以便加入左對齊
上端約束

00:09:08.749 --> 00:09:10.250 
點擊Add按鈕時

00:09:11.618 --> 00:09:13.086 
就會
加入約束

00:09:13.420 --> 00:09:16.290 
現在 我們還想
加入底部和右對齊

00:09:16.690 --> 00:09:18.258 
但是在
Interface Builder

00:09:18.325 --> 00:09:19.426 
還有另一個
技巧可以使用

00:09:19.593 --> 00:09:21.495 
可以在兩個視圖
中間拖拽

00:09:21.562 --> 00:09:23.230 
我準備從堆棧視圖
拖拽到

00:09:23.830 --> 00:09:26.667 
父視圖
並選中Trailing Space

00:09:26.733 --> 00:09:27.868 
到Container Margin

00:09:28.435 --> 00:09:29.636 
這就會添加
約束

00:09:29.736 --> 00:09:33.307 
熟悉菜單的朋友
可以看到

00:09:33.373 --> 00:09:35.108 
這裏有多了
另外幾個功能

00:09:36.610 --> 00:09:39.847 
我們會在底部
添加另外一個約束

00:09:40.480 --> 00:09:42.015 
在底部的佈局指南中
添加垂直間距

00:09:42.850 --> 00:09:44.718 
現在雙擊
約束

00:09:45.819 --> 00:09:49.857 
設置約束
使之緊靠邊緣

00:09:52.059 --> 00:09:53.560 
現在運行一下

00:09:55.329 --> 00:09:57.197 
就可以看到和父視圖吻合

00:09:57.264 --> 00:09:59.032 
這裏有點不對勁

00:09:59.333 --> 00:10:01.068 
來看一下
段控件

00:10:01.435 --> 00:10:02.469 
有點太長

00:10:02.636 --> 00:10:03.504 
是什麼情況？

00:10:03.770 --> 00:10:06.773 
實際上 如果做旋轉
會有些壓扁變形

00:10:08.609 --> 00:10:13.113 
上端的堆棧視圖中
是在看子視圖的方向

00:10:13.180 --> 00:10:14.848 
所有這些都有着
同樣的優先級

00:10:15.115 --> 00:10:17.050 
同樣的內容吸附性
優先級

00:10:17.117 --> 00:10:19.152 
以及內容
壓縮阻力優先級

00:10:19.686 --> 00:10:22.556 
稍後 我們會
詳細介紹這方面內容

00:10:22.623 --> 00:10:24.992 
不過現在大家需要了解
要告知

00:10:25.058 --> 00:10:26.660 
Stack View
哪一個會贏

00:10:26.960 --> 00:10:30.330 
我只需選擇
段控件

00:10:30.964 --> 00:10:34.101 
進入大小檢測器
選擇優先級部分

00:10:35.202 --> 00:10:37.771 
繼續 調整吸附性
優先級

00:10:38.071 --> 00:10:40.307 
因爲我希望 段控件
吸附性更大些

00:10:41.542 --> 00:10:44.344 
把250改成260

00:10:44.711 --> 00:10:46.813 
只需要比默認值
調高一點即可

00:10:48.248 --> 00:10:52.586 
與之相似 我想
調整壓縮阻力 不要出雜音

00:10:52.853 --> 00:10:58.058 
我來繼續提高
垂直內容壓縮阻力

00:10:58.125 --> 00:11:00.761 
從750改到760

00:11:01.328 --> 00:11:02.696 
現在運行一下

00:11:04.131 --> 00:11:05.666 
看起來好多了

00:11:07.801 --> 00:11:08.936 
要記住 謝謝

00:11:09.002 --> 00:11:10.337 
謝謝

00:11:14.141 --> 00:11:15.709 
還記得最開始的問題麼？

00:11:16.610 --> 00:11:18.445 
老闆想讓我們
加上新的控件

00:11:19.379 --> 00:11:21.148 
這裏就是具體做法

00:11:21.215 --> 00:11:24.852 
告訴老闆 沒問題
可以搞定

00:11:25.185 --> 00:11:28.222 
然後回到桌旁
打開故事板

00:11:29.756 --> 00:11:30.724 
搜索控件

00:11:30.791 --> 00:11:32.125 
本例中 我們
會用按鈕...

00:11:32.459 --> 00:11:34.294 
從圖像庫裏
把它拖拽出來

00:11:34.795 --> 00:11:38.065 
再找到準備
放入的堆棧視圖放進去

00:11:39.032 --> 00:11:40.300 
然後去找杯咖啡

00:11:49.142 --> 00:11:52.613 
我還想指出一點
Stack View處理

00:11:52.679 --> 00:11:54.181 
子視圖的Hidden效果極好

00:11:55.015 --> 00:11:56.183 
可以在程序裏設置或通過

00:11:56.250 --> 00:11:58.051 
Interface Builder
設置

00:11:58.118 --> 00:12:02.322 
看似是崩潰
或是取自視圖層

00:12:02.389 --> 00:12:03.991 
但它仍屬於
Stack View

00:12:04.591 --> 00:12:08.462 
如果我標出Hidden 大家看
一切都會因此做調整

00:12:08.729 --> 00:12:10.430 
我們覺得 大家
會認爲這些是有用的內容

00:12:14.801 --> 00:12:17.171 
這是Stack View的演示

00:12:23.310 --> 00:12:25.879 
我還要說明
動畫效果也非常容易

00:12:26.980 --> 00:12:28.048 
大概是這樣

00:12:29.550 --> 00:12:33.987 
使用帶有Duration塊的
UIView Animate

00:12:34.054 --> 00:12:35.789 
繼續來調整 
子視圖的Hidden屬性

00:12:35.856 --> 00:12:36.957 
我們會特殊處理這些

00:12:37.157 --> 00:12:39.826 
或者可以把其他
可動畫的屬性加在這裏

00:12:39.893 --> 00:12:41.962 
進行調整 
包括堆棧視圖

00:12:42.362 --> 00:12:43.864 
本身的屬性

00:12:44.198 --> 00:12:47.201 
例如 調整座標軸
這樣是

00:12:47.267 --> 00:12:48.468 
在水平和垂直之間

00:12:48.769 --> 00:12:50.003 
你會看到
有些內容非常酷

00:12:56.276 --> 00:12:59.213 
當然 在Cocoa中
是這樣子的

00:12:59.279 --> 00:13:01.281 
使用
NSAnimationContext

00:13:01.348 --> 00:13:02.482 
運行動畫組

00:13:05.252 --> 00:13:06.620 
大家看到了什麼？

00:13:06.920 --> 00:13:08.488 
我們先來看
API

00:13:09.423 --> 00:13:11.625 
很簡單 都很熟悉
非常簡單

00:13:12.226 --> 00:13:13.861 
有座標軸
或者是指定方向

00:13:13.994 --> 00:13:16.697 
來描述堆棧
視圖是水平還是垂直

00:13:17.231 --> 00:13:18.866 
我們看到了
分佈 對齊

00:13:19.233 --> 00:13:21.001 
和間距屬性

00:13:21.635 --> 00:13:23.437 
接着就有辦法
添加新的

00:13:23.504 --> 00:13:24.471 
堆棧內容

00:13:24.638 --> 00:13:25.806 
添加並安排子視圖

00:13:25.873 --> 00:13:27.875 
還可以插入
並刪除

00:13:28.542 --> 00:13:31.011 
希望大家注意
Arrange Subview屬性

00:13:32.312 --> 00:13:37.918 
這個屬性可以恢復
屬於堆棧視圖的

00:13:38.852 --> 00:13:40.254 
所有視圖
的子集

00:13:40.621 --> 00:13:43.290 
可以恢復目前堆棧
的視圖

00:13:44.892 --> 00:13:47.694 
意思是說
可以實現沒有被

00:13:47.761 --> 00:13:50.397 
Stack View
堆棧的視圖 

00:13:50.464 --> 00:13:52.699 
例如裝飾器或疊加層
並實現潔淨的視圖層次

00:13:52.766 --> 00:13:54.568 
我們覺得 大家
會認爲這些是有用的內容

00:13:55.569 --> 00:14:00.007 
在這些情況下大家只需要調用Add
Subview即可

00:14:01.375 --> 00:14:02.509 
在這裏我們看到什麼？

00:14:03.243 --> 00:14:06.813 
Stack View很容易設計
很容易維護

00:14:08.182 --> 00:14:10.851 
相信大家會
構建很多這類東西

00:14:11.585 --> 00:14:14.321 
因爲Stack View
是關於佈局

00:14:16.256 --> 00:14:20.027 
因此不需要
修改自己的背景

00:14:20.294 --> 00:14:21.929 
我們可以實現
部分優化

00:14:22.162 --> 00:14:24.865 
因此我們有了特殊的
Transform Layer類

00:14:24.932 --> 00:14:28.101 
不需要自我修改就可以讓
Stack View運行更快

00:14:28.202 --> 00:14:30.170 
比正常視圖
更有表現力

00:14:30.704 --> 00:14:31.972 
因此是輕量級的

00:14:38.812 --> 00:14:41.782 
我們討論過的示例
是有着許多約束的

00:14:42.449 --> 00:14:45.552 
有着些許
維護難度

00:14:46.486 --> 00:14:48.288 
從四個到若干堆棧視圖都有涉及
這讀起來要好得多

00:14:49.556 --> 00:14:52.826 
我們覺得大家可以用
堆棧視圖設計出

00:14:53.260 --> 00:14:56.330 
大部分用戶界面
所以建議從Stack View開始

00:14:56.830 --> 00:14:58.165 
使用所需約束

00:14:58.599 --> 00:14:59.800 
這就是Stack View

00:15:06.039 --> 00:15:09.877 
有些情況下
不只要用到Stack View

00:15:10.844 --> 00:15:11.945 
就需要...

00:15:12.012 --> 00:15:14.715 
我想邀請朋友
卡西亞來聊聊

00:15:14.781 --> 00:15:16.483 
佈局引擎

00:15:22.322 --> 00:15:23.757 
大家好
我是卡西亞

00:15:23.824 --> 00:15:26.693 
我在iOS Keyboards
Team就職 我來這裏和大家

00:15:26.760 --> 00:15:28.896 
聊聊適當的處理
和提供佈局引擎

00:15:28.962 --> 00:15:31.965 
它有些任性
只希望是由你來完成

00:15:32.032 --> 00:15:34.268 
如果大家處理正確
它就可以正確完成任務

00:15:34.968 --> 00:15:37.237 
正如大家
在本週中所見

00:15:37.304 --> 00:15:39.806 
我們有新的自適配環境
以及所有

00:15:39.873 --> 00:15:43.043 
不同屏幕
大小的iPhone

00:15:43.110 --> 00:15:46.213 
關鍵的一點在於
在所有這些環境下

00:15:46.280 --> 00:15:47.848 
對佈局屬性進行規劃

00:15:47.915 --> 00:15:50.951 
而不是花費太多時間
在每個屏幕上

00:15:51.018 --> 00:15:51.952 
進行重複

00:15:52.386 --> 00:15:53.954 
大多數人 
一想到約束

00:15:54.021 --> 00:15:55.455 
都是這麼認爲

00:15:55.756 --> 00:15:58.091 
你生成部分視圖
用不同方式

00:15:58.158 --> 00:16:01.461 
創建部分約束
相當於是把它們扔進黑洞

00:16:01.995 --> 00:16:02.829 
會出現問題

00:16:03.497 --> 00:16:04.831 
在佈局會彈出
另一端

00:16:05.199 --> 00:16:07.568 
希望是你的 也可能不是

00:16:07.634 --> 00:16:11.572 
今天我真正想做的是
試着解開

00:16:11.638 --> 00:16:13.807 
部分謎團

00:16:13.874 --> 00:16:16.109 
那麼每次都會
碰到佈局

00:16:16.176 --> 00:16:18.478 
首先 我們來談談
改變約束

00:16:19.746 --> 00:16:22.082 
我談到改變約束時
主要是在談論

00:16:22.149 --> 00:16:24.318 
激活和關閉
約束

00:16:24.918 --> 00:16:26.720 
以前用過
Auto Layout的朋友

00:16:26.787 --> 00:16:29.389 
以及也許還記得
我們起初的

00:16:29.456 --> 00:16:31.925 
對視圖增加和刪除
給出的約束的概念

00:16:32.359 --> 00:16:33.627 
不要再這麼做了

00:16:33.727 --> 00:16:35.696 
激活和關閉
更好些

00:16:35.762 --> 00:16:38.799 
這是二者NSLayout
約束的類方法

00:16:39.366 --> 00:16:42.636 
使用
激活和關閉 

00:16:42.703 --> 00:16:44.037 
有一些
真正的好處

00:16:44.371 --> 00:16:45.873 
約束髮現
自己的容器

00:16:45.939 --> 00:16:47.140 
這樣更有效率

00:16:47.641 --> 00:16:49.109 
你不必擁有
自己佈局中的

00:16:49.176 --> 00:16:50.577 
所有視圖
才能以便使用

00:16:51.311 --> 00:16:53.914 
這其實可以總結成
不要再使用

00:16:53.981 --> 00:16:55.082 
添加和刪除

00:16:55.549 --> 00:16:56.884 
要用激活和關閉

00:16:57.584 --> 00:17:00.654 
考慮改變約束時
還需要

00:17:01.021 --> 00:17:03.357 
注意
幾個問題

00:17:04.424 --> 00:17:07.361 
第一 永遠不要關閉
self.view.constraints

00:17:07.426 --> 00:17:08.996 
中的所有內容

00:17:09.195 --> 00:17:10.664 
如果有誰真這麼做了

00:17:10.731 --> 00:17:13.032 
可能會遇到
一些奇怪的問題

00:17:13.634 --> 00:17:15.702 
那個數組中的
並非所有的約束都屬於你

00:17:16.569 --> 00:17:18.605 
比如在視圖中
用於自行設置的功能

00:17:18.972 --> 00:17:20.641 
那就會出現
奇怪的問題

00:17:21.241 --> 00:17:22.342 
所以不要這麼做

00:17:22.843 --> 00:17:24.310 
一會兒就會知道答案

00:17:25.078 --> 00:17:27.614 
相反只需要
對需要稍後修改的約束

00:17:27.681 --> 00:17:30.484 
進行參考
無論是在約束數組

00:17:30.551 --> 00:17:32.586 
還是在
單獨的約束中均是如此

00:17:32.686 --> 00:17:35.055 
這樣就按照自己想要的方式
管理內容了

00:17:35.155 --> 00:17:37.391 
我們先來看
改變約束

00:17:44.031 --> 00:17:47.100 
這裏是個 iPad app
我在裏面做了

00:17:47.167 --> 00:17:52.139 
一組行星
都按照iPad設置好了

00:17:52.206 --> 00:17:54.074 
還有iPhone模式

00:17:54.141 --> 00:17:55.976 
多任務處理
應該沒有問題

00:17:56.610 --> 00:17:59.012 
只是我並沒有當真
刪除任何約束

00:17:59.613 --> 00:18:02.049 
所以當我從漂亮的
垂直簡約佈局回到

00:18:02.115 --> 00:18:04.852 
平常的佈局時
之前所有

00:18:04.918 --> 00:18:06.553 
漂亮的曲線
都會消失不見

00:18:07.321 --> 00:18:09.289 
我可能
首先想做的是

00:18:09.356 --> 00:18:12.125 
進行修正 

00:18:12.192 --> 00:18:15.963 
刪除父視圖中的
所有約束

00:18:19.466 --> 00:18:20.934 
當我這麼做時
還需要重新

00:18:21.001 --> 00:18:22.936 
激活任何
共享約束

00:18:26.440 --> 00:18:29.943 
但是如果嘗試這種方式
你將看到

00:18:30.110 --> 00:18:31.645 
會出現各種
令人興奮的事情

00:18:32.579 --> 00:18:34.314 
這裏又是我的正常佈局
非常好

00:18:34.915 --> 00:18:37.184 
現在還是很好

00:18:38.852 --> 00:18:40.521 
嗯 不太好了

00:18:41.121 --> 00:18:43.524 
如果我返回
正常佈局

00:18:43.590 --> 00:18:46.126 
我其實不希望
這些行星有那麼大

00:18:46.493 --> 00:18:47.928 
這不是
我的本意

00:18:48.562 --> 00:18:49.897 
怎麼才能妥當處理呢？

00:18:49.963 --> 00:18:52.799 
我準備花些時間
抓取這個代碼 這樣

00:18:52.866 --> 00:18:55.702 
就不必看我把全文再打一遍了出來了

00:18:56.103 --> 00:18:58.071 
那麼在特性集合中
已經改變了 只需要

00:18:58.138 --> 00:19:02.543 
查看每個環境下
你需要改變的

00:19:02.609 --> 00:19:04.711 
另一組約束
是否激活

00:19:05.012 --> 00:19:07.147 
我現在有兩個數組
各有8個約束

00:19:07.481 --> 00:19:10.584 
以區分行星的
垂直

00:19:10.918 --> 00:19:12.719 
對齊狀況

00:19:12.953 --> 00:19:14.721 
如果我查看
確認是激活狀態

00:19:14.988 --> 00:19:17.524 
刪除或關閉
我不再需要的內容

00:19:17.591 --> 00:19:21.061 
再激活新的部分
現在看上去好多了

00:19:23.530 --> 00:19:24.998 
正常

00:19:28.368 --> 00:19:29.736 
還是正常

00:19:30.637 --> 00:19:33.707 
簡約再回到正常

00:19:34.141 --> 00:19:35.542 
這就是我
實際要的結果

00:19:39.046 --> 00:19:40.047 
哦 謝謝大家

00:19:40.547 --> 00:19:42.482 
Auto Layout 
很酷的一點是

00:19:42.549 --> 00:19:44.852 
你還可以將
約束改變做動畫處理

00:19:45.352 --> 00:19:49.389 
這裏有個雙擊手勢
可在正常和簡約佈局間

00:19:49.456 --> 00:19:53.093 
進行動畫處理
如果父視圖需要的話 

00:19:53.160 --> 00:19:56.663 
只要在調用佈局時
拖拽激活和關閉 

00:19:56.730 --> 00:19:58.565 
進入動畫塊即可

00:19:59.066 --> 00:20:02.769 
大家會看到 如果我雙擊
就可以在這組視圖和

00:20:03.003 --> 00:20:05.839 
兩行代碼之間
輕鬆移動

00:20:06.373 --> 00:20:09.877 
如果想來點花樣
可以參照所有

00:20:09.943 --> 00:20:12.980 
這些單獨的約束
使用關鍵幀動畫

00:20:13.647 --> 00:20:16.850 
給app中的內容
加點料

00:20:17.951 --> 00:20:19.486 
這就是

00:20:19.553 --> 00:20:21.455 
適當激活
和關閉約束

00:20:21.588 --> 00:20:24.791 
我們對改變約束
瞭解了哪些內容？

00:20:25.325 --> 00:20:26.226 
對 第一點

00:20:26.293 --> 00:20:28.896 
不要關閉
self.view.constraints

00:20:28.962 --> 00:20:30.030 
對此我們非常清楚了

00:20:30.430 --> 00:20:31.965 
參考約束
將在將來

00:20:32.032 --> 00:20:33.100 
帶來影響

00:20:33.467 --> 00:20:35.369 
會讓所有內容
都運行地更好

00:20:35.435 --> 00:20:36.870 
可以實現很酷的效果
比如動畫

00:20:37.337 --> 00:20:39.673 
大家也可以將
改變約束做動畫處理

00:20:40.040 --> 00:20:42.176 
只要拖拽入
View Animation塊即可

00:20:42.543 --> 00:20:43.710 
相當非常酷

00:20:43.777 --> 00:20:45.546 
我們現在還處於
設計佈局的

00:20:45.612 --> 00:20:47.514 
基礎部分
我們仍然還有視圖

00:20:47.581 --> 00:20:49.550 
和約束並把他們
放入佈局引擎

00:20:50.117 --> 00:20:52.319 
但是如果要爲
佈局引擎提供更多信息

00:20:52.386 --> 00:20:56.223 
在所有這些
自適配環境下

00:20:56.290 --> 00:20:58.125 
我們可以獲得很多
更好的結果

00:20:59.359 --> 00:21:02.296 
我們已經把所有
約束都安排好

00:21:02.362 --> 00:21:03.864 
現在我想講一講
大小尺寸

00:21:04.898 --> 00:21:06.934 
那麼謎題三
就是視圖大小

00:21:08.335 --> 00:21:10.037 
有兩種不同方法
來規定視圖大小

00:21:10.237 --> 00:21:11.605 
這顯而易見

00:21:11.672 --> 00:21:14.741 
我希望視圖寬200點
高300點

00:21:15.309 --> 00:21:17.344 
相反 還可以有 
不同方式

00:21:17.411 --> 00:21:21.281 
生成約束
以便和我們現在

00:21:21.381 --> 00:21:23.884 
所有不同的
環境相匹配

00:21:23.951 --> 00:21:26.720 
我們先從
其中的內部內容尺寸開始

00:21:27.354 --> 00:21:29.656 
許多視圖都有這個
如標籤和圖像視圖

00:21:30.190 --> 00:21:32.559 
基本上就是
具備內容後視圖

00:21:32.626 --> 00:21:34.761 
應該具備的
尺寸大小

00:21:35.696 --> 00:21:38.665 
引擎看着它
試圖解決這個

00:21:39.199 --> 00:21:43.403 
尺寸的佈局問題
就會生成

00:21:43.470 --> 00:21:45.072 
內部尺寸約束

00:21:45.806 --> 00:21:48.876 
不過 它無法確保
佈局大小 因爲自適配

00:21:48.942 --> 00:21:51.378 
這類問題所致
它需要少許

00:21:51.445 --> 00:21:52.779 
伸縮視圖

00:21:52.913 --> 00:21:55.549 
用戶不希望出現
這類情況

00:21:55.616 --> 00:21:56.950 
但你可能會
在這裏那裏有幾個

00:21:57.017 --> 00:21:58.118 
多餘的空隙點

00:21:58.919 --> 00:22:02.055 
可以用這個來
展示你的視圖

00:22:02.122 --> 00:22:04.024 
表明你不一定
確定標籤

00:22:04.091 --> 00:22:06.126 
要這麼寬才行

00:22:06.193 --> 00:22:07.961 
就是和內容
一樣寬

00:22:09.263 --> 00:22:11.131 
但是如果需要定義
特定的視圖尺寸

00:22:11.965 --> 00:22:13.200 
那就從約束開始

00:22:13.901 --> 00:22:15.702 
這樣做
非常容易

00:22:16.069 --> 00:22:18.172 
視圖應該是
我的父視圖的寬度一半

00:22:18.672 --> 00:22:19.806 
這裏應該是
我的父視圖的

00:22:19.873 --> 00:22:20.774 
的高度的四分之三

00:22:21.141 --> 00:22:22.743 
這個應該是
和旁邊的視圖等大

00:22:23.810 --> 00:22:26.480 
但是如果絕對需要的話
還可以覆蓋

00:22:26.547 --> 00:22:27.714 
內部內容尺寸

00:22:28.048 --> 00:22:30.284 
這樣做 只能
是出於兩個原因

00:22:30.784 --> 00:22:33.020 
其一是你無法
從約束那裏

00:22:33.086 --> 00:22:34.087 
獲得尺寸信息

00:22:35.022 --> 00:22:38.192 
其二可能是如果你在
視圖中使用了自定義繪圖

00:22:38.258 --> 00:22:40.394 
但在很多情況下
你還可以設置

00:22:40.794 --> 00:22:43.363 
這個視圖的約束
而不必去做任何

00:22:43.430 --> 00:22:45.399 
需要覆蓋內部
內容尺寸的事情

00:22:45.933 --> 00:22:47.868 
如果確實覆蓋了
內部內容尺寸

00:22:47.935 --> 00:22:50.170 
你還要負責
在出現滑動類改變

00:22:50.470 --> 00:22:53.173 
或文本改變的時候
使之失效

00:22:53.240 --> 00:22:55.609 
這樣你需要獲得
動態文本 本地化

00:22:55.676 --> 00:22:59.546 
或任何這類需要
導致視圖

00:22:59.613 --> 00:23:01.315 
需要重新計算
內部尺寸的內容

00:23:02.149 --> 00:23:05.352 
我們現在來看
用約束設置視圖

00:23:05.419 --> 00:23:07.421 
而不使用任何
特殊點的尺寸

00:23:07.487 --> 00:23:08.856 
都是在關係當中

00:23:09.022 --> 00:23:10.457 
這裏是個
標準圖像視圖

00:23:11.024 --> 00:23:13.126 
我希望在這是
視圖的主要部分

00:23:13.760 --> 00:23:16.797 
因此我想讓寬度
等於它所在

00:23:16.864 --> 00:23:18.565 
視圖的四分之三

00:23:18.632 --> 00:23:20.534 
這意味着在它
所在的每個環境

00:23:20.767 --> 00:23:22.402 
寬度都是
該視圖的四分之三

00:23:22.703 --> 00:23:23.971 
先來設置

00:23:25.072 --> 00:23:27.975 
然後獲得這一比例
我是從

00:23:28.075 --> 00:23:31.311 
父視圖計算
再乘以1.5

00:23:31.378 --> 00:23:33.046 
來得到
高度值

00:23:33.647 --> 00:23:35.282 
這樣在多任務處理時
可以在所有設備

00:23:35.349 --> 00:23:38.385 
和所有模式下
獲得一致的佈局

00:23:39.486 --> 00:23:43.390 
因此視圖尺寸
很重要 對比例

00:23:43.457 --> 00:23:45.859 
依賴性越高 
獲得優質佈局的可能性越大

00:23:45.926 --> 00:23:48.362 
這將非常便於你
在所有這些

00:23:48.428 --> 00:23:50.330 
我們提供的不同
屏幕上放置內容

00:23:50.764 --> 00:23:52.900 
很多人在考慮
尺寸視圖時

00:23:52.966 --> 00:23:55.636 
都會考慮到一個問題
就是自適應調整視圖

00:23:56.203 --> 00:23:58.772 
特別是自適應
調整表視圖單元格

00:23:59.640 --> 00:24:02.743 
這些單元格從
其內容中獲得高度

00:24:03.243 --> 00:24:05.646 
所以不必在表視圖中
從上到下

00:24:05.712 --> 00:24:06.780 
都是一個單元格大小

00:24:06.847 --> 00:24:08.549 
可以根據
其中的內容

00:24:08.615 --> 00:24:09.716 
確定不同的大小

00:24:10.284 --> 00:24:11.518 
實際上不必

00:24:11.585 --> 00:24:13.820 
自己計算
每行的高度

00:24:14.221 --> 00:24:15.489 
約束可以幫助
完成這些工作

00:24:15.689 --> 00:24:19.426 
所以自適應調整

00:24:20.194 --> 00:24:21.995 
需要從約束中獲得大小尺寸

00:24:22.429 --> 00:24:24.064 
這裏也不是以點來計

00:24:24.131 --> 00:24:25.933 
而是按照比例
是依賴例如

00:24:25.999 --> 00:24:28.068 
內部內容尺寸這類東西
幫你完成

00:24:28.368 --> 00:24:32.172 
表視圖單元格
已經定義好寬度

00:24:32.239 --> 00:24:33.373 
所以只需要考慮高度

00:24:33.841 --> 00:24:35.809 
可以利用比例
來完成

00:24:36.343 --> 00:24:37.678 
這裏是個表視圖單元格

00:24:38.011 --> 00:24:40.781 
標籤應該是
圖像視圖的兩倍寬

00:24:41.481 --> 00:24:43.717 
中間有一點
空隙

00:24:44.985 --> 00:24:48.488 
因此當我的標籤因爲
文本內容多更高些時

00:24:49.289 --> 00:24:52.259 
表視圖單元格會
相應增加與之適應

00:24:53.193 --> 00:24:55.696 
我們現在來看個
短的演示瞭解是怎麼回事

00:25:02.369 --> 00:25:04.872 
好這裏是表視圖單元格
我已經

00:25:04.938 --> 00:25:06.540 
設置了
水平方向束縛

00:25:07.140 --> 00:25:09.243 
那麼如果就這樣
設計和運行

00:25:09.309 --> 00:25:12.145 
結果不會完全
符合我的預期

00:25:13.747 --> 00:25:15.616 
所有內容都會
有些變形

00:25:15.682 --> 00:25:17.751 
預計的表視圖
高度爲60

00:25:17.818 --> 00:25:19.520 
所以默認
畫在這裏

00:25:19.920 --> 00:25:22.956 
我想做的是
告訴表視圖單元格

00:25:23.323 --> 00:25:28.195 
如果標籤內容增加
它也要隨之改變

00:25:28.262 --> 00:25:33.600 
我通過把頂錨和底錨
放在一起來實現

00:25:34.001 --> 00:25:36.470 
那麼標籤就會繼續
拉動表視圖

00:25:36.537 --> 00:25:38.305 
單元格的尺寸
使其更高

00:25:38.872 --> 00:25:42.843 
頂邊距 底邊距
到容器邊緣

00:25:43.177 --> 00:25:44.378 
來看看效果怎樣

00:25:47.247 --> 00:25:48.582 
好多了

00:25:49.116 --> 00:25:50.617 
但還是和我
想要的不太一樣

00:25:50.751 --> 00:25:53.086 
因爲我們是
這樣的單元格

00:25:53.420 --> 00:25:55.055 
而在圖像中切掉了

00:25:55.122 --> 00:25:56.590 
一部分 因爲標籤
不夠高

00:25:57.124 --> 00:25:59.793 
爲解決這個問題
我們可以利用

00:25:59.893 --> 00:26:02.329 
視圖可以延伸至
內部內容尺寸以外的特性

00:26:02.396 --> 00:26:05.832 
告訴標籤
它應該至少

00:26:05.899 --> 00:26:08.435 
和圖像一樣高才行

00:26:09.336 --> 00:26:11.705 
所以標籤會
在周圍多一些間隙

00:26:11.772 --> 00:26:17.344 
可以允許
從圖像的高度開始

00:26:17.578 --> 00:26:19.146 
再有所延伸
至合適高度爲止

00:26:19.213 --> 00:26:20.914 
大家看不到
額外的間距

00:26:20.981 --> 00:26:22.316 
文本位置很好
都是居中

00:26:22.783 --> 00:26:25.052 
但是標籤仍在
定義表視圖

00:26:25.118 --> 00:26:27.387 
單元格的高度

00:26:28.288 --> 00:26:29.623 
現在看起來好多了

00:26:29.790 --> 00:26:31.792 
我所有的單元格
大小都合適

00:26:32.326 --> 00:26:34.127 
我可以看到
想看的所有內容

00:26:34.194 --> 00:26:36.530 
在創建自適應
調整的表視圖單元格時

00:26:36.597 --> 00:26:38.432 
需要做的就是
這些

00:26:39.132 --> 00:26:41.468 
只要確認所有內容
都完全定義即可

00:26:47.040 --> 00:26:49.443 
謝謝好
那麼關於視圖大小

00:26:49.510 --> 00:26:50.644 
我們講了些什麼呢？

00:26:50.711 --> 00:26:52.079 
部分視圖具備
內部內容尺寸

00:26:52.145 --> 00:26:54.147 
利用這個屬性
來定義其他

00:26:54.214 --> 00:26:55.382 
視圖的關係

00:26:55.449 --> 00:26:57.818 
可能的話 約束應該
定義大小

00:26:58.218 --> 00:27:00.654 
如果不能 則要覆蓋
內部內容尺寸

00:27:01.021 --> 00:27:03.590 
但是要確保這麼做時
將內部內容尺寸設爲無效

00:27:03.891 --> 00:27:05.626 
對於自適應調整
視圖 需要

00:27:05.692 --> 00:27:07.361 
完全在約束中
定義尺寸

00:27:08.495 --> 00:27:09.730 
在哪裏設計
佈局呢？

00:27:09.930 --> 00:27:11.365 
我們有
原始信息

00:27:12.165 --> 00:27:14.001 
我們會加上
部分尺寸約束

00:27:14.768 --> 00:27:16.537 
從我們放在
一起的視圖

00:27:16.603 --> 00:27:18.005 
得出內部內容尺寸

00:27:18.205 --> 00:27:19.506 
接下來是什麼？

00:27:19.573 --> 00:27:22.476 
怎樣幫助佈局
引擎瞭解我們需要什麼？

00:27:22.910 --> 00:27:24.144 
我們要給出一些優先級

00:27:24.878 --> 00:27:27.514 
這就是謎題5

00:27:27.948 --> 00:27:30.083 
如果接觸
Auto Layout已有一段時間

00:27:30.150 --> 00:27:31.451 
可能會遇到過
這樣的情況

00:27:31.518 --> 00:27:33.987 
即視圖沒有
按照父視圖所設置

00:27:34.054 --> 00:27:35.756 
位於相應位置

00:27:36.223 --> 00:27:38.825 
也許在每次設計和運行中
都會有所不同

00:27:39.126 --> 00:27:41.828 
或是在旋轉或
修改尺寸後 都會有所不同

00:27:42.296 --> 00:27:43.830 
這就是歧義

00:27:44.464 --> 00:27:46.166 
出現這種情況
可能是由於兩種不同原因

00:27:46.733 --> 00:27:48.435 
一是在你需要
的方向中

00:27:48.502 --> 00:27:50.070 
並沒有
足夠的約束

00:27:50.671 --> 00:27:54.641 
例如 我想把Saturn
放在中間的位置

00:27:54.708 --> 00:27:57.778 
就是這些虛線上
但是當我運行

00:27:57.845 --> 00:28:00.747 
app時 它卻跑到
左邊或右邊

00:28:01.281 --> 00:28:02.783 
這也許是說明
我沒有足夠的

00:28:02.850 --> 00:28:05.519 
水平約束告知
引擎該把Saturn放在哪兒

00:28:05.686 --> 00:28:07.487 
垂直方向 看似還好
那不錯

00:28:07.921 --> 00:28:10.791 
還有一個因素
可能導致如此是

00:28:10.858 --> 00:28:12.059 
這是等值不需要的優先級

00:28:12.492 --> 00:28:15.462 
等值所需的優先級
會調用不合格的約束

00:28:15.896 --> 00:28:17.731 
如果佈局引擎不能如此
解決視圖問題的話

00:28:18.098 --> 00:28:21.201 
等值不需要的優先級
是指引擎

00:28:21.268 --> 00:28:22.603 
已經爲替你做了選擇

00:28:23.437 --> 00:28:26.006 
它已經盡力
做出好的選擇

00:28:26.640 --> 00:28:28.442 
但是它確實不知道
你想要什麼

00:28:28.642 --> 00:28:31.445 
所以需要提供
更多的內容來實現目的

00:28:32.646 --> 00:28:33.981 
優先級怎麼起作用呢?

00:28:34.648 --> 00:28:37.618 
區間是從1到1000
我們還有幾個常數

00:28:37.684 --> 00:28:40.254 
幫助平衡
優先級

00:28:40.387 --> 00:28:42.990 
佈局優先級
需要的是1000

00:28:43.657 --> 00:28:46.393 
默認高度爲750
默認低點是250

00:28:47.060 --> 00:28:49.463 
在可視化格式語言中
是這樣的效果

00:28:49.530 --> 00:28:52.866 
只需要在希望使用的
數字前加上@符號即可

00:28:52.999 --> 00:28:54.501 
在Interface Builder中
可以直接

00:28:54.568 --> 00:28:55.969 
把它固定在文本域中

00:28:56.737 --> 00:28:59.439 
如果使用顯性約束
這就是屬性

00:29:00.073 --> 00:29:01.875 
你可以實際上
運用這些常數

00:29:02.142 --> 00:29:04.111 
或數字或是
二者組合

00:29:04.811 --> 00:29:07.714 
進行比較時
優先級最高的會勝出

00:29:08.582 --> 00:29:11.585 
我們先來看看
在內容優先級

00:29:11.652 --> 00:29:13.153 
上下文中
的情況

00:29:13.754 --> 00:29:15.155 
但是必須注意的是

00:29:15.222 --> 00:29:18.892 
這個系統有着
安排內部視圖的部分屬性

00:29:19.393 --> 00:29:22.796 
在iOS中 我們的系統
佈局尺寸符合50的大小

00:29:23.063 --> 00:29:26.166 
有若干窗口
優先級在500左右

00:29:26.233 --> 00:29:30.437 
490 500和510
OS X會用到

00:29:30.637 --> 00:29:32.673 
如果來看
NSLayoutConstraint頭部

00:29:32.739 --> 00:29:34.041 
你會看到
這些數字具體是多少

00:29:34.107 --> 00:29:35.776 
如果把這些
數字設置爲等值

00:29:35.843 --> 00:29:37.511 
最後會出現
歧義的情況

00:29:37.578 --> 00:29:38.679 
大家可能會遇到

00:29:38.745 --> 00:29:40.881 
你想要使用比
系統採用的

00:29:40.948 --> 00:29:42.716 
優先級稍高
或稍低的值

00:29:43.483 --> 00:29:44.818 
內容優先級

00:29:45.519 --> 00:29:47.287 
這些就是視圖
處理內容的方法

00:29:47.955 --> 00:29:50.123 
默認狀態都是
設置爲Not Required

00:29:50.824 --> 00:29:52.326 
你不應該
設置爲Required

00:29:53.093 --> 00:29:54.761 
內容需要
能移動一點

00:29:54.962 --> 00:29:55.896 
我們有動態文本

00:29:55.963 --> 00:29:56.864 
有本地化

00:29:56.930 --> 00:30:00.167 
可能還要讓用戶
可以選擇不同的圖像 像這樣

00:30:00.501 --> 00:30:02.436 
還需要具備
一點自由調整的空間

00:30:02.503 --> 00:30:04.238 
不能說一直都是
這樣的大小

00:30:04.471 --> 00:30:06.707 
最後都會是
不合乎要求的約束

00:30:07.407 --> 00:30:10.210 
但是未經修正
的相同優先級

00:30:10.277 --> 00:30:11.778 
會導致歧義 我剛說過

00:30:12.179 --> 00:30:14.948 
我們來看看
使用內容吸附性

00:30:15.015 --> 00:30:16.583 
優先級的實例
這是我們所擁有的

00:30:16.650 --> 00:30:18.018 
兩種內容
優先級之一

00:30:18.852 --> 00:30:20.721 
這裏是
文本域和按鈕

00:30:21.688 --> 00:30:23.557 
文本域都
偏到了這邊

00:30:23.624 --> 00:30:24.925 
按鈕都
分散開了

00:30:24.992 --> 00:30:28.128 
這是因爲
它們的默認內容

00:30:28.195 --> 00:30:30.430 
吸附性優先級都是250

00:30:31.064 --> 00:30:32.566 
引擎需要
做出選擇

00:30:32.633 --> 00:30:35.435 
它不清楚
答案是這個還是這個

00:30:36.436 --> 00:30:39.940 
你實際上可以告訴它
每次應該選擇哪個答案

00:30:40.007 --> 00:30:43.143 
而不是根據情況
選擇這個或那個

00:30:43.410 --> 00:30:47.147 
如果把按鈕的
內容吸附性優先級

00:30:47.214 --> 00:30:49.850 
下調到249
就會得到第一個佈局

00:30:50.250 --> 00:30:53.854 
這是因爲引擎
看到約束

00:30:53.921 --> 00:30:55.355 
和優先級
覺得 嗯

00:30:55.622 --> 00:30:57.891 
文本視圖吸附性
優先級相當重要

00:30:58.392 --> 00:31:00.594 
但是按鈕吸附性優先級
沒那麼重要

00:31:00.928 --> 00:31:02.963 
我可以繼續
從內容中伸出一塊

00:31:03.330 --> 00:31:06.466 
填充視圖的
水平部分

00:31:07.467 --> 00:31:08.669 
同時 如果
用到按鈕

00:31:08.735 --> 00:31:11.171 
並把內容吸附性
優先級置於

00:31:11.238 --> 00:31:13.440 
文本域之上
就會得到另一種解決方案

00:31:13.740 --> 00:31:15.042 
因爲引擎會覺得

00:31:15.108 --> 00:31:17.311 
現在我要緊密
吸附按鈕文本

00:31:17.377 --> 00:31:19.379 
這就意味着
我可以伸長文本域

00:31:19.680 --> 00:31:21.114 
以便解決佈局問題

00:31:21.715 --> 00:31:23.116 
在調整這類
發生歧義的情況時

00:31:23.183 --> 00:31:26.386 
所需要做的
就是這些

00:31:26.587 --> 00:31:28.956 
還有一類
內容優先級

00:31:29.022 --> 00:31:30.257 
是壓縮阻力

00:31:30.824 --> 00:31:35.329 
這是視圖多大程度上
可以阻止內容的壓扁

00:31:35.896 --> 00:31:39.266 
順便說一下 壓扁在這裏
是個技術術語

00:31:39.333 --> 00:31:41.568 
需要給人留下深刻印象時
可以隨便使用

00:31:42.302 --> 00:31:47.040 
圖像視圖的壓縮阻力
和水平方向的

00:31:47.107 --> 00:31:49.142 
標籤默認
爲750

00:31:49.209 --> 00:31:51.778 
這個優先級相當高
因爲平時

00:31:51.845 --> 00:31:53.113 
你希望看到所有內容

00:31:53.780 --> 00:31:55.649 
但是如果要本地化
這個app該怎麼辦？

00:31:56.216 --> 00:31:58.285 
如果有了這兩個
彼此競爭的因素

00:31:58.552 --> 00:32:00.554 
而所用的語言中
“紅色”這個詞

00:32:00.621 --> 00:32:01.555 
非常長 比如波蘭語

00:32:02.189 --> 00:32:03.223 
則可能會被剪裁

00:32:03.290 --> 00:32:05.359 
這就是引擎
必須做出的決定之一

00:32:05.759 --> 00:32:08.195 
它可能會收縮
圖形視圖或是剪裁標籤

00:32:08.262 --> 00:32:10.464 
它並不清楚
你真正要做什麼

00:32:10.531 --> 00:32:11.698 
所以它自行做決定

00:32:12.399 --> 00:32:14.468 
如果希望標籤
一直都能顯示全部內容

00:32:14.535 --> 00:32:16.336 
少許收縮圖像
也可以

00:32:16.603 --> 00:32:20.474 
你只需要把
標籤內容壓縮阻力

00:32:20.541 --> 00:32:22.209 
優先級設置的
略高於

00:32:22.276 --> 00:32:25.679 
圖像視圖即可
現在就可以看到整個視圖

00:32:25.746 --> 00:32:28.916 
在做本地化時
需要做這些調整

00:32:28.982 --> 00:32:31.451 
以確保觀衆
可以看到全部

00:32:31.518 --> 00:32:32.553 
文本內容

00:32:34.254 --> 00:32:36.089 
這些就是優先級

00:32:37.591 --> 00:32:39.326 
它們可以幫你
解決不滿意度問題

00:32:40.227 --> 00:32:42.763 
這會導致
你在設計和運行時 

00:32:42.930 --> 00:32:45.365 
一切都出現問題 
日誌會相當難看

00:32:45.599 --> 00:32:48.101 
因此它們會很有用
但是需要注意

00:32:48.168 --> 00:32:49.236 
競爭性優先級

00:32:49.603 --> 00:32:51.972 
如果存在競爭性
就會出現歧義 如大家所見

00:32:52.573 --> 00:32:54.508 
當你這麼做時 結果是
各屏幕和窗口間的

00:32:54.575 --> 00:32:55.976 
更多一致性

00:32:56.743 --> 00:32:58.879 
如果優先級
用的很好

00:32:58.946 --> 00:33:00.013 
就可以得到正確的佈局

00:33:00.380 --> 00:33:02.716 
有時候 只需要
對吸附性

00:33:02.783 --> 00:33:04.551 
或壓縮阻力
稍作調整

00:33:05.185 --> 00:33:08.055 
現在 在設計佈局時
我們爲約束和

00:33:08.155 --> 00:33:10.190 
內容加上了
部分優先級

00:33:10.991 --> 00:33:14.194 
爲了解決這個佈局問題
我們還需要什麼？

00:33:14.795 --> 00:33:15.829 
對齊安排

00:33:16.363 --> 00:33:17.931 
那麼 如果已經用過
Auto Layout 那你會對

00:33:17.998 --> 00:33:19.166 
視圖對齊安排很熟悉

00:33:19.233 --> 00:33:21.201 
它們會需要某些
水平對齊

00:33:21.268 --> 00:33:23.470 
這樣就會知道如何
彼此關聯

00:33:23.537 --> 00:33:24.738 
還有垂直對齊 

00:33:25.239 --> 00:33:28.642 
我這裏會主要介紹
對齊文本

00:33:29.476 --> 00:33:33.447 
首先 在文本視圖中
我們有基線

00:33:33.514 --> 00:33:34.815 
的概念
這就是在

00:33:34.882 --> 00:33:37.518 
文本底部下方的線條

00:33:38.218 --> 00:33:40.554 
文本視圖有着第一條基線

00:33:40.621 --> 00:33:43.690 
和最後一條基線的
對齊安排 

00:33:44.057 --> 00:33:47.728 
第一條基線就在
第一行文本下方

00:33:47.961 --> 00:33:50.430 
最後一條基線
則是在最後一行文本下方

00:33:50.964 --> 00:33:54.501 
單行文本視圖
這兩個值彼此相等

00:33:54.968 --> 00:33:58.172 
所以在很多情況下
文本對齊效果

00:33:58.238 --> 00:34:00.374 
勝過頂部或底部
並對動態文本大小

00:34:00.440 --> 00:34:01.875 
這類內容有幫助

00:34:02.342 --> 00:34:05.145 
通過它 可以更好地控制
改變視圖

00:34:05.379 --> 00:34:06.547 
以及內容需要變化

00:34:06.613 --> 00:34:08.248 
例如 如果在按鈕旁
有個標籤

00:34:08.315 --> 00:34:10.851 
並且是底部對齊
在這種情況下

00:34:10.918 --> 00:34:12.585 
按鈕邊緣
有些大

00:34:12.652 --> 00:34:14.087 
因爲是在
填充一些多餘的間距

00:34:14.821 --> 00:34:18.058 
如果我加上兩行
文本 按鈕就可能

00:34:18.125 --> 00:34:20.427 
變得模糊不清

00:34:21.128 --> 00:34:23.197 
我想變成居中對齊

00:34:23.263 --> 00:34:26.400 
或是變成消息那樣
放在底部

00:34:26.800 --> 00:34:28.435 
靠近文本
最後一行

00:34:28.502 --> 00:34:30.070 
效果則好些

00:34:30.137 --> 00:34:33.473 
如果我是依照最後基線
對齊 無論

00:34:33.540 --> 00:34:36.443 
文本視圖做什麼
按鈕還將與

00:34:36.510 --> 00:34:37.777 
最後的基線對齊

00:34:37.844 --> 00:34:39.580 
當然也可以根據
第一條基線這麼做

00:34:39.646 --> 00:34:41.815 
如果你想要
的視圖是這樣

00:34:41.882 --> 00:34:44.784 
如果視圖在不斷變化
它也在和周圍的

00:34:44.851 --> 00:34:46.186 
視圖保持對齊狀態

00:34:46.920 --> 00:34:51.425 
文本對齊的另一個
重要內容是左對齊和右對齊

00:34:51.491 --> 00:34:53.460 
這對所有類型視圖
都很重要

00:34:53.860 --> 00:34:56.330 
但是對本地化
用處相當大

00:34:56.763 --> 00:34:59.299 
如果是在用
從左到右的語言

00:34:59.366 --> 00:35:01.335 
在編寫app時
對佈局運用

00:35:01.401 --> 00:35:04.438 
左右約束
語言本地化時

00:35:04.505 --> 00:35:06.306 
用的是從右到左
這怎樣結果

00:35:06.373 --> 00:35:07.941 
就會很奇怪

00:35:08.075 --> 00:35:09.443 
效果
就像是這樣

00:35:10.110 --> 00:35:11.578 
所有內容都
各自到位

00:35:12.346 --> 00:35:14.248 
但是無法正常閱讀

00:35:14.381 --> 00:35:16.383 
我以前是通過
圖像視圖瞭解文本

00:35:16.450 --> 00:35:19.286 
現在是從另一個方向
閱讀文本

00:35:19.353 --> 00:35:20.654 
而且是在
圖像視圖上面

00:35:20.721 --> 00:35:22.055 
這不是我想要的

00:35:22.122 --> 00:35:25.425 
如果你在左對齊和
右對齊用的是

00:35:25.492 --> 00:35:28.795 
同樣的約束
左邊是左對齊和 

00:35:28.862 --> 00:35:31.532 
右邊是右對齊
那就會形成正確的佈局

00:35:31.598 --> 00:35:34.968 
切換到不同 
於最初的

00:35:35.035 --> 00:35:37.504 
語言走向時
所有內容的讀取

00:35:37.571 --> 00:35:39.840 
都會按照你最初
設計的思路實現

00:35:40.440 --> 00:35:43.243 
因此就常用左對齊
和右對齊好了

00:35:43.510 --> 00:35:45.345 
也許會有
某些情況

00:35:45.412 --> 00:35:46.747 
需要你使用
左和右

00:35:46.914 --> 00:35:48.448 
現在我還
不知道熟悉有哪些情況

00:35:48.515 --> 00:35:49.783 
大家肯定曾
遇到過這種情況

00:35:50.284 --> 00:35:52.619 
但是如果需要用
左和右

00:35:52.953 --> 00:35:56.023 
小心不要和
左對齊和右對齊混淆

00:35:56.089 --> 00:35:58.025 
因爲當環境
發生改變

00:35:58.091 --> 00:36:00.294 
最後可能會
導致令人不滿的約束

00:36:01.461 --> 00:36:02.596 
好 關於對齊問題

00:36:02.663 --> 00:36:05.999 
的最後內容是
對齊矩形

00:36:06.733 --> 00:36:08.435 
對齊矩形很重要

00:36:08.502 --> 00:36:10.571 
因爲引擎就是
計算這些數值

00:36:11.104 --> 00:36:12.840 
引擎會把所有
約束考慮在內

00:36:13.207 --> 00:36:15.576 
計算對齊矩形
在根據這些

00:36:15.642 --> 00:36:17.110 
實際安排視圖

00:36:17.778 --> 00:36:20.480 
那麼對齊矩形是什麼？

00:36:20.547 --> 00:36:23.250 
通常就是視圖的
框架 但也不總是如此

00:36:24.051 --> 00:36:26.320 
它不僅是視圖
周圍的框架

00:36:26.386 --> 00:36:28.488 
還包括視圖的
關鍵性內容

00:36:28.922 --> 00:36:30.390 
也就是你真正
需要對齊的內容

00:36:30.924 --> 00:36:32.359 
例如 我們有個
複選框

00:36:32.426 --> 00:36:33.827 
如果和其他視圖一起
在做居中

00:36:33.894 --> 00:36:35.896 
對齊
你可能需要

00:36:35.963 --> 00:36:38.298 
根據圓心對齊
而不是在

00:36:38.365 --> 00:36:40.367 
複選框中心對齊
整個勾選

00:36:40.434 --> 00:36:41.602 
可能要
稍稍高一些

00:36:42.035 --> 00:36:43.971 
帶有陰影的按鈕
也是如此

00:36:44.338 --> 00:36:46.306 
需要去除那些
多餘的點

00:36:46.373 --> 00:36:48.742 
並關注內容的
主要部分

00:36:49.176 --> 00:36:51.512 
當視圖發生改變時
它也不會變化

00:36:51.912 --> 00:36:53.780 
當你安排視圖時
並想強調

00:36:53.847 --> 00:36:56.283 
或取消強調某些內容
這不會影響

00:36:56.350 --> 00:36:58.218 
佈局的其他部分
導致出現變形

00:36:59.286 --> 00:37:00.888 
如果的確需要改變

00:37:01.121 --> 00:37:04.525 
這種情況其實很少見
我們可以覆蓋

00:37:04.658 --> 00:37:06.593 
可用的對齊矩形
邊界間距

00:37:06.994 --> 00:37:09.429 
基本上這相當於
告知引擎

00:37:09.496 --> 00:37:11.598 
不管你算出的對齊矩形
是什麼

00:37:11.798 --> 00:37:13.901 
邊界間距是這樣的
要用這個數值

00:37:13.967 --> 00:37:17.804 
在佈局中 這種情況
非常少見

00:37:17.871 --> 00:37:19.173 
不過如果需要 可以用這個方法

00:37:19.840 --> 00:37:23.343 
爲了解引擎
實際的計算結果

00:37:23.510 --> 00:37:26.013 
可以使用Xcode的Debug菜單
中的視圖調試選項

00:37:26.079 --> 00:37:27.748 
將之拖入視圖

00:37:28.415 --> 00:37:31.118 
再選定ShowAlignment
Rectangle即可

00:37:31.185 --> 00:37:33.420 
這會將黃色對齊
矩形拖入視圖

00:37:34.021 --> 00:37:36.924 
還可以通過
具體視圖的框架

00:37:36.990 --> 00:37:38.625 
對齊矩形來實現

00:37:39.593 --> 00:37:41.461 
在第二部分的 
調試佈局部分

00:37:41.528 --> 00:37:44.498 
我們會談到更多詳情
如果想要了解

00:37:44.565 --> 00:37:46.500 
這些都是如何工作
一定要記得參加

00:37:47.835 --> 00:37:49.436 
關於對齊 我們介紹了

00:37:49.503 --> 00:37:51.104 
文本與其他內容
不大相同

00:37:51.171 --> 00:37:54.474 
在準備app時 
大家想要確認可以

00:37:54.541 --> 00:37:56.844 
做動態文本
和本地化

00:37:56.910 --> 00:37:58.779 
Auto Layout 
可以助你一臂之力

00:37:59.313 --> 00:38:00.747 
如果需要將有趣的 

00:38:00.814 --> 00:38:02.382 
具體視圖安放在
具體框架中

00:38:02.449 --> 00:38:05.853 
還可以藉機
覆蓋對齊矩形

00:38:05.919 --> 00:38:07.487 
邊界間距

00:38:08.255 --> 00:38:09.656 
有關佈局 我們講到哪裏了？

00:38:10.224 --> 00:38:13.894 
好現在是對齊部分
如果有必要的話

00:38:13.961 --> 00:38:15.696 
我們覆蓋了兩個
對齊矩形邊界間距

00:38:16.864 --> 00:38:19.800 
現在就讓引擎來
完成工作

00:38:20.534 --> 00:38:21.668 
把所有內容都
放在裏面

00:38:22.769 --> 00:38:24.004 
佈局引擎
會進行思考

00:38:24.071 --> 00:38:29.276 
計算對齊矩形
然後用來實際設計佈局

00:38:30.143 --> 00:38:33.380 
現在的佈局
正如你所願

00:38:33.714 --> 00:38:34.548 
適合各種屏幕大小

00:38:34.615 --> 00:38:35.883 
相信我 這就是
你想要的佈局

00:38:38.051 --> 00:38:39.086 
我們來看一下

00:38:39.152 --> 00:38:41.054 
我們總結一下
今天所講的內容

00:38:41.822 --> 00:38:44.691 
堆棧視圖是設計
可維護佈局的好辦法

00:38:44.992 --> 00:38:48.295 
在所有設備和尺寸
均可適用

00:38:48.795 --> 00:38:52.332 
如果適當激活
並關閉約束的話 

00:38:52.399 --> 00:38:54.468 
大家都可以使用
可以獲得動態

00:38:54.535 --> 00:38:58.138 
有趣的佈局 
而在每個屏幕上

00:38:58.205 --> 00:39:00.073 
無需太多設計工作

00:39:01.175 --> 00:39:05.179 
決定具體尺寸後 
使用約束

00:39:05.712 --> 00:39:11.084 
當絕對必要時 
可以覆蓋內部內容尺寸

00:39:11.151 --> 00:39:14.488 
使用優先級
實現最後的小調整

00:39:15.055 --> 00:39:17.991 
最後 可以不僅僅做頂部
底部和居中對齊

00:39:18.192 --> 00:39:20.627 
特別是當你看着文本 
考慮進行本地化

00:39:20.694 --> 00:39:22.329 
和動態文本時更是如此

00:39:22.930 --> 00:39:24.965 
若想了解
更多詳情

00:39:25.032 --> 00:39:26.767 
我們還有部分文檔資料

00:39:27.201 --> 00:39:29.603 
如果想試試動畫效果
可以下載

00:39:29.670 --> 00:39:32.272 
這些行星示例代碼
當然 也可以

00:39:32.339 --> 00:39:36.844 
前往論壇或者
索性聯繫我們的開發顧問

00:39:37.177 --> 00:39:40.247 
下午
是《Auto Layout謎題》

00:39:40.314 --> 00:39:43.150 
第二部分內容會深度介紹佈局週期
的內容以及更多

00:39:43.483 --> 00:39:47.621 
關於不符合預期的佈局
調試內容

00:39:47.688 --> 00:39:49.590 
我們還有其他的
相關講座

00:39:50.090 --> 00:39:51.892 
祝大家過得愉快
謝謝