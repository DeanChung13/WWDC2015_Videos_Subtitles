女士们先生们
欢迎OS X系统平台副总裁安卓思·温克尔
安卓思·温克尔:下午好
欢迎来到2015全球开发者大会
作为苹果开发者今年又是一个欣喜之年
加上watchOSSDK的开发数据包
现在苹果产品有三大主要平台
我们开发这些平台的方法是
将好产品与独特的用户体验结合在一起
同时使用与苹果系统一样的优先科技
程序语言设计和编程概念
以便这些平台之间能够轻易地代码共享
并使平台之间的应用实现协作
但我们也保持每一个平台的特色
这些平台的数据开发包将会在
今年稍后安装到Xcode IDE新版本
形成版本7
它包含了很多新的特色
在这里我只想强调其中一个
那就是我们允许用户AppleID
下载Xcode
并在他们的设备上运行应用
如果你们真的想让成为开发者的梦想
更容易尤其对年轻的学生来说
那么 需要三个平台的协作
如果你习惯使用某个应用并想进行拓展
我们为你准备了另外一个好消息
现在 一项单向支付的开发者计划会员身份
可以让你展开苹果产品中所有的应用
你不需要注册
且不需要购买支付会员资格
当然使用一次性支付会员身份的话
你还可以得到其它好处
比如获取预发行版本微软
接入强大的数据库 报表工具
现在我想说说软件方面的更新
iOS创新曲线一直是整个行业的骄傲
对美国开发者而言是巨大的优势
因为你不需要处理来自
其它应用生态系统的相同数据碎片
但是在iOS8中我们发现
大量使用者在升级方面有困难
因为安装程序
需要很大的可用空间
我们已经采取措施
在iOS8更新中减少了占用空间
在iOS9中我们会继续降低该数值
正如你们今早在主旨发言中听到的
iOS9只需要1.3G的可用空间
我们也改变了软件升级的提醒方式
用户可以选择立即安装或者在不方便的时候
选择稍后安装
所以 我们认为
这将确保用户快速更新iOS
使用最新版本的iOS
现在 我们还在研究一些技术
我们称为应用瘦身
让用户获得更多可用空间
应用瘦身包括三项技术应用切割
需加载资源和位码
我们一个一个地看一下
先来看应用切割
为iOS系统开发应用
其实就是开发同一款应用的不同变体
然后将它们包装在一起
放在一个应用程序包里
所以 如果你打开一个应用你会发现
有很多相似的其他组件占用设备的有限空间
这是32位和64位的处理器结构
不同屏幕尺寸和分辨率的图像
以及工具 比如着色器
用不同语言编写而成的图形编辑器
但是 要在特定的设备中运行一款应用
你只需要其中的一个即可
所以为了充分利用储存空间
我们将删除设备中
所有的应用
所不需要的所有组件
所以你可以继续开发并且使用你已习惯的应用
但是商店只会安装时传输经过瘦身应用给到用户
这就是大大缩减了空间
正如你们在表格中看到的一般的应用可以节省
20%到40%的空间
应用瘦身的作用在一些应用中
体现的尤其明显比如在安装单元应用中时
经常突然出现游戏下载限制
瘦身版本可以更加容易地在限制范围内安装完成
所以你可以将更多的特定资源
放到应用中并且提供给用户
提供更加完美的体验
最棒的一点是在使用Xcode的资产目录
你不需要改变程序中的任何东西
在你下次登陆的时候后台将会自动为你备份更新等
如果你在使用其他自定义数据格式
我们要求你通过创建资产目录以分成程序片
并且使用我们为你的设备
添加的其所需的新的资产目录
一些应用可以通过使用更多资源得到好处
因为不需要同时使用各种程序片
在这种情况下我们推荐
按需资源 简称ODR
使用ODR按需资源时储备会将你的资源分为
恰当程序片
然后将它们放置在苹果服务器中
但是下载过程会被延迟
直到你的应用明确需要他们
然后iOS将释放空间
当你的应用不再需要资源时
按需资源的典型类型是关卡游戏
但是很多其它应用也可以在其中得到益处
比如 你可能想要下载教程
到ODR资产中
当用户真正想看的时候才会开始下载
使用ODR需要你懂得规划
但重要的是
你可以在不同时间使用多于4G的资源
因此 应用切割和需加载资源
将会极大地帮助应用节省空间
我们还在研究一项新技术
它是更有远见的技术
我们现在将位码引入到AppStore提交过程中
位码是二进制中的一种框架系统中间代码
它可以让商店先优化你的设备应用
然后再传输给用户
你在Xcode中正常开发和调试应用
但是商店将会进入一种状态
不断运行我们更新的编译器优化
这样你的应用能够在所有的设备中运行顺畅
应用将不断更新
因为App Store会不断让你的应用
获得也许会加入未来新处理器的运算优势
所有这一切你都不需要向AppStore重新提交
所以位码的形成可以通过Xcode进行设置
从一开始这便强制对所有watchOS系统执行
对与iOS系统来说现在属于可选项
尽管我们认为优势很好
因此我们准备默认对所有项目采用该服务
这就是应用瘦身
它包括了应用切割按需资源以及位码
这些将会极大地优化应用
尤其是储存空间方面
现在 我们来看一下
应用中的二进制
AppStore目前要求你应用使用32位和64位版本
在过去的几年中我们见证了
我们系统设备在处理器能力上的发展
我们的中央处理器和图形处理器
以及引入64位处理器体系结构
之后的所有设备
所以该应用目录
仅仅适用64位处理器
和64位体系结构
因此用户只可以提交64位应用
这将从今年稍晚系统9开始使用之后
接着我们来说watchOS软件开发工具包
为了解说 我想把舞台交给
我的同事：易丽扎·布洛克
易丽扎·布洛克谢谢 安卓思
我们很高兴Watch系统在研发者社区
得到了认可
在苹果商店中很早就已经有
上千种手表的应用
今天 我很高兴地告诉大家
更多关于WatchOS 2软件开发工具包的一些新特点
首先我们来讨论一下watchOS现有构架
应用有个用户界面你可以将它作为
一个故事版这会被安装在手表中
点击应用程序扩展来打开用户界面
它在手机上运行
在watchOS2中我们在结构上做了一个重大改变
用户界面依旧一样应用扩展将
在手表中运行
这产生了很多益处
因为这与手表应用相互作用
不再需要绑定在手机中使用应用的用户
用户会在速度和应用反应上感受到实质性的改进
当然 因为同样的原因
你的手表应用也可以在手机不在的时候运行
由此应用扩展直接在手表运行
它直接连接手表硬件
这就产生了无数可能性
现在你编写手表应用时
你会用什么程序设计语言？
好消息是和其他很多框架一样
和你已经非常熟悉的iOS开发框架一样
还有另外一个重点
手表的连接框架可以使你与手机应用对接
当然了现在正在其他设备中运行
另外 你的应用扩展可以直接
与使用网络接口语言程序的网络服务对接
即使你的手机不在范围内这种交接也可以进行
在当前watchOS应用中有三种方法可以查看数据
快捷视图 通知以及应用本身
但是 这样会不会很棒
假设你只要抬起手腕甚至不需要触碰屏幕
就可以看到你的应用目录
在watchOS 2中这有可能实现
因为现在你可以在手表界面创建一个程序
我们为手表设计了简短对接
并且以最快的方式看到你的目录
那就是通过程序快捷视图以及通知
所以 让我们进一步了解一下
不要理会这些名字
程序其实很简单
它们信息片段
出现在你手表界面上而已
因此 如果我们打开手表界面并去掉时间
就只剩一个程序
现在 你在这里看到的是OS系统的内部情况
现在你可以自行创建了
现在 你可能还不太了解
比如旧金山足球俱落部正在举行
2015年锦标赛
所以 我们可以创建一个程序
来模块化提醒我们接下来是进行哪场比赛
如果我安装到我的手表上
每次抬起手腕我都会看到
这很好但要做到一个好的体验
很重要的是随着时间变化以及程序所需
程序需要作出相应变化
一打开屏幕这些就会出现
为了达到这个效果
我们为你的程序以时间线的方式收集数据
那样 当我那天看看我的手表
程序就会提示信息
告诉我此时此刻的信息
所以在日程中创建一个时间线
来提示足球比赛非常简单
一方面 我制作一个日程
另一方面 这不太可能改变
但是 这可能不是你创建程序的理由
世界上事物在变化你可能需要
随时更新你的时间表
我们为此提供了几种方法
第一种是计划更新
计划更新
对程序而言非常完美它的数据变化
会根据预测而变化像天气预报一样
如果你写了天气预报的程序
那么服务器每小时
都会提供更加准确的天气数据
所以你下载时间线时你可以告诉我们
你下一次更新数据的准确时间
那么应用将在后台
保持运行
你可以点击服务器更新新的天气数据
重新下载时间线
但是在预计的时间内
并非所有的数据都可以更新
假如我想要在我的足球程序中
加入直播得分
我要是每个小时或者每十五分钟
都点击服务器以获得目前得分
这么做不方便因为每一次进球
都需要立即在我的程序中更新
为了解决这种麻烦接下来介绍一种
新的高优先级的推送通知
如果你为程提供所需要的数据
你可以发送推送通知到你的手机
它将会马上被传输
到你手表上的应用扩展中
所以要确定的是
程序目录总是最新的因此时间线非常重要
而且这样做还有其他重要目的
如果你看到了今早的主旨发言
你会听到我们在watchOS2中
介绍的时空之旅它让你回到数码皇冠时代
可以回顾过去 展望未来
让你看到在一天不同时刻
你的程序将会显示什么
比如 这里
看上去海洋诺伊谷游戏已经结束
而我错过了因为我站在台上谈论苹果手表
我可以通过时空之旅回到当时 看看发生了什么
看起来好像诺伊谷好像为我暂停了一样
真是激动人心
这就是程序
方便进行快速查看重要数据
小部分数据
但是如果你想要看到更多信息怎么办
这时候你就可能需要快捷视图
你可以向上移动表盘表面来获得快捷视图
快捷视图提供了一个机会
让整个屏幕充满用户数据
比如 我的足球俱乐部快捷视图告诉我
比赛中A队的状况
程序和快捷视图
让我进入计划表中的应用数据
但是 有时候你需要在
用户面前获得信息
这时候你需要一个通知
手表中的通知非常强大
你可以充分利用屏幕
显示整个自定义用户界面
比如 通知我
这是最后机会选出今天下午在索玛奶牛低地游戏的冠军
除了自定义用户界面外
你还可以添加自定义动作
按下其中一个按钮
则进行应用注册
但这还不是全部
因为watchOS 2系统
我们根据文本回复推送通知
所以我可以在通知中添加一个按钮
让我能够编辑信息并且发送
我是个真正的索玛迷我想让全世界都知道
所以我要选择这个按钮
当我选择回复我得到快速回复表
我甚至可以使用口述来形成一条信息
这些都在通知内部形成不需要变换目录
谢谢你们你们真好
这就是通知
程序快捷视图以及通知都很简单
这也可能是你的用户在你的应用中
最常见的交流方式
但有时候你需要更多时间
而且你要一种交互性更好更加逼真的体验
这时候你需要启动完整的应用程序
在watchOS 2中你可以做很多事情
举个例子 既然你可以
使用数码皇冠时代那么你可以用让屏幕
快速显示全部比赛队伍
可以快速找到你最喜欢的队伍并且得到他们的信息
然而这只是你使用watchOS 2之后
带来的诸多优势其中之一
你也可以给你的用户界面添加动画
你可以使用振动马达
你可以通过手表录音
你可以嵌入声音信号和回放录像
你可以通过应用打电话
你可以通过直播访问
医疗传感器和加速计获取数据
能够看到你们这么会玩我们很高兴
现在我想展示在watchOS 2
安装应用的方法有多简单
让我们邀请乔什·谢弗
乔什·谢弗:谢谢 易丽扎
我很高兴能够向大家展示
将watchOS 1中应用升级到watchOS 2中
在手机本机上运行
如果你已经下载过今年开发者大会上的应用
你可能会注意到其中有一个手表应用扩展
可以在你手表上安装和运行
所以接下来我们要看一下怎样升级应用
并且在手表2中运行这些应用
我们在其中会使用一些易丽扎刚刚介绍的特色
在这里你可以看到
开发者大会应用的Xcode
Xcode会注意到
我有一个watchOS 1应用扩展
并且主动帮我升级到watchOS 2应用扩展
我要点击这里
让它执行这些变化
它会注意到所有的目标
并且升级使原始资料生成代码
将故事版准备就绪我就可以重新使用所有的应用
我们看一下这里检验一下控制器内容
首先我们要改变一些代码
来改变我们获取数据的方法
既然我们在不同的设备中运行
我们需要能够将数据从手机移动到手表
我们可以使用新的手表连接框架
实现这项功能
所以我要开始添加手表连接框架
我们要替换开源原应用调用
我曾经在watchOS 1版本使用
新的手表连接代码将会要求数据
从手机复制到手表
这样 现在我们可以添加一些附加功能
比较酷的一项功能是
与数据皇冠时代的交互
现在数据皇冠时代与手表应用中交互方式
是利用一种新的界面选择器控制
我们要在一分钟内将其从故事板中拖出
但首先我们要添加一些搭建代码
我们要做一些参照将其连接到故事板中
一旦我们将其拖出
然后你需要对选择器编程
把你想要的项目添加进去
所以我们要追踪的是
一周内存在的所有会话踪迹
并且在每个踪迹的选择器中添加一个入口
这样 我们就可以整理会话列表
寻找我们感兴趣的会话踪迹
最后我们要添加IBAction
连接我们的控制之后每次变化它都会被调用
所以我们要在那里添加代码
现在我们可以切换到故事板在应用中找到安置它的地方
所以我在这里找到新的选择器控制
我们要把它拖出来并且安置在会话控制器中
会话控制器可以显示所有的会话
所以通过添加置顶
它会提供过滤会话列表的方法
将它稍微缩短一点这样它不会那么高
现在 选择器控制真的很灵活
并且有三种不同的形式
可供你选择列表 堆叠和序列
你可以了解整整一周的情况
列表1是一个非常好的选择
因为这里是我们要在这里做的事情列表
我们要打开一个重点概览
以便我们可以保证用户
在转换到数码皇冠时代的时候可以区分
因为有了这些变化我们就可以
连接到我们刚刚结束的代码
我们要将连接拖出到我们的IBOUTLET
并且将一个连接拖至我们的IBAction
因此每次选择器变化它都会被调用
就这样
所以 我们要点击构建和运行
然后我们可以切换到手表模拟器
看到它如何运行
在watchOS 2中关于手表模拟器很重要的东西是
它是手表中一个完整的模拟器
所以你可以一起运行你的整个手表
在手机应用中同时调试
并且测试他们之间的连接代码
所以现在我们可以跳过这里
在会话列表中你可以看到我们可以滚动会话列表
我们也可以根据我们想看的踪迹进行过滤
我们改变的时候就在升级
现在 我想说的最后一个特点是
在手表屏幕上展示会话的能力
为了能实现这项功能我们要在应用中添加一个程序
现在我提前为此编写了大部分代码
所以我只要将文件拖出去并且将其添加到
这里我的程序中
我唯一没做的事情就是添加代码
它会循环访问并且构建时间线
现在 易丽扎刚刚提到的
我们要以时间线的形式提供数据
所以我们要循环访问
这是我最爱的部分
在手表屏幕上我可以看到整个星期我喜欢的会话
现在 为了节省时间
今天我提前在手表上构建且安装了
切换到这里 看一下如何添加
到我们的手表屏幕中
所以开始的时候
我在手表屏幕上中间配置了日历
但因为我在WWDC做完了这些
我们只要切换到这里并且将其自定义
然后我们可以将其滚动至程序列表的底端
你们可以看到现在大会上的应用可以通过底部进入
我们可以点击那里打开
然后返回查看我们的会话列表
现在 很明显美国平台
是我现在喜欢的会话
我们可以毫不费力地向前进行时空之旅
通过会话列表
接下来看到的是苹果设计奖
这是我绝对不想错过的
往明天继续推进
可以看到早上watchOS 2的介绍
这也绝对是我想要看的
所以更新你的手表应用就这么简单
在watchOS上运行就像本来就是其中的应用
非常好的特色
所以接下来
接下来塞巴斯蒂安会告诉我们
一些非常好的新的基础技术
塞巴·斯蒂安:谢谢 乔什
非常好
现在我们来谈论一些基础技术
应用在我们的平台中的技术
我会从第一个性能开始说
和其压缩性
我们将会让压缩变得很有趣
苹果的产品一向使用许多
压缩算法作为我们核心框架的一部分
优化速度的LZ4
高度的压缩性的LZMA以及很多人用过的zlib
它可以找到压缩和速度之间的最优点
我们开始构建一个更好的压缩算法
使其在压缩库上更加进步
你可能知道压缩库已经二十多年之久
处理器体系结构改变之时就需要重建
所以我们认为可以创建可以优化
现在处理器和微体系结构的事物
现在 我们称这个新算法为Lempel Ziv
Finite StateEntropy
你可能知道
他们还是一个非常好的独立乐队
你应该到Connect上去找看看
为避免任何困惑我们简单称其为LZFSE
现在 LZFSE 谢谢
在压缩中 压缩库有所改进但更重要的是
它比压缩库速度快三倍
这是一次巨大的进步
可以使你的应用更加敏感
另外它还延长电池寿命
在能量消耗上它可以减少60%
在相同的压缩算法中
它在速度上快了三倍
最后我们使用起来相当容易
我们已经将其添加我们的标准框架中
你需要做的就是改变算法 使用LZFSE
我们已经完成了所有困难的工作
你和你的用户可以享用其中的益处
这就是LZFSE真正重新定义了最优点
在主流压缩中
接下来 我要说一下电池寿命
克雷格今早提到了电池寿命
现在在这个行业中我们测试电池寿命时
经常是重复性测试
举个例子我们测试时在浏览器中
一次又一次的浏览网页
我们知道现实生活中
我们使用这些设备的方法与这些综合实验测试
的方法不一样 对吗？
我们将设备装进口袋再取出来
我们接收通知和信息我们可能使用很多应用
我们连接网络 断开网络
所以在iOS 9上做的事
主要集中在最佳化基板组上
这样可以适用在平台所有最流行的应用
这是第一步第二步
我们关注一些基础设施的改善
比如 一些算法可以增亮背光灯
朝下检测所以如果你接收到一条通知
当时不能看到它由于手机屏幕朝下
我们无需让屏幕发亮
还有其它一些优化
比如系统如何进入睡眠状态如何优化最低电源状态
所有的这些最优化加起来可增加
一个小时额外使用时间是针对一般用户的普通使用
真是巨大改善
今早克雷格还提到了省电模式
我们要开启省电模式很简单
只需要进入设置 开启
激活了一部分内部杠杆
比如保护中央处理器和图形处理器
不受进入最高性能的破坏
除了最耗电的状态
保护应用免受后台过度运行的影响
阻止它们进行不必要的网络活动
最后关闭一些耗电的动画
总而言之当你开始充电时
省电模式将会为你增加三小时的使用时间
所以再次强调这是巨大的进步
现在我开始保护客户数据
所以从一开始苹果系统就真正
关注客户数据的保护
在iOS9中我们采取了一些重要措施保护数据
包括设备中的和云端的
所以我们从云端说起吧
当然用你的Apple ID进入
云端的一些服务中 你的照片
可能你有一些文档存在云端中 你的购买记录
可以利用它在即时通讯和视频通话中发送信息
云端对你的数据最大的威胁是
有人获得你的密码
可能是因为你在其他共享网站
分享过你的密码
或者可能攻击者通过捕钓式的攻击
获得密码
这种情况的解决办法是双因素认证
我们尽量把它做的简单以使每个人都可以使用
我来向大家展示它如何运作
在iOS9中当你得到一个新的设备
你就想要在你的云端账户中登记
你将需要输入密码
此外 你还会输入验证码
同时我们向我们已有的信任的设备发送通知
通知包括注册新设备的地址
所以如果那是你在注册
你可以输入验证码
如果是攻击者试图用你的账户注册
你可以凭借踪迹阻止他们
这是关于云端现在说关于设备上的设备密码
设备密码是保护
私人数据的最后一道防线
在浏览历史中我们保留四位数密码
因为你每次使用手机都需要输入
但是当然我们不会输入密码
太过频繁
我们使用指纹识别中的指纹完美注册
我们的手机
所以现在在iOS9中我们可以将密码
由四位数增至六位数
密码强度增至一百倍
不需要缓和设备使用的妥协
既然我们说到设备
我介绍一种用在所有平台中的新技术
我们称之为苹果安全传输
苹果安全传输是真正关于所有的安全数据
它从一个设备传输到网络
或者从你的应用传输到你的终端服务器
因此我们当然想要需要的信息
在网络传输中安全
但是结果证明现在
对大家来说真的很难
很难将其做好
你不能使用传输协议
你必须使用一个安全协议
然后需要担心协议的版本降级攻击
数据加密 保密性
最佳规范
这些做法非常难
在苹果安全传输中我们核心框架搭建它
所以现在当你使用我们的标准网络框架
我们会建立一个最好的安全实践连接
在你的应用和后台服务器之间
现在最佳实践是安全传输层协议1.2和正向保密
但是因为标准和的发展最高技术
框架当然要使用最新技术
并且自动为你执行
所以 要从哪里开始？
如果你用完了标准网络框架
比如 NSURL会话那么它会被马上创建
这是iOS9默认的
所以你下载开发者系数时
我敢肯定很多人都已经下载过了
你就会重新编译你的应用
我们会在后台执行最佳实践
安全连接
可能你还没与更新你的后台
至最佳实践
或者你在使用第三方数据库
如果是这样 我们提供了异常机制
给你时间来通过位置服务平台更新你的后台
这就是苹果安全传输
让我们转换到计算机
介绍一种新技术
我们称之为系统完整性保护
在个人消费型电脑中用户账户有明显的
管理特权并且这种管理特权是
真的等同于内核访问
这就使保护系统的完整性变得很难
在系统的完整性保护中
我们破坏了等同的状态
管理级别的访问不再充分
为了在系统中做一些运作
我来举一些例子
比如 如果你有管理级别访问的特权
你不能梗更改系统文件
你不能将程序安装至系统的位置
你不能依附系统程序 比如
内省记忆或者改变控制程序
所以对于现在出现的数据库 我们希望
大家下载下来 测试你的应用
以确保你基本上可以将其粘附在所有的规则上
现在 你可能还想知道
这是如何影响我的应用开发
好消息是我们已经更新了XCode
发展了工具链对大多数人来说
你们看不出什么不同
对那些有明确开发要求的人来说
比如 你在开发X系统的内核功能扩展
我们也提供了一种功用这也是恢复分区的一部分
它可以让你失去系统完整性保护的能力
这就指向了我要说的最后一种技术
一种巩固现代网络的技术互联网协议6
为什么互联网协议6这么重要？
我们都听说过互联网协议4地址的不足
猜猜看
最终在这里
实际上2011年在中国和亚洲
已经不用互联网协议4地址
在美国 我们也将在接下来的几个月中放弃
意味着实践中一些
媒介物现在在配置只用互联网协议6的网络
如果你的应用在互联网协议6中不能正常运作
它在那些媒介网络也不会运作
对那些客户也不会运作
所以支持互联网协议6真的很重要
好消息是一直以来作为平台的一部分
互联网协议6已经得到了支持超过了10%
已得到现场证实
很多使用我们的标准网络框架的人在使用
互联网协议6
但是我们希望得到进一步发展
我们想确保每个人都创建一款应用
能在互联网协议6网络中运行
所以我们为大家准备了秘诀
使用标准网络框架
我们已经提到过NSUL会话
这真的关系到获得网络的复杂性
避免使用互联网协议4的程序语言系统
很多甚至在构思互联网协议6之前就已经得到发展
最后不要将地址进行硬式编码
一旦你按照这个秘诀你会说
我如何测试它是否正常运行
因为并非所有人都可以进入互联网协议6网络
好消息是大家为了研发都使用个人电脑
我们正在用最新的数据库
将你们的电脑变为互联网协议6 网络模拟器
所以你所需要的就是
通过一个新连接分享模式简历一个个人热点
你只要查看互联网协议6的盒子
你就可以连接你的测试设备测试你的应用
确保它们在互联网协议6中运行很简单
最后因为互联网协议6的支持很关键
对保证世界上大家应用的运行来说
对每位客户而言
我们将它作为一个苹果储备提交要求
从iOS9开始
所以这就是我要说的基础技术
现在我把它交给我的同伴加拿大人 托比·帕特森
他将会说到更高水平的程序语言系统
托比？
托比·帕特森:我知道大家都来自
世界各地一些人甚至来自
跟加拿大一样遥远的地方
你们的客户就像大家一样各种各样
有趣的是 你们可能没注意到
这个表格显示了世界上苹果专卖店
是按国家划分的
它告诉我们一件有趣的事情
如果你的商店没有在正确的位置
你就不会得到除了你的客户之外的
大多数潜在客户
现在 有个好消息这对大家来说并不难
我们有国际化和地区化指导
它可以告诉你你想知道的一切
当然我们已经得到很大的支持
在框架以及微软软件开发工具包方面
我们有数据和数字的格式化程序
今年 我们介绍一种新的格式化程序
来帮助你正确显示人们的名字
名字是一件很棘手的事情
每个人都有
但不同的文化 有不同的意义
关于他们的用途有不同的习俗
在英语中 我们先写名字 中间姓 姓氏
在中国 却不一样先写姓氏
而且根本没有中间字
NSP的名字组成很格式化
我保证看起来比听起来更像编码
当你大神说出它时
这关系到大家的所有细节
它甚至还有一些文化智慧
所以如果你问一个人有没有短一点的名字吗
可能不太合适使用一个人的姓
或者就直接使用它本身
对于阿拉伯和犹太人我们有一些好消息
我们已经得到了初步的支持不客气
我们已经得到了初步支持
近年来在这些语言方面
在系统中文本被严格限制
但是 个人电脑已经有了更复杂的布局
在用户界面元素中
我很高兴能够告诉你们在苹果iOS9中
我们已经全面检测了用户界面对右向语言的支持
这是它在跳板里的样子
现在 我们还未撤销
屏幕上的用户界面元素
这是一种深层次的切换
在视图控制器 用户交互
和系统手势间进行的程序切换
如果换做希伯来或阿拉伯人
设计的话用户界面应该是这样
我们来看看它在手机上的样子
我想介绍沙拉·卡迪
你们可以快速地看一下
我们体验一下iOS 9系统支持的从右到左新式语言
现在我的手机语言是阿拉伯语
我们先锁屏从右向左滑屏
解开手机锁
这里从右向左是应用程序图标
页面视图自然地
从第一页过渡到第二页
整个系统和所有自带软件都支
持用户界面镜像或从右向左定位
以照片应用程序为例
这些照片是按照我意愿排列的
整个用户界面位于导航栏右侧
而导航栏位于下方菜单栏的顶部
现在 我们体验一下电子邮件
它的标准布局 导航栏
手势浏览和动画都可随意设置
所以 点击邮件快速获取信息
从屏幕左侧
拖动至右侧
会出现表视图单元格的排版流程
手势导航也会
从屏幕右侧进入页面
现在把手机旋转到竖屏模式
出现的消息窗口
让我这个母语人士感到很自然
因为所有的邮件标题在右侧
而信息详情在左侧
因为所有的Email都已置入UIKit中
所以您也可免费操作这一流程
进行从右向左定位
接下来我向您展示一下苹果
软件商店的第三方应用程序
您们一定认为我们不选择
Kayak因为它的名字是个回文
或者说您可以从右向左阅读信息
因其采用自动布局和耗能最小
新式应用程序接口所以添加上翻译
软件这个程序就能如期运行
所以 在WWDC结束后我打算去旅行
我来浏览一些消息
所以 拖动第一个滑块可选择旅游的时间
往右滑动
可减少旅行的天数
它采用了股票用户界面滑块
所以您可免费使用这一软件
因为我只喜欢直达航班
所以打开下面的按键 你可以看到
它会从右侧移动到左侧
右侧呈现整个用户界面
因为采用的是母语所以很直观
把从左向右定位添加到iOS 9
软件是多么容易啊
谢谢大家
现在我们再讲讲托比
托比 帕特森谢谢 莎拉
正如莎拉所讲我们全力支持UIKit
和其他系统框架
你的应用程序可以免费安装
这些软件
您如果有自定义视图或手势识别
您确实该好好考虑
从右向左语言给您带来的好处
我不会向您展示和推销这里的API
也不会赘述UI的流动方式
您可以为您的UI做出自己合理的选择
下面我讲讲链接
这里是指您从朋友信息或邮件里
获得的链接
点击链接您就会打开一个网页
这正是您想从电脑上获取的网页
Safari就是为网站应用程序所开发的
另一方面IOS是唯一的本地应用程序
在相关应用程序点击同样链接
可以进入同一网页这不是很棒么
这正是iOS 9做出的突破
点击软件的链接同样可以
打开您想打开的页面
这在您当前的页面操作就可以
电脑的Safari浏览器或iOS系统的本地应用
这是它的运行过程
将文件托管到URL服务器的网页
您的应用程序便可本地化处理
当用户点击其中某一URL服务器时
我们把它包装在NSUserActivity
以切换的方式交付给应用软件
这就是运行过程
就这样简单
我愿意谈谈关于iOS 9新奇的事
先从HomeKit智能家居平台说起
今天早晨我们公布了HomeKit平台
的几个新特点
当然我们将继续提高HomeKit运营体系
现在 特定级别的配件
可以向你的设备直接推送
门窗及报警系统推送信息
而且 我们的新系统界面
可以和智能家居网络实现共享管理
在设置中进行设置
另外 你还可以通过程序编程接口对接自己的应用
不过我认为真正有趣的事情是
事件触发器
你可以设置“如果…那么…”的动作程序
这样你可以设定激活报警系统的时候
选择关闭灯光
或者可以在早晨的时候开启咖啡机
我认为这些功能以后将会非常有用
现在我们在搜索方面也有了新突破
我想大家会感兴趣
当然 重磅消息是
iSO现在可以对你的应用内容进行搜索了
我们有了丰富的搜索结果
当用户点击时
将直接对应到应用中的具体位置
对应用数据进行索引一共有三种方法
核心聚焦可以直接搜索
全部的应用内容
现在 某些数据有时限性
这样你可以选择对一款应用进行索引扩展
核心聚焦会在特定时间启动
以确保索引更新索引更新
索引数据的另一种方式是NSUerActivity
NSUerActivity对应用内的用户所见
及行为进行索引
这样方便循迹并返回应用
最后 如果应用正在生成网站镜像
你可以对网站进行加示
这样网络爬虫会找到网站编入索引
之后在设备上进行本地搜索时则直接提供结果
正如大家今早看到的新搜索界面
现在我们有了新系列搜索建议
可供使用
这是无需手动输入的
当然Siri甚至可以在应用内部
进行结果建议
如果您正用NSUserActivity
进行用户应用行为记录
那么在出现预设建议时Siri可以对记录进行搜索
会注意到我们在NSUserActivity
基础上做足了功夫
有Handoff功能
还有通用连接 搜索 建议等
这正是我们在现有基础上进行开发的绝佳实例
从而让应用和整个行业系统有更多成果
今天早上的重大消息是多任务功能
我们很高兴能在今天和大家分享
有滑屏和拆分视图
这些功能让你在同一时间进行多任务应用处理
我想大家肯定会有疑问
我该怎么做
才能让好好使用新功能呢
其实 答案不言而喻
大家可能还记得去年我们推出自适应用户界面
这是一个非常简单的概念
与其设计一种布局
与其设计固定屏幕尺寸的用户界面的
然后根据窗口大小进行适应变化
而且我们还提供了一些工具进行协助
可对文字进行动态布局
以及根据用户界面的变化进行自动布局
当然 现在我们知道
只有一个布局是无法满足
不同尺寸的屏幕要求
所以我们推出了尺寸分级
就可以选择合适的布局尺寸
无需查看设备
这是通过尺寸分类屏幕大小实现的
分为两大类常规级别和压缩级别
在这里你可以看到iPad屏幕尺寸是常规级别
而iPhone则是紧凑级别
我们使用完全相同的机制
设计多任务用户界面
你可以在这里看到滑屏视图
的尺寸是紧凑级别
当我在分屏视图中显示两个应用程序
我们调整了左边的主应用的边界
调整到常规级别
现在 有趣的是当你平均调整拆分视图
不仅是调整这里的窗口边界
同时也会将左边主应用尺寸
由常规调整好紧凑级别
我们发现在自己的应用中
这样的窗口尺寸是最佳的
所以如果你已经适应了应用的界面
那么其他的可以交给该功能了
你需要使用分镜功能
用于灵活替代默认ping
然后就可以支持所有其的了
就是这样
克雷格今天上午提到我们可以在数分钟内转换应用
并启动运行
这真的很棒
今天早上我们还宣布了画中画功能
让你可以在不关闭其它应用的情况下
观看视频
如果你开发的是视频应用
那么这项功能真的是为你量身定制的
当然 你的设备必须
支持背景媒体播放
然后启用画中画功能就可以了
我们将该功能内置到标准媒体播放控制中
这样图形控制器能对画中画
进行精细控制
接下来我想谈谈Mac系统
当然OS X系统已经有了多任务
多窗口功能
而且今年我们还宣布了新的窗口管理功能
这实在让人激动
这里的关键是
在拆分视图里并排显示两个应用界面
正如这张截图所见
现在 大家都容易适应
另外可变窗口也可以支持该功能了
你只需要确保你的窗口
形状美观和宽度适中
以便和系统中的其他窗口适应
不会产生不良效果
当然 之前增加的新程序接口AppKit功能
能够使这项功能更为便利
包括在NS拆分视图控制器自动隐藏工具条
Mac系统的另一突破是压力触控
这在几个月前已经发布了
压力触控开辟了触控的全新领域
有了触控板的压力感应和触觉反馈
我们在自己的应用中使用该技术
如文本查找 压感播放控制
同时还有预览和标记等精确控制
当然我们还添加了一些程序接口
方便大家的应用可以使用该功能
你可以设置压力触控
压力配置的预设值
配置触控板的默认触觉反馈
以及视图和手势识别事件
压力变化
我们相信Mac系统的压力触控新功能会很受欢迎
我们很期待
大家如何充分利用该功能
现在 iCloud也更新了
去年我们推出了iCloud Drive
极大方便访问移动设备
电脑和网络上的所有文件
现在在iOS系统中应用能够提供强大功能
用于管理你的文档
并且我们认为这种简单以应用为中心的模式
对用户非常有用
但是 Mac用户习惯
直接在iCloudDrive上直接处理文件
因此我们将新应用iCloud Drive
应用添加到iOS系统中
看起来是这样子的
现在 你可以方便查看
iCloud Drive上的所有文件
你可以在应用中预览文件
当然你可以使用应用打开文件
在之前的iOS 9系统
只能将文件复制到应用程序中才能打开
这正是用户不想在iCloudDrive储存
或者处理文件的原因
我们真正想要的是可以对文件进行编辑
无需移动或者复制就
因此如果你开发的是一款基于文件的应用
这正是你们需要的
你需要能够进行文件协调
因为现在有了多进程
可以同步进行处理
而你只需要在记录中进行添加
列出并使用应用打开回调
就是这样
iCloud Drive是基于CloudKit的
集iCloude服务于一身
CloudKit是一个公共接口
我们开放接口
现在对所有人都开放了
那么这实际上有什么用途了
你可以在iCloudDrive上免费储存文件
无需成为用户
当你的应用用户越来越多
数据马上就会装满 直到最大限度
现在 我们搭建了CloudKitDashboard
方便向大家介绍这些功能
其中包括一些免费功能
我们将在未来不断增加付费服务
这样 用户在使用付费之前也会收到通知
另外 如果你使用付费服务
这里有价格单和说明
你还可以在这里找到CloudKit其他信息
新功能的介绍等
如我们今年推出新功能
CloudKitWeb服务
这可以让CloudKit在网络应用上实现运行
你可以做的是
CloudKit接口对接可以通过JSON实现
我们提供与CloudKit接口相当工具
JavaScript函式库
我还提供了Web login flow
这样可以对用户进行安全验证
我们认为这会变的很简单
开发基于CloudKit的网络应用
和你的ipadiphonemac一起运行
这就是CloudKit 谢谢
现在我把现场交给克里斯·拉特纳
他将介绍Swift
克里斯·拉特纳：好的
谢谢
谢谢你 托比
Swift现在的相应很不可思议
真的很难想象
才过了一年的时间
当我们谈到Swift
我们会谈到它的一些主要特征
如性能 安全性和互动性
但我们希望每个人都可以使用Swift
所以我们开放编译器和标准库
甚至简化Linux board
将在OSI认证的协议下运行
今年晚些时候搭建好的Swift2之后
我们期待与大家的更多合作
期待大家的贡献和主意
现在关于Swift已经有很多资料
我们不会一一说明
最喜欢的是Swift现在是最佳的栈溢出编程语言
喜欢Swift的理由很多
其中之一是它的成功搭建
能够高速运行应用
在过去的一年中Swift代码性突飞猛进
因为我们已经在编译器中实现新的优化
另外Swift2也有许多新改进
特别是在基板方面
现在我们简单谈谈其中几个
先从最热门的一项开始吧
新的错误处理模式
错误处理是非常热门的领域
已知的方法很多
但是这些方法也有一些问题
我们对现行方法并不满意
因此我们找到新方法 非常类似
但是可以处理好这些问题
我们现在谈谈
先从简单的说起
Swift的功能或者方法是标记错误
这极大简化了通用Cocoa API
以及允许编译器验证错误
是否得到合适的处理
Swift现在可以用类似的catch语法处理错误
并且使用功能强大的匹配模式
表达丰富的cache条件
Swift独辟蹊径使用尝试性关键字
用于标记调用
产生错误的方法
这重新对错误类型进行定义
当发生非预期控制流时
可以让该控制流在代码中显现出来
这样可以对其进行分析处理
当然处理错误将预期地简单
而且Swift在对用户错误条件类型进行类型
和分类自定义方面可谓完美无缺
真的很棒
现在 我们认为Swift
错误处理功能将不再陌生
很容易接受
但是这也会极大提高
Swift代码在基板中的传输质量
现在我们可以继续谈谈下一个重大特色
接入性检查
为此 我们增加了全新的接口
经常我们也会想要调用新的接口
增加应用的性能
但是我们仍需要支持OS X
或者iOS的更早版本
这带来一项挑战
因为你可以无条件使用的某些符号
但是其他符号则对应用运行
所运行的OS系统进行了条件限制
有了Swift 2解决这问题轻而易举
现在如果你想直接使用一个符号
而不想进行检查
那么编译器将产生一条错误信息
这样方便区分
另外 Xcode在这方面走得更远它提供了其他更好的方法
首次是你可以使用新的“如有”语句
在需要的地方进行精确查找
但我认为比那更好的是
你也可以标出整个方法
甚至整个类根据OS新特征
可消除在你的代码中将出现的
细微检查的需求直接表达多种普通情况
是一种非常棒的解决方法可以很好的一起使用
现在Swift 2差错处理特征
和可用性检查特征
是更容易写出正确代码的
两大方法
但 当然我也想要你的代码也很漂亮
所以在Swift 2中我们做了数个大变动
Swift 1 引入一些
真正强大的整体通用函数
用算法做强大的东西
强大的 极好的
问题是 这些总是不够用
比如说 我有一组数据想按比例增加数字
并丢掉某些结果
用Swift 2这很简单
但写出来需要重排很多代码
当你考虑时你必须彻底地阅览
这使得它很难被推出来
Swift 2引进一种新的语言程序
叫协议扩展
使用协议扩展
可通过彻底改动这些整体通用函数
让它们至始至终都一样
意思是说你写的新代码很漂亮
很容易写 也很容易读
让我们谈谈早退出
经常看到因为某些原因想要早点退出作用域
或许你有办法 比如使用参数
可能是0 如果是0它不起作用
好吧 如果让的表述为你提供一种很熟悉
很舒服 很棒的方法来检查这些条件
但它需要你将所有的代码缩排成额外行
为解决这个问题我们引进了一种新的防护说明
允许你检查条件
然后早点将其摆脱
允许你写出漂亮的直接式程序
无需额外的缩进
下一个Swift如何运作的一个大元件
和Cocoa配合使用可达到什么程度
但对于普通的Objective-C API
Swift编译程序是否有指示器
毫无影响
或一个序列的单元类型是什么
引入new featuressubjective C
来解决这个问题
包括可以将指针类型表达为空性的能力
在Xcode 7我们引入整个全新的
一级的基因体系
可让你在Objective-C中
表示单元类型
和许多其他的事
尽管采用了这个和其他整组特征
Cocoa感觉还是相当快
最后让我们来说说Xcode
Xcode 7引入修改后的Swift移植器
它可自动将Swift 1代码移到Swift 2序列
包括采用新差错处理模型
只要Swift语言继续演变发展
移植器也将继续发展与之匹配
下面 我们谈谈头文件
但 等一下 有无头文件
是Swift的明显特征是吧
问题是 是否有时候你确实想
扫一眼一堆的代码看看它究竟是什么
并以这种方式获得所有执行细节
Xcode已经解决这个问题
通过引入新辅助编辑器
它提供任意Swift源文件的
一个类似头文件的意见
给于你所有头文件略读优势
没有写保持以及自己编辑的维护压力
好极了
下一个 丰富的注释
Xcode让你写出
漂亮的SwiftPlaygrounds
通过直接向Xcode编辑器
这些丰富评论使用非常流行的Markdown syntax
现在我们已将它应用到syntax
用来进行文档注释
我们也增加对新特征的支持比如内嵌图像和链接
提供很棒的始终如一的体验
在Playgrounds和doc注释之间
最后
最后来说Playgrounds
Playgrounds对我们来说很重要
我们知道利用API是一种很棒的体验
也和Swift程式语言本身
认为Playgrounds也是教和学习
程序编制的一种好方法
所以我们对其增加了一些特征
包括为多重页面增加最新的支持
为了更好地进行展示我要邀请麦斯·杜克曼上台
麦斯·杜克曼:谢谢克里斯
今天我要展示的是在Xcode7中教和学习使用
Playgrounds多么简单
让我们从这开始我开发了一个playground
关于Apple的制图API用来教学生
在这个部分
我为他们介绍一个全新的GameplayKit
如Playground所说GameplayKit用来
开发技术以驱动游戏设置
我们马上就可以看到更多东西
Playground使用形象化的飞车追逐
表现GameplayKit部分功能
我创造了这个Playground
所以我的学生可以编辑坏蛋的车辆
只需调整这三个精灵节点变量（SpriteNode）
现在Playgrounds可以为你
展示每个代码行的结果
我们增加了联机的功能
现在 我可以开始了
用学生将要用的方式编辑我的Playground
通过改变数值
改变坏蛋的外貌
你可以看到 在我编辑时
变化也随之更新
那是一辆坏蛋的车
至此 我让我的学生
写了点代码
将坏蛋一起放到精灵中
现在 当我开始写代码
坏蛋就开始聚集了我准备好了
这就是为设置所做的
是时候开始重要的事情了
它会让材料移动
这个我放在了其他页面
页面是一种好方法
可将Playgrounds划分成像书一样的小主题
你可以使用页面底部的
手动导航连接转到其他页面
你也可以使用跳转栏
当然 还可以使用导航
这是我Playground中所有的页面
每个页面都有软件源和资源
所以你可以如你所愿启动你的Playground
我们来检查下一页
现在存好导航 放到一边
这个页面是关于
GameplayKit的集群行为
集群是讲坏蛋聚集在一起
并使之移动的单位
现在不需要进一步的数据对象
我将打开Xcode的时间抽助手
看看聚集者
好了 这就是所有的罪犯
各种坏蛋在追踪英勇无畏的英雄
但你可以看到 他们四处乱撞
真是集群灾难
来看看是否可以修正一下
这里有数个参数 可以用来
管理集群行为
这个有意思 内聚性
用来控制坏蛋团结一致的程度
我可以立马试试那个数值
立刻就可以看到效果
内聚性有点太大了
所以 让它稍微小点
这个间隔好多了
但仍不是我想要的那种目标一致
所以 我要试试寻找参数
设置一个不同的数值
看看能不能达到我想要的聚集
好了
现在他们聚集在一起了
现在我知道我想要的数值范围
就可以告诉我的学生开始玩了
将助手储存好 放一边
将编辑器切换到原始标记
现在使用熟悉的Markdown syntax
编辑Playground的PROSE
我可以回到寻找参数
我也可以增加额外的PROSE
让我的学生和这些数值玩一玩
我也可以来到这里
用图表的形式增加一些品牌
现在 无论何时有人问我是否知道聚集
我就可以说我写了一本关于聚集的书
谢谢 你很好
我们在Xcode 7中的Playgrounds
仅加了少数的程序编写特征
等不及要看看你们可以用它们做些什么出来
现在为告诉你一些非常棒的Xcode特征
有请马太·菲力克上台
马太·菲力克：谢谢 麦斯
伴随着watchOSiOS和OSX新版本的发布
我们很兴奋为你提供Xcode 7
这个新发布的版本包括特征并支持所有平台
且每个平台的独特体验
已经被合并到工具中
使你能够锁定和释放你的应用
到所有设备中
我今天将从独特的体验开始
使用设计工具 即界面生成器
首先是一种展示你的应用的新方法
叫做堆栈视图
对于堆栈视图
你可以使用水平和垂直堆栈设计你的应用
你可以从选择方向开始
增加你的控制
每增加一个控制
堆栈视图将自动调整大小和定位
为你提供正确的样子
堆栈视图出色的嵌套
可允许你改变方向
这样 你就可以获得你完全想要的那个布局
现在 我们已在自动版面配置顶端建立堆栈视图
它为你处理所有的约束

队列 空间和分布
堆栈视图同样灵活
你可以在界面生成器上
在运行时 和你的界面玩
当你在堆栈视图增加控制时你可对它们重新排序
尝试不同的布局或许最好的情况是
当你在运行时隐藏视图
堆栈视图将自动调整
堆栈视图是界面生成器上的新方法
可使你完全获得你想要的布局
下一个是Storyboard
references
使用Storyboard你可以创造设计场景
用0代码将他们连接在一起
以构成完整的用户界面
现在 你的场景和界面进化了
变得有点复杂
你想要更容易的控制它
Storyboardreferences
允许你截取一部分界面
并移动以分离storyboard文件
保持连接
storyboardreferences
使你的界面重点突出并模块化
和你处理应用代码相同的方式
也可很容易地设计你的应用流
和应用流应用布局同样重要的
是应用外观
在此次发布我们制作了值得一看的界面生成器
在接下来的场景中
你将看到更多应用在界面生成器中
iOS 和OS X的可视化
画布内将对模糊和阴影着色
振动则成为展示的标准
而可设计的控制可以展示隐蔽和阴影
组成你的场景中的其他视图
结合这些可视化以及先前的编辑器
可使你进一步改进特殊界面的外观和布局
意思是 现在比以往更加可以
直接在界面生成器中编辑界面
看看你的使用者会在他们的设备上做什么
创建应用的另一方面是管理资产
含有工具的Xcode可与新
按需资源API配合使用
使用Xcode 7你可以连接资产
发送到整个项目
以供下载和使用
每个标签代表一个资源聚集
我们把它叫做包
每个单独的资源可申请多个标签
这可使你
在不同的环境中使用资源
帮助你管理标记的资源
在项目编辑器中Xcode包括一个标签概述
在这里 你可以很容易地增加移除重命名标签名
你可以改变包的内容
你也可以安装按需资源各个方面
比如下载命令
下载优先次序
当你建立应用时
你的标记资产自动集合成资源包
你只需标记你的资产然后就可以开始了
当你配置你的应用时
你的按需资源将由App Store主导
在调试时Xcode将在你的Mac上
主导按需资源
并根据要求输到你的设备中
以模仿Store的下载行为
对于使用Xcode持续集成的人
程式即将建立并主导你的按需资源
所以 你可以在你的团队中通过无线电进行测试App
最后 为帮助你追踪包
在进行调试时调试计量表将显示
所有按需资源进度和状态
所有工具的组合
将让你很容易的在App上使用按需资源
Xcode 7还有很棒的调试和性能分析工具
可以帮助你进一步强化应用的质量
塞巴斯蒂安刚提到我们重点放在电池寿命
摆脱你的大部分设备
充一次电即可支撑一整天这很重要
所以 我们让
能源使用跟踪应用变得简单
iOS新能量计量器将显示CPU使用
调用API联网以及定位服务
还将显示你的App
从前台到后台的转换
你可获得应用行为的内部信息使用其它调试测量表
当你需要更多信息时
可通过仪器获取所有细节
说到设备 设备已经更新
比以前更好了
目前 追踪视野更紧凑
使用流动姿势可让数据形象化更简单
我们还有不少更新后的工具以及新工具
可供你使用比如核心位置分析
新CPU系统追踪
在次次发布中 我们将
Clang's AddressSanitizer
整合到调试工作流程中
Address Sanitizer是C语言的一种
内存错误检测系统
一旦激活Xcode将监视应用的内存使用情况
检测普通问题 比如缓冲超限
检测出来时Xcode将通知你
并提供基本细节帮助你进行诊断
调试问题
和其他类似的工具不同
AddressSanitizer速度很快
速度快到你可以在你的交互应用中使用
但是尽管有如此出色的调试和分析工具
有时
漏洞会泄露 并造成崩溃
为帮助你尽快解决这个问题
Xcode为崩溃日志整合支持
将你的App提交到提交到TestFlight
谢谢
提交到TestFlight和app store
Xcode会提供
symbolicatedcrashes
服务于每一项任务
整合后将为你提供一份更新清单
关于apps最常见的崩溃告诉你回溯
崩溃的细节以及最近发生崩溃的排行榜
你可以重新命名崩溃以方便追踪
你也可以增加备注
当你搞定崩溃时可以对其做记号
当你回顾回溯时你想让它变得简单些
所以Xcode有OpenIn Project键
可使你将回溯下载到程序中的调试导航
提供熟悉的工作程序
为崩溃帧引导源代码
找出问题 并解决问题
早春时我们为你们的iOS应用提供崩溃日志
今天以Xcode7开头
你将拿到OS X应用的崩溃日志
watchOS应用的崩溃日志也将很快出来
这此次发布 我们还将提供
应用扩展到所有平台的app的崩溃日志
你就可以很好的进行追踪和改善
另一种改善应用的方法是测试
我都喜欢测试 对吧
我再试一下
我都喜欢测试 对吧
很好 因为测试是传送好应用的基本
今年 你有两个显眼的新添置
测试方法的核心是XE测试框架
和测试导航这些都将为你进行设计
组织测试提供不错的方法
在这之上Xcode为你提供了不少
测试应用的方法
你可以检测你API的正确性
随时测量追踪它们的性能
你可以在测试代码评估代码的同步行为和异步行为
不断的测试木马集成
所有这些组合在一起
可以做出一个强大的测试解决方案
但我们想要启发一个Notch
所以今年我们增加了用户界面测试
这建立在相同的测试基础之上
现在你可以进行正确性和性能测试
这些测试在用户界面上完成
将进一步扩大测试覆盖
说到覆盖 我们也增加了
代码覆盖是一种很棒的新方法
可用来评估测试进展
确保你能做所有你想要的测试
所以 让我们来快速的看一下
新UI测试和Xcode7中代码覆盖率特征的演示
这里有一个我和我的团队正在做的应用
是iOS和iOS X中的一个
SpriteKit游戏叫做Demo Bots
在我们开发应用时我们同样做了测试
从这里可以看到在测试导航中
有不少测试很有用
我们可以知道哪个部分的代码还未进行测试
或因为我们还未写测试
或因为目前的测试并不完整
对于Xcode 7这正是可获得的
带代码覆盖率测试的内部信息
一测试Xcode就会收集覆盖率数据
跳到测试报告
我们可以看到有一个新覆盖率部分
覆盖率部分的内部
应用中的所有文件被列出
它们的右边有一个指示器
显示每个文件的覆盖率百分比
现在 在这个清单中我按照从高到低进行分类
这样看起来好多了
往下滚动可以看到这里还有些工作要做
对于列表中的每个文件你可以公开内容
看看方法的覆盖率
以及此处说包含的功能
对于这个我已经公开的文件
前两个功能覆盖率100%
但其他三个的覆盖率为0
对于项目 报告为你提供覆盖率的高度概括
但是我们想直接为你提供信息
看看这里当我操作一个源文件时
我们直接将代码覆盖率信息
带到源编辑器中
黑色的这部分
是还未进行测试的代码
非常好这样我就知道该关注哪里
它和助理编辑器也配合得很好
因为你可以有源代码并一起进行测试
一旦测试持续进行就更新信息
如果我们回到报告看看未覆盖的类
大部分是用户界面类
它们是视图自控器 等等
所以 帮我一下
我要创建一个用户界面测试
我已经建立一个用户界面测试bundle和类
我将从这里挑选
我想要写的测试程序是用来测试游戏选择板
新API和XE测试可使你与用户转换元件互动
访问他们的设备
触发行动真的很容易写出来
但比写UI测试更简单的是什么 知道吗
记录一个让我来告诉你怎么做
我先解除项目导航
为自己释放一些空间
以及测试中我想进行的插入点
我将点击一下编辑器底部的
小记录按钮
你可以看到在我操作时Xcode开始应用
请注意
左上角的测试
首先我想要你点击应用中的选择按钮
你可以看到
Xcode正在记录测试代码的
插入对应线
你可以看到API非常简单
它正在为窗口和按钮询问应用
告诉我们点击
测试的下一步
我要填上玩家的名字
我开始在标准玩家把手这打字
你可以看到这里两件很酷的事情发生了
第一 当我在文本域打字时
编辑器也跟着更新并展示数值
非常的酷
另一个是
UI记录注意到我正在和
同一用户的界面因素进行不止一次的互动
它重构测试代码为它创建一个局部变量
这使得测试可读
意味着后续很容易重构并重新使用代码
我们继续从这挑选一些选择项
你可以看到测试升级了
对于最后一个要素我要从这选一个不同的机器人
我将按这个按钮选择蓝色机器人
点击完成回去看我的测试
和记录一样很容易就可追踪我所有的行动
测试还可以做更多的事
我们可验证一些数值
在点击完成按钮之前让我们先插入一些代码
检查设置是否正确
我将在这插入一些代码
从界面获取有效机器人的数值
这是在文本域中
我将和我预料的数值进行对比蓝色机器人
没有进一步的动态数据对象可以开始测试了
我不介入
这里可以看到它正在更新数值
选择正确的机器人
验证测试 测试通过了
所以记录产生编写UI测试真的很容易
我们可以看看Xcode内部的测试并局部运作
我们也可以让它在持续集成木马上运作
我为应用iOS和OSX版本设置一些木马
如果选择iOS版本看看测试
当我过滤掉失败的测试
我看到一些有趣的东西
我有四个界面测试它们iPhone上通过测试
但在iPad上 测试失败
为方便诊断测试失败原因
每个运行测试包括所有运行过的测试行为的副本
看到这些我可以通过扩展测试
这是一份清单测试的所有行为
是关于刚才就开始运行的
因为可以看到用户界面测试
我想要更进一步
每一个行动都包含平面截图
如果我检查iPhone上通过的测试
我可以得到一个平面截图关于测试如何开始的
这是我们游戏的开始
我也可以查看测试的中间部分
这里 我们用键盘
在文本域中敲入一个数值
我同样可以看测试的最后部分
这是在点击完成按钮前UI的情形
如果我将其翻过来在iPad上看测试
并一直跳过 直到最后部分
可看到这是iPad UI所有设置都正确
但没有完成按钮
显然 在UI中我们错误安装了一些东西
屏幕截图可以很快地帮我们缩小范围
代码覆盖率告诉我在哪里写测试
UI测试和记录让我可以
很容易的获取更多的覆盖率
新测试记录帮我
缩小问题范围
以上是关于Xcode 7
代码覆盖率和UI测试的信息
用户界面测试使系统可达性的使用与
UI要素相互作用
意思是如果你已经让你的app具有可达性
那么你也已经让你的app具有可测试性
UI测试同样可用于根据尺寸和定位设计的Uis中
包括从右到左的支持
也就是说你的UI测试
可以测量你的UI中所有的演示
新API 是的你可以为它鼓掌
新API和XE测试使用于
Swift和Objective-C
UI记录将生成你所使用的任何一个
这些是你在Xcode7可找到的新特征
在你为我们平台创建App时就可以看到
现在 我们要和你们分享一些令人兴奋的新技术
它们可用在游戏和制图中
我将邀请我的同事杰夫· 斯特尔上台
杰夫· 斯特尔：谢谢你马太·菲力克
我很激动Xcode 7实在令人惊讶
能在这里和你们谈论游戏和制图
似乎就在不久前我们在这里介绍了
我们首个与游戏有关的API Game Center
或社交类游戏网络
从那之后我们一直为API的键盘输入
和制图技术忙碌像游戏控制器SceneKit
SpriteKit以及最近的Metal
今年我们推出了不少新游戏技术
包括使你的绘图现代化的Model I/O
ReplayKit用来拓展游戏的社会范围
Game Center用来为你的游戏增加超级厉害的大脑
而且 我们把所有的这些都放在GameKit里
只要有一个GameKit所有功能均触手可及
很棒的解决方法
在我们平台上发展游戏的极其完整的解决方法
让我们来看看GameKit上的某些很酷的新特征
从Metal开始
你知道Metal是
去年我们为iOS推出的3DAPI
我们真的很兴奋今年我们将它引进OS X
作为翻新产品让我们来看一个例子
我们最近从OpenGL移到Metal的游戏开发
这里有个游戏 开始时
是在OpenGL上运行你可以看到
OpenGL处理命令使得一个CPU完全饱和
这使得游戏玩法进入第二个CPU
这个CPU并不繁忙事实上 在这个例子中
我们看到CPU有40%处于闲置状态
移到Metal
我们彻底地减少处理命令的时间
我们有API
你可以更直接的为GPU编程
如果你选择你可以将处理命令分开
穿过多重芯部
在这个例子中我们释放了GPU的全部性能
我们和第三方开发人员合作为OSX开发Metal
让我们花一分钟
看看他们在Mac上所做的
很高兴为你们介绍大卫·麦克德兰
他来自Adobe Systems
将为我们展示
他们使用OSX对Metal做了什么
大卫·麦克德兰:非常感谢
去年春天Adobe曾很激动
当Apple把iOS引进Metal的iOS时
事实上 我们已经用它来优化
部分流行的iOS App
Premier FlipPhotoshop Mix
而且看到了很好的结果
当Apple告诉我们Metal被引入到OSX
我们非常的激动
这样一来 我们就可以在这些平台分享我们的代码
今天我将展示我们的一些进展
Mac OS的两款旗舰产品
Illustrator和After Effects
我们来看一下
这是当前版本的Adobe Illustrator
里面有大量的原图超过三十万点
渐变和合成模式
我将继续并对这张原图做缩放
你可以看到
在处理那张复杂的原图时速度有点慢
我真想看看我们能否做些改善
用这个版本 我们将展示
在我们用了整个绘制引擎并将它放到Metal上时
我们可以用Metal做什么
事实上 它很好用
它们将展示出有不断缩放功能的全新特征
当你考虑我们可以用Metal做什么的时候
你可以看到结果出人意料
事实上 我可以一直缩放放大很多
直到你可以看到文本信息
这也很大程度上改变了艺术家使用我们产品时的工作方式
现在我想谈一下后遗效应
这里有一盘录像来自极限运动团videographer
DevinSupertramp
让我们快速浏览一遍
十分有趣
我们要的是从中选择一个镜头
用后遗效应进行分析加入一些效果
将其制作成商品广告插播
所以在这里 我将做一些
色彩校正 波纹特效
和镜头光斑特效接下来
脱离Metal重新播放一遍
你可以看到它在中央处理器中运行十分困难
也不能产生
我们所倾向的交互性能
并提供给文字编排人员
这也是对程序员的一种挑战他们要时刻注意这一点
看看能利用Metal做些什么
所以短时间内 他们需要
将这三个效应转移给Metal之后
你们会发现相当惊人的不同
现在我切换到相同的编制
但这次那些特效将会被替换
转变为Metal版本下面我再重播一遍
你可以马上看到实时运行
不需要降低框架我们看到
这些特效达到八倍的性能优化
很大程度上减少处理器使用量
因此奥多比公司致力于将Metal
引入到Mac操作系统创新云应用中
如Illustrator及我今天为你展示的后遗效应
当然还有Photoshop和Premier Pro
我们很激动看到Metal
为云用户所做的一切
非常感谢
杰夫 斯特尔：大卫 谢谢你 这不可思议
我同意克雷格的观点这十分有趣 因为
你可以进行非实时交互作用并转换为
流畅的用户交互
但Metal不仅适用于应用程序
当我们说到今天早上
iOS系统中关键的图形技术
接入就将OSX系统以及应用程序界面
直到现在像核心动画技术
以及硬件加速的核心图像
移文档Safari页面显示都已被置于开放图形语言顶端
这意味着中央处理器疲于应对图形处理器的指令
运用Metal我们可以提高效率改进性能
尤其是关键的用户级别任务
此外 我们不想仅仅
提升系统性能
我们真正想做的是想让所有人可以很轻松地
使用Metal
因此我们引入MetalKit
通过它可以了解Metal
这对你来说是一份重担
MetalKit可以做很多事从绘制渲染循环
到通过交互作用加载3D模型
主要是同艺术家I/O模式的交互作用
事实上MetalKit可以将网格
直接输入Metal缓冲器
运用所能做的去渲染场景
不仅如此
Metal着色器是高性能
图像处理着色器主要应用于Metal应用程序
这些都是基于图形处理器的平行计算着色器
个别再次转变为我们的图形处理器使我们更易
使用Metal
所以现在 你拥有极佳的渲染管道
但也需要丰富的储存信息
因此我们使用I/O模型
有时使用3D模型加载和运行比较难处理
这都多亏了I/O模型
简化了内容加载
使不同文件格式的内容可直接输入SceneKit
或通过与MetalKit交互作用输入到Metal中
但它将自己区分在于处理光照的方式
I/O模型向你提供最先进光线跟踪的
材料照明方式
这意味着它惊人地提供
纹理映射
让我们看一下
从基线开始
这仅是一个模型它是通过纹理载入
这很难让人感兴趣
事实上 它比较单调
我认为九零后希望重新启用该模型
如果我们除去纹理
并应用全球照明方式
那么我们看到的
是那些看起来十分真实的事物
我们再将纹理添加进来就会得到一些
看起来很棒的东西
最后 当然即使使用I/O模型
以及它的照明方式你也可以添加自定义照明
和阴影使事物看起来更加真实
你可以得到一些惊人的结论从普通
到非凡 I/O模型可以向你提供卓越的解决方案
帮助你的模型和照明
所以现在你拥有极佳的渲染管道
也有极佳的模型和储存信息
现在只需好的游戏设置
因此我们有了GameplayKit
游戏设置可分为两个领域
我们有导航否则你如何在游戏里移动目标
我们也有策略否则游戏如何思考
GameplayKit对这两方面都有解决方案
GameplayKit基于组件的应用程序界面完全保障
游戏设置的对策
不论你是想追踪其他玩家的黄金
还是想从甲地到乙地追踪敌人
并且消除途中的障碍
就需要生成确定随机数
以便下次进行在线联机游戏
游戏设置也为你提供解决方案
从简单游戏到复杂游戏
我们认为游戏设置可以有效地帮助你们
开发游戏
我们从社会组成开始即游戏中心
ReplayKit可以扩展到社会交互作用
ReplayKit允许玩家录制电视节目重播
主要针对游戏开放
他们可以保存或分享录像
它属于硬件加速具有高性能
十分便于你们操作
便于将其添加到游戏中也许
它可以开展下一次的病毒式市场营销活动
来推广游戏项目
最后是SceneKit和SpriteKit
我们对他们进行了一些伟大的更新
但我觉得最有趣的或者说最引人注目的
是我们创建了一些工具
可以让SceneKit和SpriteKit
直接导入Xcode 7系统接下来由我的同事
Jacques Gasselinde Richebourg
向你们展示Xcode 7内部工具
去年的Xcode 6系统我们引进了视觉场景编辑
添加进Xcode 系统的SpriteKit
今年 我们引进了一个缺口
并将动画编辑添加进Xcode系统
所以在这里我会做一些场景剪切
你们会看到可爱的红色小熊他将往前走
穿过两条峡谷走到另一边
这些都是基础的动画技术我在这里呈现一下
我想要将此分层导入到动画中
很明显 我们首先让它运行
接下来 抓取一个动作
现在让我们进行最有趣的操作
这是一个参考行为
意味着它实际上储存在另一个文件里
即actions.sks文件
我在这里进行参考就可以进行排版操作
所以我打算抓取下来
当然这和复制粘贴或一样简单
我打算多做几次它就会很自然地附加
在相同的轨道后
让我们看一下接下来
这次我们使用清除器所以它是一个时间线
一个有清除器的时间线你可以随时预览
动画的大致模样
这不仅是一个极佳的预览工具
实际上它也是不错的编辑工具
你可以注意到他没有跳过峡谷
这是个问题 我们将进行调整
让我们想出 他跳跃的好时机
看起来这里是最好的
之后我们要抓取一个移动瞬间
让他在这里跳跃
现在注意是如何抓取时间线的
好 下面让它增长100个单元
再次使用时间线
计算出顶点值
大约在这里
现在看一下持续时间
好了吗？这很简单
很明显 当他跳起来我想让他减速
这意味着在一开始 他速度很快
在顶点时却很慢
复制 粘贴 反过来
达到负100
然后开始加速
使他能够在顶点停滞
好 让我们对此净化
这是抛物线式跳跃
完美 现在 可以看到它有点怪异
如果他在空中停留的话所以让我们添加一个动画
注意 我在每个动画顶端进行分层
这次我们使用SpriteKit进行操作
现在我要抓取跳跃长度的动画
进入媒体库
取出跳跃画面
过滤掉跳跃选中它 就可以选中全部
拖拽 好的
很好 现在对此净化
好 一个完美的跳跃
现在 这里有两个峡谷
重复两次操作
最简单的方式是将此转变为参考
选中 点击右键
转变为参考将此命名为Jump
储存进actions.sks文件
我之前运行过
好 很好 这就是跳跃
再次使用清除器设置另一次跳跃
参考最大的用途
是它们在这里出现直接显示在目标程序库中
我只需将它拖拽进来
现在就完成了我们的最终剪辑画面
好 跳跃 再跳跃
很好 好的 谢谢大家
最棒的一点 对于参考而言就是它们不仅帮助你
设置其他场景 还有编码
接下来这里我们运用Sk操作
加载相同的操作过程将它们连接过去
连接到左右键以及空格键来跳跃
让我们操作一下看一下过程
现在利用熊猫进行剪辑场景
完美 现在我来控制它
看着 左 右
跳跃
很简单
大家都很忙
所以转化到下一个动画
对Xcode 7系统不熟悉我们拥有完整的视觉场景编辑
运用SceneKit编辑3D储存信息
这个编辑程序很像SpriteKit2D程序
同样的工作原理
拖拉以添加新信息
也可以使用3D中的调制器环绕拖动
对齐到其他事物
你甚至可以复制
还有一些物理过程
以及编辑器内部的动画
现在我们进行动画绘制
很好让我们与此进行交互作用
播放
就可以从之前的演示中看到同样可爱的熊猫
让我们试一下
这是一只红色熊猫而不是狐狸 是一只红色熊猫
继续操作接下来
将其与之前的小资料块进行交互作用
好 剔除出去
很好 在这个游戏中播放这只小红熊
它正在采摘花朵和珍珠
很遗憾
我承诺在制作过程中不会伤害到熊猫
这不仅是对现阶段的演示
实际上 我们在向你展示
这是个样本
你可以设计下一个3D SceneKit游戏
使用这个编辑器SceneKit
以及Xcode7系统谢谢大家
接下来让我们欢迎安德里亚斯
好的
让我们快速回顾一下我们会上讨论过的技术
今天我们宣布了OSs的新版本
新的本地化watchOS软体开发套件
该套件含多个新应用程序界面你可以充分利用
尤其是在游戏过程中
新的最优化技术包括应用瘦身
转换的新版本让软件运行更快
同时可以让你编写更有效的代码
当然目前Xcode系统的新版本
具有用户界面记录和检测
这些技术有利于你下载
今天下午全球开发者大会参与者门户上面的内容
我们希望你可以很快采用它们
甚至为用户设计更具创新性的应用
请继续载入所有素材
让我们知道你对它的看法
此外 我们也进行一些创新在今年 使用飞行试验服务
从今天开始 你们可以对应用进行配置
适用于飞行测试中iOS 9软件开发工具包
接下来的几周里我们会继续加大支持 尤其是对分层应用
点播资源以及Bitcodes所以你可以检测自己的应用
在我们发行iOS 9之前运用这些新技术
预计今年下半年
超过一百个讲座
超过一百五十个实验室超过一个apple工程师
当然 在这里我们有很多机会去学习
在会议上讨论的这些技术
而且 你还可以参加一百多次会议
去众多实验室获取项目帮助
实际上 有一百多名苹果公司工程师
在现场回答你的问题
所以 我希望你们可以享受此次会议
并在此周之后收到你们的回复