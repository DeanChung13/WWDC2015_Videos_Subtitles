00:00:22.956 --> 00:00:24.658 
iOS和watchOS的性能

00:00:31.632 --> 00:00:32.466 
早上好

00:00:33.967 --> 00:00:37.004 
我是 本
我是一名iOS性能工程師

00:00:37.538 --> 00:00:41.208 
今天我們要談一談
iOS和watchOS的性能

00:00:42.876 --> 00:00:44.311 
那麼我們首先 要告訴你

00:00:44.645 --> 00:00:46.413 
你爲什麼要思考
與性能相關的問題

00:00:46.647 --> 00:00:49.216 
如果你之前從未思考過
你的app的性能如何

00:00:49.283 --> 00:00:50.417 
那麼爲什麼現在要開始

00:00:51.919 --> 00:00:54.388 
希望我能說服你
留在你的座位上繼續往下聽

00:00:55.255 --> 00:00:58.125 
然後我們可以繼續聊一聊
你應該如何思考性能問題

00:00:58.525 --> 00:01:01.862 
這個話題貌似非常寬泛
有時甚至令人生畏

00:01:02.362 --> 00:01:04.665 
但是我們要把它細分成
幾個類別

00:01:05.065 --> 00:01:07.167 
並給你提供一些具體的策略

00:01:07.234 --> 00:01:10.037 
來提高你的app
在這些方面的性能

00:01:11.038 --> 00:01:13.440 
最終 很有可能
你會興奮地發現自己

00:01:13.507 --> 00:01:15.676 
可以給watchOS編寫本地代碼

00:01:15.909 --> 00:01:17.644 
我們則要深入研究
在這個平臺上

00:01:17.711 --> 00:01:20.948 
你還可以爲給用戶最佳體驗
做出什麼貢獻

00:01:22.015 --> 00:01:24.618 
那麼你爲什麼要
考慮性能問題呢

00:01:25.252 --> 00:01:29.156 
最簡單的回答是
性能是一個特性

00:01:29.957 --> 00:01:34.828 
要想讓你的app用戶有良好的體驗
性能是核心是中心要素

00:01:35.195 --> 00:01:38.131 
它不是額外的津貼或獎金
或如果你有時間可以

00:01:38.198 --> 00:01:39.733 
在任務結束時你可以得到的東西

00:01:40.467 --> 00:01:44.805 
事實上 你在編寫app時
應該時刻關注它的性能

00:01:45.339 --> 00:01:46.473 
這樣要求 有幾個原因

00:01:48.041 --> 00:01:49.843 
如果你的app反應迅速

00:01:49.910 --> 00:01:52.746 
如果它總是立即
反應用戶的輸入

00:01:53.547 --> 00:01:55.983 
就會構建起用戶的信任

00:01:56.850 --> 00:02:01.355 
那樣就讓用戶知道
如果他們需要通過你的app

00:02:01.522 --> 00:02:03.223 
訪問信息或進行交互操作

00:02:03.624 --> 00:02:05.058 
他們無需久等

00:02:05.526 --> 00:02:08.061 
這會讓他們很高興
成爲回頭客

00:02:10.030 --> 00:02:11.932 
如果你要在使用iOS 9
的iPad裏

00:02:11.999 --> 00:02:14.101 
採用多任務應用程序
Multitasking

00:02:14.201 --> 00:02:17.304 
它不僅不能
滿屏幕運行

00:02:18.138 --> 00:02:19.473 
實際上它也不能
充分利用

00:02:19.540 --> 00:02:21.241 
系統的資源

00:02:22.109 --> 00:02:25.646 
所以app的性能問題
再也不只是給你的app用戶

00:02:25.712 --> 00:02:27.314 
帶來糟糕的使用體驗

00:02:27.648 --> 00:02:29.316 
它還可會損害
另一個app的

00:02:29.416 --> 00:02:30.651 
用戶體驗

00:02:31.585 --> 00:02:34.354 
你肯定想成爲
Multitasking裏的好鄰居

00:02:36.924 --> 00:02:39.860 
所有App的體系結構都着眼於
高效利用系統資源

00:02:40.160 --> 00:02:42.863 
比如CPU和內存
你利用它們時

00:02:42.930 --> 00:02:45.732 
不只是感覺很好
其實也是在節省電池

00:02:45.799 --> 00:02:47.234 
讓用戶可以
堅持一天

00:02:47.568 --> 00:02:48.735 
對此他們真的很感激

00:02:50.170 --> 00:02:53.841 
最後 iOS 9支持
範圍龐大的硬件

00:02:54.341 --> 00:02:56.944 
而要持續地
爲所有的客戶

00:02:57.010 --> 00:03:00.314 
提供優秀的app和特色功能
性能是一個先決條件

00:03:03.984 --> 00:03:05.886 
那麼 我就有希望說服
各位 你們不必走出去了

00:03:07.554 --> 00:03:09.156 
你們應該如何思考
有關性能的問題呢

00:03:09.489 --> 00:03:11.225 
開發app的第一步

00:03:11.558 --> 00:03:14.161 
是選擇技術

00:03:15.062 --> 00:03:17.865 
這一步至關重要 因爲
你需要選擇

00:03:17.998 --> 00:03:18.999 
哪種技術會

00:03:19.066 --> 00:03:21.034 
讓你的用戶有
最好的體驗

00:03:22.569 --> 00:03:25.372 
一旦你開始
構建應用程序

00:03:26.106 --> 00:03:27.708 
你就可以開始
採取測量手段

00:03:27.774 --> 00:03:30.611 
並真正理解
在你的app裏用戶

00:03:30.844 --> 00:03:32.412 
在重要的交互中的
體驗情況

00:03:34.081 --> 00:03:37.284 
你的測量手段會告訴
你今天你的app的下載情況

00:03:37.918 --> 00:03:40.454 
一旦你得到了那些數據
你就可以設定一些目標

00:03:40.687 --> 00:03:42.389 
比如在把它提交給
應用商店之前 你想讓

00:03:42.456 --> 00:03:43.957 
你的app處於何種狀態

00:03:45.058 --> 00:03:47.694 
最後 一旦你
得到那些數據 你就已經準備好

00:03:47.761 --> 00:03:50.430 
開始修改代碼
來提高app的性能

00:03:50.497 --> 00:03:53.066 
你可以遵循
一個很好的工作流程

00:03:53.300 --> 00:03:54.468 
來全力實現你的目標

00:03:55.702 --> 00:03:57.971 
那麼讓我們從
選擇技術開始

00:03:59.006 --> 00:04:02.009 
選擇正確的工具
來完成這項工作是

00:04:02.075 --> 00:04:03.177 
構建app的一項重要

00:04:03.443 --> 00:04:06.446 
的早期工作 是保證app
性能卓越的一個前瞻性的步驟

00:04:07.214 --> 00:04:09.917 
而選擇技術
的第一步是

00:04:09.983 --> 00:04:11.118 
瞭解的這些技術

00:04:11.652 --> 00:04:13.287 
所以在這個演講中

00:04:13.787 --> 00:04:17.057 
我將引用今年
和前幾年的幾場其他演講

00:04:17.824 --> 00:04:19.059 
這幾場
演講都涉及了

00:04:19.293 --> 00:04:20.761 
我們認爲
有助於提高

00:04:20.861 --> 00:04:22.429 
app性能的技術

00:04:24.198 --> 00:04:27.134 
一旦你知道有多少
技術可以爲你所用

00:04:28.202 --> 00:04:30.037 
那麼你就可以
根據你的app的

00:04:30.103 --> 00:04:32.239 
設計構想和
工作內容

00:04:33.440 --> 00:04:35.042 
來挑選最合適的技術

00:04:36.043 --> 00:04:38.712 
舉一個很好的例子
如果你的app需要

00:04:38.779 --> 00:04:40.080 
存儲三個字符串

00:04:40.948 --> 00:04:43.417 
你可能可以把這些字符串
寫進一個plist文件或

00:04:43.483 --> 00:04:44.852 
放在用戶默認中

00:04:45.485 --> 00:04:48.822 
但是 如果您的app
需要使用3000個字符串

00:04:49.556 --> 00:04:50.757 
你可能就要
考慮核心數據了

00:04:52.459 --> 00:04:53.627 
說到核心數據

00:04:54.494 --> 00:04:55.762 
當你
選擇技術時

00:04:56.296 --> 00:04:57.264 
我強烈建議你

00:04:57.331 --> 00:04:59.433 
考慮Apple
APIs和框架

00:05:00.334 --> 00:05:02.569 
我們在Apple
APIs和框架上花了大量時間

00:05:02.636 --> 00:05:04.104 
力圖
讓它們滿足你和你的用戶的

00:05:04.404 --> 00:05:06.306 
需求 我們也在其基礎上
創建我們自己的產品

00:05:07.641 --> 00:05:11.278 
採用Apple APIs和框架
的一個好處是

00:05:11.345 --> 00:05:13.747 
用戶在安裝了
你的app之後

00:05:14.681 --> 00:05:16.383 
他們可能會安裝
一個iOS更新

00:05:16.884 --> 00:05:19.887 
這些更新經常包含
對核心APIs和技術的

00:05:19.953 --> 00:05:21.522 
性能改進

00:05:21.989 --> 00:05:23.757 
所以下次
他們在安裝了

00:05:23.824 --> 00:05:27.027 
一個iOS更新之後 打開你的app
就會發現app神奇地變快了

00:05:28.195 --> 00:05:29.963 
那麼你選擇了
某些技術

00:05:30.564 --> 00:05:31.698 
並且開始
構建應用程序了

00:05:32.799 --> 00:05:33.967 
現在我們要談論測量問題

00:05:34.668 --> 00:05:36.403 
有幾個類別
的性能

00:05:36.470 --> 00:05:37.638 
我們可以
考慮測量

00:05:38.939 --> 00:05:40.240 
讓我們從動畫開始

00:05:40.841 --> 00:05:43.677 
動畫讓你的app
活潑 流暢

00:05:43.744 --> 00:05:46.713 
還能夠讓用戶知道他們
在哪裏 發生了什麼

00:05:47.581 --> 00:05:49.349 
測量動畫性能的
最簡單的方法

00:05:49.416 --> 00:05:52.186 
是Core Animation工具

00:05:55.689 --> 00:05:59.326 
反應速度測量的是
你對用戶的輸入做出反應的迅速程度

00:05:59.860 --> 00:06:01.628 
實際上 測量反應速度

00:06:01.695 --> 00:06:05.165 
最簡單的方法
看起來技術含量有點低

00:06:05.599 --> 00:06:06.533 
但是它真的很強大

00:06:07.000 --> 00:06:09.269 
並且只是插裝
你的實際代碼

00:06:09.937 --> 00:06:11.171 
我將給它
舉一個例子

00:06:12.673 --> 00:06:15.742 
更復雜的場景
可能涉及多個線程

00:06:15.809 --> 00:06:17.411 
或大量的系統交互

00:06:17.744 --> 00:06:19.780 
對於這樣的場景有一個
偉大的工具叫做系統跟蹤

00:06:21.181 --> 00:06:22.583 
最後要說的是內存

00:06:23.417 --> 00:06:26.320 
內存是移動設備上
最寶貴的資源

00:06:26.987 --> 00:06:28.121 
確保你的app的內存

00:06:28.188 --> 00:06:30.757 
正好能夠滿足需要
不多不少

00:06:30.824 --> 00:06:32.292 
這一點很重要

00:06:33.460 --> 00:06:35.796 
和前面相似的是
有一個簡單但強大的方法

00:06:35.863 --> 00:06:37.664 
來瞭解app
內存的使用情況

00:06:37.731 --> 00:06:40.200 
我馬上就要談到了
那就是Xcode調試器

00:06:41.368 --> 00:06:42.636 
如果你要
瞭解更多情況

00:06:43.103 --> 00:06:44.872 
還有一個很好的工具
叫做存儲器分配

00:06:45.639 --> 00:06:48.075 
如果你認爲
有漏洞 也有一個工具

00:06:48.141 --> 00:06:49.376 
來幫助你追蹤
這些漏洞

00:06:51.345 --> 00:06:52.179 
那麼

00:06:53.413 --> 00:06:55.549 
讓我們舉一個
代碼插裝的例子

00:06:55.616 --> 00:06:58.785 
我這裏有一個IBAction
連接到一個按鈕

00:06:58.852 --> 00:07:00.287 
所以當用戶按下按鈕時

00:07:00.687 --> 00:07:02.756 
我就要加載一個圖像
並把它放在我的視圖

00:07:03.524 --> 00:07:04.992 
而且我想知道
這需要多長時間

00:07:05.926 --> 00:07:07.160 
所以我要用一個AP

00:07:07.895 --> 00:07:09.796 
叫做"CF絕對時間當前值"

00:07:10.731 --> 00:07:12.833 
現在 我並不關心
當前時間的

00:07:12.900 --> 00:07:14.635 
絕對值
但我在意的是

00:07:14.701 --> 00:07:16.403 
它們之間
的差別

00:07:18.038 --> 00:07:21.141 
這個API 儘管它是
SWIFT 是類型推斷

00:07:21.208 --> 00:07:24.011 
非常好 但是我將
告訴你它會返回一個雙精度浮點

00:07:24.444 --> 00:07:27.848 
具體地說 這個雙精度浮點數
以秒爲單位代表當前時間

00:07:28.682 --> 00:07:30.918 
一秒鐘實際上
是一段很長的時間

00:07:31.185 --> 00:07:33.120 
如果你的app用了
一秒鐘 你的用戶

00:07:33.187 --> 00:07:34.388 
真的會感覺到

00:07:35.289 --> 00:07:37.191 
其實我們發現毫秒

00:07:37.391 --> 00:07:39.326 
是一個更可行的
度量單位

00:07:40.027 --> 00:07:42.262 
所以我們要從結束時間
減去開始時間

00:07:42.329 --> 00:07:44.164 
並把結果
乘以一千

00:07:44.464 --> 00:07:46.333 
以得到以毫秒爲單位的
測量結

00:07:49.236 --> 00:07:52.439 
概要描述
app的發行組態

00:07:52.506 --> 00:07:55.943 
很重要 這樣你將得到
你的用戶所得到的

00:07:56.543 --> 00:07:57.644 
所有的編譯器優化

00:07:57.711 --> 00:08:00.247 
你也將瞭解你的app
在它的領域內的

00:08:00.881 --> 00:08:03.417 
實際表現；然
同樣重要的是不要

00:08:03.483 --> 00:08:06.320 
把你的性能插裝提交
給應用商店

00:08:06.987 --> 00:08:09.356 
所以我的建議是
你在Xcode中

00:08:09.423 --> 00:08:11.291 
複製一份你的研發流程

00:08:11.491 --> 00:08:13.961 
同時定義一個額外的定義

00:08:14.228 --> 00:08:17.497 
這樣您就可以
用性能插裝

00:08:17.831 --> 00:08:20.701 
輕鬆 快捷地
構建一個app的發佈版本

00:08:21.902 --> 00:08:25.305 
那麼什麼類型的反應
我們有興趣測量呢

00:08:25.772 --> 00:08:28.075 
當然是按鍵和
按鈕

00:08:29.409 --> 00:08:32.645 
大多數情況下 你可以
在IBActions中做這些

00:08:33.347 --> 00:08:37.150 
你也可以用UIView
觸摸處理代碼做這些事

00:08:37.951 --> 00:08:39.986 
或者你可能以
手勢識別器爲目標

00:08:41.755 --> 00:08:44.191 
App性能的
另一個有趣的方面

00:08:44.258 --> 00:08:46.927 
就是用戶在
使用這個應用程序

00:08:46.994 --> 00:08:49.062 
並切換到不同的
視圖時感受如何

00:08:49.530 --> 00:08:51.465 
無論他們是使用
標籤欄還是模態視圖

00:08:53.133 --> 00:08:55.202 
在這種情況下
我們覺得思考

00:08:55.269 --> 00:08:57.204 
"視圖將顯示"和"視圖出現"
之間的時間

00:08:57.271 --> 00:08:59.773 
是件有趣的事
因爲那讓你可以比較

00:09:00.107 --> 00:09:03.110 
你的哪一個觀點要花更長的時間
來準備 以出現在屏幕上

00:09:06.013 --> 00:09:07.548 
那麼你已經取得了
一些測量結果

00:09:07.648 --> 00:09:09.383 
瞭解了
你的app的表現

00:09:10.384 --> 00:09:12.986 
在你將app提交到應用商店之前
你希望它取得怎樣的成績

00:09:13.053 --> 00:09:14.388 
要如何
設定這個目標呢

00:09:15.589 --> 00:09:18.892 
在以60幀每秒的速度
運行時 動畫

00:09:19.193 --> 00:09:20.961 
感覺很棒 逼真
流暢又有生氣

00:09:22.162 --> 00:09:23.997 
今年我不打算
過多談論動畫

00:09:24.431 --> 00:09:26.667 
因爲去年有一個很好的關於動畫的
演講 你可以查看

00:09:27.067 --> 00:09:29.369 
名字是"iOS Apps中的
高級圖形和動畫"

00:09:30.337 --> 00:09:32.973 
那場演講談到了
核心動畫工具

00:09:33.040 --> 00:09:34.842 
以及如何
使用它

00:09:34.908 --> 00:09:36.743 
來衡量並利用
所有硬件

00:09:36.810 --> 00:09:38.212 
改善動畫性能

00:09:39.513 --> 00:09:42.482 
今天我們要把大量的
時間花在反應速度上

00:09:43.350 --> 00:09:45.319 
反應速度 再說一次

00:09:45.552 --> 00:09:47.521 
反應的是你如何對用戶輸入進行反應

00:09:47.988 --> 00:09:49.223 
我們發現

00:09:49.556 --> 00:09:51.859 
如果它需要超過一百毫秒

00:09:51.925 --> 00:09:53.227 
用戶就能夠感覺到

00:09:53.560 --> 00:09:57.831 
所以 你對任何響應性的目標
應是一百毫秒

00:09:58.732 --> 00:10:00.601 
順便提一下 你想考慮

00:10:01.034 --> 00:10:05.038 
在你要支持的最老的硬件上
實現這些性能目標

00:10:06.373 --> 00:10:08.175 
如果你針對iOS 9

00:10:08.375 --> 00:10:10.744 
那麼可能是最早的iPad mini

00:10:11.078 --> 00:10:13.547 
iPhone 4s 甚至 iPad 2

00:10:14.548 --> 00:10:15.749 
如果你已經有了這其中之一

00:10:15.816 --> 00:10:18.118 
或者更確切地說
你仍然還在用這着其中之一

00:10:18.185 --> 00:10:21.655 
那麼繼續用它
接下來對它進行檢測

00:10:22.523 --> 00:10:23.423 
如果不是這樣

00:10:23.490 --> 00:10:27.127 
那麼在Apple Online Store上
有很棒的翻新部件

00:10:31.698 --> 00:10:33.200 
所以你已經設定了目標

00:10:33.400 --> 00:10:34.468 
你已經做了檢測

00:10:34.968 --> 00:10:37.871 
現在你想繼續通過
在你的app上更改代碼

00:10:38.172 --> 00:10:39.439 
來提高性能

00:10:40.574 --> 00:10:41.441 
我們如何開始呢？

00:10:42.576 --> 00:10:44.311 
首先 不用猜

00:10:45.078 --> 00:10:47.347 
你一定想用工具做簡要分析

00:10:47.581 --> 00:10:50.951 
解決造成你的app性能問題的根源

00:10:51.752 --> 00:10:55.222 
你的直覺總是對的
這想法很誘人

00:10:55.489 --> 00:10:57.457 
但是這可能如同拋硬幣一樣不準確

00:10:58.859 --> 00:11:02.029 
據此 不要過早優化

00:11:02.563 --> 00:11:05.699 
除非你有證據表明
儘可能簡單的做法

00:11:05.766 --> 00:11:09.937 
不足以達到卓越的性能
否則不用把你的代碼複雜化

00:11:10.437 --> 00:11:16.009 
經常是人們引入一些機構
試圖避開性能問題

00:11:16.476 --> 00:11:18.345 
結果卻是造成他們自身的性能問題

00:11:20.881 --> 00:11:22.382 
一次只做一處更改

00:11:22.749 --> 00:11:26.854 
你肯定想開始培養你的直覺

00:11:27.054 --> 00:11:29.923 
以便知道
如何能夠改進你的app的性能

00:11:30.457 --> 00:11:36.296 
但是很難知道你做的哪件事
確實改進了你的app性能

00:11:36.864 --> 00:11:38.599 
所以一次只改一處

00:11:39.366 --> 00:11:42.703 
我這裏實際想說的是沒有奇蹟

00:11:42.970 --> 00:11:44.671 
這只是普通的調試而已

00:11:45.038 --> 00:11:49.176 
所以同樣要本着嚴謹而科學的態度
去排除

00:11:49.243 --> 00:11:51.311 
app中存在的死機或功能問題

00:11:54.815 --> 00:11:57.084 
這是我希望你打印出來的圖片

00:11:57.150 --> 00:12:00.020 
掛在你牆上的的圖片
設成你Mac的壁紙

00:12:01.121 --> 00:12:03.557 
這就是我們如何通過更改代碼

00:12:03.757 --> 00:12:05.058 
來改進app性能的

00:12:05.826 --> 00:12:08.428 
首先你要做的是在腦海中重現這個問題

00:12:09.630 --> 00:12:14.434 
之後用工具進行分析 瞭解

00:12:14.501 --> 00:12:15.903 
你的代碼是哪裏

00:12:15.969 --> 00:12:16.870 
造成了性能問題

00:12:17.604 --> 00:12:19.273 
在一個足夠大的代碼庫在

00:12:19.806 --> 00:12:22.276 
你的直覺可能的確不對

00:12:22.376 --> 00:12:23.877 
所以還是收集證據爲好

00:12:24.912 --> 00:12:28.182 
之後 一旦你找到

00:12:28.482 --> 00:12:31.585 
造成你app中性能不理想的代碼

00:12:32.286 --> 00:12:34.154 
你就能確切算出你需要爲此

00:12:34.221 --> 00:12:35.055 
花費多長時間

00:12:35.489 --> 00:12:38.692 
最後
你只要有針對性對對代碼做一次更改

00:12:38.926 --> 00:12:40.527 
以嘗試達到你的目的

00:12:42.796 --> 00:12:46.233 
常常是一處更改

00:12:46.300 --> 00:12:48.702 
無法讓你一次達到目的 事實上

00:12:49.069 --> 00:12:51.038 
多次更改

00:12:51.371 --> 00:12:53.006 
才能最終達到你的目的

00:12:53.707 --> 00:12:55.909 
這就是爲什麼說這是一個週期
因爲你可能會發現

00:12:56.143 --> 00:12:59.146 
你更改代碼並再次重現後 有所改善

00:12:59.213 --> 00:13:00.447 
但沒有達到你最終的目的

00:13:01.248 --> 00:13:04.384 
所以你要繼續這個週期
直到你滿意

00:13:09.623 --> 00:13:13.460 
幻燈片上是分析和檢測情況
似乎都類似

00:13:13.527 --> 00:13:15.362 
但是實際上

00:13:15.429 --> 00:13:16.797 
這是改進你的app性能的

00:13:17.030 --> 00:13:18.465 
兩個分立的步驟

00:13:19.032 --> 00:13:22.636 
再次分析時
採用工具如Xcode調試器

00:13:22.836 --> 00:13:25.539 
以及Instruments:
Time Profiler

00:13:25.639 --> 00:13:28.275 
就與你性能方面具體問題相關的代碼

00:13:28.342 --> 00:13:29.443 
得到一個全面的概覽

00:13:30.344 --> 00:13:34.014 
檢測針對你代碼某具體區域

00:13:34.314 --> 00:13:36.850 
以準確瞭解用戶的

00:13:36.917 --> 00:13:37.751 
等待時間

00:13:38.118 --> 00:13:38.952 
我給出的

00:13:39.019 --> 00:13:41.922 
"CF absolute time
get current"的例子

00:13:42.256 --> 00:13:44.124 
再次證明確實很好用

00:13:45.092 --> 00:13:47.394 
對於更復雜的情形 有System
Trace

00:13:50.597 --> 00:13:52.099 
所以讓我們來談談響應響應性

00:13:57.404 --> 00:14:00.207 
響應即是對用戶輸入的反應

00:14:00.841 --> 00:14:03.210 
談到響應性 我們不得不提到

00:14:03.277 --> 00:14:04.912 
你app的主線程

00:14:05.412 --> 00:14:06.680 
因爲你app的主線程

00:14:06.747 --> 00:14:08.515 
是你消耗所有用戶輸入的所在

00:14:09.016 --> 00:14:10.851 
--來自觸摸屏的一切

00:14:10.918 --> 00:14:14.154 
一次敲擊或一次滾動--即有來自設備
其他傳感器的一切

00:14:14.221 --> 00:14:16.023 
比如定位更改

00:14:16.723 --> 00:14:20.294 
及多重任務縮略圖及其他系統狀態
事件等均在這裏

00:14:21.695 --> 00:14:24.331 
如果你的主線程主要針對

00:14:24.464 --> 00:14:25.766 
用戶輸入響應任務

00:14:26.233 --> 00:14:28.402 
你的app將始終感覺很棒

00:14:29.770 --> 00:14:31.672 
如果你對你的主線程操作有些不夠細心
或者

00:14:31.738 --> 00:14:33.607 
也許你在你的主線程上

00:14:33.674 --> 00:14:34.508 
什麼都做

00:14:35.008 --> 00:14:37.744 
那麼你的app可能出現
停滯或凍結現象

00:14:40.547 --> 00:14:43.217 
所以
我們應該避免對我們的主線程做什麼？

00:14:44.384 --> 00:14:47.821 
特別注意CPU密集型業務

00:14:48.488 --> 00:14:51.191 
這可能是解析你從網絡上下載的很長一
段字符串

00:14:51.258 --> 00:14:54.127 
可能是對某圖像進行過濾

00:14:54.695 --> 00:14:57.064 
以及與外部資源有關的任務

00:14:57.531 --> 00:14:58.565 
我回頭還會講這個問題

00:14:59.366 --> 00:15:02.035 
我今天不打算花太多時間講CPU密集
型業務

00:15:02.102 --> 00:15:04.104 
因爲本週開始的時候有一個非常好的演
講

00:15:04.304 --> 00:15:05.572 
演講者做了

00:15:06.173 --> 00:15:07.841 
叫做"Profiling in Depth"的儀器

00:15:08.041 --> 00:15:10.444 
他們事實上講到用儀器

00:15:10.511 --> 00:15:14.248 
對其中CPU密集型業務做性能改進

00:15:14.715 --> 00:15:15.549 
很棒

00:15:16.750 --> 00:15:19.753 
所以我們回到與外部資源有關的任務

00:15:20.120 --> 00:15:22.556 
其另一名稱叫阻塞調用

00:15:23.357 --> 00:15:26.693 
之所以叫這個名字是因爲你的線程進展
被阻止所以你被阻斷

00:15:27.661 --> 00:15:28.695 
那麼 什麼是阻塞調用？

00:15:29.429 --> 00:15:31.899 
你們中可能有人熟悉
系統調用（syscall）

00:15:33.233 --> 00:15:34.535 
任何進行了系統調用的代碼

00:15:34.601 --> 00:15:37.004 
路徑均被認爲是阻塞調用

00:15:38.505 --> 00:15:39.573 
正如我所說

00:15:39.740 --> 00:15:41.909 
這一般涉及到

00:15:41.975 --> 00:15:43.510 
目前不在內存中的資源

00:15:44.244 --> 00:15:46.747 
一般是
從磁盤載入內容

00:15:46.980 --> 00:15:48.615 
或網絡上取用材料

00:15:49.950 --> 00:15:52.252 
有時候 你的主線程也會被阻塞

00:15:52.886 --> 00:15:55.155 
原因是在等待可用資源

00:15:55.756 --> 00:15:57.591 
但是它是在等待他人完成資源使用

00:15:57.658 --> 00:16:00.827 
因爲該資源一次只允許
一個客戶使用

00:16:04.198 --> 00:16:06.333 
那麼 你如何認出你線程的阻塞調用？

00:16:06.867 --> 00:16:08.402 
有時它們剛好出現在你目前

00:16:09.336 --> 00:16:11.772 
"同步"一詞即表示阻塞

00:16:12.506 --> 00:16:14.741 
所以這是一個線索
當你讀代碼時

00:16:14.808 --> 00:16:16.276 
你要注意到它

00:16:17.411 --> 00:16:18.245 
所以很好

00:16:18.312 --> 00:16:20.047 
我們在我的代碼中發現了這個阻
塞調用

00:16:20.113 --> 00:16:22.416 
‘NSURLConnection
發送同步請求’

00:16:23.183 --> 00:16:24.117 
那麼 現在我做什麼？

00:16:25.018 --> 00:16:27.921 
有時會有一個同步的API --

00:16:28.088 --> 00:16:30.224 
尤其是對於聲稱

00:16:30.290 --> 00:16:31.758 
其名字同步的API--

00:16:32.426 --> 00:16:33.861 
你可以輕鬆轉換到這種API

00:16:34.528 --> 00:16:37.364 
這種情況下 我們很幸運 而事實上

00:16:37.431 --> 00:16:39.933 
這個名字中出現的是有用的"異步"字
樣

00:16:40.400 --> 00:16:42.369 
那麼我們就確切知道了
自己要進入的是哪裏

00:16:43.537 --> 00:16:46.173 
很遺憾 這不似搜索和替換那麼簡單

00:16:46.707 --> 00:16:49.576 
你正在改變你的代碼的執行順序

00:16:49.810 --> 00:16:51.512 
你可能有與此次操作結果

00:16:51.578 --> 00:16:53.013 
有關的其他代碼

00:16:53.547 --> 00:16:56.383 
所以很遺憾 需要一些調整

00:16:58.485 --> 00:16:59.753 
但是讓我說

00:17:00.587 --> 00:17:03.023 
你沒有能夠輕鬆切換到的相當的asy
nc

00:17:03.090 --> 00:17:05.459 
或者你想將全部代碼

00:17:05.526 --> 00:17:07.728 
一次操作即移出主線程

00:17:08.529 --> 00:17:11.330 
這種情況下用Grand
CentralDispatch即可

00:17:12.398 --> 00:17:14.867 
Grand Central Dispatch
是Apple的一項技術

00:17:15.002 --> 00:17:17.436 
可管理你app中的全局線程池

00:17:17.738 --> 00:17:19.239 
已經好了
即使你沒有注意到

00:17:20.941 --> 00:17:25.479 
如果你熟悉其他平臺上的線程編程
Grand Central Dispatch

00:17:25.811 --> 00:17:28.949 
在某種程度上
可完全避免混淆 消除你

00:17:29.016 --> 00:17:31.451 
對於啓動線程及其狀態等的擔憂

00:17:32.152 --> 00:17:34.188 
讓你明確出向運行的任務

00:17:34.254 --> 00:17:35.355 
如封閉或阻塞

00:17:37.524 --> 00:17:40.527 
這些封閉任務一旦你提交給
Grand Central Dispatch

00:17:40.594 --> 00:17:42.696 
即在你的流程中任一線程上運行

00:17:48.936 --> 00:17:51.305 
所有線程都很棒 因爲你不必

00:17:51.371 --> 00:17:52.506 
啓動它們 也不必考慮

00:17:52.573 --> 00:17:55.142 
它們的數量 但是它們會有警告

00:17:55.542 --> 00:17:58.912 
由於你不控制你的代碼在哪個線程上影
響

00:17:59.613 --> 00:18:01.715 
你在封閉或阻塞任務中明確的任何操作

00:18:01.782 --> 00:18:04.685 
必須在任一線程上均安全

00:18:07.154 --> 00:18:08.388 
有些什麼例子嗎？

00:18:09.823 --> 00:18:12.226 
一些對象事實上只是被限制

00:18:12.292 --> 00:18:13.360 
進入主線程

00:18:13.861 --> 00:18:16.196 
例如UIKit視圖和控制器

00:18:17.030 --> 00:18:21.168 
必須在主
線程上創建修改或銷燬

00:18:22.503 --> 00:18:25.372 
一些對象如Foundation和C
ore Graphics

00:18:25.839 --> 00:18:27.541 
可採用任何線程

00:18:28.475 --> 00:18:31.245 
但是 其中許多另有規定

00:18:31.578 --> 00:18:33.080 
這些規定是調用者提出

00:18:33.146 --> 00:18:37.417 
目的是確保當時只有一個線程被採用

00:18:38.118 --> 00:18:39.920 
它們內部無自我保護

00:18:40.420 --> 00:18:42.656 
所以 如果你要用於多線程

00:18:43.023 --> 00:18:45.659 
你常常必須自行採取保護

00:18:46.026 --> 00:18:49.096 
爲此 最好的方法是GCD串行隊列

00:18:50.531 --> 00:18:52.566 
要想知道你的對象預計會被如何處理

00:18:52.633 --> 00:18:54.601 
最好的方法是讀標題

00:18:54.902 --> 00:18:56.870 
每個對象 通常在靠近初始化程序處

00:18:57.104 --> 00:18:59.606 
應有一個描述 確切說明該對象

00:18:59.673 --> 00:19:01.341 
在你的app中如何通過線程被存取

00:19:01.975 --> 00:19:03.410 
如此 讓我們回到我的例子

00:19:04.378 --> 00:19:05.512 
我在這個代碼中做什麼？

00:19:05.579 --> 00:19:07.114 
我從一個文件中加載一些數據

00:19:08.415 --> 00:19:09.783 
我對一個圖像進行處理和過濾

00:19:10.817 --> 00:19:13.620 
最後
我把它放在我視圖層次的圖像視圖中

00:19:14.655 --> 00:19:17.424 
那麼現在
當用戶敲擊我app中的一個按鈕時

00:19:18.425 --> 00:19:19.860 
我的主線程就有點像這樣

00:19:20.360 --> 00:19:23.463 
它會按順序做3件事

00:19:24.464 --> 00:19:27.501 
簡單 直接 很好理解 很棒

00:19:28.836 --> 00:19:29.770 
遺憾地是

00:19:30.137 --> 00:19:32.306 
如果在我做這件事的時候

00:19:32.372 --> 00:19:34.942 
用戶偶爾做嘗試
向右滾動或旋轉

00:19:35.876 --> 00:19:41.081 
我們將無法操作輸入項
只能拖後

00:19:42.316 --> 00:19:44.351 
關於阻塞請求

00:19:44.418 --> 00:19:47.020 
你永遠不知道它們要花的時間
這就像天氣的變化一樣

00:19:47.521 --> 00:19:51.325 
用戶需要等待不知道有多久

00:19:51.792 --> 00:19:52.793 
這會使他們很沮喪

00:19:54.027 --> 00:19:55.329 
那麼如何解決這一問題呢？

00:19:55.863 --> 00:19:58.365 
我們可以使用
Grand Central Dispatch

00:19:58.432 --> 00:20:00.634 
我們可以使用
Grand Central Dispatch API的

00:20:00.701 --> 00:20:02.503 
"dispatch async"異步執行

00:20:02.669 --> 00:20:05.205 
現在 "dispatch async"
採取了兩個命令參數

00:20:05.839 --> 00:20:07.307 
第一個需要輸入的是

00:20:07.875 --> 00:20:10.244 
你想使用哪一個隊列

00:20:10.844 --> 00:20:13.280 
如我所提到的那樣
你的app內已經有幾個隊列

00:20:13.747 --> 00:20:15.282 
由GCD爲你創建

00:20:15.816 --> 00:20:19.686 
我將使用 "dispatch get global queue"
API得到其中之一

00:20:20.387 --> 00:20:23.223 
因爲有幾個可供選擇
我需要告知GCD

00:20:23.290 --> 00:20:24.124 
我想要哪一個

00:20:24.858 --> 00:20:27.494 
這兒我要用
"Quality of Service"等級

00:20:28.095 --> 00:20:30.430 
"Quality of Service"
是關於怎樣告知系統

00:20:30.497 --> 00:20:34.668 
你請求它完成的工作
相對於app上的其它工作

00:20:34.935 --> 00:20:36.470 
以及系統內的其它工作有多重要

00:20:37.237 --> 00:20:38.238 
在這種情況下

00:20:38.305 --> 00:20:40.741 
因爲這是用戶行爲
的直接結果

00:20:41.208 --> 00:20:43.343 
並且用戶
也許正在等待這一結果

00:20:43.677 --> 00:20:45.679 
我將使用"user-initiated"

00:20:45.746 --> 00:20:46.580 
QOS等級

00:20:48.615 --> 00:20:50.684 
"dispatch async"

00:20:51.318 --> 00:20:53.787 
最後的參數是閉包
包含你想讓它運行的代碼

00:20:55.656 --> 00:20:57.191 
好了
完成了

00:20:57.424 --> 00:20:58.292 
已經離開了主線程

00:20:58.492 --> 00:20:59.326 
好了嗎？

00:21:00.527 --> 00:21:01.361 
還沒完全好

00:21:01.895 --> 00:21:03.697 
如我提到的 UIKit
views

00:21:03.764 --> 00:21:06.466 
和controllers
只是在主線程上使用才安全

00:21:07.134 --> 00:21:08.535 
所以我不能把它們置於該閉包內

00:21:10.070 --> 00:21:12.406 
因此這並不是代碼最慢的部分

00:21:12.472 --> 00:21:13.507 
對嗎？

00:21:13.574 --> 00:21:15.242 
前兩行是阻塞請求

00:21:16.143 --> 00:21:18.378 
爲什麼我不把它移到主線程上？

00:21:20.047 --> 00:21:22.115 
不幸地是 那樣也是不行的

00:21:22.449 --> 00:21:24.051 
因爲我實際已經改變了代碼

00:21:24.117 --> 00:21:25.452 
執行的命令

00:21:26.453 --> 00:21:28.755 
該關閉並不一定在

00:21:29.056 --> 00:21:31.391 
"dispatch async"
返回的的時候運行

00:21:31.558 --> 00:21:33.760 
當然希望它將很快運行

00:21:34.494 --> 00:21:35.662 
最有可能的是

00:21:36.263 --> 00:21:37.931 
一旦GCD將工作送至

00:21:37.998 --> 00:21:40.100 
dispatch queue
它會立即進入到

00:21:40.167 --> 00:21:42.302 
下一行 在此點上

00:21:42.936 --> 00:21:44.505 
我的圖像仍然可能沒有

00:21:45.072 --> 00:21:46.440 
用戶將永遠看不到他們的圖像

00:21:47.074 --> 00:21:48.275 
這會使他們抓狂的

00:21:49.943 --> 00:21:51.144 
那麼如何處理這種情況呢？

00:21:51.678 --> 00:21:53.981 
我們實際上可以向"dispatch async"

00:21:54.982 --> 00:21:56.250 
發出另外一個請求
這次

00:21:56.316 --> 00:21:58.585 
我們將使用一個特別的隊列叫做
主隊列

00:21:59.086 --> 00:22:02.322 
主隊列則保證會由主線程服務

00:22:02.756 --> 00:22:04.458 
你可以使用API
dispatch的

00:22:04.525 --> 00:22:06.493 
"get main queue"獲得主隊列

00:22:07.227 --> 00:22:08.128 
這意味着

00:22:08.962 --> 00:22:11.832 
如果你有對象需要進入

00:22:11.899 --> 00:22:14.668 
主線程 你可以把它們放進閉包中
併發給dispatch

00:22:14.735 --> 00:22:16.270 
你只需要確保它們這個隊列中運行

00:22:16.870 --> 00:22:18.038 
現在
我們已經做到了

00:22:18.105 --> 00:22:20.307 
我的imageView完好

00:22:21.675 --> 00:22:22.776 
這樣

00:22:23.110 --> 00:22:24.778 
我們將該工作退出主線程

00:22:25.379 --> 00:22:27.147 
但是當我們需要使用主線程上的

00:22:27.214 --> 00:22:29.416 
對象時 一旦數據準備好

00:22:29.483 --> 00:22:31.351 
我們就可以這樣做

00:22:32.419 --> 00:22:35.122 
順便說一下 我們最初要解決的問題

00:22:35.856 --> 00:22:37.558 
如果用戶嘗試 滾動或旋轉

00:22:38.392 --> 00:22:40.561 
將會立刻得以處理

00:22:41.428 --> 00:22:42.629 
謝謝！

00:22:47.367 --> 00:22:49.670 
那麼你可能在代碼中發現

00:22:49.736 --> 00:22:50.904 
哪一種類型的阻塞請求？

00:22:50.971 --> 00:22:52.873 
它們在暗處 可能藏在各種地方

00:22:54.508 --> 00:22:55.909 
如我所提到的那樣 聯網、

00:22:56.176 --> 00:22:57.978 
NSURL
Connection和朋友

00:22:58.212 --> 00:23:00.414 
很容易無意間

00:23:00.781 --> 00:23:02.449 
向網絡發出同步請求

00:23:03.517 --> 00:23:05.752 
通常 你可以切換到異步API

00:23:06.854 --> 00:23:09.423 
或者如果你想要對app何時進入網絡

00:23:09.656 --> 00:23:11.625 
有更多的控制

00:23:12.426 --> 00:23:15.095 
在某些情況下 讓它在不運行時
進行下載

00:23:15.596 --> 00:23:18.799 
我建議你查看NSURL
Session後臺演講

00:23:20.467 --> 00:23:23.871 
Foundation initializers
當你在代碼中遇到這些問題時

00:23:23.971 --> 00:23:25.072 
它們並非看起來那麼可怕

00:23:25.205 --> 00:23:26.073 
它只是一行

00:23:26.139 --> 00:23:27.007 
有什麼可怕的？

00:23:27.608 --> 00:23:29.009 
但是 其中一些

00:23:29.243 --> 00:23:31.645 
像名爲"contents of file"或者

00:23:32.279 --> 00:23:33.780 
"contents of URL"

00:23:34.114 --> 00:23:36.617 
可能不得不使用硬盤或其它資源

00:23:36.683 --> 00:23:37.684 
來滿足要求

00:23:39.086 --> 00:23:40.821 
最後 Core Data

00:23:41.522 --> 00:23:44.691 
它們看起來像一些對象 對嗎？

00:23:45.425 --> 00:23:48.195 
Core Data代表
你不斷地進行很多I/O

00:23:49.363 --> 00:23:51.365 
幸運地是 很容易將一些

00:23:51.431 --> 00:23:53.133 
記錄的操作移到

00:23:53.333 --> 00:23:54.801 
不同的併發模式

00:23:55.335 --> 00:23:58.005 
實際上 今年在Core
Data內有一個新的API

00:23:58.238 --> 00:24:01.408 
簡化各種一般的批量操作

00:24:02.075 --> 00:24:04.077 
你可以另選時間從演講中瞭解

00:24:04.444 --> 00:24:06.146 
"Core Data的
新變化是什麼"

00:24:06.380 --> 00:24:08.482 
所以如果你發現了一個阻塞請求

00:24:08.982 --> 00:24:10.350 
切換到異步API

00:24:10.951 --> 00:24:11.818 
或者使用GCD

00:24:12.619 --> 00:24:15.088 
如果你想更多瞭解GCD 包括

00:24:15.155 --> 00:24:18.258 
今年可以簡化一般操作的新API

00:24:18.725 --> 00:24:21.528 
以及前面提到的quality
of service等級

00:24:22.262 --> 00:24:24.331 
這兒一小時前就有一個不錯的會話

00:24:24.398 --> 00:24:27.234 
稱作 "GCD Building
Responsive and Efficient Apps"

00:24:27.401 --> 00:24:28.535 
我建議你看看它

00:24:32.272 --> 00:24:34.308 
讓我們繼續看一看存儲

00:24:35.442 --> 00:24:38.312 
我說過存儲是移動設備上

00:24:38.579 --> 00:24:39.446 
最寶貴的資源

00:24:41.715 --> 00:24:45.018 
如果你計劃在app中採用多任務處理

00:24:45.953 --> 00:24:47.721 
你不能再自由使用屏幕

00:24:48.255 --> 00:24:51.225 
當然你也
不能自由使用

00:24:51.291 --> 00:24:52.526 
其它系統資源

00:24:54.895 --> 00:24:56.430 
如果你把一些代碼從app帶入

00:24:56.496 --> 00:24:58.565 
watchOS 那麼 重要的是

00:24:58.632 --> 00:25:00.334 
內存佔用應當緊湊

00:25:02.336 --> 00:25:05.239 
另外 iOS 9支持很大範圍的硬件

00:25:05.873 --> 00:25:08.742 
如果你想把大型apps
和功能帶入一些

00:25:08.809 --> 00:25:10.811 
OS支持的低端設備

00:25:11.512 --> 00:25:13.680 
存儲在這些系統中非常重要

00:25:14.481 --> 00:25:17.084 
最後 如果你是擴展的開發者

00:25:17.651 --> 00:25:19.987 
想一想你的擴展也許現在被要求運行

00:25:20.053 --> 00:25:23.223 
而這時
屏幕上還有兩個其它的apps

00:25:24.191 --> 00:25:26.760 
因此 存儲會是十分需要的 你需要

00:25:26.827 --> 00:25:28.896 
儘可能少地使用

00:25:30.964 --> 00:25:33.300 
現在
讓我們看看存儲在iOS上如何工作

00:25:35.302 --> 00:25:36.136 
基本原則

00:25:36.470 --> 00:25:39.439 
任何iOS 裝置裏
都沒有足夠的物理內存

00:25:39.740 --> 00:25:42.743 
把所有暫停的App
同時保存在RAM裏

00:25:44.645 --> 00:25:47.314 
當我們有內存壓力時
我們實際上必須

00:25:47.381 --> 00:25:50.484 
清理一些事情出去
把空間留給前景無限的app

00:25:51.485 --> 00:25:55.189 
在OS X 或PC 操作系統上
我們可能要首先

00:25:55.255 --> 00:25:57.758 
要把這些app的狀態
寫到磁盤上 但是

00:25:57.824 --> 00:26:00.093 
這在移動裝置上
根本行不通

00:26:00.594 --> 00:26:02.796 
所以 一旦你要清理空間
你就必須消失

00:26:04.765 --> 00:26:06.900 
還有更多細節
可以慢慢詳述

00:26:07.434 --> 00:26:10.637 
實際上前幾年
有一個所謂的偉大談話

00:26:10.737 --> 00:26:12.172 
叫做"iOS App 性能內存"

00:26:13.040 --> 00:26:15.042 
滑動模板和顏色
稍微有點不同

00:26:15.108 --> 00:26:17.778 
但是信息真的是
貨真價實

00:26:17.845 --> 00:26:20.013 
所以如果你感興趣的話
請去看看那個產品

00:26:20.080 --> 00:26:21.215 
學習學習
這是如何運作的

00:26:22.482 --> 00:26:24.785 
但是如果你以前
從未想過app裏有內存

00:26:25.185 --> 00:26:26.220 
總是歸結爲

00:26:26.954 --> 00:26:28.689 
回收內存需要花時間

00:26:29.189 --> 00:26:31.425 
如果你已經用完
系統中所有

00:26:31.491 --> 00:26:33.460 
可用的內存
然後需要更多

00:26:33.861 --> 00:26:36.230 
你可能要等待
而系統清理一些東西

00:26:36.296 --> 00:26:37.164 
以你的名義清理

00:26:37.931 --> 00:26:40.200 
如果你突然請求
大量內存

00:26:40.968 --> 00:26:42.970 
系統就需要
清理若干不同內容

00:26:43.036 --> 00:26:43.937 
來滿足你的請求

00:26:44.371 --> 00:26:46.607 
這影響到
App的反應效率

00:26:48.976 --> 00:26:50.878 
相反 當你
在背景裏時

00:26:51.545 --> 00:26:53.180 
如果你的足跡
非常簡縮

00:26:53.680 --> 00:26:55.482 
實際上
你不太可能成爲

00:26:55.549 --> 00:26:56.917 
被清理之列

00:26:57.417 --> 00:26:59.319 
所以當用戶
返回到你的app時

00:26:59.720 --> 00:27:02.022 
你能夠恢復原貌
而不是重啓

00:27:02.589 --> 00:27:03.624 
這感覺就快多了

00:27:05.492 --> 00:27:07.528 
所以 如果你以前
從未想過內存的話

00:27:08.328 --> 00:27:09.930 
這真是很重要的
第一步

00:27:10.063 --> 00:27:11.932 
要合理化你的
App內存足跡

00:27:12.599 --> 00:27:14.668 
也就是說
要想一想各種類型

00:27:14.735 --> 00:27:16.170 
所用資源的類型

00:27:17.070 --> 00:27:20.807 
這些可能是字符串；
可能是JSON 或 XML的小泡泡

00:27:20.874 --> 00:27:22.075 
你從網絡上下載的這些

00:27:22.943 --> 00:27:23.977 
還有圖片 也是

00:27:24.044 --> 00:27:26.380 
來自網絡 或者
用戶用照相機照的

00:27:27.080 --> 00:27:29.917 
還有 Core Data管理
的東西 用了很多

00:27:29.983 --> 00:27:32.452 
潛在的資源
似乎是奇蹟發生

00:27:34.388 --> 00:27:36.757 
一旦你思考
這些資源 你就會開始

00:27:36.823 --> 00:27:40.127 
按照用戶互動
把他們分組

00:27:40.194 --> 00:27:43.397 
歸類 這有助於
你建立一個思想模式

00:27:43.463 --> 00:27:45.132 
對於自己App
所用的資源

00:27:46.366 --> 00:27:47.267 
一旦你已經那樣做了

00:27:47.534 --> 00:27:50.070 
我們可以用Xcode 調試器
快速檢查你的作業

00:27:51.538 --> 00:27:53.106 
要了解更多細節

00:27:53.173 --> 00:27:54.341 
我們可以去配置欄

00:27:54.408 --> 00:27:55.242 
和遺漏工具

00:27:55.876 --> 00:27:57.511 
我不想說這麼多
今天

00:27:57.578 --> 00:27:58.412 
但請找找

00:27:58.478 --> 00:28:00.414 
去年的類似談話
名叫"用工具

00:28:00.480 --> 00:28:02.149 
提高你的App"
從那裏開始看吧

00:28:03.750 --> 00:28:05.485 
所以我們返回到
Xcode調試器

00:28:06.453 --> 00:28:09.056 
我已經下載了
Photos框架案例app

00:28:09.223 --> 00:28:10.524 
這是從蘋果開發者
網站下載的

00:28:11.258 --> 00:28:13.427 
我已經安裝到手機中
打開了Xcode 項目

00:28:13.660 --> 00:28:14.595 
草創並運行

00:28:15.295 --> 00:28:18.999 
現在我剛剛開始看看左上方
在我調試器的Xcode窗口的左上方

00:28:19.399 --> 00:28:20.334 
放大進去

00:28:21.435 --> 00:28:23.403 
這裏 正好我看到

00:28:23.470 --> 00:28:26.406 
不用眼睛貼着手機屏幕
也能看到第一個數據 太有趣了

00:28:27.307 --> 00:28:29.543 
現在我知道
在我的app發起之後

00:28:29.610 --> 00:28:31.044 
在用戶可以做任何事情之前

00:28:31.378 --> 00:28:33.380 
我正在使用大約10MB的內存

00:28:35.916 --> 00:28:37.918 
我想要蒐集的下一個數據點

00:28:38.452 --> 00:28:39.686 
就是我想要離開

00:28:39.753 --> 00:28:42.556 
所有在我的App中
最常見的用戶交互都執行了

00:28:42.823 --> 00:28:45.526 
因爲這是一個照片App
所以我會打開一張照片

00:28:46.460 --> 00:28:48.795 
現在我明白了
每打開一張照片

00:28:49.062 --> 00:28:51.665 
我的App另外需要
大約2.5兆的內存

00:28:53.066 --> 00:28:55.836 
在這一點上 另一個有趣的實驗是

00:28:56.303 --> 00:28:58.539 
一遍又一遍地重複執行同樣的動作

00:28:58.605 --> 00:29:03.343 
所以 我可能會多次打開
一張相同的照片或兩張不同的照片

00:29:04.144 --> 00:29:06.079 
如果我的內存佔用持續增長

00:29:06.480 --> 00:29:08.482 
我可能需要解決一下內存方面的問題

00:29:10.517 --> 00:29:11.885 
最後有趣的是

00:29:12.586 --> 00:29:15.756 
我需要使用我設備上的
Home按鈕來暫停App

00:29:16.223 --> 00:29:18.792 
而且我想看看當它進入後臺時
會發生什麼

00:29:19.459 --> 00:29:22.529 
它看起來好像比它剛剛啓動之後

00:29:22.596 --> 00:29:24.264 
要稍微小了一點點

00:29:25.299 --> 00:29:26.834 
這真是對打擊很好的一種平衡

00:29:27.734 --> 00:29:30.537 
你不想再重複你在恢復期間所做的工作

00:29:31.338 --> 00:29:33.640 
但你也想保持後臺的緊湊

00:29:33.841 --> 00:29:36.143 
以確保你的用戶實際體驗到那個恢復

00:29:41.281 --> 00:29:42.182 
需要注意的是

00:29:42.649 --> 00:29:43.917 
照片框架示例App

00:29:43.984 --> 00:29:46.453 
實際上並不需要做什麼
特別的事情或施展魔法

00:29:46.653 --> 00:29:47.688 
以實現這一行爲

00:29:48.121 --> 00:29:50.190 
它實際上只是一個非常簡單的

00:29:50.257 --> 00:29:52.826 
對蘋果技術最小的一種應用

00:29:53.427 --> 00:29:56.964 
而且蘋果技術實際上
通常會將這個行爲

00:29:57.030 --> 00:29:59.800 
進行內置
而它們只是管理一下基本資源

00:30:00.033 --> 00:30:02.970 
以自動響應於應用程序生命週期事件

00:30:03.270 --> 00:30:04.438 
所以你並不需要擔心這個

00:30:05.606 --> 00:30:06.473 
但是

00:30:06.540 --> 00:30:08.442 
如果你有大的對象或者你自己的其他資
源

00:30:08.509 --> 00:30:11.345 
那麼你將有一些動態上的損失

00:30:11.411 --> 00:30:14.081 
並會返回來響應應用程序生命週期事件

00:30:14.548 --> 00:30:15.749 
做到這一點最簡單的方法是

00:30:15.816 --> 00:30:17.117 
使用NSCache

00:30:18.185 --> 00:30:20.654 
不過在某些情況下
你雖然可能會遇到

00:30:20.721 --> 00:30:24.358 
需要將不能靈巧地被表示爲可回收的對
象用於NSCache

00:30:25.025 --> 00:30:27.327 
這時候你不得不
實際上執行自定義代碼

00:30:27.394 --> 00:30:30.397 
以響應你App中的生命週期通知

00:30:31.698 --> 00:30:33.133 
有一些通知你可能會感興趣

00:30:33.800 --> 00:30:35.569 
比如"確實進入了後臺"的通知

00:30:36.336 --> 00:30:38.338 
你的App在掛起會得到這個通知

00:30:38.539 --> 00:30:40.707 
而這正是NSCache
使用這個通知

00:30:40.874 --> 00:30:42.976 
在你進入後臺時使
App實際上執行了釋放

00:30:43.710 --> 00:30:46.780 
另一個有趣的通知是內存警告通知

00:30:47.314 --> 00:30:50.350 
系統實際上是在發出這個通知之後
纔開始逐出

00:30:50.417 --> 00:30:52.786 
掛起的App
從而給它們一個釋放的機會

00:30:53.720 --> 00:30:55.355 
或許它們能夠避免被逐出

00:30:55.589 --> 00:30:56.823 
只要它們佔用的內存下降了

00:30:57.958 --> 00:30:59.993 
所以我在這裏對那個問題舉了一個簡單
的例 子

00:31:01.028 --> 00:31:03.630 
我將使用默認的
NSNotificationCenter

00:31:03.830 --> 00:31:05.832 
在這種情況下 我要添加一個觀察員

00:31:06.033 --> 00:31:07.935 
以觀察"確實收到了
內存警告"的通知

00:31:09.670 --> 00:31:12.840 
而所有我要做的就是調用一些
"自定義緩存清除"的代碼

00:31:14.041 --> 00:31:16.743 
也許這會搭板C結構一起使用

00:31:16.810 --> 00:31:18.111 
並釋放一些其他的內存

00:31:19.913 --> 00:31:22.282 
需要注意的是 如果你真地註冊了

00:31:22.349 --> 00:31:26.053 
NSNotificationCenter觀察員
特別是在初始化時

00:31:26.620 --> 00:31:28.789 
請一定要在反初始化中刪除你自己

00:31:29.623 --> 00:31:31.091 
你知道 內存實在是太重要了

00:31:31.325 --> 00:31:32.626 
因爲我還準備講另外一個課程

00:31:32.693 --> 00:31:33.827 
我希望你們去聽一聽

00:31:35.262 --> 00:31:36.163 
這個課的名字叫做

00:31:36.230 --> 00:31:37.998 
"在安裝有iOS 9
系統的iPad上

00:31:38.065 --> 00:31:39.499 
優化你的App多任務處理"

00:31:40.133 --> 00:31:42.636 
但實際上
即使你的App無法在iPad上運行

00:31:42.703 --> 00:31:44.872 
或者你有沒有計劃支持多任務處理

00:31:45.105 --> 00:31:46.406 
也請你去聽一聽這個課程

00:31:47.140 --> 00:31:49.977 
這個課程對應用程序
所使用的資源類型

00:31:50.043 --> 00:31:51.078 
介紹了大量的詳細信息

00:31:51.545 --> 00:31:53.480 
包括它們通常以何種模式進入訪問

00:31:53.947 --> 00:31:56.717 
以及更多有關如何使你的App響應

00:31:56.783 --> 00:31:57.851 
系統內存狀態的信息

00:31:58.452 --> 00:31:59.286 
這真是太棒了

00:32:01.855 --> 00:32:04.324 
最後同樣重要的是
我希望你們都會非常興奮地看到

00:32:04.391 --> 00:32:06.360 
我們把原代碼帶到
watchOS 2中

00:32:07.995 --> 00:32:10.731 
當你正在思考如何建立你的watch
OS 2 App時

00:32:11.498 --> 00:32:13.400 
你必須開始於一個偉大的設計

00:32:14.034 --> 00:32:16.837 
這個設計真正地關注於你App的基本
功能

00:32:16.904 --> 00:32:19.306 
使它們輕鬆、愉快

00:32:19.373 --> 00:32:20.507 
並且方便於用戶訪問

00:32:21.475 --> 00:32:22.776 
如果你在這方面需要獲得幫助

00:32:22.843 --> 00:32:24.778 
這裏有一個非常不錯的課程
你可以去聽一聽

00:32:24.845 --> 00:32:26.547 
這個課程叫做"蘋果手錶App設計"

00:32:27.781 --> 00:32:30.350 
一旦你爲你的蘋果手錶App找到了一
個偉大的設計

00:32:31.351 --> 00:32:33.654 
那麼你就可以開始考慮

00:32:33.720 --> 00:32:36.256 
你的iOS App在哪些方面
可能值得再次使用

00:32:37.224 --> 00:32:39.426 
這可包括實際代碼

00:32:40.360 --> 00:32:42.429 
或熟悉的API訪問
模式

00:32:42.763 --> 00:32:44.898 
以及平臺之間共享的框架

00:32:46.934 --> 00:32:48.702 
有時候 你在iOS上做的一些事情

00:32:48.769 --> 00:32:51.338 
實際上可能在watchOS上沒有任
何意義

00:32:51.705 --> 00:32:53.106 
比如出於性能上的考慮就會這樣

00:32:53.240 --> 00:32:54.908 
你最終會執行新的機制

00:32:55.609 --> 00:32:57.644 
以便在其它平臺上獲得相同的結果

00:33:05.419 --> 00:33:08.422 
watchOS用戶希望交互行爲快速
而簡單

00:33:09.022 --> 00:33:12.059 
而且他們總是希望能在App
看到最新的相關數據、

00:33:12.392 --> 00:33:14.561 
通知以及快捷視圖

00:33:15.729 --> 00:33:18.065 
作爲一名App開發者
這對你意味着什麼呢？

00:33:19.132 --> 00:33:21.001 
用戶最有可能做的事情是

00:33:21.068 --> 00:33:24.071 
在watchOS上剛一啓動App

00:33:24.137 --> 00:33:26.940 
隨後就能看到他們想看到的內容

00:33:28.642 --> 00:33:29.810 
那麼我們能夠做的工作

00:33:29.877 --> 00:33:32.045 
是不是讓watchOS有
非常久的啓動時間

00:33:32.112 --> 00:33:33.247 
以及非常緩慢的響應呢？

00:33:34.882 --> 00:33:37.017 
我們必須關注於最大限度地減少兩個工
作量

00:33:37.084 --> 00:33:39.987 
一是你生成的網絡流量
以及你必須在設備上

00:33:40.053 --> 00:33:42.589 
完成的以便它能順利
執行任務的工作量

00:33:43.891 --> 00:33:46.293 
如果你正在訪問的服務器
你可以對它進行控制

00:33:46.360 --> 00:33:47.628 
並且能夠添加新的API

00:33:49.096 --> 00:33:50.731 
那麼請確保你給蘋果手錶發送了

00:33:50.797 --> 00:33:52.966 
適當大小和格式的響應

00:33:54.101 --> 00:33:57.571 
有的可能很簡單
比如從JSON或XML數據塊中

00:33:57.671 --> 00:33:59.339 
刪除未使用的密鑰

00:34:00.140 --> 00:34:01.508 
調整圖像大小等等

00:34:01.775 --> 00:34:03.844 
這樣
蘋果手錶就會精確地顯示它們

00:34:03.911 --> 00:34:05.712 
就如同它們是通過連線傳輸過來的一樣

00:34:05.779 --> 00:34:09.550 
而且不必做任何額外的工作
如果你的API適用於

00:34:09.616 --> 00:34:11.552 
大屏幕設備

00:34:11.618 --> 00:34:13.120 
可以同時顯示10條

00:34:13.187 --> 00:34:14.621 
或20條記錄

00:34:15.355 --> 00:34:16.422 
它可能會發回

00:34:16.489 --> 00:34:17.958 
一次調用中發生的所有這些信息

00:34:18.492 --> 00:34:19.726 
但實際上 對於蘋果手錶來說

00:34:19.960 --> 00:34:21.695 
你應該只發送需要在
單個屏幕上顯示的

00:34:21.762 --> 00:34:24.464 
有關記錄的正確數字

00:34:25.732 --> 00:34:28.235 
爲了隨時顯示更新的相關信息

00:34:28.802 --> 00:34:30.838 
很重要的一點是使用
你的iPhone App

00:34:30.904 --> 00:34:32.572 
來保持App內容的更新

00:34:33.206 --> 00:34:35.509 
App內容是平臺之間的

00:34:35.576 --> 00:34:37.444 
一種雙向共享狀態

00:34:37.878 --> 00:34:40.147 
因此
當用戶在任一用戶端上採取行動

00:34:40.214 --> 00:34:42.683 
這將導致他們希望在另一用戶端上

00:34:42.748 --> 00:34:45.052 
看到可以更新的不同的東西

00:34:45.686 --> 00:34:46.920 
API對此的反應是

00:34:47.420 --> 00:34:50.324 
"手錶連接性更新應用程序內容"

00:34:51.324 --> 00:34:52.592 
做這個工作的最好時刻

00:34:53.025 --> 00:34:56.697 
是你的iPhone App
被後臺程序刷新喚醒的時候

00:34:57.598 --> 00:35:00.801 
當它完成下載新信息
並更新了它自己的快照時

00:35:01.268 --> 00:35:03.804 
它也可以
將這些信息推送到蘋果手錶上

00:35:03.871 --> 00:35:06.340 
這樣它將在下一次
用戶啓動時做好準備

00:35:09.543 --> 00:35:10.377 
最後

00:35:11.278 --> 00:35:14.515 
如果你所依賴的服務器
由於某種原因你不能作出更改

00:35:15.215 --> 00:35:17.451 
比方說
你正在與第三方API競爭

00:35:18.285 --> 00:35:22.189 
你可以利用你的iPhone網絡和C
PU來連接

00:35:22.389 --> 00:35:24.458 
從而實際上執行一箇中介

00:35:24.591 --> 00:35:27.094 
使格式和大小響應於手機

00:35:27.895 --> 00:35:31.832 
你希望API的反應是
"手錶連接發送信息"

00:35:33.433 --> 00:35:35.402 
所以你會發送
一條消息到iPhone上

00:35:36.170 --> 00:35:39.439 
提出你的要求
然後iPhone將會下載它

00:35:40.240 --> 00:35:43.277 
並完成我提到的所有操作
如刪除未使用的密鑰、

00:35:43.343 --> 00:35:45.546 
減少記錄數、
調整圖像大小等等

00:35:46.246 --> 00:35:49.550 
然後它會向手錶發送
一個緊湊的可操作的答覆

00:35:49.816 --> 00:35:51.418 
好了 WC課程又到結束的時間了

00:35:51.852 --> 00:35:52.686 
讓我作一下總結

00:35:54.188 --> 00:35:55.455 
性能是一個特徵

00:35:55.989 --> 00:35:57.457 
這是一個重要的方面

00:35:57.624 --> 00:36:00.093 
你的App必須給予
你的用戶豐富的經驗

00:36:00.761 --> 00:36:02.663 
從建立你的App的第一天開始

00:36:02.729 --> 00:36:04.031 
你就應該把這一點記在心裏

00:36:05.666 --> 00:36:07.701 
當你使用高效的App時
你會感覺非常棒

00:36:08.101 --> 00:36:11.705 
因爲它們建立了用戶的信任
它們節省電池消耗

00:36:13.707 --> 00:36:16.810 
請瞭解我提到的所有的蘋果技術

00:36:17.244 --> 00:36:19.880 
當你正在思考如何建立你的App時
請選擇最好的技術

00:36:20.881 --> 00:36:22.983 
請保持你的主線程隨時
爲用戶輸入作好準備

00:36:24.351 --> 00:36:26.587 
你需要了解你的App
何時以及爲什麼使用內存

00:36:27.387 --> 00:36:29.323 
你需要獲得watchOS

00:36:29.690 --> 00:36:32.159 
下載以及處理
極小集信息的大量經驗

00:36:34.228 --> 00:36:35.696 
這裏有一些非常不錯的書面資料

00:36:35.762 --> 00:36:38.532 
如果你開始對這個東西產生興趣
你可以學習一下這些資料

00:36:39.333 --> 00:36:41.468 
好了 這些就是我今天上課的主要內容

00:36:42.436 --> 00:36:45.639 
最開始 講到的一些技術
是我們今年新推出的技術

00:36:45.873 --> 00:36:47.574 
還有一些技術是前幾年推出的

00:36:48.509 --> 00:36:49.877 
謝謝大家 祝你們週五愉快！