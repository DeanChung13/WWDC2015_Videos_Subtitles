00:00:21.255 --> 00:00:23.891 
在Swift中 如何使用
數值類型來打造更好的app

00:00:24.191 --> 00:00:26.193 
大家好 我是道格·格雷戈爾

00:00:26.260 --> 00:00:28.362 
今天我和我的同事比爾·達德利

00:00:28.595 --> 00:00:32.366 
我們會講講在Swift中 如何使用
數值類型來打造更好的app

00:00:36.203 --> 00:00:38.172 
首先我們來談談

00:00:38.238 --> 00:00:39.540 
引用語義 

00:00:40.474 --> 00:00:44.645 
然後我們會深入探討下不變性 
把它作爲引用語義提出的某些問題的

00:00:44.711 --> 00:00:46.380 
解決方案

00:00:48.048 --> 00:00:50.184 
深入探討數值語義、數值類型

00:00:50.517 --> 00:00:53.153 
尤其是它在Swift的工作原理
數值類型在實踐中的應用

00:00:53.887 --> 00:00:56.056 
然後探討引用類型和數值類型

00:00:56.123 --> 00:01:00.127 
在Swift中的混合

00:01:01.061 --> 00:01:01.895 
讓我們開始吧

00:01:04.031 --> 00:01:05.065 
引用語義

00:01:05.666 --> 00:01:10.470 
引用語義在
Swift中就是用來定義一個類

00:01:11.405 --> 00:01:13.207 
這是一個很簡單的溫度組別

00:01:13.807 --> 00:01:16.643 
我們以攝氏度來存儲我們的溫度數值

00:01:16.710 --> 00:01:19.713 
想得到這個不錯的計算華氏溫度屬性

00:01:20.180 --> 00:01:22.583 
這樣我們可以始終以正確的單位得到它

00:01:23.650 --> 00:01:25.686 
溫度的簡單、抽象版本

00:01:26.320 --> 00:01:28.055 
讓我們試着把它用到一些簡單的代碼上

00:01:28.755 --> 00:01:31.892 
我們創建一個家庭 
實例再創建一個溫度實例

00:01:32.226 --> 00:01:35.495 
把我們的恆溫器設置成
溫和的七十五華氏攝氏度

00:01:36.897 --> 00:01:39.399 
現在我們來決定...
晚餐時間快到了

00:01:39.466 --> 00:01:40.901 
我想烤一些鮭魚肉

00:01:40.968 --> 00:01:44.304 
因此我把烤箱的溫度設置成425度
然後點擊“烤制”

00:01:44.872 --> 00:01:45.873 
走開一點

00:01:48.242 --> 00:01:50.410 
爲什麼這裏這麼燙？出了什麼事？

00:01:51.812 --> 00:01:55.282 
你知道發生了什麼事
我們實現的就是非有意的共享

00:01:55.449 --> 00:01:56.850 
想想對象圖表

00:01:57.951 --> 00:01:58.986 
我們有自己的房子

00:01:59.052 --> 00:02:01.088 
裏面有一個恆溫器和烤箱

00:02:01.154 --> 00:02:03.690 
我們還有這個溫度指向的溫度對象

00:02:04.525 --> 00:02:06.260 
當我們設置我們的恆溫器時

00:02:06.326 --> 00:02:08.794 
我們把它作爲溫度連接到相同的對象

00:02:09.162 --> 00:02:12.466 
事情看起來不錯直到我們進行轉變

00:02:12.799 --> 00:02:15.736 
現在這個非有意的或者意想不到的分享

00:02:16.336 --> 00:02:18.172 
讓我們把我們的恆溫器設置成了

00:02:18.238 --> 00:02:20.207 
四百二十五華氏攝氏度

00:02:21.508 --> 00:02:23.110 
此時已經玩完了

00:02:23.177 --> 00:02:26.547 
但是爲了度量起見
讓我們把我們的恆溫器連接到烤箱

00:02:26.613 --> 00:02:27.714 
因爲我們已經搞砸了

00:02:30.317 --> 00:02:31.585 
那麼我們做錯了什麼呢？

00:02:32.085 --> 00:02:34.955 
在這個有引用語義的世界裏

00:02:35.656 --> 00:02:38.659 
你想要阻止分享 你就要進行復制

00:02:40.060 --> 00:02:42.162 
知道了嗎？讓我們來這樣試試

00:02:44.031 --> 00:02:45.299 
好的 把溫度設置成七十五

00:02:45.365 --> 00:02:47.501 
華氏攝氏度

00:02:47.801 --> 00:02:52.005 
當我設置我的恆溫器的溫度時
我就會生成一個副本

00:02:52.139 --> 00:02:53.841 
我就得了一個全新的對象

00:02:53.907 --> 00:02:56.376 
我的恆溫器的溫度指向的也就是它

00:02:56.710 --> 00:02:58.612 
當我改變我的溫度變量的溫度時

00:02:58.679 --> 00:03:01.515 
並不會對它產生影響 很好

00:03:02.149 --> 00:03:04.084 
現在我來設置烤箱的溫度

00:03:04.151 --> 00:03:05.586 
我又生成了一個副本

00:03:06.486 --> 00:03:09.723 
現在從技術上來講
我並不需要最後的這個副本

00:03:10.224 --> 00:03:15.796 
在堆上浪費時間分配內存
創建這個另外的副本效率很低

00:03:16.296 --> 00:03:18.932 
但是這樣更安全
因爲上次我錯過了一個副本

00:03:18.999 --> 00:03:20.200 
結果把我烤熟了！

00:03:22.169 --> 00:03:24.204 
給點力吧 這是週五的會議
讓我喘口氣吧

00:03:30.677 --> 00:03:32.613 
我們把這個稱之爲“保護性拷貝”

00:03:33.847 --> 00:03:36.216 
我們進行拷貝並不是因爲

00:03:36.283 --> 00:03:38.585 
我們知道我們需要它 而是因爲偶爾

00:03:38.652 --> 00:03:41.922 
或者過一段時間後需要用它

00:03:41.989 --> 00:03:43.390 
調試這些問題是相當困難的

00:03:43.857 --> 00:03:44.825 
無論我們什麼時候

00:03:45.092 --> 00:03:49.897 
把一個溫度指定到我們的烤箱某處
忘記進行點拷貝太容易了

00:03:50.230 --> 00:03:53.333 
我要在我自己的烤箱中烤一烤這個行爲

00:03:55.869 --> 00:03:58.672 
好 我完了 我完了 對不起 對不起

00:03:59.473 --> 00:04:01.441 
通常來說我需要給恆溫器做同樣的事

00:04:01.508 --> 00:04:02.876 
不是嗎？

00:04:02.943 --> 00:04:05.012 
有了一大堆樣本
我們正在進行復制粘貼

00:04:05.078 --> 00:04:07.181 
你遲早會來敲我的門問我借

00:04:07.247 --> 00:04:09.116 
一項語言特徵

00:04:09.750 --> 00:04:15.722 
我們先來談複製
Cocoa和Objective-C

00:04:16.656 --> 00:04:19.892 
在Cocoa
有一個NSCopying協議的概念

00:04:20.327 --> 00:04:22.863 
它對複製的意義進行了編碼

00:04:23.497 --> 00:04:26.366 
你有很多的數據類型
這NSstring NSArray

00:04:26.433 --> 00:04:29.002 
NSURLRequest 
etcetera

00:04:29.069 --> 00:04:31.905 
這些都遵從NSCopying
因爲你需要安全地對它們

00:04:31.972 --> 00:04:33.240 
進行復制

00:04:35.075 --> 00:04:36.977 
我們的系統中需要大量的複製

00:04:37.044 --> 00:04:40.647 
因此你有足夠的理由看到
大量的“保護性拷貝”

00:04:40.714 --> 00:04:45.552 
NSDictionary會對你放到
字典中的鍵進行保護性拷貝 爲什麼？

00:04:46.353 --> 00:04:49.957 
若要遞給NSDictionary
一個鍵 進行插入

00:04:50.324 --> 00:04:54.194 
然後又做了變更改變了它的hash值

00:04:54.428 --> 00:04:56.296 
打斷
NSDictionary內部變度

00:04:56.363 --> 00:04:58.465 
然後埋怨我們讓你出了bug

00:04:58.866 --> 00:05:00.133 
這可不是我們想要的

00:05:00.200 --> 00:05:03.504 
想要的是在
NSDictionary保護性拷貝

00:05:03.570 --> 00:05:07.207 
在這個系統中 這是正確的答案
但是不幸的是

00:05:08.275 --> 00:05:10.544 
進行這些額外的複製會讓我們損失性能

00:05:11.745 --> 00:05:14.281 
我們會把
這些都弄到Objective-C

00:05:14.348 --> 00:05:17.150 
帶有複製屬性的語言層面

00:05:17.451 --> 00:05:20.220 
來對每個單一的賦值進行保護性拷貝

00:05:20.287 --> 00:05:23.123 
以此來避免這些問題 這確實有用

00:05:23.190 --> 00:05:25.092 
這個保護性拷貝確實有用

00:05:25.192 --> 00:05:26.560 
不過還不夠好

00:05:26.860 --> 00:05:28.228 
你仍然會有一堆的bug

00:05:29.029 --> 00:05:32.065 
因此這些引用語義有問題

00:05:32.132 --> 00:05:33.100 
出現了變異

00:05:34.368 --> 00:05:36.703 
也許這裏的問題不在於引用語義

00:05:36.937 --> 00:05:38.172 
而在於變異本身

00:05:38.505 --> 00:05:43.277 
也許應該移動到帶有
引用語義的不可變數據結構

00:05:44.011 --> 00:05:46.914 
如果你和函數式語言社區某個人談一談

00:05:46.980 --> 00:05:48.682 
他們會說 是的

00:05:48.749 --> 00:05:50.250 
幾十年前我們就開始這麼做了

00:05:51.251 --> 00:05:52.920 
它確實可以提高那裏的情況

00:05:53.320 --> 00:05:58.258 
因此如果沒有副效用
你就不會出現非有意的副效用

00:05:58.892 --> 00:06:01.662 
不可變引用語義是一種在系統中工作的

00:06:01.828 --> 00:06:02.763 
一致的方法

00:06:02.930 --> 00:06:08.435 
它沒有那些我們在我們的
溫度小示例中出現的意外後果

00:06:09.303 --> 00:06:13.307 
問題在於不變性也有不足

00:06:13.740 --> 00:06:15.843 
它可能導致不佳的界面

00:06:16.310 --> 00:06:19.246 
語言工作的方式就是 它的一部分

00:06:19.613 --> 00:06:22.449 
我們生活在一個我們可以
讓事情產生變異的世界中

00:06:22.516 --> 00:06:25.319 
這也是它的一部分 我們想到狀態

00:06:25.385 --> 00:06:27.588 
變異的狀態 因此單純在一個

00:06:27.654 --> 00:06:29.923 
不可變的世界中進行思考
有時候對我們來說

00:06:29.990 --> 00:06:30.924 
是比較怪的

00:06:31.825 --> 00:06:33.694 
有效映射到機器模型

00:06:33.760 --> 00:06:35.028 
也是問題

00:06:35.829 --> 00:06:37.698 
最後你還是不得不着手處理機器碼

00:06:37.764 --> 00:06:40.434 
在一個有狀態寄存器、狀態緩存、

00:06:40.501 --> 00:06:41.368 
狀態內存、

00:06:41.435 --> 00:06:43.337 
狀態存儲的CPU上運行

00:06:44.371 --> 00:06:49.810 
把一個不可變算法映射到那個層級效率
並不總是那麼容易

00:06:50.477 --> 00:06:52.112 
我們來講一講其中的幾點

00:06:52.179 --> 00:06:54.414 
我們把我們的這個溫度類拿出來

00:06:54.615 --> 00:06:56.583 
通過讓它成爲不可變的增加它的安全性

00:06:57.417 --> 00:07:03.257 
我們把攝氏度存儲屬性從一個
var變成一個let 你不能再改了

00:07:03.924 --> 00:07:07.094 
然後華氏溫標計算器屬性的
設值函數沒有了

00:07:07.160 --> 00:07:08.228 
因此無論你做什麼

00:07:08.295 --> 00:07:09.630 
你都不能再改變溫度狀態

00:07:09.963 --> 00:07:11.832 
爲了方便起見
我們添加一些初始化程序

00:07:13.367 --> 00:07:15.702 
好的 我們來談談不優美的...

00:07:16.637 --> 00:07:18.071 
不優美的不可變界面

00:07:18.472 --> 00:07:22.509 
要是我說我把我的烤箱溫度調整

00:07:22.576 --> 00:07:25.279 
十華氏溫度 這是一個簡單的操作

00:07:26.280 --> 00:07:28.415 
加號就是十度 可以了 好了

00:07:29.416 --> 00:07:32.152 
如果我們把變化去掉
我們又該怎麼做？

00:07:32.219 --> 00:07:35.022 
我們就必須抓住烤箱的溫度對象

00:07:35.689 --> 00:07:39.326 
創造另外一個有新值的溫度對象

00:07:40.627 --> 00:07:43.430 
對吧？這就有點不太好看了代碼更多

00:07:43.497 --> 00:07:47.167 
也浪費時間在堆上分配另一個對象

00:07:47.935 --> 00:07:50.737 
我們並沒有在這裏擁抱不變性

00:07:50.804 --> 00:07:54.341 
因爲我們是做了一個使
烤箱本身發生變化的賦值

00:07:55.209 --> 00:07:57.177 
如果我們在這裏自始至終

00:07:57.244 --> 00:07:59.580 
擁抱不可變引用的概念

00:08:00.113 --> 00:08:02.449 
我們就可以創建一個新的溫度
放到一個新的烤箱中

00:08:02.516 --> 00:08:03.550 
然後放到一個新家中

00:08:05.719 --> 00:08:12.593 
不美觀！
讓我們再搞點理論知識做一些數學題

00:08:13.293 --> 00:08:18.899 
埃拉托色尼選篩法是
一種計算質數的古老的算法

00:08:19.433 --> 00:08:22.035 
它使用了變異 非常適合在地上用棍子

00:08:22.102 --> 00:08:24.271 
畫出事情

00:08:24.771 --> 00:08:29.176 
這是Swift中變異版本的執行

00:08:29.510 --> 00:08:31.378 
我們來演示下
以便你明白它背後的想法

00:08:31.979 --> 00:08:33.547 
你首先要做的是：創建一個陣列

00:08:34.681 --> 00:08:36.616 
注意var 因爲我們要改變這個陣列

00:08:37.049 --> 00:08:40.953 
注意這個陣列來源於兩個、三個質數

00:08:41.020 --> 00:08:42.623 
是從你計算的數字中求出來的

00:08:42.688 --> 00:08:43.524 
我們這裏是二十

00:08:44.825 --> 00:08:47.728 
現在每次通過外層循環

00:08:47.794 --> 00:08:50.330 
我們就會選擇陣列中的下一個數字

00:08:50.998 --> 00:08:52.533 
那個數字是一個質數P

00:08:53.800 --> 00:08:58.005 
內循環要做的就是走過P的所有倍數

00:08:58.272 --> 00:09:03.043 
把它們設爲零將它們從陣列中抹除

00:09:04.178 --> 00:09:05.212 
如果是一個質數的倍數

00:09:05.279 --> 00:09:06.446 
那麼你就不是質數

00:09:07.514 --> 00:09:08.448 
再回到外層循環

00:09:08.515 --> 00:09:11.018 
我們獲取下一個數字 這是一個質數

00:09:11.285 --> 00:09:13.687 
我們從陣列中把它所有的倍數抹除

00:09:13.754 --> 00:09:15.489 
這是一個非常簡單的算法

00:09:15.556 --> 00:09:16.623 
想想地上的棍子

00:09:16.690 --> 00:09:18.225 
你就是在把事情劃掉

00:09:19.893 --> 00:09:22.296 
一旦我們迭代

00:09:23.263 --> 00:09:24.398 
完畢我們就到這裏

00:09:24.464 --> 00:09:27.034 
進行最後一個簡單的操作 也就是說

00:09:27.100 --> 00:09:28.936 
陣列中所有我們未歸零的東西

00:09:29.002 --> 00:09:30.170 
就是我們的結果的一部分

00:09:30.237 --> 00:09:31.572 
我們用一個過濾器來處理它

00:09:32.906 --> 00:09:35.843 
算法非常簡單 完全基於變異的

00:09:37.444 --> 00:09:38.946 
但不是不能在沒有變異的

00:09:39.046 --> 00:09:40.347 
世界裏表達它

00:09:40.647 --> 00:09:42.182 
你當然可以的

00:09:42.983 --> 00:09:44.718 
爲此 我們要使用Haskell

00:09:44.785 --> 00:09:46.587 
因爲它是一個單純的函數式語言

00:09:48.121 --> 00:09:50.724 
是的 我知道大家都愛它 好的

00:09:51.525 --> 00:09:53.627 
這是Haskell的公式化

00:09:53.927 --> 00:09:55.996 
如果你讀過Haskell 它很美

00:09:56.797 --> 00:09:58.532 
它是函數式的 它一點也不會發生變異

00:09:59.199 --> 00:10:01.034 
這是個類似執行
它對Swift做了變動

00:10:01.101 --> 00:10:03.604 
因此也能是函數式的
如果你想讓它懶一點

00:10:03.670 --> 00:10:05.606 
對於讀者來說這是一個練習

00:10:05.672 --> 00:10:06.807 
沒有那麼難

00:10:07.541 --> 00:10:09.710 
我們來演示下這個算法的工作原理

00:10:09.776 --> 00:10:11.512 
因爲非常相似

00:10:13.180 --> 00:10:16.783 
我們的陣列就從二開始 直到二十

00:10:18.519 --> 00:10:21.522 
在這個簡單的例子中 如果沒有數字

00:10:21.588 --> 00:10:22.556 
那裏沒有質數

00:10:22.623 --> 00:10:24.725 
那是第一個“If語句”這是小事情

00:10:25.926 --> 00:10:28.662 
你要做的就是
我們把第一個數字取出來

00:10:28.762 --> 00:10:30.197 
它就始終是質數

00:10:30.898 --> 00:10:32.799 
把它和其餘的數字分割開來

00:10:33.200 --> 00:10:34.801 
Haskell通過模式匹配實現它

00:10:34.868 --> 00:10:35.802 
我們在這裏可以分層

00:10:36.770 --> 00:10:39.673 
我們把那個質數拿出來
在這個陣列其餘的元素這裏

00:10:39.907 --> 00:10:44.311 
運行一個過濾器操作

00:10:45.179 --> 00:10:46.446 
僅僅複製那些不是

00:10:46.513 --> 00:10:48.582 
那個質數的倍數的東西

00:10:49.950 --> 00:10:51.351 
現在我們遞歸 再來一次

00:10:52.119 --> 00:10:54.121 
把“三”拆分 這是我們的新質數

00:10:54.521 --> 00:10:55.689 
然後運行這個過濾器

00:10:56.890 --> 00:11:00.494 
把所有三的倍數消除等等

00:11:00.994 --> 00:11:02.362 
這裏發生的

00:11:02.529 --> 00:11:05.933 
就是你以構建這個左斜 
實際質數來結束

00:11:05.999 --> 00:11:08.669 
這樣它們就都會連接在一起

00:11:10.504 --> 00:11:11.638 
理念是相似的

00:11:11.705 --> 00:11:12.940 
非常相似

00:11:13.974 --> 00:11:16.176 
但是算法不同

00:11:16.243 --> 00:11:20.080 
因爲它的性能特徵不同

00:11:21.248 --> 00:11:23.417 
這個結果來源於
梅莉莎·歐內爾發表的

00:11:23.483 --> 00:11:26.486 
一篇絕妙的論文 她稱之爲
“真實的埃拉托色尼篩選法”

00:11:27.154 --> 00:11:29.356 
她向Haskell社區展示了
他們摯愛的篩選法

00:11:29.423 --> 00:11:32.092 
並不是真實的篩選法

00:11:32.593 --> 00:11:35.629 
因爲它並不會作爲真實的篩選法來運行

00:11:36.363 --> 00:11:41.235 
她仔細查看了Haskell
中非常複雜的執行

00:11:41.568 --> 00:11:43.937 
那又回朔到了性能特徵

00:11:44.137 --> 00:11:45.739 
讀一下那篇論文 看一看 非常酷

00:11:46.173 --> 00:11:48.475 
我想讓你們嘗試下
爲什麼會出現這種情況

00:11:48.675 --> 00:11:50.644 
看看這個Haskell列表推導

00:11:50.944 --> 00:11:52.980 
或者下面等價的Swift過濾器

00:11:55.048 --> 00:11:59.152 
在這個不變版本中
這個操作會遍歷陣列中的

00:11:59.219 --> 00:12:02.055 
每個單一元素

00:12:02.122 --> 00:12:04.491 
然後執行一個除運算
看看下一步中

00:12:04.558 --> 00:12:06.727 
它是否還應該在那裏
看看它是否是P的倍數

00:12:07.661 --> 00:12:11.565 
在原始的變異算法中
我們只會遍歷質數的

00:12:11.632 --> 00:12:14.868 
倍數以及那些...當然了

00:12:14.935 --> 00:12:17.804 
隨着你得到越來越大的數字
 就會變得越來越稀疏

00:12:18.272 --> 00:12:20.874 
你訪問的元素更少 此外

00:12:20.941 --> 00:12:23.410 
你只需要在到達下個元素進行一次加法

00:12:24.645 --> 00:12:26.413 
這樣你每個元素所做的工作就更少了

00:12:26.713 --> 00:12:27.614 
這是有關係的

00:12:28.382 --> 00:12:30.517 
不變版本不像變異版本的效率那樣高

00:12:30.584 --> 00:12:32.986 
後者無需做很多的功

00:12:35.122 --> 00:12:36.690 
我們再回到Cocoa

00:12:36.823 --> 00:12:41.028 
你看到了在Cocoa中使用不變性
Cocoa Touch框架

00:12:41.428 --> 00:12:44.431 
它們有很多
日期 Ui圖片 NSNumber等

00:12:44.665 --> 00:12:45.899 
它們是不可變類型

00:12:46.099 --> 00:12:48.602 
有了這些不可變類型
安全性就可以得到提高

00:12:48.836 --> 00:12:50.103 
這是件好事因爲你就無需

00:12:50.170 --> 00:12:51.038 
擔心複製了

00:12:51.371 --> 00:12:54.575 
你無需擔心
你的共享會產生非有意的副效用

00:12:55.542 --> 00:12:58.111 
但是當你用它工作時你也會看到缺點

00:12:58.645 --> 00:13:00.814 
在Objective-C
中給自己一個小任務

00:13:01.215 --> 00:13:04.952 
我想從我的主目錄開始
通過添加逐次路徑元件

00:13:05.018 --> 00:13:07.621 
獲得某些目錄的方式 來創建一個

00:13:07.921 --> 00:13:08.956 
NSURL

00:13:09.823 --> 00:13:11.325 
我想在引用語義世界中 無需變異

00:13:11.391 --> 00:13:12.659 
就可以實現這一點

00:13:13.060 --> 00:13:14.761 
因此我創建了一個NSURL

00:13:15.262 --> 00:13:17.764 
每次通過循環時 我就通過附加下一個

00:13:17.831 --> 00:13:19.566 
路徑元件 來創建一個新的URL

00:13:20.567 --> 00:13:22.002 
這個算法並不是非常好 真的

00:13:22.703 --> 00:13:25.572 
每通過一次我就創建一個NSURL
另一個對象

00:13:25.639 --> 00:13:31.612 
舊的對象就會消失
然後NSURL就會在每次通過

00:13:31.678 --> 00:13:33.914 
循環時 複製所有的
串式數據

00:13:34.448 --> 00:13:36.750 
那裏的效率不是很高

00:13:37.084 --> 00:13:39.152 
道格 你按錯了

00:13:39.219 --> 00:13:41.555 
你應該把所有的這些元件
收集到一個NSArray

00:13:41.622 --> 00:13:45.359 
然後使用帶路徑元件的
文件URL

00:13:46.627 --> 00:13:49.530 
就這樣吧 不過要記住
我們是在這裏擁抱不變性

00:13:50.564 --> 00:13:53.267 
這樣當我創建我的陣列時
我會創建一個帶有特定

00:13:53.634 --> 00:13:55.169 
對象的NSArray 好的

00:13:55.235 --> 00:13:56.103 
這是主目錄

00:13:56.503 --> 00:13:59.072 
每次通過時
我創建一個新的陣列

00:13:59.640 --> 00:14:00.874 
多加一個對象

00:14:01.341 --> 00:14:02.442 
我仍然是二次的

00:14:03.010 --> 00:14:04.311 
我仍然是在複製元素

00:14:04.378 --> 00:14:05.412 
我複製的不是串式數據

00:14:05.479 --> 00:14:06.380 
這樣好一點

00:14:06.680 --> 00:14:07.881 
我仍然是在複製元素

00:14:09.283 --> 00:14:11.652 
這就是爲什麼我們不在
Cocoa世界中完全擁抱

00:14:11.718 --> 00:14:13.654 
不變性的原因 因爲這樣說不通

00:14:13.720 --> 00:14:15.856 
而如果你在更加本地化的

00:14:16.089 --> 00:14:18.592 
地方使用易變性 就說得通了

00:14:19.092 --> 00:14:22.329 
把你所有的元件收集到
一個NSMutable陣列

00:14:22.930 --> 00:14:26.066 
然後使用帶路徑元件的
文件URL返回到那個

00:14:26.533 --> 00:14:28.035 
不可變NSURL

00:14:29.670 --> 00:14:31.772 
因此不變性是件好事

00:14:31.839 --> 00:14:34.608 
它讓引用語義世界的推論更加容易了

00:14:35.309 --> 00:14:38.011 
但是你又不能完全選擇不變性

00:14:38.312 --> 00:14:39.479 
否則你會瘋掉

00:14:41.748 --> 00:14:43.250 
這樣我們就到了數值語義

00:14:44.218 --> 00:14:46.086 
對於數值語義
我們想採用一個不同的方法

00:14:46.553 --> 00:14:47.454 
我們喜歡變異

00:14:47.888 --> 00:14:51.458 
它很有價值 
如果正確使用的話用起來很容易

00:14:52.159 --> 00:14:55.495 
問題在於正如我們看到的在於共享

00:14:57.264 --> 00:14:59.833 
你已經知道了數值語義的工作原理
無論你是在

00:14:59.900 --> 00:15:02.903 
Objective-C中還是在
Swift中你都應該始終用它

00:15:03.770 --> 00:15:05.973 
道理很簡單：如果你有兩個變量

00:15:06.507 --> 00:15:09.042 
從邏輯上來講
這些變量中的數值是不同的

00:15:10.777 --> 00:15:13.914 
我有一個整數A
我把它複製到一個整數B

00:15:14.147 --> 00:15:16.450 
當然了它們是等價的 它是一個副本

00:15:17.851 --> 00:15:19.219 
我來改變B

00:15:19.620 --> 00:15:22.789 
如果我告訴你A也會變 你會說我瘋了

00:15:24.124 --> 00:15:25.025 
這些是整數

00:15:25.092 --> 00:15:26.093 
它們在我們用過的

00:15:26.159 --> 00:15:27.528 
每種語言中都有數值語義

00:15:29.630 --> 00:15:31.164 
到CGPoint中舉例來說

00:15:33.300 --> 00:15:36.503 
從A複製到B改變B 對A不會產生

00:15:36.570 --> 00:15:37.971 
任何影響

00:15:38.939 --> 00:15:40.073 
你已經習慣這一點了

00:15:40.307 --> 00:15:42.543 
如果CGPoint的行爲不是這樣

00:15:42.609 --> 00:15:44.378 
你肯定會大吃一驚

00:15:46.813 --> 00:15:50.217 
數值語義的理念就是
把我們已經知道並且理解爲

00:15:50.284 --> 00:15:53.554 
最基本類型的事物
像數字以及包含數字的

00:15:53.620 --> 00:15:57.124 
小的結構
把它向外擴展

00:15:57.991 --> 00:16:00.460 
讓它能夠兼容更多、更豐富的類型

00:16:00.527 --> 00:16:02.829 
在Swift中字符串屬於數值類型

00:16:03.530 --> 00:16:07.134 
你創建了A從B複製到A
然後對B做出某種改變

00:16:07.201 --> 00:16:09.503 
這不會對A產生任何影響

00:16:10.771 --> 00:16:11.839 
因爲它是一個數值類型

00:16:12.239 --> 00:16:13.740 
A和B是不同的變量

00:16:13.841 --> 00:16:15.309 
因此從邏輯上來說
它們是不同的

00:16:18.412 --> 00:16:22.249 
知道了嗎？那麼爲什麼陣列表現的
方式也是一模一樣呢

00:16:23.650 --> 00:16:26.153 
創建A複製到B 然後改變B

00:16:26.220 --> 00:16:27.120 
對A沒有影響

00:16:27.187 --> 00:16:29.890 
它們是完全不同的值

00:16:31.992 --> 00:16:33.827 
最後一點是字典 當然了

00:16:33.894 --> 00:16:34.862 
它就是一個集合

00:16:35.395 --> 00:16:37.030 
你把數值語義放進去
然後向你返回的

00:16:37.731 --> 00:16:38.899 
也是數值語義

00:16:39.600 --> 00:16:43.303 
這裏很棒的一點是
數值類型的構成非常漂亮

00:16:43.670 --> 00:16:46.773 
因此你就可以在數值語義的
世界中非常容易地構建

00:16:46.840 --> 00:16:48.408 
非常豐富的抽象物

00:16:49.109 --> 00:16:52.412 
在Swift中所有的
基本類型整數、兩倍數、

00:16:52.479 --> 00:16:55.616 
字符串、字符等等
它們都是數值類型

00:16:55.682 --> 00:16:57.251 
它們都有這個基本行爲

00:16:57.317 --> 00:16:59.052 
從邏輯上說 這兩個變量它們是不同的

00:16:59.820 --> 00:17:01.989 
我們在它們頂部構建的全部集合...

00:17:02.055 --> 00:17:03.423 
陣列、集合、字典...

00:17:03.924 --> 00:17:06.260 
當給予它們數值類型時
它們都是數值類型

00:17:07.861 --> 00:17:09.296 
你用來構建自己的類的語言抽象

00:17:09.363 --> 00:17:12.566 
這裏的類包括元組、結構和枚舉

00:17:12.900 --> 00:17:15.801 
當你把數值類型放進去時
你得到的仍然是數值類型

00:17:16.170 --> 00:17:19.506 
再說一遍 在數值語義世界中構建

00:17:20.307 --> 00:17:21.808 
豐富的抽象物十分容易

00:17:22.843 --> 00:17:25.746 
數值類型上還有重要的一點

00:17:26.280 --> 00:17:30.017 
就是你有一個兩個值等價兩個數值類型

00:17:30.083 --> 00:17:32.519 
變量等價的概念

00:17:32.619 --> 00:17:33.954 
它們保持同樣的值

00:17:34.821 --> 00:17:37.925 
重要的是
那個恆等式並不重要

00:17:38.959 --> 00:17:40.160 
因爲可有任何數字的複製

00:17:40.227 --> 00:17:42.629 
重要的是存儲在那裏的實際值

00:17:43.330 --> 00:17:44.831 
你怎樣拿到那個值並不重要

00:17:45.232 --> 00:17:47.534 
我給你們講幾件非常愚蠢的事

00:17:48.368 --> 00:17:50.437 
我們這裏有A把它設置成五還有B

00:17:50.504 --> 00:17:51.805 
我們把B設置成二加三

00:17:52.639 --> 00:17:54.274 
當然了 A和B是等價的

00:17:55.375 --> 00:17:56.310 
你一直是這麼用的

00:17:56.376 --> 00:17:58.912 
如果整數不是這麼用的
你就理解不了了

00:17:59.513 --> 00:18:01.715 
因此把那個概念擴展一點

00:18:02.282 --> 00:18:04.117 
當然了
對CGPoints來說也是如此

00:18:04.184 --> 00:18:05.953 
如果不是這種方式的話 你也理解不了

00:18:07.154 --> 00:18:09.790 
爲什麼字符串的行爲
方式不是一模一樣呢？

00:18:10.290 --> 00:18:13.527 
我怎樣得到“你好 蘋果全球
開發者大會”這個串不重要

00:18:14.561 --> 00:18:18.432 
字符串是數值
相同運算符需要把它表示出來

00:18:19.199 --> 00:18:21.668 
你可能會讓它非常瘋狂非常愚蠢

00:18:21.735 --> 00:18:24.605 
這裏我要進行一些排序操作

00:18:25.072 --> 00:18:26.540 
歸根結底我有整數的兩個陣列

00:18:26.607 --> 00:18:28.809 
整數有同樣的值

00:18:29.209 --> 00:18:30.611 
因此這些東西是等價的

00:18:31.578 --> 00:18:35.349 
當構建一個數值類型 非常重要的點是

00:18:35.949 --> 00:18:37.684 
要遵從“相等”協議

00:18:37.751 --> 00:18:41.088 
因爲那裏的每個數值類型都是相等

00:18:41.722 --> 00:18:44.258 
這就意味着它有等於操作符

00:18:44.324 --> 00:18:46.527 
來進行對比 但是操作符的運作方式

00:18:46.593 --> 00:18:48.195 
必須合乎情理

00:18:48.262 --> 00:18:50.998 
它需要是反身的、對稱的、及物的

00:18:51.632 --> 00:18:53.066 
爲什麼這些屬性很重要？

00:18:53.467 --> 00:18:55.702 
除非你拿到你的代碼 否則你不理解

00:18:56.670 --> 00:18:58.605 
如果我從A複製到B 

00:18:59.072 --> 00:19:01.642 
那麼我期待A等於B B等於A

00:19:01.909 --> 00:19:03.043 
當然了 爲什麼不相等呢？

00:19:03.510 --> 00:19:06.113 
如果我之後又從B複製到C
那麼C、B、A 

00:19:06.180 --> 00:19:08.849 
它們都是等價的 我有哪個數字不重要
因爲唯一重要的是值

00:19:08.916 --> 00:19:11.218 
而不是恆等式

00:19:12.686 --> 00:19:15.389 
幸運的是 實現這些非常容易

00:19:16.290 --> 00:19:18.492 
讓我說就是拿出CGPoints

00:19:18.926 --> 00:19:21.662 
用“相等”協議擴展實現相同運算符

00:19:21.828 --> 00:19:24.131 
當你在其它數值類型上構成數值類型時

00:19:24.231 --> 00:19:27.067 
一般來說你只需要使用

00:19:27.534 --> 00:19:29.069 
下面的所有數值類型的

00:19:29.136 --> 00:19:30.037 
等號操作

00:19:32.272 --> 00:19:34.541 
好的
讓我們把它弄回我們的溫度類型

00:19:35.242 --> 00:19:36.677 
我們現在生成一個結構

00:19:37.010 --> 00:19:40.380 
我們要把攝氏度切換回一個var
我們就可以改變它

00:19:41.181 --> 00:19:42.482 
它現在就有了數值語義

00:19:42.549 --> 00:19:44.284 
很明顯 我們給了它相同運算符

00:19:44.852 --> 00:19:47.654 
我們來把它用到我們之前的例子中
很好

00:19:47.721 --> 00:19:49.823 
創建家庭 創建溫度 把溫度設爲華氏

00:19:49.890 --> 00:19:52.659 
七十五度 哇！

00:19:52.759 --> 00:19:54.661 
編譯器停在這裏了 發生什麼了？

00:19:55.729 --> 00:19:59.233 
我們試着改變溫度的一個屬性

00:19:59.466 --> 00:20:00.767 
這項屬性的描述是“let”

00:20:01.168 --> 00:20:02.336 
它是一個常量 不能更改

00:20:03.070 --> 00:20:04.238 
我們來滿足編譯器

00:20:04.605 --> 00:20:06.106 
把它改成var 現在可以改變它了

00:20:06.640 --> 00:20:08.342 
一切都進展順利

00:20:09.610 --> 00:20:12.846 
爲什麼呢？家庭指向了烤箱內的恆溫器

00:20:13.113 --> 00:20:16.016 
恆溫器和烤箱都有了各自的溫度數值

00:20:16.083 --> 00:20:17.284 
實例

00:20:17.351 --> 00:20:19.419 
它們是完全不同的不會共享

00:20:20.087 --> 00:20:21.622 
它們在結構中碰巧也是內聯的

00:20:21.688 --> 00:20:23.657 
你的內存使用情況以及性能都更好了

00:20:24.858 --> 00:20:28.061 
這很棒 數值語義讓我們的生活更容易

00:20:28.662 --> 00:20:31.331 
有了我們的例子讓我們繼續

00:20:31.431 --> 00:20:33.467 
把所有的事情都變得有數值語義

00:20:34.968 --> 00:20:37.304 
房子的結構裏面有一個恆溫器結構

00:20:37.371 --> 00:20:39.907 
一個烤箱結構 整個世界都是數值語義

00:20:40.140 --> 00:20:45.245 
我們需要對我們的代碼做的
變更就是 現在家庭是可變化的了

00:20:45.546 --> 00:20:48.081 
因爲我們改變了家庭的恆溫器的溫度

00:20:48.482 --> 00:20:51.652 
對 那是家庭、恆溫器的
一個變異溫度的一個變異

00:20:55.722 --> 00:20:57.324 
好的 現在就到了一個非常重要的地方

00:20:57.591 --> 00:21:00.827 
因爲Swift的不變性工作模型
數值語義在Swift中

00:21:01.228 --> 00:21:04.364 
運行的天衣無縫

00:21:04.998 --> 00:21:08.535 
如果在Swift中有一個“let”
那麼它就是數值類型

00:21:08.735 --> 00:21:12.472 
這意味着當某個東西損壞了
你的進程的內存時

00:21:12.539 --> 00:21:14.575 
這個值不會很快發生改變

00:21:16.643 --> 00:21:18.645 
這是一個健壯的語句

00:21:19.213 --> 00:21:21.748 
它意味着
推論出“let”的事情非常容易

00:21:22.349 --> 00:21:24.218 
不過我們仍然允許有變異

00:21:24.384 --> 00:21:27.387 
你可使用var 說這個變量是能變的

00:21:27.888 --> 00:21:30.023 
對於我們的算法來說 這就非常有用

00:21:31.325 --> 00:21:33.293 
注意這個變更是非常本地的

00:21:33.460 --> 00:21:35.329 
我可以變更這個變量但是除非我告訴它

00:21:35.395 --> 00:21:38.432 
除非我在其它地方做出改變
否則它是不會影響到

00:21:38.632 --> 00:21:41.235 
我的項目中的其它地方的

00:21:41.802 --> 00:21:44.905 
這樣就有了這個非常漂亮的受控易變性

00:21:46.440 --> 00:21:47.774 
其它地方有了可靠的保證

00:21:49.009 --> 00:21:51.778 
這裏有趣的一件事是
當你使用數值類型、把它們

00:21:51.979 --> 00:21:54.414 
傳遞到線程邊界時
你就可以避免這些類型

00:21:54.481 --> 00:21:56.683 
出現競態條件

00:21:57.150 --> 00:21:58.018 
我創建數字

00:21:58.085 --> 00:21:59.753 
把它們傳遞給某些會異步處理

00:21:59.820 --> 00:22:01.588 
事情的進程

00:22:02.155 --> 00:22:04.157 
我本地改變數字 然後再來一次

00:22:04.591 --> 00:22:08.662 
有了一個引用語義陣列
這是一個競態條件

00:22:09.062 --> 00:22:10.364 
有時候 它會把你吹炸

00:22:10.631 --> 00:22:13.233 
有了數值語義 你每次都能得到復件

00:22:13.800 --> 00:22:14.902 
每次都能得到邏輯復件

00:22:16.069 --> 00:22:17.738 
因此 就沒有競態條件

00:22:18.372 --> 00:22:20.040 
它們不會同時到達相同的陣列

00:22:21.141 --> 00:22:23.911 
好的
這個聽起來像一個性能問題 不是嗎？

00:22:24.244 --> 00:22:27.681 
每次我們通過一個參數傳遞數字時
我們就會進行一次拷貝

00:22:28.916 --> 00:22:32.853 
好的 關於數值語義另外重要的一點是

00:22:32.920 --> 00:22:34.388 
複製很“廉價”

00:22:34.888 --> 00:22:37.457 
這裏的“廉價”
我的意思是時間常數“廉價”

00:22:39.226 --> 00:22:40.827 
我們從基礎開始構建這個app

00:22:40.894 --> 00:22:42.496 
當你有基本類型時

00:22:42.563 --> 00:22:45.866 
那些低層次的東西 
整數、兩倍數、浮點數等等

00:22:46.099 --> 00:22:48.168 
複製它們很“廉價”

00:22:48.235 --> 00:22:49.670 
你複製的只是幾個字節

00:22:49.837 --> 00:22:51.638 
除非是在處理器中進行復制的

00:22:52.973 --> 00:22:57.177 
你就可以用兩倍數、整數等等構建結構

00:22:57.244 --> 00:22:59.680 
就像CG點是由兩個
CG浮點數構建的一樣

00:23:00.180 --> 00:23:02.449 
任何這種結構 枚舉或者元組

00:23:02.516 --> 00:23:06.186 
它們的字段數量是固定的
在那裏複製每個東西

00:23:06.253 --> 00:23:08.021 
都是時間常數的

00:23:08.088 --> 00:23:10.324 
因此複製整個東西也是時間常數的

00:23:11.992 --> 00:23:13.293 
好的

00:23:13.360 --> 00:23:14.695 
對於定長的東西來說 這很棒

00:23:14.761 --> 00:23:17.331 
那麼對於可擴展的東西來說
字符串、陣列、字典

00:23:17.397 --> 00:23:18.532 
又是怎樣呢？

00:23:19.099 --> 00:23:21.802 
我們在Swift中處理這些東西的
方式是“寫入時複製”

00:23:22.836 --> 00:23:24.471 
這樣就可以讓複製很“廉價”

00:23:24.671 --> 00:23:27.174 
就是一些固定數量的引用計數
操作來對“寫入時複製”

00:23:27.241 --> 00:23:29.676 
值進行復制

00:23:30.010 --> 00:23:32.679 
當你進行改變時 你有了一個var

00:23:32.746 --> 00:23:35.115 
然後你就可以變更它
我們也就製作一份副本

00:23:35.182 --> 00:23:36.049 
並且在其上工作

00:23:36.850 --> 00:23:39.319 
因此你就是背後分享

00:23:40.654 --> 00:23:42.589 
但並不是邏輯分享

00:23:42.656 --> 00:23:44.992 
從邏輯上來說 這些仍然是不同的值

00:23:45.225 --> 00:23:47.160 
這樣你的數值語義的性能特徵

00:23:47.427 --> 00:23:50.664 
就很棒 編程模型也很棒

00:23:51.565 --> 00:23:53.600 
我們非常喜歡數值語義編程模型

00:23:54.268 --> 00:23:57.171 
從邏輯上說 不同的變量始終是不同的

00:23:58.505 --> 00:24:01.775 
你想讓它是本地控制時 就有變異概念

00:24:01.842 --> 00:24:04.044 
一個有效的變異

00:24:05.412 --> 00:24:07.147 
但是你還有這些嚴格的“let”保證

00:24:07.214 --> 00:24:08.715 
意味着它不會在其它地方改變

00:24:09.750 --> 00:24:11.952 
復件很“廉價”我們就可以一起工作

00:24:13.187 --> 00:24:15.656 
好的 我想交給我的同事

00:24:15.722 --> 00:24:18.659 
比爾·達德利
他會談談數值類型和實踐

00:24:26.500 --> 00:24:28.468 
謝謝 道格 大家好

00:24:28.535 --> 00:24:31.939 
剛纔道格已經給我們講了
數值類型的工作原理

00:24:32.072 --> 00:24:34.541 
它們如何與引用語義進行對比

00:24:34.641 --> 00:24:38.879 
我們來談談使用數值類型
構建一個真實的實例

00:24:40.280 --> 00:24:42.583 
我們要做的
就是把一個實例組織在一起

00:24:42.649 --> 00:24:44.885 
然後我們通過幾個不同的值、
一個圈和一個多邊形

00:24:44.952 --> 00:24:48.322 
構建一個簡單的圖表

00:24:49.857 --> 00:24:51.859 
讓我們從圓開始吧

00:24:51.925 --> 00:24:54.228 
這是圓心 這是半徑

00:24:54.294 --> 00:24:55.996 
都是取自標準庫的幾個

00:24:56.063 --> 00:24:57.231 
數值類型

00:24:57.865 --> 00:25:00.701 
當然了
我們想要實現相同運算符

00:25:00.767 --> 00:25:02.035 
equals相等操作符

00:25:02.102 --> 00:25:04.438 
我們只需要對比這些類型就可以實現

00:25:04.505 --> 00:25:06.974 
同樣地
因爲它們是內置於標準庫的

00:25:07.040 --> 00:25:09.676 
我們只需要把它們用起來就行
這是因爲我們用的是取自庫的

00:25:09.743 --> 00:25:11.812 
簡單類型來構建

00:25:13.380 --> 00:25:15.015 
下一個是多邊形

00:25:15.082 --> 00:25:17.050 
它有一個角落陣列

00:25:17.117 --> 00:25:19.753 
每個角落都是一個
另一個CG點同樣地

00:25:19.820 --> 00:25:21.255 
這些CG點也是數值類型

00:25:21.321 --> 00:25:23.357 
因此我們的陣列也是一個數值類型

00:25:23.423 --> 00:25:25.659 
我們的比較也很直接

00:25:25.726 --> 00:25:27.594 
只要在那使用equals相等操作符

00:25:27.661 --> 00:25:29.963 
確保我們實現了“相等”操作符即可

00:25:32.499 --> 00:25:36.603 
現在我們要做的
就是把這些類型放入我們的圖表

00:25:36.670 --> 00:25:39.173 
把多邊形和圓都放進去

00:25:40.374 --> 00:25:42.743 
製作一個圓的陣列也很直接

00:25:43.510 --> 00:25:47.548 
製作一個多邊形的陣列 同樣也很直接

00:25:47.614 --> 00:25:49.483 
因此我們可以製作任何類型的陣列

00:25:49.550 --> 00:25:53.620 
我們要做的 就是製作一個
兩者都包含的陣列

00:25:54.021 --> 00:25:59.927 
在Swift中這樣做的機制是
使用一項協議

00:26:00.093 --> 00:26:02.296 
我們會創建一個叫做
Drawable的協議

00:26:02.429 --> 00:26:05.365 
我們的子類型都會實施

00:26:05.432 --> 00:26:07.434 
那個協議 然後我們把它們放到

00:26:07.501 --> 00:26:09.303 
我們的圖表中的一個陣列中

00:26:10.804 --> 00:26:14.441 
“Swift中面向協議編程”
這場會議中有很多信息

00:26:14.575 --> 00:26:18.011 
今天3:30會再次召開

00:26:18.078 --> 00:26:19.046 
若你還沒有看過的話

00:26:19.112 --> 00:26:21.915 
我強烈建議你們去看看

00:26:21.982 --> 00:26:23.550 
或者看看視頻

00:26:26.153 --> 00:26:27.754 
這是我們的Drawable協議

00:26:27.821 --> 00:26:31.158 
很直接 也很簡單
上面有一種方法即“繪製”

00:26:32.559 --> 00:26:34.528 
當然了 我們想在我們的
兩種類型上實施它

00:26:34.595 --> 00:26:36.763 
我們會創建一個多邊形擴展

00:26:36.830 --> 00:26:39.099 
實施那個繪製方法 然後它會調用

00:26:39.166 --> 00:26:41.201 
Core Graphics
繪製多邊形

00:26:42.970 --> 00:26:44.671 
圓也是 同樣的情況

00:26:45.038 --> 00:26:47.608 
那麼我們要做的
就是調用Core Graphics

00:26:47.674 --> 00:26:49.610 
構建圓的表示

00:26:54.381 --> 00:26:55.549 
現在再回到我們的圖表

00:26:55.616 --> 00:26:58.051 
得到了這個可繪製的被調項目陣列

00:26:58.886 --> 00:27:00.854 
我們需要創建一個方法 添加項目

00:27:00.921 --> 00:27:03.690 
它被標記爲了“變異的”
因爲那會改變它自身

00:27:05.192 --> 00:27:08.028 
我們要實現這個繪製方式
來對那個項目列表進行

00:27:08.095 --> 00:27:10.230 
簡單迭代並且調用列表上的

00:27:10.297 --> 00:27:12.332 
每個項目的繪製方式

00:27:13.166 --> 00:27:15.269 
我們來以圖解的方式 看看它

00:27:15.836 --> 00:27:18.805 
我們創建一個圖表稱之爲doc

00:27:19.773 --> 00:27:22.142 
我們創建一個多邊形
然後把它添加到陣列上

00:27:23.410 --> 00:27:26.613 
我們再創建一個圓也把它添加到陣列上

00:27:26.680 --> 00:27:29.016 
現在我們的陣列內有了兩項可繪製物

00:27:29.449 --> 00:27:30.951 
注意它們的類型是不同的

00:27:33.620 --> 00:27:37.658 
當我們再創建
一個文檔並且說doc2等於doc

00:27:37.724 --> 00:27:40.394 
得到了一個邏輯上不同的、全新的實例

00:27:40.460 --> 00:27:43.297 
從邏輯上說它和第一個實例是分開的

00:27:46.867 --> 00:27:50.070 
我現在可以返回doc2進行更改 
當我進行更改時

00:27:50.137 --> 00:27:52.706 
當然了它對doc沒有影響

00:27:52.773 --> 00:27:54.975 
我把那個圓改成一個多邊形

00:27:55.742 --> 00:27:58.545 
陣列有數值語義即使集合是

00:27:58.612 --> 00:28:01.181 
即使是不純一的

00:28:01.248 --> 00:28:05.919 
那麼它的內部就有了多邊形
那個陣列內的圓

00:28:05.986 --> 00:28:07.154 
也是一個值

00:28:10.090 --> 00:28:15.863 
當然了 我們想把我們的
圖表的結構做成“相等”的

00:28:15.929 --> 00:28:17.431 
因此我們把協議實現

00:28:17.497 --> 00:28:19.433 
我們看到的
這是一個非常直接的

00:28:19.499 --> 00:28:20.834 
實現

00:28:21.168 --> 00:28:23.337 
但 如果我們那樣做編輯器就會說

00:28:23.403 --> 00:28:27.007 
“等等方程式兩邊的兩個值 
我沒有equals相等操作符”

00:28:27.074 --> 00:28:30.110 
對於在該方程式的兩邊這兩個值

00:28:30.177 --> 00:28:32.980 
再說一次 我推薦你們去看
面向協議的編程

00:28:33.046 --> 00:28:36.450 
我們在那裏講了它的所有的原理細節

00:28:36.517 --> 00:28:39.553 
我們本次會議專注的是數值語義

00:28:41.755 --> 00:28:45.459 
可繪製物有個叫做“繪製”的單一方法

00:28:45.526 --> 00:28:48.428 
圖表也有一個叫做“繪製”的方法

00:28:48.495 --> 00:28:51.999 
把我們的圖表變成一個可繪製物

00:28:52.232 --> 00:28:54.601 
我們只需要把那個聲明加到它上面

00:28:54.668 --> 00:28:58.605 
現在我們的圖表像鴨子一樣
嘎嘎叫 那它就是一隻鴨子了

00:29:01.041 --> 00:29:02.743 
那麼接下來的就非常有趣了

00:29:02.809 --> 00:29:08.882 
我可以創建一個新的圖表
並把它添加到我現有的圖表

00:29:09.950 --> 00:29:12.186 
那裏有了三種不同的類型

00:29:12.252 --> 00:29:15.322 
不過它們都包含在那個陣列中

00:29:16.023 --> 00:29:17.791 
它是圖表的一個新的實例

00:29:19.092 --> 00:29:21.195 
但是我還可以再進一步

00:29:21.261 --> 00:29:23.263 
把那個文檔加到陣列中

00:29:23.630 --> 00:29:25.532 
如果這些是引用語義

00:29:26.400 --> 00:29:27.334 
我們來看看繪製方法

00:29:27.401 --> 00:29:29.169 
如果這個是引用語義

00:29:29.369 --> 00:29:30.737 
它就會無限遞歸

00:29:31.338 --> 00:29:35.809 
因爲當我在我的圖表上調用
“繪製”時 它就會遍歷

00:29:35.876 --> 00:29:37.911 
項目列表
並且在列表上找到它自己

00:29:37.978 --> 00:29:40.814 
然後就會再次調用“繪製”
出現無限遞歸

00:29:41.148 --> 00:29:43.717 
不過我們用到是值

00:29:43.784 --> 00:29:48.422 
因爲它是一個值
添加到我的圖表的

00:29:48.488 --> 00:29:49.790 
一個完全分開的、不同的實例

00:29:49.857 --> 00:29:53.493 
而不是doc

00:29:54.328 --> 00:29:56.163 
因此不會出現無限遞歸

00:29:56.230 --> 00:29:59.600 
我剛剛繪製了兩個多邊形以及兩個圓

00:30:02.870 --> 00:30:05.072 
既然已經講過了 純粹由數值類型構建

00:30:05.138 --> 00:30:06.974 
一個對象樹

00:30:07.040 --> 00:30:10.077 
我們來講怎樣混淆數值類型和引用類型

00:30:10.911 --> 00:30:12.212 
在Objective-C中

00:30:12.279 --> 00:30:15.516 
你已經習慣了始終把原始
數據類型放到你的引用類型中

00:30:15.582 --> 00:30:18.352 
在Objective-C
中就是這樣構建東西的

00:30:19.286 --> 00:30:22.422 
但是另一方面
這會產生一些有趣的問題

00:30:22.489 --> 00:30:24.024 
我們必須仔細考慮這些問題

00:30:25.225 --> 00:30:27.928 
如果我們構建一個數值類型
我們就想要確保

00:30:27.995 --> 00:30:31.365 
那個數值類型
維持自身的數值語義

00:30:31.431 --> 00:30:34.067 
哪怕它裏面有一個引用

00:30:34.368 --> 00:30:35.769 
如果我們要那麼做

00:30:35.836 --> 00:30:37.304 
我們就必須仔細考慮那個問題

00:30:37.371 --> 00:30:39.373 
我們該怎樣處理這個事實：

00:30:39.439 --> 00:30:43.944 
它裏面有一個引用 兩個不同的值可能

00:30:44.011 --> 00:30:45.379 
指向了同一件事？

00:30:45.579 --> 00:30:47.347 
我們就必須解決那個問題

00:30:47.414 --> 00:30:48.348 
我們要仔細考慮的

00:30:48.415 --> 00:30:50.717 
另一件事是：
它會對等式產生什麼樣的影響？

00:30:52.019 --> 00:30:53.720 
讓我們從一個帶有不可變類的

00:30:53.787 --> 00:30:56.857 
簡單例子開始 UIImage

00:30:57.391 --> 00:31:01.328 
創建一個要成爲 可繪製物的圖片結構

00:31:01.395 --> 00:31:03.330 
它對UIImage有一個引用

00:31:05.132 --> 00:31:06.366 
我們用舊金山的這幅美麗的

00:31:06.433 --> 00:31:08.869 
照片來創建一個實例

00:31:10.204 --> 00:31:13.540 
如果我們再創建一個“圖片2”現在

00:31:13.607 --> 00:31:16.710 
“圖片”和“圖片2”
就都指向了同一個對象

00:31:17.211 --> 00:31:18.779 
如果你看這個
你會想比爾騙我們了

00:31:18.846 --> 00:31:20.747 
這肯定會出問題 就像那個

00:31:20.814 --> 00:31:21.949 
溫度一樣

00:31:22.449 --> 00:31:25.652 
但是
這不是因爲UIImage是不可變的

00:31:25.719 --> 00:31:29.756 
因此我們不用擔心“圖片2”
會改變位於它下方的

00:31:29.823 --> 00:31:30.724 
“圖片”

00:31:30.791 --> 00:31:33.594 
不要擔心第一個圖片會猝不及防受到

00:31:33.660 --> 00:31:34.494 
改變的影響

00:31:35.729 --> 00:31:38.732 
我們想要確保我們實現這個等式

00:31:39.600 --> 00:31:41.735 
你可能會看到這個然後想“沒問題”

00:31:41.802 --> 00:31:43.437 
我要使用三元組相等操作符

00:31:43.504 --> 00:31:46.306 
它會對比引用看看

00:31:46.373 --> 00:31:47.808 
那些引用是否相同

00:31:48.342 --> 00:31:51.778 
對於這個例子來說
當然沒問題 不過我們還必須

00:31:51.845 --> 00:31:52.913 
認真考慮下 當我們使用

00:31:52.980 --> 00:31:57.751 
同樣的底層位圖創建兩個UI圖片時
會發生什麼？

00:31:58.519 --> 00:32:02.523 
我們想讓它們也相等、同等 
在這個例子中

00:32:02.589 --> 00:32:04.958 
因爲我們是在對比引用
 它們就不會相等

00:32:05.025 --> 00:32:06.527 
因此 說這兩個圖片

00:32:06.593 --> 00:32:08.762 
不相同 就錯了

00:32:09.229 --> 00:32:12.566 
想要使用我們從UIImage上的
NSObject繼承“是等效方法”

00:32:12.900 --> 00:32:16.336 
來進行對比

00:32:16.403 --> 00:32:19.339 
這樣
不管是否在相同的對象上

00:32:19.540 --> 00:32:25.145 
我們都可以確信引用類型
獲得正確的回覆

00:32:25.212 --> 00:32:27.681 
我們來談談如何使用可變的對象

00:32:28.215 --> 00:32:30.450 
在這裏有一個BezierPath

00:32:31.351 --> 00:32:32.953 
它也會實現“可繪製物”

00:32:33.520 --> 00:32:35.155 
但是整個實現是由這個可變的

00:32:35.222 --> 00:32:38.525 
引用類型
UIBezierPath構成的

00:32:39.693 --> 00:32:42.696 
在這個讀取實例中
當我們進行“Is Empty”時

00:32:42.763 --> 00:32:43.664 
一起都正常

00:32:43.730 --> 00:32:45.832 
沒有進行任何改變
因爲不會和任何其它的

00:32:45.899 --> 00:32:48.402 
實例混雜到一起

00:32:49.069 --> 00:32:52.272 
但是下面的這個
我們有這個“向點添加線”方法

00:32:52.472 --> 00:32:55.175 
如果我們有兩個
BezierPaths指向這個方法

00:32:55.309 --> 00:32:56.610 
它就會造成問題

00:32:57.444 --> 00:33:00.714 
我們在那裏
並沒有“改變中”這個關鍵字

00:33:01.415 --> 00:33:04.585 
那是一個符號 表明我們知道
我們正在進行改變

00:33:04.651 --> 00:33:06.687 
“向點添加線”在那裏
但是編譯器並沒有對着

00:33:06.753 --> 00:33:09.389 
大喊大叫 告訴我們這一點
這是因爲路徑是一種引用類型

00:33:09.823 --> 00:33:11.558 
我們很快會再看看它

00:33:12.659 --> 00:33:16.697 
如果有兩個BezierPath實例
並且都通過這個改變

00:33:16.763 --> 00:33:18.799 
指向了
同一個UIBezierPath實例

00:33:18.866 --> 00:33:22.269 
如果我做出改變 那麼

00:33:22.336 --> 00:33:23.971 
它就會讓另一個實例措手不及

00:33:24.037 --> 00:33:25.606 
這種情況可不妙

00:33:25.672 --> 00:33:27.774 
我們就沒法維持數值語義

00:33:28.041 --> 00:33:29.710 
我們需要修復它

00:33:30.677 --> 00:33:33.514 
我們修復的方式是使用“寫入時複製”

00:33:33.881 --> 00:33:37.384 
我們需要確保
在我們寫入那個路徑之前

00:33:37.451 --> 00:33:39.186 
已經製作了它的一個副本

00:33:40.988 --> 00:33:42.789 
因此
要向我們的BezierPath中

00:33:42.856 --> 00:33:44.892 
引入一些新事物

00:33:44.958 --> 00:33:49.196 
首先我們想要讓我們的
路徑實例是私有的

00:33:49.496 --> 00:33:52.900 
其次想要實現這個讀取計算路徑屬性

00:33:52.966 --> 00:33:56.370 
並從那裏返回我們的私有實例變量

00:33:57.971 --> 00:33:59.339 
我們也想爲寫入計算屬性

00:33:59.406 --> 00:34:02.776 
創建一個路徑路徑標記爲“改變中”

00:34:03.110 --> 00:34:04.845 
那麼它就會 事實上改變狀態

00:34:04.912 --> 00:34:07.714 
我們把它標記爲“改變中”
把路徑設爲與我們現有路徑的

00:34:07.781 --> 00:34:10.751 
新副本等同

00:34:11.284 --> 00:34:15.121 
現在我們有了一個讀取副本
我們還可以獲得一個寫入副本

00:34:16.590 --> 00:34:18.824 
那麼我們改變我們的實現
來反映這一點

00:34:18.891 --> 00:34:21.695 
在“Is Empty”方法中
我們會調用我們的讀取副本

00:34:22.029 --> 00:34:23.764 
在下面的改變方法那裏

00:34:23.830 --> 00:34:25.465 
我們會調用寫入路徑

00:34:25.732 --> 00:34:28.402 
關於這個 很棒的一點是
編譯器會對我們大喊大叫

00:34:28.467 --> 00:34:29.969 
說：“寫入屬性路徑標記爲了

00:34:30.370 --> 00:34:33.473 
改變中 這個方法沒有

00:34:33.806 --> 00:34:36.009 
標記爲改變中 ”

00:34:36.076 --> 00:34:39.012 
我們就從編譯器得到了幫助
在我們搞錯時

00:34:39.079 --> 00:34:41.081 
幫助我們弄明白

00:34:43.984 --> 00:34:46.553 
在一個圖表中瀏覽下它 瀏覽下路徑

00:34:46.987 --> 00:34:49.556 
我通過說
“Path To”又創建了一個

00:34:49.989 --> 00:34:51.091 
當然 我可以讀取它

00:34:51.158 --> 00:34:54.360 
沒問題 當我對它寫入時

00:34:54.995 --> 00:34:58.966 
建了另一個BezierPath實例

00:34:59.566 --> 00:35:02.736 
路徑二還是不明白已經發生了一次變異

00:35:03.103 --> 00:35:09.009 
因此我不會在路徑二後面
引入一些意料之外的變異

00:35:10.777 --> 00:35:14.681 
現在我們來談談如何在
實踐中使用這些東西

00:35:15.649 --> 00:35:19.286 
這裏我們有我們的
多邊形類型 我們要通過

00:35:19.353 --> 00:35:21.455 
添加一個會返回給我們
對那個多邊形進行描述的

00:35:21.522 --> 00:35:24.291 
BezierPath
的方法對它進行擴展

00:35:24.825 --> 00:35:27.327 
我們創建BezierPath
通過點進行迭代

00:35:27.394 --> 00:35:29.763 
向這些點中添加線二

00:35:30.797 --> 00:35:33.100 
現在缺點就是那個
“添加線到點”方法

00:35:33.166 --> 00:35:36.069 
會複製每次調用

00:35:36.637 --> 00:35:39.439 
因此它的表現可能不那麼好

00:35:40.974 --> 00:35:43.577 
因此我們應該創建一個
UIBezierPath實例

00:35:43.644 --> 00:35:48.982 
然後就地改變那個可變的引用類型

00:35:49.316 --> 00:35:52.753 
當我們弄完後
用那個BezierPath創建一個

00:35:52.819 --> 00:35:55.155 
數值類型新的實例
且返回那個BezierPath

00:35:55.222 --> 00:35:57.124 
這樣生成
UIBezierPath副本

00:35:57.191 --> 00:36:00.460 
或者生成個UIBezierPath
實例而不是生成多個副本、實例

00:36:01.962 --> 00:36:04.665 
在Swift中 有一個很棒的特性

00:36:04.731 --> 00:36:07.367 
可以通過它知道對象是否被惟一地引用

00:36:07.434 --> 00:36:09.102 
這樣我們就可以利用它

00:36:09.169 --> 00:36:11.572 
這個結構和
BezierPath中看到的類似

00:36:12.206 --> 00:36:15.609 
我們可以利用我們有這個
惟一引用屬性這一事實

00:36:15.676 --> 00:36:17.644 
我們就可以肯定

00:36:17.711 --> 00:36:18.946 
有些東西是被惟一引用的

00:36:19.012 --> 00:36:20.714 
如果我們知道那個引用類型是惟一引用

00:36:20.981 --> 00:36:23.851 
我們就可以避免製作副本

00:36:25.252 --> 00:36:27.487 
標準庫會自始至終使用那個特性

00:36:27.554 --> 00:36:30.490 
使用那個特性
也可以進行很多很棒的性能優化

00:36:32.292 --> 00:36:34.561 
這樣酒吧數值類型以及引用類型混合了

00:36:34.628 --> 00:36:37.497 
儘管事實是通過使用“寫入時複製”

00:36:37.865 --> 00:36:44.071 
你在可變類型上有這些引用
你也想要確保你可以維持數值語義

00:36:46.206 --> 00:36:48.976 
現在我想看一個非常酷的特性  
我們現在能做的

00:36:49.042 --> 00:36:52.312 
就是把一個模型類型當做一個
值來實現

00:36:53.080 --> 00:36:54.715 
然後實現一個撤銷棧

00:36:55.382 --> 00:36:59.052 
那麼我要創建一個圖表
以及一個圖表陣列

00:36:59.319 --> 00:37:04.892 
有了各個變異 我會把我的
doc添加到我的圖表陣列中

00:37:05.259 --> 00:37:06.760 
那麼我創建並附加它

00:37:07.461 --> 00:37:10.697 
我添加了一個多邊形
並且把它附加到了撤銷棧

00:37:11.632 --> 00:37:14.334 
我創建了一個圈
並且把它附加到了撤銷棧

00:37:14.902 --> 00:37:21.008 
現在在我的撤銷棧裏
我有三個不同的圖表實例

00:37:21.074 --> 00:37:23.677 
它們沒有引用同一件事情

00:37:23.744 --> 00:37:26.146 
這些是三個不同的值

00:37:26.580 --> 00:37:29.583 
因此可用它來實現一些很酷的特性

00:37:29.716 --> 00:37:33.754 
假設這個位於一個app內
我有一個“歷史”按鈕

00:37:34.054 --> 00:37:37.124 
我點擊這個“歷史”按鈕
我得到了返回到

00:37:37.191 --> 00:37:40.527 
我的撤銷棧的
我的圖表的全部狀態列表

00:37:41.094 --> 00:37:43.463 
我就可以允許用戶點擊其它東西

00:37:43.630 --> 00:37:45.566 
並且及時返回

00:37:45.699 --> 00:37:50.137 
我就不用在某個陣列中保存
如何撤銷添加那個屬性

00:37:50.204 --> 00:37:51.638 
或者撤銷添加其它東西

00:37:51.705 --> 00:37:53.640 
它會直接返回上一個實例

00:37:53.707 --> 00:37:55.609 
也就是剛剛繪製的那個實例

00:37:56.944 --> 00:38:00.247 
這是一項超級強大的特性 事實上

00:38:00.314 --> 00:38:03.183 
Photoshop大量使用這一特性
以便實現他們的各個

00:38:03.250 --> 00:38:04.785 
與歷史相關的東西

00:38:05.018 --> 00:38:07.154 
當在Photoshop打開一幅圖片

00:38:07.221 --> 00:38:09.223 
幕後發生了什麼？

00:38:09.323 --> 00:38:11.525 
Photoshop會對
那個照片分層、切塊

00:38:11.592 --> 00:38:14.895 
不論照片有多大切分成一堆小的圖塊

00:38:15.128 --> 00:38:18.565 
每個這種圖塊都是數值 含圖塊的文檔

00:38:18.632 --> 00:38:21.702 
同樣也是一個數值

00:38:22.102 --> 00:38:24.605 
如果我進行改變比如說把這個人的襯衫

00:38:24.671 --> 00:38:29.610 
從紫色變成綠色
在那個圖表的兩個實例中唯一

00:38:29.676 --> 00:38:33.180 
被複制的
就是包含了這個人的襯衫的

00:38:33.247 --> 00:38:35.382 
圖塊

00:38:35.616 --> 00:38:38.318 
這樣即使我有兩個不同的文檔

00:38:38.385 --> 00:38:42.523 
舊狀態和新狀態 我唯一需要當成那個

00:38:42.589 --> 00:38:44.525 
結果來使用的新數據

00:38:44.591 --> 00:38:47.828 
就是包含了這個人的襯衫的圖塊

00:38:50.097 --> 00:38:52.966 
小結一下 我們講了數值類型

00:38:53.033 --> 00:38:55.802 
講了它給你們的
應用程序帶來的很棒的特性

00:38:55.869 --> 00:38:58.772 
把它和引用類型做了對比
向你們演示了數值類似

00:38:58.972 --> 00:39:00.374 
是如何修復某些問題的

00:39:00.908 --> 00:39:03.410 
期間我們演示了一個實例
讓你們看了一些你們可以

00:39:03.477 --> 00:39:05.746 
通過使用數值類型
添加到你們的應用程序上的

00:39:05.812 --> 00:39:07.281 
很酷的特性

00:39:07.347 --> 00:39:10.517 
我迫不及待想看到這些東西
在你們的app中是如何發揮作用的

00:39:11.051 --> 00:39:13.620 
有一些相關的會議 你可以觀看視頻

00:39:13.687 --> 00:39:15.389 
或者如果你有時間的話 今天3:30

00:39:15.455 --> 00:39:17.257 
有關於面向協議編程的會議

00:39:18.392 --> 00:39:21.428 
如果需要更多信息
你總可以給斯蒂芬發郵件

00:39:21.495 --> 00:39:25.132 
或者訪問我們的論壇資料中也有一些

00:39:25.199 --> 00:39:26.300 
很棒的信息

00:39:27.067 --> 00:39:29.536 
謝謝 祝你們在蘋果全球
開發者大會的剩餘部分愉快