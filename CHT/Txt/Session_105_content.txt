介紹watchOS 2的WatchKit
喬希·謝弗: 好的 上午好
感謝大家今天來到這裏學習
有關watchkit和watchOS 2的新知識
今天上午要講的東西有很多
當然最重要的部分是WatchKit
以及WatchKit相關最新信息
WatchKit作爲watchOS系統平臺的一部分
存在一系列其他框架
其中很多是各位已經熟悉的
用於開發iOS應用的框架
此外還有一些用於專屬watchOS
用於提供特性的新內容都屬於Apple Watch所獨有
今天我們將討論這些新信息
以及一些各位已經熟悉的涉及watchOS專屬的新內容
也就是watchOS 2
首先讓我們簡單談談系統結構
各位已經熟悉用於WatchOS 1的Watch系統應用
其運行方式是
需要在iPhone和AppleWatch上同時有用戶界面
你推出了一款iPhone app
這款iPhone app中有
適合Apple Watch作爲Watch app的一部分
用戶界面分鏡故事板
在Apple Watch中存在並安裝在這裏
但app拓展在手機上運行
watchOS 2的一大進展就是
app拓展並運行在Apple Watch
這給各位的用戶帶來了一些便利
首先 當然是用戶界面和運行的後臺代碼處於同一設備
可使交互等待時間更短
從而使應用反應速度更靈敏
顯然 這一改善帶來了很好的效果
比如在手機不在身邊時仍然可以運行應用
爲了確保這一效果高效運行
各位應該現在花時間瞭解清楚如何將應用程序邏輯移動到程序拓展中
如果在watchOS 1中
你耗費大量時間用於打開父應用程序在iPhone app中運行代碼
你想要重構該邏輯並移動到拓展中
app拓展獲得的代碼越多
在iPhone不在身邊的情況下就可以提供越多的單機功能
當然 有關單機功能另一個重要的部分是
Apple Watch可以通過Wi-Fi訪問網絡
以便你的app可以從HTTP服務器獲得數據
即使在iPhone不在身邊時也能訪問網絡
如果你習慣在iOSapp中使用NSURL Session
那麼你已經知道如何操作了
稍後我們會討論這個問題
但首先我們來談談
WatchKit框架下的新特性
除了將代碼運行移動到AppleWatch這一巨大進展
我們也爲WatchKit加入了一系列新的性能
以便各位在watchOS 2開發更酷的應用程序
爲了給大家一些有關新性能的概述
這裏的列表舉出了我們即將談到的性能
我們擁有數碼錶冠 設計和動畫
因此現在我們來介紹這些優秀的性能
首先我們來看數碼錶冠
這是屬於Apple Watch的獨特交互機制
一系列新的簡單的控制
方便您將數碼錶冠應用於工作界面選取器
選擇器控件是通過數碼錶冠滾動單元列表
並選擇其中一項
數碼錶冠有三種類型
現在詳細介紹每一類
我們現在看到的是第一類列表類型
如果你瞭解錶盤上的配置合併
那你已經瞭解其基本運行了
這是一個項目列表
可以在周圍列出可選的焦點框
並在頂端給出有關已選項目更多的細節信息介紹
以防列出的項目本身代表的含義並不明確
用戶可以選擇顯示或隱藏更多細節信息針對任意一項用戶交互單元
如果屏幕中同時列出多個選擇器
用戶可能需要顯示焦點框
以便清晰告知用戶一旦按下表冠將要進行何種操作
第二種模式是堆疊式
堆疊式提供一系列圖像
使用戶可以滾動並選取其中之一
這一模式可以進行自動轉換其他項目自動淡出
如果你想給用戶提供一系列選擇並生動地呈現出來
你可以選擇這一模式它的視覺效果很好
第三種模式是圖像序列
圖像序列模式提供一個可以滾動的列表
其中是相互沒有過渡效果的圖像
如果經過一個程序到另一個的轉換後看起來十分自然
那麼你可以選擇這個十分適合此類情況更適合使用這種圖像的模式
我們可以看到右上角這裏
這裏設有一個滾動指示
這是一個三種模式都適用的可選用戶交互元素
這個滾動指示器使用的情況是
用戶不能準確看到列表內容或列表內容數量的情況
例如 用戶在應用中選擇一天中的時刻
選擇一天中的一個小時
這時可能不需要滾動指示
因爲用戶明確知道一天有多少小時並且在列表中有明顯顯示
加入選擇的內容是其他多少不能像選擇表情符號那樣清楚顯示的
那麼適合選擇滾動指示
以便用戶瞭解所面臨的選項以及一共有多少個選擇
除了這三種模式
選擇器控件事實上還有另一個性能
在運行中可以帶來更多的靈活性實現更便捷的用戶交互
也就是協調化圖像
這一特性的最大優點在於
可以用於創建動態的圖像在其他交互元素中
例如羣組背景 或其他交互圖像
你可以將它們設置爲與選擇性控件相協調
當用戶進行整理時我們會調整動態圖像的框架的偏移量
從而與列表項目中相關的偏移量相對應
從而方便您建立用戶交互看起來就像這樣
當用戶瀏覽 進行選擇時有一個協調話圖像填充環形
不同模式的相互結合使用
並通過數碼錶冠操控可以方便你開發一個有趣 獨特的模式
接下來讓我們談談動畫技術和設計
正如各位所知
應該在storyboards上在watchOS上建立用戶交互
並且基於Xcode
Xcode中你有各種選擇可用於設置
storyboard中不同的交互元素
現在watchOS 1中推出了很多此類選擇可以以編程的方式進行改變
但是有一些選擇只能在storyboard中運行
在watchOS2中我們不斷推出新性能 進行提高
從而爲這些項目提供設置
改變這些項目之前在設計過程中只能在Xcode中設置的狀態
這一性能可以極大改善程序運行時的效果
改變之前只能靜態呈現的狀態
此外我們還添加了新的動畫API界面
其持續時間可以通過一個訊息塊並可以將你設置的改動加入到交互元素
在該模塊中做的任何改動都會隨之被動態化
如果您熟悉用戶界面套件動態API那麼對這一特性就十分熟悉
這一特性有助於用動畫開發一系列很酷 運行流暢的交互
另外要介紹許多WatchKit方面
比如有關設計的整個過程和動畫技術
所以您可以對此進行了解
有一些不能顯示的很清楚的部分
和使用這些API時一些很酷的手法
可以帶來很好的效果
因此如果你進行更多瞭解會發現它們也是很出色的部分
下面 讓我們介紹Taptic引擎
這是Apple Watch又一項獨特的性能
使信息傳達到用戶而不用用戶真的在屏幕中讀取出來
這個功能真的很棒
Taptic引擎的一個很棒的特點就是
可以通過用戶觸覺掌握用戶感受和聲音
以及在app環境下的意義
我們推出一個簡潔的API方便您在工作交互設備上使用觸覺技術
有不同的模式可供選擇
我所提到的每一個模式
都有預期使用環境您的用戶會瞭解這一模式
因爲這一性能的目的就是傳遞信息而不用真的讀取屏幕
你會需要確保不斷使用這一功能
這些模式的命名就是爲了幫助你瞭解他們所使用的情況
我們在說明文件中準備了相關文件
深度介紹每一個模式在設計AppleWatch中有的預期使用環境
所以如果你想在開發應用中使用觸覺技術並持續使用
請繼續瞭解此功能
最終達到用戶可以直接瞭解程序運行而不用讀取屏幕
此外還有一些其他硬件我們想要在WatchKit中應用
第一 是麥克風
我們在watchOS 2中採用新的API
從而方便您採用錄音表
錄製記錄音頻在用戶進行處理之前回放
最後通過按下右上角的按鍵對音頻進行最終處理
因此右上角的按鍵可以根據您的應用來命名
在此環境下我將它命名爲“發送”因爲我預設它會發送一條消息
但你也可以將它命名爲“保存”如果你開發的是語音備忘錄一類應用
它操作十分簡單先錄製成文件 用戶點擊確認鍵時
你會收到一個文件 以便處理
任何的方式對於你的應用都是合適的
當然 除了麥克風我們也想要開發揚聲器的功能
我們通過爲您的應用提供回放視頻音頻內容
有三種API用不同的方式實現這一操作
第一種是新的交互對象叫做工作交互影片
這一元素提供標準的外觀
方便視頻文件播放以及重放
在屏幕上這個案例中我準備了兩個視頻
假設現有一個海報形象
全球資源定位器可以定位你的內容
WatchKit操作爲你重放
如果你已經將內容輸入到手錶中這個全球資源定位器可以是本地文件
如果不是本地文件則使用遠程HTTP URL
如果提供一個遠程資源
WatchKit可以下載 顯示進程並在下載完成後立即播放
如果是本地文件可以很快進行重放
當用戶點擊播放鍵
則可以看到優質的全屏播放的視頻以及全屏視頻回放
回放控制將在簡要瀏覽全部內容後立即淡出
此外 如果你想要用其他方式回放而不採用標準界面
也有一個API可直接從其他界面呈現控制器
這些API可以播放視頻音頻內容
且十分適用於回放小型文件
Apple Watch被設計爲簡短的互動
7所以在這裏播放的最好是不太長的東西
你也許不想以這種方式
在Apple Watch上播放兩個小時的電影
有時你想播放的音頻類型內容很長
如果你正在編寫類似播客的app
你也許想要下載一些播客
然後運行一下在你的藍牙耳機上聽一聽
我們有另外一個API對於播放這類較長形式的音頻確實不錯
如果你熟悉AV基礎的API你就知道如何使用這些
因爲它們非常相似
你也許從iOS瞭解到這與以AV爲基礎的API之間唯一的不同是
爲了使應用程序獲得真正的高性能和更大的電池使用
它不要求你的應用程序爲了播放那個音頻而持續在後臺運轉
該文件可以被切換到系統來播放
即使你的應用程序被懸置沒有運行
如果用戶在外奔跑時查看錶盤
它們可以提供正在播放的信息
並且控制來自你應用程序的音頻播放
即使你的應用程序沒有在運行
我想在這裏快速地談一下還有幾個其他與硬件無關的API
第一個是提醒
我再重複一次Apple Watch是爲簡短的互動而設計的
因此你也許真的要小心不要過度使用這種API
因爲它確實將額外的步驟引入了你的應用程序中的一些工作流程中
有時候你只需要在獲得回答前問用戶一個問題即可
對於那些情況我們有提醒API
向你提供這種類UI的統一外觀
你提供一個標題 一個描寫
塊中應該採取的按鈕列表和動作
它們只是被顯示出來
當用戶點擊它們中的一個時你就會獲得回調
在這種情況下我包含了一個破壞按鈕
明確說明當我點擊這裏的刪除破壞的事情就會發生
我們有個非常不錯的開放系統URL API
它允許做許多新的事情
開放系統URL可以採用另外的URL
併發送給用戶一個小型應用程序使其發送信息給app中已有的接受者
更酷的是你可以傳遞來自始於Apple Watch的
電話呼叫應用程序tel URL
當那個發生的時候
通話中的UI就會出現在你的app中
用戶可以打電話他們只要一掛機
他們立刻就能回到他們開始打電話時離開的app界面
我們還對票據進行集成-票據工具箱
實際上票據工具箱是手錶操作系統的一部分
這樣你就能夠訪問在iPhone上可能具有的票據
票據庫與iPhoneApple Watch是同步的
這樣你能同時獲得
更不錯的是WatchiKit有個API
允許你添加票據到票據庫中
你以這樣的方式將PK票據交給WatchKit API
用戶能夠滾動它來查看那個票據中有什麼
一直到最後有個添加按鈕將它添加到庫中
當他們點擊那個時
它就會被添加到Apple Watch庫中
但是也在iPhone及其它通過雲端服務同步的設備中
因此從輸入一直到後來票據的使用
所有的端到端的票據情況都在Apple Watch上
這就是WatchKit的新性能那裏還有許多新奇的東西
正如我所說過的WatchKit只是整個的手錶操作系統STK的一部分
還有其他的框架
一些是新的一些是已有的並添加了新功能
我現在就要談談其他的幾個
先說兩個對WatchOS很特別的特性
第一個是Clock Kit
Clock Kit是不需要構建信息
直接在錶盤上顯示的框架
它可以迅速地將你的數據放在用戶的面前
信息有幾種模式
但Clock Kit支持所有的模式
讓我們來仔細查看錶盤來看看它是什麼樣子的
這裏是我們的實用錶盤
現在錶盤上能看到有三種不同的信息特性
你可以看到有不同的尺寸和形狀的信息特性
爲了顯示信息 Clock Kit以恰當的方式格式化數據
例如 如果我們看彩色的錶盤
這個有着更寬尺寸的信息特性
且更高些可顯示兩行的文本或圖像
最後 在數字模塊錶盤上
我們將最大的信息放在正中央其他的放在邊緣上
Clock Kit提供了一些非常好的API
讓你以多種不同模板來格式化你的數據並滿足不同的外觀需求
使它能針對不同大小的信息進行調節來顯示合適的數據數量
現在有關信息的另一個重要特性是
它們正好在你的錶盤上
這就意味着每次用戶舉起手腕看錶
他們想要立即看到最新的數據
如果每次都要用戶舉起手腕詢問代碼來提供要顯示的當前數值
我們就已經失敗了
在用戶舉起他們的手腕之前信息需要立即在那兒
爲了實現這個目標
你以時間軸的形式向ClockKit提供應用程序數據
在這種情況下我以這裏的信息和時間軸的形式
向WWDC提供應用程序數據
如果是上午10:00
它將顯示的早晨的主題
表明當前正在召開會議
隨着一天的流逝現在到2:00
因爲它已經有了數據
所以ClockKit選擇那個時間點合適的事情
它會移動到國情諮詢平臺
移動到4:00蘋果設計獎勵
這種格式的了不起的地方是
你整天都可獲得自動的行爲不需要代碼一直在運行
但是你可以參與時空之旅而不需要你費任何事
如果用戶將數字表冠向後移動想看看這一天的早些時候都發生了什麼
Clock Kit就會轉換到顯示那一時刻的合適的數據段
這很容易爲信息添加支持也很有效地將數據放在用戶面前
這就是Clock Kit
有一個全程的講座將會對此詳細地進行說明及相關API
和不同的模板甚至你起始要做的一切東西
離開時請領取一本名叫用Clock Kit的書
下來我想說的是連網
在Apple Watch和IPhone上
有代碼運行連網是很重要的內容
有兩種連網也許你想要在app中使用
第一個你也許要有較寬的因特網
當你處於獨立模式或手錶和手機在相同的地方使用NSURL對話API時
你可以使用這種連網方式
它會根據用戶使用手機的方式
包括手機檢測並連接Wi-Fi的方式以最佳的方式連接到網絡
有個全程的講座都將討論NSURL連網
NSURL連網將會單獨講解
點擊因特網上的任何服務器都可以下載數據
如果你曾使用過iOS它們是相同的API
且還具有相同的特性設置包括後臺下載
有時你想在Apple Watch和iPhone上運行代碼
你想讓它們分享數據並且彼此對話
我們爲WatchOS和iOS提供了嶄新的框架
叫做手錶連通性
它允許你來做那樣的事情
你的iPhone可以連通正在iPhone上運行的代碼
同時你的手錶可以連通正在手錶上運行的代碼
比如當你想要從因特網上下載數據
構建一個天氣應用程序去下載當前的天氣信息
我們可以說你的用戶拿起他們的iPhone
並且啓動了該應用程序
你來到因特網獲取最新的天氣並將它顯示在他們的iPhone上
如果你沒有做其它的任何事
你構建手錶應用程序來做相同的事情
下次他們看到手錶上的應用程序
來到網絡上下載最新的數據並將它顯示在那兒
但是那不是我們能做的最好的做法我們肯定可以做得更好
因爲我們有剛從iPhone獲得的數據 它現在在用戶的口袋中
如果我們能充分利用已經下載的數據並在我們設備中的多次使用
那就太好了
爲達到這個目的可以做類似這樣的事情
用戶將數據下載在他們的iPhone上
你將它轉移並保存在手錶上
因此如果用戶看到手錶上的應用程序
數據已經在那兒且不需要再次下載
當然 你仍然可以下載最近的更新版本
如果你知道天氣數據是每小時更新一次
你可能已經獲得了最新的數據那就不需要這樣做了
你現在就有更新的東西可以立即顯示
手錶連通性就提供了這個功能
有兩個提供後臺下載的API
第一個叫做應用程序語境
你將它做的一切都移交到一個數據字典中
你希望每當再次運行在另一側的應用程序時 都可以獲得該數據
它總是獲得最新的數據版本
所以你只是設置爲無論如何都是當前的
下次你的應用程序運行的時候就可以在那裏得到
在幕後 手錶連通性在能量和性能最佳的時機傳輸數據
還有個文件傳輸API如果你有較大的數據
你可以將更多的數據從的iPhone傳輸到你的手錶 反之亦然
同樣的 它會在後臺能量和性能的最佳時機完成
還有時你還需要在兩側互動消息傳遞
如果你的手錶應用程序將要在你的iPhone上啓動一些操作
你也許想要發送一個消息過去
在這個例子中我在手錶上有個去按鈕
當我點擊它的時候我想給iPhone發送一個消息
下來要發生的就是若應用程序已在iPhone後臺運行
消息就會被轉發
這樣你就可以做類似開始一個會話或在iPhone上進行一些活動
現在我提到這些API在兩側都存在它們是雙向的
應用程序語境可以到達兩個方向
文件傳輸API可以在兩個方向傳輸文件
一個不同之處是在發送消息API
當從手錶到iPhone發送消息時
可以喚醒iPhone後臺的應用程序進行一些活動
但是當從iPhone到手錶的時候
它就不會喚醒後臺的手錶
你的app在手錶上運行的目的就是爲了接受來自iPhone的消息
在這些API中還有很多細節需要注意
還有一個完整的講座講的是這些東西這個講座的名字是介紹手錶的連接性
所以你需要看一下
並學習一下如何將後端從只能在一個設備上運行
變成同時在iPhone和Apple Watch運行
所以這些就是那三個新的構架
對於WatchOS來講是全新並且獨有的
現存的IOS上有很多框架
你已經熟悉了在你的app中使用它們
我們在Apple Watch上添加了一些新功能或者說加強了獨有的功能
我現在想要概述一下這些功能
第一個是Core Motion
正如你所知 Core Motion可以讓你訪問IOS設備的運動傳感器
WatchOS中同樣存在
可以讓你能夠訪問加速度計
和在IOS上一樣在WatchOS上
Core Motion給你程序運行的實時數據
但對於Apple Watch來講這是新的而且很讚的是
它可以在程序中記錄運動數據即使它不是以一個較低的刷新速率運行
然後將加速度計的數據批量發送給你在下次你的應用程序運行的時候
這在你的APP沒有運行的時候
是一種很酷地檢測運動數據的方法
關於這有一個完整的講座叫做Core Motion的新功能
所以你一定要去看一下
另外Core Location是WatchOS的一部分
這是尋找用戶新位置的很棒的方法
現在iOS 9和watchOS2有個新的API
就可以非常簡單地實現一些很讚的事情
現在另一件需要注意的是
WatchOS上CoreLocation的位置信息
可以授權在iPhone上運行的IOS APP
和Apple Watch上的WatchOS APP之間共享
衆所周知 當你使用Core Location的時候
在app進行定位之前要請求用戶進行位置授權
在Apple Watch上也是這樣
當用戶允許了iPhone或者Watch上的授權
它會同時提供給IPhone和Watch
所以他們不需要對這個問題回答兩次
有一個辦法可以管理用戶的這種授權
有一完整的講座介紹了Core Location
叫做Core Location的新功能
很多東西都能在那裏找到
接下來是HealthKit
HealthKit也是WatchOS的一部分
和你在IOS中使用的是相同的API設置和相同的構架
在WatchOS上使用HealthKit的最大優點是
有非常多的健康數據被記錄在了手表上
你現在可以訪問更多最新的實時數據
因爲這都在手錶其本身上
你現在可以在產生那些數據的設備上進行查看
例如你可以看到實時的心率信息
當它正在記錄並存儲在HealthKit中
HealthKit和WatchOS的另一件很棒的事情是
它爲API提供了提醒你開始鍛鍊的功能
這些鍛鍊會話能夠做很多這一類的事情
Watch本身的鍛鍊app也能做
例如如果你開始跑步你想要記錄用戶的高頻率心率數據
可以使用HealthKit API打開那個會話
選擇記錄高頻率的心率數據信息
使用這個API中健身應用的另一個很棒的事情是
每當用戶舉起手腕使用的時候它允許程序繼續回前臺
如果你在寫一個騎行APP用戶開始一個騎行會話
每次他們舉起手腕的時候
在會話中他們能夠通過app查看最新的實時的數據
並看到自己在運動的時候表現的怎麼樣
現在當用戶放下手腕屏幕關閉的時候 應用程序被暫停
但是HealthKit將默默地爲你記錄所有的數據
所以當用戶舉起手腕能夠再次運行起來
app被暫停時的數據得到了更新
這提供了一種很棒的方法實現所有數據的統一
併爲用戶提供優秀的用戶體驗
也有一個完整的講座叫做HealthKit的新功能
如果你正在寫一個鍛鍊類型的app
或者任何可能使用Health Kit數據優點的程序
我也想花一點時間講一下關於安全構架的問題
這也許不是最令人興奮的消磨時間方法
但是請相信我這裏有非常重要的東西
如果你使用過IOS的安全構架
你就會知道它允許你訪問Keychain
Apple Watch上的Keychain非常有意思
Apple Watch獨一無二的是
當它在用戶的手腕上的時候它會保持開啓
一旦當用戶摘掉手錶
這個設備就會馬上鎖定
你可以利用這一點
在Keychain中存儲你的憑據和安全數據
這樣可以保證
當手錶在用戶的手腕上的時候你能夠訪問數據
一旦手錶被取下來數據將不能夠被訪問因爲手錶被鎖定了
謝謝
他感到非常興奮
好吧這就是安全部分
接下來是MapKit
有一個MapKit API子集可以作爲WatchOS STK的一部分
特別是MK Map API
它很酷的方面是
你可以從你的應用程序中發送一個定位到地圖APP
可以讓用戶在完整的地圖應用中查看
他們不僅能夠查看還能夠開始導航並在APP中尋找路線
如果你有一個位置並且想使用戶能夠找到直接到那裏
你可以在Apple Watch和iPhone上
使用MapKit API開始導航
向用戶發送導航信息
同樣有一個關於MapKit的講座
叫做MapKit的新功能你可以瞭解到所有信息
最後兩個我想要講的構架是
都是關於訪問Apple Watch上數據的
在AppleWatch上的用戶數據類型
我們已經進行了同步處理
第一個是聯繫構架
在IOS 9和WatchOS 2中聯繫是一個全新的構架
可以讓你訪問Apple Watch中的通訊簿
因爲在我們的應用程序中使用了所以它已經同步了
你不需要傳輸就可以訪問本地數據
有一個講座講了這個全新的構架
叫做iOS和OS 10的聯繫架構
如果你準備使用聯繫信息的話就應該查看一下
就像Core Location一樣
訪問IOS APP和WatchOS APP的
共享通訊簿數據需要用戶的授權
當用戶授權你訪問通訊簿
你在任何一邊都有訪問的授權
在Apple Watch和iPhone上都有個管理授權信息
最後一個是EventKit
EventKit是用作訪問用戶日曆的
這和我們講過的聯繫構架上有很多相同點
一旦你得到訪問它的授權
對於iPhone APP和Watch APP來講是相同的
所以在WatchOS 2中有非常多的東西
三個全新的構架
三個全新的構架WatchKit 手錶連接
還有Clock Kit謝謝
WatchOS獨有的三個全新的構架
在所有的其他構架中有很多新功能是WatchOS特有的
有一些是在你的App之間共享的
當你在一個平臺上學習並將其運用到其他平臺上的app時有大量的工作要做
其他的框架能夠利用Watch獨有的功能
這一週有非常多的講座可以在其他地方學到更多東西
在文檔中有一個過渡指南
WatchKit過渡指南
將幫你學習支持WatchOS1的WatchKit
升級後支持在WatchOS 2上運行作爲手錶本身的本地程序運行
有非常多的實例代碼和開發者論壇
技術支撐是最好的解決所有問題的去處
這就是WatchKit的新東西
感謝您今早的到來
我非常期待你們使用這些東西能做出來什麼