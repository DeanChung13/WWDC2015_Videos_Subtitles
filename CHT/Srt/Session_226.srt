00:00:20.087 --> 00:00:24.424 
高級 NSOperations
開發WWDC app

00:00:32.933 --> 00:00:34.902 
早上好
我叫菲利普·豪斯勒

00:00:35.002 --> 00:00:37.704 
我在框架組
從事Foundation相關工作

00:00:38.338 --> 00:00:41.008 
今天我們要講的是
NSOperation

00:00:41.208 --> 00:00:42.843 
和NSOperation隊列

00:00:43.477 --> 00:00:46.680 
這是兩種極其強大的類

00:00:46.947 --> 00:00:48.949 
可將你的應用

00:00:49.283 --> 00:00:54.621 
從直線性運行任務

00:00:54.688 --> 00:00:57.958 
轉變成爲以目標爲導向

00:00:58.225 --> 00:01:02.329 
和功能異步概念的
混合模式

00:01:03.063 --> 00:01:07.267 
現在 我很肯定
大家都已經看過這個應用

00:01:09.636 --> 00:01:11.338 
WWDC應用廣泛使用

00:01:11.405 --> 00:01:14.641 
NSOperation
和NSOperation隊列

00:01:15.809 --> 00:01:17.544 
使我們能夠

00:01:21.048 --> 00:01:26.220 
一直通過從互聯網下載內容
與數據庫甚至是

00:01:26.386 --> 00:01:29.957 
出現提醒或展示視頻的
概念同步

00:01:30.023 --> 00:01:33.360 
來完成各種不同的任務

00:01:33.961 --> 00:01:35.896 
大衛·德龍將帶我們深入瞭解

00:01:36.330 --> 00:01:39.299 
NSOperation
和NSOperation隊列

00:01:39.499 --> 00:01:43.971 
以及如何使用它們
執行實現WWDC應用

00:01:44.171 --> 00:01:45.572 
大衛

00:01:54.181 --> 00:01:55.015 
菲利普

00:02:01.722 --> 00:02:05.959 
我叫大衛·德龍
我是Apple的框架專員

00:02:06.159 --> 00:02:07.995 
同時
我也是WWDC應用的首席工程師

00:02:08.061 --> 00:02:11.131 
大家對WWDC應用應該都很瞭解了吧

00:02:13.267 --> 00:02:15.202 
今天 我們會講到WWDC應用

00:02:15.269 --> 00:02:16.770 
和NSOperation

00:02:16.904 --> 00:02:19.473 
三個主要方面

00:02:20.140 --> 00:02:23.310 
首先 我們回顧一下
NSOperation的主要概念

00:02:23.510 --> 00:02:26.580 
如何理解它的API

00:02:26.647 --> 00:02:28.382 
以及充分利用
它的強大的狀態機的優勢

00:02:29.283 --> 00:02:32.619 
然後 我們將看看除了基礎知識外

00:02:32.686 --> 00:02:35.889 
WWDC應用還面臨的挑戰

00:02:36.290 --> 00:02:37.491 
以及我們如何解決這些挑戰

00:02:38.192 --> 00:02:41.128 
最後 我們會講講

00:02:41.428 --> 00:02:42.863 
部分已經提供給你們的樣品代碼

00:02:46.366 --> 00:02:48.969 
首先 我們來看看一些核心概念

00:02:53.106 --> 00:02:55.175 
不管任何時候
一旦你用了NSOperation

00:02:55.242 --> 00:02:58.011 
你也總是會用到
NSOperation隊列

00:02:58.879 --> 00:03:01.448 
關於NSOperation隊列

00:03:01.748 --> 00:03:04.351 
可以說其實就是一個高級調度隊列

00:03:04.985 --> 00:03:07.554 
相信通過使用多線程優化技術

00:03:07.654 --> 00:03:09.423 
你們對調度隊列都很熟悉了

00:03:10.390 --> 00:03:13.460 
現在 我們還提供基於
NSOperation隊列的包裝器

00:03:13.660 --> 00:03:15.529 
然我們可以獲得一些功能

00:03:17.064 --> 00:03:18.131 
比如說

00:03:20.667 --> 00:03:24.471 
NSOperation隊列
可以很容易取消

00:03:24.538 --> 00:03:27.808 
還未執行的操作

00:03:28.675 --> 00:03:31.578 
雖然你可以通過調度塊來取消

00:03:31.945 --> 00:03:33.380 
這是很機智的做法

00:03:33.680 --> 00:03:36.216 
但是NSOperation隊列
可以讓操作更簡單

00:03:39.052 --> 00:03:39.887 
另一個

00:03:39.953 --> 00:03:42.089 
你可從NSOperation
隊列獲得的是

00:03:42.155 --> 00:03:44.424 
一個屬性 叫做最大並行操作計數

00:03:45.058 --> 00:03:47.427 
爲更好的理解它

00:03:47.494 --> 00:03:48.729 
我們先來看一個小動畫

00:03:52.165 --> 00:03:54.635 
若將NSOperation隊列的

00:03:54.701 --> 00:03:57.037 
最大並行操作計數設爲1

00:03:58.038 --> 00:03:58.972 
基本上

00:03:59.039 --> 00:04:00.908 
就可以將NSOperation隊列

00:04:00.974 --> 00:04:02.509 
做成一個串行操作隊列

00:04:04.278 --> 00:04:07.548 
在隊列中加載多個操作

00:04:09.349 --> 00:04:12.219 
最大並行操作計數爲1時

00:04:12.753 --> 00:04:15.522 
隊列將一個一個完成操作

00:04:15.822 --> 00:04:17.156 
並按照順序執行

00:04:17.791 --> 00:04:20.459 
在前一個操作未完成前

00:04:20.594 --> 00:04:22.362 
下個操作是無法開始的

00:04:23.564 --> 00:04:24.731 
這是一個串行隊列

00:04:27.835 --> 00:04:30.137 
可是 通過默認

00:04:30.204 --> 00:04:32.439 
這個屬性的數值是默認數值

00:04:32.940 --> 00:04:35.776 
意思是說和系統允許的一樣多

00:04:36.443 --> 00:04:41.815 
也就是說操作隊列
可以同時執行多重操作

00:04:41.882 --> 00:04:45.085 
正如系統資源所允許的那樣

00:04:46.520 --> 00:04:48.088 
在這個案例中

00:04:48.155 --> 00:04:51.592 
操作隊列可能一次執行
兩個操作

00:04:53.627 --> 00:04:56.230 
可以改變像這個操作隊列的
行爲的能力

00:04:56.296 --> 00:04:58.198 
可以說是非常強大的

00:04:58.498 --> 00:05:00.868 
在操作隊列創建時

00:05:00.968 --> 00:05:02.102 
我們並不需要做決定

00:05:07.841 --> 00:05:09.843 
這就是NSOperation隊列

00:05:10.477 --> 00:05:12.379 
現在來看NSOperation

00:05:14.281 --> 00:05:17.551 
既然隊列是調度隊列之外的
高級包裝器

00:05:17.951 --> 00:05:19.920 
我們也可以將NSOperation

00:05:19.987 --> 00:05:22.689 
理解成是調度塊之外的
高級包裝器

00:05:24.424 --> 00:05:25.626 
現在 一般來說

00:05:25.692 --> 00:05:28.662 
NSOperation運行時間

00:05:28.729 --> 00:05:30.931 
比塊的運行時間
稍微多了些

00:05:31.798 --> 00:05:34.801 
塊的執行通常只需幾納秒

00:05:34.868 --> 00:05:37.371 
甚至是毫秒

00:05:38.372 --> 00:05:42.309 
換句話說NSOperation
花費更長的時間

00:05:42.376 --> 00:05:45.145 
從數毫秒甚至到數分鐘

00:05:45.245 --> 00:05:46.680 
隨後我們會講到這點

00:05:49.183 --> 00:05:51.885 
NSOperation
另一個很棒的地方是

00:05:51.985 --> 00:05:55.522 
因爲它是一個類
可以被劃分成子類

00:05:55.722 --> 00:05:59.159 
你也可以自定義它的執行邏輯

00:06:00.360 --> 00:06:02.496 
爲將NSOperation
劃分爲子類

00:06:03.030 --> 00:06:04.798 
我們來看下它的生命週期

00:06:06.099 --> 00:06:08.068 
當你創建NSOperation時

00:06:09.636 --> 00:06:11.338 
它總是從一個被稱爲

00:06:12.739 --> 00:06:14.107 
待定狀態的狀態中
開始

00:06:14.274 --> 00:06:16.510 
所以 當它被初始化

00:06:16.844 --> 00:06:19.980 
並被放到操作隊列時
這就是操作

00:06:21.515 --> 00:06:22.649 
現在 在某一時刻

00:06:23.183 --> 00:06:24.518 
操作已準備好可以開始執行

00:06:24.751 --> 00:06:26.253 
它進入就緒狀態

00:06:26.320 --> 00:06:29.723 
準備就緒後

00:06:30.457 --> 00:06:32.626 
操作隊列將完成隊列排列

00:06:32.693 --> 00:06:34.261 
並開始執行

00:06:34.895 --> 00:06:38.632 
正如我所說的
這執行可能用掉數毫秒

00:06:38.699 --> 00:06:40.467 
或數分鐘 甚至更長時間

00:06:44.738 --> 00:06:46.340 
執行結束後

00:06:47.774 --> 00:06:51.311 
操作進入完成狀態
它的完成狀態

00:06:52.679 --> 00:06:53.614 
非常的簡單

00:06:55.649 --> 00:06:57.584 
操作可以做的另一件事是

00:06:57.651 --> 00:06:58.952 
可以在任何時候

00:06:59.620 --> 00:07:01.555 
進入取消狀態

00:07:02.923 --> 00:07:04.625 
我們來看看取消

00:07:08.762 --> 00:07:11.431 
NSOperation中的
取消被定義爲

00:07:11.498 --> 00:07:14.434 
一種簡單的布爾屬性被取消

00:07:15.235 --> 00:07:17.638 
理解這個屬性的關鍵點是

00:07:18.138 --> 00:07:20.140 
它只改變

00:07:20.207 --> 00:07:21.542 
屬性的狀態

00:07:21.909 --> 00:07:24.211 
當你取消操作時
所出現的只是

00:07:24.278 --> 00:07:26.413 
布爾數值快速翻動

00:07:28.182 --> 00:07:30.651 
當你在劃分
NSOperation子類時

00:07:30.717 --> 00:07:32.819 
取消NSOperation
意味着什麼

00:07:32.886 --> 00:07:35.622 
取決於你的意圖是什麼

00:07:36.323 --> 00:07:37.191 
比如說

00:07:37.858 --> 00:07:40.527 
你的操作正在執行網絡任務

00:07:40.594 --> 00:07:42.863 
取消操作意味着

00:07:42.930 --> 00:07:46.500 
取消網絡通信

00:07:47.534 --> 00:07:49.036 
又或許

00:07:49.102 --> 00:07:51.638 
你的操作在執行一些數據處理

00:07:51.939 --> 00:07:54.241 
取消操作

00:07:54.308 --> 00:07:56.710 
可能就是放棄處理

00:07:57.411 --> 00:07:59.479 
所以當你劃分
NSOperation子類時

00:07:59.646 --> 00:08:02.015 
務必觀察數值變化

00:08:02.082 --> 00:08:05.085 
並在需要作出反應時
做出正確的反應

00:08:07.621 --> 00:08:08.755 
關於取消 你還需要知道

00:08:08.822 --> 00:08:11.825 
它對競態條件很敏感

00:08:13.260 --> 00:08:14.294 
這是什麼意思呢

00:08:14.628 --> 00:08:17.731 
試想一下
有個在後臺執行的操作

00:08:18.465 --> 00:08:20.601 
或許在你的UI中

00:08:20.667 --> 00:08:22.069 
有個取消按鈕

00:08:22.135 --> 00:08:23.570 
可以取消這個操作

00:08:25.172 --> 00:08:27.040 
若用戶輕敲取消按鈕

00:08:27.307 --> 00:08:29.643 
它需要一點時間

00:08:29.710 --> 00:08:33.113 
將取消信息從主隊列

00:08:33.746 --> 00:08:35.282 
傳遞到後臺的操作中

00:08:36.450 --> 00:08:39.285 
若在那段傳遞時間裏

00:08:39.352 --> 00:08:41.989 
你的操作完成執行

00:08:42.655 --> 00:08:45.225 
那麼你的操作將無法被取消

00:08:45.492 --> 00:08:48.362 
因爲一個操作

00:08:48.662 --> 00:08:49.997 
無法從完成狀態回到取消狀態

00:08:51.131 --> 00:08:54.468 
所以知道這點很重要

00:08:54.535 --> 00:08:57.471 
你試圖取消操作

00:08:57.771 --> 00:08:59.439 
但事實上 有些情況無法取消

00:09:00.941 --> 00:09:04.044 
然而 如果你不需要取消操作

00:09:04.378 --> 00:09:05.946 
那就很簡單了

00:09:06.446 --> 00:09:08.715 
你所需做的 只是調用取消方法

00:09:11.185 --> 00:09:12.686 
這就是取消

00:09:14.354 --> 00:09:16.490 
現在來看看另一個有趣的狀態

00:09:17.257 --> 00:09:18.425 
叫做就緒

00:09:20.894 --> 00:09:24.831 
NSOperation的準備
就緒就像取消一樣

00:09:25.199 --> 00:09:28.368 
被定義成一種簡單的布爾屬性
即準備就緒

00:09:29.803 --> 00:09:31.438 
這個屬性的意思是

00:09:31.839 --> 00:09:34.508 
操作已準備好可以執行了

00:09:35.375 --> 00:09:36.877 
我們來看看

00:09:36.944 --> 00:09:40.280 
它如何與操作隊列中的
操作相互作用

00:09:41.648 --> 00:09:44.551 
再一次
我們有了串行操作隊列

00:09:45.953 --> 00:09:48.055 
載入多個操作

00:09:48.121 --> 00:09:51.024 
所有操作都處在
最初的藍色待定狀態

00:09:52.226 --> 00:09:54.127 
儘管 比如 在這個案例中

00:09:54.328 --> 00:09:58.632 
第四個操作也在隊列裏

00:09:58.699 --> 00:10:02.936 
但是進入就緒狀態的
第一個操作

00:10:03.070 --> 00:10:06.340 
纔是即將被執行的第一個操作

00:10:06.940 --> 00:10:09.943 
所以一旦操作準備就緒
它就開始執行

00:10:11.411 --> 00:10:14.281 
隨後 當其他操作準備就緒

00:10:14.848 --> 00:10:17.518 
它們將推進隊列 並被執行

00:10:19.052 --> 00:10:21.088 
在這個案例中
因爲這是一個串行隊列

00:10:21.154 --> 00:10:25.559 
一次只能執行一個

00:10:25.692 --> 00:10:28.262 
若兩個操作同時準備就緒

00:10:28.829 --> 00:10:31.131 
擁有較高優先權的操作
獲得較早執行順序

00:10:31.532 --> 00:10:33.333 
隨後纔是優先權較低的那個

00:10:33.934 --> 00:10:37.137 
當其他操作也準備就緒了

00:10:37.404 --> 00:10:39.973 
它們也將贏得隊列
並被執行

00:10:42.042 --> 00:10:43.343 
以上簡要介紹了準備就緒

00:10:46.180 --> 00:10:47.548 
那我們可以用它來做什麼呢

00:10:49.383 --> 00:10:51.919 
我們可以用它來創建相關性

00:10:53.086 --> 00:10:57.090 
相關性是用來表達

00:10:57.491 --> 00:10:59.626 
操作的嚴格排序的一種方法

00:10:59.693 --> 00:11:03.163 
我們要先執行這個
然後執行那個

00:11:07.968 --> 00:11:10.170 
相關性靈活的地方在於

00:11:10.604 --> 00:11:12.105 
它提供了

00:11:12.172 --> 00:11:16.577 
準備就緒操作的基礎定義

00:11:18.612 --> 00:11:19.847 
通過默認設置

00:11:20.414 --> 00:11:22.583 
當操作的相關性完成執行時

00:11:22.649 --> 00:11:25.452 
操作也準備就緒

00:11:25.519 --> 00:11:27.521 
該行爲是自動的

00:11:30.090 --> 00:11:33.060 
相關性另一個靈活的地方在於

00:11:33.827 --> 00:11:36.563 
它們不受操作隊列的限制

00:11:36.797 --> 00:11:37.631 
這是什麼意思呢

00:11:38.365 --> 00:11:41.535 
若你的應用中有兩個操作隊列

00:11:43.103 --> 00:11:45.372 
第一個隊列中的操作

00:11:45.439 --> 00:11:49.009 
可以取決於
第二個隊列中的操作

00:11:49.443 --> 00:11:50.811 
隨後我們會說說

00:11:50.878 --> 00:11:54.114 
它如何讓
一些真正強大的模態成爲可能

00:11:55.315 --> 00:11:57.851 
現在 在你的操作中創建相關性

00:11:58.285 --> 00:11:59.887 
很簡單

00:12:00.654 --> 00:12:04.224 
我所需做的是
使用增加相關性方法

00:12:04.658 --> 00:12:05.626 
在這個案例中

00:12:06.026 --> 00:12:11.999 
操作B將取決於
操作A的成功執行

00:12:12.499 --> 00:12:17.571 
操作B將等到操作A執行
完畢後纔開始執行

00:12:18.639 --> 00:12:19.907 
這是確定的

00:12:22.242 --> 00:12:26.713 
關於相關性 我們會碰到一些問題

00:12:27.314 --> 00:12:29.149 
比如操作停頓

00:12:30.350 --> 00:12:32.219 
如果我們有操作A

00:12:32.719 --> 00:12:37.257 
和取決於操作A執行的操作B

00:12:37.991 --> 00:12:38.926 
這沒有問題

00:12:39.826 --> 00:12:45.832 
然而 要是我無意中
讓A也取決於B

00:12:46.767 --> 00:12:49.736 
那麼這兩個操作將無法執行

00:12:50.037 --> 00:12:52.739 
因爲它們彼此
都在等待對方完成

00:12:52.806 --> 00:12:56.410 
既然都在等 
那也就是沒有開始了

00:12:57.277 --> 00:12:58.946 
所以 當你在你的應用中

00:12:59.012 --> 00:13:01.682 
創建相關性時 不要這麼做

00:13:05.319 --> 00:13:08.922 
現在WWDC應用到處都在用相關性

00:13:09.723 --> 00:13:13.293 
一個很簡單的例子
當你在你的app上

00:13:13.360 --> 00:13:16.396 
點擊增加到收藏夾按鈕時
會發生什麼

00:13:16.563 --> 00:13:18.599 
這個很可能你們都做過

00:13:20.634 --> 00:13:21.768 
當你點擊按鈕

00:13:22.336 --> 00:13:24.304 
我們先首先創建一個操作

00:13:24.371 --> 00:13:25.572 
叫做登錄操作

00:13:25.672 --> 00:13:30.077 
這個操作可確保你

00:13:30.143 --> 00:13:33.547 
使用開發者的名字和密碼
登錄到app上

00:13:34.081 --> 00:13:39.319 
接下來
我們將創建另一個操作

00:13:39.953 --> 00:13:41.355 
叫做用戶信息操作

00:13:42.089 --> 00:13:45.158 
這個操作確保
你的用戶名和密碼

00:13:45.225 --> 00:13:48.929 
比如說 就是開發者的用戶名和密碼

00:13:48.996 --> 00:13:53.033 
而不是iTunes用戶名和密碼

00:13:53.834 --> 00:13:57.037 
這樣你的Apple ID
就是開發者AppleID了

00:13:59.406 --> 00:14:02.176 
現在 WWDC應用的收藏夾

00:14:02.242 --> 00:14:03.477 
保存在CloudKit中

00:14:03.777 --> 00:14:06.246 
我就需要另一個操作

00:14:06.480 --> 00:14:09.016 
確保我們可以獲得
你的iCloud賬號

00:14:09.950 --> 00:14:11.451 
這是後臺進行的

00:14:11.752 --> 00:14:14.054 
因爲我並未請求允許

00:14:14.121 --> 00:14:16.123 
查看你在app上的
第一個和最後一個名字

00:14:17.291 --> 00:14:19.326 
我們需要確保你有一個
iCloud賬號

00:14:20.093 --> 00:14:21.028 
最後

00:14:21.828 --> 00:14:24.531 
我們創建保存收藏夾操作

00:14:24.731 --> 00:14:25.799 
這取決於

00:14:25.866 --> 00:14:28.936 
成功完成
關於你是一名開發者的驗證

00:14:29.336 --> 00:14:30.971 
和成功完成

00:14:31.038 --> 00:14:33.006 
你擁有iCloud賬號的驗證

00:14:35.409 --> 00:14:36.510 
這只是一個簡單的例子

00:14:37.010 --> 00:14:38.745 
我們來看看複雜點的事例

00:14:41.548 --> 00:14:44.084 
當WWDC應用啓動

00:14:44.151 --> 00:14:45.953 
我們需要一堆的設置

00:14:47.020 --> 00:14:50.691 
首先我們需要下載
一個小的配置文件

00:14:51.225 --> 00:14:52.860 
這個文件將提供一些信息

00:14:52.926 --> 00:14:53.827 
比如

00:14:53.894 --> 00:14:56.563 
應用的最新支持版本是什麼

00:14:56.830 --> 00:14:58.866 
有什麼特性 等等

00:15:00.901 --> 00:15:02.903 
所以 文件下載後

00:15:02.970 --> 00:15:04.638 
我們需要檢查版本

00:15:04.705 --> 00:15:07.341 
確保所運行的版本
就是WWDC應用最新版本

00:15:08.742 --> 00:15:11.178 
app版本檢查完畢後

00:15:11.645 --> 00:15:14.248 
就可以開始下載
一些有用的信息

00:15:14.681 --> 00:15:17.184 
比如新聞標籤裏的新聞

00:15:17.618 --> 00:15:21.154 
發佈會時間表

00:15:21.221 --> 00:15:22.956 
時間表下載後

00:15:23.490 --> 00:15:26.093 
就可以開始導入
存放在iCloud中的收藏夾了

00:15:26.159 --> 00:15:28.729 
以及導入提交的反饋信息

00:15:28.896 --> 00:15:31.398 
在App中可以看到 另外

00:15:31.465 --> 00:15:33.400 
我們還可以下載視頻文件

00:15:34.935 --> 00:15:37.971 
所有這些均需要
時間表事先準備就緒

00:15:39.106 --> 00:15:40.174 
最後

00:15:41.308 --> 00:15:44.311 
我們可以保存
NSManaged對象環境

00:15:45.112 --> 00:15:46.847 
在這裏 我們保存了所有的信息

00:15:47.814 --> 00:15:49.783 
我們來看看

00:15:50.050 --> 00:15:51.919 
相關性和操作生命週期

00:15:52.653 --> 00:15:55.155 
如何影響這些操作的執行

00:15:55.522 --> 00:15:56.990 
我們要將它們

00:15:57.057 --> 00:15:58.992 
全部移到設定爲待定操作狀態

00:16:00.027 --> 00:16:01.328 
現在

00:16:01.395 --> 00:16:04.298 
下載app設置的第一個操作
沒有相關性

00:16:04.565 --> 00:16:06.867 
因此它立刻準備就緒 可以執行

00:16:07.568 --> 00:16:11.205 
我們的操作隊列即將完成

00:16:11.405 --> 00:16:13.774 
開始執行 隨後它將完成執行

00:16:14.708 --> 00:16:15.742 
現在 當它完成時

00:16:16.910 --> 00:16:20.414 
版本檢查操作

00:16:20.480 --> 00:16:21.582 
也立馬準備就緒

00:16:22.049 --> 00:16:24.685 
推進隊列 然後開始執行

00:16:27.054 --> 00:16:28.589 
當它完成時

00:16:28.655 --> 00:16:32.626 
第三個操作也同時準備就緒
可以開始執行

00:16:34.294 --> 00:16:36.463 
它們即將開始執行

00:16:37.865 --> 00:16:39.433 
當他們完成執行時

00:16:40.133 --> 00:16:42.669 
越來越多的操作
也準備好可以執行了

00:16:43.103 --> 00:16:45.472 
它們將推進隊列 並開始執行

00:16:46.740 --> 00:16:48.842 
需要明白和注意的
一件重要事情是

00:16:48.909 --> 00:16:51.245 
在所有其他操作
全部執行完畢之前

00:16:51.612 --> 00:16:53.447 
保存環境的操作是

00:16:53.580 --> 00:16:58.018 
沒辦法準備就緒 等待執行的

00:16:58.719 --> 00:17:02.089 
通過使用相關性
可以確保

00:17:02.155 --> 00:17:06.292 
操作按照正確的順序進行
不會出現失控的情況

00:17:06.926 --> 00:17:08.328 
所以現在 這個準備就緒

00:17:08.729 --> 00:17:11.198 
可以執行 完成了

00:17:11.397 --> 00:17:13.099 
這樣App的啓動就可以持續進行

00:17:14.233 --> 00:17:16.002 
以上就是關於相關性的內容

00:17:19.540 --> 00:17:22.742 
總的來說NSOperation
是一種極好的方法

00:17:22.809 --> 00:17:24.845 
可以用來提取代碼中的邏輯

00:17:26.180 --> 00:17:28.615 
通過在操作中放入邏輯

00:17:29.216 --> 00:17:33.287 
簡化邏輯變化

00:17:33.353 --> 00:17:36.056 
因爲我們處理的是單獨的工作

00:17:36.123 --> 00:17:38.125 
很多就像我們處理塊一樣

00:17:39.293 --> 00:17:40.661 
作爲例子

00:17:41.495 --> 00:17:43.530 
今年的WWDC應用中

00:17:43.597 --> 00:17:47.601 
收藏夾和反饋的保存位置

00:17:47.668 --> 00:17:50.804 
從後端移到CloudKit

00:17:51.939 --> 00:17:53.707 
此刻 請大家想想

00:17:54.041 --> 00:17:58.145 
將你的應用從自定義
從你正在使用的任何服務上

00:17:58.245 --> 00:18:01.348 
轉移到CloudKit上
需要做些什麼

00:18:02.249 --> 00:18:05.219 
獲得網絡通信的
代碼的所有地方

00:18:05.285 --> 00:18:08.288 
服務器供應商複雜事情的
所有相關性

00:18:08.355 --> 00:18:12.059 
如果你突然對這些變得很恐慌

00:18:13.227 --> 00:18:15.462 
這就是
應該使用操作了

00:18:16.763 --> 00:18:18.265 
在WWDC應用中

00:18:18.332 --> 00:18:21.602 
我們所有的網絡通信都在操作之後進行

00:18:22.002 --> 00:18:24.238 
這意味着後臺將從

00:18:24.304 --> 00:18:27.374 
使用自定義服務
變爲使用CloudKit

00:18:28.008 --> 00:18:31.411 
我們要做的就是
重新編寫這四個小的類別

00:18:31.612 --> 00:18:33.247 
這隻需要花費我們不到一天的時間

00:18:33.313 --> 00:18:35.849 
然後還需要另外幾天
來測試我們的改動

00:18:36.149 --> 00:18:38.785 
這個過程簡單但是瑣碎

00:18:41.388 --> 00:18:43.657 
現在 這所有的一切 也許會令你疑惑

00:18:43.724 --> 00:18:45.359 
那多線程優化技術呢

00:18:47.628 --> 00:18:50.330 
多線程優化技術絕對會佔有一席之地

00:18:50.664 --> 00:18:52.566 
事實上
當你下載一組示例代碼做準備時

00:18:52.633 --> 00:18:55.736 
仔細查看 你會發現

00:18:55.802 --> 00:18:59.106 
我們在示例代碼中
使用了多線程優化技術

00:19:00.274 --> 00:19:02.976 
當無法完全使用
NSOperation時

00:19:03.544 --> 00:19:05.379 
比如 任何時候 當你需要

00:19:05.445 --> 00:19:09.650 
從一個隊列到另一個隊列調用一個方法

00:19:10.217 --> 00:19:12.152 
你都不需要將其打包進一個操作中去

00:19:12.719 --> 00:19:15.589 
你需要更快更簡便的方法

00:19:16.089 --> 00:19:18.058 
如果你使用信號量

00:19:18.292 --> 00:19:19.459 
或調度組來做實現

00:19:19.526 --> 00:19:22.963 
這些都很適合使用多線程優化技術

00:19:25.299 --> 00:19:27.467 
所以 那些就是基礎技術

00:19:28.735 --> 00:19:29.803 
現在看看更高級的技術

00:19:32.139 --> 00:19:35.175 
現在 我們意識到其中一件事
在WWDC應用中

00:19:35.242 --> 00:19:40.147 
我們實現了UI交互

00:19:40.581 --> 00:19:43.851 
但仍需其參與在操作鏈中

00:19:44.351 --> 00:19:45.919 
比如 身份驗證

00:19:45.986 --> 00:19:48.055 
我們之前談論了保存收藏夾

00:19:48.689 --> 00:19:50.023 
我們需要確保你已經登錄了

00:19:50.190 --> 00:19:51.325 
但如果你沒有呢

00:19:52.960 --> 00:19:57.564 
那麼我們意識到
我們可以設置UI元素

00:19:57.631 --> 00:20:00.901 
UI功能存在於我們的操作之中

00:20:01.368 --> 00:20:04.071 
比如 在WWDC應用中

00:20:04.171 --> 00:20:06.440 
向上滑動的身份驗證對話框

00:20:06.507 --> 00:20:08.642 
其實是NSOperation

00:20:11.211 --> 00:20:14.481 
無論何時 當你通過WWDC觀看視頻

00:20:14.848 --> 00:20:19.553 
我們都將其壓縮爲“觀看視頻”操作

00:20:20.020 --> 00:20:22.723 
所以 我們所要做的就是

00:20:22.890 --> 00:20:25.192 
用適宜的視頻資源創立一個操作

00:20:25.259 --> 00:20:26.793 
並將其放置在我們的操作隊列之中

00:20:27.060 --> 00:20:29.329 
而後一切就都將井然有序了

00:20:32.032 --> 00:20:36.904 
更甚者當你看見WWDC應用的報警

00:20:37.237 --> 00:20:40.140 
這也我們將UI放置到

00:20:40.207 --> 00:20:43.911 
NSOperation內部
的一個良好應用

00:20:45.379 --> 00:20:48.649 
當我們處理不同模態UI時

00:20:48.715 --> 00:20:51.418 
我們發現了潛在原則

00:20:51.485 --> 00:20:56.023 
所以 當一個UI逐步
接管了整個應用的資源

00:20:56.156 --> 00:20:59.393 
這時候可以進行打包

00:20:59.560 --> 00:21:02.329 
一起打包進
NSOperation之中

00:21:04.231 --> 00:21:05.532 
重申一下

00:21:05.599 --> 00:21:07.634 
當你第一次使用WWDC應用時

00:21:08.001 --> 00:21:09.203 
你會看見一個對話框

00:21:09.670 --> 00:21:12.472 
詢問我們是否能夠收集一些

00:21:12.539 --> 00:21:13.774 
你使用應用時的簡單數據

00:21:14.842 --> 00:21:16.410 
對話框出現時

00:21:17.211 --> 00:21:18.645 
這個UI警報管理者

00:21:19.012 --> 00:21:21.915 
事實上開始在
NSOperation內部運行

00:21:24.685 --> 00:21:25.752 
或者是登陸頁面

00:21:25.919 --> 00:21:27.988 
如果你嘗試添加一些東西到收藏夾

00:21:28.055 --> 00:21:29.790 
或對某個板塊留言反饋

00:21:30.691 --> 00:21:32.759 
這都是NSOperation

00:21:36.997 --> 00:21:38.665 
接下來我們會遇見的是

00:21:39.066 --> 00:21:42.169 
有時我們想執行簡單的區塊邏輯操作

00:21:42.236 --> 00:21:46.273 
但我們還想參與

00:21:46.340 --> 00:21:50.310 
內部的機械操作

00:21:50.878 --> 00:21:52.980 
所以我們轉向區塊操作

00:21:53.046 --> 00:21:54.281 
NS區塊操作

00:21:54.348 --> 00:21:56.350 
以及我們創建的其他自定義操作

00:21:58.585 --> 00:22:01.355 
這就是一個
NSOperation在執行區塊

00:22:01.688 --> 00:22:03.090 
也許你會問

00:22:03.156 --> 00:22:07.094 
那麼 如果NSOperation
是區塊的一個抽象概念

00:22:07.728 --> 00:22:09.396 
爲什麼我又會回過頭來

00:22:09.463 --> 00:22:11.765 
在NSOperation
內部使用區塊呢

00:22:13.066 --> 00:22:14.368 
那是因爲通過

00:22:14.434 --> 00:22:16.470 
在NSOperation內部
設置區塊

00:22:16.737 --> 00:22:20.073 
你可以獲得

00:22:21.141 --> 00:22:23.010 
許多NSOperation的好功能

00:22:23.076 --> 00:22:25.445 
比如相關性

00:22:27.247 --> 00:22:29.183 
讓我們看看我們能用它來做些什麼

00:22:29.650 --> 00:22:34.755 
看看在WWDC應用中
當你點擊反饋按鈕時會發生什麼

00:22:38.659 --> 00:22:40.327 
好的 離開反饋按鈕

00:22:42.362 --> 00:22:43.931 
想執行一個segue

00:22:44.164 --> 00:22:46.567 
想呈現一個視圖管理器

00:22:46.633 --> 00:22:52.472 
好讓你給出五顆星表示非常滿意
四顆星表示滿意

00:22:54.341 --> 00:22:55.843 
我們會執行這個segue

00:22:56.176 --> 00:22:58.946 
所以我們將這個
segue設置在區塊裏面

00:22:59.246 --> 00:23:00.747 
然後將這個區塊

00:23:01.081 --> 00:23:03.383 
放置進區塊操作

00:23:04.785 --> 00:23:08.922 
現在我們允許你離開反饋
如果你已經註冊完這個應用

00:23:09.389 --> 00:23:13.760 
所以我們需要驗證
用你的開發者賬號已經登錄

00:23:13.827 --> 00:23:15.796 
就像我們添加收藏夾時做的那樣

00:23:17.431 --> 00:23:20.634 
爲了驗證你擁有一個開發者賬號

00:23:20.801 --> 00:23:22.636 
我們需要確定你已經成功登錄

00:23:24.671 --> 00:23:30.043 
所以通過執行區塊
操作內部的segue

00:23:30.577 --> 00:23:32.145 
我們能保證

00:23:32.913 --> 00:23:35.916 
在你登錄之後

00:23:36.717 --> 00:23:38.552 
不會再呈現登錄頁面

00:23:40.454 --> 00:23:42.256 
這是非常強大的功能

00:23:42.623 --> 00:23:45.058 
我們在描述一個非常複雜的行爲

00:23:45.125 --> 00:23:47.861 
一系列的事情

00:23:48.061 --> 00:23:50.531 
都是依靠使用操作和相關性

00:23:53.066 --> 00:23:55.502 
在我們編寫WWDC應用過程中

00:23:55.569 --> 00:23:58.438 
我們注意到在某些情況

00:23:58.505 --> 00:24:00.841 
我們在重複大量的同樣操作

00:24:00.941 --> 00:24:03.477 
比如 我們已經看到

00:24:03.544 --> 00:24:07.414 
註冊和用戶信息操作過幾次了

00:24:09.650 --> 00:24:12.052 
那麼我們就想如果能

00:24:12.119 --> 00:24:14.521 
創造一種自動操作方法

00:24:14.588 --> 00:24:15.722 
不是很好嗎

00:24:16.857 --> 00:24:19.193 
所以我們提出一種方法

00:24:19.259 --> 00:24:21.762 
形成其相關的操作

00:24:22.596 --> 00:24:24.665 
換言之 我們想表達

00:24:24.731 --> 00:24:28.001 
就是我們不想執行那些總是

00:24:28.202 --> 00:24:31.572 
需要執行的事

00:24:32.873 --> 00:24:34.741 
所以 讓我們在此看看

00:24:34.975 --> 00:24:36.643 
收藏夾和Cloudkit

00:24:37.845 --> 00:24:39.413 
或下載一個通行證

00:24:40.013 --> 00:24:41.682 
亦或看看

00:24:41.748 --> 00:24:44.551 
WWDC應用中需要登錄的情況

00:24:47.788 --> 00:24:50.424 
所以 當你點擊“添加收藏夾”按鈕時

00:24:50.824 --> 00:24:55.162 
我們做的就是常見一個單一操作

00:24:55.562 --> 00:24:56.697 
來添加收藏夾

00:24:57.064 --> 00:25:00.234 
這將打包某些信息

00:25:01.001 --> 00:25:02.302 
如這個會議的標誌

00:25:02.369 --> 00:25:05.305 
以及你是否想添加到收藏夾或進行移除

00:25:05.372 --> 00:25:07.074 
一個布爾標識符

00:25:08.976 --> 00:25:11.578 
現在 這個“收藏”操作

00:25:11.645 --> 00:25:14.081 
需要獲得允許才能執行

00:25:14.615 --> 00:25:17.885 
所以它自動的形成了兩個相關性

00:25:18.986 --> 00:25:21.421 
一個用來確認你是開發者

00:25:21.488 --> 00:25:23.624 
另一個保證我們獲得iCloud賬號

00:25:26.093 --> 00:25:29.663 
現在 這個操作保證了

00:25:29.730 --> 00:25:33.166 
你作爲開發者能確保登錄賬號

00:25:33.600 --> 00:25:36.770 
所以形成了相關性

00:25:37.638 --> 00:25:39.039 
從而確保你登錄成功

00:25:39.806 --> 00:25:42.409 
這樣我們能夠

00:25:43.243 --> 00:25:45.212 
簡單保存應用密碼

00:25:45.279 --> 00:25:47.748 
我們只需要創立一個單一操作

00:25:48.515 --> 00:25:51.318 
然後它會自動形成相關性

00:25:51.785 --> 00:25:55.822 
可能稍後 如果我們想要移除代碼

00:25:56.590 --> 00:25:58.625 
那麼需要登錄才能添加收藏夾

00:25:58.959 --> 00:26:01.128 
我們只需移除一小段

00:26:01.461 --> 00:26:04.498 
執行收藏操作的代碼

00:26:04.565 --> 00:26:07.234 
那麼該相關性就被移除了

00:26:07.301 --> 00:26:10.671 
這樣就移除了整個應用中的相關性

00:26:11.305 --> 00:26:13.373 
我們並不需要檢查

00:26:13.440 --> 00:26:15.209 
每一個“添加收藏”位置

00:26:15.509 --> 00:26:16.677 
並改寫它們的代碼

00:26:23.050 --> 00:26:25.319 
現在 我們還想要確認

00:26:26.153 --> 00:26:28.655 
其他條件也得到滿足

00:26:30.224 --> 00:26:33.760 
我們需要能夠將準備狀態進行擴展

00:26:34.161 --> 00:26:37.364 
在允許執行操作的情況下

00:26:37.664 --> 00:26:39.366 
進行擴展

00:26:40.267 --> 00:26:42.603 
我們可以舉出一些示例

00:26:43.737 --> 00:26:47.541 
比如我們只想在確實連接到網絡的情況
下才執行操作

00:26:47.741 --> 00:26:50.010 
比如 如果你嘗試

00:26:50.077 --> 00:26:52.479 
在手機處於飛行模式
的情況下添加收藏夾

00:26:52.546 --> 00:26:55.449 
當然 我們不會
使用執行CloudKit操作

00:26:58.418 --> 00:27:01.855 
我們還想要確保

00:27:01.989 --> 00:27:04.625 
在抵達某個位置後執行一個操作

00:27:05.492 --> 00:27:07.728 
那麼 我們需要有能夠
表達該意圖的方式

00:27:11.465 --> 00:27:14.134 
又或者 我們只想
在實際登錄到app後

00:27:14.201 --> 00:27:17.070 
才執行特定的操作

00:27:18.972 --> 00:27:20.607 
因此 通過擴展這個概念

00:27:20.674 --> 00:27:23.243 
讓操作已經準備就緒

00:27:24.044 --> 00:27:26.480 
我們可以更有效地執行操作

00:27:27.981 --> 00:27:31.818 
因此希望大家不會遇到這樣的錯誤

00:27:32.386 --> 00:27:34.955 
如果遇到了 說明操作出錯了

00:27:35.189 --> 00:27:38.625 
因爲操作還未準備就緒執行

00:27:39.660 --> 00:27:41.862 
這種情況下

00:27:41.929 --> 00:27:42.996 
由於無法連接到網絡

00:27:44.798 --> 00:27:47.334 
因此 擴展該準備狀態

00:27:47.401 --> 00:27:48.802 
非常有用

00:27:53.240 --> 00:27:56.677 
另外 我們還有一些操作

00:27:56.743 --> 00:27:59.346 
我們可以同時執行

00:28:00.280 --> 00:28:02.950 
因此 我們想如果需要不斷

00:28:03.016 --> 00:28:05.986 
創建相同的操作序列的話
那就很麻煩了

00:28:06.053 --> 00:28:08.455 
是否可以開發一個操作

00:28:08.789 --> 00:28:10.324 
然後在其之下

00:28:10.390 --> 00:28:12.926 
創建相同的操作序列？

00:28:13.861 --> 00:28:15.562 
一個普通例子是

00:28:15.629 --> 00:28:18.332 
下載文件然後

00:28:18.398 --> 00:28:21.502 
另存到本地空間

00:28:22.836 --> 00:28:24.505 
我知道大家

00:28:24.571 --> 00:28:25.973 
對這個非常熟悉了

00:28:26.406 --> 00:28:29.343 
那麼 讓我們看看
我們可以如何合併操作

00:28:30.010 --> 00:28:31.011 
從而簡化流程

00:28:31.745 --> 00:28:34.615 
假設我們有一個一般類的數據操作

00:28:34.681 --> 00:28:36.316 
然後它和其他東西

00:28:36.383 --> 00:28:38.185 
互相關聯

00:28:38.952 --> 00:28:41.188 
現在我們想植入一個想法

00:28:41.855 --> 00:28:44.391 
好的 我們想要它做兩件事

00:28:44.458 --> 00:28:48.262 
首先要包括另一個
NSOperation

00:28:48.762 --> 00:28:51.899 
然後這個操作要執行下載任務

00:28:52.666 --> 00:28:55.002 
這是個簡單獨立的工作

00:28:56.670 --> 00:28:59.306 
然後它會創建第二個操作

00:29:00.040 --> 00:29:04.211 
用於下載另存

00:29:04.478 --> 00:29:05.612 
然後和下載操作相互關聯

00:29:05.679 --> 00:29:08.482 
這樣另存操作總會在下載之後執行

00:29:09.483 --> 00:29:12.786 
現在 通過將這兩個操作打包

00:29:12.853 --> 00:29:14.788 
成一個更大的操作

00:29:15.389 --> 00:29:17.691 
我們可以輕鬆修改

00:29:18.158 --> 00:29:20.894 
我們數據的來源

00:29:21.328 --> 00:29:22.663 
數據的格式

00:29:22.930 --> 00:29:24.631 
甚至是處理錯誤的方式

00:29:25.465 --> 00:29:27.668 
而我們只需在一個地方

00:29:28.135 --> 00:29:30.671 
修改即可

00:29:30.737 --> 00:29:33.941 
在輸入操作中修改
因爲這裏是app唯一可識別的位置

00:29:36.643 --> 00:29:39.546 
現在 你沒有一定要提前清楚

00:29:39.813 --> 00:29:43.317 
你需要執行的操作是什麼

00:29:44.751 --> 00:29:46.553 
在WWDC應用中

00:29:46.620 --> 00:29:49.089 
在編譯時間 我們無法知道

00:29:49.489 --> 00:29:52.693 
保存到CloudKit上的收藏夾
有多少內容

00:29:53.126 --> 00:29:54.228 
這樣我們需要一種方式

00:29:54.294 --> 00:29:57.431 
讓我們可以進行動態操作編輯

00:30:00.300 --> 00:30:04.671 
因此 我們開發了封裝器
稱之爲抓取收藏夾操作

00:30:05.539 --> 00:30:08.475 
而且由於我們正在
包裝器下使用CloudKit

00:30:08.709 --> 00:30:11.812 
我們需要執行CK請求操作

00:30:12.646 --> 00:30:15.516 
因爲CloudKit是基於
NSOperation開發的

00:30:16.750 --> 00:30:18.819 
這樣 我們先要執行第一個請求操作

00:30:18.886 --> 00:30:21.688 
也許WWDC上有你收藏的一個會議

00:30:22.155 --> 00:30:24.725 
因此該操作會指向那裏

00:30:24.892 --> 00:30:27.394 
並獲取更多的收藏內容

00:30:27.995 --> 00:30:31.231 
因此 我們現在要繼續執行請求操作

00:30:31.565 --> 00:30:33.367 
直到我們接收到反饋

00:30:33.433 --> 00:30:35.702 
說明我們已經全部獲得了

00:30:36.904 --> 00:30:40.307 
因此 通過使用組合模式

00:30:40.607 --> 00:30:44.478 
我們仍可以通過一個“抓取收藏夾”

00:30:44.545 --> 00:30:48.248 
操作來表達我們的操作鏈

00:30:48.782 --> 00:30:50.250 
但是在其之下

00:30:50.717 --> 00:30:55.222 
實際上是按次序執行多個操作

00:30:57.791 --> 00:30:59.993 
現在 在代碼中的情況看起來是這樣的

00:31:01.128 --> 00:31:03.497 
我們的操作有一種執行方法

00:31:03.564 --> 00:31:05.766 
而且這是所有操作的起點

00:31:06.800 --> 00:31:07.935 
因此第一次

00:31:08.535 --> 00:31:12.005 
抓取收藏夾
操作開始執行後

00:31:12.272 --> 00:31:14.107 
這裏會進行初始請求

00:31:14.575 --> 00:31:18.512 
我們要爲你查找收藏的會議記錄

00:31:19.780 --> 00:31:21.748 
這樣我們會發出請求操作

00:31:22.316 --> 00:31:24.885 
然後提交給這個方法
稱之爲執行請求操作

00:31:26.453 --> 00:31:28.422 
這是執行請求操作

00:31:30.023 --> 00:31:32.593 
請求操作完成後

00:31:32.793 --> 00:31:34.161 
我們需要先檢查

00:31:34.228 --> 00:31:36.163 
看看是否有錯誤

00:31:36.396 --> 00:31:38.599 
如果有 我們要中止流程先處理錯誤

00:31:40.701 --> 00:31:44.137 
如果沒有錯誤 但是存在指針

00:31:44.638 --> 00:31:46.440 
這是CloudKit
通過指針告訴我們

00:31:46.607 --> 00:31:48.976 
還有其他有待抓取

00:31:49.543 --> 00:31:52.980 
那麼 我們要使用該指針在序列後

00:31:53.046 --> 00:31:55.015 
創建下一個CK請求操作

00:31:55.816 --> 00:32:00.487 
然後進行半遞歸式調用執行請求操作

00:32:00.888 --> 00:32:04.558 
這是我們執行多個請求操作的方法

00:32:06.493 --> 00:32:09.863 
另外 如果沒有指針或者錯誤出現

00:32:10.097 --> 00:32:13.133 
那麼是CloudKit
指示我們已經抓取完畢

00:32:13.400 --> 00:32:15.736 
這樣我們可以開始導入

00:32:16.970 --> 00:32:18.372 
已經下載好的記錄了

00:32:26.113 --> 00:32:28.649 
在開發過程中

00:32:28.715 --> 00:32:32.986 
有幾次我們遇到視圖故障

00:32:33.720 --> 00:32:35.789 
我們認爲是視圖故障

00:32:36.557 --> 00:32:39.326 
現在 也許大家都有
在使用app過程中

00:32:39.760 --> 00:32:41.128 
警告跳出的經歷

00:32:41.895 --> 00:32:44.064 
在你準備點擊關閉的時候

00:32:44.131 --> 00:32:45.432 
另一個警告又跳出來

00:32:46.133 --> 00:32:48.402 
這時你想 哦 好吧
這是發生了什麼呢？

00:32:48.802 --> 00:32:50.537 
也許又在你要點擊關閉的時候

00:32:50.737 --> 00:32:52.472 
又有一個跳出來

00:32:52.539 --> 00:32:55.342 
因此畫面總是反反覆覆

00:32:55.409 --> 00:32:57.144 
你甚至不確定現在看到的是第一個警告

00:32:57.211 --> 00:32:59.046 
還是第幾個警告

00:33:00.314 --> 00:33:03.951 
我們是如此想要避免
這種令人厭煩的情況

00:33:06.186 --> 00:33:07.955 
另一個我們想要的是

00:33:08.021 --> 00:33:09.923 
我們想要確保

00:33:10.791 --> 00:33:15.762 
你只會一次觀看一個視頻

00:33:15.829 --> 00:33:18.866 
這個問題WWDC應用現在還無法明白

00:33:18.932 --> 00:33:20.367 
如何正確處理

00:33:20.434 --> 00:33:23.170 
因此我們想要確保無論你做什麼

00:33:23.670 --> 00:33:25.305 
我們都不會允許你這麼做

00:33:27.908 --> 00:33:29.877 
另一個我們想確認的是

00:33:29.943 --> 00:33:32.446 
我們不會一次試圖

00:33:32.513 --> 00:33:35.883 
加載多個基本數據庫

00:33:37.384 --> 00:33:41.655 
因此 我們想出一個方法
用於描述互斥性

00:33:41.955 --> 00:33:47.661 
這種方法是在一個時候
只執行一種特定的操作

00:33:49.730 --> 00:33:52.599 
現在 也許你在想 哇
這個想法真複雜

00:33:52.666 --> 00:33:54.501 
具體我們如何辦到呢

00:33:55.802 --> 00:33:57.437 
實際上很簡單

00:33:58.272 --> 00:34:00.040 
現在我們回到那個警告的例子

00:34:01.508 --> 00:34:04.578 
假設我們創建一個操作用於顯示警告

00:34:04.811 --> 00:34:06.079 
並警告用戶

00:34:06.146 --> 00:34:08.549 
然後我們將其放到操作序列中

00:34:08.715 --> 00:34:11.251 
也許需要等待一下
讓其他操作先完成

00:34:11.451 --> 00:34:14.721 
也許操作已經完成了一半
我們不確定

00:34:15.755 --> 00:34:17.090 
但之後發生了些事

00:34:17.591 --> 00:34:20.793 
而且我們決定再創建另一個警告操作

00:34:21.594 --> 00:34:23.096 
好的 我們要做的就是

00:34:23.330 --> 00:34:25.966 
讓第二個警告操作

00:34:26.033 --> 00:34:28.168 
與第一個相關聯

00:34:29.101 --> 00:34:33.841 
這正是跨隊列相關性
強大之所在

00:34:34.708 --> 00:34:36.909 
因爲不論警告操作

00:34:37.010 --> 00:34:40.947 
在哪個隊列中執行

00:34:41.447 --> 00:34:44.885 
只要第二個操作與第一個相關

00:34:45.418 --> 00:34:52.092 
那麼第二個操作
只有在第一個操作結束後纔可以執行

00:34:52.926 --> 00:34:56.362 
而且 由於某些奇怪原因

00:34:56.429 --> 00:34:58.866 
我們決定創建更多的警告操作

00:34:59.066 --> 00:35:02.102 
更多的警告操作 只要我們設定

00:35:02.169 --> 00:35:05.973 
下個操作與之前的相關即可

00:35:06.039 --> 00:35:10.310 
就像一張時間關聯表一樣

00:35:10.811 --> 00:35:14.014 
我們可以確保操作

00:35:14.081 --> 00:35:15.382 
將彼此產生互斥性

00:35:16.817 --> 00:35:19.019 
真是功能強大啊

00:35:20.020 --> 00:35:21.522 
通過使用相關性

00:35:22.022 --> 00:35:26.260 
我們可以確保應用的行爲正確

00:35:26.527 --> 00:35:29.329 
我們可以確保用戶

00:35:29.396 --> 00:35:30.631 
不會同時收到多個警告

00:35:30.764 --> 00:35:34.067 
我們可以確保用戶

00:35:34.134 --> 00:35:35.536 
不會一次試圖觀看多個視頻

00:35:35.836 --> 00:35:40.307 
我們可以確保用戶

00:35:40.374 --> 00:35:42.643 
不會同時加載兩份數據

00:35:45.812 --> 00:35:47.948 
因此 以上是我們遇到的一些挑戰

00:35:48.015 --> 00:35:51.485 
並嘗試在編寫WWDC
用的時候解決

00:35:52.052 --> 00:35:53.086 
還有更多

00:35:54.288 --> 00:35:56.456 
但我們認爲這些真的很酷

00:35:56.857 --> 00:35:58.592 
而且我們會想到更爲簡單的方法

00:35:58.659 --> 00:36:00.160 
去解決我們遇到的問題

00:36:02.129 --> 00:36:04.731 
那麼 我們現在談談樣本代碼

00:36:07.134 --> 00:36:10.237 
在WWDC網站上的樣本代碼部分

00:36:10.304 --> 00:36:12.406 
你可以找到一段樣本代碼

00:36:12.472 --> 00:36:14.107 
叫做高級 NSOperations

00:36:14.708 --> 00:36:16.610 
這是一個簡單的app

00:36:16.677 --> 00:36:18.078 
用於顯示最近的地震

00:36:19.012 --> 00:36:20.447 
但是這個app是

00:36:20.514 --> 00:36:22.716 
完全基於NSOperations的

00:36:23.417 --> 00:36:25.018 
而且該app的操作

00:36:25.085 --> 00:36:26.954 
是我們之前

00:36:27.020 --> 00:36:30.524 
從WWDC的app中提取出來

00:36:31.158 --> 00:36:32.392 
然後放進去的

00:36:32.759 --> 00:36:34.561 
這個app中的這些代碼

00:36:34.628 --> 00:36:36.296 
實際上已經有好幾年的歷史了

00:36:36.530 --> 00:36:37.497 
非常穩定

00:36:40.367 --> 00:36:45.205 
現在 初級類別就是樣本代碼

00:36:45.639 --> 00:36:49.209 
這是NSOperations
的基礎子類別

00:36:50.110 --> 00:36:52.312 
在樣本代碼中

00:36:52.379 --> 00:36:54.381 
我們在才操作中加入了兩個關鍵特性

00:36:55.682 --> 00:36:56.517 
首先

00:36:58.085 --> 00:37:00.120 
是條件

00:37:00.187 --> 00:37:01.421 
之後我們會談談這點

00:37:02.456 --> 00:37:06.159 
第二個概念我們稱之爲“觀測器”

00:37:07.261 --> 00:37:08.829 
現在在樣本代碼中

00:37:08.896 --> 00:37:11.632 
我們已經有許多不同種類的操作代碼

00:37:11.965 --> 00:37:14.635 
我們有羣操作

00:37:14.768 --> 00:37:18.272 
方便進行更多的內部操作

00:37:19.006 --> 00:37:22.476 
另外 在樣本代碼中
我們還有操作子類別

00:37:22.976 --> 00:37:26.013 
允許你獲取
NSURLSession任務

00:37:26.413 --> 00:37:29.082 
並在NSOperation
中進行處理

00:37:29.349 --> 00:37:33.554 
這樣你可以讓不同任務之間進行關聯

00:37:33.620 --> 00:37:37.391 
或者進行條件設定 或者設置觀測器

00:37:38.225 --> 00:37:40.994 
這裏有一個示範操作
用於請求你當前的位置

00:37:41.328 --> 00:37:43.096 
有時候這非常有用

00:37:43.163 --> 00:37:45.399 
我們要做的就是稍微等待一下

00:37:45.899 --> 00:37:47.234 
這裏甚至還有一種操作

00:37:47.301 --> 00:37:48.836 
可以向用戶顯示

00:37:49.002 --> 00:37:50.771 
帶按鈕和塊處理程序的警告

00:37:52.072 --> 00:37:54.074 
因此 NSOperation
的樣本代碼中

00:37:54.141 --> 00:37:56.844 
有非常多的子類

00:37:58.812 --> 00:38:02.249 
現在 操作有了條件的概念

00:38:02.583 --> 00:38:05.152 
一個條件指的是一個協議

00:38:05.219 --> 00:38:07.454 
我們定義的協議

00:38:07.521 --> 00:38:09.990 
這樣 對於操作而言

00:38:10.691 --> 00:38:13.360 
可以表示它是如何生成相關性的

00:38:14.928 --> 00:38:17.998 
如何定義互斥性
以及如何擴展預備狀態概念

00:38:19.833 --> 00:38:21.702 
這樣 我們在樣本代碼中

00:38:21.969 --> 00:38:24.104 
提供了一些條件

00:38:24.304 --> 00:38:27.241 
其中之一是互斥性通用條件

00:38:27.841 --> 00:38:29.610 
這種條件表示一個操作

00:38:29.877 --> 00:38:33.580 
與相同類屬的其他操作

00:38:33.647 --> 00:38:36.116 
是互相排斥的

00:38:37.284 --> 00:38:40.554 
這裏我們還有可達性條件

00:38:40.621 --> 00:38:42.422 
這樣通過一行代碼

00:38:42.589 --> 00:38:44.491 
你可以方便地通過操作表達

00:38:44.791 --> 00:38:47.361 
只有在網速很好的情況下才執行

00:38:48.161 --> 00:38:51.498 
另外 我們還有非常多的許可類條件

00:38:52.199 --> 00:38:53.133 
比如

00:38:53.200 --> 00:38:56.637 
只有在使用特定的Cloudkit
container的情況下

00:38:56.703 --> 00:38:57.638 
才執行操作

00:38:58.071 --> 00:39:00.507 
或者當我們使用日曆

00:39:00.574 --> 00:39:02.843 
或者使用照片庫
或者使用通訊錄

00:39:02.910 --> 00:39:05.646 
或者其他你設定條件的情況下才執行操
作

00:39:07.481 --> 00:39:08.448 
這就是條件操作

00:39:10.317 --> 00:39:12.920 
最後是操作觀測器

00:39:15.088 --> 00:39:19.426 
操作觀測器也是一種協議

00:39:19.493 --> 00:39:22.829 
通過這種方法

00:39:22.963 --> 00:39:27.067 
在操作過程中

00:39:27.134 --> 00:39:28.769 
操作會注意重要事件的值

00:39:29.102 --> 00:39:31.438 
比如開始執行 終止執行

00:39:31.738 --> 00:39:34.942 
以及如果該操作決定

00:39:35.309 --> 00:39:38.645 
生成稍後被執行的另一個操作

00:39:38.712 --> 00:39:43.150 
從而生成一個警告操作

00:39:44.885 --> 00:39:48.188 
另外我們有許多觀測器示例

00:39:48.889 --> 00:39:49.756 
比如超時

00:39:50.724 --> 00:39:53.527 
通過在操作中簡單加入超時觀測器

00:39:54.394 --> 00:39:56.964 
這樣觀測器會進行觀測確保

00:39:57.030 --> 00:39:58.365 
操作在你設定的時間範圍內

00:39:58.432 --> 00:40:00.734 
執行完畢

00:40:01.134 --> 00:40:02.236 
並且 如果超時

00:40:02.302 --> 00:40:04.104 
那麼觀測器將自動取消操作

00:40:05.739 --> 00:40:08.976 
我認爲一項利器的是背景觀測器

00:40:09.409 --> 00:40:12.613 
當你將背景觀測器
設定到一個操作中後

00:40:12.679 --> 00:40:16.583 
觀測器會觀測UI應用的狀態

00:40:17.117 --> 00:40:18.652 
如果應用進入背景

00:40:19.353 --> 00:40:21.889 
那麼觀測器將

00:40:21.955 --> 00:40:24.625 
自動啓動背景任務

00:40:25.158 --> 00:40:26.827 
然後在操作完成後

00:40:27.261 --> 00:40:29.029 
自動終止任務

00:40:29.696 --> 00:40:31.932 
這樣 如果你正處理某些重要操作

00:40:31.999 --> 00:40:34.434 
比如也許你正上傳數據到服務器

00:40:34.501 --> 00:40:36.436 
而你不想被終端或者暫停

00:40:37.471 --> 00:40:39.206 
一個方法是你可以

00:40:39.273 --> 00:40:42.142 
添加背景觀測器到操作中

00:40:42.609 --> 00:40:46.079 
這樣可以確保你在背景
有足夠多的時間

00:40:46.146 --> 00:40:48.348 
這樣你可以完成該上傳操作

00:40:49.917 --> 00:40:52.019 
另一種方法很酷

00:40:52.085 --> 00:40:54.154 
是網絡活動指示器觀測器

00:40:54.888 --> 00:40:57.658 
你可以將這個觀測器添加到操作中

00:40:57.724 --> 00:40:59.126 
當其啓動後

00:40:59.193 --> 00:41:01.795 
觀測器將在狀態欄中

00:41:02.596 --> 00:41:07.167 
對互動指示器進行數值遞增操作

00:41:07.234 --> 00:41:08.836 
然後當操作停止後

00:41:09.203 --> 00:41:10.971 
進行數值遞減操作

00:41:11.305 --> 00:41:15.943 
這樣你可以同時進行多個網絡操作

00:41:16.510 --> 00:41:19.413 
並且添加其中一個網絡指示器

00:41:19.479 --> 00:41:21.181 
或者觀測器後

00:41:21.248 --> 00:41:23.317 
觀測器會自動

00:41:23.383 --> 00:41:25.953 
顯示和隱藏網絡活動指示器

00:41:26.019 --> 00:41:28.155 
從此 管理這種複雜的事情

00:41:30.457 --> 00:41:32.793 
都可以完全交給操作了

00:41:33.126 --> 00:41:35.095 
而所有這一切都可以自動進行
實在是酷

00:41:35.696 --> 00:41:37.231 
另外在樣本代碼中

00:41:37.564 --> 00:41:39.933 
我們還提供了其他的觀測器

00:41:40.000 --> 00:41:43.670 
比如能夠添加任意代碼塊
到這三個事件中

00:41:43.971 --> 00:41:45.806 
然後讓其自動重新執行

00:41:47.241 --> 00:41:48.909 
以上就是樣本代碼的情況

00:41:49.610 --> 00:41:52.713 
乍看之下 代碼很像一個簡單的應用

00:41:52.779 --> 00:41:55.849 
但是仔細一看 裏面很精妙

00:41:55.916 --> 00:41:58.385 
我真的推薦大家下載看看

00:42:00.187 --> 00:42:01.321 
那麼 總之

00:42:02.656 --> 00:42:06.059 
使用操作可以對應用
進行邏輯抽象處理

00:42:06.593 --> 00:42:11.632 
通過在操作中加入你的邏輯
而且之後很容易進行修改

00:42:11.832 --> 00:42:15.335 
比如我們如何將WWDC應用
跳轉到使用CloudKit

00:42:15.602 --> 00:42:17.704 
這只是一個簡單的改變

00:42:19.106 --> 00:42:23.777 
使用相關性可以表達
應用之間的關係

00:42:24.077 --> 00:42:28.382 
這樣可以很容易
確保特定行爲之間的關係

00:42:28.515 --> 00:42:30.717 
比如A行爲之後必須是B行爲

00:42:34.087 --> 00:42:34.922 
另外

00:42:35.822 --> 00:42:38.926 
操作讓你可以描述複雜的行爲

00:42:39.393 --> 00:42:43.130 
比如互斥性或者整合

00:42:43.497 --> 00:42:46.200 
這對於操作來說很簡單

00:42:48.569 --> 00:42:52.539 
而且NSOperation能夠允許
你花費非常少的心思

00:42:52.806 --> 00:42:54.875 
就能執行非常強大的功能

00:42:56.276 --> 00:42:58.245 
因此 我們未大家提供了相關的會議

00:42:58.645 --> 00:43:00.414 
接下來的會議是

00:43:01.215 --> 00:43:04.318 
“建立響應以及GCD的高效應用”

00:43:04.551 --> 00:43:06.653 
我們期待大家也參與GCD

00:43:06.720 --> 00:43:10.123 
這是一項非常好的實用技術

00:43:10.190 --> 00:43:12.893 
因此 我鼓勵大家出席會議
或者觀看視頻

00:43:13.260 --> 00:43:16.096 
看看如何在你的應用中使用GCD

00:43:16.763 --> 00:43:18.031 
另外 如果你想要了解更多

00:43:18.098 --> 00:43:21.368 
關於我們的框架是如何
使用NSOperation的

00:43:21.435 --> 00:43:24.872 
你可以查看今年的CloudKit
提示和技巧大會

00:43:25.205 --> 00:43:27.941 
或者去年的
“高級CloudKit”大會

00:43:31.178 --> 00:43:34.381 
另外 我們在WWDC網站上
提供了樣本代碼供大家使用

00:43:34.448 --> 00:43:35.782 
建議大家去看看

00:43:36.450 --> 00:43:40.621 
我還想鼓勵大家閱讀開發者庫中的
“線程編輯指導”部分

00:43:40.854 --> 00:43:43.290 
這裏有很多有用的信息

00:43:43.524 --> 00:43:45.893 
方便大家使用NSOperation

00:43:46.360 --> 00:43:49.263 
如果你需要任何技術支持

00:43:49.396 --> 00:43:51.632 
我們建議大家可以在開發者論壇上發帖

00:43:51.832 --> 00:43:53.467 
請教
或者聯繫開發者技術支持部

00:43:54.902 --> 00:43:57.237 
非常謝謝
希望大家繼續享受接下來的部分