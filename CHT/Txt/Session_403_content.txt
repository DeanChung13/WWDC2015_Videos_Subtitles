伍迪·李德斯東：大家好
今天早些時候我對斯特凡說我希望有人能來
太不可思議你把這裏都包了
感謝你能出來
我是伍迪很高興給大家講講
用Swift改進現有的App
大家能不能舉一下手
多少人實際上在用Swift 進行編碼？
好的<c.blue> 很好
那你們大家就 都來對了
無論你是否用了都是如此
希望在講座後你可以用Swift
打理現有的Objective-C項目
要知道 去年我也我也在這屋裏 坐在後面的角落 
是個聽衆的身份還帶着筆記本
想試着實踐一下
我在之前講座學到的新技術
同時還在回覆着工作郵件 雖然我之前說過不會回覆的
同時把一半的心思放在發言人身上
我相信在座的大部分現在也是這樣
然後 角色換位 我從臺下聽衆
走到了臺前
我從加拿大新斯科舍省哈利法克斯 
來到了加利福尼亞
如今來這裏幫助大家學習使用
Swift和Objective-C的部分技術
我就不必上前去翻動了
這裏有遙控
我想來做的是
介紹部分技術內容讓大家可以把Swift加到現有項目
讓項目變得更好
本次講座我就會用來
介紹這樣的內容
我去過InfiniteLoop園區到了停車場
來到下面一層的地下迷宮
經過守衛工業設計入口的三頭犬
在盡頭 是我們
保存軟件的保險庫
我打開軟件保險庫
取出app<c.blue> The Elements 這可能在兩三年內
都沒在WWDC見到了
現在我就將向大家介紹它是怎麼回事
好的 這就是 The Elements
有誰還記得以前見過?
啊? 有人見過 有人沒有
有人當真喜歡它
我就是
這是個標準的基於UIKit的表視圖app
我們有一束單元格 針對
針對原子表中的每個元素
我們還有這個小的詳細視圖
其中會有更多的信息
如果點擊一個單元格
我們有這個導航控制器推動演示顯示部分相關細節
非常棒
<c.blue> 我相信可能
很多人都會這麼做
在不同的應用中移動
並且回來再來看有一陣子
沒用的app 或是有一陣子沒編程的app 
然後有人讓你增添新的功能
或是支持新的操作系統 新的SDK
這就是我們馬上要做的事情
我們會對Objective-Capp準備用Swift來實現現代化
意思是說：如果有現有應用
你必須要爲它編寫新代碼
而現有的應用是Objective-C app
考慮利用Swift功能使用Swift來編寫新代碼
與此同時
把原始的Objective-C代碼留在Objective-C
這也很好的
在本講座中 我們先從
對應用的翻新講起爲用戶界面
帶來更爲現代的外觀
我們馬上要做的是使用Swift
之後 我們還要來看看代碼
Swift的結構及其函數比如映射
找到爲應用增添新功能的辦法
這個應用有大小tile框架
小tile框架是表視圖
大tile框架是詳細視圖
這些tile框架包括背景
外加在背景上渲染的文本
因爲這個app是個老版本app
背景最初是用Photoshop做的渲染
然後嵌入到應用之中
因爲背景中的不同顏色取決於
原子狀態固體 液體 合成氣體
是僅爲最初的iPhone做的渲染
其中並不包括Retina藝術設計
也就是說當我們拿到這個老版本app
在新版本硬件上運行時我們必須做擴展
當我們擴展這個老版本藝術設計時
我們最後是得到的是圓角失真效果 就是鋸齒
因爲沒有足夠的像素數據
來光滑地表現這些角
所以我們在本次講座中就會解決這個問題
還有一個問題就是 當你看自己的
中學紀念冊時
也許是80年代或90年代
對嗎？
你看到了自己的照片
你在這裏穿着馬甲
還繡着小貓手裏拿着鍵盤
因爲當時這樣很酷
背景還是激光效果
因爲這當初也很酷
現在你再來看着它
心裏會想着當時我腦子裏在想什麼呢？
有時 我們看着以前的app心裏會想
當時我們腦子裏是想什麼呢？
還有閃亮 光澤 反射效果
我們這就來調整
時尚潮流改變了風格不一樣了
有一種辦法是從
背景上把光澤效果刪除下去
我們得到了非常時尚的渲染矩形輪廓
看似在小tile框架上效果不錯
就像是在app的大tile框架一樣
現在我們可以在Photoshop渲染新 背景
並把它們嵌入應用中
不過要清楚這個應用我們
不會經常使用
要知道  我們再講到
可能到了WWDC2020Elements 我希望確保
當時它看上去還不錯不是簡單的過去的硬件
和現在的硬件 而是潛在的未來硬件
那我繼續選擇放入一些自定義繪圖代碼
繪製圓角矩形背景因爲它是個圓角矩形
我準備在Swift中實現 但是
我會從 Objective-C調用
爲實現這一點 我用到的是Mix和Match技術
我們在去年和今年有許多講座
都是介紹Swift和Objective-C的互操作性
對其中的機制都有很好的介紹
現在我想來爲大家進行綜述
來看技術怎樣發揮作用
然後深入介紹一個演示 大家可以直觀地瞭解
一般而言 當我們考慮到Objective-C中的類時
會有個頭文件和一個執行文件
兩部分共同構成類定義
但是可能我們會有部分
分類中執行的方法
這相當好
然後我們的類定義是基類
加上分類
並不是說
不可以有多個分類
實際上 我們可以用UI表視圖做些什麼
如果來看Objective-C中的頭文件
會看到在UI表視圖有很多分類
同樣 也不是說這些分類之一
不可以在Swift中執行
其中 術語會改變可是概念還是一樣
我們只是稱其爲Objective-C的Swift擴展
在本例中是基類
並不是說
不可以用多個Objective-C分類
與多個Swift擴展相混合 其中所有的內容構成類
我們在Objective-C中編寫部分函數
這會讓你在Swift中編寫更新的函數
爲了讓互操作性技術可以實現我們用到
一組橋接頭文件不是一組橋接頭文件
我們是用橋接頭文件和一個生成頭文件
現在橋接頭文件在Xcode中編成
首次向現有Objective-C項目中引入Swift
然後進行維護
基本上要進入其中加上部分輸入語句
這樣就可以針對性從Objective-C 
面向Swift使用選擇數據類型
然後在倒數上Swift編譯器編成生成的頭文件
可以將之輸入到Objective-C執行文件
來面對Swift 在本例中是針對
Objective-C的擴展和其他數據類型
現在我們有了兩個頭文件
你會在演示中看到它們
馬上就好
好的<c.blue> 在項目中
這個類名爲原子元素tile視圖
這就是實際在繪製背景的
其中有個方法
這其實不僅是繪製背景
它爲大小tile框架繪製了背景
和背景上的所有的文本
我準備介紹新的繪圖代碼
但我將用Swift來實現因此我會繼續製作新的Swift文件
這是Xcode中的command-N
我們會選擇Swift文件來創建
因爲是這是首次將Swift加入
這個項目我可以選擇
現在就生成接橋頭文件
我想創建一個按下Return
現在我有兩個文件其中包括Objective-C的
基類 外加Swift文件
我還有接橋頭文件
還可以把這個再加寬一些 就這樣
你可能注意到Swift文件的文件名
和Objective-C中的完全一樣
並不是有這樣的要求而是爲了方便起見
因爲這表示在Xcode 
可以用快捷方式 controlcommand-up arrow
並循環Swift和Objective-C頭文件並執行
在這三個之間快速往復即可
現在我選定在橋接頭文件
把在Objective-C中聲明的數據類型
暴露Swift通過輸入頭文件來實現
因爲我想將原子元素tile視圖擴展到Swift
或使用Swift 將之輸入給接橋頭文件
此刻我只需要的是我已經強調過的原子元素tile視圖
但是在演講的稍後部分我還需要其他幾個
我先來繼續現在把它們全都輸入
我們在來看Swift文件
我會編寫原子元素tile視圖的擴展
現在類原子元素tile視圖 調用這個新函數
叫繪製原始背景
大家可以看到 我還用到了新的Xcode 7標記
給出文檔註釋文檔註釋
在本例中 是繪製原子元素背景tile框架
我來繼續 把實際
進行繪製的代碼加進去
這就是Swift的部分
但現在我想從Objective-C中調用Swift函數
這樣反而是裝載預渲染圖像
我會用這種方法來繪製
然後切換到原子元素tile視圖m
需要確保它可以看到我加入Swift中的
代碼 因此我繼續並輸入生成的頭文件
生成的頭文件和產品使用完全相同的名稱
因此元素再加上連字符 Swift.h
現在 在這種方法中我通常會裝載
預渲染背景我會加註釋
並反而調用“self draw”大家可以看到
Swift的方法作爲原生方法
和這裏的所有內容一起顯示
你甚至可以看到註釋顯示爲draw  
an atomicelementsbackground tile
我來傳遞交出這個元素
把它傳遞交給外包矩形
它會繪製圓角矩形
運行app
就這樣運用Swift代碼和Objective-C
獲得部分圓角矩形 謝謝
這就是在觀衆裏安排自己的朋友的好處
大部分內容 都是和我的預期相符
是圓角矩形
但是圓角矩形本身 它們並不
和我想要的方式相符
實際上 如果放大 大家可以看到
裏邊是圓角但外邊不是圓角
這不是我的本意
我是希望是純圓角純粹的圓角
在裏邊和外邊都是
我們來仔細看看爲什麼會是這樣
我們來看Swift結構
Swift會怎麼讓它
更簡單並與結構配合更自然
例如在Core Graphics框架中我們有許多 
基本結構
我們有CGrectsCGpoints CGsize等等
繪製的時候我有外包矩形是個CGrect我繪製了貝茲曲線路徑
現在貝茲曲線路徑是屏幕上的
灰色邊框繪製貝茲曲線路徑
接下來 把它被放在外包矩形內部
你就會看到這裏是外包矩形
貝茲曲線路徑你看到的不是這樣本身並非是你所見
直到對之應用線條纔會進行渲染
比如畫線大家會看到
對貝茲曲線路徑的渲染效果
我們來繪製貝茲曲線路徑
在加上畫線
例如 畫線爲10個單位寬 10點寬
但是會超過外包矩形的
邊界
這會導致剪切
圓角矩形實際上是在外邊
但是在外包矩形上發生的剪切防止它到達那裏
我知道 在座的朋友有人會覺得
如果剪切存在問題 那就關閉剪切
問題就解決了
就可以繼續了
當然可以 我覺得
在Xcode中Swift問題可以這麼解決
只要重新安排Swift的感嘆號位置
直至開始編譯爲止
可以這麼做 只是我不會稱之爲最佳實踐
當出現剪切問題時
這是性能表現的問題
通過所調用的每個API
通過發起的每個任務通過進行的每個動作
通過你的每一次呼吸
你需要考慮對功能和性能的影響
不斷計算兩個矩形的交叉部分並對之進行剪切
這不是很有效的方法
在一開始就把矩形設置爲正確大小則更爲有效
我們就要這麼做
準備嵌入貝茲曲線路徑
這樣就不會自行剪切
爲此 我們會用到一些方法
我是說CGrect上的方法
當它在Swift中使用的時候
考慮一下這些原始類型怎樣正常使用
我們有CGrectsCGpoint等等
我說過它們可能會在這裏
那麼單獨來看你獲得了可適用的整套全局通用函數
例如CGrectZeroCGrectMake
或GetWidth或是部分實際函數
例如獲得聯合或交點
這是二者之間的認知區分
我們瞭解是這個類型 然後我們需要
瞭解是這些方法 不好意思
是作用的函數
我們用Swift工作時我們實際上改變的是
CGrect和CGpoint及CGsize進入Swift的方法
我們基本會用封裝用所有這些
這些全局 正式來講是作用於框架的全局函數
並在結構中搭建它以便使之完成代碼
更爲簡單還可以更出色預測到API是什麼
因爲你可以處理點結構
然後爲所有方法和屬性獲得它所具備的代碼完成
然是如果我們把名稱就保留成這樣
這還不是原生的感覺
名稱實際上都做了重新映射 
讓人覺得這是數據類型的 第一類型方法
這樣做的好處在於處理Swift中的結構的方法
調用函數或調用方法
或訪問其屬性這與類的處理方法
與枚舉的處理方法完全相同
都是相同的一致風格
我們還要在所有不同數據類型中
使用同樣的初始化器
我們有着更好的代碼完成
總之在Swift中運用這些類型更爲自然
因爲它們作爲第一類型數據類型和方法配合
好的我們還要做一件事情
在下面的演示中我不瞭解大家會怎樣但是當我用圖形代碼時
特別是部分CoreGraphics代碼時 
我使用的一個方法是渲染代碼
然後會運行接着來構建並複製到
模擬器然後我導航到
模擬器中代碼真正被激活被使用的位置
我還會進行檢測 如果不喜歡
就會返回調整代碼並運行全部內容
這是個循環
來回走一遍會非常耗時
來看如果把直線寬度
從3改到4 或是關閉光柵化 或是
進行某種設置更改試着讓它運轉會怎樣
還有更好的方法
不需要這麼來回反覆
也不必經常註釋出
部分代碼只爲嘗試效果如何
如果真想試驗 可以
拿一些代碼試試看看效果怎樣
體育場就是爲這個準備的
通過體育場循環修改成
這個樣子
只要調整代碼你就會立刻看到改變如果不喜歡可以立 刻修改
這些都不會複製到模擬器中 導航並
現在通過體育場 解決圓角來看看是什麼樣子
矩形的問題並使用CGrect
的部分方法從中得到更好的CGrect
我來給大家看看
繪圖代碼在原子元素tile視圖
<c.blue>.點Swift就在這裏 
這是我在之前演示中
複製的函數
我就是想要處理這個
所以把它複製到體育場
複製好了點擊command-N生成新的iOS體育場
粘貼進去
現在就有了繪圖函數
開發人員並非身處孤島
沒有任何繪圖函數是完全隔絕
繪圖函數需要在有上下文來繪製
也就是繪圖上下文或是圖形上下文
獲得圖形上下文的最便捷方式
是在UIView生成子類
這就是我準備做的
我先來聲明UIView的子類 這裏
它所做的就是調用繪圖函數
然後我會實例化這個類
然後我會採用繪圖函數
繪製的圖像並直接加入這裏的故事板
放大些 這樣都能看清
接着可以進行嘗試
你可以指出自己該做什麼
讓它按照自己的意圖來進行繪製
例如 我想看看是否看似
它只有120點
這就是結果
也許我想看看如果直線寬度不是6而是60圓角半徑
爲356會怎樣
就是這樣
大家可以一直做嘗試
一旦代碼運行方式符合要求
就可以複製並
粘貼到它來自的實際文件中
在本例中我希望獲得直線寬度比例
那麼如果是表視圖中的小tile視圖
就會是細邊如果是大些的視圖
相應的就是寬一些的邊
因此我會讓它關聯到背景矩形的寬度上
那麼背景矩形寬度在本例中會除以36
對圓角半徑 我也會做同樣處理
Backgroundrectangle.width除以
小一點的值 比如16
現在來看我希望它看的內容
但我仍然還有剪切的問題
我還是不能看到畫線或者是
圓角矩形的全部內容
爲此 在背景矩形
我會通過嵌入使用矩形方法
並且嵌入到直線寬度的一半
這裏的直線寬度除以2 
然後 同樣直線寬度除以2
我有個完美的圓角矩形
和我最初設想完全相同
我把這個代碼從這裏複製到擴展
代替這個文檔 不對
代替這裏的方法
用command-R再次運行app
正如我所願圓角矩形
好的 很好
這很有WWDC的感覺如果你想鼓掌那就隨時可以鼓掌
沒有人會阻止這一點
沒問題好的 謝謝大家
app看似沒問題
我也實現了圓角矩形
非常好 就是我想要的
接下來 我想做的是
讓這個app看上去像是當前的app
我不瞭解大家會怎樣但是在參加WWDC大會之後你是否曾跑到客戶那裏
說 現在iOS的新版本出來了 
比如說iOS 9出來了
我覺得 應該不再支持iOS 8
我們應該只支持新的操作系統
很好<c.blue> 你們這麼幹過嗎？
好 那你再去找下一個客戶好了
因爲大家都希望你支持這些舊版本
iOS 7 8現在可能9對大部分人而言會在秋天能用上
爲實現這一點 我們在Swift2.0推出了新的可用性功能
只要是用Swift 2.0編寫代碼
我們有很好的辦法來看所用的SDK
無論你是否真會用這種功能與否
去年在WWDC
我們推出了一些新的視圖控制器顯示API
可以在iPhone上彈出顯示
我想用元素app做的是當我在支持它的任何設備上
例如在iOS 8或者更新
版本的設備上我想用彈出顯示
但是當我在iOS 7上
我想繼續使用導航推送顯示樣式
好 怎麼做呢？
這是檢測是否支持API的經典辦法
無論是什麼類型我們都要檢測它是否對選擇器有反應
如果有反應我們就用這款選擇器
如果沒有我們就做其他的事情
在Swift 到Swift 2.0我們都是這麼做的
我們有這個井號標籤指定想要的SDK
在本例中是iOS 8.3如果是這樣
我們會用到彈出框如果不是我們用其他方法
這種樣式的好處在於你並沒有等待
運行時間來看是否實際工作正常
在編譯時間編譯器會告知你 
沒問題 這可行或不可行 
根據你的部署目標而定
如果我在iOS 7部署
它會告知無法進行彈出
但是因爲我進行了妥善保護 
提供了另外的路徑就可以編譯
在本例中 如果我沒有進行保護如果我沒有說這裏是檢測
我想要做編譯 準備部署到iOS 7
它就會說 彈出顯示控制器不可用
只能在8或者更新版本才行
然後會給我一些修復
但是我不會用更多的幻燈片
而是直接給大家看代碼
好<c.blue> 首先
在第二個視圖控制器顯示的代碼
保存在elementsviewcontroller.m.
表視圖附件的執行但是點擊了索引路徑的行
因爲我想使用可用性檢測
我只能在Swift上執行
執行而不是Objective-C我現在就來添加註釋
然後我會生成一個類擴展
更像20分鐘左右前的那個最初演示的樣子
這樣我可以擴展元素視圖控制器 並在Swift中執行部分功能
我點擊command-N 生成新文件 是Swift文件
是元素視圖控制器.Swift
然後我會在上面編寫擴展
擴展 元素視圖控制器
其中 我會用 等效的Swift函數
因此這基本上是我在Swift中
已有的相同代碼
這裏並沒有新鮮內容
就是在Swift上執行的相同內容
但是這可以讓我進行可用性檢測
這個特殊應用是針對 iOS 7.1
我想在其中用這個新的彈出顯示控制器技術 
那麼就在這一行做註釋
並加入代碼試着直接調用彈出顯示
我有些錯誤
一個錯誤是抱怨我沒有
真正滿足彈出框所需的委託協議
在旁邊可以用Swift擴展
並用它來爲額外的協議添加一致性
所以我將添加UI彈出顯示控制器委託
這就會消除這個錯誤但我仍然還有問題
就是要用iOS7.1中不存在的API
而我卻偏偏需要這樣
嗯 是在演示中需要如此
我有兩種解決辦法
現在就給大家簡單介紹一下
如果我是在運 在本例中是iOS 8.3
繼續 並作爲彈出顯示
否則 就用導航控制器
現在 如果我運行它 並點擊 
我們來看這裏
我們得到一個彈出框
已經15年了 我們仍在WWDC上見到Carbon
好
若要了解可用性檢測的更多詳情
可去看週四的講座《Swift實踐》
其中會有大篇幅的相關介紹
接下來 之前的演示是關於
應用外觀的改進和現代化處理
要知道 我們改變繪圖來取消光澤
我們現在還有彈出框等等 不勝枚舉
但是讓我們實際增添部分功能
我們要執行智能搜索
爲此 我們會來看看
Swift的過濾方法
在所有的集合中都有包括集合和數組
過濾可以用於驅動智能搜索函數其中只有滿足搜索
字符串的原子元素會在表視圖中顯示
標準設置是這個樣子我們有TableView
TableView加上視圖控制器作爲數據源
視圖控制器有內容數組
我在搜索域輸入一些東西時
就會有個委託方式在視圖控制器上叫做
searchbar:textDidChange.
我找出傳遞的字符串
那只是一個參數
我過濾內容數組
並告知TableView用過濾後的
內容數組進行更新
Searchbar:textDidChange
基本是這樣
實際上 就是這個樣子
因爲這就是我用的代碼
現在我要大家注意
標亮的部分是個閉包
我正在運行過濾器 在過濾器中
會應用數組中的每一項
數組中的項我有佔位控件
是$0我得到了它的名稱接着詢問它是否有前綴
無論搜索字符串是什麼
都會這樣運行 頂部是最初的數組
我有一個封閉的過濾器
會循環
每次都會傳遞元素
如果名稱前有字母在本例中是N
它被傳遞給返回過濾數組
如果沒有字母 那就不是
我給大家看看代碼
但是爲加快速度我已經運行過
把搜索條放在上面
但我還沒搭建好
那麼如果我試着在裏面做點什麼
都不會奏效 因爲我沒有加入委託方式
委託方式是這個
也就是說 如果搜索文本爲空 就在這裏
顯示所有原子元素
如果不是空我想做個過濾器
這部分需要完成
我們現在就動手
我準備一個過濾器
如果這是大家第一次見到閉包
不錯 歡迎閉包
我來給大家多講幾句
如果不是的話就當是複習了
當Xcode顯示這種藍色符號化背景
還都是單項可以雙擊
會展開需要填入空白部分
我會用這個閉包雙擊 會展開
我知道有原子元素數組數據類型叫原子元素
如果傳遞的參數是一個原子元素
我會明確在閉包中
所傳遞的參數是原子元素
我會給它一個本地名稱這樣原子元素有了自己的本地名稱
而數據類型是原子元素
在閉包中 我需要檢查是否要將它
包括在過濾結果中
因爲我承諾給出Boolean返回值
我來看返回值是否是原子元素
名稱有前綴 再看搜索條傳遞的搜索文本
像這樣 現在 當我運行的時候
我們會搜索所有以字母N開始的內容
就這樣 我們用Swift過濾器過濾了
但是有兩方面內容需要給大家展示
其一 有兩種方法可以來看閉包 
這裏是個擴展句法
這裏還有精簡句法
我來給大家看看精簡句法
Swift有非常強大的類型推斷系統
我們可根據上下文和所使用的數據類型
推斷出很多內容
例如 如果在閉包有個單獨行
假設它將返回一個值 
那我不必放入返回值
實際上 如果前綴返回了Boolean類型
Swift可推斷這個閉包的返回類型
就是Boolean 所以我不需要
把它放在這裏也就是說我也不必
把它放在那裏因爲原子元素
我就不必明確 原子元素需要傳遞就可以不要這部分
因爲我沒有任何參數 我不必區分代碼
和參數 那麼我不需要關鍵詞 
也就是說 可以不要這部分
節省空間 最後我得到的是這樣的東西
因爲最後的
過濾方法參數是閉包本身
我們可以把它變成結尾閉包並且可以刪掉括號
我們得到的是這個樣子
現在唯一的問題是
沒有符號聲明調用了原子元素
因爲我刪掉了
但是我可以每次傳遞給過濾閉包一個項
而且可以這樣參考那個參數
這是完全一樣的代碼如果大家懷念Perl代碼
這裏就是
現在可以檢測一下
我們放入字母N 不錯
現在有了這些元素不過它們不是在正確的方向分類
實際上 它們就沒有分類
我們快速繼續加入分類
我會把它加在現有閉包的結尾
.sort在本例中
我雙擊這個藍色的符號 讓它展開
還有很多方式可以比較字符串 
比如大小寫和區分比較本地化比較等等
但是因爲我知道某種程度上 我得到
一個原子元素 接着又得到一個原子元素
我只需要明確哪個在前 哪個在後
或是否一個在另一個之前 我可以自己
編寫閉包首先識別我會有兩個原子元素傳遞過來 
拿到第一個來查看名稱
然後是第二個
也要查看名稱
其本身不會做比較
但是在Swift中我們過載了
許多標準運算符例如大於和小於
那麼它們會在你可能不希望它們處理的類型上發揮作用 比如字符串
這是字符串比較
我再次運行
搜索字母N 現在分類妥當了
過濾和分類都在一行
我再檢查一遍
我們搜索S 
我有一些非常重要的元素
比如Swiftonium 
非常重要
好的<c.blue> 我們回來
在這部分我們通過
Swift的過濾方法執行過濾表視圖
然後用分類進行分類看到過載操作符是小於或是大於
下面的功能也是我想加入app中的最後一個功能
是可以選擇多個行 再做累計以便得到
所選元素的原子量
是這樣的
我們先從表視圖開始
頂部的導航條說選擇二或更多項
你選擇二或更多項接着頂部的導航條確定其原子量總數
爲實現這一點我從內容數組開始
這就是我有的全部原子元素
那些是在表視圖中顯示的全部
但是我只想要 選中的原子元素
爲此 我不能前往表視圖
讓詢問視圖所選項的數組
我只能通過所選項的索引路徑來找
表視圖會給我所選項的索引路徑數組
我可以詢問索引路徑 還獲得這一行
我可以將這與支持數組內容相關聯
從這裏 生成所選元素
基本上 就是這個
我們生成新數組
循環索引路徑
返回內容
爲當前的索引路徑的行找出對應的原子元素
如果你們習慣於這樣編碼
在Swift中也可以同樣
這是映射函數
重要的內容 還是用橙色表示
周圍所有的額外基礎架構
都已經刪除
接下來 一旦我有所有所選項的數組
我就想加上原子量
爲此 我會傳統地使用一個外循環
那裏 我把其變量設置爲零
接着重複所選對象並加上 
在本例中是D原子量
如果習慣用for-in循環做這類事
可以在Swift中也同樣如此
通過化簡函數 我們將初始值設爲零
接下來我們加上採用初始值的閉包也就是零值
再把它附在傳遞來的下一項後面做累加
我給大家看看代碼 不過我會把所做的
全部內容用一行代碼
進行綜述像這樣
有個圖形設計師看過演示後
曾經問過我能不能把這些放在一行中？
不 不可以
我覺得 你們看不到
我們轉到演示電腦上
現在就是所有內容的函數
首先要確保選中的是兩個以上的項
這樣大家可以看到
只要選中的項大於或等於2就要繼續執行這個代碼
然後我會用映射這樣可以獲得通過表視圖
而不是索引路徑所選定的對象
接着用化簡函數進行累加
最後通過數字格式器傳遞固定在標題部分
如果想在一行內看到同樣內容就是這樣
在我運行程序時
就會做累加並把結果放在頂部
這樣顯示映射和化簡會使與支持表視圖的項一起配合會更容易些
好 總之 
我希望大家發現使用Swift會有很多好處
甚至可以和現有的Objective-C項目配合使用
這並不難 而且還有諸多好處
大家不必把任何現有代碼都扔掉
而且會習慣使用這些現代的強大技術例如化簡和映射
和這些功能強大的結構等等 
若想了解更多詳情可以來實驗室找我們
查看文檔資料訪問開發人員論壇
給斯特凡發郵件
他喜歡收郵件
你可以告訴他大會開的非常好就行了
這麼說 我會非常感謝你希望大家喜歡這次大會