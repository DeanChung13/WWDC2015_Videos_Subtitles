高級調試和地址消毒劑
早上好
歡迎來參加《高級調試和地址消毒劑》講座
我是麥克...大家怎麼樣呢？
好嗎？準備好啦？
激動嗎？
好 現在就開始
那我先來介紹Xcode中加入的新功能
還有一些大家
可能不知道的新舊技巧和訣竅
先來說說視圖調試器
來看怎樣才能獲得更多洞察力
關於你的app UI及其用戶...
界面元素 以及它們在運行時間如何表現
我們會調試AutoLayout Constraint問題
至少對我而言我需要一些幫助
理解AutoLayout在運行時間做些什麼
接下來 我們將詳細分析用
Advanced Breakpoints調試代碼
我想給大家看看如何設置自定義操作和條件
快速分析例外情況
在一定條件下打印值
而不會因NSLogs和打印把代碼搞亂
之後 我的同事安娜會來介紹
最新最興奮的調試功能這就是我們新加入
Xcodes調試工具箱的Address Sanitizer
她會詳細介紹其工作方式
可以捕捉到哪些問題
以及今天就用它來整理代碼
爲了這兩個話題我覺得先用
演示設備給大家看看
這裏是個應用名爲Jogr
這個健身應用可以爲跑步計時
記錄跑步路線沿途會爲照片加標籤
幾年來我們都用Jogr來做示範app
今年我們添加了一些使用Swift的新功能
並轉換了Objective-C的若干類
這是個非常混合的應用
在故事板中也用了尺寸類
並完全採用了AutoLayout
因爲今年我們改變並增加了所有這些新代碼
可想而知其中會有程序錯誤
來找找看
先來點擊這裏的計時器
第一個非常明顯的問題是
計時器周圍的圓環不是很整齊
在我提供的最初設計中並不是這樣
這可能是Jogr是在iPhone5
的屏幕上運行有關的
而當初是在iPhone 6上開發的
可能是我沒有完全測試
來看佈局是否在小號的屏幕上也適用
爲了想了解到底出了什麼問題
我在下面的Debug條上
點擊了DebugViewHierarchy按鈕
現在 獲得了所有視圖的快照
並在Xcode中裝載了關於視圖
會如何互動的運行時間信息
我點擊並拖動畫布
你會看到我可以怎樣扭動場景
顯示所有的不同視圖以及它們如何在
彼此上方分層
我甚至還點擊具體視圖來選擇
我們可以在對象檢測器中看到
所有細節
現在有許多內容在繼續
有導航條和背景所有這些
可我只想關注大家在意的一點
也就是我放在中心的內容部分
只要雙擊視圖就可以做到
萬一你忘記了我給大家看看怎麼失焦
就是在畫布上雙擊即可
這裏可以繼續只關注這一點
你會注意到在這裏在Debug Navigator
UI堆棧視圖上的
所有層次都已經省略
因爲我們最近在關注UI堆棧視圖
如果我點擊修剪後的圖像
我可以用這裏的尺寸檢測器
檢測平衡和約束條件
尺寸檢測器不僅是顯示x y
和這個的矩形座標還顯示了
影響視圖運行時間的約束
約束並非是現在在發揮作用
它影響了大小 邊界或是x y
在這裏用灰色顯示
那麼這就有點奇怪
我看到高度約束是249點
這實際是這個圖像內容的實際尺寸
在運行時間卻沒有真正運行
如果我來看約束
表示父視圖應該和圖像同等大小
我們看到它在運行
看似是有其他部分在約束
父視圖的大小
我們來看視圖層次
瞭解一下父視圖發生了些什麼
這裏我們看到與其他視圖
是四分之三或.75的關係
我知道另一個視圖
包括下面的起始按鈕
在調試導航器上我們還看到
所有的同樣約束
可以像這樣 打開
我們看到約束按鈕的視圖上
有着相同的四分之三約束
所有這些看上去都很正常
上下關係都是有條理的
頂部高於底部
底部和父視圖底部相連沒別的了
爲什麼我們不能把視圖層次再提高一層
我們可以看出 這裏有些奇怪
我們有個中心 y-約束
它想把整個堆棧視圖中心
垂直於容器中
但是我們把這個自身頂部
與父視圖頂部相連在50點
這也有些奇怪
我覺得50點的約束不應該在這裏
我覺得在我開始
打開視圖到尺寸類時它可能就已經加上了
我告知IB加入所有丟掉的約束
之後我設置了垂直中心對齊
我可能是忘記刪除了
我們在故事板上做修改
來看是不是問題所在
我可以選擇堆棧視圖就在這裏
這是50點約束
我會刪掉它
重新運行
不錯！
現在圓形沒問題了
沒有缺失視圖也完全可以修改
我們再來運行計時器
好的看似有異常
我會打開Debug Navigator
查看異常的線程
但是看似不是很有用
應該是主函數出了問題
如果從控制檯來看
可以看到是拋出了部分異常
但是現在對我來說幫助不大
因爲我想停止程序
在拋出異常的時刻
對它進行調試
爲此 我可以進入Breakpoint Navigator
點擊下面的加號添加異常斷點
我接下來要配置這個斷點
來停止Objective-C異常
像這樣
我們從新運行應用
希望我們在問題發生時
能準確找到問題
非常好 但是...
如果我去看控制檯卻什麼都看不到
沒有信息描述異常是什麼
這裏有個技巧
是我從LLVM團隊的朋友那裏學來的
導航進入
Ob-C ExceptionThrow函數
在Ob-C的運行時間中
打印函數的首個參數
實際上是異常對象本身
我說 打印對象
arg1
這就是 異常信息本身
因此我會調整異常斷點
爲所出現的異常始終這麼做
這樣會很有幫助
我可以在這裏添加一個操作
輸入的內容和輸入控制檯的完全一樣
打印對象 arg1
現在如果我再次運行應用
運行計時器
現在我仍然停在
異常被拋出的準確時刻
我實際上在控制檯有異常信息本身
現在當我看着異常
被拋出的代碼行
可以看到我構建的範圍
範圍超出了邊界估計是用了
索引1開頭而不是索引0
並且在設定字體屬性時
執行了字符串的全長
我們重新運行
再看看效果
看似計時器現在工作正常
我們成功發現了兩處程序錯誤
我再看第三個
現在來看來這裏之前
我今天早上跑步的路線
看似沒問題
但如果我們返回
則有些不對勁我不是從莫斯科尼出發
跑到碼頭大街
然後跳到了水裏這是在太蠢了
我們再試一遍
這裏出現了異常
我不知道看似是數據模型出現了問題
所以我想找出放在地圖上的各點
出現覆蓋時
我們在做什麼
現在進入類是這裏
使路線出現了覆蓋
我們在這裏用了一束數據點
從字典裏拿出
生成並構造了代表我的...
跑步路線的多段線
我會設置一個斷點
來看獲得的數據值是什麼
我會打開Debug Console
來看變量視圖在下面 可以看到
我所感興趣的點
它有着這些值
我會向前推進
這很有趣但是有些麻煩
這些值看似相似
我在這裏的處理會讓進程快些
來看所有這些值
我會編輯這個斷點
打印出Struct點
實際上在變量視圖上我檢測過這裏
然後我會說評價過操作後
自動繼續
其實這不是條件
是個操作就這樣
我們繼續運行
我們可以看到所有的點都看似一樣
但是還會在不知什麼地方
會出現瞬移
但是所有的值看似合理
我不太確定問題是什麼
也許從別人那裏...
能得到更多幫助
我們回到幻燈片
總結一下看到的內容
首先在Jogr的計時器視圖
深入瞭解約束問題
我想給大家看看怎樣雙擊視圖
關注具體部件
我們檢測部分約束
發現當我們在其他屏幕尺寸上運行時
需要將之刪除
然後 我們在運行計時器時 出現異常
並使用異常斷點 來停在
出現異常的準確時刻
並打印異常信息
最後 我們可以添加打印並繼續添加了
日誌的斷點所有這些都不會因NSLogs
或打印語句搞亂代碼
現在來解決下一個謎題爲什麼今天早上的
跑步會有那麼奇怪的結果
有請安娜
謝謝 麥克
大家好 那麼回到麥克剛剛在演示中
給大家看的那條路線
在測試演示app時大家會看到
所有的路線而且包括正確路線
我們非常希望麥克剛剛沒有
找出正確的跑步路線因爲這樣的話
我們的講座就沒什麼可說的了
這種不可預見的行爲通常是內存出錯而導致
例如 分配給一個對象的內存
可能被其他對象所重寫
或者也許由於某些計算錯誤
你用了並不屬於你的內存
相信大家之前也遇過類似情況
代碼中出現隨機異常
也許在測試app的某個側面時
每次會出現這個問題
或者只是當你週五晚上
準備回家時出現這個問題！
最糟糕的用例場景
是用戶看到這些不穩定性或隨機異常
而你卻無法把它們重現眼前
內存出錯是出了名的很難
一致性復現 那麼也就很難
發現這一異常的根本原因
那該怎麼辦呢？
最好的辦法就是儘量減少面對內存出錯的情況
要避免內存操控
例如使用Swift這類語言勾選並
自動參考計數這纔會長久
即便內存出錯在技術上仍然可能
由於編碼而產生這類問題則較爲不可能
另一方面如果代碼會直接操控內存
通過調用動態分配[unintelligible]運算
或者代碼可以與C和C++ API可以互操作
你所在的風險組會非常需要幫助
Address Sanitizer是基於C語言的LLVM工具
這與Guard Malloc起到相同的作用
因爲它可以在運行時間發現內存錯誤
並且較其他工具有更多好處
它的運行時間開銷會少的很多
還會產生綜合詳細的診斷分析
可以直接整合到Xcode UI
還有一點很重要只有這種工具
可以在iOS設備上運行
這些是Address Sanitizer可以捕捉到的常見錯誤清單
例如 它可以很好地捕捉到緩衝區溢出
這是個很常見的錯誤
因爲與安全性攻擊的關聯而臭名昭著
正如大家所見它發現了部分工具
通過 Valgrind 和Guard Malloc
發現的錯誤
但是它也發現了新種類的程序錯誤
是其他工具沒有注意的
我們回到演示
來看怎樣才能把這些用於項目中
我接着麥克講到的內容繼續
來看我們看看是否Address Sanitizer
可以幫我們找出路線問題
爲了啓動Address Sanitizer
進入Edit Scheme
進入Diagnostics選項卡
勾選 EnableAddress Sanitizer
與其他內存管理工具不同
Address Sanitizer需要重新編譯
選中複選框後Xcode就會知道
要打開 AddressSanitizer 重建應用
它會啓動特殊模式
允許AddressSanitizer
在運行時間更多地幹預進程
我們繼續重建並重新運行app
來看像剛纔的路線會怎樣
現在Address Sanitizer發現了問題
它的診斷直接整合到了
Xcode Debugger UI
這與出現異常時情況非常相似
但是與使用Sec的情況不同
這次可以對情況有更好的診斷
這裏它告訴我們查出堆緩衝區溢出
還可以看到堆棧軌跡
在這裏出現了內存錯誤
如大家所見 我們稱之爲Poly Line With Points
和Map Kit的常用方法
我們在緩衝區做測試通過緩衝區的長度
來進行計算點的數量
再用每個點的大小來相除
看上去可以
隨着應用在 AddressSanitizer 中執行
它會收集過程中
堆對象的重要信息
例如 分配堆分配
和取消分配事件
當發現內存出錯它會使用啓發法
來關聯錯誤地址到有效的堆對象
在內存項下信息都呈現在這裏
這裏它告訴我們錯誤地址是在
在2240字節堆區域後的一個字節
還告訴我們堆區域所分配的位置
即使這不是激活線程
而是在分配事件發生時進程執行的歷史快照
我們可以把流
視作激活線程
它會把我們帶到內存分配的點的位置
好的我們來看緩衝區的大小
是用每個點的大小乘以點的數量得出
我們使用MK Map Point
作爲點的代表
這是帶雙精度的Struct
那麼問題是什麼？
我們回到Use站點
你傳遞到這裏的類型是不同的
我們傳遞了MK Map Point星級
但是我們知道剛分配了Struct的緩衝區
而不是指針的緩衝區
因爲每個指針的大小小於
結構體的大小包括兩個雙精度
這裏獲得的計數要大於緩衝區
包括的元素數量
這就會解釋爲什麼在地圖上
我們會有那些額外的點
爲解決問題我們需要刪掉星級
如大家所見
這是個人們非常容易犯的錯誤
只看代碼是非常難發現的
在本例中這個信息已經
足以診斷和解決問題
不過 如果覺得想更多地看看這個報告
可以前往Memory View
來看哪個內存是有效的
哪個內存是被視爲無效
從Address Sanitizer的視角來看
前往Memory View可以點擊這個地址
這裏可以看到所有變灰的內容都是無效內存
所有黑色內存都被視爲有效
我們返回並重新運行app
來看刪掉星號是否可以解決問題
我來繼續返回Route視圖
啊 這就是麥克今天早上的跑步路線
還有早上Bash之後的部分
我很受感動
我們返回打開幻燈片
大家已經看到打開Address Sanitizer很容易
進入Scheme Editor打開Diagnostics選項卡
勾選EnableAddress Sanitizer複選框
接着可以構建並運行自己的項目
同樣正如大家在演示app所見
使用Address Sanitizer的開銷幾乎很難注意到
較低的運行時間開銷允許你使用Address Sanitizer
不僅是在調試部分內存出錯問題的時候
而且是在進行UI驅動的測試
這裏要手動測試app的不同方面
再進一步 我們推薦
在連續整合過程中使用Address Sanitizer
因爲這是運行時間程序錯誤發現工具
它僅會捕捉已執行代碼中的程序錯誤
那麼應該提供儘可能多的覆蓋
以實現最好結果
在Xcode或Xcode Server的任務中啓動
Address Sanitizer進入Edit Scheme選擇Task
然後再次進入Diagnostics選項卡
勾選EnableAddress Sanitizer複選框
構建並測試你的app
還可以用命令行啓動
通過向Xcode Build傳遞額外的參數
我們建議在Debug構建
使用AddressSanitizer
並將編譯器優化關閉
但是它也得到Fast優化水平的支持
是與01編輯器旗標相對應
需要牢記一點
當在這兩個優化水平之間進行決定時
如果有任何編譯優化是啓動狀態
調試體驗就不會十分流暢
現在我們進入講座的最激動環節
我會告訴大家一個
驅動這個工具的很酷的技術
傳統而言Xcode使用clang編譯器來
編譯源代碼可以生成可執行的二進制代碼
爲使用Address Sanitizer
Xcode將特殊的旗標傳遞給clang
它會生成工具二進制代碼
其中包括更多的內存檢測
在運行時間 這個二進制代碼與asan運行時間dylib連接
其中包括更多檢測
而且dylib是工具所要求的
但是這些內存檢測如何發揮作用？
Address Sanitizer檢測進程中的所有位置
如果這是進程內存
Address Sanitizer會成爲所謂的影子內存
可以跟蹤真實內存中的每個字節
它有着字節是否爲可訪問地址的相關信息
無效內存的字節就是紅區
或者說內存中毒
當使用Address Sanitizer編譯程序時
它會影響每個內存訪問
並在前綴加上檢測
如果內存中毒
Address Sanitizer就會跟蹤程序
並生成診斷報告
否則 它會允許你繼續
我們再來仔細看看
假設p爲指針
然後IsPoisoned函數會檢測影子內存中的相關字節
在本例中 內存是有效的
因此程序可以編寫那個內存位置
不過 如果它並未指向有效內存
條件將會爲真
程序將卡在無效內存
就是訪問可能要發生的地方
這就是AddressSanitizer生成報告的方法
並將這個問題報告給用戶
查找影子內存需要非常快才行
爲實現這點我們保留了查找表
在影子內存中每8個字節就會有1個字節被跟蹤
這是個很大的查找表
我們並未真正分配 而是在
進程啓動的時候保存在需要的時候使用
這樣我們就可以查找地址
通過將原始指針的值除以8
再添加常數補償
就是在內存影子的位置上添加
即便計算地址的字節爲非零
我們知道內存中毒了
現在 我們聊聊堆的內容
捕獲溢出和堆中的其他程序錯誤
Address Sanitizer會提供自定義分配器
以替代默認的Malloc執行
默認分配器可以用不同方式組織對象
例如它可以逐個排布對象
這對於優化內存消耗十分有利
但是這對捕捉程序錯誤不太好
因爲一個對象的溢出會落到
另一個對象上
因此無法與有效的內存訪問區別開來
爲解決這個問題ASan的分配器
會讓對象彼此間距更大
這些對象之間未用的內存
在影子部分會標記爲中毒
當對象被取消分配
我們將對象在影子部分標記爲中毒
總之 自定Malloc執行在有效的分配周圍
插入中毒的紅區
以捕捉堆下溢和溢出
這會延遲用戶釋放的內存
使得AddressSanitizer更有效地捕捉
用戶釋放的和雙重釋放的錯誤
它還會爲分配和解除分配蒐集Sect痕跡
允許它提供這些綜合詳細的診斷
這些我們在演示中都見過
能立即明白問題在何處
和花費大量時間去調試
再找出具體發生了什麼
這二者是完全不同的效果
現在 我們來談談堆棧
與之相似 對於堆內存而言
紅區是放在獨立的堆棧變量之間
假設我們有個數組和整數作爲本地變量
那麼在Address Sanitizer編譯時
這些變量之間會插入額外的紅區
這樣我們可以發現堆棧變量的任何溢出
在運行時間進入函數時
堆棧紅區會中毒在運行時間
退出函數時它們會解毒
處理全局變量也非常相似
在編譯期間檢測全局變量
額外的紅區會插入它們四周
現在堆棧和全局編譯器檢測
是Address Sanitizer非常有用的功能
這會允許它發現其他工具
無法捕獲的程序錯誤
Address Sanitizer還能找到其他類型的獨特程序錯誤
在座的Avid C++開發人員會對此特別感興趣
我們有個C++容器矢量
即便所有的內存都給了v.begin
v.begin加容量都已經分配
訪問內存過去v.end是個錯誤
檢測Leap C++向Address Sanitizer
提供更多信息這樣就會像這裏一樣
發現錯誤
正如我們所見我們談到的所有檢測
都需要編譯器檢測
但是我們知道部分錯誤會出現在
即便代碼沒有重新編譯的時候也會觸發
例如我們調用內存拷貝函數的時候
Address Sanitizer會使用一個技術名爲BYOD函數
插補用運行時間的自身版本
來替代數十種標準庫函數
因爲這是一個運行技術
這些檢測甚至會觸發
未經重新編譯的代碼
這裏是個內存拷貝包裹示例
正如你所預期在轉發原始內存拷貝執行前
首先會檢查源和目的地緩衝區是否有效
所有這些額外檢查意味着會有運行時間開銷
而且你可能會考慮這是什麼
這些細節很大程度上取決於各自的程序
Address Sanitizer通常會導致CPU減速2倍左右
但是我們看到在一些邊緣情況下曾高達5倍
而內存開銷從2倍到3倍
需要注意的一點是
這些開銷要比
可以找到相似問題的其他工具要小很多
通過運行時間技術編譯編譯器檢測
是令Address Sanitizer更爲有效和
可擴展的關鍵所在
例如 我們在Address Sanitizer運行並測試Safari
這是個大app
這是Xcode 7新增的Address Sanitizer
謝謝
我們調整一下關注點來仔細看看
我們平臺上可用的其他內存管理工具
它們可以做什麼你何時應該使用
那我們先從Guard Malloc開始
像Address Sanitizer一樣它也可以發現同樣問題
使用Guard Malloc的主要優勢是
它不需要進行重新編譯
另一方面它還有其他侷限性
Guard Malloc不能在iOS設備上運行
而且不能發現Address Sanitizer
發現的所有問題
例如 因爲它使用保護頁面
它將無法捕捉到所有的單字節緩衝區溢出
這是個常見錯誤
再選擇兩者間該使用哪個時要考慮其他的權衡因素
可供大家考慮的還有NSZombie
它善於捕捉Objective-C對象過度釋放
可以通過發送信息時困住的殭屍對象
替代取消分配對象以發揮作用
這個基本功能可以從Xcode中的
相同Diagnostics選項卡來啓動
但是 如果希望獲得該功能的全部效用
還是要使用Zombies Instrument
Malloc Scribble會幫助調查未初始化的內存問題
它可以通過預設常數填入分配和
取消分配的內存更能預見這些錯誤的出現
最後泄露Instrument會幫助你
發現保留週期以及導致更高內存
消耗的放棄內存
總之我們見識了三種不同的技術
可以幫助我們更深入地理解程序
首先 使用ViewDebugger來發現
並解決佈局的約束問題
第二 設置斷點操作
以便自動評估和打印任何LLVD表達式
並使用異常斷點
讓程序調試恰好停在異常出現的位置
最後 第三
使用Address Sanitizer整理應用
清除那些難以捉摸的內存出錯問題
關於今天談到的問題還有其他的資源
幫助大家瞭解更多內容
本週早些時候有幾次講座介紹了
LLDB連續整合和測試問題
大會結束後大家就可以立即觀看
非常感謝祝大家今天過得愉快