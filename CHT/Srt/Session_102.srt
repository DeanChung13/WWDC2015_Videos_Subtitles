00:00:16.633 --> 00:00:17.733 
女士們先生們

00:00:18.033 --> 00:00:23.233 
歡迎OS X系統平臺副總裁
安卓思·溫克爾

00:00:31.433 --> 00:00:32.567 
安卓思·溫克爾:
下午好

00:00:33.033 --> 00:00:35.433 
歡迎來到2015
全球開發者大會

00:00:37.167 --> 00:00:39.700 
作爲蘋果開發者
今年又是一個欣喜之年

00:00:39.767 --> 00:00:42.367 
加上watchOS
SDK的開發數據包

00:00:42.433 --> 00:00:44.867 
現在蘋果產品有三大主要平臺

00:00:46.200 --> 00:00:47.800 
我們開發這些平臺的方法是

00:00:47.867 --> 00:00:51.067 
將好產品與獨特的用戶體驗
結合在一起

00:00:51.567 --> 00:00:54.533 
同時使用與蘋果系統一樣的
優先科技

00:00:54.600 --> 00:00:56.733 
程序語言設計和編程概念

00:00:57.067 --> 00:00:59.900 
以便這些平臺
之間能夠輕易地代碼共享

00:01:00.267 --> 00:01:02.933 
並使平臺之間的應用實現協作

00:01:03.000 --> 00:01:05.633 
但我們也保持
每一個平臺的特色

00:01:07.600 --> 00:01:09.367 
這些平臺的數據開發包將會在

00:01:09.433 --> 00:01:12.967 
今年稍後安裝到
Xcode IDE新版本

00:01:13.200 --> 00:01:14.300 
形成版本7

00:01:15.333 --> 00:01:17.233 
它包含了很多新的特色

00:01:17.300 --> 00:01:19.600 
在這裏我只想
強調其中一個

00:01:20.267 --> 00:01:23.067 
那就是
我們允許用戶AppleID

00:01:23.133 --> 00:01:24.200 
下載Xcode

00:01:24.267 --> 00:01:26.400 
並在他們的設備上運行應用

00:01:36.967 --> 00:01:38.733 
如果你們真的想讓
成爲開發者的夢想

00:01:38.800 --> 00:01:41.733 
更容易
尤其對年輕的學生來說

00:01:42.033 --> 00:01:44.500 
那麼 需要三個平臺的協作

00:01:46.267 --> 00:01:49.000 
如果你習慣使用某個應用
並想進行拓展

00:01:49.067 --> 00:01:50.600 
我們爲你準備了
另外一個好消息

00:01:51.067 --> 00:01:54.300 
現在 一項單向支付的
開發者計劃會員身份

00:01:54.367 --> 00:01:58.200 
可以讓你展開蘋果產品中
所有的應用

00:01:58.267 --> 00:01:59.600 
你不需要註冊

00:01:59.667 --> 00:02:01.100 
且不需要購買支付會員資格

00:02:09.733 --> 00:02:11.600 
當然
使用一次性支付會員身份的話

00:02:11.667 --> 00:02:14.200 
你還可以得到其它好處

00:02:14.267 --> 00:02:16.033 
比如獲取預發行版本微軟

00:02:16.400 --> 00:02:19.267 
接入強大的數據庫 報表工具

00:02:21.133 --> 00:02:22.967 
現在
我想說說軟件方面的更新

00:02:25.700 --> 00:02:29.600 
iOS創新曲線一直是
整個行業的驕傲

00:02:29.833 --> 00:02:31.767 
對美國開發者而言
是巨大的優勢

00:02:32.233 --> 00:02:34.800 
因爲你不需要處理來自

00:02:34.867 --> 00:02:36.367 
其它應用生態系
統的相同數據碎片

00:02:38.200 --> 00:02:40.267 
但是在iOS8中
我們發現

00:02:40.333 --> 00:02:42.567 
大量使用者在升級方面有困難

00:02:42.633 --> 00:02:43.600 
因爲安裝程序

00:02:43.667 --> 00:02:45.733 
需要很大的可用空間

00:02:46.467 --> 00:02:47.300 
我們已經採取措施

00:02:47.367 --> 00:02:49.600 
在iOS8更新中
減少了佔用空間

00:02:50.200 --> 00:02:52.200 
在iOS9中
我們會繼續降低該數值

00:02:52.433 --> 00:02:54.067 
正如你們今早
在主旨發言中聽到的

00:02:54.433 --> 00:02:57.533 
iOS9只需要
1.3G的可用空間

00:02:58.967 --> 00:03:02.200 
我們也改變了
軟件升級的提醒方式

00:03:02.600 --> 00:03:05.633 
用戶可以選擇立即安裝
或者在不方便的時候

00:03:05.700 --> 00:03:08.300 
選擇稍後安裝

00:03:08.367 --> 00:03:11.433 
所以 我們認爲

00:03:11.500 --> 00:03:14.967 
這將確保用戶快速更新iOS

00:03:15.133 --> 00:03:20.467 
使用最新版本的iOS

00:03:20.667 --> 00:03:22.567 
現在 我們還在研究一些技術

00:03:22.633 --> 00:03:25.033 
我們稱爲應用瘦身

00:03:25.100 --> 00:03:26.933 
讓用戶獲得更多可用空間

00:03:28.000 --> 00:03:31.167 
應用瘦身包括三項技術
應用切割

00:03:31.500 --> 00:03:33.700 
需加載資源和位碼

00:03:34.433 --> 00:03:35.900 
我們一個一個地看一下

00:03:36.000 --> 00:03:36.900 
先來看應用切割

00:03:39.600 --> 00:03:41.800 
爲iOS系統開發應用

00:03:41.867 --> 00:03:43.500 
其實就是開發
同一款應用的不同變體

00:03:43.567 --> 00:03:45.167 
然後將它們包裝在一起

00:03:45.233 --> 00:03:46.433 
放在一個應用程序包裏

00:03:47.100 --> 00:03:49.067 
所以 如果你打開一個應用
你會發現

00:03:49.133 --> 00:03:52.767 
有很多相似的其他組件
佔用設備的有限空間

00:03:53.867 --> 00:03:57.100 
這是32位和64位
的處理器結構

00:03:58.033 --> 00:04:00.400 
不同屏幕尺寸和分辨率的圖像

00:04:01.500 --> 00:04:03.633 
以及工具 比如着色器

00:04:03.700 --> 00:04:06.267 
用不同語言編寫
而成的圖形編輯器

00:04:07.567 --> 00:04:09.867 
但是 要在特定的
設備中運行一款應用

00:04:10.300 --> 00:04:12.633 
你只需要其中的一個即可

00:04:13.933 --> 00:04:15.967 
所以爲了充分利用儲存空間

00:04:16.033 --> 00:04:18.466 
我們將刪除設備中

00:04:18.533 --> 00:04:19.632 
所有的應用

00:04:19.700 --> 00:04:21.166 
所不需要的所有組件

00:04:22.733 --> 00:04:26.633 
所以你可以繼續開發
並且使用你已習慣的應用

00:04:27.400 --> 00:04:31.967 
但是商店只會安裝時傳輸
經過瘦身應用給到用戶

00:04:41.667 --> 00:04:44.033 
這就是大大縮減了空間

00:04:44.967 --> 00:04:48.000 
正如你們在表格中看到的
一般的應用可以節省

00:04:48.067 --> 00:04:49.867 
20%到40%的空間

00:04:51.100 --> 00:04:53.933 
應用瘦身的作用
在一些應用中

00:04:54.000 --> 00:04:56.133 
體現的尤其明顯
比如在安裝單元應用中時

00:04:56.200 --> 00:04:58.967 
經常突然出現遊戲下載限制

00:04:59.600 --> 00:05:02.867 
瘦身版本可以更加容易地
在限制範圍內安裝完成

00:05:03.367 --> 00:05:05.967 
所以你可以將更多的特定資源

00:05:06.033 --> 00:05:07.633 
放到應用中並且提供給用戶

00:05:07.700 --> 00:05:08.967 
提供更加完美的體驗

00:05:10.567 --> 00:05:13.767 
最棒的一點是
在使用Xcode的資產目錄

00:05:14.000 --> 00:05:15.967 
你不需要
改變程序中的任何東西

00:05:16.033 --> 00:05:20.033 
在你下次登陸的時候
後臺將會自動爲你備份更新等

00:05:21.033 --> 00:05:23.200 
如果你在使用
其他自定義數據格式

00:05:23.500 --> 00:05:26.967 
我們要求你通過
創建資產目錄以分成程序片

00:05:27.433 --> 00:05:30.333 
並且使用我們爲你的設備

00:05:30.400 --> 00:05:32.700 
添加的其所需的新的資產目錄

00:05:36.367 --> 00:05:39.333 
一些應用可以通過使用
更多資源得到好處

00:05:39.467 --> 00:05:41.567 
因爲不需要
同時使用各種程序片

00:05:42.200 --> 00:05:44.167 
在這種情況下
我們推薦

00:05:44.333 --> 00:05:46.900 
按需資源 簡稱ODR

00:05:48.467 --> 00:05:51.067 
使用ODR按需資源時
儲備會將你的資源分爲

00:05:51.133 --> 00:05:52.933 
恰當程序片

00:05:53.000 --> 00:05:54.867 
然後將它們
放置在蘋果服務器中

00:05:55.733 --> 00:05:56.800 
但是下載過程會被延遲

00:05:56.867 --> 00:05:58.833 
直到你的應用明確需要他們

00:05:59.167 --> 00:06:01.767 
然後iOS將釋放空間

00:06:01.833 --> 00:06:03.800 
當你的應用不再需要資源時

00:06:05.733 --> 00:06:09.400 
按需資源的
典型類型是關卡遊戲

00:06:09.567 --> 00:06:12.433 
但是很多其它應用
也可以在其中得到益處

00:06:12.833 --> 00:06:15.667 
比如 你可能想要下載教程

00:06:16.033 --> 00:06:17.333 
到ODR資產中

00:06:17.467 --> 00:06:20.900 
當用戶真正想看
的時候纔會開始下載

00:06:23.567 --> 00:06:26.100 
使用ODR
需要你懂得規劃

00:06:26.400 --> 00:06:27.500 
但重要的是

00:06:27.567 --> 00:06:31.600 
你可以在不同時間
使用多於4G的資源

00:06:33.867 --> 00:06:35.833 
因此 應用切割和需加載資源

00:06:36.167 --> 00:06:38.700 
將會極大地幫助應用節省空間

00:06:40.167 --> 00:06:41.833 
我們還在研究一項新技術

00:06:41.900 --> 00:06:43.200 
它是更有遠見的技術

00:06:43.433 --> 00:06:46.333 
我們現在將位碼引入到
AppStore提交過程中

00:06:47.733 --> 00:06:51.100 
位碼是二進制中的
一種框架系統中間代碼

00:06:51.400 --> 00:06:54.633 
它可以讓商店先
優化你的設備應用

00:06:54.700 --> 00:06:58.133 
然後再傳輸給用戶

00:06:59.200 --> 00:07:01.900 
你在Xcode中
正常開發和調試應用

00:07:02.533 --> 00:07:03.867 
但是商店將會進入一種狀態

00:07:04.733 --> 00:07:08.833 
不斷運行
我們更新的編譯器優化

00:07:09.333 --> 00:07:11.900 
這樣你的應用能夠在
所有的設備中運行順暢

00:07:13.200 --> 00:07:14.467 
應用將不斷更新

00:07:15.300 --> 00:07:18.633 
因爲App Store
會不斷讓你的應用

00:07:19.100 --> 00:07:22.833 
獲得也許會加入未來
新處理器的運算優勢

00:07:23.300 --> 00:07:26.000 
所有這一切你都不需要
向AppStore重新提交

00:07:35.233 --> 00:07:38.767 
所以位碼的形成可以
通過Xcode進行設置

00:07:39.233 --> 00:07:42.667 
從一開始這便強制對
所有watchOS系統執行

00:07:43.067 --> 00:07:44.967 
對與iOS系統來說
現在屬於可選項

00:07:45.767 --> 00:07:47.633 
儘管我們認爲優勢很好

00:07:47.867 --> 00:07:50.500 
因此我們準備默認
對所有項目採用該服務

00:07:52.367 --> 00:07:53.533 
這就是應用瘦身

00:07:54.067 --> 00:07:57.233 
它包括了應用切割
按需資源以及位碼

00:07:57.633 --> 00:07:59.333 
這些將會極大地優化應用

00:08:00.733 --> 00:08:02.200 
尤其是儲存空間方面

00:08:03.200 --> 00:08:04.567 
現在 我們來看一下

00:08:04.767 --> 00:08:06.200 
應用中的二進制

00:08:06.267 --> 00:08:10.333 
AppStore目前要求你
應用使用32位和64位版本

00:08:11.500 --> 00:08:13.267 
在過去的幾年中
我們見證了

00:08:13.333 --> 00:08:16.567 
我們系統設備
在處理器能力上的發展

00:08:17.167 --> 00:08:20.000 
我們的中央處理器
和圖形處理器

00:08:20.567 --> 00:08:23.433 
以及引入
64位處理器體系結構

00:08:23.500 --> 00:08:24.600 
之後的所有設備

00:08:25.433 --> 00:08:28.300 
所以該應用目錄

00:08:28.733 --> 00:08:30.767 
僅僅適用64位處理器

00:08:32.033 --> 00:08:33.366 
和64位體系結構

00:08:33.467 --> 00:08:37.232 
因此用戶
只可以提交64位應用

00:08:37.732 --> 00:08:39.799 
這將從今年稍晚
系統9開始使用之後

00:08:46.033 --> 00:08:48.333 
接着我們來說watchOS
軟件開發工具包

00:08:48.400 --> 00:08:50.133 
爲了解說 我想把舞臺交給

00:08:50.200 --> 00:08:51.800 
我的同事：
易麗扎·布洛克

00:09:01.500 --> 00:09:02.767 
易麗扎·布洛克
謝謝 安卓思

00:09:04.833 --> 00:09:07.700 
我們很高興
Watch系統在研發者社區

00:09:07.767 --> 00:09:09.000 
得到了認可

00:09:11.000 --> 00:09:12.467 
在蘋果商店中很早就已經有

00:09:12.533 --> 00:09:15.133 
上千種手錶的應用

00:09:15.667 --> 00:09:17.567 
今天 我很高興地
告訴大家

00:09:17.900 --> 00:09:22.267 
更多關於WatchOS 2
軟件開發工具包的一些新特點

00:09:26.767 --> 00:09:30.633 
首先我們來討論一下
watchOS現有構架

00:09:32.000 --> 00:09:34.733 
應用有個用戶界面
你可以將它作爲

00:09:34.800 --> 00:09:37.333 
一個故事版
這會被安裝在手錶中

00:09:38.833 --> 00:09:42.533 
點擊應用程序擴展
來打開用戶界面

00:09:42.833 --> 00:09:44.167 
它在手機上運行

00:09:47.633 --> 00:09:52.467 
在watchOS2中我們
在結構上做了一個重大改變

00:09:53.667 --> 00:09:56.500 
用戶界面依舊一樣
應用擴展將

00:09:56.567 --> 00:09:58.333 
在手錶中運行

00:09:58.700 --> 00:10:00.367 
這產生了很多益處

00:10:03.233 --> 00:10:05.900 
因爲這與手錶應用
相互作用

00:10:05.967 --> 00:10:08.833 
不再需要綁定在手機中
使用應用的用戶

00:10:10.333 --> 00:10:15.367 
用戶會在速度和應用反應上
感受到實質性的改進

00:10:16.500 --> 00:10:18.133 
當然 因爲同樣的原因

00:10:18.400 --> 00:10:22.033 
你的手錶應用
也可以在手機不在的時候運行

00:10:23.867 --> 00:10:26.333 
由此應用擴展
直接在手錶運行

00:10:26.600 --> 00:10:28.367 
它直接連接手錶硬件

00:10:28.700 --> 00:10:30.600 
這就產生了無數可能性

00:10:36.367 --> 00:10:40.167 
現在
你編寫手錶應用時

00:10:40.667 --> 00:10:42.200 
你會用什麼程序設計語言？

00:10:43.533 --> 00:10:46.133 
好消息是和其他很多框架一樣

00:10:46.467 --> 00:10:50.133 
和你已經非常熟悉
的iOS開發框架一樣

00:10:54.867 --> 00:10:56.433 
還有另外一個重點

00:10:58.567 --> 00:11:02.700 
手錶的連接框架可以使你
與手機應用對接

00:11:02.767 --> 00:11:04.767 
當然了
現在正在其他設備中運行

00:11:08.900 --> 00:11:11.433 
另外 你的應用擴展可以直接

00:11:11.500 --> 00:11:14.733 
與使用網絡接口語言程序的
網絡服務對接

00:11:16.400 --> 00:11:21.133 
即使你的手機不在範圍內
這種交接也可以進行

00:11:34.033 --> 00:11:38.000 
在當前watchOS應用中
有三種方法可以查看數據

00:11:38.200 --> 00:11:42.233 
快捷視圖 通知以及應用本身

00:11:43.700 --> 00:11:44.733 
但是 這樣會不會很棒

00:11:45.433 --> 00:11:47.533 
假設你只要擡起手腕
甚至不需要觸碰屏幕

00:11:47.600 --> 00:11:50.767 
就可以看到你的應用目錄

00:11:51.967 --> 00:11:54.100 
在watchOS 2中
這有可能實現

00:11:54.200 --> 00:11:57.167 
因爲現在你可以
在手錶界面創建一個程序

00:12:00.967 --> 00:12:04.500 
我們爲手錶設計了
簡短對接

00:12:04.767 --> 00:12:06.900 
並且以最快的方式
看到你的目錄

00:12:06.967 --> 00:12:09.867 
那就是通過程序
快捷視圖以及通知

00:12:10.433 --> 00:12:11.933 
所以 讓我們進一步瞭解一下

00:12:18.600 --> 00:12:19.767 
不要理會這些名字

00:12:19.833 --> 00:12:21.733 
程序其實很簡單

00:12:22.433 --> 00:12:24.400 
它們信息片段

00:12:24.467 --> 00:12:26.467 
出現在你手錶界面上而已

00:12:28.400 --> 00:12:31.667 
因此 如果我們打開
手錶界面並去掉時間

00:12:32.000 --> 00:12:33.833 
就只剩一個程序

00:12:35.367 --> 00:12:38.167 
現在 你在這裏看到的
是OS系統的內部情況

00:12:39.367 --> 00:12:40.833 
現在你可以自行創建了

00:12:43.433 --> 00:12:46.300 
現在 你可能還不太瞭解

00:12:46.367 --> 00:12:49.633 
比如
舊金山足球俱落部正在舉行

00:12:49.700 --> 00:12:51.033 
2015年錦標賽

00:12:52.933 --> 00:12:55.467 
所以 我們可以創建一個程序

00:12:55.533 --> 00:12:59.433 
來模塊化提醒我們
接下來是進行哪場比賽

00:13:03.233 --> 00:13:05.167 
如果我安裝到我的手錶上

00:13:05.933 --> 00:13:09.400 
每次擡起手腕我都會看到

00:13:10.000 --> 00:13:13.300 
這很好
但要做到一個好的體驗

00:13:13.867 --> 00:13:16.933 
很重要的是
隨着時間變化以及程序所需

00:13:17.000 --> 00:13:19.133 
程序需要作出相應變化

00:13:19.700 --> 00:13:22.900 
一打開屏幕這些就會出現

00:13:25.200 --> 00:13:26.467 
爲了達到這個效果

00:13:26.967 --> 00:13:30.833 
我們爲你的程序
以時間線的方式收集數據

00:13:34.733 --> 00:13:37.633 
那樣 當我那天看看我的手錶

00:13:38.033 --> 00:13:40.400 
程序就會提示信息

00:13:40.467 --> 00:13:42.467 
告訴我此時此刻的信息

00:13:49.000 --> 00:13:51.567 
所以在日程中
創建一個時間線

00:13:51.800 --> 00:13:54.500 
來提示足球比賽非常簡單

00:13:54.967 --> 00:13:56.900 
一方面 我製作一個日程

00:13:57.567 --> 00:14:00.433 
另一方面 這不太可能改變

00:14:01.033 --> 00:14:03.533 
但是 這可能不是
你創建程序的理由

00:14:05.767 --> 00:14:08.500 
世界上事物在變化你可能需要

00:14:08.567 --> 00:14:10.400 
隨時更新你的時間表

00:14:11.600 --> 00:14:13.633 
我們爲此
提供了幾種方法

00:14:14.667 --> 00:14:16.400 
第一種是計劃更新

00:14:20.767 --> 00:14:21.967 
計劃更新

00:14:23.367 --> 00:14:25.567 
對程序而言非常完美
它的數據變化

00:14:25.633 --> 00:14:29.600 
會根據預測而變化
像天氣預報一樣

00:14:30.933 --> 00:14:33.267 
如果你寫了天氣預報的程序

00:14:33.667 --> 00:14:35.533 
那麼服務器每小時

00:14:35.600 --> 00:14:38.633 
都會提供更加準確的天氣數據

00:14:39.433 --> 00:14:41.933 
所以你下載時間線時
你可以告訴我們

00:14:42.000 --> 00:14:44.567 
你下一次更新數據的準確時間

00:14:46.467 --> 00:14:48.300 
那麼應用將在後臺

00:14:48.367 --> 00:14:49.300 
保持運行

00:14:49.533 --> 00:14:52.667 
你可以點擊服務器
更新新的天氣數據

00:14:53.133 --> 00:14:54.433 
重新下載時間線

00:14:59.000 --> 00:15:01.067 
但是在預計的時間內

00:15:01.133 --> 00:15:02.333 
並非所有的數據都可以更新

00:15:03.300 --> 00:15:06.300 
假如我想要在我的足球程序中

00:15:07.200 --> 00:15:08.267 
加入直播得分

00:15:09.067 --> 00:15:10.567 
我要是每個小時
或者每十五分鐘

00:15:10.633 --> 00:15:14.333 
都點擊服務器以獲得目前得分

00:15:14.733 --> 00:15:17.433 
這麼做不方便
因爲每一次進球

00:15:17.667 --> 00:15:20.467 
都需要立即在我的程序中更新

00:15:21.733 --> 00:15:24.967 
爲了解決這種麻煩
接下來介紹一種

00:15:25.033 --> 00:15:27.200 
新的高優先級的推送通知

00:15:30.033 --> 00:15:33.067 
如果你爲程
提供所需要的數據

00:15:33.333 --> 00:15:36.100 
你可以發送
推送通知到你的手機

00:15:36.167 --> 00:15:38.233 
它將會馬上被傳輸

00:15:38.300 --> 00:15:39.667 
到你手錶上的應用擴展中

00:15:45.833 --> 00:15:48.433 
所以要確定的是

00:15:48.500 --> 00:15:50.367 
程序目錄總是最新的
因此時間線非常重要

00:15:50.933 --> 00:15:54.100 
而且
這樣做還有其他重要目的

00:15:54.467 --> 00:15:56.100 
如果你看到了今早的主旨發言

00:15:57.500 --> 00:16:00.333 
你會聽到
我們在watchOS2中

00:16:00.400 --> 00:16:03.300 
介紹的時空之旅
它讓你回到數碼皇冠時代

00:16:03.500 --> 00:16:05.333 
可以回顧過去 展望未來

00:16:05.400 --> 00:16:07.367 
讓你看到在一天不同時刻

00:16:07.433 --> 00:16:08.533 
你的程序將會顯示什麼

00:16:09.700 --> 00:16:11.133 
比如 這裏

00:16:11.500 --> 00:16:14.500 
看上去
海洋諾伊谷遊戲已經結束

00:16:14.667 --> 00:16:17.467 
而我錯過了
因爲我站在臺上談論蘋果手錶

00:16:18.400 --> 00:16:21.900 
我可以通過時空之旅
回到當時 看看發生了什麼

00:16:30.167 --> 00:16:32.667 
看起來好像
諾伊谷好像爲我暫停了一樣

00:16:32.733 --> 00:16:34.167 
真是激動人心

00:16:36.100 --> 00:16:38.133 
這就是程序

00:16:38.200 --> 00:16:41.033 
方便進行快速查看重要數據

00:16:41.733 --> 00:16:42.633 
小部分數據

00:16:43.533 --> 00:16:45.467 
但是如果你想要
看到更多信息怎麼辦

00:16:46.233 --> 00:16:47.667 
這時候你就可能需要快捷視圖

00:16:52.000 --> 00:16:54.767 
你可以向上移動錶盤表面
來獲得快捷視圖

00:16:56.967 --> 00:16:58.833 
快捷視圖提供了一個機會

00:16:58.900 --> 00:17:01.533 
讓整個屏幕充滿用戶數據

00:17:01.967 --> 00:17:04.599 
比如 我的足球俱樂部
快捷視圖告訴我

00:17:04.700 --> 00:17:07.867 
比賽中A隊的狀況

00:17:11.133 --> 00:17:13.200 
程序和快捷視圖

00:17:13.267 --> 00:17:16.067 
讓我進入計劃表中的應用數據

00:17:17.833 --> 00:17:20.099 
但是 有時候你需要在

00:17:20.166 --> 00:17:22.233 
用戶面前獲得信息

00:17:22.767 --> 00:17:25.233 
這時候你需要一個通知

00:17:29.433 --> 00:17:32.167 
手錶中的通知非常強大

00:17:32.667 --> 00:17:35.067 
你可以充分利用屏幕

00:17:35.833 --> 00:17:37.700 
顯示整個自定義用戶界面

00:17:39.333 --> 00:17:41.167 
比如 通知我

00:17:41.733 --> 00:17:46.467 
這是最後機會選出今天下午
在索瑪奶牛低地遊戲的冠軍

00:17:48.300 --> 00:17:49.800 
除了自定義用戶界面外

00:17:50.033 --> 00:17:51.667 
你還可以添加自定義動作

00:17:52.567 --> 00:17:55.233 
按下其中一個按鈕

00:17:55.300 --> 00:17:56.133 
則進行應用註冊

00:17:57.333 --> 00:17:58.167 
但這還不是全部

00:17:58.700 --> 00:18:00.300 
因爲watchOS 2系統

00:18:00.367 --> 00:18:04.000 
我們根據文本回復推送通知

00:18:05.367 --> 00:18:07.967 
所以我可以在
通知中添加一個按鈕

00:18:08.033 --> 00:18:10.300 
讓我能夠編輯信息並且發送

00:18:10.367 --> 00:18:13.033 
我是個真正的索瑪迷
我想讓全世界都知道

00:18:13.300 --> 00:18:14.767 
所以我要選擇這個按鈕

00:18:16.567 --> 00:18:20.300 
當我選擇回覆
我得到快速回復表

00:18:20.633 --> 00:18:23.400 
我甚至可以
使用口述來形成一條信息

00:18:23.467 --> 00:18:26.400 
這些都在通知內部
形成不需要變換目錄

00:18:29.467 --> 00:18:31.367 
謝謝你們
你們真好

00:18:35.633 --> 00:18:37.033 
這就是通知

00:18:37.967 --> 00:18:41.333 
程序快捷視圖
以及通知都很簡單

00:18:41.533 --> 00:18:44.500 
這也可能是
你的用戶在你的應用中

00:18:44.567 --> 00:18:45.533 
最常見的交流方式

00:18:46.033 --> 00:18:48.033 
但有時候你需要更多時間

00:18:49.067 --> 00:18:51.767 
而且你要一種交互性更好
更加逼真的體驗

00:18:52.100 --> 00:18:53.967 
這時候你需要
啓動完整的應用程序

00:18:55.167 --> 00:18:59.800 
在watchOS 2中
你可以做很多事情

00:19:00.900 --> 00:19:04.800 
舉個例子 既然你可以

00:19:04.867 --> 00:19:08.167 
使用數碼皇冠時代
那麼你可以用讓屏幕

00:19:08.233 --> 00:19:09.633 
快速顯示全部比賽隊伍

00:19:10.300 --> 00:19:13.000 
可以快速找到你最喜歡的隊伍
並且得到他們的信息

00:19:15.133 --> 00:19:18.467 
然而這只是你
使用watchOS 2之後

00:19:18.533 --> 00:19:20.267 
帶來的諸多優勢其中之一

00:19:22.067 --> 00:19:24.667 
你也可以給你的
用戶界面添加動畫

00:19:25.033 --> 00:19:26.933 
你可以使用振動馬達

00:19:28.333 --> 00:19:30.633 
你可以通過手錶錄音

00:19:30.833 --> 00:19:33.667 
你可以嵌入
聲音信號和回放錄像

00:19:34.933 --> 00:19:37.133 
你可以通過應用打電話

00:19:37.700 --> 00:19:39.600 
你可以通過直播訪問

00:19:39.667 --> 00:19:42.067 
醫療傳感器和加速計獲取數據

00:19:42.833 --> 00:19:46.633 
能夠看到你們這麼會玩
我們很高興

00:19:46.900 --> 00:19:48.800 
現在我想展示
在watchOS 2

00:19:48.867 --> 00:19:50.567 
安裝應用的方法有多簡單

00:19:50.800 --> 00:19:52.467 
讓我們邀請喬什·謝弗

00:20:00.000 --> 00:20:01.300 
喬什·謝弗:
謝謝 易麗扎

00:20:02.333 --> 00:20:04.333 
我很高興能夠向大家展示

00:20:04.400 --> 00:20:09.733 
將watchOS 1中應用
升級到watchOS 2中

00:20:09.800 --> 00:20:11.133 
在手機本機上運行

00:20:12.400 --> 00:20:15.133 
如果你已經下載過
今年開發者大會上的應用

00:20:15.600 --> 00:20:19.167 
你可能會注意到
其中有一個手錶應用擴展

00:20:19.600 --> 00:20:21.600 
可以在你手錶上安裝和運行

00:20:22.333 --> 00:20:25.533 
所以接下來我們
要看一下怎樣升級應用

00:20:25.933 --> 00:20:29.433 
並且在手錶2中運行這些應用

00:20:29.500 --> 00:20:32.733 
我們在其中會使用一些
易麗扎剛剛介紹的特色

00:20:34.267 --> 00:20:37.733 
在這裏你可以看到

00:20:37.800 --> 00:20:41.367 
開發者大會應用的Xcode

00:20:41.800 --> 00:20:42.833 
Xcode會注意到

00:20:42.900 --> 00:20:44.967 
我有一個watchOS 1
應用擴展

00:20:45.033 --> 00:20:47.900 
並且主動幫我升級到
watchOS 2應用擴展

00:20:48.900 --> 00:20:49.733 
我要點擊這裏

00:20:49.800 --> 00:20:51.067 
讓它執行這些變化

00:20:51.700 --> 00:20:53.600 
它會注意到所有的目標

00:20:53.967 --> 00:20:56.200 
並且升級
使原始資料生成代碼

00:20:56.267 --> 00:21:00.333 
將故事版準備就緒
我就可以重新使用所有的應用

00:21:02.233 --> 00:21:04.733 
我們看一下這裏
檢驗一下控制器內容

00:21:05.333 --> 00:21:08.800 
首先我們要改變一些代碼

00:21:08.867 --> 00:21:10.200 
來改變我們獲取數據的方法

00:21:10.767 --> 00:21:12.333 
既然我們在不同的設備中運行

00:21:12.767 --> 00:21:16.000 
我們需要能夠將
數據從手機移動到手錶

00:21:16.233 --> 00:21:18.100 
我們可以
使用新的手錶連接框架

00:21:18.200 --> 00:21:19.033 
實現這項功能

00:21:19.800 --> 00:21:22.567 
所以我要開始
添加手錶連接框架

00:21:23.300 --> 00:21:25.967 
我們要替換開源原應用調用

00:21:26.033 --> 00:21:28.067 
我曾經在
watchOS 1版本使用

00:21:28.433 --> 00:21:31.533 
新的手錶連接
代碼將會要求數據

00:21:31.600 --> 00:21:34.067 
從手機複製到手錶

00:21:35.800 --> 00:21:38.633 
這樣 現在
我們可以添加一些附加功能

00:21:39.067 --> 00:21:40.600 
比較酷的一項功能是

00:21:40.667 --> 00:21:43.233 
與數據皇冠時代的交互

00:21:44.467 --> 00:21:46.367 
現在數據皇冠時代
與手錶應用中交互方式

00:21:46.433 --> 00:21:50.967 
是利用一種
新的界面選擇器控制

00:21:52.233 --> 00:21:54.667 
我們要在一分鐘內
將其從故事板中拖出

00:21:54.767 --> 00:21:57.000 
但首先我們要
添加一些搭建代碼

00:21:58.100 --> 00:22:01.267 
我們要做一些參照
將其連接到故事板中

00:22:01.333 --> 00:22:02.733 
一旦我們將其拖出

00:22:03.467 --> 00:22:05.600 
然後你需要對選擇器編程

00:22:05.667 --> 00:22:07.500 
把你想要的項目添加進去

00:22:08.000 --> 00:22:10.667 
所以我們要追蹤的是

00:22:10.733 --> 00:22:12.400 
一週內存在的所有會話蹤跡

00:22:12.600 --> 00:22:15.133 
並且在每個蹤跡
的選擇器中添加一個入口

00:22:15.400 --> 00:22:17.567 
這樣 我們
就可以整理會話列表

00:22:17.800 --> 00:22:20.267 
尋找我們感興趣的會話蹤跡

00:22:21.200 --> 00:22:23.767 
最後
我們要添加IBAction

00:22:23.833 --> 00:22:26.600 
連接我們的控制
之後每次變化它都會被調用

00:22:27.267 --> 00:22:28.467 
所以我們要在那裏添加代碼

00:22:29.133 --> 00:22:33.067 
現在我們可以切換到故事板
在應用中找到安置它的地方

00:22:34.367 --> 00:22:36.467 
所以我在這裏
找到新的選擇器控制

00:22:37.467 --> 00:22:39.700 
我們要把它拖出來
並且安置在會話控制器中

00:22:40.233 --> 00:22:42.700 
會話控制器
可以顯示所有的會話

00:22:42.767 --> 00:22:45.533 
所以通過添加置頂

00:22:45.600 --> 00:22:46.967 
它會提供過濾會話列表的方法

00:22:47.433 --> 00:22:49.400 
將它稍微縮短一點
這樣它不會那麼高

00:22:50.033 --> 00:22:51.733 
現在 選擇器控制真的很靈活

00:22:52.067 --> 00:22:53.433 
並且有三種不同的形式

00:22:53.500 --> 00:22:55.767 
可供你選擇列表 堆疊和序列

00:22:56.100 --> 00:22:57.367 
你可以瞭解整整一週的情況

00:22:58.800 --> 00:23:00.800 
列表1是一個非常好的選擇

00:23:00.867 --> 00:23:02.633 
因爲這裏是我們
要在這裏做的事情列表

00:23:03.133 --> 00:23:04.867 
我們要打開一個重點概覽

00:23:04.933 --> 00:23:07.233 
以便我們可以保證用戶

00:23:07.300 --> 00:23:09.533 
在轉換到數碼皇冠
時代的時候可以區分

00:23:11.033 --> 00:23:13.200 
因爲有了這些變化我們就可以

00:23:13.267 --> 00:23:15.033 
連接到我們剛剛結束的代碼

00:23:16.067 --> 00:23:18.100 
我們要將連接拖出
到我們的IBOUTLET

00:23:18.733 --> 00:23:20.867 
並且將一個連接
拖至我們的IBAction

00:23:20.933 --> 00:23:22.733 
因此每次選擇器
變化它都會被調用

00:23:24.133 --> 00:23:25.000 
就這樣

00:23:25.200 --> 00:23:26.633 
所以 我們要點擊構建和運行

00:23:27.200 --> 00:23:29.000 
然後我們可以
切換到手錶模擬器

00:23:29.333 --> 00:23:30.567 
看到它如何運行

00:23:30.967 --> 00:23:33.600 
在watchOS 2中關於
手錶模擬器很重要的東西是

00:23:33.667 --> 00:23:36.000 
它是手錶中一個完整的模擬器

00:23:36.400 --> 00:23:38.400 
所以你可以
一起運行你的整個手錶

00:23:38.667 --> 00:23:41.867 
在手機應用中同時調試

00:23:42.067 --> 00:23:44.033 
並且測試他們之間的連接代碼

00:23:51.833 --> 00:23:53.033 
所以現在我們可以跳過這裏

00:23:53.100 --> 00:23:56.167 
在會話列表中你可以看到
我們可以滾動會話列表

00:23:56.600 --> 00:23:59.033 
我們也可以根據
我們想看的蹤跡進行過濾

00:23:59.633 --> 00:24:01.067 
我們改變的時候就在升級

00:24:02.100 --> 00:24:04.533 
現在 我想說的
最後一個特點是

00:24:04.933 --> 00:24:07.967 
在手錶屏幕上展示會話的能力

00:24:08.267 --> 00:24:10.800 
爲了能實現這項功能
我們要在應用中添加一個程序

00:24:11.300 --> 00:24:13.367 
現在
我提前爲此編寫了大部分代碼

00:24:13.533 --> 00:24:15.567 
所以我只要將文件拖出去
並且將其添加到

00:24:15.633 --> 00:24:16.867 
這裏我的程序中

00:24:18.400 --> 00:24:20.867 
我唯一沒做的
事情就是添加代碼

00:24:20.933 --> 00:24:23.500 
它會循環訪問並且構建時間線

00:24:24.000 --> 00:24:25.100 
現在 易麗扎剛剛提到的

00:24:25.167 --> 00:24:28.300 
我們要以時間線
的形式提供數據

00:24:28.700 --> 00:24:31.300 
所以我們要循環訪問

00:24:31.400 --> 00:24:32.267 
這是我最愛的部分

00:24:32.467 --> 00:24:35.400 
在手錶屏幕上我可以
看到整個星期我喜歡的會話

00:24:36.333 --> 00:24:37.633 
現在 爲了節省時間

00:24:37.700 --> 00:24:39.800 
今天我提前在
手錶上構建且安裝了

00:24:40.300 --> 00:24:42.833 
切換到這裏 看一下如何添加

00:24:42.900 --> 00:24:44.033 
到我們的手錶屏幕中

00:24:44.900 --> 00:24:46.167 
所以開始的時候

00:24:46.533 --> 00:24:49.033 
我在手錶屏幕
上中間配置了日曆

00:24:49.667 --> 00:24:51.833 
但因爲我在WWDC
做完了這些

00:24:52.300 --> 00:24:54.067 
我們只要切換到這裏
並且將其自定義

00:24:54.433 --> 00:24:57.433 
然後我們可以將
其滾動至程序列表的底端

00:24:57.800 --> 00:25:01.333 
你們可以看到現在大會上
的應用可以通過底部進入

00:25:02.067 --> 00:25:03.833 
我們可以點擊那裏打開

00:25:04.400 --> 00:25:06.533 
然後返回
查看我們的會話列表

00:25:06.867 --> 00:25:08.033 
現在 很明顯美國平臺

00:25:08.100 --> 00:25:10.233 
是我現在喜歡的會話

00:25:10.867 --> 00:25:14.167 
我們可以毫不費力
地向前進行時空之旅

00:25:14.400 --> 00:25:15.967 
通過會話列表

00:25:16.233 --> 00:25:18.267 
接下來看到的是蘋果設計獎

00:25:18.500 --> 00:25:19.667 
這是我絕對不想錯過的

00:25:20.267 --> 00:25:23.200 
往明天繼續推進

00:25:23.667 --> 00:25:26.300 
可以看到早上
watchOS 2的介紹

00:25:26.367 --> 00:25:27.633 
這也絕對是我想要看的

00:25:28.833 --> 00:25:31.467 
所以更新你的
手錶應用就這麼簡單

00:25:31.867 --> 00:25:34.867 
在watchOS上運行就像
本來就是其中的應用

00:25:35.467 --> 00:25:37.600 
非常好的特色

00:25:38.400 --> 00:25:39.233 
所以接下來

00:25:46.067 --> 00:25:47.967 
接下來
塞巴斯蒂安會告訴我們

00:25:48.033 --> 00:25:50.133 
一些非常好的新的基礎技術

00:25:50.467 --> 00:25:51.467 
塞巴·斯蒂安:
謝謝 喬什

00:25:52.500 --> 00:25:53.333 
非常好

00:25:54.600 --> 00:25:57.600 
現在我們來談論一些基礎技術

00:25:58.067 --> 00:26:01.367 
應用在我們的平臺中的技術

00:26:01.433 --> 00:26:04.033 
我會從第一個性能開始說

00:26:04.567 --> 00:26:05.800 
和其壓縮性

00:26:05.867 --> 00:26:07.333 
我們將會讓壓縮變得很有趣

00:26:08.167 --> 00:26:11.433 
蘋果的產品一向使用許多

00:26:11.500 --> 00:26:14.967 
壓縮算法作爲
我們核心框架的一部分

00:26:15.033 --> 00:26:17.233 
優化速度的LZ4

00:26:17.300 --> 00:26:21.633 
高度的壓縮性的LZMA
以及很多人用過的zlib

00:26:21.700 --> 00:26:24.833 
它可以找到壓縮
和速度之間的最優點

00:26:25.167 --> 00:26:28.267 
我們開始構建
一個更好的壓縮算法

00:26:28.333 --> 00:26:29.700 
使其在壓縮庫上更加進步

00:26:29.900 --> 00:26:32.500 
你可能知道
壓縮庫已經二十多年之久

00:26:32.767 --> 00:26:34.800 
處理器體系結構
改變之時就需要重建

00:26:34.867 --> 00:26:38.000 
所以我們認爲
可以創建可以優化

00:26:38.300 --> 00:26:41.233 
現在處理器
和微體系結構的事物

00:26:42.100 --> 00:26:44.433 
現在 我們稱這個新算法爲
Lempel Ziv

00:26:44.500 --> 00:26:47.367 
Finite State
Entropy

00:26:47.433 --> 00:26:48.267 
你可能知道

00:26:48.700 --> 00:26:50.167 
他們還是
一個非常好的獨立樂隊

00:26:50.800 --> 00:26:52.400 
你應該到
Connect上去找看看

00:26:52.700 --> 00:26:56.900 
爲避免任何困惑
我們簡單稱其爲LZFSE

00:27:00.700 --> 00:27:03.800 
現在 LZFSE 謝謝

00:27:04.400 --> 00:27:07.333 
在壓縮中 壓縮庫有所改進
但更重要的是

00:27:07.833 --> 00:27:11.133 
它比壓縮庫速度快三倍

00:27:11.600 --> 00:27:13.567 
這是一次巨大的進步

00:27:13.633 --> 00:27:15.967 
可以使你的應用更加敏感

00:27:16.567 --> 00:27:18.733 
另外它還延長電池壽命

00:27:19.400 --> 00:27:22.600 
在能量消耗
上它可以減少60%

00:27:23.067 --> 00:27:24.267 
在相同的壓縮算法中

00:27:24.333 --> 00:27:26.833 
它在速度上快了三倍

00:27:27.333 --> 00:27:29.833 
最後
我們使用起來相當容易

00:27:30.033 --> 00:27:31.700 
我們已經將其添加
我們的標準框架中

00:27:32.100 --> 00:27:35.933 
你需要做的就是
改變算法 使用LZFSE

00:27:36.167 --> 00:27:38.200 
我們已經完成
了所有困難的工作

00:27:38.567 --> 00:27:40.200 
你和你的用戶
可以享用其中的益處

00:27:40.467 --> 00:27:44.200 
這就是LZFSE
真正重新定義了最優點

00:27:44.300 --> 00:27:45.733 
在主流壓縮中

00:27:46.700 --> 00:27:48.833 
接下來 我要說一下電池壽命

00:27:49.200 --> 00:27:50.767 
克雷格
今早提到了電池壽命

00:27:52.367 --> 00:27:55.733 
現在在這個行業中
我們測試電池壽命時

00:27:55.967 --> 00:27:59.100 
經常是重複性測試

00:27:59.200 --> 00:28:00.767 
舉個例子
我們測試時在瀏覽器中

00:28:00.833 --> 00:28:04.133 
一次又一次的瀏覽網頁

00:28:04.500 --> 00:28:05.900 
我們知道現實生活中

00:28:06.700 --> 00:28:08.600 
我們使用這些設備的方法
與這些綜合實驗測試

00:28:08.667 --> 00:28:10.467 
的方法不一樣 對嗎？

00:28:10.533 --> 00:28:13.400 
我們將設備裝進口袋再取出來

00:28:13.467 --> 00:28:17.333 
我們接收通知和信息
我們可能使用很多應用

00:28:17.400 --> 00:28:19.300 
我們連接網絡 斷開網絡

00:28:19.600 --> 00:28:21.400 
所以在iOS 9上做的事

00:28:21.700 --> 00:28:25.133 
主要集中在最佳化基板組上

00:28:25.200 --> 00:28:28.867 
這樣可以適用
在平臺所有最流行的應用

00:28:29.867 --> 00:28:31.433 
這是第一步
第二步

00:28:31.500 --> 00:28:34.000 
我們關注
一些基礎設施的改善

00:28:34.067 --> 00:28:37.500 
比如 一些算法
可以增亮背光燈

00:28:37.867 --> 00:28:40.800 
朝下檢測
所以如果你接收到一條通知

00:28:41.100 --> 00:28:43.633 
當時不能看到它
由於手機屏幕朝下

00:28:43.700 --> 00:28:45.433 
我們無需讓屏幕發亮

00:28:45.733 --> 00:28:47.467 
還有其它一些優化

00:28:47.533 --> 00:28:52.867 
比如系統如何進入睡眠狀態
如何優化最低電源狀態

00:28:53.900 --> 00:28:56.467 
所有的這些
最優化加起來可增加

00:28:56.533 --> 00:29:01.833 
一個小時額外使用時間
是針對一般用戶的普通使用

00:29:02.167 --> 00:29:03.000 
真是巨大改善

00:29:03.167 --> 00:29:06.267 
今早克雷格還提到了省電模式

00:29:07.800 --> 00:29:10.167 
我們要開啓省電模式很簡單

00:29:10.500 --> 00:29:12.100 
只需要進入設置 開啓

00:29:12.967 --> 00:29:16.267 
激活了一部分內部槓桿

00:29:16.800 --> 00:29:19.100 
比如
保護中央處理器和圖形處理器

00:29:19.167 --> 00:29:21.133 
不受進入最高性能的破壞

00:29:21.567 --> 00:29:23.033 
除了最耗電的狀態

00:29:23.567 --> 00:29:26.400 
保護應用免受
後臺過度運行的影響

00:29:26.933 --> 00:29:30.367 
阻止它們進行
不必要的網絡活動

00:29:30.867 --> 00:29:35.067 
最後關閉一些耗電的動畫

00:29:35.433 --> 00:29:36.533 
總而言之
當你開始充電時

00:29:36.600 --> 00:29:42.133 
省電模式將會
爲你增加三小時的使用時間

00:29:42.367 --> 00:29:43.833 
所以再次強調
這是巨大的進步

00:29:44.567 --> 00:29:47.200 
現在我開始保護客戶數據

00:29:48.767 --> 00:29:50.700 
所以從一開始
蘋果系統就真正

00:29:50.767 --> 00:29:52.300 
關注客戶數據的保護

00:29:52.367 --> 00:29:56.567 
在iOS9中我們採取了
一些重要措施保護數據

00:29:56.633 --> 00:29:58.733 
包括設備中的和雲端的

00:29:59.067 --> 00:30:00.067 
所以我們從雲端說起吧

00:30:01.400 --> 00:30:05.100 
當然
用你的Apple ID進入

00:30:05.167 --> 00:30:07.233 
雲端的一些服務中 你的照片

00:30:07.300 --> 00:30:11.367 
可能你有一些文檔
存在雲端中 你的購買記錄

00:30:11.633 --> 00:30:13.867 
可以利用它在即時通訊和
視頻通話中發送信息

00:30:14.167 --> 00:30:17.967 
雲端對你的數據最大的威脅是

00:30:18.033 --> 00:30:20.500 
有人獲得你的密碼

00:30:21.167 --> 00:30:23.100 
可能是因爲你在其他共享網站

00:30:23.367 --> 00:30:25.167 
分享過你的密碼

00:30:25.700 --> 00:30:28.200 
或者可能攻擊者
通過捕釣式的攻擊

00:30:28.367 --> 00:30:30.033 
獲得密碼

00:30:30.567 --> 00:30:33.533 
這種情況的解決
辦法是雙因素認證

00:30:34.167 --> 00:30:36.333 
我們儘量把它做的簡單
以使每個人都可以使用

00:30:36.733 --> 00:30:38.033 
我來向大家展示它如何運作

00:30:39.133 --> 00:30:42.433 
在iOS9中
當你得到一個新的設備

00:30:42.500 --> 00:30:45.067 
你就想要在
你的雲端賬戶中登記

00:30:45.333 --> 00:30:47.567 
你將需要輸入密碼

00:30:47.633 --> 00:30:50.233 
此外 你還會輸入驗證碼

00:30:51.100 --> 00:30:56.233 
同時我們向我們已有的
信任的設備發送通知

00:30:56.300 --> 00:31:01.133 
通知包括註冊新設備的地址

00:31:01.767 --> 00:31:03.267 
所以如果那是你在註冊

00:31:03.667 --> 00:31:05.733 
你可以輸入驗證碼

00:31:06.100 --> 00:31:08.667 
如果是攻擊者
試圖用你的賬戶註冊

00:31:09.000 --> 00:31:10.867 
你可以憑藉蹤跡阻止他們

00:31:12.233 --> 00:31:14.767 
這是關於雲端
現在說關於設備上的設備密碼

00:31:14.833 --> 00:31:16.700 
設備密碼是保護

00:31:16.767 --> 00:31:19.333 
私人數據的最後一道防線

00:31:20.100 --> 00:31:24.300 
在瀏覽歷史中
我們保留四位數密碼

00:31:24.400 --> 00:31:27.600 
因爲你每次使用手機
都需要輸入

00:31:28.433 --> 00:31:30.900 
但是當然
我們不會輸入密碼

00:31:30.967 --> 00:31:31.800 
太過頻繁

00:31:32.267 --> 00:31:36.767 
我們使用指紋識別
中的指紋完美註冊

00:31:36.833 --> 00:31:37.833 
我們的手機

00:31:38.333 --> 00:31:42.900 
所以現在在iOS9中
我們可以將密碼

00:31:42.967 --> 00:31:45.133 
由四位數增至六位數

00:31:45.200 --> 00:31:48.233 
密碼強度增至一百倍

00:31:48.700 --> 00:31:51.933 
不需要緩和設備使用的妥協

00:31:53.233 --> 00:31:54.567 
既然我們說到設備

00:31:55.033 --> 00:31:59.000 
我介紹一種用
在所有平臺中的新技術

00:31:59.067 --> 00:32:00.733 
我們稱之爲蘋果安全傳輸

00:32:01.133 --> 00:32:04.267 
蘋果安全傳輸是
真正關於所有的安全數據

00:32:04.333 --> 00:32:07.500 
它從一個設備傳輸到網絡

00:32:07.567 --> 00:32:10.133 
或者從你的應用傳輸到
你的終端服務器

00:32:11.233 --> 00:32:14.333 
因此我們當然想要需要的信息

00:32:14.400 --> 00:32:15.700 
在網絡傳輸中安全

00:32:16.233 --> 00:32:17.767 
但是結果證明現在

00:32:17.833 --> 00:32:19.333 
對大家來說真的很難

00:32:19.500 --> 00:32:20.400 
很難將其做好

00:32:20.900 --> 00:32:21.867 
你不能使用傳輸協議

00:32:21.933 --> 00:32:24.667 
你必須使用一個安全協議

00:32:24.733 --> 00:32:27.600 
然後需要擔心協議
的版本降級攻擊

00:32:28.100 --> 00:32:29.733 
數據加密 保密性

00:32:30.133 --> 00:32:33.367 
最佳規範

00:32:33.767 --> 00:32:34.833 
這些做法非常難

00:32:34.900 --> 00:32:39.533 
在蘋果安全傳輸中
我們核心框架搭建它

00:32:39.967 --> 00:32:43.100 
所以現在當你使用我們的
標準網絡框架

00:32:43.500 --> 00:32:47.500 
我們會建立一個最好的
安全實踐連接

00:32:47.767 --> 00:32:50.533 
在你的應用和後臺服務器之間

00:32:51.367 --> 00:32:55.033 
現在最佳實踐是安全傳輸層
協議1.2和正向保密

00:32:55.100 --> 00:32:58.767 
但是因爲標準和
的發展最高技術

00:32:59.200 --> 00:33:01.300 
框架當然要使用最新技術

00:33:01.367 --> 00:33:05.200 
並且自動爲你執行

00:33:13.200 --> 00:33:15.867 
所以 要從哪裏開始？

00:33:16.133 --> 00:33:17.900 
如果你用完了標準網絡框架

00:33:17.967 --> 00:33:20.900 
比如 NSURL會話
那麼它會被馬上創建

00:33:21.200 --> 00:33:23.367 
這是iOS9默認的

00:33:23.433 --> 00:33:25.067 
所以你下載開發者係數時

00:33:25.133 --> 00:33:27.033 
我敢肯定
很多人都已經下載過了

00:33:27.800 --> 00:33:29.200 
你就會重新編譯你的應用

00:33:29.267 --> 00:33:31.633 
我們會在後臺執行
最佳實踐

00:33:31.700 --> 00:33:32.533 
安全連接

00:33:32.933 --> 00:33:35.767 
可能你
還沒與更新你的後臺

00:33:35.833 --> 00:33:37.433 
至最佳實踐

00:33:37.500 --> 00:33:39.500 
或者你在使用
第三方數據庫

00:33:39.967 --> 00:33:43.167 
如果是這樣 我們
提供了異常機制

00:33:43.233 --> 00:33:47.300 
給你時間來通過位置服務平臺
更新你的後臺

00:33:48.300 --> 00:33:50.100 
這就是蘋果安全傳輸

00:33:50.400 --> 00:33:52.567 
讓我們轉換到計算機

00:33:52.900 --> 00:33:54.233 
介紹一種新技術

00:33:54.300 --> 00:33:56.567 
我們稱之爲
系統完整性保護

00:33:57.633 --> 00:34:01.133 
在個人消費型電腦中
用戶賬戶有明顯的

00:34:01.200 --> 00:34:03.733 
管理特權
並且這種管理特權是

00:34:03.800 --> 00:34:05.500 
真的等同於內核訪問

00:34:05.933 --> 00:34:08.800 
這就使保護系統
的完整性變得很難

00:34:09.766 --> 00:34:11.300 
在系統的完整性保護中

00:34:11.667 --> 00:34:13.167 
我們破壞了等同的狀態

00:34:13.632 --> 00:34:17.533 
管理級別的訪問不再充分

00:34:17.600 --> 00:34:19.300 
爲了在系統中做一些運作

00:34:19.367 --> 00:34:20.766 
我來舉一些例子

00:34:21.567 --> 00:34:24.533 
比如 如果你有管理級別
訪問的特權

00:34:24.833 --> 00:34:26.733 
你不能梗更改系統文件

00:34:27.333 --> 00:34:29.333 
你不能將程序安裝至
系統的位置

00:34:29.833 --> 00:34:33.667 
你不能依附系統程序 比如

00:34:33.733 --> 00:34:35.699 
內省記憶
或者改變控制程序

00:34:36.467 --> 00:34:39.132 
所以對於現在出現的
數據庫 我們希望

00:34:39.199 --> 00:34:40.933 
大家下載下來 測試你的應用

00:34:41.000 --> 00:34:46.400 
以確保你基本上可以將其
粘附在所有的規則上

00:34:48.632 --> 00:34:50.367 
現在 你可能還想知道

00:34:50.433 --> 00:34:52.167 
這是如何影響我的應用開發

00:34:52.233 --> 00:34:54.199 
好消息是
我們已經更新了XCode

00:34:54.266 --> 00:34:57.633 
發展了工具鏈
對大多數人來說

00:34:57.700 --> 00:34:58.800 
你們看不出什麼不同

00:34:59.567 --> 00:35:02.133 
對那些有明確
開發要求的人來說

00:35:02.200 --> 00:35:05.467 
比如 你在開發X系統
的內核功能擴展

00:35:05.767 --> 00:35:08.833 
我們也提供了一種功用
這也是恢復分區的一部分

00:35:09.167 --> 00:35:11.600 
它可以讓你失去
系統完整性保護的能力

00:35:13.367 --> 00:35:16.733 
這就指向了我要說的
最後一種技術

00:35:16.800 --> 00:35:20.067 
一種鞏固現代網絡的技術
互聯網協議6

00:35:21.567 --> 00:35:23.067 
爲什麼
互聯網協議6這麼重要？

00:35:23.567 --> 00:35:26.400 
我們都聽說過
互聯網協議4地址的不足

00:35:26.833 --> 00:35:27.667 
猜猜看

00:35:27.967 --> 00:35:28.967 
最終在這裏

00:35:29.233 --> 00:35:31.367 
實際上
2011年在中國和亞洲

00:35:31.433 --> 00:35:34.633 
已經不用互聯網協議4地址

00:35:34.700 --> 00:35:37.833 
在美國 我們也將在
接下來的幾個月中放棄

00:35:39.067 --> 00:35:41.233 
意味着實踐中一些

00:35:41.300 --> 00:35:44.333 
媒介物現在在配置
只用互聯網協議6的網絡

00:35:44.867 --> 00:35:47.933 
如果你的應用在互聯網
協議6中不能正常運作

00:35:48.000 --> 00:35:51.100 
它在那些媒介
網絡也不會運作

00:35:51.167 --> 00:35:52.167 
對那些客戶也不會運作

00:35:52.300 --> 00:35:54.033 
所以支持互聯網協議6
真的很重要

00:35:55.000 --> 00:35:57.833 
好消息是
一直以來作爲平臺的一部分

00:35:57.900 --> 00:36:01.300 
互聯網協議6
已經得到了支持超過了10%

00:36:01.833 --> 00:36:03.233 
已得到現場證實

00:36:03.300 --> 00:36:06.700 
很多使用我們的標準
網絡框架的人在使用

00:36:06.767 --> 00:36:07.833 
互聯網協議6

00:36:08.300 --> 00:36:09.633 
但是我們希望得到進一步發展

00:36:09.700 --> 00:36:11.500 
我們想確保
每個人都創建一款應用

00:36:11.867 --> 00:36:13.900 
能在互聯網協議6網絡中運行

00:36:14.100 --> 00:36:16.500 
所以我們爲大家準備了祕訣

00:36:17.433 --> 00:36:19.233 
使用標準網絡框架

00:36:19.700 --> 00:36:21.300 
我們已經提到過NSUL會話

00:36:22.033 --> 00:36:24.700 
這真的關係到
獲得網絡的複雜性

00:36:25.300 --> 00:36:28.033 
避免使用互聯網協議4
的程序語言系統

00:36:28.500 --> 00:36:32.600 
很多甚至在構思互聯網協議6
之前就已經得到發展

00:36:33.167 --> 00:36:35.100 
最後
不要將地址進行硬式編碼

00:36:36.000 --> 00:36:38.167 
一旦你按照這個祕訣
你會說

00:36:38.233 --> 00:36:39.867 
我如何測試它是否正常運行

00:36:40.400 --> 00:36:43.133 
因爲並非所有人
都可以進入互聯網協議6網絡

00:36:44.000 --> 00:36:47.033 
好消息是大家
爲了研發都使用個人電腦

00:36:47.500 --> 00:36:48.600 
我們正在用最新的數據庫

00:36:48.667 --> 00:36:52.600 
將你們的電腦變爲
互聯網協議6 網絡模擬器

00:36:53.600 --> 00:36:55.300 
所以你所需要的就是

00:36:55.367 --> 00:36:58.267 
通過一個新連接分享模式
簡歷一個個人熱點

00:36:58.333 --> 00:37:00.900 
你只要查看
互聯網協議6的盒子

00:37:01.233 --> 00:37:04.200 
你就可以連接你的測試設備
測試你的應用

00:37:04.300 --> 00:37:07.100 
確保它們在互聯網協議6
中運行很簡單

00:37:15.633 --> 00:37:18.533 
最後因爲互聯網協議6的
支持很關鍵

00:37:18.600 --> 00:37:21.267 
對保證世界上
大家應用的運行來說

00:37:21.833 --> 00:37:22.833 
對每位客戶而言

00:37:23.200 --> 00:37:26.567 
我們將它作爲一個
蘋果儲備提交要求

00:37:26.633 --> 00:37:27.467 
從iOS9開始

00:37:29.267 --> 00:37:32.200 
所以這就是我要說的
基礎技術

00:37:32.567 --> 00:37:36.000 
現在我把它交給我的同伴
加拿大人 託比·帕特森

00:37:36.233 --> 00:37:38.033 
他將會說到更高水平的
程序語言系統

00:37:38.500 --> 00:37:39.333 
託比？

00:37:47.367 --> 00:37:48.800 
託比·帕特森:
我知道大家都來自

00:37:48.867 --> 00:37:51.033 
世界各地
一些人甚至來自

00:37:51.100 --> 00:37:53.300 
跟加拿大一樣遙遠的地方

00:37:55.867 --> 00:37:58.500 
你們的客戶就
像大家一樣各種各樣

00:37:59.467 --> 00:38:02.233 
有趣的是 你們可能沒注意到

00:38:02.733 --> 00:38:05.767 
這個表格顯示了世界上
蘋果專賣店

00:38:05.833 --> 00:38:06.767 
是按國家劃分的

00:38:07.367 --> 00:38:09.300 
它告訴我們一件有趣的事情

00:38:09.533 --> 00:38:11.900 
如果你的商店沒有
在正確的位置

00:38:12.267 --> 00:38:15.467 
你就不會得到
除了你的客戶之外的

00:38:15.533 --> 00:38:16.900 
大多數潛在客戶

00:38:17.733 --> 00:38:19.933 
現在 有個好消息
這對大家來說並不難

00:38:21.133 --> 00:38:24.267 
我們有國際化和地區化指導

00:38:24.467 --> 00:38:26.433 
它可以告訴你
你想知道的一切

00:38:26.767 --> 00:38:28.500 
當然
我們已經得到很大的支持

00:38:28.567 --> 00:38:30.800 
在框架以及微軟
軟件開發工具包方面

00:38:31.567 --> 00:38:33.767 
我們有數據
和數字的格式化程序

00:38:34.400 --> 00:38:36.800 
今年 我們介紹
一種新的格式化程序

00:38:37.133 --> 00:38:39.333 
來幫助你
正確顯示人們的名字

00:38:40.567 --> 00:38:42.100 
名字是一件很棘手的事情

00:38:42.367 --> 00:38:44.000 
每個人都有

00:38:44.433 --> 00:38:46.767 
但不同的文化 有不同的意義

00:38:46.833 --> 00:38:49.133 
關於他們的用途有不同的習俗

00:38:50.233 --> 00:38:53.800 
在英語中 我們
先寫名字 中間姓 姓氏

00:38:54.333 --> 00:38:56.933 
在中國 卻不一樣
先寫姓氏

00:38:57.033 --> 00:38:59.800 
而且根本沒有中間字

00:39:01.067 --> 00:39:03.867 
NSP的名字組成很格式化

00:39:04.267 --> 00:39:06.633 
我保證看起來
比聽起來更像編碼

00:39:06.700 --> 00:39:07.867 
當你大神說出它時

00:39:12.500 --> 00:39:14.967 
這關係到大家的所有細節

00:39:15.400 --> 00:39:17.733 
它甚至還有一些文化智慧

00:39:17.800 --> 00:39:20.633 
所以如果你問一個人
有沒有短一點的名字嗎

00:39:21.000 --> 00:39:24.400 
可能不太合適
使用一個人的姓

00:39:24.933 --> 00:39:26.033 
或者就直接使用它本身

00:39:28.133 --> 00:39:32.100 
對於阿拉伯和猶太人
我們有一些好消息

00:39:32.700 --> 00:39:35.967 
我們已經得到了初步的支持
不客氣

00:39:36.633 --> 00:39:38.633 
我們已經得到了初步支持

00:39:38.700 --> 00:39:40.200 
近年來在這些語言方面

00:39:40.267 --> 00:39:43.033 
在系統中
文本被嚴格限制

00:39:43.100 --> 00:39:46.000 
但是 個人電腦
已經有了更復雜的佈局

00:39:46.067 --> 00:39:47.300 
在用戶界面元素中

00:39:48.000 --> 00:39:50.433 
我很高興能夠
告訴你們在蘋果iOS9中

00:39:50.500 --> 00:39:54.600 
我們已經全面檢測了
用戶界面對右向語言的支持

00:40:00.100 --> 00:40:01.767 
這是它在跳板裏的樣子

00:40:03.500 --> 00:40:05.600 
現在 我們還未撤銷

00:40:05.667 --> 00:40:07.367 
屏幕上的用戶界面元素

00:40:07.433 --> 00:40:09.500 
這是一種深層次的切換

00:40:09.867 --> 00:40:12.767 
在視圖控制器 用戶交互

00:40:13.133 --> 00:40:16.233 
和系統手勢間
進行的程序切換

00:40:16.767 --> 00:40:19.800 
如果換做希伯來或阿拉伯人

00:40:19.867 --> 00:40:22.133 
設計的話
用戶界面應該是這樣

00:40:23.167 --> 00:40:25.300 
我們來看看它在手機上的樣子

00:40:25.500 --> 00:40:27.533 
我想介紹沙拉·卡迪

00:40:27.600 --> 00:40:28.867 
你們可以快速地看一下

00:40:35.500 --> 00:40:39.067 
我們體驗一下iOS 9系統
支持的從右到左新式語言

00:40:39.567 --> 00:40:41.600 
現在
我的手機語言是阿拉伯語

00:40:41.667 --> 00:40:44.400 
我們先鎖屏
從右向左滑屏

00:40:44.467 --> 00:40:45.867 
解開手機鎖

00:40:46.433 --> 00:40:50.167 
這裏
從右向左是應用程序圖標

00:40:50.900 --> 00:40:52.767 
頁面視圖自然地

00:40:52.833 --> 00:40:54.867 
從第一頁過渡到第二頁

00:40:56.900 --> 00:41:00.633 
整個系統和所有自帶軟件都支

00:41:00.700 --> 00:41:03.733 
持用戶界面鏡像
或從右向左定位

00:41:04.100 --> 00:41:06.367 
以照片應用程序爲例

00:41:07.833 --> 00:41:11.867 
這些照片是按照我意願排列的

00:41:12.200 --> 00:41:15.967 
整個用戶界面位於導航欄右側

00:41:16.033 --> 00:41:19.233 
而導航欄位於
下方菜單欄的頂部

00:41:20.700 --> 00:41:22.200 
現在 我們體驗一下電子郵件

00:41:24.700 --> 00:41:28.233 
它的標準佈局 導航欄

00:41:28.300 --> 00:41:30.833 
手勢瀏覽和動畫都可隨意設置

00:41:31.333 --> 00:41:34.033 
所以 點擊郵件
快速獲取信息

00:41:34.433 --> 00:41:36.367 
從屏幕左側

00:41:36.433 --> 00:41:38.167 
拖動至右側

00:41:39.833 --> 00:41:42.933 
會出現
表視圖單元格的排版流程

00:41:44.167 --> 00:41:48.033 
手勢導航也會

00:41:48.333 --> 00:41:49.900 
從屏幕右側進入頁面

00:41:52.033 --> 00:41:53.433 
現在
把手機旋轉到豎屏模式

00:41:53.533 --> 00:41:55.833 
出現的消息窗口

00:41:56.300 --> 00:41:59.233 
讓我這個母語人士感到很自然

00:41:59.433 --> 00:42:01.633 
因爲所有的郵件標題在右側

00:42:02.233 --> 00:42:03.600 
而信息詳情在左側

00:42:04.400 --> 00:42:07.033 
因爲所有的Email
都已置入UIKit中

00:42:07.367 --> 00:42:10.100 
所以您也可免費操作這一流程

00:42:10.200 --> 00:42:12.033 
進行從右向左定位

00:42:13.300 --> 00:42:15.567 
接下來
我向您展示一下蘋果

00:42:15.633 --> 00:42:16.833 
軟件商店的第三方應用程序

00:42:19.167 --> 00:42:21.467 
您們一定認爲
我們不選擇

00:42:21.533 --> 00:42:23.433 
Kayak
因爲它的名字是個迴文

00:42:23.500 --> 00:42:26.767 
或者說您
可以從右向左閱讀信息

00:42:33.333 --> 00:42:36.233 
因其採用自動佈局和耗能最小

00:42:36.300 --> 00:42:40.267 
新式應用程序接口
所以添加上翻譯

00:42:40.333 --> 00:42:42.300 
軟件這個程序就能如期運行

00:42:43.067 --> 00:42:46.233 
所以 在WWDC結束後
我打算去旅行

00:42:46.300 --> 00:42:47.533 
我來瀏覽一些消息

00:42:49.567 --> 00:42:53.167 
所以 拖動第一個滑塊
可選擇旅遊的時間

00:42:53.233 --> 00:42:56.700 
往右滑動

00:42:56.767 --> 00:42:57.800 
可減少旅行的天數

00:42:57.867 --> 00:43:00.800 
它採用了股票用戶界面滑塊

00:43:00.900 --> 00:43:02.267 
所以您可免費使用這一軟件

00:43:03.567 --> 00:43:05.933 
因爲我只喜歡直達航班

00:43:06.000 --> 00:43:09.867 
所以
打開下面的按鍵 你可以看到

00:43:09.933 --> 00:43:11.467 
它會從右側移動到左側

00:43:11.700 --> 00:43:15.967 
右側呈現整個用戶界面

00:43:16.300 --> 00:43:17.733 
因爲採用的是母語
所以很直觀

00:43:18.533 --> 00:43:22.333 
把從左向右定位
添加到iOS 9

00:43:22.400 --> 00:43:23.900 
軟件是多麼容易啊

00:43:24.067 --> 00:43:24.900 
謝謝大家

00:43:27.400 --> 00:43:28.300 
現在我們再講講託比

00:43:30.033 --> 00:43:30.933 
託比 帕特森
謝謝 莎拉

00:43:33.567 --> 00:43:36.533 
正如莎拉所講
我們全力支持UIKit

00:43:36.600 --> 00:43:38.500 
和其他系統框架

00:43:38.867 --> 00:43:40.700 
你的應用程序可以免費安裝

00:43:40.767 --> 00:43:42.133 
這些軟件

00:43:42.800 --> 00:43:45.333 
您如果有自定義
視圖或手勢識別

00:43:45.667 --> 00:43:47.567 
您確實該好好考慮

00:43:47.733 --> 00:43:49.167 
從右向左語言給您帶來的好處

00:43:50.033 --> 00:43:52.733 
我不會向您
展示和推銷這裏的API

00:43:52.800 --> 00:43:55.900 
也不會贅述UI的流動方式

00:43:55.967 --> 00:43:59.033 
您可以爲您的
UI做出自己合理的選擇

00:44:00.700 --> 00:44:02.867 
下面我講講鏈接

00:44:03.533 --> 00:44:06.400 
這裏是指您從
朋友信息或郵件裏

00:44:06.467 --> 00:44:07.667 
獲得的鏈接

00:44:08.467 --> 00:44:11.533 
點擊鏈接
您就會打開一個網頁

00:44:12.133 --> 00:44:14.333 
這正是您想
從電腦上獲取的網頁

00:44:14.400 --> 00:44:17.767 
Safari就是爲
網站應用程序所開發的

00:44:18.933 --> 00:44:21.700 
另一方面
IOS是唯一的本地應用程序

00:44:21.800 --> 00:44:24.333 
在相關應用程序點擊同樣鏈接

00:44:24.400 --> 00:44:28.333 
可以進入同一網頁
這不是很棒麼

00:44:29.833 --> 00:44:33.800 
這正是iOS 9做出的突破

00:44:34.467 --> 00:44:39.967 
點擊軟件的鏈接同樣可以

00:44:41.100 --> 00:44:43.933 
打開您想打開的頁面

00:44:44.000 --> 00:44:45.433 
這在您當前的頁面操作就可以

00:44:45.800 --> 00:44:48.700 
電腦的Safari瀏覽器
或iOS系統的本地應用

00:44:49.367 --> 00:44:50.233 
這是它的運行過程

00:44:51.433 --> 00:44:55.333 
將文件託管
到URL服務器的網頁

00:44:55.400 --> 00:44:57.533 
您的應用程序便可本地化處理

00:44:58.200 --> 00:45:00.467 
當用戶點擊
其中某一URL服務器時

00:45:00.933 --> 00:45:04.333 
我們把它包裝在NSUser
Activity

00:45:04.400 --> 00:45:06.600 
以切換的方式交付給應用軟件

00:45:06.667 --> 00:45:08.967 
這就是運行過程

00:45:09.033 --> 00:45:09.867 
就這樣簡單

00:45:11.833 --> 00:45:14.667 
我願意談談
關於iOS 9新奇的事

00:45:15.500 --> 00:45:17.300 
先從HomeKit智能家居平臺說起

00:45:18.200 --> 00:45:20.867 
今天早晨我們
公佈了HomeKit平臺

00:45:20.933 --> 00:45:22.333 
的幾個新特點

00:45:22.400 --> 00:45:26.200 
當然我們將繼續
提高HomeKit運營體系

00:45:27.933 --> 00:45:29.667 
現在 特定級別的配件

00:45:30.000 --> 00:45:33.700 
可以向你的設備直接推送

00:45:34.100 --> 00:45:36.267 
門窗及報警系統推送信息

00:45:37.033 --> 00:45:38.867 
而且 我們的新系統界面

00:45:38.933 --> 00:45:41.933 
可以和智能家居
網絡實現共享管理

00:45:42.867 --> 00:45:44.367 
在設置中進行設置

00:45:44.433 --> 00:45:48.733 
另外 你還可以通過
程序編程接口對接自己的應用

00:45:50.267 --> 00:45:52.533 
不過
我認爲真正有趣的事情是

00:45:52.600 --> 00:45:53.467 
事件觸發器

00:45:54.200 --> 00:45:58.233 
你可以設置
“如果…那麼…”的動作程序

00:45:58.300 --> 00:46:00.133 
這樣你可以
設定激活報警系統的時候

00:46:00.200 --> 00:46:02.700 
選擇關閉燈光

00:46:02.767 --> 00:46:05.133 
或者
可以在早晨的時候開啓咖啡機

00:46:05.733 --> 00:46:07.567 
我認爲
這些功能以後將會非常有用

00:46:09.267 --> 00:46:10.767 
現在我們
在搜索方面也有了新突破

00:46:10.833 --> 00:46:12.667 
我想大家會感興趣

00:46:13.833 --> 00:46:15.800 
當然 重磅消息是

00:46:15.867 --> 00:46:18.433 
iSO現在可以
對你的應用內容進行搜索了

00:46:19.000 --> 00:46:20.300 
我們有了豐富的搜索結果

00:46:20.367 --> 00:46:22.000 
當用戶點擊時

00:46:22.067 --> 00:46:25.033 
將直接對應
到應用中的具體位置

00:46:26.233 --> 00:46:29.267 
對應用數據
進行索引一共有三種方法

00:46:29.967 --> 00:46:33.067 
核心聚焦可以直接搜索

00:46:33.133 --> 00:46:35.300 
全部的應用內容

00:46:36.033 --> 00:46:39.300 
現在 某些數據有時限性

00:46:39.767 --> 00:46:43.100 
這樣你可以選擇
對一款應用進行索引擴展

00:46:43.500 --> 00:46:45.400 
核心聚焦會在特定時間啓動

00:46:45.467 --> 00:46:49.667 
以確保索引更新索引更新

00:46:51.200 --> 00:46:55.067 
索引數據的另一種方式是
NSUerActivity

00:46:55.767 --> 00:46:58.967 
NSUerActivity
對應用內的用戶所見

00:46:59.033 --> 00:47:00.300 
及行爲進行索引

00:47:00.500 --> 00:47:04.167 
這樣方便循跡並返回應用

00:47:05.333 --> 00:47:08.567 
最後 如果應用
正在生成網站鏡像

00:47:08.633 --> 00:47:10.133 
你可以對網站進行加示

00:47:10.200 --> 00:47:15.300 
這樣網絡爬蟲
會找到網站編入索引

00:47:15.500 --> 00:47:18.867 
之後在設備上進行本地搜索時
則直接提供結果

00:47:20.967 --> 00:47:25.367 
正如大家今早
看到的新搜索界面

00:47:26.000 --> 00:47:28.100 
現在我們有了新系列搜索建議

00:47:28.167 --> 00:47:29.167 
可供使用

00:47:29.233 --> 00:47:30.800 
這是無需手動輸入的

00:47:32.000 --> 00:47:34.567 
當然
Siri甚至可以在應用內部

00:47:34.633 --> 00:47:36.100 
進行結果建議

00:47:38.167 --> 00:47:40.100 
如果您正用NSUser
Activity

00:47:40.167 --> 00:47:43.200 
進行用戶應用行爲記錄

00:47:43.633 --> 00:47:47.900 
那麼在出現預設建議時
Siri可以對記錄進行搜索

00:47:48.467 --> 00:47:50.600 
會注意到我們在NSUser
Activity

00:47:50.667 --> 00:47:52.200 
基礎上做足了功夫

00:47:52.267 --> 00:47:53.667 
有Handoff功能

00:47:53.967 --> 00:47:57.300 
還有通用連接 搜索 建議等

00:47:57.733 --> 00:48:02.000 
這正是我們在現有基礎上
進行開發的絕佳實例

00:48:02.067 --> 00:48:04.600 
從而讓應用和
整個行業系統有更多成果

00:48:06.400 --> 00:48:09.667 
今天早上的重大消息
是多任務功能

00:48:09.767 --> 00:48:12.100 
我們很高興能
在今天和大家分享

00:48:13.633 --> 00:48:16.567 
有滑屏和拆分視圖

00:48:17.200 --> 00:48:21.267 
這些功能讓你在同一時間
進行多任務應用處理

00:48:21.733 --> 00:48:24.833 
我想大家肯定會有疑問

00:48:24.900 --> 00:48:27.000 
我該怎麼做

00:48:27.067 --> 00:48:29.167 
才能讓好好使用新功能呢

00:48:30.200 --> 00:48:33.900 
其實 答案不言而喻

00:48:34.700 --> 00:48:38.567 
大家可能還記得
去年我們推出自適應用戶界面

00:48:38.633 --> 00:48:40.167 
這是一個非常簡單的概念

00:48:40.633 --> 00:48:42.900 
與其設計一種佈局

00:48:42.967 --> 00:48:45.233 
與其設計固
定屏幕尺寸的用戶界面的

00:48:45.300 --> 00:48:50.067 
然後根據
窗口大小進行適應變化

00:48:50.733 --> 00:48:53.300 
而且我們還
提供了一些工具進行協助

00:48:53.833 --> 00:48:56.433 
可對文字進行動態佈局

00:48:56.500 --> 00:49:01.133 
以及根據用戶界面
的變化進行自動佈局

00:49:01.867 --> 00:49:03.067 
當然 現在我們知道

00:49:03.133 --> 00:49:05.233 
只有一個佈局是無法滿足

00:49:05.300 --> 00:49:07.433 
不同尺寸的屏幕要求

00:49:07.733 --> 00:49:11.333 
所以我們推出了尺寸分級

00:49:11.600 --> 00:49:14.700 
就可以選擇合適的佈局尺寸

00:49:14.767 --> 00:49:17.633 
無需查看設備

00:49:19.067 --> 00:49:23.433 
這是通過尺寸分類
屏幕大小實現的

00:49:23.500 --> 00:49:26.067 
分爲兩大類
常規級別和壓縮級別

00:49:26.133 --> 00:49:30.500 
在這裏你可以看到
iPad屏幕尺寸是常規級別

00:49:30.767 --> 00:49:34.100 
而iPhone則是緊湊級別

00:49:34.800 --> 00:49:37.200 
我們使用完全相同的機制

00:49:37.267 --> 00:49:38.933 
設計多任務用戶界面

00:49:40.000 --> 00:49:41.833 
你可以在這裏看到滑屏視圖

00:49:41.900 --> 00:49:44.600 
的尺寸是緊湊級別

00:49:44.900 --> 00:49:48.067 
當我在分屏視圖中
顯示兩個應用程序

00:49:48.967 --> 00:49:52.000 
我們調整了
左邊的主應用的邊界

00:49:52.567 --> 00:49:55.567 
調整到常規級別

00:49:56.233 --> 00:50:00.667 
現在 有趣的是
當你平均調整拆分視圖

00:50:01.167 --> 00:50:03.833 
不僅是調整這裏的窗口邊界

00:50:03.900 --> 00:50:07.267 
同時也會將左邊主應用尺寸

00:50:07.333 --> 00:50:09.200 
由常規調整好緊湊級別

00:50:10.100 --> 00:50:12.200 
我們發現在自己的應用中

00:50:12.267 --> 00:50:15.533 
這樣的窗口尺寸是最佳的

00:50:16.867 --> 00:50:20.567 
所以如果
你已經適應了應用的界面

00:50:21.033 --> 00:50:23.400 
那麼其他的可以交給該功能了

00:50:24.900 --> 00:50:26.600 
你需要使用分鏡功能

00:50:26.667 --> 00:50:30.100 
用於靈活替代默認ping

00:50:31.033 --> 00:50:33.733 
然後就可以支持所有其的了

00:50:33.900 --> 00:50:34.733 
就是這樣

00:50:35.067 --> 00:50:37.867 
克雷格今天上午提到
我們可以在數分鐘內轉換應用

00:50:37.933 --> 00:50:41.200 
並啓動運行

00:50:41.333 --> 00:50:42.200 
這真的很棒

00:50:43.567 --> 00:50:45.900 
今天早上
我們還宣佈了畫中畫功能

00:50:46.233 --> 00:50:49.133 
讓你可以在
不關閉其它應用的情況下

00:50:49.200 --> 00:50:50.633 
觀看視頻

00:50:51.067 --> 00:50:53.567 
如果你開發的是視頻應用

00:50:53.633 --> 00:50:56.733 
那麼這項功能
真的是爲你量身定製的

00:50:57.833 --> 00:50:59.133 
當然 你的設備必須

00:50:59.200 --> 00:51:01.633 
支持背景媒體播放

00:51:02.267 --> 00:51:05.933 
然後啓用畫中畫功能就可以了

00:51:06.700 --> 00:51:10.433 
我們將該功能內置到
標準媒體播放控制中

00:51:10.933 --> 00:51:15.733 
這樣圖形控制器能對畫中畫

00:51:16.300 --> 00:51:18.467 
進行精細控制

00:51:20.167 --> 00:51:22.167 
接下來我想談談Mac系統

00:51:23.033 --> 00:51:26.333 
當然OS X系統
已經有了多任務

00:51:26.400 --> 00:51:28.067 
多窗口功能

00:51:28.600 --> 00:51:31.667 
而且今年我們
還宣佈了新的窗口管理功能

00:51:31.967 --> 00:51:33.933 
這實在讓人激動

00:51:35.033 --> 00:51:36.367 
這裏的關鍵是

00:51:36.600 --> 00:51:40.800 
在拆分視圖裏
並排顯示兩個應用界面

00:51:41.267 --> 00:51:43.067 
正如這張截圖所見

00:51:44.767 --> 00:51:47.533 
現在 大家都容易適應

00:51:48.500 --> 00:51:52.433 
另外
可變窗口也可以支持該功能了

00:51:52.500 --> 00:51:56.600 
你只需要確保你的窗口

00:51:56.667 --> 00:51:59.900 
形狀美觀和寬度適中

00:52:00.300 --> 00:52:01.833 
以便和系統中的其他窗口適應

00:52:01.900 --> 00:52:03.800 
不會產生不良效果

00:52:04.633 --> 00:52:07.933 
當然 之前增加的
新程序接口AppKit功能

00:52:08.067 --> 00:52:09.567 
能夠使這項功能更爲便利

00:52:09.967 --> 00:52:13.733 
包括在NS拆分視圖控制器
自動隱藏工具條

00:52:15.433 --> 00:52:19.033 
Mac系統的
另一突破是壓力觸控

00:52:19.433 --> 00:52:22.233 
這在幾個月前已經發布了

00:52:23.267 --> 00:52:26.733 
壓力觸控開闢了
觸控的全新領域

00:52:27.067 --> 00:52:30.867 
有了觸控板的
壓力感應和觸覺反饋

00:52:32.000 --> 00:52:33.900 
我們在自己的
應用中使用該技術

00:52:33.967 --> 00:52:37.167 
如文本查找 壓感播放控制

00:52:37.233 --> 00:52:40.233 
同時還有預覽
和標記等精確控制

00:52:42.567 --> 00:52:45.900 
當然
我們還添加了一些程序接口

00:52:45.967 --> 00:52:47.467 
方便大家的
應用可以使用該功能

00:52:48.200 --> 00:52:50.467 
你可以設置壓力觸控

00:52:50.533 --> 00:52:51.933 
壓力配置的預設值

00:52:52.267 --> 00:52:55.533 
配置觸控板的默認觸覺反饋

00:52:56.067 --> 00:52:58.867 
以及視圖和手勢識別事件

00:52:58.933 --> 00:53:00.567 
壓力變化

00:53:01.233 --> 00:53:04.767 
我們相信Mac系統的
壓力觸控新功能會很受歡迎

00:53:05.233 --> 00:53:07.167 
我們很期待

00:53:07.233 --> 00:53:08.367 
大家如何充分利用該功能

00:53:10.033 --> 00:53:12.567 
現在 iCloud也更新了

00:53:14.167 --> 00:53:16.333 
去年我們推出了
iCloud Drive

00:53:16.500 --> 00:53:18.200 
極大方便訪問移動設備

00:53:18.267 --> 00:53:23.300 
電腦和網絡上的所有文件

00:53:25.067 --> 00:53:28.800 
現在在iOS系統中
應用能夠提供強大功能

00:53:28.867 --> 00:53:30.400 
用於管理你的文檔

00:53:30.800 --> 00:53:33.700 
並且我們認爲
這種簡單以應用爲中心的模式

00:53:33.767 --> 00:53:35.167 
對用戶非常有用

00:53:36.100 --> 00:53:38.533 
但是 Mac用戶習慣

00:53:38.600 --> 00:53:41.733 
直接在iCloud
Drive上直接處理文件

00:53:42.767 --> 00:53:45.467 
因此我們將新應用
iCloud Drive

00:53:45.533 --> 00:53:48.367 
應用添加到iOS系統中

00:53:55.467 --> 00:53:56.533 
看起來是這樣子的

00:53:56.600 --> 00:53:58.033 
現在 你可以方便查看

00:53:58.100 --> 00:54:01.033 
iCloud Drive
上的所有文件

00:54:01.667 --> 00:54:05.167 
你可以在應用中預覽文件

00:54:05.833 --> 00:54:09.667 
當然
你可以使用應用打開文件

00:54:11.400 --> 00:54:13.267 
在之前的iOS 9系統

00:54:13.333 --> 00:54:18.067 
只能將文件複製
到應用程序中才能打開

00:54:18.367 --> 00:54:22.100 
這正是用戶不想在
iCloudDrive儲存

00:54:22.567 --> 00:54:24.633 
或者處理文件的原因

00:54:25.700 --> 00:54:29.333 
我們真正想要的
是可以對文件進行編輯

00:54:29.400 --> 00:54:31.067 
無需移動或者複製就

00:54:31.900 --> 00:54:34.133 
因此如果你開發的
是一款基於文件的應用

00:54:34.333 --> 00:54:36.167 
這正是你們需要的

00:54:37.300 --> 00:54:38.900 
你需要能夠進行文件協調

00:54:38.967 --> 00:54:41.633 
因爲現在有了多進程

00:54:41.700 --> 00:54:43.600 
可以同步進行處理

00:54:44.200 --> 00:54:46.833 
而你只需要在記錄中進行添加

00:54:47.167 --> 00:54:49.700 
列出並使用應用打開回調

00:54:50.133 --> 00:54:50.967 
就是這樣

00:54:52.267 --> 00:54:55.400 
iCloud Drive
是基於CloudKit的

00:54:55.867 --> 00:54:59.100 
集iCloude服務於一身

00:54:59.633 --> 00:55:02.533 
CloudKit是
一個公共接口

00:55:02.833 --> 00:55:04.833 
我們開放接口

00:55:04.900 --> 00:55:06.300 
現在對所有人都開放了

00:55:06.700 --> 00:55:09.267 
那麼這實際上有什麼用途了

00:55:10.567 --> 00:55:14.433 
你可以在iCloud
Drive上免費儲存文件

00:55:14.500 --> 00:55:15.567 
無需成爲用戶

00:55:16.200 --> 00:55:18.533 
當你的應用用戶越來越多

00:55:18.833 --> 00:55:23.400 
數據馬上就會裝滿 直到最大限度

00:55:25.100 --> 00:55:27.767 
現在 我們搭建了
CloudKitDashboard

00:55:27.833 --> 00:55:31.133 
方便向大家介紹這些功能

00:55:31.500 --> 00:55:34.700 
其中包括一些免費功能

00:55:35.367 --> 00:55:38.067 
我們將在未來
不斷增加付費服務

00:55:38.133 --> 00:55:41.067 
這樣 用戶在使用
付費之前也會收到通知

00:55:41.700 --> 00:55:43.233 
另外 如果你使用付費服務

00:55:43.700 --> 00:55:47.167 
這裏有價格單和說明

00:55:48.333 --> 00:55:51.000 
你還可以在這裏找到
CloudKit其他信息

00:55:51.067 --> 00:55:52.533 
新功能的介紹等

00:55:52.600 --> 00:55:56.000 
如我們今年推出新功能

00:55:56.800 --> 00:55:58.500 
CloudKitWeb服務

00:55:59.267 --> 00:56:03.867 
這可以讓CloudKit
在網絡應用上實現運行

00:56:04.767 --> 00:56:06.067 
你可以做的是

00:56:06.467 --> 00:56:10.533 
CloudKit接口對接
可以通過JSON實現

00:56:11.067 --> 00:56:14.100 
我們提供與CloudKit
接口相當工具

00:56:14.167 --> 00:56:17.000 
JavaScript函式庫

00:56:17.567 --> 00:56:19.400 
我還提供了
Web login flow

00:56:19.467 --> 00:56:21.800 
這樣可以對用戶進行安全驗證

00:56:22.567 --> 00:56:24.500 
我們認爲這會變的很簡單

00:56:24.567 --> 00:56:26.900 
開發基於CloudKit
的網絡應用

00:56:27.200 --> 00:56:30.767 
和你的ipadiphone
mac一起運行

00:56:31.967 --> 00:56:34.167 
這就是
CloudKit 謝謝

00:56:38.333 --> 00:56:40.433 
現在我把現場交給
克里斯·拉特納

00:56:40.633 --> 00:56:42.500 
他將介紹Swift

00:56:42.767 --> 00:56:43.900 
克里斯·拉特納：好的

00:56:43.967 --> 00:56:45.033 
謝謝

00:56:50.033 --> 00:56:50.967 
謝謝你 託比

00:56:51.267 --> 00:56:53.100 
Swift現在
的相應很不可思議

00:56:53.367 --> 00:56:55.533 
真的很難想象

00:56:55.600 --> 00:56:57.367 
才過了一年的時間

00:56:58.467 --> 00:57:00.400 
當我們談到Swift

00:57:00.467 --> 00:57:01.800 
我們會談到
它的一些主要特徵

00:57:01.867 --> 00:57:05.833 
如性能 安全性和互動性

00:57:06.500 --> 00:57:10.067 
但我們希望每個人
都可以使用Swift

00:57:10.633 --> 00:57:14.200 
所以
我們開放編譯器和標準庫

00:57:14.633 --> 00:57:16.933 
甚至
簡化Linux board

00:57:25.267 --> 00:57:27.833 
將在OSI認證的協議下運行

00:57:28.100 --> 00:57:32.267 
今年晚些時候
搭建好的Swift2之後

00:57:33.000 --> 00:57:35.433 
我們期待與大家的更多合作

00:57:36.467 --> 00:57:39.633 
期待大家的貢獻和主意

00:57:41.400 --> 00:57:43.600 
現在關於Swift
已經有很多資料

00:57:44.167 --> 00:57:45.800 
我們不會一一說明

00:57:46.000 --> 00:57:51.467 
最喜歡的是Swift現在
是最佳的棧溢出編程語言

00:57:53.067 --> 00:57:55.067 
喜歡Swift的理由很多

00:57:55.900 --> 00:57:58.300 
其中之一是它的成功搭建

00:57:58.367 --> 00:57:59.700 
能夠高速運行應用

00:57:59.767 --> 00:58:02.233 
在過去的一年中
Swift代碼性突飛猛進

00:58:02.300 --> 00:58:04.367 
因爲我們已經
在編譯器中實現新的優化

00:58:05.500 --> 00:58:07.633 
另外
Swift2也有許多新改進

00:58:07.767 --> 00:58:09.667 
特別是在基板方面

00:58:11.167 --> 00:58:12.767 
現在我們簡單談談其中幾個

00:58:12.967 --> 00:58:15.633 
先從最熱門的一項開始吧

00:58:15.700 --> 00:58:16.967 
新的錯誤處理模式

00:58:18.867 --> 00:58:21.967 
錯誤處理是非常熱門的領域

00:58:22.333 --> 00:58:23.900 
已知的方法很多

00:58:24.867 --> 00:58:27.533 
但是這些方法也有一些問題

00:58:27.967 --> 00:58:30.700 
我們對現行方法並不滿意

00:58:30.767 --> 00:58:33.400 
因此
我們找到新方法 非常類似

00:58:34.100 --> 00:58:36.633 
但是可以處理好這些問題

00:58:37.133 --> 00:58:38.333 
我們現在談談

00:58:39.633 --> 00:58:40.500 
先從簡單的說起

00:58:41.333 --> 00:58:44.900 
Swift的功能或者方法是
標記錯誤

00:58:45.800 --> 00:58:48.700 
這極大簡化了
通用Cocoa API

00:58:49.033 --> 00:58:51.267 
以及允許編譯器驗證錯誤

00:58:51.333 --> 00:58:53.167 
是否得到合適的處理

00:58:54.533 --> 00:58:57.367 
Swift現在可以用類似的
catch語法處理錯誤

00:58:57.767 --> 00:59:01.267 
並且
使用功能強大的匹配模式

00:59:01.333 --> 00:59:03.100 
表達豐富的cache條件

00:59:04.633 --> 00:59:07.300 
Swift獨闢蹊徑
使用嘗試性關鍵字

00:59:08.267 --> 00:59:10.567 
用於標記調用

00:59:10.633 --> 00:59:11.800 
產生錯誤的方法

00:59:12.733 --> 00:59:15.967 
這重新對錯誤類型進行定義

00:59:16.033 --> 00:59:17.800 
當發生非預期控制流時

00:59:18.200 --> 00:59:20.133 
可以讓
該控制流在代碼中顯現出來

00:59:20.200 --> 00:59:21.633 
這樣可以對其進行分析處理

00:59:23.000 --> 00:59:25.933 
當然
處理錯誤將預期地簡單

00:59:26.533 --> 00:59:30.067 
而且Swift在
對用戶錯誤條件類型進行類型

00:59:30.300 --> 00:59:32.900 
和分類自定義
方面可謂完美無缺

00:59:33.400 --> 00:59:34.267 
真的很棒

00:59:35.467 --> 00:59:36.667 
現在 我們認爲Swift

00:59:36.933 --> 00:59:40.167 
錯誤處理功能將不再陌生

00:59:40.233 --> 00:59:41.700 
很容易接受

00:59:41.767 --> 00:59:43.733 
但是這也會極大提高

00:59:43.800 --> 00:59:45.400 
Swift代碼
在基板中的傳輸質量

00:59:46.567 --> 00:59:48.467 
現在我們可以
繼續談談下一個重大特色

00:59:48.533 --> 00:59:49.500 
接入性檢查

00:59:51.400 --> 00:59:55.333 
爲此 我們增加了全新的接口

00:59:55.867 --> 00:59:58.467 
經常我們也會
想要調用新的接口

00:59:58.533 --> 01:00:00.833 
增加應用的性能

01:00:01.267 --> 01:00:02.700 
但是我們
仍需要支持OS X

01:00:02.767 --> 01:00:05.067 
或者iOS的更早版本

01:00:05.967 --> 01:00:07.300 
這帶來一項挑戰

01:00:07.633 --> 01:00:11.600 
因爲你可以無條件
使用的某些符號

01:00:12.367 --> 01:00:14.567 
但是其他符號則對應用運行

01:00:15.133 --> 01:00:18.333 
所運行的OS系統
進行了條件限制

01:00:19.467 --> 01:00:21.267 
有了Swift 2
解決這問題輕而易舉

01:00:22.033 --> 01:00:24.433 
現在
如果你想直接使用一個符號

01:00:24.500 --> 01:00:25.367 
而不想進行檢查

01:00:25.667 --> 01:00:27.233 
那麼
編譯器將產生一條錯誤信息

01:00:27.833 --> 01:00:28.667 
這樣方便區分

01:00:29.467 --> 01:00:32.767 
另外 Xcode在這方面走得更遠
它提供了其他更好的方法

01:00:33.367 --> 01:00:36.467 
首次是你可以
使用新的“如有”語句

01:00:36.767 --> 01:00:39.133 
在需要的地方進行精確查找

01:00:46.233 --> 01:00:47.867 
但我認爲比那更好的是

01:00:48.133 --> 01:00:51.500 
你也可以標出整個方法

01:00:51.733 --> 01:00:55.567 
甚至整個類
根據OS新特徵

01:00:55.967 --> 01:00:58.033 
可消除在你的代碼中將出現的

01:00:58.300 --> 01:01:01.733 
細微檢查的需求
直接表達多種普通情況

01:01:02.033 --> 01:01:04.133 
是一種非常棒的解決方法
可以很好的一起使用

01:01:05.033 --> 01:01:06.433 
現在
Swift 2差錯處理特徵

01:01:06.500 --> 01:01:07.867 
和可用性檢查特徵

01:01:07.933 --> 01:01:10.800 
是更容易寫出正確代碼的

01:01:10.867 --> 01:01:12.000 
兩大方法

01:01:13.000 --> 01:01:16.167 
但 當然
我也想要你的代碼也很漂亮

01:01:17.533 --> 01:01:20.633 
所以在Swift 2中
我們做了數個大變動

01:01:21.300 --> 01:01:22.400 
Swift 1 引入一些

01:01:22.467 --> 01:01:24.700 
真正強大的整體通用函數

01:01:25.133 --> 01:01:28.200 
用算法做強大的東西

01:01:31.200 --> 01:01:32.467 
強大的 極好的

01:01:32.833 --> 01:01:35.567 
問題是 這些總是不夠用

01:01:36.000 --> 01:01:38.633 
比如說 我有一組數據
想按比例增加數字

01:01:38.700 --> 01:01:39.867 
並丟掉某些結果

01:01:40.367 --> 01:01:42.267 
用Swift 2這很簡單

01:01:42.733 --> 01:01:45.300 
但寫出來需要重排很多代碼

01:01:45.900 --> 01:01:48.800 
當你考慮時
你必須徹底地閱覽

01:01:48.867 --> 01:01:50.367 
這使得它很難被推出來

01:01:51.167 --> 01:01:53.300 
Swift 2
引進一種新的語言程序

01:01:53.367 --> 01:01:54.300 
叫協議擴展

01:01:55.300 --> 01:01:56.600 
使用協議擴展

01:01:57.000 --> 01:02:00.233 
可通過徹底改動這些
整體通用函數

01:02:00.333 --> 01:02:01.933 
讓它們至始至終都一樣

01:02:03.167 --> 01:02:05.600 
意思是說
你寫的新代碼很漂亮

01:02:05.667 --> 01:02:07.433 
很容易寫 也很容易讀

01:02:15.500 --> 01:02:17.333 
讓我們談談早退出

01:02:18.500 --> 01:02:21.067 
經常看到因爲某些原因
想要早點退出作用域

01:02:21.200 --> 01:02:23.200 
或許你有辦法 比如使用參數

01:02:23.467 --> 01:02:26.533 
可能是0 如果是0
它不起作用

01:02:26.600 --> 01:02:29.600 
好吧 如果讓的表述
爲你提供一種很熟悉

01:02:29.667 --> 01:02:32.133 
很舒服 很棒的方法
來檢查這些條件

01:02:32.333 --> 01:02:35.067 
但它需要你將所有的代碼
縮排成額外行

01:02:36.067 --> 01:02:39.067 
爲解決這個問題
我們引進了一種新的防護說明

01:02:39.133 --> 01:02:40.467 
允許你檢查條件

01:02:40.533 --> 01:02:41.833 
然後早點將其擺脫

01:02:41.900 --> 01:02:44.433 
允許你寫出漂亮的直接式程序

01:02:44.500 --> 01:02:45.933 
無需額外的縮進

01:02:53.133 --> 01:02:54.967 
下一個Swift
如何運作的一個大元件

01:02:55.033 --> 01:02:57.567 
和Cocoa配合使用
可達到什麼程度

01:02:58.800 --> 01:03:01.100 
但對於普通的
Objective-C API

01:03:01.167 --> 01:03:03.367 
Swift
編譯程序是否有指示器

01:03:03.433 --> 01:03:04.700 
毫無影響

01:03:04.767 --> 01:03:06.667 
或一個序列的單元類型是什麼

01:03:07.333 --> 01:03:09.800 
引入new features
subjective C

01:03:09.867 --> 01:03:10.800 
來解決這個問題

01:03:10.867 --> 01:03:13.300 
包括可以將指針類型
表達爲空性的能力

01:03:13.867 --> 01:03:17.867 
在Xcode 7
我們引入整個全新的

01:03:17.933 --> 01:03:20.367 
一級的基因體系

01:03:20.433 --> 01:03:23.900 
可讓你在
Objective-C中

01:03:23.967 --> 01:03:24.967 
表示單元類型

01:03:25.033 --> 01:03:27.233 
和許多其他的事

01:03:34.067 --> 01:03:37.067 
儘管採用了這個
和其他整組特徵

01:03:37.433 --> 01:03:39.033 
Cocoa感覺還是相當快

01:03:40.833 --> 01:03:42.500 
最後
讓我們來說說Xcode

01:03:43.533 --> 01:03:48.700 
Xcode 7引入
修改後的Swift移植器

01:03:49.400 --> 01:03:52.333 
它可自動將Swift 1
代碼移到Swift 2序列

01:03:52.633 --> 01:03:54.800 
包括採用新差錯處理模型

01:03:55.567 --> 01:03:58.133 
只要Swift語言繼
續演變發展

01:03:58.333 --> 01:04:00.500 
移植器也將
繼續發展與之匹配

01:04:01.967 --> 01:04:04.333 
下面 我們談談頭文件

01:04:06.000 --> 01:04:09.500 
但 等一下 有無頭文件

01:04:09.567 --> 01:04:11.033 
是Swift的明顯特徵
是吧

01:04:11.533 --> 01:04:13.967 
問題是 是否有時候你確實想

01:04:14.033 --> 01:04:16.800 
掃一眼一堆的代碼
看看它究竟是什麼

01:04:17.067 --> 01:04:20.000 
並以這種方式獲得
所有執行細節

01:04:21.233 --> 01:04:23.167 
Xcode
已經解決這個問題

01:04:23.233 --> 01:04:24.967 
通過引入新輔助編輯器

01:04:25.267 --> 01:04:26.833 
它提供
任意Swift源文件的

01:04:26.900 --> 01:04:28.633 
一個類似頭文件的意見

01:04:29.367 --> 01:04:32.000 
給於你所有頭文件略讀優勢

01:04:32.200 --> 01:04:36.000 
沒有寫保持
以及自己編輯的維護壓力

01:04:37.133 --> 01:04:38.000 
好極了

01:04:44.433 --> 01:04:45.733 
下一個 豐富的註釋

01:04:46.867 --> 01:04:48.233 
Xcode讓你寫出

01:04:48.867 --> 01:04:50.833 
漂亮的Swift
Playgrounds

01:04:50.900 --> 01:04:54.467 
通過
直接向Xcode編輯器

01:04:55.500 --> 01:04:58.833 
這些豐富評論使用非常流行的
Markdown syntax

01:04:59.233 --> 01:05:00.833 
現在我們已將它
應用到syntax

01:05:00.900 --> 01:05:02.567 
用來進行文檔註釋

01:05:03.533 --> 01:05:06.600 
我們也增加對新特徵的支持
比如內嵌圖像和鏈接

01:05:06.833 --> 01:05:08.867 
提供很棒的
始終如一的體驗

01:05:08.933 --> 01:05:10.967 
在Playgrounds
和doc註釋之間

01:05:11.500 --> 01:05:12.333 
最後

01:05:16.567 --> 01:05:18.400 
最後
來說Playgrounds

01:05:19.067 --> 01:05:21.100 
Playgrounds
對我們來說很重要

01:05:21.300 --> 01:05:23.733 
我們知道利用API
是一種很棒的體驗

01:05:24.033 --> 01:05:25.867 
也和Swift程式語言本身

01:05:26.467 --> 01:05:29.333 
認爲Playgrounds
也是教和學習

01:05:29.400 --> 01:05:30.767 
程序編制的一種好方法

01:05:31.267 --> 01:05:33.467 
所以
我們對其增加了一些特徵

01:05:33.800 --> 01:05:37.067 
包括
爲多重頁面增加最新的支持

01:05:38.167 --> 01:05:41.433 
爲了更好地進行展示
我要邀請麥斯·杜克曼上臺

01:05:46.767 --> 01:05:48.133 
麥斯·杜克曼:
謝謝克里斯

01:05:48.467 --> 01:05:52.533 
今天我要展示的是在
Xcode7中教和學習使用

01:05:52.933 --> 01:05:54.800 
Playgrounds
多麼簡單

01:05:57.600 --> 01:06:00.367 
讓我們從這開始我開發了
一個playground

01:06:00.433 --> 01:06:04.167 
關於Apple的製圖
API用來教學生

01:06:05.533 --> 01:06:06.967 
在這個部分

01:06:07.033 --> 01:06:10.733 
我爲他們介紹一個全新的
GameplayKit

01:06:12.033 --> 01:06:14.967 
如Playground所說
GameplayKit用來

01:06:15.033 --> 01:06:17.267 
開發技術以驅動遊戲設置

01:06:17.767 --> 01:06:19.600 
我們馬上就可以看到更多東西

01:06:21.800 --> 01:06:25.267 
Playground
使用形象化的飛車追逐

01:06:25.333 --> 01:06:28.100 
表現GameplayKit
部分功能

01:06:28.933 --> 01:06:30.567 
我創造了這個
Playground

01:06:30.633 --> 01:06:35.467 
所以我的學生
可以編輯壞蛋的車輛

01:06:36.500 --> 01:06:39.100 
只需調整這三個精靈節點變量
（SpriteNode）

01:06:40.700 --> 01:06:44.567 
現在Playgrounds
可以爲你

01:06:44.633 --> 01:06:45.900 
展示每個代碼行的結果

01:06:46.533 --> 01:06:50.367 
我們增加了聯機的功能

01:06:55.600 --> 01:06:57.600 
現在 我可以開始了

01:06:57.667 --> 01:07:00.233 
用學生將要用的方式編輯我的
Playground

01:07:01.333 --> 01:07:02.700 
通過改變數值

01:07:03.433 --> 01:07:05.333 
改變壞蛋的外貌

01:07:06.733 --> 01:07:08.733 
你可以看到 在我編輯時

01:07:09.200 --> 01:07:10.700 
變化也隨之更新

01:07:14.400 --> 01:07:16.033 
那是一輛壞蛋的車

01:07:18.133 --> 01:07:19.967 
至此 我讓我的學生

01:07:20.233 --> 01:07:21.833 
寫了點代碼

01:07:22.367 --> 01:07:26.633 
將壞蛋一起放到精靈中

01:07:28.000 --> 01:07:29.767 
現在 當我開始寫代碼

01:07:32.300 --> 01:07:36.900 
壞蛋就開始聚集了
我準備好了

01:07:38.000 --> 01:07:39.333 
這就是爲設置所做的

01:07:39.567 --> 01:07:41.533 
是時候開始重要的事情了

01:07:41.900 --> 01:07:43.733 
它會讓材料移動

01:07:44.367 --> 01:07:46.267 
這個我放在了其他頁面

01:07:47.333 --> 01:07:50.300 
頁面是一種好方法

01:07:50.567 --> 01:07:53.000 
可將Playgrounds
劃分成像書一樣的小主題

01:07:53.700 --> 01:07:57.367 
你可以使用頁面底部的

01:07:57.433 --> 01:07:58.700 
手動導航連接轉到其他頁面

01:07:59.700 --> 01:08:00.900 
你也可以使用跳轉欄

01:08:02.433 --> 01:08:04.200 
當然 還可以使用導航

01:08:05.367 --> 01:08:07.367 
這是我Playground
中所有的頁面

01:08:08.067 --> 01:08:12.700 
每個頁面都有軟件源和資源

01:08:13.033 --> 01:08:16.433 
所以你可以如你所願啓動
你的Playground

01:08:18.300 --> 01:08:19.600 
我們來檢查下一頁

01:08:21.767 --> 01:08:24.533 
現在存好導航 放到一邊

01:08:26.000 --> 01:08:28.200 
這個頁面是關於

01:08:28.267 --> 01:08:30.733 
GameplayKit
的集羣行爲

01:08:31.367 --> 01:08:34.033 
集羣是講壞蛋聚集在一起

01:08:34.267 --> 01:08:36.200 
並使之移動的單位

01:08:38.100 --> 01:08:39.800 
現在
不需要進一步的數據對象

01:08:40.167 --> 01:08:43.100 
我將
打開Xcode的時間抽助手

01:08:43.832 --> 01:08:46.133 
看看聚集者

01:08:48.633 --> 01:08:50.399 
好了 這就是所有的罪犯

01:08:50.466 --> 01:08:53.832 
各種壞蛋在追蹤
英勇無畏的英雄

01:08:54.399 --> 01:08:56.933 
但你可以看到 他們四處亂撞

01:08:57.867 --> 01:08:59.300 
真是集羣災難

01:09:00.899 --> 01:09:02.033 
來看看是否可以修正一下

01:09:04.133 --> 01:09:07.300 
這裏有數個參數 可以用來

01:09:07.367 --> 01:09:08.899 
管理集羣行爲

01:09:09.500 --> 01:09:11.167 
這個有意思 內聚性

01:09:11.800 --> 01:09:15.733 
用來控制壞蛋團結一致的程度

01:09:16.233 --> 01:09:17.966 
我可以立馬試試那個數值

01:09:18.332 --> 01:09:20.399 
立刻就可以看到效果

01:09:21.433 --> 01:09:23.332 
內聚性有點太大了

01:09:23.399 --> 01:09:24.767 
所以 讓它稍微小點

01:09:29.933 --> 01:09:31.832 
這個間隔好多了

01:09:31.899 --> 01:09:35.466 
但仍不是我想要的那種
目標一致

01:09:36.033 --> 01:09:38.567 
所以 我要試試尋找參數

01:09:39.899 --> 01:09:42.000 
設置一個不同的數值

01:09:42.067 --> 01:09:44.267 
看看能不能達到我想要的聚集

01:09:46.633 --> 01:09:47.466 
好了

01:09:48.367 --> 01:09:49.367 
現在他們聚集在一起了

01:09:50.733 --> 01:09:54.567 
現在我知道我想要的數值範圍

01:09:54.633 --> 01:09:56.433 
就可以告訴我的學生開始玩了

01:09:58.133 --> 01:09:59.633 
將助手儲存好 放一邊

01:10:01.100 --> 01:10:05.433 
將編輯器切換到原始標記

01:10:07.467 --> 01:10:10.400 
現在使用熟悉的
Markdown syntax

01:10:10.467 --> 01:10:13.367 
編輯Playground
的PROSE

01:10:14.600 --> 01:10:18.700 
我可以回到尋找參數

01:10:19.333 --> 01:10:22.667 
我也可以增加
額外的PROSE

01:10:22.733 --> 01:10:25.300 
讓我的學生和這些數值玩一玩

01:10:27.400 --> 01:10:29.000 
我也可以來到這裏

01:10:29.767 --> 01:10:34.000 
用圖表的形式增加一些品牌

01:10:35.167 --> 01:10:38.433 
現在 無論何時
有人問我是否知道聚集

01:10:38.500 --> 01:10:40.600 
我就可以說
我寫了一本關於聚集的書

01:10:42.967 --> 01:10:44.667 
謝謝 你很好

01:10:50.433 --> 01:10:53.400 
我們在Xcode 7中的
Playgrounds

01:10:53.467 --> 01:10:55.000 
僅加了少數的程序編寫特徵

01:10:55.500 --> 01:10:57.467 
等不及要看看
你們可以用它們做些什麼出來

01:10:57.667 --> 01:11:00.667 
現在爲告訴你一些
非常棒的Xcode特徵

01:11:00.900 --> 01:11:02.900 
有請馬太·菲力克上臺

01:11:09.900 --> 01:11:11.400 
馬太·菲力克：謝謝 麥斯

01:11:13.200 --> 01:11:17.333 
伴隨着watchOS
iOS和OSX新版本的發佈

01:11:17.733 --> 01:11:20.200 
我們很興奮爲你
提供Xcode 7

01:11:21.267 --> 01:11:26.067 
這個新發布的版本包括特徵
並支持所有平臺

01:11:26.633 --> 01:11:29.633 
且每個平臺的獨特體驗

01:11:29.700 --> 01:11:31.367 
已經被合併到工具中

01:11:31.533 --> 01:11:34.533 
使你能夠鎖定和釋放你的應用

01:11:34.900 --> 01:11:36.567 
到所有設備中

01:11:38.200 --> 01:11:40.167 
我今天將從獨特的體驗開始

01:11:40.467 --> 01:11:42.667 
使用設計工具 即界面生成器

01:11:43.433 --> 01:11:47.100 
首先是一種
展示你的應用的新方法

01:11:47.200 --> 01:11:48.267 
叫做堆棧視圖

01:11:53.900 --> 01:11:54.800 
對於堆棧視圖

01:11:54.867 --> 01:11:58.767 
你可以使用水平和垂直堆棧
設計你的應用

01:11:59.467 --> 01:12:01.267 
你可以從選擇方向開始

01:12:01.600 --> 01:12:02.600 
增加你的控制

01:12:03.600 --> 01:12:04.933 
每增加一個控制

01:12:05.000 --> 01:12:08.367 
堆棧視圖
將自動調整大小和定位

01:12:09.067 --> 01:12:10.833 
爲你提供正確的樣子

01:12:12.233 --> 01:12:15.100 
堆棧視圖出色的嵌套

01:12:15.167 --> 01:12:16.333 
可允許你改變方向

01:12:16.400 --> 01:12:19.033 
這樣 你就可以獲得
你完全想要的那個佈局

01:12:20.900 --> 01:12:23.300 
現在 我們已在自動版面配置
頂端建立堆棧視圖

01:12:23.533 --> 01:12:25.867 
它爲你處理所有的約束

0約束可以使你控制堆棧的


01:12:30.767 --> 01:12:32.367 
隊列 空間和分佈

01:12:33.900 --> 01:12:36.133 
堆棧視圖同樣靈活

01:12:36.200 --> 01:12:37.833 
你可以在界面生成器上

01:12:38.167 --> 01:12:40.533 
在運行時 和你的界面玩

01:12:41.833 --> 01:12:44.967 
當你在堆棧視圖增加控制時
你可對它們重新排序

01:12:45.133 --> 01:12:48.633 
嘗試不同的佈局
或許最好的情況是

01:12:48.967 --> 01:12:50.467 
當你在運行時隱藏視圖

01:12:51.000 --> 01:12:53.067 
堆棧視圖將自動調整

01:13:00.533 --> 01:13:03.233 
堆棧視圖是
界面生成器上的新方法

01:13:03.300 --> 01:13:05.533 
可使你完全獲得你想要的佈局

01:13:06.333 --> 01:13:07.833 
下一個是
Storyboard

01:13:07.900 --> 01:13:09.433 
references

01:13:10.867 --> 01:13:13.733 
使用Storyboard
你可以創造設計場景

01:13:13.800 --> 01:13:15.667 
用0代碼將他們連接在一起

01:13:15.933 --> 01:13:17.800 
以構成完整的用戶界面

01:13:19.033 --> 01:13:21.567 
現在 你的場景和界面進化了

01:13:21.633 --> 01:13:23.367 
變得有點複雜

01:13:23.667 --> 01:13:25.433 
你想要更容易的控制它

01:13:26.133 --> 01:13:28.133 
Storyboard
references

01:13:28.200 --> 01:13:30.167 
允許你截取一部分界面

01:13:30.300 --> 01:13:32.667 
並移動以分離
storyboard文件

01:13:33.000 --> 01:13:36.400 
保持連接

01:13:43.000 --> 01:13:45.067 
storyboard
references

01:13:45.133 --> 01:13:47.533 
使你的界面重點突出並模塊化

01:13:47.633 --> 01:13:49.600 
和你處理應用代碼相同的方式

01:13:50.033 --> 01:13:52.867 
也可很容易地設計你的應用流

01:13:54.933 --> 01:13:58.200 
和應用流
應用佈局同樣重要的

01:13:58.267 --> 01:14:00.600 
是應用外觀

01:14:01.333 --> 01:14:04.467 
在此次發佈我們製作了
值得一看的界面生成器

01:14:06.133 --> 01:14:07.000 
在接下來的場景中

01:14:07.067 --> 01:14:11.400 
你將看到
更多應用在界面生成器中

01:14:11.467 --> 01:14:12.667 
iOS 和OS X的可視化

01:14:13.967 --> 01:14:17.100 
畫布內將對模糊和陰影着色

01:14:18.600 --> 01:14:21.533 
振動則成爲展示的標準

01:14:22.900 --> 01:14:26.533 
而可設計的控制
可以展示隱蔽和陰影

01:14:26.700 --> 01:14:29.233 
組成你的場景中的其他視圖

01:14:30.900 --> 01:14:35.233 
結合這些可視化
以及先前的編輯器

01:14:35.567 --> 01:14:40.267 
可使你進一步
改進特殊界面的外觀和佈局

01:14:40.833 --> 01:14:42.433 
意思是 現在比以往更加可以

01:14:42.800 --> 01:14:45.533 
直接在界面生成器中
編輯界面

01:14:45.933 --> 01:14:48.367 
看看你的使用者
會在他們的設備上做什麼

01:14:56.433 --> 01:15:00.267 
創建應用的另一方面是
管理資產

01:15:00.833 --> 01:15:03.100 
含有工具的Xcode可與新

01:15:03.333 --> 01:15:04.667 
按需資源API配合使用

01:15:07.067 --> 01:15:09.100 
使用Xcode 7
你可以連接資產

01:15:09.167 --> 01:15:10.833 
發送到整個項目

01:15:11.500 --> 01:15:13.500 
以供下載和使用

01:15:14.600 --> 01:15:16.933 
每個標籤代表一個資源聚集

01:15:17.233 --> 01:15:18.600 
我們把它叫做包

01:15:19.700 --> 01:15:23.267 
每個單獨的資源
可申請多個標籤

01:15:23.467 --> 01:15:25.000 
這可使你

01:15:25.200 --> 01:15:26.333 
在不同的環境中使用資源

01:15:27.533 --> 01:15:29.933 
幫助你管理標記的資源

01:15:30.233 --> 01:15:33.267 
在項目編輯器中
Xcode包括一個標籤概述

01:15:34.267 --> 01:15:37.133 
在這裏 你可以很容易地增加
移除重命名標籤名

01:15:37.767 --> 01:15:39.267 
你可以改變包的內容

01:15:39.733 --> 01:15:43.033 
你也可以
安裝按需資源各個方面

01:15:43.300 --> 01:15:44.500 
比如下載命令

01:15:44.833 --> 01:15:46.000 
下載優先次序

01:15:47.700 --> 01:15:49.233 
當你建立應用時

01:15:49.500 --> 01:15:53.333 
你的標記資產
自動集合成資源包

01:15:53.800 --> 01:15:56.467 
你只需標記你的資產
然後就可以開始了

01:15:57.867 --> 01:15:59.500 
當你配置你的應用時

01:15:59.800 --> 01:16:02.500 
你的按需資源
將由App Store主導

01:16:03.500 --> 01:16:05.767 
在調試時
Xcode將在你的Mac上

01:16:05.833 --> 01:16:08.667 
主導按需資源

01:16:08.733 --> 01:16:10.400 
並根據要求輸到你的設備中

01:16:10.667 --> 01:16:12.500 
以模仿Store的下載行爲

01:16:13.833 --> 01:16:16.433 
對於使用
Xcode持續集成的人

01:16:16.900 --> 01:16:20.100 
程式即將建立
並主導你的按需資源

01:16:20.500 --> 01:16:23.700 
所以 你可以在你的團隊中
通過無線電進行測試App

01:16:25.233 --> 01:16:29.033 
最後 爲幫助你追蹤包

01:16:29.633 --> 01:16:32.500 
在進行調試時
調試計量表將顯示

01:16:32.567 --> 01:16:35.167 
所有按需資源進度和狀態

01:16:36.533 --> 01:16:39.533 
所有工具的組合

01:16:39.600 --> 01:16:42.767 
將讓你很容易的在
App上使用按需資源

01:16:45.467 --> 01:16:49.667 
Xcode 7還有很棒的
調試和性能分析工具

01:16:49.733 --> 01:16:53.000 
可以幫助你
進一步強化應用的質量

01:16:54.767 --> 01:16:57.767 
塞巴斯蒂安剛提到
我們重點放在電池壽命

01:16:58.500 --> 01:17:00.200 
擺脫你的大部分設備

01:17:00.300 --> 01:17:03.100 
充一次電即可支撐一整天
這很重要

01:17:03.700 --> 01:17:05.067 
所以 我們讓

01:17:05.133 --> 01:17:07.400 
能源使用跟蹤應用變得簡單

01:17:08.767 --> 01:17:12.300 
iOS新能量
計量器將顯示CPU使用

01:17:12.767 --> 01:17:15.900 
調用API聯網
以及定位服務

01:17:16.333 --> 01:17:18.600 
還將顯示你的App

01:17:18.733 --> 01:17:20.767 
從前臺到後臺的轉換

01:17:21.800 --> 01:17:26.267 
你可獲得應用行爲的內部信息
使用其它調試測量表

01:17:26.733 --> 01:17:28.233 
當你需要更多信息時

01:17:28.567 --> 01:17:31.567 
可通過儀器獲取所有細節

01:17:32.800 --> 01:17:35.533 
說到設備 設備已經更新

01:17:35.600 --> 01:17:37.000 
比以前更好了

01:17:38.033 --> 01:17:39.933 
目前 追蹤視野更緊湊

01:17:40.000 --> 01:17:44.067 
使用流動姿勢
可讓數據形象化更簡單

01:17:45.300 --> 01:17:48.367 
我們還有不少更新後的工具
以及新工具

01:17:48.433 --> 01:17:51.367 
可供你使用
比如核心位置分析

01:17:51.667 --> 01:17:53.700 
新CPU系統追蹤

01:17:55.900 --> 01:17:57.433 
在次次發佈中 我們將

01:17:57.500 --> 01:17:59.833 
Clang's Address
Sanitizer

01:17:59.900 --> 01:18:01.133 
整合到調試工作流程中

01:18:02.300 --> 01:18:05.267 
Address Sanitizer
是C語言的一種

01:18:05.533 --> 01:18:06.767 
內存錯誤檢測系統

01:18:07.967 --> 01:18:11.667 
一旦激活Xcode將監視應
用的內存使用情況

01:18:11.967 --> 01:18:15.400 
檢測普通問題 比如緩衝超限

01:18:16.433 --> 01:18:18.533 
檢測出來時
Xcode將通知你

01:18:18.700 --> 01:18:21.733 
並提供基本細節
幫助你進行診斷

01:18:22.033 --> 01:18:23.100 
調試問題

01:18:24.100 --> 01:18:26.633 
和其他類似的工具不同

01:18:26.833 --> 01:18:28.933 
Address
Sanitizer速度很快

01:18:29.300 --> 01:18:32.767 
速度快到
你可以在你的交互應用中使用

01:18:35.800 --> 01:18:38.800 
但是儘管有
如此出色的調試和分析工具

01:18:39.100 --> 01:18:40.333 
有時

01:18:40.800 --> 01:18:43.567 
漏洞會泄露 並造成崩潰

01:18:44.300 --> 01:18:45.867 
爲幫助你儘快解決這個問題

01:18:46.167 --> 01:18:48.733 
Xcode
爲崩潰日誌整合支持

01:18:51.167 --> 01:18:53.533 
將你的App提交到
提交到TestFlight

01:18:53.600 --> 01:18:54.433 
謝謝

01:18:55.133 --> 01:18:57.733 
提交到TestFlight
和app store

01:18:57.800 --> 01:18:58.667 
Xcode會提供

01:18:58.733 --> 01:19:00.267 
symbolicated
crashes

01:19:00.333 --> 01:19:01.500 
服務於每一項任務

01:19:03.267 --> 01:19:05.567 
整合後
將爲你提供一份更新清單

01:19:05.633 --> 01:19:09.167 
關於apps最常見的崩潰
告訴你回溯

01:19:09.767 --> 01:19:13.467 
崩潰的細節
以及最近發生崩潰的排行榜

01:19:14.467 --> 01:19:16.700 
你可以重新命名崩潰
以方便追蹤

01:19:17.267 --> 01:19:18.567 
你也可以增加備註

01:19:18.833 --> 01:19:22.000 
當你搞定崩潰時
可以對其做記號

01:19:23.533 --> 01:19:26.433 
當你回顧回溯時
你想讓它變得簡單些

01:19:27.033 --> 01:19:29.367 
所以Xcode有Open
In Project鍵

01:19:29.767 --> 01:19:33.367 
可使你將回溯
下載到程序中的調試導航

01:19:33.667 --> 01:19:35.367 
提供熟悉的工作程序

01:19:35.500 --> 01:19:38.100 
爲崩潰幀引導源代碼

01:19:38.433 --> 01:19:40.033 
找出問題 並解決問題

01:19:49.200 --> 01:19:52.933 
早春時我們爲
你們的iOS應用提供崩潰日誌

01:19:53.633 --> 01:19:55.467 
今天以Xcode7開頭

01:19:55.533 --> 01:19:57.800 
你將拿到OS X
應用的崩潰日誌

01:19:58.400 --> 01:20:01.700 
watchOS
應用的崩潰日誌也將很快出來

01:20:02.900 --> 01:20:05.367 
這此次發佈 我們還將提供

01:20:05.433 --> 01:20:09.033 
應用擴展到所有平臺的
app的崩潰日誌

01:20:09.267 --> 01:20:11.300 
你就可以很好的
進行追蹤和改善

01:20:17.933 --> 01:20:20.800 
另一種改善應用的方法是測試

01:20:21.333 --> 01:20:23.067 
我都喜歡測試 對吧

01:20:25.433 --> 01:20:26.267 
我再試一下

01:20:26.333 --> 01:20:28.067 
我都喜歡測試 對吧

01:20:32.433 --> 01:20:36.800 
很好 因爲測試
是傳送好應用的基本

01:20:37.200 --> 01:20:39.333 
今年 你有兩個顯眼的新添置

01:20:40.900 --> 01:20:43.933 
測試方法的核心是
XE測試框架

01:20:44.200 --> 01:20:47.233 
和測試導航
這些都將爲你進行設計

01:20:47.300 --> 01:20:49.667 
組織測試提供不錯的方法

01:20:50.800 --> 01:20:53.567 
在這之上
Xcode爲你提供了不少

01:20:53.633 --> 01:20:54.800 
測試應用的方法

01:20:56.400 --> 01:20:58.333 
你可以檢測你API的正確性

01:20:58.667 --> 01:21:00.833 
隨時測量追蹤它們的性能

01:21:02.167 --> 01:21:05.333 
你可以在測試代碼評估
代碼的同步行爲和異步行爲

01:21:06.233 --> 01:21:11.267 
不斷的測試木馬集成

01:21:12.567 --> 01:21:14.067 
所有這些組合在一起

01:21:14.133 --> 01:21:17.167 
可以做出一個
強大的測試解決方案

01:21:18.167 --> 01:21:19.633 
但我們
想要啓發一個Notch

01:21:19.933 --> 01:21:23.333 
所以今年
我們增加了用戶界面測試

01:21:31.500 --> 01:21:33.633 
這建立在相同的測試基礎之上

01:21:33.867 --> 01:21:35.533 
現在
你可以進行正確性和性能測試

01:21:35.700 --> 01:21:38.867 
這些測試在用戶界面上完成

01:21:39.100 --> 01:21:41.433 
將進一步擴大測試覆蓋

01:21:42.467 --> 01:21:45.800 
說到覆蓋 我們也增加了

01:21:52.733 --> 01:21:54.500 
代碼覆蓋是一種很棒的新方法

01:21:54.567 --> 01:21:56.267 
可用來評估測試進展

01:21:56.500 --> 01:21:58.700 
確保你能做所有你想要的測試

01:21:59.667 --> 01:22:01.667 
所以 讓我們來快速的看一下

01:22:01.733 --> 01:22:05.300 
新UI測試和Xcode
7中代碼覆蓋率特徵的演示

01:22:10.033 --> 01:22:12.967 
這裏有一個
我和我的團隊正在做的應用

01:22:13.500 --> 01:22:15.600 
是iOS和
iOS X中的一個

01:22:15.667 --> 01:22:18.033 
SpriteKit遊戲
叫做Demo Bots

01:22:18.967 --> 01:22:22.100 
在我們開發應用時
我們同樣做了測試

01:22:22.167 --> 01:22:24.067 
從這裏可以看到
在測試導航中

01:22:24.133 --> 01:22:25.933 
有不少測試很有用

01:22:27.167 --> 01:22:31.067 
我們可以知道
哪個部分的代碼還未進行測試

01:22:31.433 --> 01:22:33.500 
或因爲我們還未寫測試

01:22:33.867 --> 01:22:36.533 
或因爲目前的測試
並不完整

01:22:38.000 --> 01:22:40.833 
對於Xcode 7
這正是可獲得的

01:22:40.900 --> 01:22:42.767 
帶代碼覆蓋率測試的內部信息

01:22:44.033 --> 01:22:46.533 
一測試Xcode
就會收集覆蓋率數據

01:22:47.100 --> 01:22:49.167 
跳到測試報告

01:22:49.733 --> 01:22:51.633 
我們可以
看到有一個新覆蓋率部分

01:22:53.167 --> 01:22:54.833 
覆蓋率部分的內部

01:22:55.133 --> 01:22:57.533 
應用中的所有文件被列出

01:22:57.933 --> 01:22:59.300 
它們的右邊有一個指示器

01:22:59.367 --> 01:23:02.100 
顯示每個文件的覆蓋率百分比

01:23:03.033 --> 01:23:05.900 
現在 在這個清單中
我按照從高到低進行分類

01:23:06.200 --> 01:23:07.333 
這樣看起來好多了

01:23:07.400 --> 01:23:10.533 
往下滾動
可以看到這裏還有些工作要做

01:23:12.500 --> 01:23:15.600 
對於列表中的每個文件
你可以公開內容

01:23:15.667 --> 01:23:17.167 
看看方法的覆蓋率

01:23:17.233 --> 01:23:19.033 
以及此處說包含的功能

01:23:19.767 --> 01:23:21.000 
對於這個我已經公開的文件

01:23:21.067 --> 01:23:23.700 
前兩個功能覆蓋率100%

01:23:24.000 --> 01:23:26.233 
但其他三個的覆蓋率爲0

01:23:28.100 --> 01:23:32.067 
對於項目 報告爲你提供
覆蓋率的高度概括

01:23:32.500 --> 01:23:35.033 
但是我們想
直接爲你提供信息

01:23:35.767 --> 01:23:38.700 
看看這裏
當我操作一個源文件時

01:23:38.900 --> 01:23:40.567 
我們直接將代碼覆蓋率信息

01:23:40.633 --> 01:23:41.800 
帶到源編輯器中

01:23:42.500 --> 01:23:43.800 
黑色的這部分

01:23:43.867 --> 01:23:46.100 
是還未進行測試的代碼

01:23:46.967 --> 01:23:49.767 
非常好
這樣我就知道該關注哪裏

01:23:50.600 --> 01:23:52.767 
它和助理編輯器也配合得很好

01:23:53.167 --> 01:23:56.367 
因爲你可以有源代碼
並一起進行測試

01:23:56.733 --> 01:23:59.633 
一旦測試持續進行
就更新信息

01:24:01.833 --> 01:24:04.467 
如果我們回到報告
看看未覆蓋的類

01:24:04.533 --> 01:24:07.933 
大部分是用戶界面類

01:24:08.033 --> 01:24:09.367 
它們是視圖自控器 等等

01:24:10.200 --> 01:24:11.067 
所以 幫我一下

01:24:11.133 --> 01:24:13.100 
我要創建一個用戶界面測試

01:24:14.700 --> 01:24:18.033 
我已經建立一個用戶
界面測試bundle和類

01:24:18.600 --> 01:24:19.833 
我將從這裏挑選

01:24:20.867 --> 01:24:24.233 
我想要寫的測試程序是
用來測試遊戲選擇板

01:24:25.433 --> 01:24:30.467 
新API和XE測試可使你與
用戶轉換元件互動

01:24:30.733 --> 01:24:31.967 
訪問他們的設備

01:24:32.233 --> 01:24:34.933 
觸發行動
真的很容易寫出來

01:24:36.000 --> 01:24:38.967 
但比寫UI
測試更簡單的是什麼 知道嗎

01:24:39.033 --> 01:24:41.733 
記錄一個
讓我來告訴你怎麼做

01:24:43.067 --> 01:24:44.667 
我先解除項目導航

01:24:44.733 --> 01:24:46.267 
爲自己釋放一些空間

01:24:46.867 --> 01:24:49.567 
以及測試中我想進行的插入點

01:24:50.067 --> 01:24:52.200 
我將點擊一下編輯器底部的

01:24:52.267 --> 01:24:53.133 
小記錄按鈕

01:24:54.400 --> 01:24:56.767 
你可以看到在我操作時
Xcode開始應用

01:24:57.767 --> 01:24:59.400 
請注意

01:24:59.467 --> 01:25:01.033 
左上角的測試

01:25:01.967 --> 01:25:04.833 
首先我想要你點擊
應用中的選擇按鈕

01:25:05.600 --> 01:25:06.467 
你可以看到

01:25:06.767 --> 01:25:09.167 
Xcode
正在記錄測試代碼的

01:25:09.233 --> 01:25:10.067 
插入對應線

01:25:18.600 --> 01:25:20.200 
你可以看到API非常簡單

01:25:20.433 --> 01:25:23.033 
它正在爲窗口和按鈕詢問應用

01:25:23.333 --> 01:25:24.267 
告訴我們點擊

01:25:25.833 --> 01:25:27.600 
測試的下一步

01:25:27.667 --> 01:25:28.933 
我要填上玩家的名字

01:25:29.000 --> 01:25:31.500 
我開始在標準玩家把手這打字

01:25:31.667 --> 01:25:34.033 
你可以看到這裏
兩件很酷的事情發生了

01:25:34.533 --> 01:25:36.367 
第一 當我在文本域打字時

01:25:36.433 --> 01:25:39.267 
編輯器也跟着更新
並展示數值

01:25:39.667 --> 01:25:40.500 
非常的酷

01:25:41.400 --> 01:25:42.600 
另一個是

01:25:42.667 --> 01:25:44.900 
UI記錄注意到我正在和

01:25:44.967 --> 01:25:47.767 
同一用戶的界面因素
進行不止一次的互動

01:25:48.067 --> 01:25:50.633 
它重構測試代碼
爲它創建一個局部變量

01:25:51.400 --> 01:25:54.467 
這使得測試可讀

01:25:54.533 --> 01:25:56.967 
意味着後續很容易
重構並重新使用代碼

01:25:58.400 --> 01:26:00.867 
我們繼續從這挑選一些選擇項

01:26:00.933 --> 01:26:02.100 
你可以看到測試升級了

01:26:02.833 --> 01:26:05.500 
對於最後一個要素
我要從這選一個不同的機器人

01:26:05.833 --> 01:26:08.833 
我將按這個按鈕
選擇藍色機器人

01:26:10.100 --> 01:26:12.267 
點擊完成
回去看我的測試

01:26:13.600 --> 01:26:17.233 
和記錄一樣
很容易就可追蹤我所有的行動

01:26:18.033 --> 01:26:20.233 
測試還可以做更多的事

01:26:20.300 --> 01:26:22.533 
我們可驗證一些數值

01:26:23.200 --> 01:26:25.867 
在點擊完成按鈕之前
讓我們先插入一些代碼

01:26:26.100 --> 01:26:27.767 
檢查設置是否正確

01:26:29.100 --> 01:26:31.267 
我將在這插入一些代碼

01:26:31.333 --> 01:26:34.067 
從界面獲取有效機器人的數值

01:26:34.267 --> 01:26:35.100 
這是在文本域中

01:26:35.400 --> 01:26:38.600 
我將和我預料的數值進行對比
藍色機器人

01:26:40.067 --> 01:26:42.633 
沒有進一步的動態數據對象
可以開始測試了

01:26:43.700 --> 01:26:44.600 
我不介入

01:26:45.667 --> 01:26:47.233 
這裏可以看到它正在更新數值

01:26:47.533 --> 01:26:48.500 
選擇正確的機器人

01:26:48.867 --> 01:26:50.967 
驗證測試 測試通過了

01:27:00.733 --> 01:27:03.200 
所以記錄產生編寫
UI測試真的很容易

01:27:04.567 --> 01:27:07.433 
我們可以看看Xcode
內部的測試並局部運作

01:27:07.767 --> 01:27:10.367 
我們也可以
讓它在持續集成木馬上運作

01:27:11.133 --> 01:27:14.500 
我爲應用iOS和OSX版本
設置一些木馬

01:27:15.200 --> 01:27:19.000 
如果選擇iOS版本
看看測試

01:27:19.667 --> 01:27:21.033 
當我過濾掉失敗的測試

01:27:21.100 --> 01:27:22.100 
我看到一些有趣的東西

01:27:22.933 --> 01:27:26.167 
我有四個界面測試
它們iPhone上通過測試

01:27:26.500 --> 01:27:27.867 
但在iPad上 測試失敗

01:27:29.567 --> 01:27:31.967 
爲方便診斷測試失敗原因

01:27:32.067 --> 01:27:34.567 
每個運行測試包括
所有運行過的測試行爲的副本

01:27:34.633 --> 01:27:39.367 
看到這些
我可以通過擴展測試

01:27:39.967 --> 01:27:41.667 
這是一份清單測試的所有行爲

01:27:41.733 --> 01:27:43.200 
是關於剛纔就開始運行的

01:27:44.767 --> 01:27:46.667 
因爲可以看到用戶界面測試

01:27:46.733 --> 01:27:48.133 
我想要更進一步

01:27:48.633 --> 01:27:51.233 
每一個行動都包含平面截圖

01:27:52.167 --> 01:27:54.800 
如果我檢查
iPhone上通過的測試

01:27:55.067 --> 01:27:57.433 
我可以得到一個平面截圖
關於測試如何開始的

01:27:57.700 --> 01:27:58.667 
這是我們遊戲的開始

01:27:59.400 --> 01:28:01.733 
我也可以查看測試的中間部分

01:28:02.100 --> 01:28:03.000 
這裏 我們用鍵盤

01:28:03.067 --> 01:28:04.700 
在文本域中敲入一個數值

01:28:05.467 --> 01:28:07.333 
我同樣可以看測試的最後部分

01:28:07.667 --> 01:28:10.633 
這是在點擊
完成按鈕前UI的情形

01:28:11.933 --> 01:28:14.400 
如果我將其翻過來
在iPad上看測試

01:28:14.467 --> 01:28:16.733 
並一直跳過 直到最後部分

01:28:17.433 --> 01:28:20.433 
可看到這是iPad UI
所有設置都正確

01:28:21.033 --> 01:28:21.867 
但沒有完成按鈕

01:28:22.500 --> 01:28:24.500 
顯然 在UI中
我們錯誤安裝了一些東西

01:28:24.567 --> 01:28:28.033 
屏幕截圖可以很快地
幫我們縮小範圍

01:28:29.533 --> 01:28:31.600 
代碼覆蓋率告訴我
在哪裏寫測試

01:28:32.067 --> 01:28:33.600 
UI測試和記錄讓我可以

01:28:33.667 --> 01:28:34.867 
很容易的獲取更多的覆蓋率

01:28:34.933 --> 01:28:36.867 
新測試記錄幫我

01:28:36.933 --> 01:28:37.967 
縮小問題範圍

01:28:38.733 --> 01:28:40.167 
以上是關於Xcode 7

01:28:40.267 --> 01:28:42.233 
代碼覆蓋率和UI
測試的信息

01:28:52.167 --> 01:28:56.400 
用戶界面測試
使系統可達性的使用與

01:28:56.667 --> 01:28:58.267 
UI要素相互作用

01:28:58.967 --> 01:29:02.367 
意思是如果你已經
讓你的app具有可達性

01:29:02.833 --> 01:29:05.167 
那麼你也已經
讓你的app具有可測試性

01:29:06.633 --> 01:29:11.533 
UI測試同樣可用於根據尺寸
和定位設計的Uis中

01:29:11.600 --> 01:29:13.133 
包括從右到左的支持

01:29:13.600 --> 01:29:14.933 
也就是說你的UI測試

01:29:15.000 --> 01:29:18.467 
可以
測量你的UI中所有的演示

01:29:20.400 --> 01:29:23.067 
新API 是的
你可以爲它鼓掌

01:29:27.833 --> 01:29:33.200 
新API和XE測試
使用於

01:29:33.267 --> 01:29:34.967 
Swift和
Objective-C

01:29:35.267 --> 01:29:37.967 
UI記錄
將生成你所使用的任何一個

01:29:39.733 --> 01:29:43.000 
這些是你在
Xcode7可找到的新特徵

01:29:43.067 --> 01:29:47.067 
在你爲我們平臺創建
App時就可以看到

01:29:55.633 --> 01:29:58.733 
現在 我們要和你們
分享一些令人興奮的新技術

01:29:58.800 --> 01:30:00.500 
它們可用在遊戲和製圖中

01:30:00.567 --> 01:30:03.467 
我將邀請我的同事
傑夫· 斯特爾上臺

01:30:07.233 --> 01:30:08.933 
傑夫· 斯特爾：
謝謝你馬太·菲力克

01:30:10.100 --> 01:30:11.733 
我很激動
Xcode 7實在令人驚訝

01:30:12.800 --> 01:30:15.433 
能在
這裏和你們談論遊戲和製圖

01:30:16.067 --> 01:30:18.533 
似乎就在不久前
我們在這裏介紹了

01:30:18.600 --> 01:30:22.200 
我們首個與遊戲有關的
API Game Center

01:30:22.267 --> 01:30:23.633 
或社交類遊戲網絡

01:30:24.667 --> 01:30:28.133 
從那之後
我們一直爲API的鍵盤輸入

01:30:28.200 --> 01:30:31.600 
和製圖技術忙碌像
遊戲控制器SceneKit

01:30:31.967 --> 01:30:34.100 
SpriteKit
以及最近的Metal

01:30:35.567 --> 01:30:39.033 
今年我們推出了
不少新遊戲技術

01:30:39.767 --> 01:30:43.733 
包括使你的繪圖
現代化的Model I/O

01:30:44.667 --> 01:30:47.533 
ReplayKit用來
拓展遊戲的社會範圍

01:30:48.333 --> 01:30:52.933 
Game Center用來爲你的
遊戲增加超級厲害的大腦

01:30:53.500 --> 01:30:57.967 
而且 我們把所有的這些
都放在GameKit裏

01:30:58.833 --> 01:31:02.567 
只要有一個GameKit
所有功能均觸手可及

01:31:03.233 --> 01:31:04.333 
很棒的解決方法

01:31:04.633 --> 01:31:08.000 
在我們平臺上發展遊戲的
極其完整的解決方法

01:31:09.767 --> 01:31:12.467 
讓我們來看看GameKit
上的某些很酷的新特徵

01:31:12.900 --> 01:31:13.767 
從Metal開始

01:31:14.933 --> 01:31:16.367 
你知道Metal是

01:31:16.433 --> 01:31:19.367 
去年我們爲
iOS推出的3DAPI

01:31:19.867 --> 01:31:23.467 
我們真的很興奮
今年我們將它引進OS X

01:31:25.000 --> 01:31:28.000 
作爲翻新產品
讓我們來看一個例子

01:31:28.067 --> 01:31:32.167 
我們最近從OpenGL移到
Metal的遊戲開發

01:31:33.533 --> 01:31:35.900 
這裏有個遊戲 開始時

01:31:36.500 --> 01:31:38.933 
是在OpenGL上運行
你可以看到

01:31:39.100 --> 01:31:44.267 
OpenGL處理命令使得
一個CPU完全飽和

01:31:44.500 --> 01:31:46.700 
這使得遊戲
玩法進入第二個CPU

01:31:47.100 --> 01:31:50.600 
這個CPU並不繁忙
事實上 在這個例子中

01:31:50.667 --> 01:31:52.900 
我們看到CPU有
40%處於閒置狀態

01:31:55.400 --> 01:31:56.600 
移到Metal

01:31:56.667 --> 01:31:59.533 
我們徹底地減少
處理命令的時間

01:31:59.800 --> 01:32:01.067 
我們有API

01:32:01.133 --> 01:32:02.900 
你可以更直接的爲GPU編程

01:32:02.967 --> 01:32:05.533 
如果你選擇
你可以將處理命令分開

01:32:05.800 --> 01:32:07.033 
穿過多重芯部

01:32:07.500 --> 01:32:12.600 
在這個例子中
我們釋放了GPU的全部性能

01:32:14.667 --> 01:32:18.200 
我們和第三方開發人員合作
爲OSX開發Metal

01:32:19.467 --> 01:32:20.400 
讓我們花一分鐘

01:32:20.467 --> 01:32:23.667 
看看他們在Mac上所做的

01:32:24.933 --> 01:32:27.633 
很高興爲你們介紹
大衛·麥克德蘭

01:32:27.700 --> 01:32:28.967 
他來自
Adobe Systems

01:32:29.033 --> 01:32:30.300 
將爲我們展示

01:32:30.367 --> 01:32:32.333 
他們使用OSX
對Metal做了什麼

01:32:38.167 --> 01:32:39.467 
大衛·麥克德蘭:
非常感謝

01:32:39.533 --> 01:32:42.167 
去年春天
Adobe曾很激動

01:32:42.267 --> 01:32:44.533 
當Apple把iOS引進
Metal的iOS時

01:32:44.700 --> 01:32:46.933 
事實上 我們已經用它來優化

01:32:47.000 --> 01:32:48.267 
部分流行的iOS App

01:32:48.333 --> 01:32:50.667 
Premier Flip
Photoshop Mix

01:32:50.733 --> 01:32:51.767 
而且看到了很好的結果

01:32:52.567 --> 01:32:55.000 
當Apple告訴我們
Metal被引入到OSX

01:32:55.067 --> 01:32:56.167 
我們非常的激動

01:32:56.867 --> 01:32:59.400 
這樣一來 我們就可以
在這些平臺分享我們的代碼

01:33:00.100 --> 01:33:02.467 
今天我將展示
我們的一些進展

01:33:02.533 --> 01:33:04.933 
Mac OS的兩款旗艦產品

01:33:05.000 --> 01:33:06.833 
Illustrator
和After Effects

01:33:06.900 --> 01:33:08.267 
我們來看一下

01:33:15.300 --> 01:33:18.200 
這是當前版本的
Adobe Illustrator

01:33:18.867 --> 01:33:23.033 
裏面有大量的原圖
超過三十萬點

01:33:23.500 --> 01:33:25.200 
漸變和合成模式

01:33:27.333 --> 01:33:29.800 
我將繼續
並對這張原圖做縮放

01:33:31.667 --> 01:33:33.467 
你可以看到

01:33:34.100 --> 01:33:36.233 
在處理那張複雜的原圖時
速度有點慢

01:33:37.200 --> 01:33:38.767 
我真想看看我們能否做些改善

01:33:40.067 --> 01:33:42.567 
用這個版本 我們將展示

01:33:42.633 --> 01:33:45.400 
在我們用了整個繪製引擎
並將它放到Metal上時

01:33:45.467 --> 01:33:47.000 
我們可以用Metal做什麼

01:33:47.400 --> 01:33:49.000 
事實上 它很好用

01:33:49.067 --> 01:33:54.233 
它們將展示出
有不斷縮放功能的全新特徵

01:33:55.133 --> 01:33:58.467 
當你考慮我們可以用
Metal做什麼的時候

01:33:59.033 --> 01:34:00.600 
你可以看到結果出人意料

01:34:01.400 --> 01:34:05.200 
事實上 我可以一直縮放
放大很多

01:34:07.533 --> 01:34:08.967 
直到你可以看到文本信息

01:34:17.333 --> 01:34:19.967 
這也很大程度上改變了藝術家
使用我們產品時的工作方式

01:34:21.333 --> 01:34:23.100 
現在我想談一下
後遺效應

01:34:23.267 --> 01:34:25.900 
這裏有一盤錄像來自極限運動
團videographer

01:34:25.967 --> 01:34:27.800 
Devin
Supertramp

01:34:27.867 --> 01:34:28.867 
讓我們快速瀏覽一遍

01:34:42.833 --> 01:34:43.667 
十分有趣

01:34:44.133 --> 01:34:46.300 
我們要的是
從中選擇一個鏡頭

01:34:46.367 --> 01:34:48.400 
用後遺效應進行分析
加入一些效果

01:34:48.467 --> 01:34:49.667 
將其製作成商品廣告插播

01:34:50.700 --> 01:34:52.267 
所以在這裏 我將做一些

01:34:52.333 --> 01:34:54.467 
色彩校正 波紋特效

01:34:54.800 --> 01:34:56.833 
和鏡頭光斑特效
接下來

01:34:56.900 --> 01:34:58.400 
脫離Metal重新播放一遍

01:35:01.167 --> 01:35:03.433 
你可以看到它在
中央處理器中運行十分困難

01:35:03.967 --> 01:35:04.833 
也不能產生

01:35:04.900 --> 01:35:06.600 
我們所傾向的交互性能

01:35:06.667 --> 01:35:08.033 
並提供給文字編排人員

01:35:09.233 --> 01:35:11.600 
這也是對程序員的一種挑戰
他們要時刻注意這一點

01:35:11.667 --> 01:35:13.500 
看看
能利用Metal做些什麼

01:35:14.167 --> 01:35:15.367 
所以短時間內 他們需要

01:35:15.433 --> 01:35:18.333 
將這三個
效應轉移給Metal之後

01:35:18.400 --> 01:35:20.600 
你們會發現
相當驚人的不同

01:35:20.667 --> 01:35:22.867 
現在我切換到
相同的編制

01:35:23.167 --> 01:35:24.600 
但這次
那些特效將會被替換

01:35:24.667 --> 01:35:26.667 
轉變爲Metal版本
下面我再重播一遍

01:35:27.567 --> 01:35:29.567 
你可以馬上看到實時運行

01:35:30.300 --> 01:35:33.433 
不需要降低框架
我們看到

01:35:33.500 --> 01:35:35.933 
這些特效達到
八倍的性能優化

01:35:36.167 --> 01:35:38.700 
很大程度上減少
處理器使用量

01:35:39.467 --> 01:35:41.933 
因此奧多比公司
致力於將Metal

01:35:42.000 --> 01:35:44.767 
引入到Mac操作系統
創新雲應用中

01:35:44.833 --> 01:35:47.333 
如Illustrator
及我今天爲你展示的後遺效應

01:35:47.467 --> 01:35:49.900 
當然還有Photoshop
和Premier Pro

01:35:50.067 --> 01:35:51.433 
我們很激動看到Metal

01:35:51.500 --> 01:35:52.567 
爲雲用戶所做的一切

01:35:52.833 --> 01:35:53.667 
非常感謝

01:35:59.800 --> 01:36:01.833 
傑夫 斯特爾：
大衛 謝謝你 這不可思議

01:36:01.900 --> 01:36:03.833 
我同意克雷格的觀點
這十分有趣 因爲

01:36:03.900 --> 01:36:07.833 
你可以進行
非實時交互作用並轉換爲

01:36:07.900 --> 01:36:10.433 
流暢的用戶交互

01:36:11.000 --> 01:36:13.400 
但Metal不僅適用於
應用程序

01:36:13.700 --> 01:36:15.067 
當我們說到今天早上

01:36:15.633 --> 01:36:19.267 
iOS系統中關鍵的圖形技術

01:36:19.500 --> 01:36:22.533 
接入就將OS
X系統以及應用程序界面

01:36:23.333 --> 01:36:25.933 
直到現在
像核心動畫技術

01:36:26.300 --> 01:36:28.133 
以及硬件加速的核心圖像

01:36:28.433 --> 01:36:31.700 
移文檔Safari頁面顯示
都已被置於開放圖形語言頂端

01:36:32.433 --> 01:36:36.700 
這意味着中央處理器
疲於應對圖形處理器的指令

01:36:38.233 --> 01:36:41.667 
運用Metal我們
可以提高效率改進性能

01:36:41.900 --> 01:36:43.833 
尤其是關鍵的用戶級別任務

01:36:46.300 --> 01:36:48.300 
此外 我們不想僅僅

01:36:54.033 --> 01:36:55.467 
提升系統性能

01:36:55.567 --> 01:36:59.133 
我們真正想做的
是想讓所有人可以很輕鬆地

01:36:59.200 --> 01:37:00.133 
使用Metal

01:37:00.400 --> 01:37:01.867 
因此
我們引入MetalKit

01:37:02.667 --> 01:37:04.533 
通過它可以瞭解Metal

01:37:04.833 --> 01:37:06.700 
這對你來說是一份重擔

01:37:07.233 --> 01:37:09.500 
MetalKit可以做
很多事從繪製渲染循環

01:37:09.900 --> 01:37:13.367 
到通過交互作用加載3D模型

01:37:13.433 --> 01:37:15.133 
主要是同藝術家
I/O模式的交互作用

01:37:15.200 --> 01:37:17.633 
事實上
MetalKit可以將網格

01:37:17.700 --> 01:37:19.000 
直接輸入Metal緩衝器

01:37:19.067 --> 01:37:22.500 
運用所能做的去渲染場景

01:37:23.767 --> 01:37:24.700 
不僅如此

01:37:25.400 --> 01:37:28.333 
Metal着色器是高性能

01:37:28.400 --> 01:37:30.633 
圖像處理着色器主要
應用於Metal應用程序

01:37:31.167 --> 01:37:34.600 
這些都是基於圖形處理器的
平行計算着色器

01:37:34.667 --> 01:37:39.500 
個別再次轉變爲
我們的圖形處理器使我們更易

01:37:39.800 --> 01:37:41.000 
使用Metal

01:37:42.367 --> 01:37:44.200 
所以現在 你擁有極佳的
渲染管道

01:37:44.267 --> 01:37:46.267 
但也需要豐富的儲存信息

01:37:46.767 --> 01:37:48.200 
因此我們使用I/O模型

01:37:48.767 --> 01:37:51.400 
有時使用3D模型
加載和運行比較難處理

01:37:52.733 --> 01:37:54.000 
這都多虧了I/O模型

01:37:54.333 --> 01:37:56.633 
簡化了內容加載

01:37:56.700 --> 01:38:00.167 
使不同文件格式的內容
可直接輸入SceneKit

01:38:00.233 --> 01:38:02.833 
或通過與MetalKit
交互作用輸入到Metal中

01:38:02.900 --> 01:38:05.933 
但它將自己區分在於
處理光照的方式

01:38:07.400 --> 01:38:12.433 
I/O模型向你提供
最先進光線跟蹤的

01:38:15.300 --> 01:38:17.567 
材料照明方式

01:38:17.833 --> 01:38:20.867 
這意味着
它驚人地提供

01:38:20.933 --> 01:38:21.933 
紋理映射

01:38:22.067 --> 01:38:22.900 
讓我們看一下

01:38:23.267 --> 01:38:24.367 
從基線開始

01:38:24.700 --> 01:38:27.233 
這僅是一個模型
它是通過紋理載入

01:38:28.067 --> 01:38:29.233 
這很難讓人感興趣

01:38:29.300 --> 01:38:30.133 
事實上 它比較單調

01:38:30.267 --> 01:38:33.400 
我認爲九零後
希望重新啓用該模型

01:38:33.700 --> 01:38:35.200 
如果我們除去紋理

01:38:35.267 --> 01:38:37.433 
並應用全球
照明方式

01:38:37.500 --> 01:38:38.367 
那麼我們看到的

01:38:38.433 --> 01:38:40.133 
是那些看起來
十分真實的事物

01:38:41.067 --> 01:38:43.200 
我們再將紋理添加進來
就會得到一些

01:38:43.267 --> 01:38:44.267 
看起來很棒的東西

01:38:44.467 --> 01:38:47.000 
最後 當然
即使使用I/O模型

01:38:47.067 --> 01:38:49.000 
以及它的照明方式
你也可以添加自定義照明

01:38:49.067 --> 01:38:52.267 
和陰影
使事物看起來更加真實

01:38:52.333 --> 01:38:55.033 
你可以得到
一些驚人的結論從普通

01:38:55.400 --> 01:38:58.433 
到非凡 I/O模型
可以向你提供卓越的解決方案

01:38:58.800 --> 01:39:00.700 
幫助你的模型和照明

01:39:01.600 --> 01:39:03.433 
所以現在
你擁有極佳的渲染管道

01:39:03.867 --> 01:39:05.533 
也有極佳的模型和儲存信息

01:39:05.767 --> 01:39:06.833 
現在只需好的遊戲設置

01:39:07.000 --> 01:39:08.767 
因此我們有了
GameplayKit

01:39:09.667 --> 01:39:11.900 
遊戲設置可分爲兩個領域

01:39:11.967 --> 01:39:14.800 
我們有導航
否則你如何在遊戲裏移動目標

01:39:15.167 --> 01:39:17.833 
我們也有策略
否則遊戲如何思考

01:39:17.933 --> 01:39:20.133 
GameplayKit
對這兩方面都有解決方案

01:39:21.000 --> 01:39:24.300 
GameplayKit基於
組件的應用程序界面完全保障

01:39:24.533 --> 01:39:25.700 
遊戲設置的對策

01:39:25.767 --> 01:39:28.333 
不論你是想追蹤
其他玩家的黃金

01:39:28.800 --> 01:39:31.433 
還是想從甲地到乙地追蹤敵人

01:39:31.500 --> 01:39:33.100 
並且消除途中的障礙

01:39:33.600 --> 01:39:35.800 
就需要生成確定隨機數

01:39:35.867 --> 01:39:38.100 
以便下次進行在線聯機遊戲

01:39:38.433 --> 01:39:39.833 
遊戲設置也爲你提供解決方案

01:39:39.900 --> 01:39:42.467 
從簡單遊戲到複雜遊戲

01:39:42.700 --> 01:39:44.933 
我們認爲遊戲設置
可以有效地幫助你們

01:39:45.000 --> 01:39:45.933 
開發遊戲

01:39:48.167 --> 01:39:51.833 
我們從社會組成開始
即遊戲中心

01:39:52.733 --> 01:39:55.333 
ReplayKit可以擴展
到社會交互作用

01:39:55.667 --> 01:39:59.800 
ReplayKit允許玩家
錄製電視節目重播

01:39:59.867 --> 01:40:00.867 
主要針對遊戲開放

01:40:01.200 --> 01:40:03.400 
他們可以保存或分享錄像

01:40:03.700 --> 01:40:06.167 
它屬於硬件加速具有高性能

01:40:06.900 --> 01:40:09.167 
十分便於你們操作

01:40:09.533 --> 01:40:11.800 
便於將其添加到遊戲中
也許

01:40:11.867 --> 01:40:14.200 
它可以開展下一次的
病毒式市場營銷活動

01:40:14.567 --> 01:40:15.567 
來推廣遊戲項目

01:40:18.100 --> 01:40:20.233 
最後是SceneKit
和SpriteKit

01:40:20.600 --> 01:40:22.400 
我們對他們進行了一些偉大的更新

01:40:22.467 --> 01:40:25.000 
但我覺得最有趣的
或者說最引人注目的

01:40:25.767 --> 01:40:26.933 
是我們創建了一些工具

01:40:27.233 --> 01:40:30.667 
可以讓SceneKit
和SpriteKit

01:40:30.733 --> 01:40:34.400 
直接導入Xcode 7系統
接下來由我的同事

01:40:34.467 --> 01:40:36.000 
Jacques Gasselin
de Richebourg

01:40:36.067 --> 01:40:38.933 
向你們展示Xcode 7
內部工具

01:40:46.567 --> 01:40:49.467 
去年的Xcode 6系統
我們引進了視覺場景編輯

01:40:49.533 --> 01:40:51.833 
添加進Xcode 系統的
SpriteKit

01:40:51.900 --> 01:40:53.300 
今年 我們引進了一個缺口

01:40:53.567 --> 01:40:56.500 
並將動畫編輯
添加進Xcode系統

01:40:56.800 --> 01:40:59.367 
所以在這裏
我會做一些場景剪切

01:40:59.667 --> 01:41:03.100 
你們會看到可愛的紅色小熊
他將往前走

01:41:03.167 --> 01:41:05.233 
穿過兩條峽谷走到另一邊

01:41:05.300 --> 01:41:07.267 
這些都是基礎的動畫技術
我在這裏呈現一下

01:41:07.633 --> 01:41:11.333 
我想要將此分層導入到動畫中

01:41:11.767 --> 01:41:13.933 
很明顯 我們首先讓它運行

01:41:14.633 --> 01:41:16.400 
接下來 抓取一個動作

01:41:16.533 --> 01:41:18.600 
現在
讓我們進行最有趣的操作

01:41:18.800 --> 01:41:19.933 
這是一個參考行爲

01:41:20.367 --> 01:41:22.733 
意味着它實際上
儲存在另一個文件裏

01:41:22.833 --> 01:41:24.833 
即
actions.sks文件

01:41:25.333 --> 01:41:28.133 
我在這裏進行參考
就可以進行排版操作

01:41:28.733 --> 01:41:29.733 
所以我打算抓取下來

01:41:30.100 --> 01:41:32.500 
當然
這和複製粘貼或一樣簡單

01:41:33.067 --> 01:41:36.267 
我打算多做幾次
它就會很自然地附加

01:41:36.667 --> 01:41:37.600 
在相同的軌道後

01:41:38.533 --> 01:41:39.967 
讓我們看一下
接下來

01:41:40.033 --> 01:41:42.567 
這次我們使用清除器
所以它是一個時間線

01:41:42.633 --> 01:41:45.500 
一個有清除器的時間線
你可以隨時預覽

01:41:45.567 --> 01:41:47.367 
動畫的大致模樣

01:41:49.267 --> 01:41:52.067 
這不僅
是一個極佳的預覽工具

01:41:52.333 --> 01:41:53.867 
實際上
它也是不錯的編輯工具

01:41:54.367 --> 01:41:56.433 
你可以注意到他沒有跳過峽谷

01:41:56.500 --> 01:41:59.233 
這是個問題 我們將進行調整

01:42:00.133 --> 01:42:02.267 
讓我們想出 他跳躍的好時機

01:42:03.267 --> 01:42:05.067 
看起來這裏是最好的

01:42:06.000 --> 01:42:07.567 
之後
我們要抓取一個移動瞬間

01:42:08.400 --> 01:42:09.800 
讓他在這裏跳躍

01:42:09.867 --> 01:42:11.533 
現在
注意是如何抓取時間線的

01:42:12.233 --> 01:42:15.467 
好 下面讓它
增長100個單元

01:42:16.467 --> 01:42:18.567 
再次使用時間線

01:42:19.267 --> 01:42:20.233 
計算出頂點值

01:42:20.300 --> 01:42:21.133 
大約在這裏

01:42:21.200 --> 01:42:23.433 
現在看一下持續時間

01:42:24.200 --> 01:42:25.533 
好了嗎？這很簡單

01:42:26.367 --> 01:42:29.200 
很明顯 當他跳起來
我想讓他減速

01:42:29.267 --> 01:42:31.067 
這意味着
在一開始 他速度很快

01:42:31.133 --> 01:42:32.700 
在頂點時卻很慢

01:42:33.267 --> 01:42:35.467 
複製 粘貼 反過來

01:42:36.867 --> 01:42:37.700 
達到負100

01:42:38.767 --> 01:42:39.867 
然後開始加速

01:42:39.933 --> 01:42:42.067 
使他能夠在頂點停滯

01:42:42.933 --> 01:42:44.333 
好 讓我們對此淨化

01:42:44.867 --> 01:42:46.167 
這是拋物線式跳躍

01:42:46.300 --> 01:42:48.833 
完美 現在 可以看到
它有點怪異

01:42:48.900 --> 01:42:52.133 
如果他在空中停留的話
所以讓我們添加一個動畫

01:42:52.733 --> 01:42:55.467 
注意 我在每個動畫頂端
進行分層

01:42:55.567 --> 01:42:57.467 
這次我們使用
SpriteKit進行操作

01:42:57.800 --> 01:43:01.933 
現在我要抓取
跳躍長度的動畫

01:43:02.600 --> 01:43:04.267 
進入媒體庫

01:43:04.767 --> 01:43:05.900 
取出跳躍畫面

01:43:06.633 --> 01:43:10.800 
過濾掉跳躍
選中它 就可以選中全部

01:43:11.633 --> 01:43:13.567 
拖拽 好的

01:43:14.167 --> 01:43:15.267 
很好 現在對此淨化

01:43:15.700 --> 01:43:16.867 
好 一個完美的跳躍

01:43:18.233 --> 01:43:20.167 
現在 這裏有兩個峽谷

01:43:20.233 --> 01:43:21.500 
重複兩次操作

01:43:21.767 --> 01:43:24.700 
最簡單的方式
是將此轉變爲參考

01:43:25.467 --> 01:43:27.400 
選中 點擊右鍵

01:43:28.333 --> 01:43:31.433 
轉變爲參考
將此命名爲Jump

01:43:32.233 --> 01:43:34.600 
儲存進
actions.sks文件

01:43:34.767 --> 01:43:35.967 
我之前運行過

01:43:36.733 --> 01:43:37.600 
好 很好 這就是跳躍

01:43:37.667 --> 01:43:40.900 
再次使用清除器
設置另一次跳躍

01:43:41.100 --> 01:43:42.700 
參考最大的用途

01:43:43.033 --> 01:43:45.133 
是它們在這裏出現
直接顯示在目標程序庫中

01:43:45.433 --> 01:43:47.367 
我只需將它拖拽進來

01:43:48.567 --> 01:43:50.433 
現在就完成了
我們的最終剪輯畫面

01:43:52.200 --> 01:43:53.633 
好 跳躍 再跳躍

01:43:54.133 --> 01:43:57.633 
很好 好的 謝謝大家

01:44:02.533 --> 01:44:06.233 
最棒的一點 對於參考而言
就是它們不僅幫助你

01:44:06.300 --> 01:44:07.800 
設置其他場景 還有編碼

01:44:08.400 --> 01:44:11.900 
接下來這裏我們運用Sk操作

01:44:11.967 --> 01:44:13.833 
加載相同的操作過程
將它們連接過去

01:44:13.900 --> 01:44:16.900 
連接到左右鍵
以及空格鍵來跳躍

01:44:17.433 --> 01:44:18.667 
讓我們操作一下
看一下過程

01:44:20.500 --> 01:44:22.200 
現在利用熊貓進行剪輯場景

01:44:22.667 --> 01:44:24.233 
完美 現在我來控制它

01:44:24.300 --> 01:44:25.967 
看着 左 右

01:44:26.533 --> 01:44:27.500 
跳躍

01:44:29.267 --> 01:44:30.267 
很簡單

01:44:35.567 --> 01:44:37.867 
大家都很忙

01:44:38.567 --> 01:44:41.133 
所以轉化到下一個動畫

01:44:42.500 --> 01:44:45.533 
對Xcode 7系統不熟悉
我們擁有完整的視覺場景編輯

01:44:45.900 --> 01:44:47.700 
運用SceneKit編輯
3D儲存信息

01:44:48.933 --> 01:44:51.433 
這個編輯程序很像
SpriteKit2D程序

01:44:51.733 --> 01:44:52.567 
同樣的工作原理

01:44:52.900 --> 01:44:54.300 
拖拉
以添加新信息

01:44:55.100 --> 01:44:57.800 
也可以使用3D中的調製器
環繞拖動

01:44:58.367 --> 01:44:59.767 
對齊到其他事物

01:45:00.267 --> 01:45:01.300 
你甚至可以複製

01:45:03.033 --> 01:45:04.433 
還有一些物理過程

01:45:04.567 --> 01:45:07.700 
以及編輯器內部的動畫

01:45:07.767 --> 01:45:10.467 
現在我們進行動畫繪製

01:45:11.967 --> 01:45:15.167 
很好
讓我們與此進行交互作用

01:45:16.300 --> 01:45:17.367 
播放

01:45:17.433 --> 01:45:21.433 
就可以從之前的演示中
看到同樣可愛的熊貓

01:45:25.600 --> 01:45:26.467 
讓我們試一下

01:45:29.133 --> 01:45:31.800 
這是一隻紅色熊貓
而不是狐狸 是一隻紅色熊貓

01:45:33.133 --> 01:45:35.633 
繼續操作接下來

01:45:35.700 --> 01:45:37.600 
將其與之前的小資料塊
進行交互作用

01:45:38.233 --> 01:45:40.333 
好 剔除出去

01:45:40.400 --> 01:45:43.967 
很好 在這個遊戲中
播放這隻小紅熊

01:45:44.033 --> 01:45:45.700 
它正在採摘花朵和珍珠

01:45:48.533 --> 01:45:49.533 
很遺憾

01:45:50.500 --> 01:45:52.900 
我承諾
在製作過程中不會傷害到熊貓

01:45:56.833 --> 01:45:58.433 
這不僅是對現階段的演示

01:45:58.767 --> 01:46:00.700 
實際上 我們在向你展示

01:46:01.200 --> 01:46:02.233 
這是個樣本

01:46:02.300 --> 01:46:05.233 
你可以設計下一個
3D SceneKit遊戲

01:46:06.033 --> 01:46:07.667 
使用這個編輯器
SceneKit

01:46:07.733 --> 01:46:09.700 
以及Xcode7系統
謝謝大家

01:46:09.767 --> 01:46:11.167 
接下來
讓我們歡迎安德里亞斯

01:46:17.967 --> 01:46:18.800 
好的

01:46:18.967 --> 01:46:22.267 
讓我們快速回顧一下
我們會上討論過的技術

01:46:23.267 --> 01:46:25.367 
今天
我們宣佈了OSs的新版本

01:46:25.433 --> 01:46:27.533 
新的本地化watchOS
軟體開發套件

01:46:28.633 --> 01:46:32.533 
該套件含多個新應用程序界面
你可以充分利用

01:46:32.600 --> 01:46:33.767 
尤其是在遊戲過程中

01:46:34.733 --> 01:46:37.133 
新的最優化技術包括應用瘦身

01:46:37.867 --> 01:46:40.467 
轉換的新版本讓軟件運行更快

01:46:40.533 --> 01:46:43.167 
同時
可以讓你編寫更有效的代碼

01:46:44.133 --> 01:46:46.600 
當然
目前Xcode系統的新版本

01:46:46.667 --> 01:46:49.067 
具有用戶界面記錄和檢測

01:46:50.333 --> 01:46:52.867 
這些技術有利於你下載

01:46:52.933 --> 01:46:56.100 
今天下午全球開發者大會
參與者門戶上面的內容

01:46:56.833 --> 01:46:58.500 
我們希望你可以很快採用它們

01:46:58.567 --> 01:47:01.533 
甚至爲用戶設計
更具創新性的應用

01:47:02.233 --> 01:47:04.367 
請繼續載入所有素材

01:47:04.433 --> 01:47:05.867 
讓我們知道你對它的看法

01:47:07.733 --> 01:47:10.933 
此外 我們也進行一些創新
在今年 使用飛行試驗服務

01:47:11.000 --> 01:47:14.100 
從今天開始 你們可以
對應用進行配置

01:47:14.167 --> 01:47:17.400 
適用於飛行測試中
iOS 9軟件開發工具包

01:47:17.467 --> 01:47:21.500 
接下來的幾周裏我們會繼續加
大支持 尤其是對分層應用

01:47:22.033 --> 01:47:25.033 
點播資源以及Bitcodes
所以你可以檢測自己的應用

01:47:25.100 --> 01:47:28.433 
在我們發行iOS 9之前
運用這些新技術

01:47:28.500 --> 01:47:29.333 
預計今年下半年

01:47:30.333 --> 01:47:31.167 
超過一百個講座

01:47:31.233 --> 01:47:33.167 
超過一百五十個實驗室
超過一個apple工程師

01:47:36.900 --> 01:47:39.167 
當然 在這裏
我們有很多機會去學習

01:47:39.233 --> 01:47:41.267 
在會議上討論的這些技術

01:47:41.333 --> 01:47:43.300 
而且 你還可以參加
一百多次會議

01:47:43.800 --> 01:47:46.833 
去衆多實驗室獲取項目幫助

01:47:46.900 --> 01:47:48.867 
實際上 有一百多名
蘋果公司工程師

01:47:48.933 --> 01:47:51.267 
在現場回答你的問題

01:47:51.767 --> 01:47:53.300 
所以 我希望
你們可以享受此次會議

01:47:53.367 --> 01:47:54.800 
並在此周之後
收到你們的回覆