下午好！
我叫布鲁斯·斯塔德尼克 来自iOS联络小组 
能向你们介绍新“联系人框架” 我十分激动 
<br/> 如果你是第一次用Apple平台 
你就会知道在你的app中使用联系人是如何简单 
而如果你是Address Book方面的资深开发者
你就会爱上这个新框架 
那么 这个“联系人框架”是什么？
我们倾听到了你们对Address Book的反馈 
今天我们就来解决提出最多的请求 
Address BookFramework
提供了一个访问联系人的
Objective-CAPI这个API在设计上也能兼容Swift
对此我们和你们一样都激动万分 
这个新Contacts Framework有多个设计目标
现在我来看看其中的几个关键目标 
首先 满足大多数一般仅需要获取联系人、
而不会修改联系人的app的需求 
我们为线程安全只读用途设计了这个API 
总体上 这是通过常量值对象实现的 
这些对象不会引用数据存储 
这样你就可以在你的app的队列之间非常容易地
传递联系人 而不会出现意外的输入/输出 
此外 OS X、iOS和watchOS
也上架了同样的联系人API
<br/> 你学会了这个API以后
就可以在多个Apple平台上访问联系人 
如果你还用Address Book的话 
那么它就要被弃用了 
我们一直没有意识到我们对我们的设备上的
联系人是多么的自傲 
比如说 当我们接到一通电话时 
我们只能看到一个电话号码 我们就会想了：打电话的是谁？
是家人吗？
是朋友吗？
还是又一个电话推销员？
如果能把联系人显示出来 那就更好了 
哦 是约翰·阿普尔西德 我的一个最好的朋友 
每个人在自己的设备上都有联系人 
它们可以帮助我们知道正在和我们进行沟通的
是谁 帮助我们打电话、发电子邮件 
进行其它交流 
比如说我可以对我的设备说：你好Siri
打电话给约翰·阿普尔西德 
没问题 搞定了 
正在呼叫约翰·阿普尔西德iPhone的扬声器已经开启 
布鲁斯·斯塔德尼克：联系人就是在我们的设备上的
用户体验的中心
那么“联系人框架”是如何处理这一
联系信息呢？
我们再用约翰·阿普尔西德当一回例子 
对于你们中那些熟悉AddressBook的人来说这就是个快速回顾
这是约翰的头像照片 他的名 
他的姓
他的私人电子邮箱
他的工作电子邮箱 
他的iPhone的电话号码 
这些联系属性代表了
这个联系信息 
这个头像图片用图像数据表示 
名字分成了几个元件 
名字表示名 
姓氏则表示姓 
私人电子邮箱和工作电子邮箱都由
电子邮件地址表示 
电话号码由电话号码表示 
有多个联系属性 
你可以参考联系人资料 了解更多细节 
现在 我们来谈谈这个对象 
这是CNContact对象 
这是联系属性的常量值对象 
它是仿照NSDictionary设计的 
有一个可变子类 CNMuteableContact
你可以用它来修改联系属性 
“联系人框架”使用的都是模型 
对于有多个值 像电子邮件地址、
电话号码 的联系属性来说 
就该轮到一个CNLabeled Value阵列出马了
CNLabeledValue是标签和值的一个常量元组 
标签在其中是一个字符串 而值则是一个对象 
比如 一个电子邮件地址的字符串 
值可以有标签 以便和一个属性的多个
值进行区分 
比如到底是一个私人电子邮箱还是一个工作电子邮箱 
对于你们中那些熟悉Address Book的人来说 
AB多值被这个CNLabeledValue阵列取代了 
是的 你听到的没错 没有AB多值了 
现在我想再拿约翰·阿普尔西德举个例子 
创建一个新的联系人 
我们首先导入联系人 
然后创建一个可变联系人 
正如我们将要增加的联系人一样 
然后我们把约翰的头像设为NSData到imageData 
然后把他的名字设为givenName到familyName 
那么对于约翰的两个电子邮件地址 
我们创建两个CNLabeled值 其中一个是CNLabelHome 
另一个是CNLabelWork 
“联系人框架”上有一些
预定义标签 
这些预定义标签有本地字符串 
你可以在你的app UI用这些标签 
你还可以创建自己的定制标签 
我们拿出这两个标签值 私人电子邮件和工作
电子邮件 放到一个阵列 在电子邮件地址上设置好 
就这么简单 
我们也可以同样处理约翰的电话号码 
同样 我们创建一个CNLabeled值 
使用iPhone预定义标签 当成一个值、创建一个
CNPhoneNumber对象 把标签值放到阵列 
然后设为电话号码 
我还知道约翰的家庭住址 我也可以添加家庭住址 
我先创建一个CNMuteablePostalAddress 
设好信息 
然后再用LabelHome创建一个标签值 
放到阵列中 然后设为通讯地址 
最后 我还知道他的生日 
我就可以创建一个NSDateComponent 
设置好年、月、日元件 
然后把它设为生日属性 
要注意 “联系人框架”中的所有
日期相关的属性都是NSDate元件 
这样就可以灵活设置日期 
比如不足一年的生日 
这样你就可以忽略年份元件 
“联系人框架”也可以对这些联系对象进行
运算 
这里 你可能对格式化联系数据感兴趣 
CNContactFormatter
将会格式化一个联系人的名字 
在这个例子中 我们格式化了全名 然后
又得到了约翰·阿普尔西德 
CNContactFormatter
还可以正确格式化国际名字 
我们还有一个格式化程序
CNPostalAddressFormatter 
可以格式化通讯地址的邮件标签 
然后就会返回这个 
CNPostalAddressFormatter可以正确格式化
国际化通讯地址 
我们建议你尽量在你的app中使用这些格式化程序 
现在 我想请戴夫上台 
请他给你们演示下如何在你的app中使用联系人 
谢谢 布鲁斯 
我叫戴夫·蒂宾根 是OS X联系人团队的一员 
不好意思
刚才布鲁斯已经向你们演示了如何在代码中
创建、编辑CNContact 
但是在OSX、iOS和watch OS的
联系人app上已经有了很多联系人 
布鲁斯已经演示了系统app可以怎样
和这些联系人整合起来 提供更加丰富的用户体验 
比如说 电话app可以为来电
显示一个人的名字和照片 而不是
仅仅显示一个电话号码 
“联系人框架”让你可以为你的app提供
丰富的用户体验 
你要用来访问用户的联系人的类 
叫做CNContactStore 
我们来讲讲怎样
获取、保存用户的联系人 
让我们从获取开始 
你要使用的主要方法
叫做统一Contacts
MatchingPredicatekeysToFetch 
这会返回一个CNContact对象阵列 
Keys toFetch中的谓词的目的 
是为了帮助你的app尽可能高效地获取联系人 
我们先从声明开始 
用户可能有数以百计 甚至数以千计的联系人 
你可能只对这些联系人的一个小子集感兴趣 
谓词可以让你...
可以帮助你限制返回的结果数量 
如果你们中有人还不知道 
NSPredicate是一个标准的基础级别对象 
可以显示搜索时 某个对象
匹配的标准 
“联系人框架”为你提供了使用
联系人存储器的谓词 
联系人存储器将会评估这些信息、
这些信息 
这里的例子中
是谓词ForContactsMatchingName 
它会匹配每个联系和指定的
名字 在这里例子中 就是阿普尔西德 
我们再来快速看个例子 
比方说用户有下面三个联系人 
约翰·阿普尔西德、简·阿普尔西德、克雷格·布罗姆利 
联系人存储器会高效评估联系人约翰·阿普尔西德
和简·阿普尔西德克雷格·布罗姆利
然后仅仅返回匹配的联系人 
在这里返回的就是约翰和简 
而不是克雷格 
这样谓词让你可以限制返回的联系人的数量 
但是 一个联系人的
联系信息仍然很多 
而你可能仅仅对它的一个小子集感兴趣 
那么就该keysToFetch大显身手了 
KeysToFetch是一个字符串阵列 
这些是键的字符串 属于键-值编码 
如果你只对教名和姓感兴趣 
你就可以把你的keysToFetch设置成这样 
当然了 逐字使用字符串容易出现错误 
为此我们也提供了常数 
因此 “联系人存储器”将会
仅仅获取你指明的属性 
在这里例子中 就是名字和姓 
你就可以亲眼看到keysToFetch的谓词是怎样
允许你缩小返回的信息的
数量 这样你的app就可以
尽可能的高效 
让我们来看一个完整的例子 
就像之前一样 我们要从一个谓词
和keysToFetch开始 但是 
现在你需要把它们用在一个联系人存储器上 
这很容易 你可以用默认初始化程序
创建一个 
然后调用统一Contacts
Matching Predicate 
带有这些值的keysToFetch 假设一切正常 
你就会得到一个联系人阵列 
然后你就可以按照你的想法去用 
在这里我们是要打印出姓名和姓氏 
关于获取 我还想说几件
重要的事情 
第一点 不受CNContact信息的生命期
约束的
CNContact的生命期 
获取结束后 并不需要同存贮器
保持一个强引用 
这就意味着CNContact上面的数据是有效的 
自从取出后就是有效的 基本上就是一个从取出那时
的快照 在那个CNContact的
生命期内都是有效的 
第二个重要的事情是 
这是一个同步方法 
相比较而言 取出联系人是一个慢操作 
因此 你必须通过一个后台进程来读取这些联系人 
让你的用户界面保持响应 
就像布鲁斯之前提到的 
CNContacts是完整的线程安全 通过后台进程来读取这些
联系人是安全的 然后把它们移到主线程 
更新你的用户界面 
通过后台进程来读取联系人还有一个原因 
那就是数据隐私 
用户对待他们的联系人这一隐私非常严肃 
因此 我们需要在你的app和用户
联系人之间设立一道势垒 
当你的app第一次通过API访问联系人时 
OS会弹出一个对话框或者警报 
让用户选择允许或者拒绝访问 
你之前可能已经看过了 
这就意味着当你第一次调用联系人存储器上的
方法时 它并不能提供结果 
必须等待用户做出响应 这可能需要很长时间 
当你通过GCD或者NS操作 把你的联系人储存器访问
移到一个后台线程中时 我们在这里
提供了一项助手方法 
一个叫做请求访问实体类型完成处理程序的
异步方法 
用户可能会拒绝访问 这样你的app就可以
得体地处理它 
如果用户允许访问 
那么请务必谨慎处理联系人数据 
更多信息请查看你的app会话中的
“隐私”部分 
我想再讲讲keysToFetch 讲讲它们是如何
返回部分联系人的 
就像我之前演示的那样 keysToFetch允许你仅仅
读取你感兴趣的属性 
在这个例子中 就是姓名和姓 
如果你试着访问一个你并未请求的属性 比如说 
一个手机号码 会发生什么？
那就会抛出一个异常 
因为数据不在那里 
我们调用这些部分联系人 是因为只有部分属性
可用 
一般来说 如果你把你的
键设成我们之前的例子中的那样 这就不是一个问题 
但是有时候你获取一个联系人时 你不确定
获取时使用的是
哪个keysToFetch 
在这些例子中 在访问属性之前 
你可能想要校验下 看看键是否可用 
就像你在索引之前 校验阵列的
长度那样 这样来避免异常 
这里有一个例子是通过isKeyAvailable方法 
看看访问电话号码属性时 PhoneNumbers键
是否可用 
你可能会想 “那好吧 
但是我真的想访问那些电话号码 ”
在那种情况下
你可以使用附加的keysToFetch来重新读取联系人 
我们来看看它的工作原理 
我们在这里设置了keysToFetch 
但是这次我们使用的是电话号码键 
并且使用了一种叫做
unifiedContactWithIdentifier的方法 
现在每个联系人都有一个对它进行唯一标识的标识符
<br/>你可以稍后使用它
重新进行读取 
当你重新读取后 
你就可以在这个重新读取的联系人上 
安全访问电话号码了 
对于部分联系人来说 重要的是理解它们
和其余的框架是怎样一起工作的 
这里展示的上个例子中 我们看到了如何读取姓名
和姓氏 然后把它们打印出来 
打印出全名 但是这还不够理想 
我们最好使用其中一种格式化程序 不好意思 
布鲁斯之前向我们展示过的CNContact格式化程序 
这个格式化程序可能会访问其它你还没有读取的属性 
比如说 名字、前缀或者后缀 
如果它们不在那里 那么就会抛出一个异常 
我们可以提供所有你使用这个格式化程序需要用到的
键 但是这会非常乏味 而且容易出错 
因此我们提出了键描述符的概念 
键描述符代表了某个特定操作的一组键 
在这个例子中 格式化程序知道它需要哪个键
才能完成工作 因此它通过描述符
ForRequiredKeysForStyle
方法提供了键描述符 
你就可以把它直接包含在你的键中进行读取 
这样就可以告诉联系人存储器所有格式化程序
进行读取需要的属性 
我们来看一个例子 
在这个例子中 我们想要读取所有叫
阿普尔西德的联系人 
我们想打印他们的全名和电子邮件地址 
我们要想之前一样 设置谓词 
并且把keysToFetch设置的略有不同 
我们先看看样式要求键的描述符
这样就可以允许我们稍后使用“联系人格式化程序”
来获得全名 
你也可以直接包括CNContact电子邮件地址键 
因为我们想打印这个电子邮件地址 
你可以把键描述符
和CNContact键混合到同一阵列 
有了这个设置 你就可以像我们之前那样进行读取 
调用统一联系人匹配谓词 
有了结果后 你就可以通过格式化程序
获得全名和电子邮件地址 
关于读取 
另一个重点是统一联系人 
你可能在多个账户里有相同的联系人 
比如说你在iCloud账户上有约翰·阿普尔西德
还有他的工作电子邮件地址、电话号码
但是你可能在Facebook上还和约翰是好友 
这就可以构成一个形象 
私人电子邮件地址、生日 
这样联系人app就不用在那里分别显示两个联系人 
联系人app将会通过某种探试程序把这些
链接起来 结合信息 
显示一个单一的联系人 
我们称之为统一联系人 
联系人app已经在最近的几次发版中已经这么做了 
“联系人框架”默认将会返回统一联系人 
你可能已经从方法名字上面猜到了这一点 
好消息是 这意味着你可以取到
用户在app中看到的数据 
这里 最棒的事情是 
这些都是普通的CNContact对象
它们和任何其它的CNContact对象的原理、行为都很相似 
你甚至可以修改、保存它们 这样也可以 
说到保存 我们来看几个代码实例 
看看怎样保存联系人 
我要先来添加一个新的联系人 
比如说 你有一个C不可变联系人 
你用布鲁斯之前向你们展示的数据把它设置好了 
要想把它弄到用户联系人中 你就要使用一个叫做
保存请求的请求 然后你就可以在联系人
存储器上执行那个保存请求 
你要做的第一件事就是创建一个新的CNSave Request对象
然后你就可以通过标识符向容器调用
添加联系人 
我们现在没有时间讲容器 
不过零容器标识符指的是默认标识符 
更多信息请参见资料 
保存请求会给一个联系人标记为正在添加 
但实际上并不会做出变更 
要进行变革 你需要在联系人储存器上调用执行
SaveRequest 
如果顺利完成的话
这就会被添加到用户的联系人中 
更新现有的联系人也很相似 
但是你要先从一个你通过读取获得的
不可变的联系人开始 
你要做的第一件事
就是创建一个可变拷贝 
然后完成任何你想要的变更 
比如说 我们在这里要添加一个新的电子邮件地址 
现在 重点要注意的是 
当你对某个部分联系人制作可变拷贝时 
仅仅修改你读取的属性 
像之前一样 我们需要使用保存请求 
创建一个新的保存请求不过这次
我们要使用这个updateContact方法 
同样地 这也仅仅是把联系人标记为正在更新 
但并不会真正进行变更 
直到你调用executeSaveRequest 
关于保存 还有一些重要的事情要说 
首先是保存请求可以包含多个变更 
当你执行它时 
所有这些变更都会在
执行它们时完成 
第二点
保存请求要求多个可变联系人
你需要小心 
当一项保存正在运行时 不要在同一个线程上访问这些
可变联系人 
现在你已经知道了如何读取、
保存一位用户的联系人
我要请朱利安上来 
给大家讲讲在用户界面如何使用联系人 
谢谢 戴夫 
下午好 
我是朱利安 iOS联系人团队的一名工程师 
布鲁斯和戴夫
已经让你们成为了
“联系人框架”方面的专家
我就来谈谈用户界面 
向你们演示如何在你的app中
拾取、显示联系人 
和“联系人框架”一起
我们还有一个叫做联系人UI的新UI框架 
iOS 9和OS X El Capitan上都可以用 
它会给你提供两个集群
第一个是选择器 
选择器会显示一个全部用户联系人列表 
让他选择把联系人信息导入
你的app 
其次是联系人视图控制器 
控制器可以用来显示一位联系人 
本场演示的剩余时间里 我会讲一讲类的
iOS版本 
不过OS X上的也很相似 
我们首先来讲讲拾取联系人 
为此你要用的类是
CNContact选择器视图控制器 
它会直接置换我们之前在Address Book UI的类
即AB
People Picker
NavigationController 
你从名字上就可以猜到
它是UA视图控制器的一个直接子类
但你还是必须显示它 
而不是把它推入一个导航控制器 
它总是处于进程外 
它的优点很明显 不用要求用户允许你的
app访问他们的联系人了 
这样 当你显示一个
联系人选择器时 
你就不会看到之前戴夫展示的对话 
其中一件重要的事情是 
联系人选择器可能会返回部分联系人 
比如说 如果你设置了显示属性键的有界集
那么你在得到的联系人中 
就只会得到那些键 
选择器的行为由两件事定义 
首先是你实现的委托方法 其次是 
你设置的谓词 
我们稍后会谈谈这些 
最后一点 选择器必须
支持多选 
我们首先来谈谈委托方法 
如果你的app仅对单个联系人感兴趣 
你想让它的风格和选择器相似 
你只需要实现didSelect Contact委托方法
然后你就会得到一个CNContact 
同样地 这些联系人也可能是部分的 
如果你对单个属性感兴趣 
你实现一个确保选择
ContactProperty委托方法 
得到一个CNContactProperty对象 
这个对象实际上来自“联系人框架” 
不过我们之前没有见过 所以让我们来看看 
这是一个简单的包装类 包含了选择的联系人 
以及用户选择的
属性键 
它的值
以及可能的标识符 
就是属性 就是标签值 
但是 你可能还对多个
联系人感兴趣 
你会得到这个
外观 
实现它很简单 
你只需要实现
didSelectContact委托方法即可 
然后如你所料 
你得到了发送的联系人对象的阵列 
这也同样适用于属性
你可以通过实现
didSelectContactProperties
委托方法来得到多个属性 
得到一个CNContact
属性阵列 
好了 
现在我们再来讲讲谓词 
谓词让你可以定制面板的行为 
我们有三个谓词 
第一个是启动联系人谓词 
你可以用它决定用户
可以用哪个联系人、
不可以用哪个联系人 
我拿之前我们看过的例子来举例 
如果你希望用户仅仅选择帕克家族的
成员 举例来说 
你需要在你想要匹配联系人和帕克家族的姓氏那里 
创建一个谓词 
你把它设置成一个
predicate For Enabling Contact 
一旦选择器表述出来后 
你可以看到 你只能选择带有
帕克家族的姓氏的人 
第二个是谓词For Selection Of Contact 
当用户点击联系人时
会对这个谓词进行评估 
如果评估为“真” 
那么联系人就会返回到你的app 
如果不是的话 我们就会显示联系卡 
类似地 对属性来说我们有谓词
ForSelectionOfProperty 
如果评估为“真” 用户点击的属性
也将会返回到你的app 
否则就会执行默认动作 
比如说打一通电话或者创建一封新电子邮件 
需要注意的是 最后一个谓词是在
CNContactProperty对象上评估的 
而另外两个谓词则是在CNContact对象上评估的 
我想要指出的是 你需要在你设置的谓词
以及你实现的委托方法之间
保持连贯 
比如说你应该仅实现didSelectContact
委托方法 但要把选择谓词设置为
属性谓词 但是不太行得通 
你可以看到一项日志 你的谓词将会被忽略 
那么现在
你已经知道了应该如何拾取联系人 
我们再来谈谈如何在你的app中查看它们 
现在我们有一个类 
取代了我们之前在Address Book UI上的三个类
但是通过适当的创建方法 你还是可以获得
你想要的行为 
第一个是
viewControllerForContact 
它可以给你一个和联系人app和iPhone app一样的视图控制器 
如果你想要创建一个新联系人 
你可以使用
viewControllerForNewContact 
你可以得到这个总是处于编辑模式的视图控制器 
最后 如果你有一位来自
未知来源的 比如说一个vCard 举个例子 的联系人 
你可以使用
viewControllerForUnknownContact 
我们在iOS 9中添加的一件事是这个更新联系人按钮 
如果用户联系人中已有一位联系人和你显示的
联系人的名字相匹配 
这个按钮
就会自动显示出来 
如果用户点击这个按钮
<br/>它就会显示UI 
使用新信息更新现有的联系人 
这个“联系人视图控制器”现在通常处于进程外 
原因在于 
我们可能会添加一些附加信息 
比如在邮件中找到的联系人数据 
就像戴夫之前指出的那样 使用正确的键
读取联系人非常重要 
如果你想把它显示在联系人视图控制器中 
那么这个联系人就必须通过联系人视图控制器的
descriptor For Required Keys获取 
我们来快速看一个代码实例 看看如何从一个标识符
显示一个联系人 
首先 你要使用联系人视图控制器的
descriptorForRequiredKeys 读取联系人 
然后使用forContact
创建联系人视图控制器 
因为我们想在联系人视图控制器显示正视图 
如果你已经有了一个联系人存储器 你就应该把它设置到
联系人视图控制器 这样我们就可以重用它 
把自身设为一个委托 
推送视图控制 
然后当联系人被修改时 你就会在你的委托方法中
被调用到 
好了 看一个代码示例很好 
但是一起构建一个app会更好 
我们来试试吧 
我们要构建的app
叫做“喵喵叫” 
这个app让你可以通过给你的朋友发送猫的
叫声 和你的朋友分享你的情绪 
如果我运行它 你在顶部就
可以看到一个情绪选择器 
底部是你的朋友列表 现在还是空的 
我们要构建的 就是这个 
这个app是使用一个邮件地址来发送猫的叫声的 
因此我们只需要一个绰号和一个电子邮件地址即可 
如果我点击“保存” 因为还没有实现 
那么什么也不会发生 
我们就要这样做 
当我点击“保存”
<br/>这个addBuddy函数会调用到 
我们现在来把它实现 
首先 因为我们要进行修改 
我们创建一个可变联系人 
然后我们从文本框把绰号设置成值 
emailAddresses属性被设置成了一个单一
标签值的阵列 
文本框中也是这个值 
最后 我们把这个新联系人添加到我们的联系人列表 
我们运行下
看看它是怎样运作的 
我要使用预先填充的值 把埃米莉添加为我的朋友 
好了
我的家庭 
你可以注意到这里的这个信息按钮 
当我们点击这个信息按钮时 
我们想要展示联系人视图 
我们现在就要实现这个 
当我点击这个按钮时
<br/>这个showContact函数被调用了 
让我们填进去 
首先 我们给我们想要展示的
联系人创建一个
联系人视图控制器 
然后我们把联系人存储器设为我们已有的存储器 
最后 我们推送下视图控制器 
让我们来试试
好了 我们可以看到埃米莉的信息 
太好了 但是如果我们想向我们的列表添加一个联系人 
而这个联系人已经位于用户的联系人中 该怎么办？
我们在这里要做的 就是这个 
为此我们要使用这个联系人选择器 
当我点击addFromContacts时 这个函数就会调用到 
现在我要把它实现 
首先我要创建联系人选择器控制器 
因为我们只对电子邮件地址感兴趣 
我限制了电子邮件地址的属性 
然后我们想要让用户选择至少有一个电子邮件地址的
联系人 
我们可以看到 这是正在实现的谓词的一部分 
还可以看到还不在我们的朋友列表中的人 
因为我们不想出现重复 
最后 是已经是联系人的用户 
正好有一个电子邮件地址的用户 
我们不需要推送卡 我们想让它直接写 
这个谓词做的就是这个 
我们把自身设成一个委托 显示视图控制器 
我们也需要委托方法
<br/>可以把新联系人添加到我们的联系人列表中 
现在就非常直接 
如果选择约翰·阿普尔西德
我就知道他有两个电子邮件 
所以推送的是正确的卡 
我会选择一个电子邮件 让约翰在我们的列表中 
如果我添加一个联系人
首先你可以看到现在约翰·阿普尔西德是无效的 
因为他已经在我的朋友列表中了 
但是如果我选择大卫
他只有一个电子邮件地址 
这个联系人就直接返回了 
如果我想展示约翰的卡 又会发生什么？
我们出现了一个异常 
原因是因为在这里展示联系人时 
我们不够小心 
因为联系人选择器返回了部分联系人 
联系人视图控制器缺失了某些键 
我们来把它修复
然后校验联系人是否有了
要用在联系人视图控制器的要求的
键 
如果有 我们只需要使用我们之前的代码即可 
如果没有
我们首先会向存储器请求 
请求访问联系人 
如果用户允许访问
我们就要通过它的标识符 重新读取联系人 
这次使用keysToFetch
CNContactViewController
记录键的描述符 
然后我们再次调用同样的函数 但是这次 
完整的联系人已经准备就绪待用了 
我们再来试试 
如果我查看埃米莉的联系卡 
不会显示任何对话 
这是因为埃米莉是在代码中创建的 
她有各个读取键 
如果我也查看约翰的联系卡 我就必须重新读取了 
此时你的app就会访问用户的联系人 
搞定了 我们可以看到约翰的所有联系人信息 好了 
我们的演示结束了 
我有点小伤心 
我要和约翰分享下我的情绪 
我要把布鲁斯请回来请他
结束这次演讲 
谢谢 谢谢戴夫和朱利安向我们展示
如何在我们的app中使用联系人 
你们现在有一个Objective-C
API来访问联系人 
它同样也兼容Swift 
联系人API在各个Apple平台上都一样 
Address book正在被弃用 
因此换新的API吧 
要获取更多信息 你可以参考开发者库上
“ContactsUI框架参考”的
联系人部分 
要获得技术支持 你可以到开发者论坛 
如果是普通咨询 保罗会很乐意看邮件 
因此你可以给他发邮件 他是我们的app框架福音传道者 
谢谢 