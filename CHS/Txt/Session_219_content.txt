欢迎来到自动布局迷宫 第二部分
大家好
感谢来参加讲座我是杰西
负责AppKit中的
Auto Layout和Foundation框架部分的工作
布局是我们设计应用时
最基础的工作之一Auto Layout 
非常干净简洁但是有时似乎
也有些神秘今天我来介绍
Auto Layout不为人知的几方面
并会做详细解释
这是两部分讲座的第二部分内容
这里是我们
准备介绍的话题简介
我希望先从布局循环讲起
大家可能都知道怎样配置用户界面
但是Auto Layout还是有些内容存在未知
可以进行配置
运行应用获得布局
希望这就是你想要的布局 但如果不是
很难知道该从哪里下手
我想了解中间这里出了什么问题
也就是怎样从视图中获得约束
再到将框架安排到这些视图中
这里是整个流程的高度概述
先是应用高兴地运行循坏 如此往复
直至约束改变使得计算出的
布局需要有所不同
这会导致需要安排延迟布局过程
当布局过程最终出现时
我们经过层次
并且升级视图的所有框架
这有点抽象我来举个简单例子
也就是说 当我们不勾选顶部的复选框时
我们将调整约束收缩窗口
并隐藏底部的复选框
开始时 框架是这样的
调整约束时布局引擎关于
每个内容的位置概念都已发生改变
但是UI还没有更新
接着当布局过程继续时 
UI实际上的改变是与引擎认为的方式相匹配
我们来谈谈约束改变
你所创造的约束变成了
数学表达式 保存在Layout Engine中
因此约束改变实际上是可以影响
这些表达式的任何内容这其中包部分
很明显的内容例如激活或
关闭约束改变优先级
或约束的常数但是也有不那么明显的
例如操控视图层次
或是重新配置部分控件
因为这些可能会间接导致约束改变
那么 约束改变时会发生什么
首先会发生的是 
Layout Engine会重新计算布局
表达式由这些变量构成以代表诸如
特定视图的原点或大小尺寸
当我们重新计算布局时
这些变量可能会收到新的值
出现这些情况时
它们所代表的视图会得到通知
并将父视图标为需要布局
这实际是导致安排延迟布局过程
如果来看这里的示例
大家会在这里看到框架实际会在
Layout Engine发生改变但在视图层次中尚未变化
当延迟布局过程继续时
目的当然是要将位置不对的视图
进行重新排布
我们完成后所有内容都各就各位
过程一词实际有些不太恰当
这里出现的是两个过程
第一个是为了更新约束
其中的想法是要确保
约束是否有任何未决改变
在我们需要费力通过视图层次 对所有视图
重新定位之前 这些问题现在就出现了
接着 第二个过程发生在视图重新定位的时候
我们来谈谈更新约束
视图需要显性请求
来调用升级约束方式
这和setNeedsDisplay的运作方式大体相同
调用setNeedsUpdateConstraints
不久之后 将会调用升级约束方式
的确 所有这些都是让视图为
下一个布局过程有机会
及时修改约束但实际上并不常常需要
所有的初始约束设置都应该理想地出现在
Interface Builder中
或者如果当真发现需要
在程序中分配约束
viewDidLoad这样的位置则更好些
升级约束只是针对需要
定期重复的工作
而且还非常简单
当发现有必要时相应修改约束即可
不过如果将逻辑从另一个
相关代码中拿开 并将之移至
稍后会执行的不同的方式中
代码就会很难继续更难去
继续维护更难以让
其他人理解
那么在应用中更新约束
最后 会影响到性能表现
如果发现单纯相应改变约束
速度太慢的话
升级约束可能会帮你解决问题
结果就是在更新约束内部改变约束
实际要比
在其他时候改变约束快得多
原因在于引擎可以分批处理
在这一过程中发生的所有约束改变
通过调用整个数组约束 来激活约束
而不是单独激活每个约束 
这样会实现
同样的性能优势
如果有个视图根据某种配置调整 
需要重建约束 我们所发现的
一个常见模式会非常有用
结果就是这对具有这类需要
配置视图而不是 属性的客户端非常常见
这对视图而言非常容易
最后是需要对约束多次重建
这会产生需要无用功
在这类情况下效率则要高很多即视图要调用
setNeedsUpdateConstraints接着当升级
约束过程出现时 可以重建
一次约束以便与
当前配置相匹配
在任何情况下一旦这一过程完成
我们了解约束均已更新 我们可以
在重新定位后的视图基础上继续
我们在这里需要从上到下穿过
视图层次我们将调用layoutSubviews
到标为所需布局的任何视图上
在OS X上 这种方法称之为布局
不过思路是一样的
接收方的目的是重新定位子视图
不是让接收方重新定位自己
因此框架执行的工作是将通过
Layout Engine
读出子视图然后进行安排
在Mac上 我们用的是setFrame 在iOS
是setBounds和setCenter不过思路是一样的
那么如果再来看这个示例
你在这会看到UI升级与
Layout Engine的框架相匹配
还需要注意的是layoutSubviews:
很多人为获得某种自定义
布局将之覆盖如果需要这样做<c.blue>的话
当然可以但是需要了解一些内容
因为这里所做的事情很容易给你
带来麻烦
所以我想详细介绍一下
如果需要某种布局
不能使用约束来表达
那么应该只是将layoutSubviews覆盖
如果可以发现使用约束来实现的方法
那么将非常强大而且不会有麻烦
如果选择覆盖需要牢记
我们此刻是处于布局形式当中
部分视图已经安排
部分视图还没有但是可能很快就会<c.blue>有
因此 这是个微妙的关头
需要遵循一些特殊的规则
其一是需要<c.blue>触出发超类执行
出于若干簿记目的我们都需要这么做
而且可以关闭字树中的
视图布局但是需要在调用
超类执行前完成这项工作
其二 若不想调用setNeedsUpdateConstraints
存在一个升级约束过程
我们走一遍
完成结果错过了
如果还需要它时已经太晚了
同样还要确保并未在子树以外
关闭视图布局
如果这么做很容易会导致
布局反馈循环这样执行
布局的做法实际会导致布局
再次变脏
那么我们会周而复始 停不下来
这对谁都不好
大家会常常看到在layoutSubviews覆盖内
需要调整约束以便将视图
放在正确的位置 这样也可以
但还是要非常小心才行
在调整约束时 
很难预料在层次中的其他视图
会不会受到影响
因此 如果在修改约束 很容易偶然间
在子树之外关闭了布局
在任何情况下 假设一切顺利
布局循环在这里完成 所有内容
都各就各位约束改变就已完全应用了
关于布局循环需要记住几点<c.blue> 首先
不要指望调整约束时 视图框架
会立刻改变
我们所经过的全过程是关于
稍后会发生什么
如果发现需要覆盖layoutSubview
则要非常小心避免布局反馈循环
因为调试过程并不容易
接下来我会聊聊Auto Layout怎样和
Legacy Layout系统互动
传统而言我们通过设置框架定位视图
然后就有了autoresizingMask
以规定视图在父视图改变大小时
应该怎样调整大小
接着在Auto Layout用约束实现所有目的
实际上 子框架不会按照所预期
方式进行工作
你仍可以设置视图框架 但是...
它可以移到所放置的位置
不过 如果布局过程继续
框架从Layout Engine复制框架内容
并在视图中应用框架可能随时被重写
导致有时
需要设置框架
例如 如果覆盖layoutSubview
可能会需要为这些视图设置框架
幸好 这里有<c.blue>有个旗标
名为translatesAutoResizingMaskIntoConstraints
是有点拗口不过功能也如文字所述
它可以使视图按照Legacy Layout
的状态下表现是在AutoLayout的环境下
因此 如果在有这个旗标的视图中设置框架
框架实际上会生成约束
并在 Layout Engine中执行这一框架
这意味着你可以随时按照自己的想法
设置框架还可以依赖Auto Layout
把视图保留在所放置的位置
此外 这些约束实际上执行了
autoresizingMask的行为
例如如果有部分应用
并未升级到Auto Layout 你需要
依赖自动重新调整大小的行为
它应仍按照你所希望的方式行为
最后 通过实际运用AutoLayout Engine 
来执行设置的框架使之可以使用
约束定位其他视图相对与这个视图的位置
因为设置了框架你不可以在周围
移动视图但是如果没有告知
Layout Engine这个视图应该所处的位置
那么一旦提供约束为参考就会出现问题
你会看到尺寸大小或原点和零点冲突
如果不希望出现这种效果这类行为会
<c.blue>会非常奇怪
那么这里需要注意的是当计划
使用约束定位视图时
你需要确保这是关闭状态
如果是在InterfaceBuilder中
构建UI 它会处理得很好
并妥善设置这个旗标
但是如果是在用编码分配UI
这会默认为是开启状态
之所以这样是因为有许多代码
会分配给视图并希望按照
一定方式来执行
所以是默认开启状态如果通过编码分配UI
并且忘记关闭这里
这会导致一系列意想不到的问题
我们来看一下如果忘记会怎样
这里是个很简单的代码
我们分配一个按钮并进行配置
然后生成两个约束来
定位这个按钮顶部10点
距离左边10点
这非常简单
但是运行一下结果却是这样
窗口太小没有按照
预想来执行按钮也不见了
会全都喷到控制台上
实际上这说明存在问题
大家看到的是NSAutoresizingMaskLayoutConstraint
这是布局约束类是框架
为有需要设置
translatesAutoResizingMaskIntoConstraints 的视图而生成的
这里实际发生的情况是因为我们忘记
清理旗标框架为按钮上的
初始框架生成约束
框架为空 尺寸和原点也都是零值
所以没什么用不过当我们添加
约束 想把按钮定位在10,10的位置
就会出现真正的问题

因此 Layout Engine突然无法满足
约束的要求 就会导致出现意想不到的问题
如果返回代码加上一行
清理旗标效果就会好得多
我们得到想要的布局按钮的位置
也没问题窗口的表现也正常
需要记住的是
translatesAutoResizingMaskIntoConstraints 
通常都不会用到这个旗标
但是如果有视图需要通过直接设置
框架来定位这就会很有用
而且 如果计划用约束来定位
需要确定这是关闭状态
如果你没有使用InterfaceBuilder的话
接下来我会聊聊约束生成
我觉得这更容易只要看看
我们刚刚在屏幕上的代码就明白
特别是结尾的那一段
我们构建的是这些约束
这和在AutoLayout开始之初我们就有的约束
工厂方法完全一样
而且相当有效
但是用起来有点麻烦
代码相当冗长
不是很好读出来
我们这里真正想表达的是
我们想把按钮定位在距离顶部10点
距离左边10点
但是为了理解这一点需要仔细
了解代码再把这些
都拼在一起
那么在新版OS X和iOS中
我们介绍了更简洁的新语句
来生成约束
大概是这样
这个语句使用的对象叫做布局锚点
谢谢很高兴大家喜欢
布局锚点代表具体视图的
具体属性锚点对象会
<c.blue>会面对多种工厂方式来生成不同的约束形式
本例中 我们是在约束上端锚点
使之等于视图上端锚点再加10
如果你们还在用Objective-C
其中也有这些而且
差别会更为显著
从将近7行降到了仅仅两行
这个新语句还遵守我们所有的
命名规范但读起来更
像是表达式我感觉这样
更容易看清代码的意图
约束的所有有效形式都可以运用这个语句
来创建 你实际上还会得到许多无效的
约束形式的编译器错误
此刻 你只能得到Objective-C的错误 
但是这些也会变成Swift 
例如 视图的左对齐边缘应为100
这样就不合理因为没有上下文
可以诠释这个100
因此错误在于这个方式在
位置锚点不存在
与之相似 视图的左对齐边缘
和不同视图同宽这也不合理
位置和尺寸大小在Auto Layout基本上
是不兼容的类型因此得到的不兼容指针类型
以往 这些内容仍属于错误
但是仅可以在运行时间出现
因此我觉得将确定编译时间错误
将有助于我们一开始就把约束设置正确
并可以编写更好读更可维护的代码
接下来我会聊聊约束负面空间
有几种不同布局会时常出现
具体实现方法却不很明显
这里有两个例子
在第一种情况中目标是让
这些按钮间的空间在重新调整
窗口大小时保持相同
在底部 我们有图像和标签
我们想把它们居中做成一组
而不是各自将每个内容居中
结果就是这些布局问题的
解决方案都是相同的
也就是要用到虚拟视图
实际上是分配空视图把它们进行约束
填充到按钮之间的空间中
一旦视图位于这些点
我们可以使用等宽约束来确保其尺寸大小
在重新调整窗口大小时 保持相同
在底部 我们也是同样
使用空视图
对边缘 图像和标签进行约束
然后我们可以在空视图上安排
居中约束而不是
处理内容视图本身
很有效 传统上 我们就是这样解决
这些视图问题但是这种技巧
知道的人太少 对吧？
而且也不够有效特别是在iOS上
这里每个视图都有相关的图层
那么在新版中
我们面对的是布局指南的新的公共类 
布局指南只代表Layout Engine中
的矩形
这很容易使用
只需要将之进行分配再加入
所属视图然后就可以将其
按照视图处理方式来约束
它们面对的是锚点对象 因此可以
运用新约束生成语句
但是还可以将之
交给现有的约束工厂方法
这样就可以和视觉格式语言配合使用是这样的效果
我们把现有的布局指南做转换
把这些进行内部使用
这里有很好的示例
大家可能注意到UIView针对边距属性
并未真正面对布局锚点
相反 UI View有着新的布局边距指南
这一布局指南代表边距内
视图的区域
如果需要对边距进行约束
最简单的做法是通过布局指南
因此布局指南并未从根本上启动任何全新行为
现在使用视图可以实现所有这些功能
但是它们可以用更轻量级的方式
来解决这些问题而且不需
搞乱层次因为那些视图
并不需要真正拖动
接下来我请会卡西亚回到台上 来介绍
Auto Layout出现问题的调试策略
大家好
上午我见过在座的部分听众
我是卡西亚
我在iOS KeyboardsTeam就职 我来这里和大家
介绍如何调试布局当出现问题时
该怎么办
以前用过Auto Layout的朋友
希望大部分都用过可能遇到像这样的情况：
设计一个UI非常漂亮
然后准备在代码中执行
你把所有约束都小心放入其中
也做了调整
构建和运行时出现了问题
完全都不对在调试器中
你看到这样的内容
文本内容很多有点吓人
但是这的确是相当有用的日志
遇到不满意的约束错误时就会出现这些
引擎在看所提供的约束设置
决定它无法解决布局问题
因为其中有部分内容彼此冲突
若要解决视图问题需要打破
一个约束才行
于是抛出这个错误告诉你它做了什么
你明白 接下来要继续深入 找到那个
额外的竞争性约束才行
我们试着读一下这个日志
这里是刚才看的视图以及我们的日志
从上端移走部分内容
使之和屏幕吻合
但是要先从底部开始处理
大家看到的最后内容是实际上打破的约束
不一定必须是导致问题约束
引擎必须打破的约束是为了解决
布局问题因此从这里入手很好
先检查该视图的translatesAutoResizingMaskIntoConstraints
在杰西的例子中大家看到 日志中
也会出现但是确保你已经
事先完成这些内容肯定是没错的
本例中 我们打破的是
Saturn纵横比约束
我们在日志上提高一些 以示强调
在日志本身中也会出现
接下来要做的是发现影响日志中
出现的视图的其他约束
本例中 我们接下来<c.blue>看按到父视图约束的左对齐
和父视图约束的右对齐以及上端的一个
还有下面标签视图的一个
这些都没问题
没有一个产生直接冲突
接下来要看相关的视图
本例中 是标签
因此这个标签有着和Saturn底部
相同的关联约束下一个约束
关联到父视图上端
因为Saturn高度应该
超过100点约束告诉它应该如此
你会注意到标签旁的约束
确实告诉你这个约束看似
非常像以往你可能用来
生成约束的视觉格式语言
我们看到从父视图上端
是100点 还因为Saturn需要比这个多
只能打破一个约束
才能解决布局问题
所以其实并不难读
现在我们让问题更简单些
因为你可能习惯于看到这样效果的
约束日志其中有一组
内存地址和类名称除非在视图中
有导航文本 否则不会告知各自是什么
如果是这样的效果则会容易很多
为实现这一点你只需要
在约束中增添标识符
那么我可以有两种方便的方法来实现
如果使用的是显性约束
那只是一个属性
建议命名标识符和命名约束的方法
相同 这样如果之后需要找出
代码的话则会容易很多
但是你可以把它任意命名 我们就这么做
如果使用Visual FormatLanguage会得到数组
你不会获得约束因此只能循环那个数组
在每个约束上设置标识符
可以在数组的每个约束上设置相同的
标识符这一般都很好
如果想找出单独约束并设置标识符
之后还要在数组中做些改变
顺序就要做调整
那么需要返回同样来改变
标识符的顺序
此外 一旦看到了日志中的短语
你一定会知道该怎么找问题
因此不必当真把具体约束都摆着那里
最后 在约束检测器中的
Interface Builder有个标识符属性
那么就太简单了
我们来看一下
我们来谈谈怎么理解这个日志
更容易了解目前发生的情况
首先 如果在视图设置用户友好标识符
这些标识符会在日志中与相应视图
成对出现因此就可以找到所需视图
我就是这样从刚才看到的约束中
找到Saturn 它有用户友好标识符名为Saturn
还可以在新的布局向导中设置标识符
这是个平铺标识符属性
没有什么特别的这会让运用布局指南
调试布局变得非常简单
因为效果很棒我很确定大家迟早都会用上
加上它们再继续
如果想试试现在就用很复杂的
视图 把所有标识符都加进去 你可以完成的
但是需要些时间
因为你可以以后读这个日志 所以也值得
但是如果你继续的时候这么做 以后就会少费工夫
因为 你也拿不准什么时候
会遇到这个问题所以有必要
先备着以供不时之需
最后 如果约束日志不理想
其中包含信息太多
就会导致布局非常复杂其中会有
数百行可以看看
底部的视图 特别是你在看的其他视图
并且实际上要查看在调试器中影响
这些视图的约束
在iOS中 是constraintsAffectingLayoutForAxis
在OS X中 是constraintsAffectingLayoutForOrientation
这可以告知你哪些约束在
影响这个或那个坐标轴的视图
我们现在来看效果怎样
这就是刚刚
在看的视图
我们看到这里是同样的日志
我们先擦去这些因为我希望
给大家看看另外的内容
我设置了一个两指双击来断开这里
所以现在不用内存地址
我用的是设置好的名称
我们要进入调试器
让它打印出Saturn的
constraintsAffectingLayoutForAxis以及垂直坐标轴
垂直轴是1 水平轴是0
如果用错了那就是另一种选项
返回这里也相当简单
现在我们看到视图在上端有布局向导
没问题
那是视图的约束
命名视图中的约束还有
一个好处 就是说你会很快知道
在约束外设置了哪些
哪些是由你设置的
在Saturn的垂直布局中我们了解到
它是和上端布局指南关联
非常好
它还表示Saturn和下面的标签关联
那么在另一个影响Saturn的约束中
不过不是直接关联Saturn
我们看到约束在视图上端
关联了标签
因为它并未在任何地方提及Saturn
这是很好的线索说明这就是问题所在
而且整个Saturn应该是
超过100多才行我碰巧知道
因为是我做的编码
现在我拿到了非常不错的标签
我可以搜索它找到我做的约束
好了
把它关联到上端锚点定为100点
来看看会在哪里激活
删掉
重新构建
这次好多了
我就是要这样子
深入研究这些问题 其实
相当简单
即便布局相当复杂也是如此
如果使用标识符方法得当
有关日志 我们讲到哪里了？
从底部开始
找到打破的约束从中了解到许多
它为何会打破的相关信息
先来查看translatesAutoResizingMaskIntoConstraints
它是许多状况的罪魁祸首
在约束和视图上都设置标识符
最后 如果日志太过复杂使用
constraintsAffectingLayoutForAxis来缩小范围
好这就是引擎看到约束 了解自己
没有解决方案后发生的一切
没有办法满足所有的约束要求
可是如果有着不只一个解决方案会怎样？
这就会出现歧义
这就是我们最后的谜题 祝贺大家
进行到这里
此外再无其他更多内容
我们来看一下歧义布局
造成歧义布局的
两个可能原因只能是约束太少
如果是在做这样的行星布局
希望将Saturn放在中间
但是水平方向的约束设置不当
视图只能猜测该把它放在哪里
再次提醒一下应该是在中心
引擎把它放得偏到了这边
还有一个解决方案是把它偏到另一边
可就是不能落在中间的位置
因为如果不知道该放在哪里 它就会
找个地方放 这就会是问题所在
因为不是你想要的
需要返回 在视图上加上约束
另一个歧义布局的原因是属性
存在冲突
在第一部分中我们谈过一点
在视图的底部我们刚做过调整
大家会看到结果会是文本域
按钮的比例有问题
我希望它是这个样子
文本域占据视图的主要部分
最后变成这个样子是因为引擎
在两个布局中替我做出选择
它这么做是因为两个视图的内容
吸附性优先级相同
都是250我没有其他方法
我也没有告诉引擎用其他方法在水平方向
来确定这些视图的大小
那它只能是猜所以猜测也许
我是想让文本视图吸附最近的内容
于是继续还把输出了标签
但是我实际上希望它做的是
吸附靠近按钮的内容
这部分要反复强调
但是按钮的内容吸附优先级
设置的低于文字域
视图的边缘会从内容中伸出一块
因为这不太重要它吸附了最近的内容
或者你在告知引擎这不太重要
视图吸附附近的内容
与此同时 如果设置了以上文本视图的
内容吸附性优先级按钮吸附了靠近的内容
且文本域有所延伸
在这种特殊情况下引擎始终都会这样
解决布局问题
因此 如果妥当设置这些属性
就可以解决这些遇到的歧义布局
我们还有解决歧义的两个工具
Interface Builder会很有用处
它在边缘有这些小图标 如果点击
它会告诉你布局出现了哪些它不明白的内容
在很多情况下它会告知
你遗漏了约束它无法解决
我需要Y点或者高度的约束
当你构建并运行的app存在这样的问题时
最后这些视图就会出现在
Y轴的某处这是引擎的决定所致
因为它没有从我们这里获得任何信息
这就让它相当容易
当没有使用InterfaceBuilder或者你解决问题后
仍然会遇到这样的情况
我们还有一个很酷的方法叫做autolayoutTrace
可以在视图中的调试器来使用
它会用全部大写告诉你出现
歧义布局的视图你可以随即去
查看该视图的问题所在
在调试菜单中我们还有视图调试器
可以帮你查看布局引擎为视图
计算得出的框架和对齐矩形
效果就像这样
它会将拽到正在看的视图上
这里你们可以看到Saturn 本应对齐矩形中
与内容十分靠近可是现在
被延伸得非常宽
这种状况不是我想要的
可是这里它的实际尺寸没问题
只是被固定到边上这不是我想要的
但是我知道这不是尺寸问题
而是应该与哪里关联的问题
另一个解决方案是来看视图解调器
在所有的断点导航旁边
这里有个小按钮
按下这个的时候就会把布局拉开
可以点击并查看约束等内容
是视图的线框图还可以看3D效果
可以看到所有图层的视图 很清楚
还有很多视图调试场景会很有帮助
最后 我们还有一种调试器方法
因为我非常喜欢使用LLDB
名为exerciseAmbiguityInLayout
如果有存在歧义的视图
可以运行这个在调试器上查看再继续
Layout Engine会显示所具备的另外解决方案
当你想找到问题具体出在哪里时
这会提供很大的帮助
我给大家展示这是什么样子
好现在我们回到这个视图刚才我们看到过
当处于正常布局时Saturn跑到边上
所以我再次用调试手势
可以这么用是因为我需要简单地插入
首先我来看看整个视图在发生什么
运行了自动布局来跟踪效果
大家看 都没问题除了Saturn
存在歧义布局
我会努力集中精力解决这个问题
这还是个Boolean逐个视图告知
是否存在歧义布局
这是个hasAmbiguousLayout
很容易记住在Saturn的这个例子中 是真
如果存在这种情况还还可以练习布局歧义
并且继续
它会给你提供 它为此问题准备的另一个解决方案
我们再来运行一遍
哎呀
真不该再运行
现在又跑到一边去了
在这种情况下看似出于某种原因
布局指南放在Saturn的哪一侧都不行
那我继续找关联行星
到特定区域的约束
它们在各边都有布局指南比率
以此来确定其位置
这里找到了Saturn的那个
应该在各边有着相同的布局指南
应该是正好放在中间在对
问题好似我根本没有把这个
加入为视图激活的约束数组中
如果我加入的话效果就会好得多
Saturn就会准确待在我希望它在的位置
在分析歧义问题时确实只需要
做这些即可
一旦开始用了这个功能就会觉得
非常简单
来调试布局
最重要的是要仔细考虑
引擎所需的信息
今天上午 我们谈论了
许多为Layout Engine提供所有信息
这样可以在各种自适配场景中
妥善计算布局
如果把所有这些汇总在一起遇到的问题
就会少很多而不是只是
在这里或那里做两个约束
再把它扔进来
但是如果遇到问题约束也不理想的话
可以使用日志
它会提供很多有用信息
为了充分利用日志可以为所有的约束
和视图添加标识符
如果想经常性检查歧义
在第一次运行时不一定会看到
可以加入比如单元测试
并在所有视图上经常性运行
如果遇到歧义布局可以在看到它之前进行分析
我们还有好几种工具
可以帮助解决这类问题
Interface builder就很有用当然还有视图调试器
以及lldb中的各种方法
好 今天讲了很多内容
如果上午就听了我们的讲座
你会听到用到堆栈视图的可维护布局
以及妥当改变约束
配合使用视图大小和进行自适应调整
还有运用优先级和对齐安排
确保视图在各种
自适配环境下完全符合要求
刚才 我们深入探讨了布局循环
和旧布局的互动用布局锚点而不是
旧方法来生成约束
以及用布局指南约束负面空间
我们还谈到不理想的约束
和如何解决歧义这两个问题
人们会在使用Auto Layout时
经常遇到
这就是所有的谜题内容
希望我们都为大家解释清楚了
如果还没有听过第一部分内容
建议大家找来看看因为其中的很多
内容都非常有用相关视频应该
很快就能做出来
或者大家可以回到11:00的时候
怎么都行当然想要了解更多详情
网站上有文档资料我们还有行星代码
很多是在第一部分中提到 不过我们
这里也有用到
你们在这看到的行星代码并没有问题
实际上运行正常
如果希望使用这里介绍的调试方法
可以人为地破坏它
我们还有几个相关讲座
再说一下 第一部分讲座是在今天早些时候
明天还有两个大家可能会有兴趣
在这之后 我们还要直接返回实验室
如果大家对Auto Layout
和Interface Builder
有问题的话 我们可以回答
今天就是这些内容
希望大家过的愉快