iOS和watchOS的性能
早上好
我是 本我是一名iOS性能工程師
今天我們要談一談iOS和watchOS的性能
那麼我們首先 要告訴你
你爲什麼要思考與性能相關的問題
如果你之前從未思考過你的app的性能如何
那麼爲什麼現在要開始
希望我能說服你留在你的座位上繼續往下聽
然後我們可以繼續聊一聊你應該如何思考性能問題
這個話題貌似非常寬泛有時甚至令人生畏
但是我們要把它細分成幾個類別
並給你提供一些具體的策略
來提高你的app在這些方面的性能
最終 很有可能你會興奮地發現自己
可以給watchOS編寫本地代碼
我們則要深入研究在這個平臺上
你還可以爲給用戶最佳體驗做出什麼貢獻
那麼你爲什麼要考慮性能問題呢
最簡單的回答是性能是一個特性
要想讓你的app用戶有良好的體驗性能是核心是中心要素
它不是額外的津貼或獎金或如果你有時間可以
在任務結束時你可以得到的東西
事實上 你在編寫app時應該時刻關注它的性能
這樣要求 有幾個原因
如果你的app反應迅速
如果它總是立即反應用戶的輸入
就會構建起用戶的信任
那樣就讓用戶知道如果他們需要通過你的app
訪問信息或進行交互操作
他們無需久等
這會讓他們很高興成爲回頭客
如果你要在使用iOS 9的iPad裏
採用多任務應用程序Multitasking
它不僅不能滿屏幕運行
實際上它也不能充分利用
系統的資源
所以app的性能問題再也不只是給你的app用戶
帶來糟糕的使用體驗
它還可會損害另一個app的
用戶體驗
你肯定想成爲Multitasking裏的好鄰居
所有App的體系結構都着眼於高效利用系統資源
比如CPU和內存你利用它們時
不只是感覺很好其實也是在節省電池
讓用戶可以堅持一天
對此他們真的很感激
最後 iOS 9支持範圍龐大的硬件
而要持續地爲所有的客戶
提供優秀的app和特色功能性能是一個先決條件
那麼 我就有希望說服各位 你們不必走出去了
你們應該如何思考有關性能的問題呢
開發app的第一步
是選擇技術
這一步至關重要 因爲你需要選擇
哪種技術會
讓你的用戶有最好的體驗
一旦你開始構建應用程序
你就可以開始採取測量手段
並真正理解在你的app裏用戶
在重要的交互中的體驗情況
你的測量手段會告訴你今天你的app的下載情況
一旦你得到了那些數據你就可以設定一些目標
比如在把它提交給應用商店之前 你想讓
你的app處於何種狀態
最後 一旦你得到那些數據 你就已經準備好
開始修改代碼來提高app的性能
你可以遵循一個很好的工作流程
來全力實現你的目標
那麼讓我們從選擇技術開始
選擇正確的工具來完成這項工作是
構建app的一項重要
的早期工作 是保證app性能卓越的一個前瞻性的步驟
而選擇技術的第一步是
瞭解的這些技術
所以在這個演講中
我將引用今年和前幾年的幾場其他演講
這幾場演講都涉及了
我們認爲有助於提高
app性能的技術
一旦你知道有多少技術可以爲你所用
那麼你就可以根據你的app的
設計構想和工作內容
來挑選最合適的技術
舉一個很好的例子如果你的app需要
存儲三個字符串
你可能可以把這些字符串寫進一個plist文件或
放在用戶默認中
但是 如果您的app需要使用3000個字符串
你可能就要考慮核心數據了
說到核心數據
當你選擇技術時
我強烈建議你
考慮AppleAPIs和框架
我們在AppleAPIs和框架上花了大量時間
力圖讓它們滿足你和你的用戶的
需求 我們也在其基礎上創建我們自己的產品
採用Apple APIs和框架的一個好處是
用戶在安裝了你的app之後
他們可能會安裝一個iOS更新
這些更新經常包含對核心APIs和技術的
性能改進
所以下次他們在安裝了
一個iOS更新之後 打開你的app就會發現app神奇地變快了
那麼你選擇了某些技術
並且開始構建應用程序了
現在我們要談論測量問題
有幾個類別的性能
我們可以考慮測量
讓我們從動畫開始
動畫讓你的app活潑 流暢
還能夠讓用戶知道他們在哪裏 發生了什麼
測量動畫性能的最簡單的方法
是Core Animation工具
反應速度測量的是你對用戶的輸入做出反應的迅速程度
實際上 測量反應速度
最簡單的方法看起來技術含量有點低
但是它真的很強大
並且只是插裝你的實際代碼
我將給它舉一個例子
更復雜的場景可能涉及多個線程
或大量的系統交互
對於這樣的場景有一個偉大的工具叫做系統跟蹤
最後要說的是內存
內存是移動設備上最寶貴的資源
確保你的app的內存
正好能夠滿足需要不多不少
這一點很重要
和前面相似的是有一個簡單但強大的方法
來瞭解app內存的使用情況
我馬上就要談到了那就是Xcode調試器
如果你要瞭解更多情況
還有一個很好的工具叫做存儲器分配
如果你認爲有漏洞 也有一個工具
來幫助你追蹤這些漏洞
那麼
讓我們舉一個代碼插裝的例子
我這裏有一個IBAction連接到一個按鈕
所以當用戶按下按鈕時
我就要加載一個圖像並把它放在我的視圖
而且我想知道這需要多長時間
所以我要用一個AP
叫做"CF絕對時間當前值"
現在 我並不關心當前時間的
絕對值但我在意的是
它們之間的差別
這個API 儘管它是SWIFT 是類型推斷
非常好 但是我將告訴你它會返回一個雙精度浮點
具體地說 這個雙精度浮點數以秒爲單位代表當前時間
一秒鐘實際上是一段很長的時間
如果你的app用了一秒鐘 你的用戶
真的會感覺到
其實我們發現毫秒
是一個更可行的度量單位
所以我們要從結束時間減去開始時間
並把結果乘以一千
以得到以毫秒爲單位的測量結
概要描述app的發行組態
很重要 這樣你將得到你的用戶所得到的
所有的編譯器優化
你也將瞭解你的app在它的領域內的
實際表現；然同樣重要的是不要
把你的性能插裝提交給應用商店
所以我的建議是你在Xcode中
複製一份你的研發流程
同時定義一個額外的定義
這樣您就可以用性能插裝
輕鬆 快捷地構建一個app的發佈版本
那麼什麼類型的反應我們有興趣測量呢
當然是按鍵和按鈕
大多數情況下 你可以在IBActions中做這些
你也可以用UIView觸摸處理代碼做這些事
或者你可能以手勢識別器爲目標
App性能的另一個有趣的方面
就是用戶在使用這個應用程序
並切換到不同的視圖時感受如何
無論他們是使用標籤欄還是模態視圖
在這種情況下我們覺得思考
"視圖將顯示"和"視圖出現"之間的時間
是件有趣的事因爲那讓你可以比較
你的哪一個觀點要花更長的時間來準備 以出現在屏幕上
那麼你已經取得了一些測量結果
瞭解了你的app的表現
在你將app提交到應用商店之前你希望它取得怎樣的成績
要如何設定這個目標呢
在以60幀每秒的速度運行時 動畫
感覺很棒 逼真流暢又有生氣
今年我不打算過多談論動畫
因爲去年有一個很好的關於動畫的演講 你可以查看
名字是"iOS Apps中的高級圖形和動畫"
那場演講談到了核心動畫工具
以及如何使用它
來衡量並利用所有硬件
改善動畫性能
今天我們要把大量的時間花在反應速度上
反應速度 再說一次
反應的是你如何對用戶輸入進行反應
我們發現
如果它需要超過一百毫秒
用戶就能夠感覺到
所以 你對任何響應性的目標應是一百毫秒
順便提一下 你想考慮
在你要支持的最老的硬件上實現這些性能目標
如果你針對iOS 9
那麼可能是最早的iPad mini
iPhone 4s 甚至 iPad 2
如果你已經有了這其中之一
或者更確切地說你仍然還在用這着其中之一
那麼繼續用它接下來對它進行檢測
如果不是這樣
那麼在Apple Online Store上有很棒的翻新部件
所以你已經設定了目標
你已經做了檢測
現在你想繼續通過在你的app上更改代碼
來提高性能
我們如何開始呢？
首先 不用猜
你一定想用工具做簡要分析
解決造成你的app性能問題的根源
你的直覺總是對的這想法很誘人
但是這可能如同拋硬幣一樣不準確
據此 不要過早優化
除非你有證據表明儘可能簡單的做法
不足以達到卓越的性能否則不用把你的代碼複雜化
經常是人們引入一些機構試圖避開性能問題
結果卻是造成他們自身的性能問題
一次只做一處更改
你肯定想開始培養你的直覺
以便知道如何能夠改進你的app的性能
但是很難知道你做的哪件事確實改進了你的app性能
所以一次只改一處
我這裏實際想說的是沒有奇蹟
這只是普通的調試而已
所以同樣要本着嚴謹而科學的態度去排除
app中存在的死機或功能問題
這是我希望你打印出來的圖片
掛在你牆上的的圖片設成你Mac的壁紙
這就是我們如何通過更改代碼
來改進app性能的
首先你要做的是在腦海中重現這個問題
之後用工具進行分析 瞭解
你的代碼是哪裏
造成了性能問題
在一個足夠大的代碼庫在
你的直覺可能的確不對
所以還是收集證據爲好
之後 一旦你找到
造成你app中性能不理想的代碼
你就能確切算出你需要爲此
花費多長時間
最後你只要有針對性對對代碼做一次更改
以嘗試達到你的目的
常常是一處更改
無法讓你一次達到目的 事實上
多次更改
才能最終達到你的目的
這就是爲什麼說這是一個週期因爲你可能會發現
你更改代碼並再次重現後 有所改善
但沒有達到你最終的目的
所以你要繼續這個週期直到你滿意
幻燈片上是分析和檢測情況似乎都類似
但是實際上
這是改進你的app性能的
兩個分立的步驟
再次分析時採用工具如Xcode調試器
以及Instruments:Time Profiler
就與你性能方面具體問題相關的代碼
得到一個全面的概覽
檢測針對你代碼某具體區域
以準確瞭解用戶的
等待時間
我給出的
"CF absolute timeget current"的例子
再次證明確實很好用
對於更復雜的情形 有SystemTrace
所以讓我們來談談響應響應性
響應即是對用戶輸入的反應
談到響應性 我們不得不提到
你app的主線程
因爲你app的主線程
是你消耗所有用戶輸入的所在
--來自觸摸屏的一切
一次敲擊或一次滾動--即有來自設備其他傳感器的一切
比如定位更改
及多重任務縮略圖及其他系統狀態事件等均在這裏
如果你的主線程主要針對
用戶輸入響應任務
你的app將始終感覺很棒
如果你對你的主線程操作有些不夠細心或者
也許你在你的主線程上
什麼都做
那麼你的app可能出現停滯或凍結現象
所以我們應該避免對我們的主線程做什麼？
特別注意CPU密集型業務
這可能是解析你從網絡上下載的很長一段字符串
可能是對某圖像進行過濾
以及與外部資源有關的任務
我回頭還會講這個問題
我今天不打算花太多時間講CPU密集型業務
因爲本週開始的時候有一個非常好的演講
演講者做了
叫做"Profiling in Depth"的儀器
他們事實上講到用儀器
對其中CPU密集型業務做性能改進
很棒
所以我們回到與外部資源有關的任務
其另一名稱叫阻塞調用
之所以叫這個名字是因爲你的線程進展被阻止所以你被阻斷
那麼 什麼是阻塞調用？
你們中可能有人熟悉系統調用（syscall）
任何進行了系統調用的代碼
路徑均被認爲是阻塞調用
正如我所說
這一般涉及到
目前不在內存中的資源
一般是從磁盤載入內容
或網絡上取用材料
有時候 你的主線程也會被阻塞
原因是在等待可用資源
但是它是在等待他人完成資源使用
因爲該資源一次只允許一個客戶使用
那麼 你如何認出你線程的阻塞調用？
有時它們剛好出現在你目前
"同步"一詞即表示阻塞
所以這是一個線索當你讀代碼時
你要注意到它
所以很好
我們在我的代碼中發現了這個阻塞調用
‘NSURLConnection發送同步請求’
那麼 現在我做什麼？
有時會有一個同步的API --
尤其是對於聲稱
其名字同步的API--
你可以輕鬆轉換到這種API
這種情況下 我們很幸運 而事實上
這個名字中出現的是有用的"異步"字樣
那麼我們就確切知道了自己要進入的是哪裏
很遺憾 這不似搜索和替換那麼簡單
你正在改變你的代碼的執行順序
你可能有與此次操作結果
有關的其他代碼
所以很遺憾 需要一些調整
但是讓我說
你沒有能夠輕鬆切換到的相當的async
或者你想將全部代碼
一次操作即移出主線程
這種情況下用GrandCentralDispatch即可
Grand Central Dispatch是Apple的一項技術
可管理你app中的全局線程池
已經好了即使你沒有注意到
如果你熟悉其他平臺上的線程編程Grand Central Dispatch
在某種程度上可完全避免混淆 消除你
對於啓動線程及其狀態等的擔憂
讓你明確出向運行的任務
如封閉或阻塞
這些封閉任務一旦你提交給Grand Central Dispatch
即在你的流程中任一線程上運行
所有線程都很棒 因爲你不必
啓動它們 也不必考慮
它們的數量 但是它們會有警告
由於你不控制你的代碼在哪個線程上影響
你在封閉或阻塞任務中明確的任何操作
必須在任一線程上均安全
有些什麼例子嗎？
一些對象事實上只是被限制
進入主線程
例如UIKit視圖和控制器
必須在主線程上創建修改或銷燬
一些對象如Foundation和Core Graphics
可採用任何線程
但是 其中許多另有規定
這些規定是調用者提出
目的是確保當時只有一個線程被採用
它們內部無自我保護
所以 如果你要用於多線程
你常常必須自行採取保護
爲此 最好的方法是GCD串行隊列
要想知道你的對象預計會被如何處理
最好的方法是讀標題
每個對象 通常在靠近初始化程序處
應有一個描述 確切說明該對象
在你的app中如何通過線程被存取
如此 讓我們回到我的例子
我在這個代碼中做什麼？
我從一個文件中加載一些數據
我對一個圖像進行處理和過濾
最後我把它放在我視圖層次的圖像視圖中
那麼現在當用戶敲擊我app中的一個按鈕時
我的主線程就有點像這樣
它會按順序做3件事
簡單 直接 很好理解 很棒
遺憾地是
如果在我做這件事的時候
用戶偶爾做嘗試向右滾動或旋轉
我們將無法操作輸入項只能拖後
關於阻塞請求
你永遠不知道它們要花的時間這就像天氣的變化一樣
用戶需要等待不知道有多久
這會使他們很沮喪
那麼如何解決這一問題呢？
我們可以使用Grand Central Dispatch
我們可以使用Grand Central Dispatch API的
"dispatch async"異步執行
現在 "dispatch async"採取了兩個命令參數
第一個需要輸入的是
你想使用哪一個隊列
如我所提到的那樣你的app內已經有幾個隊列
由GCD爲你創建
我將使用 "dispatch get global queue"API得到其中之一
因爲有幾個可供選擇我需要告知GCD
我想要哪一個
這兒我要用"Quality of Service"等級
"Quality of Service"是關於怎樣告知系統
你請求它完成的工作相對於app上的其它工作
以及系統內的其它工作有多重要
在這種情況下
因爲這是用戶行爲的直接結果
並且用戶也許正在等待這一結果
我將使用"user-initiated"
QOS等級
"dispatch async"
最後的參數是閉包包含你想讓它運行的代碼
好了完成了
已經離開了主線程
好了嗎？
還沒完全好
如我提到的 UIKitviews
和controllers只是在主線程上使用才安全
所以我不能把它們置於該閉包內
因此這並不是代碼最慢的部分
對嗎？
前兩行是阻塞請求
爲什麼我不把它移到主線程上？
不幸地是 那樣也是不行的
因爲我實際已經改變了代碼
執行的命令
該關閉並不一定在
"dispatch async"返回的的時候運行
當然希望它將很快運行
最有可能的是
一旦GCD將工作送至
dispatch queue它會立即進入到
下一行 在此點上
我的圖像仍然可能沒有
用戶將永遠看不到他們的圖像
這會使他們抓狂的
那麼如何處理這種情況呢？
我們實際上可以向"dispatch async"
發出另外一個請求這次
我們將使用一個特別的隊列叫做主隊列
主隊列則保證會由主線程服務
你可以使用APIdispatch的
"get main queue"獲得主隊列
這意味着
如果你有對象需要進入
主線程 你可以把它們放進閉包中併發給dispatch
你只需要確保它們這個隊列中運行
現在我們已經做到了
我的imageView完好
這樣
我們將該工作退出主線程
但是當我們需要使用主線程上的
對象時 一旦數據準備好
我們就可以這樣做
順便說一下 我們最初要解決的問題
如果用戶嘗試 滾動或旋轉
將會立刻得以處理
謝謝！
那麼你可能在代碼中發現
哪一種類型的阻塞請求？
它們在暗處 可能藏在各種地方
如我所提到的那樣 聯網、
NSURLConnection和朋友
很容易無意間
向網絡發出同步請求
通常 你可以切換到異步API
或者如果你想要對app何時進入網絡
有更多的控制
在某些情況下 讓它在不運行時進行下載
我建議你查看NSURLSession後臺演講
Foundation initializers當你在代碼中遇到這些問題時
它們並非看起來那麼可怕
它只是一行
有什麼可怕的？
但是 其中一些
像名爲"contents of file"或者
"contents of URL"
可能不得不使用硬盤或其它資源
來滿足要求
最後 Core Data
它們看起來像一些對象 對嗎？
Core Data代表你不斷地進行很多I/O
幸運地是 很容易將一些
記錄的操作移到
不同的併發模式
實際上 今年在CoreData內有一個新的API
簡化各種一般的批量操作
你可以另選時間從演講中瞭解
"Core Data的新變化是什麼"
所以如果你發現了一個阻塞請求
切換到異步API
或者使用GCD
如果你想更多瞭解GCD 包括
今年可以簡化一般操作的新API
以及前面提到的qualityof service等級
這兒一小時前就有一個不錯的會話
稱作 "GCD BuildingResponsive and Efficient Apps"
我建議你看看它
讓我們繼續看一看存儲
我說過存儲是移動設備上
最寶貴的資源
如果你計劃在app中採用多任務處理
你不能再自由使用屏幕
當然你也不能自由使用
其它系統資源
如果你把一些代碼從app帶入
watchOS 那麼 重要的是
內存佔用應當緊湊
另外 iOS 9支持很大範圍的硬件
如果你想把大型apps和功能帶入一些
OS支持的低端設備
存儲在這些系統中非常重要
最後 如果你是擴展的開發者
想一想你的擴展也許現在被要求運行
而這時屏幕上還有兩個其它的apps
因此 存儲會是十分需要的 你需要
儘可能少地使用
現在讓我們看看存儲在iOS上如何工作
基本原則
任何iOS 裝置裏都沒有足夠的物理內存
把所有暫停的App同時保存在RAM裏
當我們有內存壓力時我們實際上必須
清理一些事情出去把空間留給前景無限的app
在OS X 或PC 操作系統上我們可能要首先
要把這些app的狀態寫到磁盤上 但是
這在移動裝置上根本行不通
所以 一旦你要清理空間你就必須消失
還有更多細節可以慢慢詳述
實際上前幾年有一個所謂的偉大談話
叫做"iOS App 性能內存"
滑動模板和顏色稍微有點不同
但是信息真的是貨真價實
所以如果你感興趣的話請去看看那個產品
學習學習這是如何運作的
但是如果你以前從未想過app裏有內存
總是歸結爲
回收內存需要花時間
如果你已經用完系統中所有
可用的內存然後需要更多
你可能要等待而系統清理一些東西
以你的名義清理
如果你突然請求大量內存
系統就需要清理若干不同內容
來滿足你的請求
這影響到App的反應效率
相反 當你在背景裏時
如果你的足跡非常簡縮
實際上你不太可能成爲
被清理之列
所以當用戶返回到你的app時
你能夠恢復原貌而不是重啓
這感覺就快多了
所以 如果你以前從未想過內存的話
這真是很重要的第一步
要合理化你的App內存足跡
也就是說要想一想各種類型
所用資源的類型
這些可能是字符串；可能是JSON 或 XML的小泡泡
你從網絡上下載的這些
還有圖片 也是
來自網絡 或者用戶用照相機照的
還有 Core Data管理的東西 用了很多
潛在的資源似乎是奇蹟發生
一旦你思考這些資源 你就會開始
按照用戶互動把他們分組
歸類 這有助於你建立一個思想模式
對於自己App所用的資源
一旦你已經那樣做了
我們可以用Xcode 調試器快速檢查你的作業
要了解更多細節
我們可以去配置欄
和遺漏工具
我不想說這麼多今天
但請找找
去年的類似談話名叫"用工具
提高你的App"從那裏開始看吧
所以我們返回到Xcode調試器
我已經下載了Photos框架案例app
這是從蘋果開發者網站下載的
我已經安裝到手機中打開了Xcode 項目
草創並運行
現在我剛剛開始看看左上方在我調試器的Xcode窗口的左上方
放大進去
這裏 正好我看到
不用眼睛貼着手機屏幕也能看到第一個數據 太有趣了
現在我知道在我的app發起之後
在用戶可以做任何事情之前
我正在使用大約10MB的內存
我想要蒐集的下一個數據點
就是我想要離開
所有在我的App中最常見的用戶交互都執行了
因爲這是一個照片App所以我會打開一張照片
現在我明白了每打開一張照片
我的App另外需要大約2.5兆的內存
在這一點上 另一個有趣的實驗是
一遍又一遍地重複執行同樣的動作
所以 我可能會多次打開一張相同的照片或兩張不同的照片
如果我的內存佔用持續增長
我可能需要解決一下內存方面的問題
最後有趣的是
我需要使用我設備上的Home按鈕來暫停App
而且我想看看當它進入後臺時會發生什麼
它看起來好像比它剛剛啓動之後
要稍微小了一點點
這真是對打擊很好的一種平衡
你不想再重複你在恢復期間所做的工作
但你也想保持後臺的緊湊
以確保你的用戶實際體驗到那個恢復
需要注意的是
照片框架示例App
實際上並不需要做什麼特別的事情或施展魔法
以實現這一行爲
它實際上只是一個非常簡單的
對蘋果技術最小的一種應用
而且蘋果技術實際上通常會將這個行爲
進行內置而它們只是管理一下基本資源
以自動響應於應用程序生命週期事件
所以你並不需要擔心這個
但是
如果你有大的對象或者你自己的其他資源
那麼你將有一些動態上的損失
並會返回來響應應用程序生命週期事件
做到這一點最簡單的方法是
使用NSCache
不過在某些情況下你雖然可能會遇到
需要將不能靈巧地被表示爲可回收的對象用於NSCache
這時候你不得不實際上執行自定義代碼
以響應你App中的生命週期通知
有一些通知你可能會感興趣
比如"確實進入了後臺"的通知
你的App在掛起會得到這個通知
而這正是NSCache使用這個通知
在你進入後臺時使App實際上執行了釋放
另一個有趣的通知是內存警告通知
系統實際上是在發出這個通知之後纔開始逐出
掛起的App從而給它們一個釋放的機會
或許它們能夠避免被逐出
只要它們佔用的內存下降了
所以我在這裏對那個問題舉了一個簡單的例 子
我將使用默認的NSNotificationCenter
在這種情況下 我要添加一個觀察員
以觀察"確實收到了內存警告"的通知
而所有我要做的就是調用一些"自定義緩存清除"的代碼
也許這會搭板C結構一起使用
並釋放一些其他的內存
需要注意的是 如果你真地註冊了
NSNotificationCenter觀察員特別是在初始化時
請一定要在反初始化中刪除你自己
你知道 內存實在是太重要了
因爲我還準備講另外一個課程
我希望你們去聽一聽
這個課的名字叫做
"在安裝有iOS 9系統的iPad上
優化你的App多任務處理"
但實際上即使你的App無法在iPad上運行
或者你有沒有計劃支持多任務處理
也請你去聽一聽這個課程
這個課程對應用程序所使用的資源類型
介紹了大量的詳細信息
包括它們通常以何種模式進入訪問
以及更多有關如何使你的App響應
系統內存狀態的信息
這真是太棒了
最後同樣重要的是我希望你們都會非常興奮地看到
我們把原代碼帶到watchOS 2中
當你正在思考如何建立你的watchOS 2 App時
你必須開始於一個偉大的設計
這個設計真正地關注於你App的基本功能
使它們輕鬆、愉快
並且方便於用戶訪問
如果你在這方面需要獲得幫助
這裏有一個非常不錯的課程你可以去聽一聽
這個課程叫做"蘋果手錶App設計"
一旦你爲你的蘋果手錶App找到了一個偉大的設計
那麼你就可以開始考慮
你的iOS App在哪些方面可能值得再次使用
這可包括實際代碼
或熟悉的API訪問模式
以及平臺之間共享的框架
有時候 你在iOS上做的一些事情
實際上可能在watchOS上沒有任何意義
比如出於性能上的考慮就會這樣
你最終會執行新的機制
以便在其它平臺上獲得相同的結果
watchOS用戶希望交互行爲快速而簡單
而且他們總是希望能在App看到最新的相關數據、
通知以及快捷視圖
作爲一名App開發者這對你意味着什麼呢？
用戶最有可能做的事情是
在watchOS上剛一啓動App
隨後就能看到他們想看到的內容
那麼我們能夠做的工作
是不是讓watchOS有非常久的啓動時間
以及非常緩慢的響應呢？
我們必須關注於最大限度地減少兩個工作量
一是你生成的網絡流量以及你必須在設備上
完成的以便它能順利執行任務的工作量
如果你正在訪問的服務器你可以對它進行控制
並且能夠添加新的API
那麼請確保你給蘋果手錶發送了
適當大小和格式的響應
有的可能很簡單比如從JSON或XML數據塊中
刪除未使用的密鑰
調整圖像大小等等
這樣蘋果手錶就會精確地顯示它們
就如同它們是通過連線傳輸過來的一樣
而且不必做任何額外的工作如果你的API適用於
大屏幕設備
可以同時顯示10條
或20條記錄
它可能會發回
一次調用中發生的所有這些信息
但實際上 對於蘋果手錶來說
你應該只發送需要在單個屏幕上顯示的
有關記錄的正確數字
爲了隨時顯示更新的相關信息
很重要的一點是使用你的iPhone App
來保持App內容的更新
App內容是平臺之間的
一種雙向共享狀態
因此當用戶在任一用戶端上採取行動
這將導致他們希望在另一用戶端上
看到可以更新的不同的東西
API對此的反應是
"手錶連接性更新應用程序內容"
做這個工作的最好時刻
是你的iPhone App被後臺程序刷新喚醒的時候
當它完成下載新信息並更新了它自己的快照時
它也可以將這些信息推送到蘋果手錶上
這樣它將在下一次用戶啓動時做好準備
最後
如果你所依賴的服務器由於某種原因你不能作出更改
比方說你正在與第三方API競爭
你可以利用你的iPhone網絡和CPU來連接
從而實際上執行一箇中介
使格式和大小響應於手機
你希望API的反應是"手錶連接發送信息"
所以你會發送一條消息到iPhone上
提出你的要求然後iPhone將會下載它
並完成我提到的所有操作如刪除未使用的密鑰、
減少記錄數、調整圖像大小等等
然後它會向手錶發送一個緊湊的可操作的答覆
好了 WC課程又到結束的時間了
讓我作一下總結
性能是一個特徵
這是一個重要的方面
你的App必須給予你的用戶豐富的經驗
從建立你的App的第一天開始
你就應該把這一點記在心裏
當你使用高效的App時你會感覺非常棒
因爲它們建立了用戶的信任它們節省電池消耗
請瞭解我提到的所有的蘋果技術
當你正在思考如何建立你的App時請選擇最好的技術
請保持你的主線程隨時爲用戶輸入作好準備
你需要了解你的App何時以及爲什麼使用內存
你需要獲得watchOS
下載以及處理極小集信息的大量經驗
這裏有一些非常不錯的書面資料
如果你開始對這個東西產生興趣你可以學習一下這些資料
好了 這些就是我今天上課的主要內容
最開始 講到的一些技術是我們今年新推出的技術
還有一些技術是前幾年推出的
謝謝大家 祝你們週五愉快！