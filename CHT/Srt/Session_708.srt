00:00:22.089 --> 00:00:26.560 
調試能量的問題

00:00:28.462 --> 00:00:29.396 
你們好

00:00:31.532 --> 00:00:32.399 
嗨
大家好

00:00:32.933 --> 00:00:33.767 
早上好

00:00:34.401 --> 00:00:36.703 
希望你們在蘋果全球開發者大會上愉快

00:00:37.871 --> 00:00:39.006 
我叫Abhinav Pathak

00:00:39.072 --> 00:00:40.941 
和我的同事
Pai-Han Huang

00:00:41.008 --> 00:00:43.110 
將要談談調試能量的問題

00:00:44.211 --> 00:00:46.547 
我們將向你們顯示我們現有的工具

00:00:47.181 --> 00:00:50.951 
以及我們今年特意
爲iOS構建的新的工具

00:00:51.552 --> 00:00:56.223 
使用這些工具
你發現你的應用程序中的能量問題

00:00:56.390 --> 00:00:59.159 
另一方面就是了解決這些問題
客戶就會真正喜歡你的程序

00:01:00.928 --> 00:01:01.762 
讓我們開始

00:01:03.163 --> 00:01:04.230 
紅色的電池圖標

00:01:04.331 --> 00:01:07.267 
當它出現的時候我們都很憎恨它

00:01:08.468 --> 00:01:09.837 
客戶也很憎恨它

00:01:11.271 --> 00:01:17.411 
具有良好的電池壽命對於
精彩的用戶體驗是十分重要的

00:01:18.579 --> 00:01:24.985 
一次又一次證明
人們所想要的最重要特色是電池的壽命

00:01:26.420 --> 00:01:28.622 
在Apple
爲確保客戶獲得良好的電池壽命

00:01:28.922 --> 00:01:32.059 
我們做出了很大的努力

00:01:32.926 --> 00:01:38.932 
然而通常客戶運行的應用程序

00:01:38.999 --> 00:01:41.935 
是從它們的設備中吸走能量的主要原因

00:01:43.470 --> 00:01:44.905 
爲了幫助我們的客戶瞭解

00:01:45.372 --> 00:01:49.443 
哪個程序消耗電池能量
哪個程序耗能最大

00:01:49.776 --> 00:01:56.016 
幾年前針對OS X側
我們就有了活動監測能量影響工具

00:01:56.517 --> 00:01:57.417 
在這裏你可以看到

00:01:57.484 --> 00:02:03.657 
每個應用程序瞬間及一段時間內的影響

00:02:03.724 --> 00:02:06.693 
這樣用戶就可以瞭解
他們的設備發生了什麼

00:02:07.995 --> 00:02:12.165 
在iSO 8
我們引入了電池使用用戶界面

00:02:12.232 --> 00:02:13.634 
一個面向用戶的UI

00:02:14.234 --> 00:02:18.372 
在這裏他們可以看到
最後24小時以及最後7天內

00:02:18.805 --> 00:02:23.644 
能量在他們所
使用的不同的應用程序中的分解比例

00:02:25.579 --> 00:02:28.815 
排在前面的應用程序可能有正當的理由

00:02:28.882 --> 00:02:31.785 
“嗨 我喜歡這個應用程序
所以我一直在用”

00:02:32.986 --> 00:02:35.889 
爲了使客戶更好地瞭解
這裏的關鍵因素是什麼

00:02:36.490 --> 00:02:41.161 
今年我們在它的頂部包括了一個
單獨觸發器

00:02:41.228 --> 00:02:44.531 
在這裏他們可以切換
並且看到使用了多少應用程序

00:02:45.065 --> 00:02:47.167 
獲得多少屏幕時間

00:02:47.367 --> 00:02:49.169 
以及它在後臺運行使用了多少

00:02:49.570 --> 00:02:52.172 
然後他們就可以進行評估
“嗨 我用它用的多”

00:02:52.306 --> 00:02:54.374 
或者“嗨 這個程序消耗了很多能量”

00:02:56.543 --> 00:03:02.649 
這個講座就是關於
如果你的應用程序在列表中名列前茅

00:03:03.150 --> 00:03:07.855 
你怎樣把它降下來
同時不影響用戶的使用的問題

00:03:08.655 --> 00:03:11.191 
這個講座也針對通常耗能很少的人們

00:03:11.258 --> 00:03:15.095 
如何才能耗能更少
並且獲得完美的客戶體驗

00:03:16.730 --> 00:03:19.366 
爲了更好地進行概括

00:03:19.600 --> 00:03:21.635 
我們將快速介紹
能量的基本原理和最佳範例

00:03:21.702 --> 00:03:24.271 
我們將對早晨的講座進行總結

00:03:25.339 --> 00:03:27.841 
我們將向你展示能量調試流程

00:03:28.041 --> 00:03:31.245 
以及我們用來調試能量的工具

00:03:32.212 --> 00:03:33.413 
我們將進行演示

00:03:33.680 --> 00:03:39.386 
我們爲這次講座
專門構建的樣本程序中修復能量問題

00:03:39.586 --> 00:03:45.726 
向你展示修復能源問題是多麼簡單
然後我們就將結束這次講座

00:03:49.463 --> 00:03:50.297 
就這麼簡單

00:03:50.364 --> 00:03:52.533 
每個人都知道
能量101

00:03:52.799 --> 00:03:54.601 
能量等於功率乘以時間

00:03:55.269 --> 00:03:56.670 
我們現在看到這裏有個圖表

00:03:57.070 --> 00:03:59.106 
X軸是時間
Y軸是功率

00:03:59.173 --> 00:04:01.308 
這是一個應用程序使用波形圖

00:04:01.608 --> 00:04:02.442 
發生了什麼

00:04:02.509 --> 00:04:06.313 
我們說一個用戶啓動一個應用程序
一堆活動在後臺支持這個程序

00:04:06.547 --> 00:04:07.648 
然後該程序就懸停

00:04:08.782 --> 00:04:10.517 
最重要的一點是

00:04:10.584 --> 00:04:15.923 
圖表下面的整個區域
都是這個特定的應用程序的能量消耗

00:04:18.325 --> 00:04:20.394 
能量是由功率和時間來決定的

00:04:20.861 --> 00:04:22.362 
爲了進一步說明這一點

00:04:22.663 --> 00:04:25.332 
我們在這裏取兩個長方形

00:04:25.666 --> 00:04:30.003 
它們消耗的功率是不同的
消耗的時間也是不同的

00:04:30.237 --> 00:04:31.772 
但是他們的能量消耗是相同的

00:04:34.608 --> 00:04:35.509 
第二個概念

00:04:37.911 --> 00:04:40.480 
有些叫做固定成本的東西
有些東西叫做動態成本

00:04:40.814 --> 00:04:44.251 
我們在系統中的許多的硬件組件

00:04:44.518 --> 00:04:47.654 
如果你要使用它們
我們必須將它們引入一種

00:04:47.721 --> 00:04:49.523 
它們可以開始服務於你的請求的狀態

00:04:50.490 --> 00:04:55.329 
相比休眠轉態
這些狀態消耗能量很大

00:04:55.829 --> 00:04:58.966 
一旦將它們引入
它們就做你要求它做的工作

00:04:59.433 --> 00:05:02.603 
然後我們讓它們保持等待狀態

00:05:02.870 --> 00:05:04.304 
你知道的
將會有更多的工作出現

00:05:04.605 --> 00:05:06.273 
一旦我們看到沒有出現工作出現

00:05:06.440 --> 00:05:09.176 
我們讓它們平靜下來
進入睡眠

00:05:10.944 --> 00:05:14.014 
固定成本可以是非常非常昂貴

00:05:14.448 --> 00:05:17.451 
我們在整個的講座中
都將追蹤這個固定成本

00:05:17.518 --> 00:05:20.220 
只要它開始影響你的應用程序

00:05:22.322 --> 00:05:28.195 
當說到降低能量的使用方法
有三條非常簡單的你需要遵守的規則

00:05:28.795 --> 00:05:30.764 
第一個規則
永遠不要做

00:05:31.798 --> 00:05:34.835 
客戶真的需要完成那個工作嗎？

00:05:35.469 --> 00:05:38.105 
如果你不做它
固定成本 動態成本 能量功率時間

00:05:38.205 --> 00:05:40.307 
我們說到的所有的一切東西都是零

00:05:41.141 --> 00:05:41.975 
真了不起

00:05:43.710 --> 00:05:45.412 
如果你必須做
就少做點

00:05:45.812 --> 00:05:50.083 
用最少的工作量來滿足客戶的需要

00:05:51.885 --> 00:05:53.420 
下一個就是
在一個更好的時間去做

00:05:54.021 --> 00:05:57.291 
一個客戶在野外拍攝照片

00:05:57.357 --> 00:05:59.259 
我難道需要現在
就把照片上傳到服務器上面

00:05:59.660 --> 00:06:03.363 
也許應該有些耐心
等到用戶將電源插頭接上再說

00:06:05.566 --> 00:06:07.100 
第三點就是要高效地去做

00:06:07.167 --> 00:06:12.272 
什麼是最有效的算法
或者我用最好的辦法來服務這個請求

00:06:12.773 --> 00:06:17.511 
我們可以看到這些不斷地
在我們講座的不同部分中出現

00:06:20.781 --> 00:06:24.184 
這些問題需要插入我們所具有的
能量調試流程和工具才能解決

00:06:24.918 --> 00:06:27.955 
讓我們來看看能量調試流程是什麼樣子

00:06:28.155 --> 00:06:30.457 
它與正常的軟件工程調試很相似

00:06:30.891 --> 00:06:33.060 
你都做些什麼
你編寫代碼並構建它

00:06:34.161 --> 00:06:35.996 
你在一個非常簡單的調試器上運行代碼

00:06:36.063 --> 00:06:39.366 
該調試器將向你
顯示你的代碼中的高級別問題是什麼

00:06:39.833 --> 00:06:43.537 
你可以很容易地識別 修復很多問題
然後你再重新運行它

00:06:44.972 --> 00:06:46.640 
然而有些問題很難

00:06:47.040 --> 00:06:50.978 
你不斷進行修改並說，
“給我一個集中調試器，好嗎？”

00:06:51.111 --> 00:06:52.179 
“嗨 我有內存問題”

00:06:52.246 --> 00:06:54.448 
讓我獲得一個針對內存的集中工具

00:06:54.515 --> 00:06:58.752 
可以直接針對我的程序代碼的確切行
問題在哪？

00:06:59.920 --> 00:07:01.121 
一旦你用這個完成了調試

00:07:01.455 --> 00:07:03.524 
你將它發給你的客戶
你的客戶就可以使用了

00:07:05.425 --> 00:07:10.364 
在OSX一側有Xcode
在這裏你可以編寫和構建你的程序

00:07:12.232 --> 00:07:16.170 
作爲通用調試器的一部分
在Xcode的內部有能量調試工具

00:07:16.236 --> 00:07:17.671 
我們馬上就要談到這種調試工具

00:07:18.105 --> 00:07:21.608 
這些說明最主要的是
告訴你的應用程序是如何運轉的

00:07:23.544 --> 00:07:26.346 
作爲儀器的一部分
我們有集中工具

00:07:26.413 --> 00:07:27.381 
一旦你識別

00:07:27.447 --> 00:07:31.218 
你會說“嗨 系統的這部分有問題
讓我過來修復這個問題”

00:07:31.985 --> 00:07:34.555 
至於客戶會受到能量消耗的影響

00:07:34.855 --> 00:07:36.056 
他們可以過來看看

00:07:37.791 --> 00:07:39.092 
在我們進入到工具之前

00:07:39.560 --> 00:07:42.362 
讓我們來看看
在OSX上的能量調試優先級

00:07:42.930 --> 00:07:46.266 
原因就是該工具非常關注
能量調試優先級

00:07:46.333 --> 00:07:50.504 
因爲它們能向你指出
你需要修復你的問題的確切位置

00:07:52.139 --> 00:07:58.512 
OSX上的優先級是CPU和GPU

00:07:59.546 --> 00:08:02.049 
它們有很高的固定成本

00:08:03.083 --> 00:08:07.054 
要將它轉入它們可以爲你服務
或者你的請求在空閒轉態

00:08:07.754 --> 00:08:13.227 
消耗的功率是它們在休眠狀態下的十倍

00:08:14.528 --> 00:08:15.662 
一旦它們在空閒狀態

00:08:15.729 --> 00:08:17.364 
如果你使用了百分之一的CPU

00:08:17.631 --> 00:08:20.968 
那就是要比最高空閒功率
消耗多百分之十

00:08:21.602 --> 00:08:23.136 
從那時起 指數增加

00:08:23.403 --> 00:08:27.508 
百分之十的CPU 2倍的空閒狀態
百分之百的CPU 一百倍的空閒狀態

00:08:28.942 --> 00:08:30.177 
這裏的規則很簡單

00:08:30.310 --> 00:08:33.179 
如果你不需要 就不要驚醒CPU

00:08:33.413 --> 00:08:34.948 
讓這頭大熊睡去吧 不要去挑撥它

00:08:37.717 --> 00:08:40.953 
我們在Xcode中的工具
我管它叫能量計量器

00:08:42.121 --> 00:08:44.725 
它打印出你的能量報告
就像是這個樣子

00:08:44.892 --> 00:08:45.726 
你如何到達那兒

00:08:46.093 --> 00:08:50.063 
你如果在運行你的應用程序
你點擊調試分析部分

00:08:50.497 --> 00:08:52.399 
你一點擊那兒
你就會看到一羣計量器

00:08:52.833 --> 00:08:54.334 
點擊能量影響計量器

00:08:54.968 --> 00:08:55.869 
你就會看到那個報告

00:08:56.670 --> 00:08:57.704 
你在報告中看到什麼

00:09:00.574 --> 00:09:06.446 
最主要的是
你會看到你是否是OSX中的壞公民

00:09:07.014 --> 00:09:11.084 
最根本的是
是否你正在使用超高CPU

00:09:11.952 --> 00:09:14.121 
如果你在阻止

00:09:14.454 --> 00:09:18.125 
你的應用程序在後臺中
且用戶看不到它

00:09:18.792 --> 00:09:22.196 
系統會嘗試讓你進入App Nap中
這是一種後臺懸置狀態

00:09:22.563 --> 00:09:24.264 
而你正在阻止系統那樣做

00:09:24.665 --> 00:09:26.233 
你並沒有積極服務於任何請求

00:09:26.500 --> 00:09:27.734 
但是你消耗了很多的能量

00:09:28.836 --> 00:09:31.672 
空閒阻止
你不讓CPU進入空閒狀態

00:09:31.939 --> 00:09:34.408 
如果它不能進入空閒狀態
它就不能進行休眠狀態

00:09:35.008 --> 00:09:38.679 
一旦進入休眠狀態
CPU喚醒開銷就會說

00:09:38.846 --> 00:09:42.082 
“嗨 負責把這個傢伙喚醒”

00:09:43.750 --> 00:09:46.954 
你一旦找出了最可能發生問題的地方

00:09:47.254 --> 00:09:50.357 
你能做的就只能在報告的下面

00:09:50.424 --> 00:09:53.227 
你有我們剛纔所描述的事情

00:09:53.694 --> 00:09:56.964 
但是你有這些可以跳入工具的按鈕

00:09:57.431 --> 00:10:00.767 
這些工具專門爲每個區域使用的

00:10:01.268 --> 00:10:07.074 
你知道的它們能夠幫助你定位
哪行代碼正在導致很高的CPU的使用

00:10:07.474 --> 00:10:09.810 
哪行代碼正在導致喚醒開銷

00:10:10.444 --> 00:10:12.779 
你可以繼續調試你的程序

00:10:14.882 --> 00:10:17.718 
說到減少OSX上的能量

00:10:18.318 --> 00:10:20.954 
我們再次強調我們的三個簡單的規則
永遠不要做 做得少一些

00:10:21.822 --> 00:10:23.223 
你想要合併所有的計時器

00:10:23.390 --> 00:10:25.325 
你不想不斷地喚醒系統

00:10:26.226 --> 00:10:27.261 
最小化CPU喚醒

00:10:28.295 --> 00:10:29.496 
在最佳時間喚醒

00:10:29.696 --> 00:10:33.100 
使用後臺活動調度程序API

00:10:33.166 --> 00:10:35.002 
在這個調度程序
你可以指定許多的參數

00:10:35.302 --> 00:10:37.204 
並且可以讓系統來替你選擇最佳的時間

00:10:38.438 --> 00:10:39.373 
有效地去做

00:10:39.706 --> 00:10:43.744 
在工作隊列中設置最佳的工作優先級
QoS工作優先級

00:10:44.511 --> 00:10:45.646 
編寫一個計算程序算法

00:10:49.216 --> 00:10:50.517 
我們接着說iOS

00:10:51.318 --> 00:10:55.088 
CPU仍然是主要的能量消耗

00:10:56.223 --> 00:10:59.993 
但是由於這些設備
與OSX中的設備是不同的

00:11:00.227 --> 00:11:05.933 
其它的幾樣東西也在起作用

00:11:06.600 --> 00:11:10.370 
首先是兩個外圍
定位和連網

00:11:10.504 --> 00:11:14.508 
它們與CPU一樣
在一些情況下很費能量

00:11:16.210 --> 00:11:19.680 
接下來
當一個應用程序在後臺中運行時

00:11:19.746 --> 00:11:23.116 
你的程序會消耗所有這三個硬件

00:11:23.317 --> 00:11:25.118 
它會消耗許多的能量

00:11:25.485 --> 00:11:31.058 
你並沒有顯示能量
但是所有其它的組件消耗能量都很巨大

00:11:31.925 --> 00:11:34.194 
讓我們來一個個看一下

00:11:35.996 --> 00:11:38.398 
定位能量通常是這樣起作用的

00:11:38.532 --> 00:11:40.000 
它的功率並不很高

00:11:40.167 --> 00:11:45.005 
功率被你已經調用的API
及你所調用程序的精確度的數據所消耗

00:11:46.073 --> 00:11:49.643 
時間組件很大
那就導致了能量變得巨大

00:11:51.545 --> 00:11:55.482 
說到修復定位
同樣的原則 從來不做

00:11:56.116 --> 00:11:59.119 
只有你真的需要它時
只做連續定位

00:11:59.186 --> 00:12:01.088 
用戶就會真的請求它

00:12:01.421 --> 00:12:03.824 
請在完成時就立即停止

00:12:03.891 --> 00:12:07.194 
一旦你獲得了定位
一旦你的請求獲得滿足 就停止

00:12:08.996 --> 00:12:10.597 
下面是是高效地去做

00:12:10.664 --> 00:12:12.199 
你需要的最精確是什麼

00:12:12.266 --> 00:12:15.636 
你需要知道三英尺之內的
用戶在地球的位置嗎？

00:12:16.036 --> 00:12:18.772 
或者爲晴空萬裏城市預測氣候嗎？

00:12:20.240 --> 00:12:21.408 
你到底想要做些什麼

00:12:21.842 --> 00:12:24.244 
我們進入到定位網站

00:12:24.311 --> 00:12:28.549 
我們說“嗨
這裏有一批人們想要使用範例”

00:12:28.949 --> 00:12:35.923 
每個使用範例我們都設計了API
目的是更好地服務於開發者你

00:12:36.757 --> 00:12:40.527 
試着讀一下這些API
什麼是你真正想要的

00:12:40.594 --> 00:12:44.698 
我們將爲你做好能源管理工作

00:12:47.434 --> 00:12:49.403 
說到連網

00:12:50.437 --> 00:12:52.739 
類似的原則
從來不做 消減傳輸

00:12:53.340 --> 00:12:55.175 
你能緩存嗎？
你能壓縮嗎？

00:12:55.609 --> 00:12:58.512 
你需要在最小的組成要素上
最高質量的媒體嗎？

00:13:01.748 --> 00:13:03.951 
你能在更好的時間去做嗎？
你考慮過容忍嗎？

00:13:04.184 --> 00:13:05.052 
什麼時候需要它？

00:13:05.586 --> 00:13:07.621 
你能將它標爲任意嗎？

00:13:08.188 --> 00:13:10.591 
你將它標爲任意的時刻
就是系統接管的時刻

00:13:10.924 --> 00:13:13.994 
你可以規定
在接下來的6小時或12個小時內

00:13:14.127 --> 00:13:16.363 
我需要將這個上載或下載

00:13:16.730 --> 00:13:20.367 
系統就會計算出什麼是
最佳的時間來爲你做這個工作

00:13:20.434 --> 00:13:22.870 
一旦工作完成 系統就會告訴你
嗨 工作幹完了

00:13:25.105 --> 00:13:26.740 
做的更加有效些

00:13:27.174 --> 00:13:28.642 
合併傳輸

00:13:29.076 --> 00:13:31.879 
讓我們來看個例子
這個是什麼意思

00:13:32.412 --> 00:13:36.717 
我們說你有個同步數據到服務器的請求
用戶在使用你的應用程序

00:13:36.783 --> 00:13:40.654 
因爲數據在設備上產生
用戶只能週期性地同步

00:13:41.722 --> 00:13:42.656 
很簡單的解決方案

00:13:43.557 --> 00:13:47.361 
當數據正在設備上產生的時候
只需要不斷地推送它

00:13:48.629 --> 00:13:49.596 
這會發生什麼

00:13:50.030 --> 00:13:51.999 
每推送一次
你提供了數據

00:13:52.533 --> 00:13:56.537 
你發送你的10比特 100比特
射頻停留了很長的時間

00:13:56.603 --> 00:13:57.504 
然後它睡着了

00:13:58.005 --> 00:13:59.506 
下一次推送
相同的現象在重複

00:14:01.175 --> 00:14:04.044 
固定成本在那個階段是很高的

00:14:05.145 --> 00:14:05.979 
你如何來修復它呢

00:14:06.580 --> 00:14:07.414 
非常簡單

00:14:07.681 --> 00:14:08.882 
合併所有的傳輸

00:14:09.283 --> 00:14:11.718 
讓用戶與該設備進行互動構建一個狀態

00:14:12.052 --> 00:14:14.655 
然後偶爾將狀態發送到雲上

00:14:15.222 --> 00:14:18.892 
這樣你就只支付了一次固定價格的費用

00:14:25.165 --> 00:14:26.066 
下來討論後臺

00:14:26.700 --> 00:14:29.736 
首先 當你的應用程序在後臺運行時

00:14:29.837 --> 00:14:31.939 
它耗盡了用戶的能量

00:14:32.973 --> 00:14:35.909 
如果沒有必要
不要在後臺中做任何事情

00:14:37.411 --> 00:14:41.715 
如果你需要去做它
儘快調用你的任務完成處理器

00:14:43.283 --> 00:14:48.255 
這個任務完成處理器是在向系統表示說
“嗨 我完成了

00:14:48.722 --> 00:14:50.824 
請懸置我吧
請讓設備睡覺吧”

00:14:52.726 --> 00:14:53.560 
做得更有效率些

00:14:53.760 --> 00:14:57.965 
正如你所知
有許多的後臺API可以幫系統忙

00:14:58.198 --> 00:15:02.002 
在你發現的最佳時間
最佳的能量消耗週期

00:15:02.970 --> 00:15:06.306 
請替我做這個工作
系統就會替你去做

00:15:08.909 --> 00:15:11.378 
讓我們回到iOS上的能量調試流程

00:15:11.879 --> 00:15:14.982 
我們目前只有Xcode
在這裏你編寫和構建你的代碼

00:15:16.250 --> 00:15:20.487 
客戶擁有電池使用用戶UI
他們可以看到程序是如何節約能量的

00:15:23.023 --> 00:15:26.059 
到目前爲止
我們有開發的工具

00:15:26.493 --> 00:15:28.962 
叫做能量診斷工具

00:15:29.029 --> 00:15:32.132 
它可以對你的程序的行爲做初步診斷

00:15:32.733 --> 00:15:33.867 
讓我們來看看這個工具

00:15:35.035 --> 00:15:35.936 
你怎樣才能使能它呢

00:15:36.303 --> 00:15:39.840 
你進入到設置
開發者來到記錄窗口

00:15:40.707 --> 00:15:43.544 
你打開這裏的能量觸發器

00:15:43.677 --> 00:15:45.412 
然後你就說
“嗨 開始記錄”

00:15:47.414 --> 00:15:48.549 
一旦你開始記錄

00:15:48.882 --> 00:15:51.151 
就像你的用戶那樣
使用你的應用程序

00:15:51.552 --> 00:15:56.089 
持續上幾個小時
12個小時 24個小時 幾天

00:15:56.623 --> 00:15:59.259 
一旦你完成了
只要點擊按鈕 結束記錄

00:16:03.397 --> 00:16:08.035 
下面將你的設備與Mac連接
進入工具 選擇能量診斷

00:16:08.101 --> 00:16:10.671 
然後說“嗨 導入你剛纔的記錄數據”

00:16:11.438 --> 00:16:14.808 
你一旦那樣做
你就獲得像這樣的圖片

00:16:16.476 --> 00:16:22.850 
這裏試圖想向你說明當你在使用時

00:16:23.116 --> 00:16:25.385 
那些佔用大量性能硬件的狀態

00:16:25.752 --> 00:16:29.256 
你會看到GPU的狀態
你會看到Wi-Fi 藍牙

00:16:29.423 --> 00:16:33.427 
你會看到它們呆了多長時間
什麼時候在上面 什麼時候離開等等

00:16:33.827 --> 00:16:36.196 
你將會看到有多少數據包
從每個接口中發出

00:16:36.263 --> 00:16:37.598 
CPU的活動性是什麼

00:16:38.098 --> 00:16:42.102 
在頂部 你將會看到能量使用等級
是20中的多少量

00:16:42.169 --> 00:16:44.505 
如果你是20中的20
相信我 你有麻煩了

00:16:45.072 --> 00:16:47.174 
這是非常非常高的能量消耗

00:16:47.474 --> 00:16:49.076 
你希望靠近1

00:16:51.044 --> 00:16:54.081 
如果你想要做長期的實驗
這個工具是很不錯的

00:16:54.681 --> 00:16:58.952 
但是它不能做的是它不能告訴你
爲什麼硬件能量在上升

00:16:59.253 --> 00:17:01.622 
你請求它了嗎？
你在哪兒請求它了？

00:17:02.055 --> 00:17:05.125 
它並沒有精確定位
沒有細緻到進入你的代碼

00:17:07.194 --> 00:17:08.095 
爲解決這個問題

00:17:08.694 --> 00:17:10.797 
今年我們引入了

00:17:12.232 --> 00:17:18.070 
在iOS上
的能量計量器以及一些工具

00:17:18.438 --> 00:17:22.542 
這可以用來精確定位產生問題的代碼

00:17:24.578 --> 00:17:27.181 
爲了進行詳細說明
讓我們來進行演示

00:17:27.580 --> 00:17:32.286 
我的同事Pai-Han Huang
將來談談這個

00:17:37.191 --> 00:17:42.262 
好 在這個演示中
我將談談這個能量故障工具的主要特點

00:17:43.430 --> 00:17:44.264 
演示應用程序

00:17:44.498 --> 00:17:50.337 
向你展示如何使用這個新工具來識別
和提高你的應用程序的能量效率

00:17:51.405 --> 00:17:52.306 
作爲一名開發者

00:17:52.906 --> 00:17:56.710 
我喜歡這些新的工具
因爲它們易於使用 有效

00:17:57.377 --> 00:17:58.412 
因此在演示結束後

00:17:58.512 --> 00:18:03.250 
我希望你們和我一樣
將這些新的工具用到項目設計中

00:18:04.618 --> 00:18:06.987 
演示主要有兩部分組成

00:18:07.454 --> 00:18:11.658 
一個是新工具箱
另外一個是演示應用程序

00:18:12.159 --> 00:18:15.429 
首先讓我來向你們介紹新的工具箱

00:18:21.435 --> 00:18:25.372 
我們看到的是
iOS能量計量器的屏幕截圖

00:18:25.439 --> 00:18:31.011 
是其它新能量調試工具的入口點

00:18:33.013 --> 00:18:34.681 
它在哪兒呢？

00:18:35.549 --> 00:18:39.386 
它實際上
在Xcode調試導航器的內部

00:18:39.953 --> 00:18:41.588 
你可以在這兒看見

00:18:42.923 --> 00:18:44.858 
在你通過Xcode
啓動了你的應用程序後

00:18:45.325 --> 00:18:49.062 
你就會自動地進入到這裏

00:18:50.097 --> 00:18:53.734 
當你點擊它的時候
它就會將你帶到屏幕的右手側

00:18:55.903 --> 00:19:01.909 
能量計量器能將代碼的能量影響可視化

00:19:02.342 --> 00:19:05.612 
瞬間的和實例的平均的
能量影響也可以實現

00:19:06.713 --> 00:19:13.353 
因此首先是你的代碼瞬間的能量影響
可以在那裏的場計量器中看到

00:19:17.691 --> 00:19:21.128 
在這個圖表中有三個不同的區域

00:19:21.795 --> 00:19:24.631 
在里程錶中 最下面的一個
當指針指向一個綠色區域

00:19:25.065 --> 00:19:28.035 
它表明你的代碼的能量影響
實際上是合理的

00:19:28.869 --> 00:19:32.272 
祝賀你
你是iOS生態系統的好公民

00:19:33.140 --> 00:19:34.408 
但是我仍然要建議你

00:19:34.641 --> 00:19:39.079 
去看看這些新的工具
看看你如何能使你的客戶更加快樂

00:19:40.280 --> 00:19:43.317 
當指針向上移動時
它就進入了黃色區域

00:19:44.451 --> 00:19:47.521 
在黃色區域中
你的代碼的能量影響是很大的

00:19:48.255 --> 00:19:51.058 
很有可能你沒有仔細對待它

00:19:51.892 --> 00:19:55.729 
在電池使用用戶界面中
你的應用程序會顯示很高能量消耗

00:19:56.430 --> 00:20:02.402 
因此請使用新的能量調試工具來
看看如何提高你的代碼的能量效率

00:20:03.403 --> 00:20:07.574 
但是如果指針在繼續向上移動
你進入了紅色區域

00:20:08.308 --> 00:20:13.080 
紅色區域表示
代碼的能量影響是很大的

00:20:13.947 --> 00:20:17.017 
它意味着只要稍微使用你的應用程序

00:20:17.985 --> 00:20:22.155 
用戶會很明顯地感到
設備上的電池有明顯地下降

00:20:22.756 --> 00:20:25.259 
所以請使用新的工具

00:20:25.592 --> 00:20:26.493 
請使用新的工具！

00:20:28.061 --> 00:20:32.299 
對不起 我表示道歉
我那樣不太好 我總是抗議

00:20:32.766 --> 00:20:34.735 
那些不認真對待電池壽命的人

00:20:35.502 --> 00:20:37.671 
我向你承諾 我是個非常不錯的人

00:20:37.738 --> 00:20:40.407 
請來今天下午的最後一個講座
我們來談談

00:20:41.275 --> 00:20:42.109 
好麼？

00:20:45.379 --> 00:20:48.482 
但是速度計能向你提供

00:20:48.549 --> 00:20:52.886 
應用程序的瞬間能量影響的整個信息

00:20:53.620 --> 00:20:55.122 
如果你想看到更多的分解信息

00:20:56.890 --> 00:20:59.459 
你應該看這兒

00:21:00.460 --> 00:21:01.395 
能量影響分段

00:21:02.396 --> 00:21:05.666 
這個圖表每秒鐘就要刷新一次

00:21:06.867 --> 00:21:10.370 
如果你的應用程序給CPU

00:21:10.871 --> 00:21:12.940 
定位或連網引入了任何的工作負載

00:21:13.407 --> 00:21:19.346 
你就會看到一個方塊
顯示在對應的時隙中的頂部的三行中

00:21:20.581 --> 00:21:22.616 
正如前面的講座中所提到的

00:21:23.150 --> 00:21:26.653 
你的應用程序不只是
在前臺能夠消耗掉大量的功率

00:21:26.920 --> 00:21:28.255 
在後臺也一樣

00:21:28.956 --> 00:21:32.092 
因此基於此次觀察
我們有了第四條有關後臺規則

00:21:33.026 --> 00:21:36.330 
當你的應用程序呆在後臺不離開

00:21:37.064 --> 00:21:40.334 
你就會看到移動的方塊顯示在第四行上

00:21:41.368 --> 00:21:44.204 
在這個圖表的上面
你就會看到一系列的彩色條

00:21:46.607 --> 00:21:47.975 
它們就像是這個

00:21:49.142 --> 00:21:49.977 
有兩種顏色

00:21:50.777 --> 00:21:53.947 
紅色表示開銷

00:21:54.481 --> 00:22:00.521 
用提供的系統資源如射頻模塊
來進行你的應用程序的工作的能量

00:22:01.121 --> 00:22:05.359 
它也與早期的講座中
硬件的固定成本相対映

00:22:07.728 --> 00:22:08.562 
對於藍條

00:22:08.929 --> 00:22:14.401 
它表示由你的應用程序引入
用來服務工作負荷的能量

00:22:16.436 --> 00:22:19.873 
除了瞬間信息
我們還提供平均信息

00:22:20.140 --> 00:22:24.912 
例如像這個 百分率的平均開銷

00:22:27.381 --> 00:22:30.017 
這個傢伙向你展示了平均的能量影響

00:22:31.985 --> 00:22:36.356 
在底部 你會看到一系列有關圖標

00:22:36.423 --> 00:22:39.626 
CPU、 定位、連網和後臺的說明

00:22:40.027 --> 00:22:43.096 
它還提供一些你如何優化它們的建議

00:22:44.431 --> 00:22:45.532 
但是請記住

00:22:46.166 --> 00:22:48.368 
iOS能量計量器的設計是爲了

00:22:49.169 --> 00:22:53.841 
使你迅速高層次地瞭解代碼的能量影響

00:22:54.708 --> 00:22:57.644 
如果你想要更詳細的信息 更加分解

00:22:58.212 --> 00:23:00.047 
那麼請在這個按鈕上點擊

00:23:01.014 --> 00:23:05.752 
在你點擊這個按鈕後
它就會將你彈到對應的工具中

00:23:05.953 --> 00:23:10.057 
爲你的應用程序提供分解的能量信息

00:23:11.391 --> 00:23:12.693 
這是iOS能量計量器

00:23:13.227 --> 00:23:17.164 
讓我簡單地向你介紹工具

00:23:18.398 --> 00:23:20.367 
工具
你們很多人都使用過它們

00:23:20.834 --> 00:23:21.902 
它看起來很相似

00:23:22.236 --> 00:23:26.139 
例如 你看這個在屏幕上的是定位工具

00:23:27.040 --> 00:23:27.875 
我們如何開始

00:23:29.476 --> 00:23:35.382 
我們以觸發這個按鈕來開始
記錄它然後停止

00:23:37.184 --> 00:23:41.421 
在你記錄後
你將會看到像這樣的系統活動

00:23:43.190 --> 00:23:48.629 
你就會明白爲什麼
你看到這樣的活動性

00:23:48.829 --> 00:23:53.534 
例如在這裏你會看到定位服務
它正在努力請求定位

00:23:54.902 --> 00:23:57.070 
如果你想要更多 更詳細的信息

00:23:58.138 --> 00:24:00.140 
到這兒 擴展細節

00:24:00.707 --> 00:24:02.576 
然後你將使用這個傢伙

00:24:04.711 --> 00:24:05.812 
代碼堆棧

00:24:07.814 --> 00:24:10.984 
這就是對工具的介紹

00:24:11.084 --> 00:24:14.087 
接下來讓我來簡單地說下演示程序

00:24:16.456 --> 00:24:18.825 
屏幕上你將會看到
我們的演示程序的屏幕截圖

00:24:19.026 --> 00:24:20.194 
我們管它叫能量兄弟

00:24:21.094 --> 00:24:23.230 
因此作爲一名iOS能量軟件工程師

00:24:23.363 --> 00:24:27.801 
我迫切地想知道是否
我能夠在每個地方提高我的能量效率

00:24:28.101 --> 00:24:30.637 
不只是我的電話
而且是我的日常生活

00:24:31.605 --> 00:24:33.640 
能量兄弟可以很好地滿足我的需求

00:24:33.974 --> 00:24:35.342 
例如
我可以用它拍攝一張圖片

00:24:36.176 --> 00:24:41.982 
它會從我拍攝的圖片中
提取能量計的信息

00:24:42.850 --> 00:24:45.152 
它會詢問我的設備的定位

00:24:46.420 --> 00:24:48.755 
根據我的定位獲取氣象信息

00:24:49.489 --> 00:24:53.527 
將氣象信息與我的使用相關聯
顯示在屏幕上

00:24:55.128 --> 00:24:57.931 
結構是這樣的
有個集中數據管理器

00:24:59.700 --> 00:25:04.505 
如果我從那兒導入一張圖
它就嘗試着對它進行採集

00:25:05.572 --> 00:25:06.840 
並且基於定位

00:25:07.908 --> 00:25:14.047 
它會嘗試着尋找一個連網服務
來根據我的定位獲得天氣信息

00:25:15.048 --> 00:25:20.020 
然後數據管理器會將這個信息關聯
作爲一個曲線顯示在屏幕上

00:25:21.588 --> 00:25:25.225 
然後我們試着
給它一張圖片看一下這個新工具

00:25:25.592 --> 00:25:29.696 
是如何幫助我們識別和提高
能量兄弟的能量效率的

00:25:31.965 --> 00:25:34.768 
在左側的屏幕上
你將會看到Xcode

00:25:35.235 --> 00:25:37.905 
右側是我的測試設備的屏幕截圖

00:25:38.705 --> 00:25:42.910 
好 讓我們通過打開項目文件
來啓動能量兄弟

00:25:44.511 --> 00:25:47.247 
它目前正在做的是
在我點擊了這個圓形按鈕後

00:25:48.182 --> 00:25:53.120 
它就嘗試着構建 發送二進制文件

00:25:53.287 --> 00:25:54.121 
併爲我啓動它

00:25:54.855 --> 00:25:56.823 
一旦它被啓動，我們就會看到這個

00:25:57.424 --> 00:25:58.258 
它在這兒

00:25:58.759 --> 00:26:01.795 
讓我們來調試這裏的導航器

00:26:04.198 --> 00:26:05.332 
能量影響就在這兒

00:26:05.632 --> 00:26:06.567 
我們繼續

00:26:09.803 --> 00:26:12.005 
我們最想做的就是

00:26:14.908 --> 00:26:16.977 
看看這裏是否有活動的方塊

00:26:17.044 --> 00:26:19.112 
因爲我並沒有在用戶界面做任何事情

00:26:20.180 --> 00:26:23.116 
因此看起來沒有什麼活動的方塊

00:26:23.550 --> 00:26:24.384 
這是個好的現象

00:26:24.618 --> 00:26:28.188 
因爲在應用程序空閒的時候
是不應該有過多的事情發生

00:26:28.522 --> 00:26:29.356 
這樣很好

00:26:29.957 --> 00:26:34.027 
讓我點擊“導入圖片”導入一張圖片

00:26:34.962 --> 00:26:36.897 
從我的相冊中選擇一張圖片

00:26:38.098 --> 00:26:41.134 
它將試着提取信息
而我將設置採集

00:26:42.336 --> 00:26:46.540 
好了 我看到許多的活動出現了

00:26:47.541 --> 00:26:49.877 
包括CPU 連網和定位

00:26:50.844 --> 00:26:53.347 
但是從它們當中我立即注意到一件事

00:26:54.047 --> 00:26:56.016 
那就是定位一直都在進行中

00:26:56.550 --> 00:26:58.085 
這可不合情理

00:26:58.552 --> 00:27:03.423 
因爲能量兄弟可不是那種
跟蹤你跑步鍛鍊的應用程序

00:27:04.291 --> 00:27:07.561 
那麼我爲什麼需要持續
監控我的設備的定位呢

00:27:07.861 --> 00:27:08.695 
這太不合理了

00:27:09.429 --> 00:27:13.166 
因此來看看定位工具將會告訴我們什麼

00:27:13.233 --> 00:27:16.537 
以及我們如何來識別代碼行
來改進這種情況

00:27:17.838 --> 00:27:21.875 
接下來我將要點擊定位工具

00:27:22.643 --> 00:27:24.378 
我說是重啓

00:27:25.345 --> 00:27:30.050 
然後你試着用這個工具
爲我啓動這個應用程序

00:27:35.923 --> 00:27:38.692 
好了
讓我來重新再次導入圖片

00:27:42.062 --> 00:27:43.197 
設置採集

00:27:43.830 --> 00:27:44.665 
繼續

00:27:45.832 --> 00:27:48.202 
好了
在屏幕上你可以看到這個

00:27:49.069 --> 00:27:50.504 
這是定位活動率

00:27:50.971 --> 00:27:52.906 
它不停地在進行 沒有停止

00:27:54.341 --> 00:27:55.175 
但是它在哪兒

00:27:55.542 --> 00:27:56.777 
我們在哪兒導入的

00:27:57.678 --> 00:27:59.246 
看這個

00:28:00.380 --> 00:28:01.815 
進入到擴展細節

00:28:04.451 --> 00:28:09.756 
就是這部分
請求定位

00:28:10.123 --> 00:28:12.025 
那是我們如何請求定位服務

00:28:13.927 --> 00:28:15.195 
讓我們停在這兒

00:28:17.431 --> 00:28:19.399 
回到Xcode

00:28:21.502 --> 00:28:25.572 
查找請求定位

00:28:26.473 --> 00:28:27.941 
好了
它已經在這兒了

00:28:29.877 --> 00:28:31.478 
那麼請求想要做什麼呢

00:28:32.880 --> 00:28:36.049 
首先你想要設置確定視圖控制器

00:28:40.487 --> 00:28:44.525 
在這一片代碼中
你想要建立創建一個定位管理器

00:28:45.359 --> 00:28:48.228 
然後你就要調用起始更新定位

00:28:48.996 --> 00:28:50.297 
在這一行之後

00:28:50.631 --> 00:28:56.703 
所發生的是定位服務通過那的一個回調

00:28:57.004 --> 00:28:59.606 
來週期性地向我們推送位置更新

00:29:02.743 --> 00:29:04.845 
那麼在回調中
讓我們看看它做了些什麼

00:29:05.846 --> 00:29:10.584 
首要的事情是你想要看
這裏是否有更新的任何東西

00:29:11.018 --> 00:29:14.087 
如果它是零那是無效的
我們忽視它 返回

00:29:15.355 --> 00:29:16.623 
然後我們將它保存

00:29:17.024 --> 00:29:22.763 
我們說“是否定位是水平精度是實際
符合我們的標準和期望”

00:29:22.930 --> 00:29:24.264 
如果沒有
我們返回

00:29:25.399 --> 00:29:26.233 
如果有

00:29:26.300 --> 00:29:30.037 
那麼我們會試着處理
確定視圖控制器內部的定位

00:29:30.737 --> 00:29:31.839 
然後返回

00:29:32.706 --> 00:29:36.143 
不斷地重複這種回調路徑

00:29:36.510 --> 00:29:39.546 
每當我們從定位服務中
接收到一個回調就這樣

00:29:40.247 --> 00:29:41.248 
推送看起來並不好

00:29:41.748 --> 00:29:42.850 
那麼我們應該怎麼做呢？

00:29:43.183 --> 00:29:47.588 
我們應該做的就是當我們獲得了
一個數值時就停止它

00:29:50.691 --> 00:29:52.259 
就像這一行

00:29:53.460 --> 00:29:58.599 
我們說當我們獲得了一個定位數值更新
我們就將它停止

00:30:00.234 --> 00:30:02.970 
讓我們來看看
再次啓動

00:30:03.303 --> 00:30:05.205 
看看能量計量器將會告訴我們什麼

00:30:05.672 --> 00:30:11.111 
我希望看到的是在我首次接收到
一個成功的定位更新後

00:30:11.178 --> 00:30:14.915 
我應該將定位停止
並且定位服務不應該永遠在進行

00:30:16.817 --> 00:30:18.519 
讓我們等待將它啓動

00:30:24.625 --> 00:30:25.459 
嗯

00:30:27.194 --> 00:30:30.063 
好 進入到iOS能量計量器

00:30:32.432 --> 00:30:34.201 
讓我再次試着導入一張圖片

00:30:35.736 --> 00:30:37.738 
從圖庫中選擇一張圖片

00:30:38.205 --> 00:30:39.139 
設置採集

00:30:40.841 --> 00:30:45.212 
好了 定位
一秒 兩秒 三秒 四秒 它不見了

00:30:46.547 --> 00:30:49.950 
只是一行代碼就起到了立竿見影的效果

00:30:50.984 --> 00:30:52.986 
你可以仔細思考下這個場景

00:30:53.287 --> 00:30:56.056 
所以如果這個應用程序
已經打開了很長時間

00:30:56.823 --> 00:31:00.160 
想象一下通過修改一行代碼
你可以節約多少能量

00:31:00.794 --> 00:31:01.695 
真是令人驚歎

00:31:02.763 --> 00:31:05.999 
讓我們多嘗試幾次能量兄弟

00:31:06.066 --> 00:31:09.236 
看看當我們導入另一個
下次會發生什麼

00:31:10.671 --> 00:31:12.806 
好了 我們導入了另一個

00:31:14.241 --> 00:31:17.477 
我看到定位出現了四秒

00:31:18.245 --> 00:31:19.112 
但是這次

00:31:20.113 --> 00:31:23.483 
我注意的大事件是連網服務

00:31:24.718 --> 00:31:25.752 
這看起來不太好

00:31:26.186 --> 00:31:31.191 
能量兄弟想要發現連網服務的原因是
它想要獲得天氣信息

00:31:31.692 --> 00:31:34.962 
但是我兩分鐘之前剛查詢過

00:31:35.762 --> 00:31:41.935 
所以天氣不會在兩分鐘內
甚至是一個小時內有很大變化

00:31:42.002 --> 00:31:44.204 
我可以說天氣也不會有多大變化

00:31:44.738 --> 00:31:47.341 
我們想重新連網的目的是什麼

00:31:47.674 --> 00:31:50.911 
儘管我們早在兩分鐘之前已經有過請求

00:31:52.045 --> 00:31:55.115 
因此讓我們直接到代碼
看看我們如何來修復這個問題

00:31:56.783 --> 00:32:02.256 
我們實際上請求定位的地方
就在天氣文件的內部

00:32:02.789 --> 00:32:05.926 
有個函數叫做獲取如果失蹤

00:32:06.326 --> 00:32:09.830 
讓我們來看看它在第一部分做些什麼

00:32:09.897 --> 00:32:11.298 
我們嘗試着設置一些參數

00:32:11.365 --> 00:32:13.500 
如日期 基於查詢的URL

00:32:13.800 --> 00:32:18.438 
基於設備定位的URL以及當前日期

00:32:19.339 --> 00:32:22.242 
以及我是否在今天之內進行過這種查詢

00:32:23.110 --> 00:32:26.780 
你將爲定位座標保留原點座標

00:32:26.847 --> 00:32:32.452 
你將要設置一個完全是
一個小時的秒的數目的常數

00:32:33.353 --> 00:32:35.522 
所以我們應該首先嚐試去做的是

00:32:35.956 --> 00:32:37.791 
如果我們今天已經查詢過了

00:32:38.859 --> 00:32:42.396 
並且從兩分鐘前
我們最後一次查詢起

00:32:42.663 --> 00:32:44.932 
數據管理器已經提取了天氣

00:32:45.499 --> 00:32:46.667 
那麼我們說我們就返回

00:32:49.102 --> 00:32:52.039 
下來是如果我們今天沒有做

00:32:53.040 --> 00:32:55.742 
並且數據管理器已經提取了天氣

00:32:55.976 --> 00:32:56.810 
那我們還是返回

00:32:58.445 --> 00:33:02.549 
如果這兩種情況都不滿足

00:33:03.050 --> 00:33:05.352 
那麼我們就嘗試着建立一個

00:33:07.154 --> 00:33:11.124 
基於定位 日期的任務
我們將在這裏下載它

00:33:12.993 --> 00:33:14.161 
那有什麼錯麼

00:33:15.128 --> 00:33:18.665 
它出錯的原因實際上在這兒

00:33:20.234 --> 00:33:21.068 
計量器內部

00:33:21.902 --> 00:33:27.140 
因此我們將添加像這樣的另外一種情況

00:33:27.841 --> 00:33:29.877 
就是說如果我今天已經完成的了這個

00:33:29.943 --> 00:33:33.313 
並且先前的提取在一個小時之內

00:33:33.580 --> 00:33:34.781 
那我就不再做它

00:33:36.149 --> 00:33:38.318 
讓我們來再次啓動它

00:33:38.585 --> 00:33:42.856 
來看看如何在能量計量器的內部
看到改進的地方

00:33:43.390 --> 00:33:44.958 
我們希望看到是這樣的

00:33:45.292 --> 00:33:48.328 
因爲我們在如五分鐘之前就完成了提取

00:33:49.429 --> 00:33:52.366 
當我們在下個小時內
再次導入一張照片的時候

00:33:52.432 --> 00:33:54.635 
就不應該每次都看到任何的連網

00:33:55.135 --> 00:33:58.105 
讓我們來看看能量計量器
是否同意我的理論

00:34:01.341 --> 00:34:02.176 
好

00:34:03.644 --> 00:34:04.478 
開始

00:34:07.114 --> 00:34:08.748 
我嘗試導入一張圖片

00:34:10.016 --> 00:34:12.853 
從相冊中選一張圖片
設置採集

00:34:18.391 --> 00:34:19.493 
我看到了定位

00:34:19.860 --> 00:34:21.360 
它像以前呆了四秒鐘

00:34:22.161 --> 00:34:24.364 
但是神奇的是
所有的連網都不見了

00:34:24.531 --> 00:34:27.333 
這正是我們所希望的

00:34:27.935 --> 00:34:32.172 
所以這是提高我們的能量兄弟的
能量效率的又一種好辦法

00:34:33.674 --> 00:34:35.108 
除了前臺

00:34:35.708 --> 00:34:40.047 
能量兄弟還可以在後臺
消耗大量的電池

00:34:40.480 --> 00:34:47.054 
讓我們看看當能量兄弟實際上在後臺時
能量計量器能告訴我們什麼

00:34:47.821 --> 00:34:51.091 
我們通過點擊返回主頁按鈕
將能量兄弟放入後臺

00:34:55.128 --> 00:34:59.499 
我們看到的是這兒

00:35:02.436 --> 00:35:07.307 
我們看到許多能量兄弟的後臺活動

00:35:08.976 --> 00:35:15.449 
那就意味着只要能量兄弟在後臺

00:35:15.516 --> 00:35:17.251 
設備就不能休眠

00:35:17.684 --> 00:35:21.421 
這樣就會消耗大量的能量
因爲保持設備喚醒狀態要有固定成本

00:35:22.723 --> 00:35:26.727 
這並不合理
因爲能量兄弟不需要在後臺做任何事情

00:35:27.728 --> 00:35:29.129 
這裏出什麼錯了嗎？

00:35:31.832 --> 00:35:37.538 
當我們真的要轉到後臺的時候
讓我們進入到回調

00:35:39.139 --> 00:35:39.973 
這就是代碼

00:35:41.408 --> 00:35:42.242 
它做些什麼

00:35:43.110 --> 00:35:46.480 
它做以下事情
你在設法設置後臺任務標示符

00:35:47.748 --> 00:35:50.617 
它們所做的就是爲數據管理器存檔

00:35:50.817 --> 00:35:53.620 
就是將所有更改都存入數據管理器中

00:35:54.254 --> 00:35:56.056 
它們會說等待輸入

00:35:56.356 --> 00:35:59.092 
如果真的要完成它
我們就會在後臺任務中編寫代碼

00:36:01.094 --> 00:36:01.962 
聽起來合理嗎？

00:36:02.462 --> 00:36:03.997 
不合理
爲什麼不合理？

00:36:04.765 --> 00:36:07.367 
因爲我們的應用程序一直會在後臺
對不對？

00:36:07.601 --> 00:36:11.805 
那麼用戶如何能夠真的通過
用戶界面與能量兄弟來進行互動呢

00:36:12.573 --> 00:36:14.107 
所以根本就沒有輸入

00:36:14.441 --> 00:36:15.642 
而我們一直在等

00:36:16.810 --> 00:36:17.878 
這看起來可不太好

00:36:18.545 --> 00:36:21.882 
我們應該做的就是我們不應該等

00:36:27.554 --> 00:36:28.488 
相反的

00:36:30.524 --> 00:36:31.558 
我們應該做這樣的事情

00:36:32.292 --> 00:36:34.661 
在我們將數據存檔到數據管理器後

00:36:35.495 --> 00:36:40.300 
我們將立即調用後臺任務
使後臺任務標示符無效

00:36:41.802 --> 00:36:48.041 
讓我們再次啓動能量兄弟
來看看能量計量器會告訴我們什麼

00:36:49.042 --> 00:36:50.210 
我們希望的是這樣

00:36:50.744 --> 00:36:54.648 
在我們進行數據管理器中的所有更改後

00:36:54.882 --> 00:36:58.986 
它就會直接退出它本身
釋放控制給助手

00:36:59.119 --> 00:37:01.255 
它將不會像以前那樣一直呆在後臺中

00:37:07.895 --> 00:37:10.964 
好了 進入能量計量器

00:37:13.267 --> 00:37:14.935 
將能量兄弟放入後臺中

00:37:16.036 --> 00:37:19.273 
我們現在在後臺
一秒 兩秒 它消失了

00:37:21.308 --> 00:37:22.442 
這次我們又贏了

00:37:23.143 --> 00:37:28.081 
所以要記住
我剛纔做的一點點現場修復

00:37:28.715 --> 00:37:30.517 
你就會看到有顯著的改進

00:37:30.984 --> 00:37:32.819 
下來Abhinav將繼續向你們介紹

00:37:32.886 --> 00:37:36.323 
因爲我們持續幾個小時
甚至一天都是在講

00:37:36.723 --> 00:37:38.759 
進行重大的電池改進的內容

00:37:39.459 --> 00:37:42.729 
我的演示就到這裏
下來還是Abhinav

00:37:47.768 --> 00:37:48.869 
謝謝 Pai-Han

00:37:51.772 --> 00:37:55.375 
這是個很不錯的演示 回到幻燈片看看
演示都發生了什麼並做個總結

00:37:55.876 --> 00:38:01.181 
我們開始使用能量兄弟
無效率的代碼我們像用戶那樣運行

00:38:01.248 --> 00:38:02.349 
看看都發生了什麼

00:38:02.416 --> 00:38:03.650 
這所有的都亮了

00:38:03.851 --> 00:38:06.720 
糟糕 糟糕 真糟糕
能量消耗太大了

00:38:07.120 --> 00:38:11.258 
你的應用程序在電池用戶界面上
能量消耗很高

00:38:11.658 --> 00:38:12.793 
我們如何修復它？

00:38:12.860 --> 00:38:16.763 
我們來到定位 我們說
“嗨 定位被啓動了 那麼停止”

00:38:17.197 --> 00:38:19.700 
改了一行代碼
定位停止了

00:38:20.167 --> 00:38:22.236 
讓我們看看
之前和之後它看起來是什麼樣子

00:38:23.470 --> 00:38:28.909 
如果你聚焦定位時間軸
你就會看到定位一直在進行着

00:38:29.409 --> 00:38:34.381 
後來只是在每當有關一張圖片導入
有實際請求的時候定位才進行

00:38:35.816 --> 00:38:36.750 
讓我們繼續說連網

00:38:36.984 --> 00:38:42.422 
之前每張新圖片導入
我們就獲得天氣信息

00:38:42.623 --> 00:38:45.392 
那可不好
我們想要消減傳輸

00:38:45.459 --> 00:38:46.727 
我們放入了一個很簡單的塊

00:38:46.793 --> 00:38:49.930 
嗨 如果這是最近調用的 不要管了

00:38:49.997 --> 00:38:51.465 
我們不再需要新的信息

00:38:52.266 --> 00:38:54.701 
那對能量計量器有什麼影響

00:38:55.002 --> 00:38:57.437 
還是兩張圖片
之前和之後

00:38:57.738 --> 00:38:59.573 
如果你聚焦連網部分

00:38:59.873 --> 00:39:01.808 
連網在很長時間內都是高亮的

00:39:02.176 --> 00:39:06.313 
頂部的紅條一直在高亮着
說明連網硬件消耗很大

00:39:06.747 --> 00:39:09.383 
在應用程序使用期間
消耗了很多的能量

00:39:09.850 --> 00:39:11.885 
在底部
我們只做了一次連網

00:39:12.786 --> 00:39:15.522 
那之後
最近剛調用過的就不再做了

00:39:17.658 --> 00:39:19.960 
後臺對話怎麼樣

00:39:20.093 --> 00:39:23.530 
當我們進入後臺的時候
我們將我們的狀態存入數據庫

00:39:23.864 --> 00:39:25.966 
然後說“嗨 讓我們等待用戶輸入”

00:39:26.333 --> 00:39:29.203 
不是等待用戶輸入的好地方
目前用戶可能在輸入任何東西

00:39:30.003 --> 00:39:31.271 
非常簡單的修復

00:39:31.471 --> 00:39:33.073 
我們說不要等待用戶輸入了

00:39:33.373 --> 00:39:34.908 
只需要調用任務完成處理器

00:39:35.309 --> 00:39:38.712 
告訴系統“嗨 我完成了 懸置我吧
讓系統休眠吧”

00:39:39.513 --> 00:39:42.216 
之前和之後能量計量器
看起來是什麼樣子呢

00:39:42.282 --> 00:39:44.051 
讓我們集中於後臺行

00:39:44.618 --> 00:39:47.421 
頂部的後臺一直在運行

00:39:47.888 --> 00:39:51.258 
在底部
一旦我們完成了數據庫的存檔

00:39:51.525 --> 00:39:54.228 
後臺的工作就完成了
我們被懸置了

00:39:54.995 --> 00:39:55.829 
太神奇了

00:39:56.697 --> 00:39:59.700 
讓我們來看看之前和之後的整個的代碼

00:40:00.300 --> 00:40:02.302 
之前
我們看到一切東西都在發亮

00:40:02.769 --> 00:40:05.405 
如果這發生在你的程序上
這就是個問題

00:40:06.073 --> 00:40:12.045 
之後我們進行同樣的使用
給用戶提供同樣的效能和體驗

00:40:12.412 --> 00:40:16.950 
但是硬件上的能量負載卻非常非常小

00:40:18.852 --> 00:40:22.289 
正如我們所承諾的
這個幻燈片最重要的是在開始

00:40:22.422 --> 00:40:23.957 
如果你的應用程序是頂部的情況

00:40:24.291 --> 00:40:25.259 
請做些更改

00:40:25.325 --> 00:40:28.595 
你就會看到
你的程序出現在用戶界面的底部

00:40:28.862 --> 00:40:31.899 
我們所做的就是拿了兩個
新安裝的iPhone 6

00:40:32.432 --> 00:40:34.268 
在其中的一個安裝了無效率的代碼

00:40:34.601 --> 00:40:37.237 
在第二個安裝了經過修復的代碼

00:40:37.771 --> 00:40:41.975 
讓它們完成完全相同的工作量
同時也在運行着其它的應用程序

00:40:42.309 --> 00:40:46.713 
對能量兄弟和其它的應用而言
都是相同的負荷量

00:40:47.381 --> 00:40:53.487 
我們發現
修復代碼要少消耗百分之五十的能量

00:40:54.188 --> 00:40:55.756 
包括顯示能量

00:40:56.123 --> 00:40:57.991 
兩個應用程序都是完全相同的

00:40:59.259 --> 00:41:02.462 
在右頂部你看到電池用戶界面
百分之二十八

00:41:02.863 --> 00:41:06.033 
而優化過的代碼下降很多

00:41:06.633 --> 00:41:08.402 
用戶獲得了完全相同的東西

00:41:10.971 --> 00:41:11.972 
對這個講座做個總結

00:41:12.773 --> 00:41:17.711 
對於獲得完美的用戶體驗
電池壽命確實很重要

00:41:18.278 --> 00:41:20.113 
設計應用程序時要記住三點

00:41:20.380 --> 00:41:21.582 
從來不做 儘量少做

00:41:22.382 --> 00:41:23.417 
更有效率地做

00:41:23.617 --> 00:41:24.484 
在良好的時間去做

00:41:26.019 --> 00:41:28.322 
後臺應用考慮得更加周全

00:41:29.623 --> 00:41:31.291 
請嘗試新的調試工具

00:41:31.525 --> 00:41:33.627 
我們有實驗室
我現在就說的更加詳細些

00:41:34.261 --> 00:41:35.762 
離開時拿份我們的能量指南

00:41:35.929 --> 00:41:39.299 
它包含有我們這次講座
的所有信息甚至更多

00:41:40.300 --> 00:41:41.835 
將你們的應用程序帶到能量實驗室

00:41:43.570 --> 00:41:46.540 
有關你在何處可找到
能量指南的更多信息

00:41:48.275 --> 00:41:49.776 
請找這次講座的技術支持聯繫

00:41:51.411 --> 00:41:53.413 
最後與這些討論的相關講座

00:41:53.614 --> 00:41:57.017 
主要是我們說過的一些概念
但是更加的詳細

00:41:58.752 --> 00:41:59.887 
謝謝大家來參加講座