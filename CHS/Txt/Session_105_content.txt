介绍watchOS 2的WatchKit
乔希·谢弗: 好的 上午好
感谢大家今天来到这里学习
有关watchkit和watchOS 2的新知识
今天上午要讲的东西有很多
当然最重要的部分是WatchKit
以及WatchKit相关最新信息
WatchKit作为watchOS系统平台的一部分
存在一系列其他框架
其中很多是各位已经熟悉的
用于开发iOS应用的框架
此外还有一些用于专属watchOS
用于提供特性的新内容都属于Apple Watch所独有
今天我们将讨论这些新信息
以及一些各位已经熟悉的涉及watchOS专属的新内容
也就是watchOS 2
首先让我们简单谈谈系统结构
各位已经熟悉用于WatchOS 1的Watch系统应用
其运行方式是
需要在iPhone和AppleWatch上同时有用户界面
你推出了一款iPhone app
这款iPhone app中有
适合Apple Watch作为Watch app的一部分
用户界面分镜故事板
在Apple Watch中存在并安装在这里
但app拓展在手机上运行
watchOS 2的一大进展就是
app拓展并运行在Apple Watch
这给各位的用户带来了一些便利
首先 当然是用户界面和运行的后台代码处于同一设备
可使交互等待时间更短
从而使应用反应速度更灵敏
显然 这一改善带来了很好的效果
比如在手机不在身边时仍然可以运行应用
为了确保这一效果高效运行
各位应该现在花时间了解清楚如何将应用程序逻辑移动到程序拓展中
如果在watchOS 1中
你耗费大量时间用于打开父应用程序在iPhone app中运行代码
你想要重构该逻辑并移动到拓展中
app拓展获得的代码越多
在iPhone不在身边的情况下就可以提供越多的单机功能
当然 有关单机功能另一个重要的部分是
Apple Watch可以通过Wi-Fi访问网络
以便你的app可以从HTTP服务器获得数据
即使在iPhone不在身边时也能访问网络
如果你习惯在iOSapp中使用NSURL Session
那么你已经知道如何操作了
稍后我们会讨论这个问题
但首先我们来谈谈
WatchKit框架下的新特性
除了将代码运行移动到AppleWatch这一巨大进展
我们也为WatchKit加入了一系列新的性能
以便各位在watchOS 2开发更酷的应用程序
为了给大家一些有关新性能的概述
这里的列表举出了我们即将谈到的性能
我们拥有数码表冠 设计和动画
因此现在我们来介绍这些优秀的性能
首先我们来看数码表冠
这是属于Apple Watch的独特交互机制
一系列新的简单的控制
方便您将数码表冠应用于工作界面选取器
选择器控件是通过数码表冠滚动单元列表
并选择其中一项
数码表冠有三种类型
现在详细介绍每一类
我们现在看到的是第一类列表类型
如果你了解表盘上的配置合并
那你已经了解其基本运行了
这是一个项目列表
可以在周围列出可选的焦点框
并在顶端给出有关已选项目更多的细节信息介绍
以防列出的项目本身代表的含义并不明确
用户可以选择显示或隐藏更多细节信息针对任意一项用户交互单元
如果屏幕中同时列出多个选择器
用户可能需要显示焦点框
以便清晰告知用户一旦按下表冠将要进行何种操作
第二种模式是堆叠式
堆叠式提供一系列图像
使用户可以滚动并选取其中之一
这一模式可以进行自动转换其他项目自动淡出
如果你想给用户提供一系列选择并生动地呈现出来
你可以选择这一模式它的视觉效果很好
第三种模式是图像序列
图像序列模式提供一个可以滚动的列表
其中是相互没有过渡效果的图像
如果经过一个程序到另一个的转换后看起来十分自然
那么你可以选择这个十分适合此类情况更适合使用这种图像的模式
我们可以看到右上角这里
这里设有一个滚动指示
这是一个三种模式都适用的可选用户交互元素
这个滚动指示器使用的情况是
用户不能准确看到列表内容或列表内容数量的情况
例如 用户在应用中选择一天中的时刻
选择一天中的一个小时
这时可能不需要滚动指示
因为用户明确知道一天有多少小时并且在列表中有明显显示
加入选择的内容是其他多少不能像选择表情符号那样清楚显示的
那么适合选择滚动指示
以便用户了解所面临的选项以及一共有多少个选择
除了这三种模式
选择器控件事实上还有另一个性能
在运行中可以带来更多的灵活性实现更便捷的用户交互
也就是协调化图像
这一特性的最大优点在于
可以用于创建动态的图像在其他交互元素中
例如群组背景 或其他交互图像
你可以将它们设置为与选择性控件相协调
当用户进行整理时我们会调整动态图像的框架的偏移量
从而与列表项目中相关的偏移量相对应
从而方便您建立用户交互看起来就像这样
当用户浏览 进行选择时有一个协调话图像填充环形
不同模式的相互结合使用
并通过数码表冠操控可以方便你开发一个有趣 独特的模式
接下来让我们谈谈动画技术和设计
正如各位所知
应该在storyboards上在watchOS上建立用户交互
并且基于Xcode
Xcode中你有各种选择可用于设置
storyboard中不同的交互元素
现在watchOS 1中推出了很多此类选择可以以编程的方式进行改变
但是有一些选择只能在storyboard中运行
在watchOS2中我们不断推出新性能 进行提高
从而为这些项目提供设置
改变这些项目之前在设计过程中只能在Xcode中设置的状态
这一性能可以极大改善程序运行时的效果
改变之前只能静态呈现的状态
此外我们还添加了新的动画API界面
其持续时间可以通过一个讯息块并可以将你设置的改动加入到交互元素
在该模块中做的任何改动都会随之被动态化
如果您熟悉用户界面套件动态API那么对这一特性就十分熟悉
这一特性有助于用动画开发一系列很酷 运行流畅的交互
另外要介绍许多WatchKit方面
比如有关设计的整个过程和动画技术
所以您可以对此进行了解
有一些不能显示的很清楚的部分
和使用这些API时一些很酷的手法
可以带来很好的效果
因此如果你进行更多了解会发现它们也是很出色的部分
下面 让我们介绍Taptic引擎
这是Apple Watch又一项独特的性能
使信息传达到用户而不用用户真的在屏幕中读取出来
这个功能真的很棒
Taptic引擎的一个很棒的特点就是
可以通过用户触觉掌握用户感受和声音
以及在app环境下的意义
我们推出一个简洁的API方便您在工作交互设备上使用触觉技术
有不同的模式可供选择
我所提到的每一个模式
都有预期使用环境您的用户会了解这一模式
因为这一性能的目的就是传递信息而不用真的读取屏幕
你会需要确保不断使用这一功能
这些模式的命名就是为了帮助你了解他们所使用的情况
我们在说明文件中准备了相关文件
深度介绍每一个模式在设计AppleWatch中有的预期使用环境
所以如果你想在开发应用中使用触觉技术并持续使用
请继续了解此功能
最终达到用户可以直接了解程序运行而不用读取屏幕
此外还有一些其他硬件我们想要在WatchKit中应用
第一 是麦克风
我们在watchOS 2中采用新的API
从而方便您采用录音表
录制记录音频在用户进行处理之前回放
最后通过按下右上角的按键对音频进行最终处理
因此右上角的按键可以根据您的应用来命名
在此环境下我将它命名为“发送”因为我预设它会发送一条消息
但你也可以将它命名为“保存”如果你开发的是语音备忘录一类应用
它操作十分简单先录制成文件 用户点击确认键时
你会收到一个文件 以便处理
任何的方式对于你的应用都是合适的
当然 除了麦克风我们也想要开发扬声器的功能
我们通过为您的应用提供回放视频音频内容
有三种API用不同的方式实现这一操作
第一种是新的交互对象叫做工作交互影片
这一元素提供标准的外观
方便视频文件播放以及重放
在屏幕上这个案例中我准备了两个视频
假设现有一个海报形象
全球资源定位器可以定位你的内容
WatchKit操作为你重放
如果你已经将内容输入到手表中这个全球资源定位器可以是本地文件
如果不是本地文件则使用远程HTTP URL
如果提供一个远程资源
WatchKit可以下载 显示进程并在下载完成后立即播放
如果是本地文件可以很快进行重放
当用户点击播放键
则可以看到优质的全屏播放的视频以及全屏视频回放
回放控制将在简要浏览全部内容后立即淡出
此外 如果你想要用其他方式回放而不采用标准界面
也有一个API可直接从其他界面呈现控制器
这些API可以播放视频音频内容
且十分适用于回放小型文件
Apple Watch被设计为简短的互动
7所以在这里播放的最好是不太长的东西
你也许不想以这种方式
在Apple Watch上播放两个小时的电影
有时你想播放的音频类型内容很长
如果你正在编写类似播客的app
你也许想要下载一些播客
然后运行一下在你的蓝牙耳机上听一听
我们有另外一个API对于播放这类较长形式的音频确实不错
如果你熟悉AV基础的API你就知道如何使用这些
因为它们非常相似
你也许从iOS了解到这与以AV为基础的API之间唯一的不同是
为了使应用程序获得真正的高性能和更大的电池使用
它不要求你的应用程序为了播放那个音频而持续在后台运转
该文件可以被切换到系统来播放
即使你的应用程序被悬置没有运行
如果用户在外奔跑时查看表盘
它们可以提供正在播放的信息
并且控制来自你应用程序的音频播放
即使你的应用程序没有在运行
我想在这里快速地谈一下还有几个其他与硬件无关的API
第一个是提醒
我再重复一次Apple Watch是为简短的互动而设计的
因此你也许真的要小心不要过度使用这种API
因为它确实将额外的步骤引入了你的应用程序中的一些工作流程中
有时候你只需要在获得回答前问用户一个问题即可
对于那些情况我们有提醒API
向你提供这种类UI的统一外观
你提供一个标题 一个描写
块中应该采取的按钮列表和动作
它们只是被显示出来
当用户点击它们中的一个时你就会获得回调
在这种情况下我包含了一个破坏按钮
明确说明当我点击这里的删除破坏的事情就会发生
我们有个非常不错的开放系统URL API
它允许做许多新的事情
开放系统URL可以采用另外的URL
并发送给用户一个小型应用程序使其发送信息给app中已有的接受者
更酷的是你可以传递来自始于Apple Watch的
电话呼叫应用程序tel URL
当那个发生的时候
通话中的UI就会出现在你的app中
用户可以打电话他们只要一挂机
他们立刻就能回到他们开始打电话时离开的app界面
我们还对票据进行集成-票据工具箱
实际上票据工具箱是手表操作系统的一部分
这样你就能够访问在iPhone上可能具有的票据
票据库与iPhoneApple Watch是同步的
这样你能同时获得
更不错的是WatchiKit有个API
允许你添加票据到票据库中
你以这样的方式将PK票据交给WatchKit API
用户能够滚动它来查看那个票据中有什么
一直到最后有个添加按钮将它添加到库中
当他们点击那个时
它就会被添加到Apple Watch库中
但是也在iPhone及其它通过云端服务同步的设备中
因此从输入一直到后来票据的使用
所有的端到端的票据情况都在Apple Watch上
这就是WatchKit的新性能那里还有许多新奇的东西
正如我所说过的WatchKit只是整个的手表操作系统STK的一部分
还有其他的框架
一些是新的一些是已有的并添加了新功能
我现在就要谈谈其他的几个
先说两个对WatchOS很特别的特性
第一个是Clock Kit
Clock Kit是不需要构建信息
直接在表盘上显示的框架
它可以迅速地将你的数据放在用户的面前
信息有几种模式
但Clock Kit支持所有的模式
让我们来仔细查看表盘来看看它是什么样子的
这里是我们的实用表盘
现在表盘上能看到有三种不同的信息特性
你可以看到有不同的尺寸和形状的信息特性
为了显示信息 Clock Kit以恰当的方式格式化数据
例如 如果我们看彩色的表盘
这个有着更宽尺寸的信息特性
且更高些可显示两行的文本或图像
最后 在数字模块表盘上
我们将最大的信息放在正中央其他的放在边缘上
Clock Kit提供了一些非常好的API
让你以多种不同模板来格式化你的数据并满足不同的外观需求
使它能针对不同大小的信息进行调节来显示合适的数据数量
现在有关信息的另一个重要特性是
它们正好在你的表盘上
这就意味着每次用户举起手腕看表
他们想要立即看到最新的数据
如果每次都要用户举起手腕询问代码来提供要显示的当前数值
我们就已经失败了
在用户举起他们的手腕之前信息需要立即在那儿
为了实现这个目标
你以时间轴的形式向ClockKit提供应用程序数据
在这种情况下我以这里的信息和时间轴的形式
向WWDC提供应用程序数据
如果是上午10:00
它将显示的早晨的主题
表明当前正在召开会议
随着一天的流逝现在到2:00
因为它已经有了数据
所以ClockKit选择那个时间点合适的事情
它会移动到国情咨询平台
移动到4:00苹果设计奖励
这种格式的了不起的地方是
你整天都可获得自动的行为不需要代码一直在运行
但是你可以参与时空之旅而不需要你费任何事
如果用户将数字表冠向后移动想看看这一天的早些时候都发生了什么
Clock Kit就会转换到显示那一时刻的合适的数据段
这很容易为信息添加支持也很有效地将数据放在用户面前
这就是Clock Kit
有一个全程的讲座将会对此详细地进行说明及相关API
和不同的模板甚至你起始要做的一切东西
离开时请领取一本名叫用Clock Kit的书
下来我想说的是连网
在Apple Watch和IPhone上
有代码运行连网是很重要的内容
有两种连网也许你想要在app中使用
第一个你也许要有较宽的因特网
当你处于独立模式或手表和手机在相同的地方使用NSURL对话API时
你可以使用这种连网方式
它会根据用户使用手机的方式
包括手机检测并连接Wi-Fi的方式以最佳的方式连接到网络
有个全程的讲座都将讨论NSURL连网
NSURL连网将会单独讲解
点击因特网上的任何服务器都可以下载数据
如果你曾使用过iOS它们是相同的API
且还具有相同的特性设置包括后台下载
有时你想在Apple Watch和iPhone上运行代码
你想让它们分享数据并且彼此对话
我们为WatchOS和iOS提供了崭新的框架
叫做手表连通性
它允许你来做那样的事情
你的iPhone可以连通正在iPhone上运行的代码
同时你的手表可以连通正在手表上运行的代码
比如当你想要从因特网上下载数据
构建一个天气应用程序去下载当前的天气信息
我们可以说你的用户拿起他们的iPhone
并且启动了该应用程序
你来到因特网获取最新的天气并将它显示在他们的iPhone上
如果你没有做其它的任何事
你构建手表应用程序来做相同的事情
下次他们看到手表上的应用程序
来到网络上下载最新的数据并将它显示在那儿
但是那不是我们能做的最好的做法我们肯定可以做得更好
因为我们有刚从iPhone获得的数据 它现在在用户的口袋中
如果我们能充分利用已经下载的数据并在我们设备中的多次使用
那就太好了
为达到这个目的可以做类似这样的事情
用户将数据下载在他们的iPhone上
你将它转移并保存在手表上
因此如果用户看到手表上的应用程序
数据已经在那儿且不需要再次下载
当然 你仍然可以下载最近的更新版本
如果你知道天气数据是每小时更新一次
你可能已经获得了最新的数据那就不需要这样做了
你现在就有更新的东西可以立即显示
手表连通性就提供了这个功能
有两个提供后台下载的API
第一个叫做应用程序语境
你将它做的一切都移交到一个数据字典中
你希望每当再次运行在另一侧的应用程序时 都可以获得该数据
它总是获得最新的数据版本
所以你只是设置为无论如何都是当前的
下次你的应用程序运行的时候就可以在那里得到
在幕后 手表连通性在能量和性能最佳的时机传输数据
还有个文件传输API如果你有较大的数据
你可以将更多的数据从的iPhone传输到你的手表 反之亦然
同样的 它会在后台能量和性能的最佳时机完成
还有时你还需要在两侧互动消息传递
如果你的手表应用程序将要在你的iPhone上启动一些操作
你也许想要发送一个消息过去
在这个例子中我在手表上有个去按钮
当我点击它的时候我想给iPhone发送一个消息
下来要发生的就是若应用程序已在iPhone后台运行
消息就会被转发
这样你就可以做类似开始一个会话或在iPhone上进行一些活动
现在我提到这些API在两侧都存在它们是双向的
应用程序语境可以到达两个方向
文件传输API可以在两个方向传输文件
一个不同之处是在发送消息API
当从手表到iPhone发送消息时
可以唤醒iPhone后台的应用程序进行一些活动
但是当从iPhone到手表的时候
它就不会唤醒后台的手表
你的app在手表上运行的目的就是为了接受来自iPhone的消息
在这些API中还有很多细节需要注意
还有一个完整的讲座讲的是这些东西这个讲座的名字是介绍手表的连接性
所以你需要看一下
并学习一下如何将后端从只能在一个设备上运行
变成同时在iPhone和Apple Watch运行
所以这些就是那三个新的构架
对于WatchOS来讲是全新并且独有的
现存的IOS上有很多框架
你已经熟悉了在你的app中使用它们
我们在Apple Watch上添加了一些新功能或者说加强了独有的功能
我现在想要概述一下这些功能
第一个是Core Motion
正如你所知 Core Motion可以让你访问IOS设备的运动传感器
WatchOS中同样存在
可以让你能够访问加速度计
和在IOS上一样在WatchOS上
Core Motion给你程序运行的实时数据
但对于Apple Watch来讲这是新的而且很赞的是
它可以在程序中记录运动数据即使它不是以一个较低的刷新速率运行
然后将加速度计的数据批量发送给你在下次你的应用程序运行的时候
这在你的APP没有运行的时候
是一种很酷地检测运动数据的方法
关于这有一个完整的讲座叫做Core Motion的新功能
所以你一定要去看一下
另外Core Location是WatchOS的一部分
这是寻找用户新位置的很棒的方法
现在iOS 9和watchOS2有个新的API
就可以非常简单地实现一些很赞的事情
现在另一件需要注意的是
WatchOS上CoreLocation的位置信息
可以授权在iPhone上运行的IOS APP
和Apple Watch上的WatchOS APP之间共享
众所周知 当你使用Core Location的时候
在app进行定位之前要请求用户进行位置授权
在Apple Watch上也是这样
当用户允许了iPhone或者Watch上的授权
它会同时提供给IPhone和Watch
所以他们不需要对这个问题回答两次
有一个办法可以管理用户的这种授权
有一完整的讲座介绍了Core Location
叫做Core Location的新功能
很多东西都能在那里找到
接下来是HealthKit
HealthKit也是WatchOS的一部分
和你在IOS中使用的是相同的API设置和相同的构架
在WatchOS上使用HealthKit的最大优点是
有非常多的健康数据被记录在了手表上
你现在可以访问更多最新的实时数据
因为这都在手表其本身上
你现在可以在产生那些数据的设备上进行查看
例如你可以看到实时的心率信息
当它正在记录并存储在HealthKit中
HealthKit和WatchOS的另一件很棒的事情是
它为API提供了提醒你开始锻炼的功能
这些锻炼会话能够做很多这一类的事情
Watch本身的锻炼app也能做
例如如果你开始跑步你想要记录用户的高频率心率数据
可以使用HealthKit API打开那个会话
选择记录高频率的心率数据信息
使用这个API中健身应用的另一个很棒的事情是
每当用户举起手腕使用的时候它允许程序继续回前台
如果你在写一个骑行APP用户开始一个骑行会话
每次他们举起手腕的时候
在会话中他们能够通过app查看最新的实时的数据
并看到自己在运动的时候表现的怎么样
现在当用户放下手腕屏幕关闭的时候 应用程序被暂停
但是HealthKit将默默地为你记录所有的数据
所以当用户举起手腕能够再次运行起来
app被暂停时的数据得到了更新
这提供了一种很棒的方法实现所有数据的统一
并为用户提供优秀的用户体验
也有一个完整的讲座叫做HealthKit的新功能
如果你正在写一个锻炼类型的app
或者任何可能使用Health Kit数据优点的程序
我也想花一点时间讲一下关于安全构架的问题
这也许不是最令人兴奋的消磨时间方法
但是请相信我这里有非常重要的东西
如果你使用过IOS的安全构架
你就会知道它允许你访问Keychain
Apple Watch上的Keychain非常有意思
Apple Watch独一无二的是
当它在用户的手腕上的时候它会保持开启
一旦当用户摘掉手表
这个设备就会马上锁定
你可以利用这一点
在Keychain中存储你的凭据和安全数据
这样可以保证
当手表在用户的手腕上的时候你能够访问数据
一旦手表被取下来数据将不能够被访问因为手表被锁定了
谢谢
他感到非常兴奋
好吧这就是安全部分
接下来是MapKit
有一个MapKit API子集可以作为WatchOS STK的一部分
特别是MK Map API
它很酷的方面是
你可以从你的应用程序中发送一个定位到地图APP
可以让用户在完整的地图应用中查看
他们不仅能够查看还能够开始导航并在APP中寻找路线
如果你有一个位置并且想使用户能够找到直接到那里
你可以在Apple Watch和iPhone上
使用MapKit API开始导航
向用户发送导航信息
同样有一个关于MapKit的讲座
叫做MapKit的新功能你可以了解到所有信息
最后两个我想要讲的构架是
都是关于访问Apple Watch上数据的
在AppleWatch上的用户数据类型
我们已经进行了同步处理
第一个是联系构架
在IOS 9和WatchOS 2中联系是一个全新的构架
可以让你访问Apple Watch中的通讯簿
因为在我们的应用程序中使用了所以它已经同步了
你不需要传输就可以访问本地数据
有一个讲座讲了这个全新的构架
叫做iOS和OS 10的联系架构
如果你准备使用联系信息的话就应该查看一下
就像Core Location一样
访问IOS APP和WatchOS APP的
共享通讯簿数据需要用户的授权
当用户授权你访问通讯簿
你在任何一边都有访问的授权
在Apple Watch和iPhone上都有个管理授权信息
最后一个是EventKit
EventKit是用作访问用户日历的
这和我们讲过的联系构架上有很多相同点
一旦你得到访问它的授权
对于iPhone APP和Watch APP来讲是相同的
所以在WatchOS 2中有非常多的东西
三个全新的构架
三个全新的构架WatchKit 手表连接
还有Clock Kit谢谢
WatchOS独有的三个全新的构架
在所有的其他构架中有很多新功能是WatchOS特有的
有一些是在你的App之间共享的
当你在一个平台上学习并将其运用到其他平台上的app时有大量的工作要做
其他的框架能够利用Watch独有的功能
这一周有非常多的讲座可以在其他地方学到更多东西
在文档中有一个过渡指南
WatchKit过渡指南
将帮你学习支持WatchOS1的WatchKit
升级后支持在WatchOS 2上运行作为手表本身的本地程序运行
有非常多的实例代码和开发者论坛
技术支撑是最好的解决所有问题的去处
这就是WatchKit的新东西
感谢您今早的到来
我非常期待你们使用这些东西能做出来什么