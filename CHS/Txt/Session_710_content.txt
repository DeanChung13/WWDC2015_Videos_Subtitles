《CloudKitJS与网络服务》
大家下午好我是克里斯
是苹果公司ICloud网络服务部经理
今天我很荣幸能够在此告诉你们
去年我们收到的关于CloudKit的第一大特性需求
就是网络服务
那么本节讲座需要对CloudKit话题有点熟悉
我将给你们简要概括CloudKit的架构
但是如果你们想更深入了解它
我们去年有一系列讲座
你们可以回去查看那些讲座的具体内容
在CloudKit中
你们的所有数据都储存在一个容器中
在这个容器中我们有一个公用数据库
用于储存你们的app数据
另外还有一个专用数据库
用于储存你们的用户数据
在公用数据库中你们有默认区
这里有记录
而在专用数据库内
你们同样有一个默认区
你们同样可以创建自定义区域
它们增加的同步语义
使你们能够回答关于从某个时间点开始
发生了什么改变变化的问题
当然 你们可以在这两个区域都建立记录
从API的角度
我们有CloudKit服务器
而在本地我们有CloudKit框架
通过此框架你们的App程序与服务器连接
我们今天将会介绍CloudKit网络服务
我们已经使用这种服务建立Notes Web app
今天你们可以用它来建立你们的网络app
那么CloudKit网络服务具体是什么呢?
这包括三方面内容
第一 这是一个连接到CloudKit的JSON接口
第二
这是一个使用Apple ID进行的网络登录
第三
它是个JavaScript库
让我们看一下JSON API的特性
有了对公用和专用数据库的完全访问权限
你们当然就可以创建
读取 更新和删除记录
你们可以上传和下载资源
你们可以查询你们的数据
你们可以创建订阅可以接收回调
当你们的数据发生变化时
可发现这些用户数据变化
你们可以发现用户的真实姓名
你们可以进行同步
我们提供身份验证
因此这是一个很长的清单事实上这意味着
我们在本地API和JavaScript API 之间
存在特性上的对等关系
每件你能够在本地API上做的事情
你都能够通过JSON API完成
我们已经做出付出极大努力
确保例如字段名称和参数等
在JavaScript中有同样的名称
并且我们用JavaScriptPromises进行补全
这是效仿Blocks和Swift
最终你的代码
看起来在JavaScript和Swift之间很类似
我知道你们观众中的很多人
或许已经有过对CloudKit的应用
如果你们不了解让我们迅速看一下
如何开始进行一个新的CloudKit应用
你们应该做的第一件事是建立一个容器
你们可以通过WWDR门户
或Xcode建立容器
一旦你们有了容器就需要建立一个架构
你们可以通过iCloud控制面板
或者你们的本地app
按需要建立这个框架
那么这时你们的CloudKit应用就开始启动并运行了
让我们开启网络接入
这有三个步骤
第一 你们需要生成一个网络服务API令牌
第二
你们需要设置你们的登录回调机制
第三
你们需要设定你们的域限制
让我们更进一步了解这三个步骤
这是CloudKit控制面板
如你们所见 我们增加了一个被称为API令牌的新的窗格
我已经在这儿建立了我的第一个令牌
在顶部是令牌的ID
这是当你们在进行网络服务调用时
传入的东西
在那下方我选择了postMessage
作为我的登录回调
对于JavaScript应用我会在用户登录时
取得一个JavaScript回调
或者我可以选择使用...
URL重定向
在这下方 我可以设置允许通过网络服务
访问我的CloudKit...数据的来源
我已经选择任何域都可以访问我的数据
为了增加安全性我完全可以限定为查看者域
那么现在我们启动了网络服务
我们让一些用户登录
因此身份验证的...
处理是透明的
我的意思是说
当一个用户调用一个
需要身份验证的API时
我们会返回一个特别形成的有效荷载
它带有一个你们可以发送给
你们的用户的URL重定向网址
然后他们与已经存在的Apple ID进行验证
或者他们可以在登录环节建立一个新的Apple ID
为了保护用户的隐私
我们不向你们的app提供用户的姓名
或者登录密码
但我们提供一个稳定且匿名的
用户标识符
让我们把所有这些事情连起来
并且让我们快速建立一个示例app
那么我们将要建立一个任务app
它把任务存储在...
com.example.tasks容器内存储任务
它有一个记录类型：Tasks
记录有两个字段
分别是任务的名称...和优先级
那么让我们建立第一个任务
那么我将做的是调用记录修改API
并传入一个JSON实体
这个JSON实体表示要创建一个新的任务
该任务有个唯一的标识符task-1
任务的值为"Buy Milk"
我们把它发送到服务器
我们没有一位已经过验证的用户
作为回应...
我们得到一个URL重定向网址
我们可以把这个网址发给用户进行验证
让我们跟随这个网址
这儿是用户登录界面
你们应该注意到它有app名称和app图标
能够在这儿建立一个新的Apple ID
我们已经有一个Apple ID我们让我们直接登录
用户登录后
通过您早些时候规定的回调机制
你们的应用会被
返回一个会话ID
我们可以继续把这个会话ID
附加到URL上
并重新发送相同的请求
好多了
现在我们收到了创建成功的消息
你们可以看到记录名
改变标签...各个字段都在
以及关于记录更多的一些元数据
这涉及到大量的JSON解析
你们或许会担心错误处理...
和限速
我们希望让这个API尽可能容易使用
因此
我们自豪向你们介绍CloudKit JS
它是在JSON之上的封装器
谈到这方面我会邀请欧那尔·维克斯塔德到台上
谢谢克里斯
我是欧那尔·维克斯塔德iCloud部门的工程经理
我将向大家介绍CloudKit JS
CloudKit JS让你们能够
从JavaScript连接到CloudKit
它是一个小型性能完备的库
它能够与你们已经在网络上使用的任何框架或库兼容
注意这是一个低水平的传输API
这意味着它不会真正成为一个数据存储
它不允许在JSON API上有很多抽象化
因此如果你们已经使用一个数据存储
请继续使用这个数据存储
你们应能够直接把CloudKit JS
插入这个数据存储
它同样支持轻易地从CloudKit框架过渡
那么你们或许已经在iOS或OS X上
使用CloudKit框架
术语 概念
方法名称和类的名称都相同
因此这是一个容易的过渡
即便如此仍然有一些不同
毕竟这是网络是JavaScript
因此会有一些不同
例如我们将把JavaScript Promises
用于所有异步行为
我们稍后会查看相关示例
在浏览器...
支持方面
我们支持所有主要的浏览器
例如SafariFireFox Chrome
IE和新的Microsoft Edge
如果你们想代表用户进行服务器到服务器连接
我们支持JavaScript环境
如Note JS
因此在我们开始了解更多的API方面的内容前
让我给你们一个快速的演示
那么我们正在查看的是CloudKit目录
示例代码项目
这既可以作为一个可下载压缩文件
你们也可以在开发者站点上获得
我们在这儿将看到的是托管版本
这个同样可以提供
那么它正在提供实时代码示例
你们可以在任何浏览器内执行它们
你们可以在左侧看到一个特性列表
我们正在看的是自述文件
它给向你们介绍一些
如何开始在CloudKit Js上的工作的介绍
我们来到叫做"验证"的第一步
你们会注意到每个部分都在顶端有一个描述
这个示例告诉你们如何...
使用验证
在这下方你们有一个代码示例
这个代码片段专门校验...
用户的验证状态
如果用户没有登录
就会出现一个登录按钮
而你们可以在上面这里实际运行这个代码
因此 如果我点击这个"运行代码"按钮
它会执行这个代码
你们会看到它向下滚动一段
它告诉我们此时我们是未经过验证的用户
我们看登录按钮
我可以继续点击登录按钮
我输入...
随便一个Apple ID
和密码
你们会注意到窗口关闭了
那就是苹果公司的托管验证页
这时你们完成了网络应用登录
这是示例app
你们看到我们有用户名
包括名和姓两部分
而且"退出"按钮取代了"登录"按钮
这是CloudKit的另一个特性
可发现性
如果用户选择进入
用户可以选择与开发者分享他的姓名	
以及能够在容器内被发现
以便其他用户找到他们
现在既然我们有了姓名
我们将用它们填充到...右上角
好 现在我们登录了
我们可以进行一些操作我们到记录部分
这将向您演示怎样在专用数据库内
保存到一条记录
那么我们在顶部看到有一些字段
我们有记录的名称
这个名称是记录的独特标识符
我们有一个区域名 这是默认区
它可以是你们建立的任意自定义区域
你们有三个在CloudKit架构中
确定的自定义字段名
在这个示例中我们有一个名称字段
字符串值
我们有一个位置字段地理位置值
然后我们有一个资源字段它可以让您上传一个文件
那么我将继续往下进行
并选择一个文件
我选择这张绿地景观...
Jpeg图片
而且我将返回到顶部
给图片命名为...
"景观1"
这是记录名称是一个独特的标识符
我这里将更改图片名称称其为"绿地"
那么在填完了这个字段后我可以运行代码
它将把记录也保存到数据库
作为上传资源保存到资源存储器
你们可以看到完成之后我们得到一个结果
而这实际上是服务器做出的应答
以我们在桌面这里表示的
JSON文件做出的应答
除了三个自定义区域
我们还有一些元数据字段绿地
位置以及下载这些资源的链接
为向您展示它实际是如何被存储的
我们可以去提取记录
我输入...
景观...
1
运行这个代码
我们再次得到了同样的记录
那就说明了在CloudKit内
使用CloudKitJS保存记录是多么简单
我们继续查看另一个特性名为"查询"
为此 我将首先让用户退出
通过查询 你们能够从数据库得到数据子集
在这个代码示例中
我们给你们展示怎样查询公用数据库
如果你们在架构上合理设置了安全角色
你们实际上能够容易地
在公用数据库中查询数据
即我们在这里展示的东西
即使用户没有经过验证
我继续运行这个代码
这个示例的基本原理是使用
当前在Monscone中心的位置
发送一个查询请求
并根据离我们现在所在位置的远近
对结果进行排序
我现在...
运行这个代码
我得到两个返回的记录
第一个是冰岛第二个是意大利
冰岛距离我们现在的位置与意大利相比更近
结果是合理的
我将...
不会继续查看所有额外的特性
但我们非常鼓励你们查看一下它
你们可以访问developer@Apple.com/CloudKit
点击CloudKitCatalog的链接
你们可以自己在任意浏览器上运行
CloudKit是我们苹果公司很多新业务的基础
包括iCloud DriveiCloud Photo Library
今年我们也已经为iOS和OS X推出了...
一个备忘录应用
此应用也将出现在iCloudKit平台
除了本地备忘录应用之外
我们在iCloud.com有一个备忘录网络应用
这个备忘录应用是在使用CloudKit JS
事实上它使用的方式与你们
作为开发者目前可以使用它的方式相同
这儿没有额外的"苹果魔法"
因此希望你们和我们一样对CloudKit JS感到激动
在这儿看到很多新的可能
并想了解怎样开始
那么让我们看这儿
首先 我们需要确保...
你们要在自己的网页上
嵌入一个脚本标签
你们通过将其指向CloudKitJS的 非托管CD版本完成
这将让CloudKit JS加入到网页中
其次你们需要配置CloudKit实例
你们需要使CloudKit命名空间可用
你们可以调用CloudKit配置方法
并向它赋予一个你们的应用
即将使用的容器标识符
你们的目标环境生产环境或开发环境
然后你们指定API令牌你们刚才看到
克里斯通过CloudKit控制面板生成了API令牌
这就是需要的全部
此时你们已准备好调用CloudKit API了
接下来
你们很可能希望验证你们的用户
正如我们在示例app中看到的一样
在iOS和OS X上可以通过CloudKit直接操作
因为大多数用户已经登录设备上的iCloud
你们只需要在容器上调用取用户方法
你们得到一个用户记录
这个用户记录将有一个稳定的标识符
那么这就是你们为了通过本地设备上的CloudKit
验证用户所需要做的全部工作
不使用显式登录没有用户界面
这些都是无缝操作的
然而在网络上操作会稍有不同
这些浏览器上不能直接登录
因此 你们必须为登录按钮提供一个地址
如同我们在示例app上看到的
点击它会打开新窗口
这儿有一个苹果托管验证页
你们注意到在这个网页上
我们有应用的iCon和应用的名称
这来自ITunes Connect
并发布于苹果公司App商店
用户输入他们的用户名和凭证
这显然将回到Apple网站
同样有一个分为两步的验证过程
如果账户是那么设置的话
这个过程完成后窗口将关闭
它会发回一条POST信息
给已打开的窗口这条信息将包括CloudKit会话
那么这时你们的CloudKit JS
你们的网络应用将能够
开始对CloudKit进行已验证的调用
为了在你们的页面上进行验证
你们首先必须为登录按钮提供一个位置
进行设置给它一个“apple-sign-in-button”ID
第二 你们必须调用名为setUpAuth的方法
这将核对用户的验证状态
如果用户已经登录
一个userinfo对象将会被返回
那就是你们需要寻找的全部信息
除了user info对象它将会有一条记录名称
这是我们刚看到的
稳定标识符
现在这个在网络上的稳定标识符
将与在iOS和OS X上的一样
所以 你们有办法在所有平台
引用相同的用户
除了核对验证状态外
你们需要处理用户
登录或退出时发生的事情
你们在容器上调用whenUserSignsIn
你们得到一个promise
用户一旦登录会便会解决
用户退出登录时的情况也完全相同
除了CloudKit JS中的那些
关于验证的默认功能外
我们也提供切换以及
你们自定义处理验证的方式
下一个示例将向您展示怎样在会话之间
保持验证状态这样CloudKit就不会
在你们的域上写cookies
如果你们想让cookie被写下
以便存储AUTH会话
你们必须在配置阶段
将persist属性设置为true
现在
不用cookies你们或许想
用其它方法存储会话
这个示例将给你们展示配置中...
的几个手法
我们有一个putToken方法和一个getToken方法
以便让putToken不管在何时CloudKit JS从服务器收到任何令牌
和getToken不管在何时CloudKit JS试图让令牌
与服务器对话时都能被调用
这个示例是您可能想把会话存储到
本地存储器或希望将其存储在
你们自己的服务器上
以便你们可以代表用户
进行服务器到服务器的调用
接下来我们将谈一下记录操作
正像早些时候克里斯用JSON展示给你们的一样
CloudKit Js中的记录基本像这样
我们有一个名称为task-1的记录
它的recordType是tasks
我们创建和修改了一些元数据字段被
包括创建和修改记录的
用户数据以及时间戳
recordChangeTag是该条记录的版本
目的为了解决冲
突然后下面出现的是
你们已经在框架中定义的
所有自定义字段
这个示例中我们只有一个任务名
类型是字符串值为"买牛奶"
显然你们可能想存储
字符串以外其它类型的字段
这会给你们一个
与iOS和OS X的比较
在CloudKit框架中我们有一个字符串
但是在CloudKit JS中我们只使用
JavaScript字符串数字方面也一样
对于NS数据 我们使用基本64位代码和二进制编码
对于NS数据我们有JavaScript数字
使用UNIX时间以毫秒为时间单位
对于更复杂的对象如CL位置
我们有一个定位对象
和一个参考对象
和一个资源对象
请你们查看文稿
以了解每一个对象是如何定义的
在建立记录方面
你们可以继续
定义其中一个对象字面量
这个示例只是表明了记录类型是tasks的情况
而且只有一个字段即taskName
它的值为"买牛奶"
你们可以继续进行下去在数据库对象上
调用saveRecord方法
不过你们注意到在以上示例中
我们没有赋给它recordName
记录名是一个记录的独特标识符
那么在未指定情况下
服务器将径直为我们生成一个记录名
我们也没有为这个特定字段指定字符串类型
因此CloudKit JS会做一些类型推断
它会弄清这个值是一个字符串
你们应该对我们的所有基本类型都进行这种指定
接下来我们想谈谈查询	
它在网络上通过JavaScript API
的操作有一点不同
在Foundation框架中的iOS和OS X上
我们有NSPredicate
NSPredicate...
很棒
但它对网络不是很自然
不是很符合...
我们将通过网络服务展示的JSON API
我们这里有些东西看起来与Java用于记录的字面量很像
你们只须定义一个这样的查询
这本例中我们表明记录类型是tasks
我们在数据库上调用performQuery
我们将取回类型为"tasks"的任务的所有记录
现在你们可以做一更复杂的操作
下一个示例中我们提供一些performQuer y
方法的选择
我们表明这个硬键是任务名
我们将只是从每个记录
取回任务名字段
我们将把结果限额限制为十个
我们也将把所有记录限定为
在"allTask"这个自定义区内
查询同样允许你们
指定一个筛选条件
在接下来的这个示例中我们将表明
希望查找任务的记录类型
但是我们只想取回符合"优先条件1"的任务
我们将调用performQuery方法
我们取回所有符合"优先条件1"的任务
你们注意到我们在这儿使用"等于"作为比较条件
并且我们有更多的比较条件
这取决于你们查询的字段类型
因此请查阅字段相关文稿
以便了解在什么地方对每种类型进行定义
你们在早些时候已经看到我们限制了结果集合
问题是你们怎样在结果上标注页码
这是一个相关的例子
结果的数量限制为10
当这个promise解决时我们将取回前10个记录
但是在response对象上
还有moreComing属性
这告诉我们除了我们刚取得的
10个记录之外还有更多记录
我们把response对象传回给performQuery
CloudKit JS会为我们完成所有工作
继续为我们获取的下10条记录
本例中我们展示如何能够
把这些promises很好地连接起来
那么接下来是资源
与其他字段类型相比
资源在CloudKit的操作有一些不同
资源没有和记录一起被存储
资源被存储在外面的我们所谓的资源存储器中
记录只是简单引用了
资源和资源存储器
好消息是CloudKit JS完美的为你们处理这些事务
这个例子中我们有一个带有输入元素的网页
让用户在CloudKit目录app中
选择一个这样的文件
那么当某个文件被选定时
handleFileSelect函数将被调用
我们只需要为这个文件找到一个参考
我们可以将其作为我们
即将保存的资源字段的值
因此在这里CloudKit JS会为我们把资源
上传到资源存储器然后在数据库中保存记录
同时在数据库内创建对该资源的参考
下载资源更容易
当您请求一个带有资源的字段时
你们将取回一个下载URL
这个例子中我们将获取一个用户记录
你们注意到这里的值有一个downloadURL属性
你们可以继续获取相关信息
或把这个作为你们
图像等要素的一个来源
CloudKit的另一个重要特性
是订阅和推送通知
所有推送到Apple设备上的通知
都通过Apple通知推送服务
为了使推送顺利进行传统上你们必须
设定你们自己的第三方服务器
你们必须有自己的服务器
带有你们自己的证书
有你们自己的服务器逻辑
你们必须通过那种方式
发出推送通知
然而使用CloudKit
不再需要这样了
你们可以设置CloudKit订阅
它们就像数据库中的触发器
它们会寻找数据中的变化
并且根据变化发生的时间发出推送通知
现在有了CloudKit JS
网络将成为另一个客户端
我们将能够通过网络收到
与使用iOS和OS X相同的推送
为了收到推送你们必须设置订阅
这里的第一个例子向你们展示一个区域订阅
我们将声明subscriptionType是zone
subscriptionID是changeTasks
我们为zoneID的赋值为allTasks
我继续用数据库保存订阅
那么这将开始寻找变化
一旦allTasks自定义区内发生任何变化
它会向连接到相同账户
的所有客户端推送信息
订阅同样允许你们把它们建立在查询基础上
这里的下一个例子中我们建立一个查询订阅
它将触发allTasks自定义区内创建 
更新或删除的任何信息
然后我们指定一个查询这个特定查询
就像我们为记录取信息一样
任何时候一个优先权为1的任务
被创建 更新或删除时
将会有一个推送通知被发出
而那就是我们需要做的全部
那么在网站上 你们必须完成两件事
首先 们必须为通知注册
这会从服务器获得一个令牌
我们可以将其用于Apple推送通知服务
并且暂停
与Apple推送连接服务的连接
其次
你们需要调用addNotificationListener
每当网页上收到通知的时候
它都会被调用
最后 让我讲一下一些使用CloudKit JS的最佳实践
如我们刚才所见
你们应该动态链接到
CDN托管版本的CloudKit JS
你们应该跟随我们升级到最新版本
并修复安全漏洞
它同样确保这个资源
通过我们庞大而完善的分发网络实现低延迟交付
而且它是完全免费的这一点好极了
其次 你们应该考虑在你们的网页上
异步加载CloudKit JS
对于任何你们可能在网页加载的第三方库
这是一个好建议
它会避免任何网络阻塞以及用户体验的冲击
最后 你们必须确保对请求响应进行处理
所以CloudKit的
新自由限制设置
包括对请求的限制
确实是极为宽宏大量的
你们在检索时可能遇到网站阻塞
所以你们需要确定
你们的客户端将提供适当的备份支持
它是否在有大量响应的同时仍能正常检索请求
那么你们也可以研究它怎样对单一请求进行批量操作
我们确实有一个CloudKit JS批
处理API
如果你们真的对这个话题感兴趣的话
你们确实应该参加
明天的CloudKit小窍门讲座
他们会谈到更多关于整个CloudKit请求被限流的问题
而且不限于网络方面
就这么多
那就是CloudKit JS
我们非常期待看到你们
用它构建的东西
你们如有任何问题敬请顺便访问各个实验室
现在我将把舞台交给克里斯
感谢欧那尔
总而言之
CloudKit 网络服务提供了一个完全
与你们在网络上的CloudKit数据对等的接口
它们通常以容器为基础的
我们处理验证
元数据存储
以及资源上传和下载
你们处理托管你们的静态资源
和你们的JavaScript应用代码
最后我们为你们带来CloudKit JS
以使这些变得尽可能的容易
你们可以在网上访问我们
地址是developer.Apple.com/cloudKit
如果有任何问题你们可以访问
苹果开发者论坛
或Apple开发者技术支持
如果仍然有问题
可以给我们发邮件
地址为<u>CloudKit@Apple .com</u>
有一些相关的讲座
你们可以在网上观看我们昨天的
《CloudKit中的新特性》讲座
明天有题为《CloudKit小窍门》的讲座
我希望在那里见到你们
非常感谢你们