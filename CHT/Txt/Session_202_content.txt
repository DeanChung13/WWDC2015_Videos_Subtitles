Cocoa最新內容
下午好
歡迎參加《Cocoa最新內容》講座
我是阿里•厄澤爾
我是來介紹今年Cocoa新增了什麼內容
主要在三方面：
SwiftificaitonAppKit和Foundation
我們有許多學習內容大家一起來深入研究吧
Swiftification 是指剛完成的API增強版
在多個框架之間支持Swift語言
這些改進同時完善了Objective-C API功能
要知道 Swift語言的功能是
更準確表達API特性
例如可以聲明這是個數組
子視圖屬性是NSView數組
但不僅僅是個數組
還可以聲明System FontOf Size方法
返回到NSFont而且永遠不會返回空
例如在Image ForResource方法中　
NSBundle可以返回零值空因爲它被聲明
作爲可選的NSImage
我們在Objective-C啓動這些功能
具備通用列的爲空性
我會簡要介紹這兩方面內容
接着再做幾處調整
讓我們的Objective-C和Swift API效果更好
我們將這些用於許多框架的API中
不僅是AppKit和Foundation
這樣不僅可以更好地接觸到Swift語言中的API
而且會讓API更爲清晰
還能提供編譯時間類型檢查功能
這一點當然很重要
爲空性是指值能否爲零
若是使用Swift語言X v10或iOS 8 SDK
大家已經瞭解Swift API具有適當的爲空性
和可選的聲明內容
我們已經管理過手工端數據
以及端文件這方面的內容
在X v11和iOS 9中我們將這種能力賦予了Objective-C
並有了若干新的關鍵詞這些都加在了Objective-C上
非零表示永遠不爲零值可爲零表示可以爲零值
可重置零表示屬性可以設爲零值
不過不會返回歸零值
馬上會給出一個例子
最後一項也很重要就是Null Unspecified
也就是未指定的意思
這個用於不支持的內容
或未經審查的內容
由於API大部分是非零值的狀態
我們還有這樣兩種聲明：
Assume NonnullBegin and End
假設首尾爲零中間即爲我們的頁眉文件
這樣 非零值聲明就沒有必要
繼續存在了
非零就沒必要了
我們在API上還有另外的聲明
我們建議你在頁眉文件中這樣使用
如果你有很多自己的頁眉文件
來看部分實例看看這會怎樣影響API
你會看到NSColorWell的顏色屬性
我們沒有發佈任何聲明那它就該是非零值
在Swift語言中作爲非可選值
色彩屬性
另外一方面NSImageView的圖像屬性
是可以爲零值也就是說可以設爲零值
在Swift語言中可以作爲可選值
最後聲明的是NSMenu的字體屬性
是可重置零這就會成爲
隱式解析可選值
在本例中 這說明我們可以將值設爲零
不過它永遠不會返回零值歸零
如果從來都不把它設爲零那麼NSMenu就會
恢復系統已有的默認字體
因此 永遠不會返回零值歸零
存在爲空性 你可能會看到一些建造時間警告
我來給大家看一個例子
如果你有這樣的代碼設置顏色屬性
ColorWell爲零編譯器現在就會給出警告
因爲我們做過聲明這個值是非零
這非常好 因爲就會成爲如果你有這個代碼
並且經過運行就應該提出一個
參數斷言纔對
這種情況下你會收到有關
編譯器的警告
非常好
你也許知道 一般而言在我們的API中
零不是有效目標值
NSString NSArrayNSDictionary等等很容易
表達空值接受或歸零的API
應該把零作爲特殊情況
記錄下來
我從API中給出幾個例子來
如果將NSTextView目標背景色設爲零
表示不得有背景顏色
在許多API的零區域設置
都表示未經區域設置處理
因此 可以確定一個區域設置
但是如果確定爲零則表示未經區域設置處理
再來談談泛型
泛型正如聽上去那樣是個輕量級的
參數化類型我們將之加到Objective-C上
這對具體元素種類集合效果很好
這裏是個NSSearchField方面的例子
NSSearchField的Recent Search屬性
是這樣聲明的X v10
Recent Searches這一名稱並不十分清晰
其中包括什麼內容？
字符串？URL?
搜索目標是什麼？
通過X v11 SDK我們可以進行澄清
這裏是NSString數組
Swift聲明就是從任何目標數組
到任何字符串數組
我們採取的方法就是從Foundation中取得NSArray
在加上Object Type數據等等之類
我們把這個目標類型適用於所有API
適當的API以往都是獲取或恢復ID
諸如索引目標包括目標等等
還有許多其他的API這都適用於NSArray
有了這樣的代碼連同Recent Searches
可以說你是有這樣的代碼
Recent Searches包括目標 部分URL
我們在傳遞NSURL
編譯器現在就會給出警告你在傳遞URL
這種方式可能會出現字符串數組
這裏非常棒的是這個代碼永遠不會出問題
或是出現崩潰因爲URL從來不會
在之前被發現
編譯器在告訴你編碼中存在潛在的bug
我們在Foundation中增加了泛型支持
不僅是對NSArray
而是對所有其他集合NSEnumerator也包括在內
嚴格來講 當然甚至不止是集合
將之適用於非集合也同樣可行
現在連同泛型一起也可以通過不同的聲明
使用這些按照自己的分類
如果你拿到RecentSearches的結果 並將之
賦予自己的屬性那就可以繼續 並且聲明
這是NSArray ofNSString 可以將該類型
通過自己的代碼進行傳播
你可以聲明自己的API屬性
這裏是文件NSS數組
是什麼？
字符串還是URL?
可以更明確些
將通用列適用於自定義集合
如果有任何這樣的集合甚至是在基礎集合中
有你的自定義類別
例如NSArray的類別
你可以直接進入添加就在自己的代碼中即可
這些泛型通用列也同樣適用於類別
現在又有一個功能加在了Objective-C上
我們來講解一下爲什麼需要這麼做
這就是子視圖聲明在
X v10中的模樣
這是我們第一次嘗試應用泛型
子視圖改變爲NSArray of NSView
那麼代碼就是這樣即把數組之外的元素
賦值給NSButton
這就輪到編譯器着急了
編譯器總是替我們擔心很是操心
它會發出警告
爲什麼？因爲我們在把外明顯聲明屬於NSView的內容
賦值給了NSView的子類
難怪編輯器會有所擔心了
但是這類代碼我們使用得很多
而且還常常有效
因此 添加了這類關鍵字並且將
子視圖屬性的聲明改爲這類NSArray of NSViews的
得出的就是...
謝謝
...感謝大家沒注意這邊欄目下的內容
這是說 調用者可以訪問
數組元素如具體類的例子
或者是說子類的例子也可
現在來看 效果可以
注意這類編譯時功能
和我在這裏談到的大多數其他內容一樣
並沒有改變運行時間代碼
例如 並未檢查運行時間類型
有些時候 我們希望調用者可以考慮一下
元素的情況再去訪問它們
我們將在API中做少量使用
並推薦大家也這麼做
當調用者可以安全使用時它們就應該能用了
假設一下
如果你希望調用者審慎行事
或是進行運行時間查詢那就別這麼用
舉例來說NSImage的
Representations法就是這樣
它返還成NSImage數組表示法
它經常會被細分成子類而且幾乎總是如此
不過我們不會在這裏用到這類
因爲這類表示法並非總是能夠
具有可預見性實際上
可能會在應用運行時間內在OS發佈期間
發生改變
最好是讓調用者在這裏多加小心
進行運行時間檢查
我們在來談談錯誤處理
昨天大家聽到了Swift 2具備神奇的
錯誤處理功能
對於這種在NSData上寫入URL選項的錯誤方法
具體意思就是在Swift裏的樣子
Boolean迴歸值不見了現在非常明顯
錯誤可以參考NSError參數
也不見了 因爲是被拋出語句所捕捉
這類代碼就是需要處理的
正如你可以在捕捉語句中所見
可以捕捉到錯誤如果是可以自動
被捕獲或是由你來發出聲明
你可以聲明不同的捕捉語句
這也完全可以
非常好 直截了當
現在還有一點
注意這裏的所有術語拋出 異常捕捉
等等 無外乎就是這些
對Objective-C而言
我們也不會特殊對待
我們實際是在返回錯誤通過這樣的堆棧
妥善解決問題就這麼處理NSErrors
實際上 NSError指南還適用於
Swift錯誤處理
使用NSErrors和Swift錯誤處理應對運行時間問題
準備給用戶展示的錯誤或是需要處理
運行時間 如文件未能找到等等
我們繼續使用例外或Swift斷言
處理編程問題如界外索引數組
當然最後一類錯誤是
不可能被捕捉到的
還有一個Swiftification項叫做清理
你們可能是該走了我們還有許多名稱可以列舉
從很久以前開始我們用公共後綴
而不是公共前綴在部分情況中
我們做了修改 不是全部有了公共前綴
也就是說
在Swift語言中會有更好的名稱
不是按照點左邊文本對齊而是改成了
dot.left格式
這樣的例子還有許多
注意很多情況下我們實際上不支持
舊名稱 因此你的源文件將會繼續編譯
但是可以改爲新名稱重寫編碼即可
這類還有很多
這樣我們就可以來談AppKit
有許多AppKit方面的話題我都很喜歡
來聊聊先來談一部分
說明一點：從這裏我會更多通過Swift
介紹API和代碼樣本
如果你對Swift還不是很習慣
也不必擔心因爲我提到的代碼
不會那麼難
畢竟 我不過是個經理
需要注意的是...
這一點非常重要
這些API在Objective-C和Swift中均可得到
那麼 我們就不是隻給大家展示僅適用於
Objective-C或Swift的東西
無論是使用哪種語言均可以適用
要知道 新的Force Touch觸摸板使用壓力感應的同時
也用到了觸覺反饋
這就爲更多有趣應用帶來了可能
來看部分實例
例如這裏在部分文字上使用ForceClick
可以實現查找或是自動生成
日曆活動
這種情況下通過按壓
快進按鈕就可以讓影片
快進速度加快
這裏通過劃細線或粗線進行點壓
就可以簽上自己的名字或是在標記中寫寫畫畫
最後 在這種情況下把目標移到程序
比如Xcode的界面把開發程序或繪圖程序
作爲對齊目標就會得到觸感反饋
現在還有部分Force TouchAPI在 X v10.3中出現
有人可能見過
首先 用加速器控制API
這些API詮釋不同壓力可以用於創建
類似快進按鈕或是在
類似地圖應用中生成放大按鈕
還可以在NSButton上在NSSegmentedControl裏
設置加速器控制
如果希望再玩的高深一些
我們可以提供一個事件新的壓力事件類型
與 NSResponder和手勢識別等
對應方式相匹配也同樣可行
通過事件實現Pressure Change
可以自己來詮釋壓力事件
在X v11當中我們引入了諸多新類型
一個是壓力配置分類
你來設置壓力配置通過視圖
或手勢識別
表明觸摸板該如何反應
一般來說爲用戶提供的觸感反饋
將取決於
所確定的壓力配置
還有另外兩個分類觸感反饋管理器
和對齊反饋過濾器允許你對此類
提供給用戶的觸感反饋進行定製化處理
很多人可能都用過彈簧載荷
就是說拖動一下並且在目標附近
圍繞時 目標會向你開放
在Finder中可以這麼使用
通過Force Click
可以肯定的是只需用力點擊目標
彈簧載荷就會立即啓動
我們還有新的API讓彈簧載荷更加便捷
就是個簡單的Boolean屬性NSButton和
NSSegmentedControl就啓用了彈簧載荷
可以感知附近的動作或是ForceClick給出的指示
非常直觀
如果這並不能完全滿足需求我們還有新的協議
NSSpringLoadingDestination通過它即可
在任意目標上實現彈簧載荷
例如 Finder的那個例子就很適合這裏
手指滑動即可刪除大家對這都很熟悉
昨天在主旨演講中就見過類似的東西
iOS裏這種東西也很常見可以在桌面視圖
例如郵箱信息上左右滑動
標識信息是否讀過或是否刪除等等
我們現在也有這樣的API也是在EI Capitan中
是NSTableView的委託方式
Row Action是用於Row
只需返回到NSTableView行處理數組
本類的例子只是聲明這些項和行
應該怎樣拖動當用戶選擇
當用戶選擇通過代碼塊處理時
最後是代碼塊
這些話題簡單講一下即可
有個講座《採用觸控板新功能》
是週四上午十點其中會介紹
這類話題的更多詳細內容
全屏部分昨天已經介紹過了
全屏可以將分散注意的因素去除 便於集中精力
處理單項任務就像現在這樣
通過在全屏分割視圖可以關注一個任務
但可以打開其他窗口
例如 你在使用Xcode 再啓用Safari
查詢部分文檔或其他論壇
可以想象把信息放到Xcode旁邊
因爲你想和一個朋友聊聊
正在編的代碼
這叫做疊加窗口放在
分割視圖中
疊加自動會用於多個窗口的情況
疊加可以自動適用於可調整窗口的情況
也就是說 你的應用
應用中的窗口
將自動在全屏狀態彼此疊加
你這邊無需做任何調整
無論是窗口是可以全屏還是不可
不過有個API可以選擇出入疊加狀態
這是NSWindow的NSWindow集合行爲
選項的一部分
例如 你有個不可調整的窗口
而你以爲是可以進行疊加
可以使用Allowd Tiling選項
若你有一個非社交窗口
而且不希望被疊加
可是設置Disallows Tiling
我不清楚那個例子不過它就在那裏
這些是全屏的主要設置
這些已經在X v7中都有
很重要的是要注意全屏主要是這樣
需要確定需要全屏的窗口
注意還有許多選擇性加入
因爲你需要了解窗口在全屏的整個
屏幕空間如何反應
還有一個可選擇功能可以考慮
怎樣讓你的窗口在全屏工作
這一項仍可以選擇
當然也可以在Xcode屬性檢查器中設置
當然可以是設置
疊加或窗口是否該全屏之類
我說過 很多窗口都可以自動疊加
不過AppKit可以查看
確定窗口是否可以在同一個屏幕共存
設想你的屏幕相對較小
還有兩個很大的窗口你希望能把它們疊加
如果窗口無法縮小到足夠小
AppKit將無法實現疊加窗口
我希望你想想怎樣讓窗口足夠小
如何才能靈活處理使其
能在更小的空間疊加分割視圖
爲實現這一點我們有一些API
例如 分割視圖項現在是側邊欄的動作
側邊欄變小並消失
這樣就可以實現重疊
也可以有適當的震動
NSStackView可以自動查出隱藏的視圖
幫你創建類似NSToolbar的體驗
適用於定製化視圖可以把
拖到邊緣的項
放入菜單諸如此類 還有許多
你可以去聽聽
《改善全屏視窗體驗》的講座
時間是週四下午
要知道Auto Layout也很重要
我們做了部分重要調整
極大提高了Auto Layout的表現
首先是堆棧視圖
堆棧視圖是個很重要的分類
在滿足Auto Layout需求時應該首先想到這個
如果你可以瞭解堆棧視圖中
可以做什麼
而不是直接使用種種約束會好得多
這是很大程度上的抽象非常強大
關於堆棧視圖的好消息是在iOS上也可以使用
因爲UI堆棧視圖和在API的效果不相上下
這和我們一直以來的努力相一致
即在不同平臺間實現奇偶校驗效果
這就是具體的一個實例
第二 現在這方面比以往做得更好
我已經說過有個分離功能
還有幾個新視圖分佈選項
具備這個屬性叫做分佈
這裏有一個值是重力區
在介紹X v9的第一天起大家就見過
堆棧視圖的選項
我們已經加上其他設置
這些就不必繼續解釋了
給大家看一個短視頻
有6個堆棧視圖構成這些設置
我重新調整窗口稍大一些
小一些 再大些
你們看 還是有些強大的功能的
比如設定等大等距這些
等等 希望能夠滿足你們的需要
堆棧視圖可以任意放置
方便設置佈局
NSLayoutAnchor是個新類別可以提供
邊或尺寸的精確表示法
比如 你有兩個視圖
打算創建二者間的約束
這就是必須編寫的代碼
有着佈局錨點可以編寫這個代碼
注意 這兩項基本上是佈局錨點
是指那些視圖的邊緣
結果不僅更短更好看
而且還提供了更多編輯時間類型檢查
非常好
NSLayout Guide 是又一個新分類
如果你在做這類事情
創建虛擬視圖實現視圖間
等距效果 那麼可以試試創建佈局指南
這是個輕量級對象佔據了視圖的位置
不過其實它的量級更輕可以參與
Auto Layout而不會生成視圖
我們已經瞭解過集合視圖
要知道 UICollectionView 也有過幾個
版本了
有着X v11 我們將NSCollectionView
iOS版本進行奇偶校驗都是保持重要功能
用於桌面 例如拖拽和批量選擇
現在是新的集合視圖中部分功能
有些功能如異構項
選擇性分組可定製佈局
我來給大家看個短視頻是樣本應用
會有很多圖像顯示出來
我首先依照頁眉和頁腳進行分組 會用到
部分定製佈局是本款app所提供
來看app的實際應用瞭解具體功能
以及如何用於自己的應用中《集合視圖最新內容》
週四下午4:30會有介紹
在文本方面我們的改動很多
首先是新的系統UI字體
新系統的字體是這樣San Francisco
要知道　這和iOS和watchOS上的字體一樣
字體是自動提供應用的
在 El Capitan的X v11 運行你的應用
就會得到這個字體
不過可能你做了什麼
阻止了這項功能
如果看到這個字體這是在X v10中推出的
還有些內容在繼續檢查一下是否是你所需
確保你是在使用SanFrancisco這種字體
如果在用這種字體我們是在X v0當中推出
還會有更多內容繼續
最後 如果你在使用這款字體...
...那麼會有很多工作要做
稍等一下
這就是我們不再使用的Mac OS 9字體
這是在API可以使用的NSFont字體
確保自己用的是最新版本的系統字體
還有系統字體大小等等
這些字體這些API
我們用了很久
可以通過Xcode屬性檢查器設置系統字體
非常簡單會有彈出窗口
選擇適當的系統字體
用於自己的應用
我們還有一款新API可用於不同粗細的系統字體
如果設計師讓你使用不同粗細字體
現在就可以用這個API調整系統字體
系統字體大小和粗細
有預設的9種不同粗細
我只給大家看其中三種
從超細到黑體都有
常規設置是系統字體大小
默認值
我們還有一款API單距系統字體大小粗細
我給大家看看爲什麼這東西有用
如果調用應用中的字體大小API
鏈接是X v11 SDK
在寫幾個數字就是這個效果
對字體很敏感的眼睛估計一下子就會感到不同
這些數字不是定距
寬度都不同
這就很奇怪了因爲傳統的系統字體
一般都是等寬數字
要確保表格數字都要井井有條
或是UI文本中數字變化時不會擰成一團
因爲數字是不斷變化的
不過現在 如果你的app
連在 X v11上就會得到這樣的系統字體
如果必須要定距字體
那麼在使用這個API時 就要放棄
等寬數字
從活版印刷角度來看效果不理想 不過問題解決了
效果很是不同
現在是按比例也是固定寬度了
這就是給大家的工具
大家還可以聽到更多API方面的內容
《最新系統字體介紹》
講座時間 週五下午2:30
我也提到了新款API在科技系統有新款API
可以實現新功能以及對TextKit和iOS進行奇偶校驗
這裏還有很多項
我只介紹其中兩三種
首先是路徑排除
這種功能可以很容易安排路徑
在目標周圍擺好文字 就像這蝴蝶
非常簡單
還有一個是文本域的兩個屬性：最大線條數
特別適用於Auto Layout
或是允許默認縮緊截斷
這可以確定文字域
內容是否應該縮緊然後再真正將之截斷
以前有過控制方法但是現在是
使用Boolean屬性控制
還有很多調整變化以及部分亮點
那麼關於AppKit部分
最後講一點視覺原子性
大家可能會奇怪視覺原子性是什麼
是山嗎？
這和Half Dome有什麼關係?
我給大家看個短片解釋我所說的
視覺原子性或缺乏視覺原子性是什麼意思
兩次看到打開面板
第一次沒問題 還可以
第二次 你們自己想
除非你們什麼都看不到否則都明白我的意思
我給大家慢動作播放
陰影部分面板面板其他部分
這就是打開面板是在約塞米蒂
打開面板很粗糙因爲是多項進程
在帶動不過這不是藉口
這樣的UI讓用戶感覺彷彿是一次
走一步 一次走一幀不應該是
這樣的視覺步驟的
這就是我所說的視覺原子性的意思
需要的時候一步到位
你們當中視窗 視圖
還有Core Animation層次都很清晰
要知道實現視覺原子性並非
都那麼簡單
這些是API大家不用仔細
看明細這不是考試
這些就是完成這項任務所需要的API
但是不一定要一起工作才行
在X v11中我們解決了問題
所以可以用NSAnimationContex
實現視覺原子性
可以調用Begin Grouping或End Grouping
或類似功能
運行Animation Group周圍是一系列
你在做的獨立畫作就像這裏這樣
這就可以實現視覺原子性
除此之外
我們不鼓勵使用DisableScreen Updates
和Enable ScreenUpdates
以及Disable Screenuntil Flush
並非是不支持只是不再推薦使用
應該沒必要
這樣 我們可以繼續介紹Foundation
關於Foundation可以講的也很多
首先是管理撤銷
用過Swift中管理撤銷的都知道管理撤銷
API在Swift中並不太好用
API是這個樣子
第一個有個選擇器部分情況纔會管用
第二個是有指示
NSIndication inObjective-C當然相當棒
還是Swift裏面那些花哨的種類 它不太清楚
所以我們加上了基於代碼塊的撤銷
這就是在Objective-C中的樣子
在Swift中是這個樣子
你們看這有個目標論證
也是個代碼塊基本上就是執行
剛做過的撤銷應用
目標方式的不同論證大家不用
去參考代碼塊的目標
以避免循環保留
在Swift聲明中也用到泛型類型
我會告訴大家具體是怎麼工作的
這是個例子
我們有個類別名爲Colorful Shape
還有個屬性名爲Color
我們爲這個屬性加上Did Set屬性觀察器
這不過是可以實現撤銷的多種方式之一
還可以通過其他方式撤銷不過我們是通過
Did Set屬性完成
這裏是調用目標註冊撤銷
這裏是實際上執行撤銷應用的代碼
針對我剛做過的事情
注意這裏多虧對目標的註冊撤銷中用了泛型
這些都發揮了作用
目標被自動識別爲是彩色形狀
這要歸功於註冊撤銷欄的
自參考
你不必將目標轉化爲彩色形狀
NSCoder現在就可以處理錯誤
用過NSCoders的人們比如NSKeyedArchiver之類
要知道並沒有對這些東西的錯誤論證
我們已經添加了外顯錯誤處理
這類方式包括DecodeObject for Key
Decode Object ofClasses for Key
都有不同版本
都可以在實際中返還錯誤將錯誤拋入Swift當中
這些叫做Decode Top Level
Object for Key
以及Decode TopLevel
Object ofClasses for Key
注意它們拋出聲明表示了它們在返回還錯誤
還要注意它們返回了可選目標
因爲空返回實際上是有效返回
這表明對象並不在檔案中
注意這些名爲
Decode Top LevelObject for Key
我們有意在未歸檔的
根對象中將其放在頂層
我們不想在你實施代碼期間
調用這些
請注意 這裏只有兩種方式
我們還有兩三種方式可以適用
所有的解碼對象類型方式
現在由NSError提供值我們以此爲模型
通過這種簡單的方式可以生成NSError對象
相當簡單直接 不過
注意 它不可向用戶呈現
如果用戶見過了
那就是這個樣子
不太好你們其實是想給他們看看
是否曾給用戶見過
即便不給用戶提供要知道
除錯器中 有這類東西也會很有幫助
與得到42號錯誤相反
因此編寫的代碼是類似這樣
因此要明確各個鍵的值如果想要給用戶
出示 需要對之進行本地化
因此這是一大堆代碼
你就可以永遠地創建方式
代碼不是問題編寫代碼是我們的工作
對 我們就是靠這個掙錢的不過這不是問題
問題是所有這些都是發生在
出現錯誤的時候即使錯誤的消費端
和錯誤沒有任何關係也是如此
因此從性能考慮這是浪費
因此我們加入了這種功能
可以按需創建並返回所需值
我們有這個方式爲域名提供方的
用戶信息值提供方進行設置
你基本上在應用中爲NSError
明確域名並提供提供方
即可以將在用戶信息字典中丟失的任何鍵值
返回的代碼塊
因此 會按需惰性生成
你可以回去使用這個漂亮的短小代碼
來生成錯誤用戶信息
會動態填寫
你也許熟悉NSProgress
這是報告進度的對象
還有個不錯的功能
將在多個操作類型層次中隱形記錄進度
並且它會作爲單獨數字
呈現給用戶
相當不錯但是這是隱形的
作爲隱形你可能會
遇到一些問題
我們介紹管理進度報告的
線性模式
包括兩部分一個是直接向
操作類型層次添加並去除子進度對象
第二個就是這個協議
可以讓你直接聲明對象進度
例如 如有NSOperation子類
這可以實現部分一步操作要知道 它會開始和結束
是這個進度屬性不錯的候選
可以實現選擇外顯進度報告
NSProgress也可以從頭開始
以前是可以停頓我們有加入第二部分
NSNotificationCenter現在可以
自動解除註冊分配的觀察
這就是你們必須把自己加成
觀察者需要編寫的內容
這是需要把自己
作爲觀察者刪除所需編寫的代碼
如果想把自己作爲觀察者刪除
作爲觀察者刪除所需編寫的代碼
如果不然 你會被自動取消註冊
相當棒這樣很好
這個類別名稱 就是Toby 昨天在
聯盟會議上不敢提到的
NSFirstNameComponentsFormatter
規則是 如果它沒有長到可以在
幻燈片標題上封裝起來那它並不算太長
那麼NSFirstNameComponentsFomatter
它可以讓名稱的格式得以恰當本地化
它又和其他我們過去幾年加入的格式器
聯合了起來 比如日期部件格式器
字節數格式器長度格式器等等
它還爲幾種不同形式提供了樣式
讓我舉一個簡單的例子
假設你創建了一個基於人名的實體組件 它有名稱的
幾部分 你指定你有的名稱部分
但是還剩很多 比如說在這裏 我們指定其中三個
然後 你在格式器中創建一個人名 然後把它
格式化
取決於你你給的樣式
你會得到不同形式的名稱 如長的
默認的、短的等等
請注意 如果你需要短的但在其它語言中
你可能會得到一個形式完全不同的名稱 這個具體取決於
這種語言的本地化規則
不要對你會從這種API得到的
名稱的類別做出假設
這個 API 的目的主要的目的之一就是
讓你從編寫全球通用
應用的複雜工作中解放出來
NSString 有新的 API其可以幫助你編寫全球通用
國際化的應用
這將促進有條件的引用
不論其是否爲技術詞語其應由引用包圍
而其規則會根據語言不同而變化
更爲簡單的本地化情況用於變更和搜索的 API
音譯API它們之前都在 CFString 中
現在它們在 NSString 中也能更好地協助
自適應字符串和用戶界面表達
在你的字符串文件中你可以提供多個形式
多種長度並根據你在
你在用戶界面上所剩空間多少來選擇合適的
你會在國際化新特性講座中瞭解到關於名稱部件格式器
和所有這些協助方法的具體信息
當然還有更多內容它在星期五上午9點開始
我再談談關於熱狀況的情況
這些 API 是在 Xv10.3 中引入的 也是我們
動感新 MacBook 出來之刻當然 你們也知道
沒有多少人真的喜歡這個新東西
而事實上它是一個很好的 API 案例研究
請注意 雖然此 API和新 MacBook 同時引入
它也適用於我們的其它機器
而且通常都是可用並能正常運作的
它不僅僅適用於MacBook
此 API 使用屬性捕獲
一種在 NSProcessInfo上的熱狀況屬性
它有四個值：象徵性普通、 嚴重 、極其嚴重
每當值更改時你都會收到通知
如果值爲嚴重那麼風扇是以
最高速度運作當然 這是假設你的電腦有風扇
你可以想象如果你沒有風扇那會發生什麼事情
嚴重通常是要你採取某些行動的時候
例如 你可能在做自定義的動畫
而且幀數達到 60 FIPS這時你要考慮
減少你的幀數到30 FIPS
這就是 NSScrollView會自動爲你做的事情
這樣一來 你就不必擔心有關NSScrollView 的情況
假設你正在應用程序中使用高解析度的材質
而且你收到一個嚴重的熱狀態的提示
也許你需要使用低解析度的材質
此款 API 在你需要它時很有幫助 但
但要注意 此款 API 是反應性的 並不是主動的
此 API 讓系統提示你 告訴你
目前的困難 然後你需要採取行動 當然
你採取的行動不能反而
增加對系統的負載
我們有很多其它主動 API
我們已在最新的講座中介紹
這些類型的 API會告訴系統
你在做什麼 然後系統會基於你
目前的操作優化你的活動和任務
例如 計時器公差
處理信息活動API 並
使用 NSURLSession在後臺進行下載
設置服務質量 等等
這些 API 不僅可以允許高效操作
但它們還能夠引導合適的熱行爲
它們可以帶來更長的電池使用壽命 並讓你的系統冷卻
無論是表面上的降溫還是內部降溫
最後 我簡單地提及下 CoreData因爲講座剩下時間不多了
Core Data中有很多強大功能唯一約束
批量刪除和其他 API 增強功能
這就是我要說的
當然 這不算一個新特性講座 如果
如果我沒有提到很多新事物
這些都是許多其他我沒時間提到的主題
你應該可以在發佈說明中閱讀到
它甚至沒有包括令人驚訝的新技術
比如 Metal 或者GameplayKit
總的來說 我們有很多泛型通用 API 改進
在 Swiftification各個層面上都有
此外 我們有很多強大的功能和增強功能
看看這些材料 想想如何採用它們
如果你有任何問題就來我們的實驗室來討論吧
最後 我再總結下要點
AppKit和Foundation發佈
說明已經可以從
developer.apple.com.osx上獲取
發佈說明是爲了拋磚引玉所以它是一個很好的來源
感謝你們今天到場
會議後好好休息吧