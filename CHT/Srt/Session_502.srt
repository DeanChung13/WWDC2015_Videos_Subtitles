00:00:20.020 --> 00:00:21.555 
HTTP實時流媒體播放的擴展

00:00:25.425 --> 00:00:26.326 
大家早上好！

00:00:27.427 --> 00:00:31.098 
歡迎參加今年的全球開發者大會

00:00:31.532 --> 00:00:33.901 
這是您參加的
第一個真正的講座環節

00:00:34.601 --> 00:00:35.836 
因此歡迎您！

00:00:37.137 --> 00:00:39.106 
今天...
謝謝你

00:00:39.773 --> 00:00:44.411 
今天我們將討論
HTTP實時流媒體播放的

00:00:44.678 --> 00:00:46.380 
一個非常激動人心的擴展

00:00:47.681 --> 00:00:53.453 
你知道我們一直在關注
究竟是什麼阻止了你們

00:00:53.520 --> 00:00:57.591 
以自己喜歡的方式
使用HLS來部署內容

00:00:58.292 --> 00:01:00.027 
而內容保護

00:01:00.260 --> 00:01:05.699 
是指讓您的用戶觀看或收聽您的內容

00:01:06.400 --> 00:01:08.635 
卻不授權使用它

00:01:09.203 --> 00:01:14.308 
一直是一個真正有難度的問題
你們中的很多人曾經不得不設法應對

00:01:15.075 --> 00:01:18.745 
而且隨着比特率的升高
以及分辨率的上升

00:01:18.912 --> 00:01:20.614 
那些需求將只會增大

00:01:21.481 --> 00:01:27.588 
那也是我爲何
終於能夠高興地宣佈

00:01:28.589 --> 00:01:30.390 
FairPlay流媒體的誕生

00:01:31.692 --> 00:01:32.626 
那麼它是什麼？

00:01:34.394 --> 00:01:40.901 
首先
它是我們最出色的內容保護技術

00:01:41.101 --> 00:01:46.139 
它的封裝方式允許您將其用於
保護您的HLS內容

00:01:47.140 --> 00:01:48.175 
現在 它已不是新事物了

00:01:48.809 --> 00:01:52.279 
我們在過去三年一直在

00:01:52.880 --> 00:01:55.082 
與一些主要內容合作伙伴進行合作

00:01:55.849 --> 00:01:59.553 
幫助它們在app
或Apple TV上部署FPS

00:02:00.187 --> 00:02:05.158 
現在它已被用來保護大量的內容

00:02:05.425 --> 00:02:10.597 
包括一些世界上最熱門的
電影和電視節目

00:02:15.836 --> 00:02:21.642 
現在您可以將它用於iOS
及Apple TV和OS X上

00:02:22.910 --> 00:02:26.513 
當然
在我們的移動設備上 電池壽命是王道

00:02:27.080 --> 00:02:30.217 
所以當我們設計
FairPlay流媒體的時候

00:02:31.185 --> 00:02:35.656 
我們所做的每個決定都是建立在
爲您實現良好的電池壽命的基礎上的

00:02:35.756 --> 00:02:38.759 
我們選擇的編解碼器
我們選擇的加密技術

00:02:39.092 --> 00:02:41.929 
我們的實施方式
甚至我們利用的硬件

00:02:42.329 --> 00:02:45.632 
所以您會有極大的安全性
也會有很好的電池壽命

00:02:47.000 --> 00:02:52.806 
而且它也與AirPlay無縫集成
因此它會伴隨全面的保護

00:02:54.141 --> 00:02:57.945 
不過您可能會說：
“好吧 那聽上去很不錯

00:02:58.412 --> 00:02:59.546 
但是我有很多內容

00:02:59.680 --> 00:03:04.251 
我的意思是Apple
將如何讓我爲這個FPS付費？

00:03:04.318 --> 00:03:07.454 
它將是按照影片收費？
按每次播放還是統一價格？”

00:03:08.722 --> 00:03:12.326 
我們反覆嘗試
最後我們確定採用統一價格

00:03:13.794 --> 00:03:14.628 
零

00:03:15.996 --> 00:03:19.800 
如果大家每年向我們
支付99美元的開發者費用

00:03:20.100 --> 00:03:24.838 
您將不必再向蘋果公司支付一分錢
就能盡情使用FPS

00:03:26.240 --> 00:03:31.645 
那麼現在 觀衆中間任何從事
市場營銷的朋友可能會說這樣的話：

00:03:31.712 --> 00:03:33.146 
“哦 那聽上去棒極了！”

00:03:33.480 --> 00:03:36.483 
而坐你旁邊的工程師可能會說：
“不 不 真的嗎？ 它是什麼？”

00:03:36.850 --> 00:03:37.784 
好了 那麼

00:03:38.352 --> 00:03:41.121 
它實際上是非常簡單的

00:03:41.922 --> 00:03:46.326 
我們所做的就是着手解決了DRM系統

00:03:46.393 --> 00:03:48.962 
最重要的組成部分 即密鑰保護

00:03:49.963 --> 00:03:55.335 
那麼FPS在本質上及實際上是一個
安全的密鑰傳送系統

00:03:55.669 --> 00:03:59.006 
它是一種將密鑰
從您在互聯網上的服務器

00:03:59.473 --> 00:04:01.775 
轉移到設備上的方式

00:04:02.543 --> 00:04:07.648 
讓您在該設備上使用密鑰
同時不讓攻擊者獲取它並解密您的內容

00:04:08.849 --> 00:04:12.920 
在設計方面 
我們讓它容易使用和採用

00:04:13.487 --> 00:04:15.822 
我們認識到你們中的很多人

00:04:15.889 --> 00:04:20.360 
尤其是當您以流媒體提供
高級內容或訂閱內容時

00:04:20.427 --> 00:04:22.963 
您已經在與某種安全後端對話了

00:04:23.664 --> 00:04:26.233 
因此我們設計了FPS

00:04:26.300 --> 00:04:30.003 
讓傳送這部分工作成爲不可知
讓您使用的協議成爲隱蔽

00:04:30.070 --> 00:04:34.842 
如果您擁有安全連接
您可以極其容易地採用FPS

00:04:35.342 --> 00:04:37.878 
如果沒有 你也可以使用HTTPS
它是一個很不錯的選擇

00:04:39.346 --> 00:04:42.683 
最後 過去很多朋友
問我關於HDCP方面的事情

00:04:43.250 --> 00:04:45.586 
FPS就是這個問題的答案

00:04:46.987 --> 00:04:51.992 
如果您的設備連接了電視
或其他外部輸入

00:04:52.593 --> 00:04:54.094 
它一定是HDMI

00:04:54.661 --> 00:04:56.763 
而HDCP一定是活躍的

00:04:57.164 --> 00:05:00.400 
否則任何FPS內容播放都會失敗

00:05:01.235 --> 00:05:02.135 
沒有例外

00:05:04.204 --> 00:05:07.207 
當我們設計它的時候

00:05:07.708 --> 00:05:13.013 
我們知道有很多商業規則或邏輯的區別
而每個人都有自己的口味

00:05:13.080 --> 00:05:15.382 
而我們不希望
建立一個龐大而複雜的東西

00:05:15.749 --> 00:05:17.284 
並迫使你們進入我們的盒子

00:05:17.784 --> 00:05:21.255 
所以我們建立了
這個密鑰傳送機制

00:05:21.722 --> 00:05:25.259 
我們並不是創建了一種
權利表達語言評估工具

00:05:25.325 --> 00:05:28.695 
或者是一長串您需要遵守的策略

00:05:29.363 --> 00:05:33.667 
而那意味着
如果您的商業邏輯要求那些東西

00:05:33.734 --> 00:05:35.936 
您是可以掌控的
您依然是守門員

00:05:36.470 --> 00:05:39.273 
因此 一旦您爲媒體堆棧
賦予了一個FPS密鑰

00:05:39.339 --> 00:05:40.774 
毫無問題
我們將播放它

00:05:40.841 --> 00:05:42.376 
我們將保護密鑰
我們將去播放它

00:05:43.076 --> 00:05:46.146 
如果您需要實施某種策略實施

00:05:46.246 --> 00:05:50.751 
或進行用戶認證
或對每個設備插槽進行管理

00:05:51.151 --> 00:05:53.987 
那麼您就可以在FPS上那麼做

00:05:54.421 --> 00:05:57.224 
而且它將是非常容易整合的

00:05:58.458 --> 00:06:00.694 
那麼現在讓我們討論一些具體步驟

00:06:01.161 --> 00:06:03.096 
那就是FPS爲您提供的基本功能

00:06:03.430 --> 00:06:06.200 
讓我們討論一下
您採用它需要採取的步驟

00:06:07.467 --> 00:06:09.002 
主要有三步

00:06:09.603 --> 00:06:12.039 
第一步
也極可能是最重要的一步是

00:06:12.372 --> 00:06:15.709 
由於FPS是一個在線密鑰傳送協議

00:06:16.343 --> 00:06:20.447 
您必須在線獲取您的密鑰
而一旦播放停止密鑰即消失

00:06:21.248 --> 00:06:26.386 
您需要把我們所謂的“密鑰安全模塊”
集成到您的密鑰服務器中

00:06:27.421 --> 00:06:31.024 
因此那是最重大的一步
稍後我們將詳細討論那個話題

00:06:31.692 --> 00:06:35.462 
但是第二件事情是
您需向您的應用添加一些代碼

00:06:36.029 --> 00:06:39.166 
稱爲AV Asset Resource Loader Delegate

00:06:39.766 --> 00:06:45.372 
那段代碼負責將來自
AV Foundation的密鑰請求傳送到後端

00:06:45.706 --> 00:06:49.610 
然後將您後端發出的響應
並返回給AV Foundation

00:06:50.310 --> 00:06:52.513 
最後您需要做的是準備您的內容

00:06:52.579 --> 00:06:57.784 
而那意味着您需要
使用AES示例加密法將其加密

00:06:58.085 --> 00:07:03.290 
巧的是 這是我們三年前引入的

00:07:04.558 --> 00:07:10.864 
因此與最初HLS使用的傳統
整段代碼加密不同的是

00:07:11.098 --> 00:07:14.168 
這種加密法僅加密
每段示例代碼中小的片段

00:07:14.434 --> 00:07:19.106 
這確保了我們能夠
在系統基本水平上進行解密工作

00:07:20.140 --> 00:07:22.476 
因此您需要選擇一個內容密鑰

00:07:22.543 --> 00:07:24.111 
將其存放在您的後端數據庫內

00:07:24.411 --> 00:07:25.479 
對您的內容進行加密

00:07:25.746 --> 00:07:28.649 
然後將對那個密鑰的引用加入播放列表

00:07:28.882 --> 00:07:31.652 
以便當您的那小段代碼
接到對密鑰的請求時

00:07:31.718 --> 00:07:33.854 
能夠知道向後端請求哪個密鑰

00:07:35.155 --> 00:07:40.928 
那麼我接下來將要做的
是進一步詳述這三個步驟

00:07:41.328 --> 00:07:45.465 
在那之前 我想介紹我的一位同事

00:07:45.799 --> 00:07:47.434 
他是FairPlay團隊成員之一

00:07:47.734 --> 00:07:48.936 
詹保羅 法索裏

00:07:50.070 --> 00:07:50.904 
歡迎！

00:07:56.143 --> 00:07:57.044 
謝謝你 羅哲斯！

00:07:58.145 --> 00:08:00.214 
大家早上好！
我叫詹保羅 法索裏

00:08:00.280 --> 00:08:02.783 
是Apple的FPS工程師

00:08:03.684 --> 00:08:06.753 
繼羅哲斯所做的概述
我想跟大家談一下

00:08:06.820 --> 00:08:09.256 
設計一個FPS系統需要些什麼

00:08:09.323 --> 00:08:10.791 
我想講的第一件事

00:08:11.291 --> 00:08:17.631 
是我們所謂的FairPlay流媒體
證書的目的和重要性

00:08:18.365 --> 00:08:23.270 
接下來
我將識別系統和數據流中的活動要素

00:08:24.638 --> 00:08:27.975 
然後我將討論蘋果公司將在您
構建的東西中會提供哪些東西

00:08:28.041 --> 00:08:31.144 
而在您將構建的東西中
我們將先從服務器端講起

00:08:31.211 --> 00:08:36.683 
以及如何將Roger剛纔所講的
密鑰安全模塊集成到您的密鑰服務器中

00:08:37.217 --> 00:08:39.586 
我們將討論如何測試集成

00:08:40.254 --> 00:08:45.492 
接下來我們將討論客戶端
以及如何將FPS集成到您的應用中

00:08:45.559 --> 00:08:52.232 
然後我們將討論
您將對內容製作工作流的更新

00:08:52.966 --> 00:08:57.337 
以便將內容加密 並確認
您將對工作流的更改

00:08:59.239 --> 00:09:02.910 
那麼當我們討論FPS證書的時候

00:09:03.010 --> 00:09:05.946 
我們有那些證書是爲了

00:09:06.013 --> 00:09:12.519 
能夠將您的FPS部署
和那裏已經存在的部署區分開來

00:09:13.053 --> 00:09:16.290 
之所以需要它們是因爲有了它們

00:09:16.356 --> 00:09:20.494 
您的客戶纔可以在他們的設備上
實際播放他們的內容

00:09:21.929 --> 00:09:27.968 
出於這些原因
保護FPS證書資產資源就十分重要了

00:09:28.202 --> 00:09:30.204 
不管是當它們被部署在服務器上

00:09:30.270 --> 00:09:31.505 
還是在您的服務器上被使用

00:09:32.306 --> 00:09:33.674 
要確保它們得到保護

00:09:34.641 --> 00:09:40.380 
那麼現在繼續往下看圖表
左邊我們已經有了服務器組件

00:09:40.681 --> 00:09:42.216 
也就是您的密鑰服務器

00:09:42.316 --> 00:09:46.119 
它內部已經集成了FPS密鑰安全模塊

00:09:46.854 --> 00:09:51.458 
密鑰數據庫裏面含有
用來爲您的流媒體加密內容密鑰值

00:09:51.725 --> 00:09:56.029 
而在右邊我們有客戶端活動要素
即是您的應用

00:09:56.396 --> 00:09:59.600 
羅哲斯剛纔講的
AVFoundation Delegate和AVFoundation

00:09:59.666 --> 00:10:03.470 
已經爲我們提供了部分操作系統
即我們的iOS或Mac OS X

00:10:04.938 --> 00:10:09.176 
那麼讓我們討論一下 當用戶在您的
應用中點擊播放的時候會發生什麼

00:10:09.243 --> 00:10:10.544 
第一件會發生的事情是

00:10:11.011 --> 00:10:13.514 
您的應用將調用AVFoundation

00:10:13.580 --> 00:10:16.683 
併爲其提供即將賦予
加密內容的m3u8 URL

00:10:17.184 --> 00:10:21.288 
AVFoundation將從互聯網
抽取那個播放列表並對其進行解析

00:10:21.655 --> 00:10:23.790 
當它注意到內容被加密的時候

00:10:23.857 --> 00:10:28.028 
它將回調您的Delegate
告訴它需要一個密鑰以便播放內容

00:10:29.196 --> 00:10:32.299 
Delegate將進行處理
它將調入AVFoundation

00:10:32.366 --> 00:10:37.070 
並請求後者創建
所謂的服務器上下文播放

00:10:37.971 --> 00:10:40.841 
在FPS術語中
我們將其簡稱爲SPC

00:10:40.908 --> 00:10:41.942 
而那是什麼？

00:10:42.209 --> 00:10:47.414 
它是一個Delegate的密鑰請求
它將用post方法提交給密鑰服務器

00:10:48.248 --> 00:10:51.818 
以便完成其工作並傳遞內容密鑰

00:10:52.186 --> 00:10:53.921 
這裏需要注意的重要一點是

00:10:54.321 --> 00:11:01.061 
SPC是在客戶端上的
FPS傳遞上下文中創建的

00:11:01.495 --> 00:11:03.964 
而那是一個特定會話上下文

00:11:05.098 --> 00:11:07.734 
只有那臺設備能夠創建它

00:11:07.801 --> 00:11:11.905 
也只有那臺設備能夠爲其處理
來自於服務器的響應

00:11:11.972 --> 00:11:13.807 
它是和設備以及會話綁定的

00:11:14.675 --> 00:11:18.212 
因此當您的服務器準備利用KSM

00:11:18.645 --> 00:11:24.351 
來破解SPC隊列請求
對其格式和加密方法進行驗證

00:11:24.718 --> 00:11:27.888 
並在密鑰服務器數據庫中
查找對應的內容密鑰時

00:11:28.589 --> 00:11:34.828 
它將把那個內容密鑰值
打包爲我們所稱的內容密鑰上下文

00:11:35.162 --> 00:11:36.530 
或簡稱爲CKC

00:11:37.164 --> 00:11:40.634 
而您的app delegate
將要執行的最後一步是

00:11:40.701 --> 00:11:43.504 
將那個CKC
返回給AVFoundation

00:11:44.471 --> 00:11:48.942 
那麼此刻設備已經有了
它對內容的解密和播放所需要的一切

00:11:49.643 --> 00:11:53.947 
那麼現在我們已經談及了FP系統中的
活動要素和數據流

00:11:54.014 --> 00:11:55.816 
讓我們談一下Apple將供哪些東西

00:11:56.984 --> 00:11:58.785 
當然我們提供AVFoundation

00:11:58.852 --> 00:12:03.023 
在iOS和Mac OS中
AVFoundation的一部分是

00:12:03.090 --> 00:12:05.726 
您將用於執行delegate的API

00:12:06.527 --> 00:12:09.730 
我們提供的另一個工具是
developer.apple.com上的

00:12:09.863 --> 00:12:11.865 
FairPlay Streaming SDK

00:12:11.932 --> 00:12:13.834 
那個SDK包含一些特定的內容

00:12:13.901 --> 00:12:17.504 
首先它包含一個協議規範

00:12:18.005 --> 00:12:22.709 
裏面有關於SPC和CKC消息
編寫格式的全部詳細信息

00:12:23.110 --> 00:12:29.783 
和您將使用哪些加密原函數
來處理密鑰請求 及生成密鑰響應

00:12:30.651 --> 00:12:36.757 
它包含一個在網絡控制中心的
對密鑰安全模塊服務器的引用實施

00:12:37.824 --> 00:12:43.664 
它包含一整套能夠用於服務器部署的
服務器測試矢量和驗證工具

00:12:44.398 --> 00:12:47.334 
它包含一些客戶端示例內容

00:12:48.902 --> 00:12:54.842 
而它包含的最後一點內容是
一套客戶端示例代碼

00:12:56.376 --> 00:13:01.982 
因此如羅哲斯指出的
密鑰服務器的首要職責是加密

00:13:02.149 --> 00:13:05.018 
以及對SPC密鑰請求的驗證

00:13:05.619 --> 00:13:10.457 
然後它將根據資源識別符
查找客戶希望播放的內容

00:13:10.824 --> 00:13:13.193 
然後它將生成CKC響應

00:13:13.260 --> 00:13:15.262 
它是您的密鑰安全模塊中

00:13:15.329 --> 00:13:17.197 
將發生的第一個和第三個操作

00:13:18.165 --> 00:13:21.335 
您有兩種執行該操作的方式

00:13:21.401 --> 00:13:23.837 
您可以使用FPS SDK中
提供的協議規範

00:13:23.904 --> 00:13:27.841 
從零開始執行這個邏輯系統

00:13:28.542 --> 00:13:33.447 
或者您也可以直接採用C參考實施

00:13:33.514 --> 00:13:36.950 
並通過您自己選擇的語言

00:13:37.017 --> 00:13:40.654 
或直接將其集成到現有密鑰服務器中
而對其進行定製化處理

00:13:42.356 --> 00:13:45.726 
那麼在執行完集成之後
讓我們談一談您將如何測試KSM

00:13:46.894 --> 00:13:48.695 
我們建議您做的第一件事當然是

00:13:48.762 --> 00:13:51.498 
使用我們提供
作爲SDK一部分的測試矢量

00:13:51.965 --> 00:13:55.202 
來驗證KSM將生成的響應的正確性

00:13:55.269 --> 00:14:01.074 
而您執行此步驟的方式
是使用我們提供的SPC測試矢量

00:14:01.508 --> 00:14:04.144 
將它們提供給KSM執行

00:14:04.545 --> 00:14:08.048 
然後運行由KSM通過驗證工具
產生並輸出的CKC

00:14:08.415 --> 00:14:14.488 
以確保它們不管從加密的角度
或格式的角度都是正確的

00:14:15.522 --> 00:14:16.390 
需要注意的是

00:14:16.456 --> 00:14:20.694 
我們在SDK中提供的測試矢量
是基於開發專用憑證的

00:14:20.761 --> 00:14:24.264 
它們是專爲您的開發工作而存在的

00:14:24.331 --> 00:14:28.569 
它們不可被用於向活躍的客戶設備
部署解決方案

00:14:28.635 --> 00:14:32.639 
爲了向活躍的客戶設備部署解決方案
您將需要專用於生產目的的FPS憑證

00:14:33.373 --> 00:14:36.577 
那麼既然我們已經談了服務器端
讓我們談談客戶端

00:14:36.643 --> 00:14:39.346 
將FPS集成到您的應用中
需要些什麼呢？

00:14:39.413 --> 00:14:40.347 
您應做的第一件事是

00:14:40.414 --> 00:14:44.518 
用AVAsset註冊一個
AVasset Resource Loader delegate

00:14:44.685 --> 00:14:48.388 
而那個delegate的職責
有三個方面

00:14:48.455 --> 00:14:50.991 
首先它要做的是生成SPC

00:14:51.291 --> 00:14:53.660 
這需要通過以下兩步完成

00:14:53.727 --> 00:14:54.828 
首先您將爲密鑰請求處理

00:14:55.162 --> 00:14:56.330 
“should Wait For
Loading

00:14:56.396 --> 00:14:59.032 
Of Requested
Resource”命令

00:14:59.099 --> 00:15:00.267 
然後您將做的第二步是調用

00:15:00.334 --> 00:15:02.836 
“VAsset Resource
Loading Request

00:15:02.903 --> 00:15:04.972 
Streaming Content
Key Request Data

00:15:05.038 --> 00:15:06.240 
For App”

00:15:06.306 --> 00:15:07.875 
以便生成SPC

00:15:08.842 --> 00:15:11.912 
一旦您獲得了那個 SPC
您將把它傳送給您的密鑰服務器

00:15:12.379 --> 00:15:14.248 
而當您的密鑰服務器做出響應時

00:15:14.314 --> 00:15:15.582 
您將把CKC響應提供給

00:15:15.649 --> 00:15:17.551 
“AVAsset Resource
Loading Request”

00:15:18.452 --> 00:15:21.588 
那麼我們就完成了服務器端的執行
也完成了客戶端的執行

00:15:21.655 --> 00:15:25.025 
讓我們談一談工作流更新中內容製作

00:15:25.692 --> 00:15:28.128 
爲了將內容解密您將必須做些什麼？

00:15:28.195 --> 00:15:29.363 
您應做的第一件事是

00:15:29.429 --> 00:15:33.367 
去從developer.apple.com
獲取HLS加密規範 

00:15:33.700 --> 00:15:35.636 
不管比特流是音頻還是視頻

00:15:35.702 --> 00:15:39.706 
它將爲您提供您需要了解的
對比特流本身加密的所有細節

00:15:41.275 --> 00:15:45.612 
一旦您對比特流加密後
您將必須更新m3u8播放列表

00:15:45.679 --> 00:15:47.981 
首先您採用的是何種加密方式

00:15:48.048 --> 00:15:50.484 
這是通過
將m3u8列表中的Method標籤

00:15:50.951 --> 00:15:53.420 
設爲Sample-AES而實現的

00:15:54.655 --> 00:15:57.491 
您應向客戶端發送的另一個信號是

00:15:57.558 --> 00:15:59.993 
您希望用FPS來傳遞密鑰的事實

00:16:00.060 --> 00:16:05.465 
實現的方式則是對m3u8播放列表中
的另一個標籤即密鑰格式標籤進行更新

00:16:05.532 --> 00:16:07.835 
應把它設爲
com.apple.streamingkeydelivery

00:16:10.270 --> 00:16:12.539 
事實上我們三年多前就開始部署了

00:16:12.606 --> 00:16:16.844 
這意味着目前在解碼器方面
有相當多的第三方支持

00:16:16.910 --> 00:16:22.349 
您可以選擇搭配其中之一作爲替代
而不是您親自更新工作流

00:16:23.417 --> 00:16:25.085 
一旦您更新了您的工作流

00:16:25.319 --> 00:16:29.389 
這裏是您如何檢查
加密工作流的正確性的方法

00:16:30.490 --> 00:16:33.894 
您大體上可以做兩個比較

00:16:35.062 --> 00:16:36.563 
但它們都是以同樣的方式開始的

00:16:36.630 --> 00:16:39.633 
開始時先從
示例SDK選取一段明文內容

00:16:40.000 --> 00:16:43.971 
並使其運行通過您的新工作流

00:16:44.771 --> 00:16:50.911 
然後將其與SDK中相同加密資源對比

00:16:51.578 --> 00:16:57.351 
也可將其與在HLS媒體文件切割
工具上通過的該資源加密版本進行比較

00:16:57.651 --> 00:17:00.921 
之所以第二點比較有意思有吸引力
是因爲您也可以使用自己的內容

00:17:00.988 --> 00:17:02.489 
而不是示例內容完成檢查工作

00:17:03.857 --> 00:17:05.425 
那麼現在我們已經討論了

00:17:05.492 --> 00:17:09.630 
客戶端開發和服務器端開發所需的工作
以及對您的工作流的更新

00:17:10.564 --> 00:17:12.566 
接下來我們討論功能性本地回放

00:17:12.633 --> 00:17:15.636 
現在我想很大家談談
AirPlay中對FPS的支持

00:17:17.069 --> 00:17:23.443 
我們對FPS和AirPlay的支持
是通過AirPlay視頻路徑實現的

00:17:23.810 --> 00:17:29.816 
就是說當您從應用中的
本地回放過渡到Apple TV時

00:17:30.384 --> 00:17:34.421 
實際上是Apple TV
從互聯網上讀取內容 是嗎？

00:17:34.488 --> 00:17:36.757 
它不再是發送方的設備了

00:17:37.925 --> 00:17:39.426 
這裏的好消息是

00:17:39.493 --> 00:17:43.430 
在您的應用中或服務器端
都不需要寫任何額外代碼了

00:17:43.564 --> 00:17:48.702 
KSM支持來自於Apple TV

00:17:49.069 --> 00:17:53.173 
或來自於iOS設備傳入的密鑰請求

00:17:55.042 --> 00:17:58.612 
需要明確的是 
SPC仍是Apple TV上生成的

00:17:59.146 --> 00:18:03.884 
而您的密鑰服務器上生成的CKC響應
也將在AppleTV上進行處理

00:18:05.152 --> 00:18:10.657 
然而app仍然負責Apple TV
和密鑰服務器之間的消息

00:18:10.724 --> 00:18:12.659 
因此必須有發送設備的參與

00:18:14.261 --> 00:18:17.364 
這給了我們與本地回放同水平的安全性

00:18:17.431 --> 00:18:21.502 
因爲SPC和CKC消息
都來自於並終止於

00:18:21.668 --> 00:18:23.904 
實際播放內容的那個設備

00:18:24.004 --> 00:18:26.406 
在這種情況下是Apple TV
也即AirPlay

00:18:27.975 --> 00:18:29.743 
需要注意的一點是

00:18:29.810 --> 00:18:33.847 
實際上FPS內容將不會
以AirPlay鏡像模式執行

00:18:34.281 --> 00:18:36.984 
那也適用於在您的本地設備上

00:18:37.317 --> 00:18:39.987 
播放的FPS內容所做的
屏幕截圖和音視頻錄製

00:18:41.355 --> 00:18:44.157 
在我們談了關於如何
在您的app上或AirPlay上

00:18:44.858 --> 00:18:47.661 
在本地消費內容之後

00:18:48.128 --> 00:18:50.264 
我驕傲地宣佈：

00:18:50.330 --> 00:18:53.066 
今年我們將增加
對El Capitan的FPS支持

00:18:54.668 --> 00:18:59.873 
這種大家支持
且集成到網站的方式

00:19:00.240 --> 00:19:04.444 
是通過加密的媒體擴展

00:19:04.912 --> 00:19:07.080 
它們是HTML5的一部分
是一個W3C規範

00:19:07.147 --> 00:19:08.715 
您可以從它們的網站下載它

00:19:09.383 --> 00:19:13.187 
您與EME集成的方式是

00:19:13.253 --> 00:19:16.623 
將您的JavaScript格式
密鑰傳遞代碼寫到您的網站上

00:19:17.124 --> 00:19:21.161 
我們在SDK中
提供了一個這種實施的例子

00:19:21.261 --> 00:19:22.663 
它更多地是一個小片段

00:19:24.097 --> 00:19:30.437 
這裏的好消息是
不管是在KSM端或AirPlay端

00:19:30.504 --> 00:19:32.673 
都不需要任何新的代碼

00:19:33.106 --> 00:19:34.474 
它是開箱即用型的

00:19:34.908 --> 00:19:38.145 
且寫好了JavaScript代碼後
它將對一切都是完全支持的

00:19:38.212 --> 00:19:39.179 
現在讓我們談一下

00:19:39.246 --> 00:19:43.450 
您爲了在網頁上支持FPS
而將要寫的JavaScript代碼

00:19:43.650 --> 00:19:46.753 
您要做的第一件事是
將m3u8 URL設爲

00:19:47.054 --> 00:19:51.091 
HTML5視頻標籤的來源屬性

00:19:51.825 --> 00:19:53.427 
正像您爲一個非加密內容所做的那樣

00:19:54.394 --> 00:20:00.634 
然後爲WebKitNeedKey調用
添加視頻元素Event Listener

00:20:01.535 --> 00:20:02.402 
當被觸發的時候

00:20:02.569 --> 00:20:07.641 
那個Event Listener
將把EME內容加密模塊設置到FPS

00:20:08.509 --> 00:20:11.378 
它還將在video/MP4上
創建一個keySession

00:20:11.445 --> 00:20:14.381 
以便在密鑰系統
和您的密鑰服務器之間傳遞消息

00:20:15.115 --> 00:20:16.717 
您將
web kit key message

00:20:16.783 --> 00:20:19.286 
向那個keySession
添加Event Handler

00:20:19.786 --> 00:20:25.058 
那個Event Handler負責
把SPC密鑰請求傳送到您的服務器上

00:20:25.425 --> 00:20:30.030 
然後通過更新密鑰會話
處理CKC響應

00:20:31.131 --> 00:20:34.701 
在數據流方面
我們在左側有非常類似的活動要素

00:20:34.768 --> 00:20:36.703 
我們在右側有同樣的活動要素

00:20:36.770 --> 00:20:41.241 
我們現在有Apple提供的
Safari以及EME堆棧

00:20:41.708 --> 00:20:43.377 
在Safari內我們有您的網站

00:20:43.911 --> 00:20:50.684 
及您將在網站上支持FPS內容播放和
新寫的JavaScript代碼片段

00:20:52.786 --> 00:20:56.123 
讓我們討論下當用戶在Safari中
點擊Play會發生什麼

00:20:56.256 --> 00:20:59.493 
那麼當用戶點擊play時
將要發生的第一件事是

00:20:59.927 --> 00:21:03.530 
m3u8將在操作系統中
點擊EME和AVFoundation

00:21:03.597 --> 00:21:07.401 
而EME將會注意到內容已被加密

00:21:07.467 --> 00:21:12.706 
這將使它觸發
Web kit need key message

00:21:12.773 --> 00:21:14.374 
您的事件監聽器將收到這條消息

00:21:16.410 --> 00:21:18.478 
然後您的事件監聽器將創建密鑰會話

00:21:18.545 --> 00:21:21.081 
並將等待Web kit key message

00:21:21.181 --> 00:21:23.183 
後者又將觸發
Event Handler

00:21:23.817 --> 00:21:26.286 
而Event Handler
將接收到SPC

00:21:26.620 --> 00:21:30.123 
並將其傳給您的密鑰服務器
密鑰服務器將對其照常處理

00:21:30.190 --> 00:21:32.693 
包括提取內容密鑰和創建內容密鑰響應

00:21:33.026 --> 00:21:36.396 
然後將那個CKC傳回
給JavaScript代碼

00:21:36.463 --> 00:21:39.900 
後者再將CKC
向下傳遞返回給EME層以便播放

00:21:42.202 --> 00:21:43.504 
正如羅哲斯剛纔所說

00:21:43.570 --> 00:21:48.442 
我們從最初部署該解決方案
到現在已超過三年

00:21:48.909 --> 00:21:55.716 
這幾年間我們學會了一些
如何解決FPS集成問題的祕訣和竅門

00:21:56.250 --> 00:21:58.886 
而您可能面對的典型問題

00:21:59.586 --> 00:22:03.657 
如果您的集成工作不幸出錯的話
是內容不播放

00:22:04.358 --> 00:22:08.095 
那麼您要怎樣對那種情況進行調試呢？

00:22:08.262 --> 00:22:11.231 
我們建議您做的一件事是...

00:22:11.298 --> 00:22:14.935 
而且這僅限於調試目的
我們不建議您在生產環境中這麼做 

00:22:15.269 --> 00:22:19.206 
那就是將您在m3u8播放列表中的
密鑰格式設爲identity

00:22:19.806 --> 00:22:22.442 
而不是
com.apple.streamingkeydelivery

00:22:22.509 --> 00:22:23.877 
這有什麼作用呢？

00:22:23.944 --> 00:22:26.713 
它將同樣的內容傳送到客戶端

00:22:27.214 --> 00:22:31.718 
但並不是用FPS將內容解密
而是用明文AES密鑰解密

00:22:32.586 --> 00:22:35.956 
而我們最終會是兩種情況之一

00:22:36.023 --> 00:22:37.457 
第一種是您的內容仍不播放

00:22:37.758 --> 00:22:42.196 
這種情況下很有可能是內容製作問題

00:22:42.529 --> 00:22:45.165 
而那些問題通常分爲四類

00:22:45.566 --> 00:22:48.969 
或者是您的加密樣本存在問題 

00:22:49.036 --> 00:22:53.240 
如果是那種情況 
我建議您參考HLS示例加密規範

00:22:53.540 --> 00:22:55.876 
它可能是PAT/PMT音頻設置問題

00:22:56.410 --> 00:23:02.182 
那些是您需要對採用FPS編碼
和加密的音頻流採取的步驟

00:23:02.249 --> 00:23:04.718 
需要對一些元數據進行更新

00:23:05.786 --> 00:23:08.188 
可能是這樣的情況
您使用的編解碼器不被支持

00:23:08.388 --> 00:23:09.690 
而且如羅哲斯稍早提到的

00:23:09.756 --> 00:23:14.962 
目前我們在FPS中支持的是
H.264 AAC 以及加密的AC3

00:23:15.729 --> 00:23:21.869 
最後 有可能您將在非HLS片段上
重置您的內容密鑰

00:23:22.302 --> 00:23:27.474 
那麼我們建議您將密鑰
在最細粒度的HLS片段上重置

00:23:27.841 --> 00:23:32.379 
或者您也可以轉換比特率時
更改內容密鑰值

00:23:33.914 --> 00:23:37.985 
如果在您將密鑰格式標籤
更新爲identity之後

00:23:38.051 --> 00:23:40.187 
您的內容已經可以播放
但可能面臨密鑰傳遞問題

00:23:40.721 --> 00:23:45.292 
如果那樣的話
您要做的就是跟蹤我們剛纔所考查的

00:23:45.893 --> 00:23:50.464 
圖表中的數據流
並確保SPC由客戶端正確生成

00:23:50.531 --> 00:23:55.235 
它被傳送到服務器
您的服務器能正確無誤處理該密鑰請求

00:23:55.502 --> 00:23:57.771 
您的服務器在數據庫中查找正確的密鑰

00:23:58.172 --> 00:24:02.142 
而且服務器能夠將內容密鑰
封裝爲內容密鑰響應

00:24:02.209 --> 00:24:06.880 
而且客戶端能夠正確無誤地
處理那一響應

00:24:08.015 --> 00:24:12.152 
既然我們已經考查了
在Apple生態系統內

00:24:12.219 --> 00:24:15.055 
消費FPS內容的各種方式

00:24:15.122 --> 00:24:17.524 
我想把舞臺還給羅哲斯
讓他爲這節講座做一個總結

00:24:17.624 --> 00:24:18.926 
非常感謝大家爲此付出的時間

00:24:25.966 --> 00:24:27.067 
非常感謝謝詹保羅 法索裏

00:24:27.501 --> 00:24:29.236 
那麼讓我們在這裏快速地總結一下

00:24:30.137 --> 00:24:33.874 
面向HLS的FPS

00:24:34.107 --> 00:24:40.848 
爲您提供業內頗具優勢的
HLS內容保護工具

00:24:42.082 --> 00:24:48.355 
您在iOS上 Apple TV上
以及在OS X上都能使用它

00:24:48.689 --> 00:24:53.627 
自從iOS 6就開始提供了
因此已有相當程度的兼容性

00:24:54.061 --> 00:24:56.797 
在Apple TV上也是如此

00:24:57.231 --> 00:24:58.866 
OS X仍較新

00:24:58.932 --> 00:25:00.868 
您可以在之後的實驗室活動中
跟我們聊聊

00:25:00.934 --> 00:25:03.804 
我們將向您和盤托出
您可以把它用在什麼地方

00:25:05.239 --> 00:25:07.341 
它已被深度集成到OS內部

00:25:07.441 --> 00:25:10.677 
意味着它能夠向下兼容到極低的版本

00:25:10.744 --> 00:25:12.246 
而且我們也儘可能確保其安全性

00:25:12.446 --> 00:25:14.882 
它的電源效率也達到了
我們能夠達到的極致

00:25:15.215 --> 00:25:18.085 
而且它有極佳的電池壽命
以及高度的安全性

00:25:19.052 --> 00:25:22.990 
而且它支持我們所有生態系統特性

00:25:23.357 --> 00:25:28.061 
比如AirPlay
HDCP HTML5

00:25:28.128 --> 00:25:32.566 
而且隨着不斷推出新特性
我們將持續改進它

00:25:36.069 --> 00:25:37.204 
那麼下一步是什麼呢？

00:25:38.338 --> 00:25:39.773 
第一站是在

00:25:40.174 --> 00:25:43.977 
developer.apple.com
上最新的FPS門戶

00:25:44.044 --> 00:25:48.415 
它現在就在運轉中
所以您可以去那裏看看

00:25:48.482 --> 00:25:53.921 
而且您還可以從門戶下載SDK
您可以查看概述文件

00:25:53.987 --> 00:25:58.759 
它會讓您對FPS的細節
有一點更深入的見解

00:25:59.259 --> 00:26:04.631 
而且通過那個站點
您也可以申請生產目的的開發者證書

00:26:04.698 --> 00:26:08.769 
它們對實現iOS設備或Safari

00:26:09.036 --> 00:26:12.539 
上的來回播放是必要的

00:26:15.742 --> 00:26:22.149 
我應該提到的下一件事情
在那個站點 在登錄頁上

00:26:22.516 --> 00:26:27.788 
你們中間的某些人
可能並沒有一個現成的後端

00:26:28.155 --> 00:26:34.261 
或者一想到將FPS集成到後端
就被這個想法嚇到了

00:26:34.661 --> 00:26:38.565 
那麼在那個登錄頁面上
我們有一個小小的清單

00:26:38.866 --> 00:26:44.004 
列出了我們的集成合作夥伴
像Irdeto 像Adobe

00:26:44.571 --> 00:26:49.109 
它們已經爲希望使用FPS

00:26:49.176 --> 00:26:54.081 
保護HLS內容的朋友
建立了一些支持

00:26:55.282 --> 00:26:58.051 
我建議您也查看一下那些合作伙伴

00:26:58.118 --> 00:27:02.789 
如果您覺得在FPS設置
及如何使其爲您工作方面

00:27:03.290 --> 00:27:04.124 
一點幫助的話

00:27:04.525 --> 00:27:06.426 
我覺得這是很容易做的

00:27:06.493 --> 00:27:09.029 
但並不是每個人都是業內人士

00:27:09.463 --> 00:27:11.265 
因此如果您需要的話
我們會爲您提供幫助

00:27:12.099 --> 00:27:18.272 
此外
如果您想讓HLS和FPS開始工作

00:27:18.605 --> 00:27:23.410 
但是感覺仍然存在問題
或者您已經嘗試過且遇到了一些問題

00:27:23.777 --> 00:27:25.679 
如果您不是在WWDC上

00:27:25.979 --> 00:27:29.950 
那麼對您來說最佳的第一站
就是我們的開發者論壇

00:27:30.117 --> 00:27:33.453 
而且我們實際上
已經建立了目前處於測試階段

00:27:33.754 --> 00:27:37.824 
但是我們已建立了一個新的論壇
它是專門面向FPS的

00:27:38.225 --> 00:27:41.228 
因此請查看一下這個論壇

00:27:41.361 --> 00:27:44.131 
如果您遇到了困難
或者是有什麼問題

00:27:44.398 --> 00:27:48.836 
很可能其他人也有
同樣的問題 同樣的困難

00:27:49.102 --> 00:27:51.438 
而你可能通過查看論壇
就能找到答案

00:27:52.840 --> 00:27:54.374 
如果那樣做失敗的話

00:27:54.441 --> 00:27:57.411 
還有您的非常友好的社區
以及開發者技術支持代表

00:27:57.477 --> 00:27:59.780 
將樂於爲您提供幫助且收費低廉

00:28:01.615 --> 00:28:02.616 
我想就是這樣了

00:28:03.884 --> 00:28:05.052 
再次感謝您的光臨！

00:28:05.352 --> 00:28:06.820 
希望您在大會期間開心！