Cocoa最新内容
下午好
欢迎参加《Cocoa最新内容》讲座
我是阿里•厄泽尔
我是来介绍今年Cocoa新增了什么内容
主要在三方面：
SwiftificaitonAppKit和Foundation
我们有许多学习内容大家一起来深入研究吧
Swiftification 是指刚完成的API增强版
在多个框架之间支持Swift语言
这些改进同时完善了Objective-C API功能
要知道 Swift语言的功能是
更准确表达API特性
例如可以声明这是个数组
子视图属性是NSView数组
但不仅仅是个数组
还可以声明System FontOf Size方法
返回到NSFont而且永远不会返回空
例如在Image ForResource方法中　
NSBundle可以返回零值空因为它被声明
作为可选的NSImage
我们在Objective-C启动这些功能
具备通用列的为空性
我会简要介绍这两方面内容
接着再做几处调整
让我们的Objective-C和Swift API效果更好
我们将这些用于许多框架的API中
不仅是AppKit和Foundation
这样不仅可以更好地接触到Swift语言中的API
而且会让API更为清晰
还能提供编译时间类型检查功能
这一点当然很重要
为空性是指值能否为零
若是使用Swift语言X v10或iOS 8 SDK
大家已经了解Swift API具有适当的为空性
和可选的声明内容
我们已经管理过手工端数据
以及端文件这方面的内容
在X v11和iOS 9中我们将这种能力赋予了Objective-C
并有了若干新的关键词这些都加在了Objective-C上
非零表示永远不为零值可为零表示可以为零值
可重置零表示属性可以设为零值
不过不会返回归零值
马上会给出一个例子
最后一项也很重要就是Null Unspecified
也就是未指定的意思
这个用于不支持的内容
或未经审查的内容
由于API大部分是非零值的状态
我们还有这样两种声明：
Assume NonnullBegin and End
假设首尾为零中间即为我们的页眉文件
这样 非零值声明就没有必要
继续存在了
非零就没必要了
我们在API上还有另外的声明
我们建议你在页眉文件中这样使用
如果你有很多自己的页眉文件
来看部分实例看看这会怎样影响API
你会看到NSColorWell的颜色属性
我们没有发布任何声明那它就该是非零值
在Swift语言中作为非可选值
色彩属性
另外一方面NSImageView的图像属性
是可以为零值也就是说可以设为零值
在Swift语言中可以作为可选值
最后声明的是NSMenu的字体属性
是可重置零这就会成为
隐式解析可选值
在本例中 这说明我们可以将值设为零
不过它永远不会返回零值归零
如果从来都不把它设为零那么NSMenu就会
恢复系统已有的默认字体
因此 永远不会返回零值归零
存在为空性 你可能会看到一些建造时间警告
我来给大家看一个例子
如果你有这样的代码设置颜色属性
ColorWell为零编译器现在就会给出警告
因为我们做过声明这个值是非零
这非常好 因为就会成为如果你有这个代码
并且经过运行就应该提出一个
参数断言才对
这种情况下你会收到有关
编译器的警告
非常好
你也许知道 一般而言在我们的API中
零不是有效目标值
NSString NSArrayNSDictionary等等很容易
表达空值接受或归零的API
应该把零作为特殊情况
记录下来
我从API中给出几个例子来
如果将NSTextView目标背景色设为零
表示不得有背景颜色
在许多API的零区域设置
都表示未经区域设置处理
因此 可以确定一个区域设置
但是如果确定为零则表示未经区域设置处理
再来谈谈泛型
泛型正如听上去那样是个轻量级的
参数化类型我们将之加到Objective-C上
这对具体元素种类集合效果很好
这里是个NSSearchField方面的例子
NSSearchField的Recent Search属性
是这样声明的X v10
Recent Searches这一名称并不十分清晰
其中包括什么内容？
字符串？URL?
搜索目标是什么？
通过X v11 SDK我们可以进行澄清
这里是NSString数组
Swift声明就是从任何目标数组
到任何字符串数组
我们采取的方法就是从Foundation中取得NSArray
在加上Object Type数据等等之类
我们把这个目标类型适用于所有API
适当的API以往都是获取或恢复ID
诸如索引目标包括目标等等
还有许多其他的API这都适用于NSArray
有了这样的代码连同Recent Searches
可以说你是有这样的代码
Recent Searches包括目标 部分URL
我们在传递NSURL
编译器现在就会给出警告你在传递URL
这种方式可能会出现字符串数组
这里非常棒的是这个代码永远不会出问题
或是出现崩溃因为URL从来不会
在之前被发现
编译器在告诉你编码中存在潜在的bug
我们在Foundation中增加了泛型支持
不仅是对NSArray
而是对所有其他集合NSEnumerator也包括在内
严格来讲 当然甚至不止是集合
将之适用于非集合也同样可行
现在连同泛型一起也可以通过不同的声明
使用这些按照自己的分类
如果你拿到RecentSearches的结果 并将之
赋予自己的属性那就可以继续 并且声明
这是NSArray ofNSString 可以将该类型
通过自己的代码进行传播
你可以声明自己的API属性
这里是文件NSS数组
是什么？
字符串还是URL?
可以更明确些
将通用列适用于自定义集合
如果有任何这样的集合甚至是在基础集合中
有你的自定义类别
例如NSArray的类别
你可以直接进入添加就在自己的代码中即可
这些泛型通用列也同样适用于类别
现在又有一个功能加在了Objective-C上
我们来讲解一下为什么需要这么做
这就是子视图声明在
X v10中的模样
这是我们第一次尝试应用泛型
子视图改变为NSArray of NSView
那么代码就是这样即把数组之外的元素
赋值给NSButton
这就轮到编译器着急了
编译器总是替我们担心很是操心
它会发出警告
为什么？因为我们在把外明显声明属于NSView的内容
赋值给了NSView的子类
难怪编辑器会有所担心了
但是这类代码我们使用得很多
而且还常常有效
因此 添加了这类关键字并且将
子视图属性的声明改为这类NSArray of NSViews的
得出的就是...
谢谢
...感谢大家没注意这边栏目下的内容
这是说 调用者可以访问
数组元素如具体类的例子
或者是说子类的例子也可
现在来看 效果可以
注意这类编译时功能
和我在这里谈到的大多数其他内容一样
并没有改变运行时间代码
例如 并未检查运行时间类型
有些时候 我们希望调用者可以考虑一下
元素的情况再去访问它们
我们将在API中做少量使用
并推荐大家也这么做
当调用者可以安全使用时它们就应该能用了
假设一下
如果你希望调用者审慎行事
或是进行运行时间查询那就别这么用
举例来说NSImage的
Representations法就是这样
它返还成NSImage数组表示法
它经常会被细分成子类而且几乎总是如此
不过我们不会在这里用到这类
因为这类表示法并非总是能够
具有可预见性实际上
可能会在应用运行时间内在OS发布期间
发生改变
最好是让调用者在这里多加小心
进行运行时间检查
我们在来谈谈错误处理
昨天大家听到了Swift 2具备神奇的
错误处理功能
对于这种在NSData上写入URL选项的错误方法
具体意思就是在Swift里的样子
Boolean回归值不见了现在非常明显
错误可以参考NSError参数
也不见了 因为是被抛出语句所捕捉
这类代码就是需要处理的
正如你可以在捕捉语句中所见
可以捕捉到错误如果是可以自动
被捕获或是由你来发出声明
你可以声明不同的捕捉语句
这也完全可以
非常好 直截了当
现在还有一点
注意这里的所有术语抛出 异常捕捉
等等 无外乎就是这些
对Objective-C而言
我们也不会特殊对待
我们实际是在返回错误通过这样的堆栈
妥善解决问题就这么处理NSErrors
实际上 NSError指南还适用于
Swift错误处理
使用NSErrors和Swift错误处理应对运行时间问题
准备给用户展示的错误或是需要处理
运行时间 如文件未能找到等等
我们继续使用例外或Swift断言
处理编程问题如界外索引数组
当然最后一类错误是
不可能被捕捉到的
还有一个Swiftification项叫做清理
你们可能是该走了我们还有许多名称可以列举
从很久以前开始我们用公共后缀
而不是公共前缀在部分情况中
我们做了修改 不是全部有了公共前缀
也就是说
在Swift语言中会有更好的名称
不是按照点左边文本对齐而是改成了
dot.left格式
这样的例子还有许多
注意很多情况下我们实际上不支持
旧名称 因此你的源文件将会继续编译
但是可以改为新名称重写编码即可
这类还有很多
这样我们就可以来谈AppKit
有许多AppKit方面的话题我都很喜欢
来聊聊先来谈一部分
说明一点：从这里我会更多通过Swift
介绍API和代码样本
如果你对Swift还不是很习惯
也不必担心因为我提到的代码
不会那么难
毕竟 我不过是个经理
需要注意的是...
这一点非常重要
这些API在Objective-C和Swift中均可得到
那么 我们就不是只给大家展示仅适用于
Objective-C或Swift的东西
无论是使用哪种语言均可以适用
要知道 新的Force Touch触摸板使用压力感应的同时
也用到了触觉反馈
这就为更多有趣应用带来了可能
来看部分实例
例如这里在部分文字上使用ForceClick
可以实现查找或是自动生成
日历活动
这种情况下通过按压
快进按钮就可以让影片
快进速度加快
这里通过划细线或粗线进行点压
就可以签上自己的名字或是在标记中写写画画
最后 在这种情况下把目标移到程序
比如Xcode的界面把开发程序或绘图程序
作为对齐目标就会得到触感反馈
现在还有部分Force TouchAPI在 X v10.3中出现
有人可能见过
首先 用加速器控制API
这些API诠释不同压力可以用于创建
类似快进按钮或是在
类似地图应用中生成放大按钮
还可以在NSButton上在NSSegmentedControl里
设置加速器控制
如果希望再玩的高深一些
我们可以提供一个事件新的压力事件类型
与 NSResponder和手势识别等
对应方式相匹配也同样可行
通过事件实现Pressure Change
可以自己来诠释压力事件
在X v11当中我们引入了诸多新类型
一个是压力配置分类
你来设置压力配置通过视图
或手势识别
表明触摸板该如何反应
一般来说为用户提供的触感反馈
将取决于
所确定的压力配置
还有另外两个分类触感反馈管理器
和对齐反馈过滤器允许你对此类
提供给用户的触感反馈进行定制化处理
很多人可能都用过弹簧载荷
就是说拖动一下并且在目标附近
围绕时 目标会向你开放
在Finder中可以这么使用
通过Force Click
可以肯定的是只需用力点击目标
弹簧载荷就会立即启动
我们还有新的API让弹簧载荷更加便捷
就是个简单的Boolean属性NSButton和
NSSegmentedControl就启用了弹簧载荷
可以感知附近的动作或是ForceClick给出的指示
非常直观
如果这并不能完全满足需求我们还有新的协议
NSSpringLoadingDestination通过它即可
在任意目标上实现弹簧载荷
例如 Finder的那个例子就很适合这里
手指滑动即可删除大家对这都很熟悉
昨天在主旨演讲中就见过类似的东西
iOS里这种东西也很常见可以在桌面视图
例如邮箱信息上左右滑动
标识信息是否读过或是否删除等等
我们现在也有这样的API也是在EI Capitan中
是NSTableView的委托方式
Row Action是用于Row
只需返回到NSTableView行处理数组
本类的例子只是声明这些项和行
应该怎样拖动当用户选择
当用户选择通过代码块处理时
最后是代码块
这些话题简单讲一下即可
有个讲座《采用触控板新功能》
是周四上午十点其中会介绍
这类话题的更多详细内容
全屏部分昨天已经介绍过了
全屏可以将分散注意的因素去除 便于集中精力
处理单项任务就像现在这样
通过在全屏分割视图可以关注一个任务
但可以打开其他窗口
例如 你在使用Xcode 再启用Safari
查询部分文档或其他论坛
可以想象把信息放到Xcode旁边
因为你想和一个朋友聊聊
正在编的代码
这叫做叠加窗口放在
分割视图中
叠加自动会用于多个窗口的情况
叠加可以自动适用于可调整窗口的情况
也就是说 你的应用
应用中的窗口
将自动在全屏状态彼此叠加
你这边无需做任何调整
无论是窗口是可以全屏还是不可
不过有个API可以选择出入叠加状态
这是NSWindow的NSWindow集合行为
选项的一部分
例如 你有个不可调整的窗口
而你以为是可以进行叠加
可以使用Allowd Tiling选项
若你有一个非社交窗口
而且不希望被叠加
可是设置Disallows Tiling
我不清楚那个例子不过它就在那里
这些是全屏的主要设置
这些已经在X v7中都有
很重要的是要注意全屏主要是这样
需要确定需要全屏的窗口
注意还有许多选择性加入
因为你需要了解窗口在全屏的整个
屏幕空间如何反应
还有一个可选择功能可以考虑
怎样让你的窗口在全屏工作
这一项仍可以选择
当然也可以在Xcode属性检查器中设置
当然可以是设置
叠加或窗口是否该全屏之类
我说过 很多窗口都可以自动叠加
不过AppKit可以查看
确定窗口是否可以在同一个屏幕共存
设想你的屏幕相对较小
还有两个很大的窗口你希望能把它们叠加
如果窗口无法缩小到足够小
AppKit将无法实现叠加窗口
我希望你想想怎样让窗口足够小
如何才能灵活处理使其
能在更小的空间叠加分割视图
为实现这一点我们有一些API
例如 分割视图项现在是侧边栏的动作
侧边栏变小并消失
这样就可以实现重叠
也可以有适当的震动
NSStackView可以自动查出隐藏的视图
帮你创建类似NSToolbar的体验
适用于定制化视图可以把
拖到边缘的项
放入菜单诸如此类 还有许多
你可以去听听
《改善全屏视窗体验》的讲座
时间是周四下午
要知道Auto Layout也很重要
我们做了部分重要调整
极大提高了Auto Layout的表现
首先是堆栈视图
堆栈视图是个很重要的分类
在满足Auto Layout需求时应该首先想到这个
如果你可以了解堆栈视图中
可以做什么
而不是直接使用种种约束会好得多
这是很大程度上的抽象非常强大
关于堆栈视图的好消息是在iOS上也可以使用
因为UI堆栈视图和在API的效果不相上下
这和我们一直以来的努力相一致
即在不同平台间实现奇偶校验效果
这就是具体的一个实例
第二 现在这方面比以往做得更好
我已经说过有个分离功能
还有几个新视图分布选项
具备这个属性叫做分布
这里有一个值是重力区
在介绍X v9的第一天起大家就见过
堆栈视图的选项
我们已经加上其他设置
这些就不必继续解释了
给大家看一个短视频
有6个堆栈视图构成这些设置
我重新调整窗口稍大一些
小一些 再大些
你们看 还是有些强大的功能的
比如设定等大等距这些
等等 希望能够满足你们的需要
堆栈视图可以任意放置
方便设置布局
NSLayoutAnchor是个新类别可以提供
边或尺寸的精确表示法
比如 你有两个视图
打算创建二者间的约束
这就是必须编写的代码
有着布局锚点可以编写这个代码
注意 这两项基本上是布局锚点
是指那些视图的边缘
结果不仅更短更好看
而且还提供了更多编辑时间类型检查
非常好
NSLayout Guide 是又一个新分类
如果你在做这类事情
创建虚拟视图实现视图间
等距效果 那么可以试试创建布局指南
这是个轻量级对象占据了视图的位置
不过其实它的量级更轻可以参与
Auto Layout而不会生成视图
我们已经了解过集合视图
要知道 UICollectionView 也有过几个
版本了
有着X v11 我们将NSCollectionView
iOS版本进行奇偶校验都是保持重要功能
用于桌面 例如拖拽和批量选择
现在是新的集合视图中部分功能
有些功能如异构项
选择性分组可定制布局
我来给大家看个短视频是样本应用
会有很多图像显示出来
我首先依照页眉和页脚进行分组 会用到
部分定制布局是本款app所提供
来看app的实际应用了解具体功能
以及如何用于自己的应用中《集合视图最新内容》
周四下午4:30会有介绍
在文本方面我们的改动很多
首先是新的系统UI字体
新系统的字体是这样San Francisco
要知道　这和iOS和watchOS上的字体一样
字体是自动提供应用的
在 El Capitan的X v11 运行你的应用
就会得到这个字体
不过可能你做了什么
阻止了这项功能
如果看到这个字体这是在X v10中推出的
还有些内容在继续检查一下是否是你所需
确保你是在使用SanFrancisco这种字体
如果在用这种字体我们是在X v0当中推出
还会有更多内容继续
最后 如果你在使用这款字体...
...那么会有很多工作要做
稍等一下
这就是我们不再使用的Mac OS 9字体
这是在API可以使用的NSFont字体
确保自己用的是最新版本的系统字体
还有系统字体大小等等
这些字体这些API
我们用了很久
可以通过Xcode属性检查器设置系统字体
非常简单会有弹出窗口
选择适当的系统字体
用于自己的应用
我们还有一款新API可用于不同粗细的系统字体
如果设计师让你使用不同粗细字体
现在就可以用这个API调整系统字体
系统字体大小和粗细
有预设的9种不同粗细
我只给大家看其中三种
从超细到黑体都有
常规设置是系统字体大小
默认值
我们还有一款API单距系统字体大小粗细
我给大家看看为什么这东西有用
如果调用应用中的字体大小API
链接是X v11 SDK
在写几个数字就是这个效果
对字体很敏感的眼睛估计一下子就会感到不同
这些数字不是定距
宽度都不同
这就很奇怪了因为传统的系统字体
一般都是等宽数字
要确保表格数字都要井井有条
或是UI文本中数字变化时不会拧成一团
因为数字是不断变化的
不过现在 如果你的app
连在 X v11上就会得到这样的系统字体
如果必须要定距字体
那么在使用这个API时 就要放弃
等宽数字
从活版印刷角度来看效果不理想 不过问题解决了
效果很是不同
现在是按比例也是固定宽度了
这就是给大家的工具
大家还可以听到更多API方面的内容
《最新系统字体介绍》
讲座时间 周五下午2:30
我也提到了新款API在科技系统有新款API
可以实现新功能以及对TextKit和iOS进行奇偶校验
这里还有很多项
我只介绍其中两三种
首先是路径排除
这种功能可以很容易安排路径
在目标周围摆好文字 就像这蝴蝶
非常简单
还有一个是文本域的两个属性：最大线条数
特别适用于Auto Layout
或是允许默认缩紧截断
这可以确定文字域
内容是否应该缩紧然后再真正将之截断
以前有过控制方法但是现在是
使用Boolean属性控制
还有很多调整变化以及部分亮点
那么关于AppKit部分
最后讲一点视觉原子性
大家可能会奇怪视觉原子性是什么
是山吗？
这和Half Dome有什么关系?
我给大家看个短片解释我所说的
视觉原子性或缺乏视觉原子性是什么意思
两次看到打开面板
第一次没问题 还可以
第二次 你们自己想
除非你们什么都看不到否则都明白我的意思
我给大家慢动作播放
阴影部分面板面板其他部分
这就是打开面板是在约塞米蒂
打开面板很粗糙因为是多项进程
在带动不过这不是借口
这样的UI让用户感觉仿佛是一次
走一步 一次走一帧不应该是
这样的视觉步骤的
这就是我所说的视觉原子性的意思
需要的时候一步到位
你们当中视窗 视图
还有Core Animation层次都很清晰
要知道实现视觉原子性并非
都那么简单
这些是API大家不用仔细
看明细这不是考试
这些就是完成这项任务所需要的API
但是不一定要一起工作才行
在X v11中我们解决了问题
所以可以用NSAnimationContex
实现视觉原子性
可以调用Begin Grouping或End Grouping
或类似功能
运行Animation Group周围是一系列
你在做的独立画作就像这里这样
这就可以实现视觉原子性
除此之外
我们不鼓励使用DisableScreen Updates
和Enable ScreenUpdates
以及Disable Screenuntil Flush
并非是不支持只是不再推荐使用
应该没必要
这样 我们可以继续介绍Foundation
关于Foundation可以讲的也很多
首先是管理撤销
用过Swift中管理撤销的都知道管理撤销
API在Swift中并不太好用
API是这个样子
第一个有个选择器部分情况才会管用
第二个是有指示
NSIndication inObjective-C当然相当棒
还是Swift里面那些花哨的种类 它不太清楚
所以我们加上了基于代码块的撤销
这就是在Objective-C中的样子
在Swift中是这个样子
你们看这有个目标论证
也是个代码块基本上就是执行
刚做过的撤销应用
目标方式的不同论证大家不用
去参考代码块的目标
以避免循环保留
在Swift声明中也用到泛型类型
我会告诉大家具体是怎么工作的
这是个例子
我们有个类别名为Colorful Shape
还有个属性名为Color
我们为这个属性加上Did Set属性观察器
这不过是可以实现撤销的多种方式之一
还可以通过其他方式撤销不过我们是通过
Did Set属性完成
这里是调用目标注册撤销
这里是实际上执行撤销应用的代码
针对我刚做过的事情
注意这里多亏对目标的注册撤销中用了泛型
这些都发挥了作用
目标被自动识别为是彩色形状
这要归功于注册撤销栏的
自参考
你不必将目标转化为彩色形状
NSCoder现在就可以处理错误
用过NSCoders的人们比如NSKeyedArchiver之类
要知道并没有对这些东西的错误论证
我们已经添加了外显错误处理
这类方式包括DecodeObject for Key
Decode Object ofClasses for Key
都有不同版本
都可以在实际中返还错误将错误抛入Swift当中
这些叫做Decode Top Level
Object for Key
以及Decode TopLevel
Object ofClasses for Key
注意它们抛出声明表示了它们在返回还错误
还要注意它们返回了可选目标
因为空返回实际上是有效返回
这表明对象并不在档案中
注意这些名为
Decode Top LevelObject for Key
我们有意在未归档的
根对象中将其放在顶层
我们不想在你实施代码期间
调用这些
请注意 这里只有两种方式
我们还有两三种方式可以适用
所有的解码对象类型方式
现在由NSError提供值我们以此为模型
通过这种简单的方式可以生成NSError对象
相当简单直接 不过
注意 它不可向用户呈现
如果用户见过了
那就是这个样子
不太好你们其实是想给他们看看
是否曾给用户见过
即便不给用户提供要知道
除错器中 有这类东西也会很有帮助
与得到42号错误相反
因此编写的代码是类似这样
因此要明确各个键的值如果想要给用户
出示 需要对之进行本地化
因此这是一大堆代码
你就可以永远地创建方式
代码不是问题编写代码是我们的工作
对 我们就是靠这个挣钱的不过这不是问题
问题是所有这些都是发生在
出现错误的时候即使错误的消费端
和错误没有任何关系也是如此
因此从性能考虑这是浪费
因此我们加入了这种功能
可以按需创建并返回所需值
我们有这个方式为域名提供方的
用户信息值提供方进行设置
你基本上在应用中为NSError
明确域名并提供提供方
即可以将在用户信息字典中丢失的任何键值
返回的代码块
因此 会按需惰性生成
你可以回去使用这个漂亮的短小代码
来生成错误用户信息
会动态填写
你也许熟悉NSProgress
这是报告进度的对象
还有个不错的功能
将在多个操作类型层次中隐形记录进度
并且它会作为单独数字
呈现给用户
相当不错但是这是隐形的
作为隐形你可能会
遇到一些问题
我们介绍管理进度报告的
线性模式
包括两部分一个是直接向
操作类型层次添加并去除子进度对象
第二个就是这个协议
可以让你直接声明对象进度
例如 如有NSOperation子类
这可以实现部分一步操作要知道 它会开始和结束
是这个进度属性不错的候选
可以实现选择外显进度报告
NSProgress也可以从头开始
以前是可以停顿我们有加入第二部分
NSNotificationCenter现在可以
自动解除注册分配的观察
这就是你们必须把自己加成
观察者需要编写的内容
这是需要把自己
作为观察者删除所需编写的代码
如果想把自己作为观察者删除
作为观察者删除所需编写的代码
如果不然 你会被自动取消注册
相当棒这样很好
这个类别名称 就是Toby 昨天在
联盟会议上不敢提到的
NSFirstNameComponentsFormatter
规则是 如果它没有长到可以在
幻灯片标题上封装起来那它并不算太长
那么NSFirstNameComponentsFomatter
它可以让名称的格式得以恰当本地化
它又和其他我们过去几年加入的格式器
联合了起来 比如日期部件格式器
字节数格式器长度格式器等等
它还为几种不同形式提供了样式
让我举一个简单的例子
假设你创建了一个基于人名的实体组件 它有名称的
几部分 你指定你有的名称部分
但是还剩很多 比如说在这里 我们指定其中三个
然后 你在格式器中创建一个人名 然后把它
格式化
取决于你你给的样式
你会得到不同形式的名称 如长的
默认的、短的等等
请注意 如果你需要短的但在其它语言中
你可能会得到一个形式完全不同的名称 这个具体取决于
这种语言的本地化规则
不要对你会从这种API得到的
名称的类别做出假设
这个 API 的目的主要的目的之一就是
让你从编写全球通用
应用的复杂工作中解放出来
NSString 有新的 API其可以帮助你编写全球通用
国际化的应用
这将促进有条件的引用
不论其是否为技术词语其应由引用包围
而其规则会根据语言不同而变化
更为简单的本地化情况用于变更和搜索的 API
音译API它们之前都在 CFString 中
现在它们在 NSString 中也能更好地协助
自适应字符串和用户界面表达
在你的字符串文件中你可以提供多个形式
多种长度并根据你在
你在用户界面上所剩空间多少来选择合适的
你会在国际化新特性讲座中了解到关于名称部件格式器
和所有这些协助方法的具体信息
当然还有更多内容它在星期五上午9点开始
我再谈谈关于热状况的情况
这些 API 是在 Xv10.3 中引入的 也是我们
动感新 MacBook 出来之刻当然 你们也知道
没有多少人真的喜欢这个新东西
而事实上它是一个很好的 API 案例研究
请注意 虽然此 API和新 MacBook 同时引入
它也适用于我们的其它机器
而且通常都是可用并能正常运作的
它不仅仅适用于MacBook
此 API 使用属性捕获
一种在 NSProcessInfo上的热状况属性
它有四个值：象征性普通、 严重 、极其严重
每当值更改时你都会收到通知
如果值为严重那么风扇是以
最高速度运作当然 这是假设你的电脑有风扇
你可以想象如果你没有风扇那会发生什么事情
严重通常是要你采取某些行动的时候
例如 你可能在做自定义的动画
而且帧数达到 60 FIPS这时你要考虑
减少你的帧数到30 FIPS
这就是 NSScrollView会自动为你做的事情
这样一来 你就不必担心有关NSScrollView 的情况
假设你正在应用程序中使用高解析度的材质
而且你收到一个严重的热状态的提示
也许你需要使用低解析度的材质
此款 API 在你需要它时很有帮助 但
但要注意 此款 API 是反应性的 并不是主动的
此 API 让系统提示你 告诉你
目前的困难 然后你需要采取行动 当然
你采取的行动不能反而
增加对系统的负载
我们有很多其它主动 API
我们已在最新的讲座中介绍
这些类型的 API会告诉系统
你在做什么 然后系统会基于你
目前的操作优化你的活动和任务
例如 计时器公差
处理信息活动API 并
使用 NSURLSession在后台进行下载
设置服务质量 等等
这些 API 不仅可以允许高效操作
但它们还能够引导合适的热行为
它们可以带来更长的电池使用寿命 并让你的系统冷却
无论是表面上的降温还是内部降温
最后 我简单地提及下 CoreData因为讲座剩下时间不多了
Core Data中有很多强大功能唯一约束
批量删除和其他 API 增强功能
这就是我要说的
当然 这不算一个新特性讲座 如果
如果我没有提到很多新事物
这些都是许多其他我没时间提到的主题
你应该可以在发布说明中阅读到
它甚至没有包括令人惊讶的新技术
比如 Metal 或者GameplayKit
总的来说 我们有很多泛型通用 API 改进
在 Swiftification各个层面上都有
此外 我们有很多强大的功能和增强功能
看看这些材料 想想如何采用它们
如果你有任何问题就来我们的实验室来讨论吧
最后 我再总结下要点
AppKit和Foundation发布
说明已经可以从
developer.apple.com.osx上获取
发布说明是为了抛砖引玉所以它是一个很好的来源
感谢你们今天到场
会议后好好休息吧