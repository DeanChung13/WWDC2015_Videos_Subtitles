《網絡與NSURL會話》
早上好！
感謝您來到《網絡與NSURL會話》會議
我是盧克·卡斯我是一個CF網絡組的工程師
今天早上我爲與會的各位羅列了一些很棒的東西
首先我們要講一些應用程序傳輸安全問題
接着我們會講在NSURL會話中添加了哪些新的協議
週一我們看到了WatchOS的發佈
我們將會介紹爲WatchOS添加的NSURL會話功能
之後我們會梳理一下API有哪些變化
以及我們在NSURL會話中添加了哪些新功能
首先我想要講一下NSURL會話和HTTP協議的背景
NSURL會話是一個網絡API
主要用於從網站下載內容或者HTTP內容
它包含很多委託方法
可以用來認證或者處理一些其他的重要事情
NSURL會話有一個非常強大的功能
那就是它允許你的程序
在沒有後臺下載API的情況下做網絡層任務
如果你對NSURL會話不熟悉的話
建議你可以回顧一下
幾年前的WWDC會議中對NSURL會話的介紹
現在讓我們討論一下超文本傳輸協議
這是一個非常有名的協議你們中的很多人可能都很熟悉
基本上其核心就是你向服務器發送請求
然後你會拉回一個數據包作爲迴應
現在HTTP其本身
你們中間有些人可能知道發送的是明碼所以其從根本上來講就不安全
在今天的網絡環境中
有很多攻擊團體追蹤你的APP數據並將其發佈到網絡上
曾經有一段時間單獨使用明碼HTTP這是完全合理的
但是這段時間已經過去
現在我們所有人都是幸運的
這個問題在多年以前就被解決
就是HTTPS
但HTTPS本質上是HTTPS的上一層協議
屬於傳輸層安全協議
傳輸層安全協議會通過公鑰密碼學方式
進行一個多點的信號交換之後
會創建一個安全的連接
這種連接的安全性是基於三個屬性來講
第一 從你的APP發出
並在網絡上傳輸的數據是加密過的所以其不可讀
第二 其提供了消息完整性參數
所以消息在檢測之前是不可以修改的
最後第三點 它支持身份驗證
所以你可以驗證到底是誰在和你會話
現在NSURL會話有非常好的HTTPS嵌入性支持
通常在你的客戶端代碼中
這就像使用HTTPS代替HTTP一樣簡單
現在請注意需要一些額外的服務器支持
但HTTPS是大多數服務器供應商都支持的
還請記住
大多數數據都應該被標記爲敏感數據
那是因爲即使你認爲
你在網絡上傳輸的數據並不屬於敏感數據
但是事實上你的客戶可能認爲它是敏感數據
假如你有一個TV流APP
你可能認爲這只是一個電視
你知道嗎？他只是看電視
他或她僅僅是看電視但是對他們來說...
他們事實上並不想讓人們知道他們在看什麼電視
讓我們用這種方式解釋
現在爲什麼說使用HPPTS如此重要？
事實上從本質上來講
你的客戶相信你能夠保證他們的數據和個人隱私
在Apple我們非常想要和你們一起努力
並確保我們能夠建立並維持這種信任關係
所以今天我非常自豪能夠介紹App Transport Security
App Transport Security
是Apple在IOS 9和OS X和EI旗艦版中的一個新功能
從本質上來講其核心是防止用戶的個人隱私數據被意外泄露
現在ATS也加強了NSURL會話的默認方法
可以在默認設置下最重要的增強的方面
就是現在的NSURL會話
它不允許明碼HTTP進行加載
它將只使用HPPTS連接
現在這種連接方式確實是當下最可靠且最好的實現方法
所以ATS對TLS的版本進行了限制
密碼組合 信任證書 證書密鑰的大小等都是被作爲限制條件
現在ATS能很容易地通過應用程序的Info.plist進行配置
這裏有一個例子
事實上我們讓你做的就是聲明你在應用程序中有目的的網絡行爲
核心上來講ATS希望你能描述使用網絡做什麼
我們真心希望你能夠放心你的應用程序安全問題
並且做事情的時候更加信賴這個系統
當網絡交易是安全的時候這些都是最簡單的事情
所以 如果你的程序只使用安全的連接
並且其只使用最佳安全屬性
那麼你就不需要做任何事情來爲你的應用程序配置ATS
因此 如果你在編寫一個新的應用程序這就是我們想要你做的事情
如果你有一個現成的應用程序或者有一段遺留代碼
這就是你應該注意的地方
現在我們明白實際情況可能並不總是這樣
假如你有一個服務器可以遵守這些TLS版本或者密碼套件的新限制
所以我們允許例外情況的出現
事實上你可以通過ATS聲明異常原因
讓我們知道你想使用什麼版本的TLS
或者你也可以選擇正向保密或者其他的選項
我們理解現存的程序可能有不同的限制
假設大多數情況下你都使用安全連接
但是特殊情況下
你可能會使用一些並不支持HTTPS或者最佳實踐的服務器
假如你有一個多媒體服務器
它並不支持HTTPS只支持HTTP
你能夠很方便地用異常來描述這種情況
基本上所有你需要做的事情就是聲明哪些域名需要加載HTTP
NSURL仍然允許明碼加載
現在我們瞭解到你們中一些人可能會支持使用一個通用的網頁瀏覽器
或者一個基於動態用戶輸入加載URL的程序
現在我們已經允許了這種情況
在這種情況下你不可能提前描述的安全連接的種類
所以你可以簡單地選擇聲明允許所有的方法
現在這個允許所有的方法
能夠允許NSURL會話加載任何的HTTP或者HTTPS資源
我相信這是目前互聯網上現有的工具中
一個非常有用的調試工具
所以我們希望
如果你用它做調試可以對顯而易見的原因進行臨時調試
現在即使你就處於這種狀態
你仍然能夠保護特定的服務器和域
如果你的設置的是允許所有
但是如果你有一個用來拉取配置數據和元數據的服務器
並且用ATS來做調試這種情況是個例外
當你對一種例外情況進行允許所有的設置時
只需要簡單地聲明想要保護的域就行了
這樣允許NSURL會話 繼續通過只加載HTTPS或者最優方法
來保護這些資源
現在
從週一開始這個SDK已經發布了
可能有一部分人已經在這個糟糕的時間醒了
僅僅就是想知道ATS是幹什麼用的以及爲什麼你的網絡會加載失敗
我們明白
我們只是想和你一起工作所以才把你叫起來
所以請注意 ATS只有在你構建當前SDK時是活躍的
如果你針對的是之前的版本
ATS規則不適用
NSURL會話會將HTTP資源
或者URL自動轉換成HTTPS
就像我之前說的你們中有人已經對這個開關有所瞭解
我們允許你暫時使用這個功能
來判斷你的程序中新發生的網絡錯誤
是不是因爲ATS
這能夠幫助你將範圍縮小
接下來如果你打開了允許所有的ATS
允許所有開始加載
那麼你就能夠確定問題出在ATS
接下來就是查找你看到的NSURL會話的錯誤
所以你可以試着確定並縮小範圍
到底哪個加載過程失敗了
以及潛在的錯誤是什麼
還有一個很棒的調試工具
是一個被叫做CF網絡診斷的環境變量
如果你將CF網絡診斷設置爲一級
所有失敗的URL開始加載
所有加載失敗的任務都能被確定是URL錯誤
或者是底層TLS錯誤
這樣接下來你能做的就是
查找底層TLS錯誤並確認transport.h的安全性
確定究竟是什麼底層問題
通常是客戶端和服務器端在TLS層的協商失敗
所以現在弄明白這是一個新的API它仍然在發展
所以我們強烈建議你們關注種子筆記和發行說明
請將文件廣播出來這樣方便我們跟蹤你們碰到了什麼問題
幫助你們解決並運行起來
所以我希望這是一個網絡安全的時代
並且我們非常希望能夠與你合作一起來保護客戶的數據安全
再說一遍
如果你正在開發一個新程序請使用HTTPS作爲開頭
並儘可能地使你的服務器運行最優方法
現在如果你使用的是現有的軟件
我們希望你能先把能夠移動的移動到HTTPS
那些你不能夠移動的地方
可以通過使用例外情況和你的Info.plist移動
現在請牢記你的客戶相信你能夠保護好其數據
並且這些數據在任何時候都是敏感的
所以Apple希望與你合作
共同爲你的客戶創造一個更加安全的網絡環境
所以再說一遍
請通過雷達給我們反饋
在這個會之後明天就可以過來實驗室拜訪我們
我們真的非常希望與你一起保護我們客戶的數據
謝謝所有人的到來接下來有請安德魯
他將會講新的協議和NSURL會話
祝你有一個愉快的會議
謝謝 盧克
早上好各位
我叫安德魯
接下來我將介紹NSURL會話中新的協議支持方法
是的NSURL會話支持HTTP/2協議
你的程序可以使用HTTP/2進行通信
並且在適配上非常容易
讓我來演示一次
好的
如果在你的代碼中已經使用了NSURL會話
你自動地就已經是其中的一部分了
在網絡的未來網絡革命中的重大里程碑中
你的程序已經走在了前列
你不需要修改你的源代碼
所有事情都是自動完成的
所以今天我準備講三件事情
爲什麼我們需要一個新協議HTTP/1.1協議有什麼問題
我們將要學習一下HTTP/2最重要的功能
最後我會講一下HTTP/2協議在你的程序中的適配性
爲什麼需要一個新的協議？
我們已經有很多協議用於各種類型的通信
原因是大多數協議都是在很多年前響應那個時代的需要設計出來的
看一下Apple的第一個網站
今天需要的和十五年前看起來是明顯不同的
所以是時候進行一次升級了
HTTP從網絡的最開始就已經存在了
大家都知道它有很多問題
最有名的HTTP的問題是
每一個TCP連接只有一個優先請求
這個問題的解決辦法就是HTTP管道
但是HTTP管道並不適用於所有的服務器或網絡
事實上 大多數桌面主流網頁瀏覽器上它是被禁用的
另一個解決辦法就是給一個主機開多個連接
這樣能夠更快的得到多種資源
綜合其他情況例如文本協議開銷
缺乏頭壓縮
它只是意味着
對客戶端和服務器更高的系統需求和更低的性能
去年我們在NSURL會話中加入了SPDY支持
SPDY是使網絡更快的一種嘗試
它是一種實驗性協議
但是它被選作新版HTTP協議的基礎之一
新協議的標準版本在上個月通過了IETF標準
並正式分配到了一個RFC編號
所以今天就像你已經知道的那樣
NSURL會話擴展支持HTTP/2協議
讓我們看一下
HTTP/1.1和HTTP/2的主要區別
與HTTP/1.1相對
HTTP/2僅支持一臺主機開放一個TCP連接
它是網絡友好的並且對客戶端和主機要更少的系統資源
HTTP/2完全多路複用
這就意味着
一個新的請求不需要等到服務器對前一個請求回覆之後
HTTP/2有請求優先級
所以更多重要的資源可以優先提供給擁有更高權限的客戶端
讓我們看一下
HTTP/2多路複用如何解決隊首阻塞問題
在一個服務器上我們有三個對資源的請求
我們發出第一個請求並得到一個回覆
這之後我們發送第二個請求並得到第二個回覆
對第三個請求也是一樣
現在啓用通道
我們同時發送所有的請求
一個接一個不需要等到收到之前的回覆
但是我們仍然按順序得到了回覆
你能夠看到藍色的圖片是第一個回覆
阻塞了緊隨其後的兩個回覆
通過HTTP/2我們給三個請求賦予不同的優先級
我們仍然在開始的時候同時發送所以的請求
但是我們同時得到了回覆
此外 優先級更高的請求
我得到以及發送給客戶端的速度更快
你可以看到第二個回覆的是中等優先級
並且第三個回覆的是高優先級的請求
到達得比第一個回覆更早即使他們在時間表中更靠後
圖片也不再阻塞他們
這非常棒且對你的程序和性能來說也非常棒
讓我們來繼續對比
HTTP/2是一個二進制協議
這使得數據的處理和解析速度更快
HTTP/1.1不使用頭壓縮
因爲安全漏洞的原因SPDY同樣也不能使用頭壓縮
HTTP/2使用HPACK這是一種更加安全的頭壓縮機制
讓我來介紹一下HPACk
HPACK頭壓縮基於兩個表
一個靜態表一個動態表
靜態表包括最常用的HTTP信息頭並且不可修改
包含在靜態表中的信息頭可以添加到動態表中
表中的信息頭可以通過指針進行引用
例如你可以看到一個簡單的HTTP/1.1請求
突出顯示的部分是要發送到服務器的數據
這裏是一個基於HTTP/2的相同的請求
接下來讓我們將這個請求編碼
僞信息頭 方法 計劃以及路徑
都可以通過靜態表進行引用
主信息頭包括在靜態表中但是並不包含其值
所以要編碼這個請求
我們需要三個字節用來存放第一組三頭
加上一個告訴你我們想要將主信息頭
添加到動態表中的字節
以及主信息頭的值和長度
這就是要發送到服務器
添加了額外開銷的信息頭框架
現在對於第二個請求
你可以看到主信息頭存儲在動態表中
所以對於第二個請求
HTTP/1.1將會一遍又一遍地發送相同的信息頭
但是在HTTP/2中在通常情況下
我們可以通過靜態表和動態表
引用所有的信息頭
我們只需要一個字節來存放一個信息頭
這相當節約帶寬
這隻需要如此少的字節
就能夠使用HTTP/2編碼一個請求或者回覆信息頭
接下來讓我講一下
要爲你的程序適配HTTP/2協議需要做些什麼
其工作量並不大
HTTP/2被無縫集成到了NSURL會話的API中
如果你已經在你的代碼中使用了NSURL會話
你的程序和OS X程序將會自動獲得這種功能
你不需要寫另外的代碼
或者添加其他的結構來啓動它
讓我們來看一下源代碼實例
這段源代碼和你已經在程序中使用的代碼看起來非常相像
可以看到沒有任何不同也沒有新的結構標誌
這樣就可以使用
是的你只需要一個HTTP/2服務器
但是這不是問題
你的應用程序已經準備好了使用HTTP/2協議來進行通信
如果你還沒有部署一個HTTP/2服務器
那麼你的應用程序將會直接使用HTTP/1.1
或者會自動選擇最優的可選的協議用來進行網絡通信
一旦你開始使用支持HTTP/2的網絡服務器
你就不再需要做額外的工作
你的應用程序將會自動使用HTTP/2協議
請記住
NSURL會話只在加密連接上支持HTTP/2協議
這樣你的HTTP/2服務器
需要支持ALPN或者NPN用來進行協議對接
目前在Apple
通過iCloud遠程訪問HomeKit
就是在HomeKit配件和iCloud之間
使用HTTP/2協議進行通信
很多大公司已經開始使用HTTP/2協議了
Google爲其服務也配置了HTTP/2
Twitter也使用了HTTP/2
有非常多的HTTP/2開放資源網絡服務器
最後一些CDN服務提供商也在逐步提供HTTP/2協議支持
我們努力使HTTP/2能夠支持NSURL會話
這樣你們就可以非常容易地配置使用HTTP/2協議
HTTP/2今天在WWDC種子中也是可選的
它無縫集成在NSURL會話API中
並能夠在OS X 10.11和iOS 9中的Safari上使用
謝謝
現在我想邀請丹上臺
丹？
早上好各位
我叫丹
我是一個軟件工程師在蘋果公司CF網絡項目組工作
我想講的第一件事情是
今天已經可以在WatchOS上使用NSURL會話了
通過本週前幾天
與WatchOS 2測試版一起發佈的WatchKit SDK
我很高興能告訴大家
WatchOS完全支持HTTPS加載
這就意味着我們今天已經講的所有的東西
例如App Transport Security和HTTP/2都支持HTTPS
在WatchOS使用NSURL會話
和在其他平臺上使用的主要區別是在後臺運行
事實上我們會選擇所有選項中最好的連接機制
這就意味着在大多數情況下
如果用戶的手錶靠近了配對的iPhone設備
我們會利用他們之間的藍牙連接
通過手機本身的HTTP加載並將結果通過藍牙回傳給手錶
如果帶着手錶的用戶碰巧斷開了或者遠離了他們的手機
手錶將會連接到已知的Wi-Fi網絡這樣我們可以直接使用網絡了
好消息是這些所有的工作都是脫離API進行的
當你在其他平臺上的時候你可以使用API
你不需要關心我們是如何連接的
它就像魔法一樣
就如之前所說 在WatchOS上使用NSURL會話時
只需要關注少數幾個最佳方法和事情即可
首先你應該儘可能的只下載最小的安裝包
這其實是你的程序的功能的要求
請注意 手錶只有一個非常小的屏幕
所以如果你要下載圖片
不需下載在iPhone6 Plus或配有Retina顯示屏的Mac上
顯示的完全分辨率圖片
它的屏幕太小了你可以下載小一點的圖片
另外請記住
手錶比手機或電腦的處理能力要小很多
並且會經常受到帶寬和與你手機的藍牙連接的延遲的限制
所以你並不能夠真正如同在其他平臺上一樣
快速地下載字節到手錶上
所以也請記住這一點
另一個需要注意的是
手錶上的程序運行時間
比iPhone或Mac上的程序運行時間短很多
用戶會受到嚴重的時間限制
如果他想要坐着或者站着並舉起手腕盯着手錶和它互動
所以如果你使用的是默認會話配置或者臨時會話配置
請記住這些網絡傳輸只會在你的程序真正運行的時候進行
所以如果你要發送少量的數據是完全沒問題
例如股票報價或者天氣數據
亦或者社交網絡狀態更新
但是對於任何比較大的內容例如視頻
你會想用後臺上傳或者下載
這樣就能在過程結束時繼續
要了解更多有關後臺上傳下載的信息
我強烈建議你看看前幾年基礎網絡大會上的WWDC會話
接下來我想講一下我們在今年發佈的API中做的修改
我要講的第一件事情是NSURL連接
這個東西我們到現在爲止都還沒有講過
所以今年
我宣佈OS X EI旗艦版及IOS9將放棄使用NSURL連接
讓我們花一點時間來想一下這意味着什麼
放棄使用並不意味着NSURL連接將會被完全放棄
我知道有很多程序都在使用NSURL連接
我們並不會損壞它們
所以它仍然可以運行這些傳輸方法仍然可以使用
但是請記住新功能只會添加到NSURL會話中
我們強烈建議你將現存的NSURL連接代碼
轉換成NSURL會話代碼如果你還沒有轉換的話
如果你正在寫一段新代碼
我們真心希望你只使用NSURL會話而不是NSURL連接
另一件需要注意的事情是
在WatchOS上完全不支持NSURL連接
所以如果你要從WatchKit擴展程序上加載HTTP內容
你只能使用NSURL會話
但如果你還沒有完成那你是幸運的
從NSURL連接到NSURL會話的轉換
會非常簡單
現在我想通過一個例子向你們展示一下
這是NSURL連接的一個簡單使用
<br/> 用來實現一個異步的HTTP請求
它可能和你的程序中經常使用的方法有點相似
現在我們通過HTTPS連接www.example.com
我們通過一個NSURL對象來表示
然後我們構造一個NSURLRequest對URL進行打包
我們通過NSURL連接的“發送異步請求”方法
來出發這個異步請求
之後我們以一個閉包的形式接收到結果
接收到的結果包含一個NSURL響應對象作爲HTTP響應信息頭
這個相應對象作爲HTTP響應信息頭和NSData對象作爲響應的主體數據
如果傳輸發生錯誤則接收到一個報錯
看一下如果使用NSURL會話實現起來會是什麼樣子
它非常相似
你會注意到NSURL和NSURL請求對象仍然在使用
這對於很多其他的NSURL家族對象來講是正確的
例如NSURL Credential Storage和NSHTTP Cookie Storage
其主要區別是
我們不使用NSURL連接來發送異步請求這種方法
我們使用NSURL會話共享會話中的 “數據任務請求”方法
一旦我們恢復任務
我們就能夠再次接收到異步地接收到事務處理的結果
以回覆數據的格式回覆信息頭
如果傳輸發生錯誤則接收到一個報錯
在你的程序中
將NSURL連接轉換成NSURL會話非常簡單
接下來我想換個話題
講一下我們在API的NSURL會話家族中添加的新功能
我要講的第一件就是對cookie的處理
在去年的WWDC上
我們介紹了一個新的功能叫做應用程序擴展
它允許你在系統的其他地方嵌入你應用程序的部分功能
例如通知中心
但是應用程序和他們的擴展在默認情況下擁有不同的數據存儲器
這就意味着即使你使用NSURL會話
且已經使用了我們內置的cookie進行支持處理
這些cookie實際上仍然被存儲在不同的地方
但是你可以使用應用程序組
來訪問共享數據存儲器
這個存儲器無論是你的應用程序還是其擴展部分都可以訪問
今年我們發佈了新的API
你能夠創建一個與組存儲器相關聯的cookie存儲
我將要向你們展示一下怎樣實現它
這裏你需要用到的是NSHTTP cookie存儲中
新增的“共享cookie組存儲器標識符”方法
你只需要簡單地創建一個cookie存儲
並輸入你的應用程序組的名字
在你用Xcode編輯工程的編譯設置選項和打開功能選項卡時
程序組就已經被配置好了
當你創建好cookie存儲的時候
你只需像設置NSURL會話配置對象中的HTTP cookie存儲屬性一樣設置它
從配置中創建一個NSURL會話
之後你在這個會話中進行的任何任務
都會使用組存儲器中的cookie存儲
所以對於今天演示的所有內容
我們講解了使用NSURL加載HTTP內容
但是仍然有一些情況需要你使用一個除了HTTP或者HTTPS之外的
其他的協議
所以如果你正在開發一個聊天軟件
一個視頻調用軟件或一切這一類的其他軟件
你真的需要...你可能需要一個非HTTP的協議
你想要直接在TCP/IP網絡上做一些事情
所以今年發佈了一個新的API叫做NSURL會話工作流
這是一個底層提取文件直接在TCP連接層上
在過去你可能直接使用NSInput流
或者NSOutput留來做一些相似的事情
但是我們認爲NSURL會話工作流有在NSStream API的優點
首先它提供了一個非常簡單方便的異步讀寫接口
通過NSStream
你需要設置一個委託來監聽事件或者何時讀入或者何時屏蔽讀寫
從前這樣做會有點亂但是現在變得簡單清晰了很多
第二
NSURL會話內置了強大的支持功能能夠自動通過HTTP代理
NSURL會話工作流可以利用這種支持
這樣你就能夠連接一個遠程的服務器
即使在這之間有一個HTTP代理但是NSStream不能夠這樣做
API還有一些其他的新的升級
這些我也將隨後進行介紹
我們都知道NSStream是一個非常流行的API
也有很多其他的構架和API中兼容並使用了NSStream對象
所以我們也有一些與NSStream相兼容的支撐部分
這些我也將在之後爲你們呈現
所以就像我說的MNSURL會話工作流支持TCP/IP連接
你可以明確地通過一個主機名稱和端口創建一個連接
或者你可以使用NSNetService的API
在你的應用程序中查找Bonjour服務
之後我們能夠接受NSNetService爲你自動解決問題
工作流使用了現存的NSURL會話配置選項
和委託方法來向你傳達事件
當然我們支持TLS安全連接
一旦你確實與服務器建立了一個連接你甚至能夠進行動態修改
所以讓我們看一下你怎樣使用工作流來實現一個讀取操作
首先創建一個工作流
這樣你就能夠簡單地使用“帶有主機地址和端口的工作流”
你只需要輸入你想要連接的主機名和端口號
然後恢復任務後
你可以使用“讀取最短長度最長長度、或者超時”等方法
你需要做的就是輸入一個你要讀取的字節範圍
或者操作超時的時限
所以如果我們準備讀取範圍內的東西
或者我們遇到了一個EOF或者發生了傳輸錯誤或者超時
我們將會調用存儲結果的閉包
寫入操作非常相似
我們不像...通過NSStream我們可以直接操作NSData
你只需要輸入你想要我們寫入的NSData對象
以及再次輸入一個超時門限
在出現錯誤時這個內容爲零的閉包將會被調用
當這個操作成功或者發生了超時錯誤或者發生了傳輸錯誤
啓用TLS和對這個任務調用“打開安全連接”的思想一樣簡單
我之前提到了
我們有配合NSStream工作的內置支持NSURL會話工作流
我們這樣做的原因是
有非常多的API已經使用了NSStream對象
我們希望爲你提供一些東西能夠和這些API兼容
事實上你可以將NSURL會話工作流轉換成NSStream
在下一張幻燈片上我會用非常簡單的代碼來爲你們演示一下
只需要記住當你做這些的時候
任何你使用工作流加入隊列中掛起的異步讀寫任務
都將在我們給你NSStream之前完成
這樣的操作也會從會話中分離出任務
所以這個鏈接
底層鏈接將不再計入限制
你可以爲你的主機設置一個會話鏈接的最大數量
它也不再在會話設置中突出任務選項
所以要將一個工作流轉換成流
你只需要在任務中簡單地調用‘Capture Streams’方法
之後這些輸入和輸出流將會給你的委託發送一個新的委託消息
我們同樣有許多已經添加到工作流中的其他委託消息
第一個很有意思
這是一個爲工作流尋找更優路徑的方法
所以如果你有一個工作流通過蜂窩數據網絡連接到了你的服務器
如果用戶新加入一個Wi-Fi網絡
之後我們會發送這個通知到你的程序告訴你可能會有更好的連接路徑
在這種情況下你可能想要做的
如果你想要做的話就是清除你現存的工作流
並創建一個新的工作流到那臺主機和端口
並嘗試通過更好的鏈接進行連接
我們將這個決定權留給你決定是否要這麼做
如果你在傳輸一個很大的數據並已經完成了99%
就沒有必要清除現存的連接並創建一個新的連接
當讀寫雙方的後臺TCP連接已經被關閉時
我們也要告訴你一些信息委託方法
我之前也提到了通過工作流對HTTP代理的自動處理
針對這種情況你能夠做的就是
打開一個正在處理HTTP內容的NSURL會話數據工作
並將其轉換成一個工作流
當接收到數據工作的回覆時你可以做這些
所以要將一個數據工作轉換成工作流
讓你能不通過HTTP構架直接在HTTP連接層直接通信
通過“確實接到回覆”委託方法
你能夠簡單地對這個完成處理器進行回覆
利用最新的“成爲流”設置
然後你會通知你的委託
通過使用“URL會話數據任務確實成爲了工作流”方法
數據任務已經轉換成爲工作流
在結束今天的演講前
我想要回顧一下今天早上討論的幾件事情
第一件事情是怎樣使用App Transport Security
來保證你的應用程序能夠只建立安全連接
以及在需要的時候怎樣申報異常情況
之後我們講了通過服務器上支持HTTP/2
怎樣讓你的應用程序能夠更快
其不需要對客戶端進行額外的修改
我們講了在手錶應用程序上使用NSURL會話的最優方法
以及這次發佈的新API做了哪些修改
NSURL連接的棄用和如何遷移到會話
怎樣在應用程序和擴展之間共享cookie
以及如何獲得一個很好的基礎級別提取
如果你需要一個沒有HTTP的服務器
使用TCP連接進行通信
像往常一樣
我想提醒你們我們在網站開放有參考文檔
並提醒你參加開發者論壇
以及在這周的WWDC大會上如果你有任何問題
你可以向我們的傳播者Paul Danbold請教
如果你想參加其他的相關會議的話
我強烈建議你參加明天的
“你的應用程序和下一代網絡會議”
這是一個低層次的關於網絡的討論會
這周也將開放網絡實驗室
如果你有任何問題你都可以直接和我們討論
謝謝你們今天能夠到來
我們希望看到
你們在IOS 9和OS X和EI旗艦版和WatchOS 2上
能夠開發一些驚豔的應用程序
謝謝