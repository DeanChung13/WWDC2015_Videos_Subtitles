00:00:19.620 --> 00:00:23.724 
MapKit的最新內容

00:00:28.195 --> 00:00:29.229 
大家下午好

00:00:29.463 --> 00:00:30.964 
歡迎來到206號講座

00:00:31.231 --> 00:00:32.732 
本次講座是關於
《MapKit的最新內容》

00:00:33.300 --> 00:00:34.501 
我是蘇米特·隆卡爾

00:00:34.568 --> 00:00:36.303 
我是在地圖團隊工作的軟件工程師

00:00:36.670 --> 00:00:39.239 
今天下午的講座內容很多

00:00:39.439 --> 00:00:41.241 
那我們閒話少說直接開始

00:00:42.509 --> 00:00:45.546 
開始之前
我們先來看看今天的講座日程

00:00:46.079 --> 00:00:50.350 
今天第一個話題是
現有MapKit API的功能改進

00:00:50.584 --> 00:00:52.886 
這裏我主要介紹新功能

00:00:53.120 --> 00:00:54.888 
不好意思 我主要探討

00:00:55.789 --> 00:00:59.026 
我們新增的API功能
以支持現有的功能

00:00:59.259 --> 00:01:01.261 
之後
我會談談Transit

00:01:01.562 --> 00:01:04.798 
我們主要關注MapKit中
的Transit問題

00:01:05.199 --> 00:01:07.100 
最後是Flyover

00:01:07.434 --> 00:01:09.937 
Flyover是
MapKit中的全新Map Type

00:01:10.003 --> 00:01:13.307 
iOS 6起
可以運用在iOS的應用中

00:01:13.540 --> 00:01:15.309 
現在我們就展示給大家看

00:01:15.576 --> 00:01:18.312 
關於這個話題
我們還準備了許多演示

00:01:18.579 --> 00:01:21.315 
這樣大家可以看到所有這些新
增API是怎樣工作的

00:01:21.782 --> 00:01:22.716 
大致是這些

00:01:22.783 --> 00:01:24.651 
接下來我們直接
介紹今天首個話題

00:01:24.818 --> 00:01:26.587 
現有API的改進

00:01:30.991 --> 00:01:33.627 
根據諸位開發人員的提議和要求

00:01:33.827 --> 00:01:35.729 
今年我們下大力氣

00:01:35.796 --> 00:01:38.932 
確保大家和你們的應用能夠充
分利用MapKit的功能

00:01:39.900 --> 00:01:45.205 
這些新增的API可以使你在
應用中自定義MapKit

00:01:45.472 --> 00:01:47.541 
同樣可以改善用戶體驗

00:01:47.841 --> 00:01:49.376 
對於像諸位這樣的開發人員來說

00:01:49.443 --> 00:01:51.578 
這意味着諸位會減少編碼量

00:01:51.912 --> 00:01:53.847 
我們現在來逐個看這些API

00:01:54.214 --> 00:01:56.884 
先來看看
Pin Color Customization

00:01:59.119 --> 00:02:02.022 
MapKit圖釘也叫
MKAnnotationView

00:02:02.189 --> 00:02:04.758 
從一開始它們就是
MapKit的重要組成部分

00:02:05.192 --> 00:02:09.429 
它們可以在地圖上
確定任何單個圖釘的具體位置

00:02:09.863 --> 00:02:13.467 
但談及自定義的時候
我們卻沒有太多可以修改的

00:02:13.734 --> 00:02:18.172 
你只能將之設爲
紅色或綠色或紫色

00:02:18.438 --> 00:02:19.706 
你沒有其他選擇

00:02:19.773 --> 00:02:24.144 
從iOS3起 你只有這三種選擇

00:02:24.611 --> 00:02:28.715 
現在我們來看
可以實現自定義的新款API

00:02:29.149 --> 00:02:30.217 
我們把它設定爲

00:02:30.284 --> 00:02:32.986 
MKPinAnnotationView
的屬性

00:02:33.253 --> 00:02:34.655 
叫做pinTintColor

00:02:34.721 --> 00:02:39.259 
在iOS上 叫做UIColor
在OS X上 是NSColor

00:02:39.660 --> 00:02:42.429 
之後我們也稱其爲
UIColor和NSColor

00:02:42.596 --> 00:02:45.732 
這意味着在地圖上你有
數百萬不同顏色可以選擇

00:02:47.167 --> 00:02:50.370 
我希望藉此機會指出舊版API

00:02:50.437 --> 00:02:52.940 
即圖釘顏色設置的不足之處

00:02:53.307 --> 00:02:55.576 
因此如果你的應用軟件
還在用這款API

00:02:55.843 --> 00:02:58.979 
一定要升級到
我們正在介紹的最新版API

00:02:59.680 --> 00:03:02.583 
這就是關於
圖釘顏色自定義的內容

00:03:02.649 --> 00:03:04.952 
接下來是
Callout自定義

00:03:05.018 --> 00:03:06.920 
在詳細介紹
callouts前

00:03:06.987 --> 00:03:09.089 
先來說說什麼是
callout

00:03:09.456 --> 00:03:11.458 
對於已經使用這個功能
很久的朋友來說

00:03:11.692 --> 00:03:13.627 
就當是溫故而知新吧

00:03:14.027 --> 00:03:15.229 
那什麼是callout呢

00:03:15.429 --> 00:03:19.099 
callout就是點擊註釋
時 跳出來的那個白色氣泡

00:03:19.499 --> 00:03:21.835 
主要由四部分構成

00:03:22.102 --> 00:03:23.036 
其一是標題

00:03:23.370 --> 00:03:26.473 
其二 緊接在標題下面的副標題

00:03:26.807 --> 00:03:29.676 
然後是右輔助視圖和左輔助視圖

00:03:30.177 --> 00:03:35.015 
通常情況下這四部分足以
向我們展示和提供該點

00:03:35.082 --> 00:03:40.320 
和它們所代表的座標的信息

00:03:40.787 --> 00:03:43.657 
但是當內容數量增加時就會出現問題

00:03:44.224 --> 00:03:46.994 
例如 在這個callout中

00:03:47.461 --> 00:03:50.464 
你可以看到副標題就附在這點上

00:03:51.064 --> 00:03:55.035 
那麼怎麼才能自定義callout
來滿足應用需求呢

00:03:55.335 --> 00:03:58.338 
事實證明 這也是研發人員一
直以來試圖解決的問題

00:03:59.339 --> 00:04:00.908 
有時遇到這樣的問題

00:04:01.508 --> 00:04:04.778 
在地圖軟件中點擊那個點後

00:04:05.012 --> 00:04:07.414 
會跳出類似這樣的東西

00:04:07.714 --> 00:04:10.450 
點擊註釋時你會得到一個POI

00:04:10.517 --> 00:04:12.419 
和帶有Yelp點評
功能的callout

00:04:12.653 --> 00:04:16.957 
爲了實現類似的行爲

00:04:17.190 --> 00:04:19.091 
我們見過開發人員做過這樣的事情

00:04:19.493 --> 00:04:21.461 
他們把Emojis放入副標題中

00:04:21.728 --> 00:04:23.430 
我是說 這種辦法
對這類情況還是可以的

00:04:23.797 --> 00:04:27.134 
可是當處理更復雜的情況
比如像這種情況又會怎樣呢？

00:04:27.434 --> 00:04:29.570 
結果發現這不是個好的辦法

00:04:29.937 --> 00:04:32.973 
爲了解決這個問題
我們來介紹一個新的辦法

00:04:33.407 --> 00:04:36.877 
它可以幫你自定義callout

00:04:37.110 --> 00:04:40.747 
我們這裏介紹的屬性叫做
detailCalloutAccessoryView

00:04:40.814 --> 00:04:45.452 
在iOS上 會用到UIView
在OS X上 則是NSView

00:04:45.819 --> 00:04:48.155 
那麼這是個UIView和NSView

00:04:48.322 --> 00:04:50.991 
這意謂着可以更大限度地實現自定義

00:04:51.191 --> 00:04:53.493 
那麼即便想使用也可以這麼做

00:04:53.894 --> 00:04:58.065 
這會開啓無數
自定義callout的可能

00:04:58.565 --> 00:05:03.837 
同時這些callout都
支持從右到左的語言自動排版

00:05:03.904 --> 00:05:07.674 
也就是說所有的功能已準備好
只需你輸入一行代碼即可

00:05:08.041 --> 00:05:11.612 
我們來快速看看示例代碼
以及怎麼在應用中使用

00:05:12.112 --> 00:05:16.650 
這裏我有一個回調函數
當你點擊註釋時就會執行該函數

00:05:17.384 --> 00:05:21.488 
先來設置
detailCalloutAccessory屬性

00:05:21.655 --> 00:05:24.925 
detailCalloutAccessoryView
屬性 作爲UIImageView

00:05:24.992 --> 00:05:28.328 
大家來看 我放了一個泰姬陵
的圖片在callout中

00:05:28.662 --> 00:05:31.632 
這些就是自定義
callout所要做的

00:05:31.832 --> 00:05:32.666 
怎麼樣 很棒吧？

00:05:38.172 --> 00:05:40.707 
正如我剛纔所說的這只是
UIView和NSView

00:05:40.841 --> 00:05:43.043 
我們非常高興
能爲大家提供這個功能

00:05:43.110 --> 00:05:45.479 
來看看你們能用它做些什麼

00:05:45.913 --> 00:05:48.415 
希望我們很快就能看到結果

00:05:48.949 --> 00:05:51.051 
這就是關於Callout
自定義的所有內容

00:05:51.251 --> 00:05:53.453 
我們來繼續講地圖自定義

00:05:54.788 --> 00:05:58.559 
在這個特定的話題中
我們將介紹新版API

00:05:58.725 --> 00:06:01.328 
它可以幫助大家控制
在Map View上進行的內容

00:06:01.395 --> 00:06:03.530 
比如在你所有的應用程序中
有個地圖程序

00:06:03.864 --> 00:06:05.999 
怎樣才能控制
Map View的內容呢？

00:06:06.600 --> 00:06:10.871 
如今這些API在地圖程序中
已經使用了好多年

00:06:11.104 --> 00:06:12.706 
現在我們就給大家看看

00:06:13.207 --> 00:06:15.242 
首先來看交通狀況

00:06:15.943 --> 00:06:18.946 
現在你可以在Map View中
顯示任何交通高峯

00:06:19.012 --> 00:06:23.050 
你只需要在
Map View上插面小旗

00:06:23.116 --> 00:06:24.718 
這個叫做
shows Traffic

00:06:24.818 --> 00:06:25.853 
與交通狀況功能相似的

00:06:26.086 --> 00:06:28.922 
我們還要介紹
顯示或隱藏比例尺的方法

00:06:29.356 --> 00:06:34.661 
你可以在Map View
左上角顯示或隱藏比例尺

00:06:34.728 --> 00:06:37.798 
同樣的
你還可以顯示或隱藏指南針

00:06:38.999 --> 00:06:43.170 
你可能注意到了這些API與
現有的API很相似

00:06:43.237 --> 00:06:46.039 
比如showsPointsOfInterest
或showsBuilding

00:06:46.106 --> 00:06:48.342 
我們相信通過使用這些API

00:06:48.509 --> 00:06:51.545 
你可以在自己的應用中
自定義Map View

00:06:51.912 --> 00:06:53.947 
並獲得實現棒的用戶體驗

00:06:54.448 --> 00:06:55.816 
這就是地圖自定義

00:06:57.951 --> 00:07:00.787 
除了地圖和這些談過的API外

00:07:01.188 --> 00:07:03.590 
我們對MapKit也有很多改進

00:07:04.324 --> 00:07:05.993 
首先是時區支持

00:07:06.293 --> 00:07:09.329 
我們在MK地圖項增添了時區屬性

00:07:09.596 --> 00:07:12.933 
使用這個屬性可以獲得相關的時區

00:07:13.267 --> 00:07:15.202 
可以和CLGeocoder一起使用

00:07:15.602 --> 00:07:18.605 
因此你可以用一個特定的座標
找到相關的時區

00:07:18.939 --> 00:07:21.074 
你也可以和MK本地搜索一起使用

00:07:21.408 --> 00:07:26.647 
這樣就可以搜索感興趣的區域
或任何你想查找的內容

00:07:26.713 --> 00:07:29.082 
還可以找到相關時區

00:07:29.683 --> 00:07:32.653 
此外
我們還對MapKit做了諸多改進

00:07:32.719 --> 00:07:34.421 
以實現更好的Swift兼容性

00:07:34.621 --> 00:07:36.590 
同時我們還增加了
WatchKit支持

00:07:37.090 --> 00:07:40.994 
從而可以在手錶上
啓動你自己的地圖程序

00:07:41.361 --> 00:07:46.567 
這些就是我們對MapKit
做的所有改進

00:07:47.000 --> 00:07:48.268 
我們來繼續講下一個話題

00:07:48.435 --> 00:07:50.737 
同時這也是我個人最喜歡的話題
Transit

00:07:54.208 --> 00:07:57.211 
昨天的講座很令人興奮

00:07:57.277 --> 00:08:00.814 
同時我們也推出了地圖程序
的新功能 Transit

00:08:01.081 --> 00:08:04.351 
今天我們主要介紹這對於
MapKit而言意味什麼

00:08:04.852 --> 00:08:07.221 
在這個功能方面
我們已經做了許多工作

00:08:07.554 --> 00:08:12.726 
在設計該功能時
我們將用戶放在開發過程的中心位置

00:08:13.260 --> 00:08:17.397 
爲了在你的應用程序中提供類似的體驗

00:08:17.598 --> 00:08:21.969 
我們希望同過地圖軟件給你
提供相似的體驗

00:08:22.202 --> 00:08:23.470 
和你...

00:08:24.071 --> 00:08:29.076 
我們採用MapsTransit的
入口來實現這一點

00:08:29.343 --> 00:08:30.744 
我們來逐個看這個入口

00:08:31.078 --> 00:08:33.981 
首先
可以應用Transit ETA

00:08:34.381 --> 00:08:37.583 
如果你之前使用過
MKDirections協議

00:08:37.650 --> 00:08:40.354 
MKDirection類型
和相關的API的話

00:08:40.419 --> 00:08:45.792 
那麼你也許知道我們支持汽車和步行
這兩種交通方式

00:08:46.059 --> 00:08:51.198 
你可以針對這兩種交通類型
提出方向和ETA請求

00:08:51.365 --> 00:08:53.800 
今年我們添加了新的交通方式

00:08:53.934 --> 00:08:56.170 
MKDirectionsTransportType
和Transit

00:08:56.236 --> 00:09:00.407 
有這個TransportType
就可以應用ETA

00:09:00.807 --> 00:09:05.712 
我要指出的是
你將只爲Transit應用ETAs

00:09:06.046 --> 00:09:08.081 
你不會獲得Transit方向

00:09:08.415 --> 00:09:10.350 
我們進入示例代碼之前

00:09:11.084 --> 00:09:15.522 
來看一下可以怎樣
從ETA之外獲得什麼

00:09:15.589 --> 00:09:19.660 
比如你可以獲得預計到達時間
和預計離開時間

00:09:19.993 --> 00:09:25.566 
考慮到交通頻率的性質
大多數都取決於時間和地點

00:09:25.832 --> 00:09:28.302 
因此提供這一信息就變得非常重要

00:09:28.669 --> 00:09:30.370 
我們相信通過這些信息

00:09:30.537 --> 00:09:35.342 
你會爲程序用戶羣提供很棒的用戶體驗

00:09:35.843 --> 00:09:37.277 
我們來看示例代碼

00:09:37.377 --> 00:09:39.546 
怎樣才能應用
這些Transit ETA

00:09:40.080 --> 00:09:43.150 
這裏我有個輔助函數
getTransitETA

00:09:43.617 --> 00:09:46.420 
那我先
生成MKDirectionsRequest

00:09:46.820 --> 00:09:49.056 
之後我將設置起點和目的地

00:09:49.590 --> 00:09:53.026 
一旦完成
我將交通類型設置爲Transit

00:09:53.293 --> 00:09:55.963 
因爲我們感興趣的是
獲得Transit ETA

00:09:56.730 --> 00:09:59.499 
使用剛剛生成的函數

00:09:59.566 --> 00:10:01.468 
我將要創建
MKDirections對象

00:10:01.802 --> 00:10:03.203 
我叫它ETA計算程序

00:10:03.270 --> 00:10:05.572 
隨着Completion
Handler確定終點

00:10:05.639 --> 00:10:07.407 
同時在CompletionHandler上

00:10:07.474 --> 00:10:08.976 
我將處理
從服務器反饋回來的信息

00:10:09.910 --> 00:10:11.545 
這就是Transit ̨ETA

00:10:11.612 --> 00:10:13.514 
現在既然我們
具備了Transit ETA

00:10:13.647 --> 00:10:16.483 
那爲了提供完整的體驗
我們會介紹一種方法

00:10:16.550 --> 00:10:19.453 
來啓動地圖軟件
進入Transit模式

00:10:19.920 --> 00:10:23.757 
到目前爲止你可以在地圖軟件上
通過不同的啓動方式

00:10:24.057 --> 00:10:25.959 
甚至其他相關的軟件來啓動運行

00:10:26.193 --> 00:10:28.595 
此外MKLaunchOptions
DirectionsModeKey

00:10:28.662 --> 00:10:33.700 
將給你指出哪些地圖軟件模式可以使用

00:10:34.101 --> 00:10:37.738 
現在我們支持Driving方式
和步行方式

00:10:37.838 --> 00:10:41.742 
在iOS 9中我們
還引入Transit模式

00:10:42.142 --> 00:10:48.715 
通過這個模式
你可以從你的程序中啓動地圖應用

00:10:49.082 --> 00:10:50.918 
我們快速來看這裏的示例代碼

00:10:51.418 --> 00:10:55.189 
那麼我這裏有個輔助公式
openInMapsTransit

00:10:55.255 --> 00:10:56.690 
這是一個使用座標的公式

00:10:58.458 --> 00:11:03.130 
我基本上先要用那個解析座標
生成MK地圖項

00:11:03.530 --> 00:11:08.302 
之後我會用Transit模式設置
生成字典啓動選項

00:11:08.735 --> 00:11:09.670 
一旦完成

00:11:10.003 --> 00:11:14.708 
我只需在地圖程序上使用
openInMapsWithLaunchOptions

00:11:14.975 --> 00:11:18.245 
基本上這是在Transit
模式上啓動地圖程序

00:11:18.512 --> 00:11:21.415 
並且是以在地圖上
設置的內容作爲目的地

00:11:21.982 --> 00:11:23.650 
這部分內容就是這些了

00:11:23.884 --> 00:11:25.586 
讓我們來看看這些API是怎麼運行的

00:11:36.830 --> 00:11:42.369 
好的 爲了這次演示 我創建了一個
舊金山城市的旅遊應用程序

00:11:42.936 --> 00:11:47.307 
基本上只是個加上了
一些註釋的簡單地圖視圖

00:11:47.608 --> 00:11:50.344 
我來快速運行一下
你們可以看到現在我有什麼

00:11:53.413 --> 00:11:56.049 
正如大家所見
我們有張舊金山的地圖

00:11:56.116 --> 00:11:58.118 
我用地標做了幾個不同註釋

00:11:58.652 --> 00:11:59.753 
比如這裏是蘇特洛訊號塔

00:12:00.521 --> 00:12:04.291 
這裏是金門大橋還有所有這些

00:12:04.658 --> 00:12:07.661 
我還隨意設置了這些圖釘的顏色

00:12:07.761 --> 00:12:09.830 
所以如果我向下滾動到...

00:12:11.532 --> 00:12:12.833 
viewForAnnotation
callback

00:12:12.900 --> 00:12:15.536 
你們可以看到我設置了
圖釘顏色屬性

00:12:15.869 --> 00:12:17.571 
來自定義這些圖釘顏色

00:12:18.105 --> 00:12:18.939 
好了

00:12:19.339 --> 00:12:22.910 
隨着演示的進行
我們要嘗試更多的自定義

00:12:23.410 --> 00:12:29.183 
接下來 我要在副標題
加上Transit ETA

00:12:29.616 --> 00:12:32.653 
爲了實現這個內容
我創建了個簡單的輔助公式

00:12:33.754 --> 00:12:36.156 
我把它拖拽到這裏

00:12:36.690 --> 00:12:40.427 
這樣就有了個可以簡單處理

00:12:40.494 --> 00:12:43.597 
當地地標註釋的輔助公式

00:12:44.097 --> 00:12:47.100 
然後我要這個位子生成
MKDirectionsRequest

00:12:47.801 --> 00:12:51.371 
大家可以看到我已經生成了
一個MKDirectionsRequest

00:12:51.572 --> 00:12:55.742 
之後我在只需在應用中
設置個起點和目的地

00:12:56.710 --> 00:12:59.313 
最後我把交通類型
設置爲Transit

00:12:59.379 --> 00:13:01.548 
因爲我們感興趣的是
Transit ETA

00:13:01.982 --> 00:13:03.317 
一旦具備這些
我將繼續

00:13:03.383 --> 00:13:05.052 
生成MKDirection對象

00:13:08.455 --> 00:13:11.491 
在這個位置我用該應用創建了
MKDirection對象

00:13:12.593 --> 00:13:14.561 
在CompletionHandler中

00:13:14.928 --> 00:13:18.932 
我將副標題的註釋設置爲我們
預計的到達時間

00:13:20.467 --> 00:13:25.439 
在地圖視圖上加註釋前
我將快速地調試這個功能

00:13:25.873 --> 00:13:30.310 
我們稱這個功能爲
LandMarkPin

00:13:31.578 --> 00:13:33.780 
好的 我們來運行一下

00:13:38.318 --> 00:13:42.489 
好了 從Moscone West
會議中心到市政廳

00:13:42.923 --> 00:13:46.326 
坐公共交通工具大約要22分鐘
我們在看看其他圖釘

00:13:46.693 --> 00:13:48.028 
到輪渡大廈 是17分鐘

00:13:48.395 --> 00:13:50.998 
非常好
這能通過使用Transit

00:13:51.231 --> 00:13:55.736 
給用戶提供一些類似需要多
少時間到達目的地的初步信息

00:13:56.170 --> 00:13:58.605 
但是爲了提供
完整的Transit體驗

00:13:58.972 --> 00:14:01.942 
我們還要想辦法
將它們運用在地圖程序中

00:14:02.075 --> 00:14:03.177 
爲了實現這次演示的目的

00:14:03.243 --> 00:14:07.114 
我要將rightcallout
Accessoryview

00:14:07.181 --> 00:14:08.382 
放在我的callout中

00:14:08.448 --> 00:14:11.919 
同時當我點擊時
可以用戶直接轉換到地圖程序

00:14:13.086 --> 00:14:18.058 
我們快速結束這塊內容並回過
頭繼續callback模式

00:14:19.560 --> 00:14:22.095 
我將在我的
AnnotationView

00:14:22.162 --> 00:14:24.865 
設置rightCalloutAccessoryView

00:14:28.669 --> 00:14:31.605 
這是我之前添加的
rightCalloutAccessoryView

00:14:31.672 --> 00:14:32.539 
讓我們試一下

00:14:40.180 --> 00:14:41.014 
好了

00:14:41.081 --> 00:14:43.584 
你可以看到rightCallout
AccessoryView

00:14:43.650 --> 00:14:46.420 
這裏已經添加了公交車圖標
但沒出現任何數據

00:14:46.486 --> 00:14:49.223 
因爲我們還沒有點擊
callback模式

00:14:49.623 --> 00:14:52.159 
這套公式每次操作都需要
callout的輔助控制

00:14:52.593 --> 00:14:55.262 
我們快速把這些內容
添加在這裏

00:15:00.434 --> 00:15:01.802 
這個就是已經執行了的

00:15:01.869 --> 00:15:04.505 
每次操作都需要
callout輔助控制的

00:15:04.571 --> 00:15:05.572 
callback模式

00:15:06.340 --> 00:15:09.109 
我一旦這樣 就會加入代碼

00:15:09.676 --> 00:15:12.813 
在地圖應用中啓動
給定的地圖項

00:15:13.447 --> 00:15:18.218 
這裏我先來
用模式Key生成字典對象

00:15:18.385 --> 00:15:20.754 
模式鍵設成Transit

00:15:21.121 --> 00:15:23.991 
然後 從以往的設置
獲取座標

00:15:24.057 --> 00:15:27.261 
我準備生成MKMapItem

00:15:27.561 --> 00:15:30.797 
一旦完成
我就會在地圖項中打開啓動選項

00:15:30.864 --> 00:15:34.635 
把這個地圖項
變爲Transit模式

00:15:35.235 --> 00:15:37.838 
我們快點繼續
再次運行應用

00:15:41.608 --> 00:15:42.442 
好了

00:15:44.645 --> 00:15:47.381 
來看輪渡大廈

00:15:49.116 --> 00:15:50.617 
點擊這裏

00:15:50.684 --> 00:15:53.887 
地圖應用
進入了Transit模式

00:15:53.954 --> 00:15:57.758 
可以看到需要
乘坐18分鐘的40路公交

00:15:57.824 --> 00:16:01.929 
再回到示例app
試試其他的內容

00:16:02.629 --> 00:16:05.165 
來看蘇特洛訊號塔的結果
好了

00:16:05.232 --> 00:16:06.366 
這就是獲得的結果

00:16:08.202 --> 00:16:10.003 
根據Transti的結果
需要45分鐘

00:16:10.637 --> 00:16:11.705 
相當遠

00:16:11.772 --> 00:16:14.842 
哦 明白了
出了點問題

00:16:14.908 --> 00:16:18.245 
公交站移位了
也許就是需要那麼久的原因

00:16:18.679 --> 00:16:22.282 
無論怎樣 這就是在MapKit中的
Transit體驗

00:16:23.784 --> 00:16:28.255 
我想談談怎樣實現剛說過的
自定義callout

00:16:28.589 --> 00:16:32.359 
我們繼續來看
怎樣在示例app中

00:16:32.459 --> 00:16:35.028 
應用這些callout

00:16:36.330 --> 00:16:40.767 
好了 首先 我們來談談
callback模式

00:16:40.834 --> 00:16:43.470 
每次點擊註釋就會得到調用

00:16:44.104 --> 00:16:49.376 
在這裏 我會在視圖上
設置具體的回調輔助屬性

00:16:49.676 --> 00:16:55.015 
爲路標所準備的數據中
我有部分圖像

00:16:55.949 --> 00:16:59.219 
在Callout高級設置中
設置UIImageView

00:16:59.286 --> 00:17:01.421 
來看在註釋中是什麼樣子

00:17:02.256 --> 00:17:05.259 
在這裏
讀出圖像數據

00:17:05.325 --> 00:17:08.428 
從解析的plist文件中
讀出圖像名稱

00:17:08.862 --> 00:17:10.430 
接着生成UIImage

00:17:10.830 --> 00:17:13.200 
然後生成
UIImageView

00:17:13.267 --> 00:17:15.135 
在detailCallout
AccessoryView中設置

00:17:15.502 --> 00:17:16.970 
我們就來運行這個

00:17:21.241 --> 00:17:23.410 
好了 很好

00:17:23.510 --> 00:17:25.244 
我現在有了
金門大橋的圖像

00:17:25.311 --> 00:17:26.880 
我們繼續來看

00:17:27.314 --> 00:17:28.182 
就這樣

00:17:28.248 --> 00:17:30.851 
這是非常漂亮的
金門大橋圖像

00:17:31.051 --> 00:17:32.085 
來看看還有什麼

00:17:33.520 --> 00:17:34.721 
還有輪渡大廈的圖像

00:17:36.823 --> 00:17:38.358 
這就是目前的位置

00:17:39.393 --> 00:17:40.227 
很好

00:17:40.794 --> 00:17:44.865 
沒有泛美金字塔圖像

00:17:45.332 --> 00:17:46.400 
從這裏可知

00:17:46.934 --> 00:17:51.805 
當我們設置
具體的回調輔助視圖

00:17:52.239 --> 00:17:54.675 
我們總能獲得優先級
或副標題

00:17:55.142 --> 00:17:57.811 
對金門大橋而言
我們添加了細節

00:17:57.878 --> 00:17:58.912 
因而我們也有了副標題

00:17:59.313 --> 00:18:02.783 
但是一旦設置detailCall
outAccessoryView

00:18:02.950 --> 00:18:04.518 
它就會獲得優先級或副標題

00:18:05.152 --> 00:18:08.155 
對於部分其他地標
我現在沒有圖像

00:18:08.222 --> 00:18:09.957 
我們可以在這裏加上文本

00:18:11.291 --> 00:18:14.862 
我已經生成了文本視圖

00:18:15.596 --> 00:18:17.898 
那麼我這裏有自定義文本視圖

00:18:18.332 --> 00:18:21.168 
基本上我剛設置過高和寬

00:18:21.668 --> 00:18:24.905 
這樣可以通過具體的回調

00:18:26.406 --> 00:18:28.575 
輔助視圖顯示內容

00:18:28.909 --> 00:18:32.346 
與圖像類似 我可以從
歸檔這些地標建築的

00:18:32.880 --> 00:18:34.681 
plist文件中讀出數據

00:18:35.249 --> 00:18:37.651 
我把這些
detailTextView

00:18:37.718 --> 00:18:40.621 
設置成
detailCalloutAccessoryView

00:18:40.687 --> 00:18:42.556 
好
我再快速地來運行一次

00:18:48.428 --> 00:18:50.764 
好了 很好
我們來看一下

00:18:51.565 --> 00:18:56.103 
正如大家所見在蘇特洛訊號塔
下面有不錯的文本視圖

00:18:56.703 --> 00:18:57.804 
我們再來看看其他內容

00:18:58.438 --> 00:19:00.407 
市政廳也是一樣 文本也不錯

00:19:03.010 --> 00:19:05.746 
這裏我希望回調副標題

00:19:05.879 --> 00:19:09.550 
回調UIImageView
再回調TextView

00:19:11.351 --> 00:19:13.987 
這就是這個API的
所有出彩的地方

00:19:14.288 --> 00:19:16.823 
我們非常高興爲大家介紹它

00:19:17.524 --> 00:19:20.227 
並且堅信各位
能實現出色的應用

00:19:26.366 --> 00:19:29.536 
那麼從這個演示中學到的是

00:19:30.037 --> 00:19:31.972 
如何來自定義這些圖釘顏色

00:19:32.573 --> 00:19:34.441 
我們學到如何自定義回調

00:19:35.375 --> 00:19:37.477 
也學到如何應用
Transit ETA

00:19:37.911 --> 00:19:43.150 
以及如何將用戶帶到地圖應用
以便提供豐富的交通體驗

00:19:43.884 --> 00:19:44.952 
我這邊就是要介紹這些

00:19:45.285 --> 00:19:47.721 
再來看Flyover
有請伊麗莎白

00:19:52.926 --> 00:19:53.760 
好的

00:19:57.130 --> 00:19:58.966 
我們來談談Flyover

00:19:59.867 --> 00:20:01.301 
我是伊麗莎白·林奎斯特

00:20:01.368 --> 00:20:03.370 
也是在地圖團隊工作的工程師

00:20:03.637 --> 00:20:06.673 
今天我給大家介紹這些內容

00:20:08.175 --> 00:20:09.743 
首先
Flyover是什麼？

00:20:11.278 --> 00:20:13.013 
怎樣在應用中發揮作用？

00:20:14.414 --> 00:20:17.351 
在使用Flyover時
怎麼設置正確的區域

00:20:17.417 --> 00:20:18.685 
並處理攝像頭？

00:20:20.020 --> 00:20:24.925 
我還會介紹Flyover與現有部分
MapKit API怎樣配合

00:20:26.260 --> 00:20:29.329 
首先Flyover具體
是指什麼？

00:20:30.130 --> 00:20:31.932 
例如說這是Flyover

00:20:35.335 --> 00:20:40.474 
這裏是各種城市和地標的
高度真實3D模型

00:20:41.241 --> 00:20:44.545 
在世界各地哪兒都有
這樣的東西

00:20:46.613 --> 00:20:51.151 
自從iOS 6起
在地圖應用中都可以找到

00:20:52.119 --> 00:20:54.054 
我們現在爲大家提供機會

00:20:54.121 --> 00:20:57.824 
爲用戶展示這些互動3D視圖

00:21:00.360 --> 00:21:05.666 
大家可能注意到
在地圖應用中並沒有衛星圖像

00:21:05.732 --> 00:21:08.202 
有的是位於代表地面的

00:21:09.269 --> 00:21:13.540 
3D立體圖上方的平面衛星圖

00:21:14.174 --> 00:21:16.743 
在你們的app中也是這種情況

00:21:18.812 --> 00:21:21.882 
Flyover的另一個重要特點是:

00:21:22.149 --> 00:21:27.721 
它是在球體上展示
而不是像其他2D地圖類型那樣展示

00:21:28.255 --> 00:21:32.192 
這就意味着要如何處理區域設置

00:21:32.960 --> 00:21:35.963 
這部分內容我稍後會介紹

00:21:37.531 --> 00:21:42.002 
那麼在應用中怎樣才能獲得
Flyover視圖呢？

00:21:43.370 --> 00:21:46.807 
如果以前用過MapKit
那麼一定會熟悉MK地圖類型

00:21:46.874 --> 00:21:50.010 
這是在MK地圖視圖上設置的屬性

00:21:50.077 --> 00:21:52.913 
是爲了選擇將要顯示的數據類型

00:21:53.780 --> 00:21:56.483 
我們有普通地圖的標準

00:21:57.651 --> 00:22:00.954 
還有衛星地圖
是從上到下的衛星視圖

00:22:02.089 --> 00:22:06.193 
還有在衛星視圖中加入了道路

00:22:06.260 --> 00:22:09.496 
標籤和興趣點的混合地圖

00:22:10.864 --> 00:22:13.467 
我們現在爲大家
介紹兩種新的地圖類型

00:22:14.034 --> 00:22:17.070 
Satellite Flyover
和Hybrid Flyover

00:22:17.671 --> 00:22:20.574 
爲了在app中顯示這類內容

00:22:21.008 --> 00:22:23.610 
只需將地圖視圖中的地圖類型

00:22:23.710 --> 00:22:27.014 
設置爲
Satellite Flyover即可

00:22:28.515 --> 00:22:33.987 
如果想添加諸如標籤 興趣點
道路和國界等內容

00:22:34.655 --> 00:22:38.192 
可以使用Hybrid
Flyover地圖類型

00:22:39.927 --> 00:22:44.464 
我說過在使用Flyover時
有些內容需要考慮

00:22:44.531 --> 00:22:48.135 
其中重要的一項是
怎樣設置地圖的可見區域

00:22:49.236 --> 00:22:54.341 
大家可能對使用矩形的幾種
MapKit方法比較熟悉

00:22:54.408 --> 00:22:57.644 
如MKCoordinateRegion
和MKMapRect

00:22:57.945 --> 00:23:00.414 
以便設置和獲得地圖的可見區域

00:23:01.148 --> 00:23:06.620 
不過地圖視圖的可見區域
並非總是矩形

00:23:07.588 --> 00:23:10.424 
在iOS 7中
我們介紹可以查看

00:23:10.490 --> 00:23:12.092 
有斜度的地圖視圖

00:23:12.159 --> 00:23:14.228 
這樣可以從一定角度查看地圖

00:23:14.728 --> 00:23:15.963 
當你這麼做時

00:23:17.030 --> 00:23:20.200 
可見區域就不會是完全的矩形

00:23:21.034 --> 00:23:23.904 
在Flyover中就是這種情況

00:23:23.971 --> 00:23:26.673 
這樣也可以
看到傾斜的地圖視圖

00:23:28.008 --> 00:23:31.545 
現在將這個區域縮小來看

00:23:31.612 --> 00:23:34.114 
這樣就可以看到
可見區域的實際形狀

00:23:34.915 --> 00:23:39.686 
我們在這裏需要做的是
定義地圖的可見區域爲矩形

00:23:39.853 --> 00:23:44.024 
這就包括我們在屏幕上
實際看到的內容

00:23:44.258 --> 00:23:46.927 
就是本例中的藍色矩形

00:23:48.128 --> 00:23:50.998 
在Flyover中
就是這麼做

00:23:51.298 --> 00:23:56.370 
可見區域都定義爲矩形
也就是在屏幕上所包括的區域

00:23:58.972 --> 00:24:04.278 
在Flyover中
視圖不必爲了不是矩形而傾斜

00:24:04.912 --> 00:24:07.915 
如果有一片區域是這樣 而且還相當大

00:24:08.148 --> 00:24:11.652 
在本例中
可以試着把可見區域設置成藍色矩形

00:24:11.718 --> 00:24:13.387 
最後就會是這樣

00:24:15.422 --> 00:24:19.793 
這裏的點就是
矩形顯示將一直成爲近似值

00:24:19.860 --> 00:24:22.496 
因爲Flyover是出現在球體上

00:24:23.664 --> 00:24:27.034 
同樣如果面積很大的區域

00:24:27.301 --> 00:24:29.469 
有部分區域實際上不會顯示

00:24:29.536 --> 00:24:33.040 
在這種情況下
部分可見區域實際是球體後面

00:24:35.409 --> 00:24:40.113 
即便這是個別情況
矩形區域設置在

00:24:40.180 --> 00:24:43.150 
Flyover中依然奏效
在傾斜地圖視圖中

00:24:43.917 --> 00:24:46.620 
如果是從上到下的視圖需要放大很多

00:24:47.054 --> 00:24:48.956 
建議要確保你是通過

00:24:49.022 --> 00:24:54.261 
MKMapCamera
在展示這個世界的相應部分

00:24:55.829 --> 00:25:00.133 
MKMapCamera早在2013年的
iOS 7中就已推出

00:25:00.400 --> 00:25:03.136 
想了解MKMapCamera的
更多詳情

00:25:03.203 --> 00:25:04.805 
以及普遍的地區設置問題

00:25:05.272 --> 00:25:08.342 
我推薦大家看看
《將MapKit放入透視圖》

00:25:08.408 --> 00:25:10.444 
這是2013年的講座內容

00:25:11.945 --> 00:25:15.616 
但是我要簡要介紹
MKMapCamera的功能

00:25:16.850 --> 00:25:18.919 
它有四個基本屬性

00:25:20.354 --> 00:25:25.425 
中間座標代表想在屏幕中間
顯示的世界上的位置

00:25:26.593 --> 00:25:29.930 
朝向是攝像頭所朝的方向

00:25:31.031 --> 00:25:35.369 
斜度是你看地圖視角的傾斜程度

00:25:36.003 --> 00:25:39.773 
還有高度是你希望攝像頭所處位置

00:25:39.840 --> 00:25:41.642 
在地圖上方的高度是以米爲單位

00:25:43.343 --> 00:25:46.713 
還有一個便捷的
MKMapCamera初始化器

00:25:47.247 --> 00:25:49.483 
這會令中心座標和你希望攝像頭

00:25:50.184 --> 00:25:53.420 
所在位置的視點座標

00:25:54.087 --> 00:25:57.791 
你所希望攝像頭處的高度

00:25:58.091 --> 00:26:02.262 
這樣就可以獲得從視點座標
看到中心座標的攝像頭位置

00:26:03.463 --> 00:26:07.835 
不過 在Flyover中
有地面 建築

00:26:07.901 --> 00:26:09.937 
和各種有趣的內容

00:26:10.370 --> 00:26:14.508 
這就意味着高度

00:26:15.075 --> 00:26:16.944 
實際上並不像
你想象中的那麼簡單

00:26:18.078 --> 00:26:20.614 
例如
這是在建築上方的高度麼？

00:26:20.681 --> 00:26:21.982 
這是地面上的高度麼？

00:26:22.149 --> 00:26:23.217 
還是海平面高度？

00:26:23.617 --> 00:26:26.854 
這並非是中心座標和
攝像頭之間的距離

00:26:26.920 --> 00:26:30.157 
攝像頭實際上在這種情況下
更容易測量

00:26:30.490 --> 00:26:33.994 
我們就在這裏添加了
MKMapCamera的新初始化器

00:26:34.528 --> 00:26:37.297 
我們來快速瞭解一下這是怎麼實現的

00:26:38.966 --> 00:26:40.667 
先從中心座標開始

00:26:40.734 --> 00:26:42.803 
也就是你希望在屏幕中間的位置

00:26:43.537 --> 00:26:46.473 
接着確定一個距離以米爲單位

00:26:46.540 --> 00:26:50.143 
你希望中心座標和攝像頭所在
位置之間的距離

00:26:50.511 --> 00:26:53.113 
注意這與海拔高度不同

00:26:54.848 --> 00:26:58.819 
還要確定斜度
也就是希望攝像頭所處的角度

00:26:59.586 --> 00:27:02.155 
還有朝向準備看的方向

00:27:03.190 --> 00:27:05.926 
通過這個初始化器

00:27:05.993 --> 00:27:08.896 
你可以完全不必擔心在攝像頭下方的

00:27:08.962 --> 00:27:12.799 
地面或建築會發生什麼情況

00:27:14.401 --> 00:27:17.137 
我先放一段短的演示

00:27:17.204 --> 00:27:19.206 
來看可以用Flyover
完成哪些很酷的事情

00:27:23.277 --> 00:27:26.547 
好的
蘇米特剛剛給大家看了旅遊應用

00:27:27.114 --> 00:27:30.984 
我的Mac上也有類似應用

00:27:31.785 --> 00:27:33.420 
可以看到這裏的地標

00:27:36.356 --> 00:27:37.758 
例如懸崖小屋

00:27:38.692 --> 00:27:44.131 
大家可能還記得有些位置
我們還沒有真實的圖像

00:27:44.198 --> 00:27:47.034 
那我覺得可以
用Flyover進行補足

00:27:48.235 --> 00:27:49.703 
我想做的是

00:27:49.770 --> 00:27:52.773 
在我的callouts中添加

00:27:52.840 --> 00:27:54.174 
detailCallout
AccessoryView

00:27:54.675 --> 00:27:57.911 
我將使用MKMap
以便爲Flyover

00:27:57.978 --> 00:28:03.083 
爲設置成detailCallout
AccessoryView的圖像

00:28:04.351 --> 00:28:06.453 
MKMap快照非常有用

00:28:06.520 --> 00:28:08.722 
當你只需要地圖的靜態圖像時

00:28:08.922 --> 00:28:10.624 
當你不要與它互動時都是如此

00:28:11.892 --> 00:28:14.828 
我還會爲這個快照加上幾個選項

00:28:14.895 --> 00:28:16.663 
最重要的是要把mapType

00:28:16.730 --> 00:28:19.833 
設置成
Satellite Flyover

00:28:22.636 --> 00:28:26.507 
我會使用新的初始化器
生成MKMapCamera

00:28:27.074 --> 00:28:29.710 
來看註釋部分的座標

00:28:30.744 --> 00:28:35.682 
我接着使用這些選項
生成MKMap快照器

00:28:36.984 --> 00:28:41.488 
啓動快照器如果也已完成且沒有錯誤

00:28:41.555 --> 00:28:45.559 
我就在detailCallout
AccessoryView生成圖像

00:28:47.528 --> 00:28:49.696 
我們當然要調用這個功能

00:28:55.035 --> 00:28:58.205 
好的
我們來看效果如何

00:29:00.874 --> 00:29:05.479 
如果我沒記錯懸崖小屋是我們
還沒有圖像的那個

00:29:06.380 --> 00:29:07.781 
來看 現在有了

00:29:17.391 --> 00:29:19.560 
好的
我們應該還有另外幾處

00:29:19.626 --> 00:29:21.161 
例如市政廳

00:29:21.562 --> 00:29:23.697 
相當酷
不過 Flyover視圖

00:29:23.764 --> 00:29:25.265 
當時是可以互動的

00:29:25.766 --> 00:29:28.669 
我覺得可以在視圖中添加一點動畫效果

00:29:29.503 --> 00:29:31.438 
我生成一個新的
ViewController

00:29:31.505 --> 00:29:35.275 
這個還太常用
不過其中有MKMapView

00:29:37.044 --> 00:29:41.615 
我會在其中添加部分有用的常數

00:29:42.416 --> 00:29:44.952 
然後我來設置地圖視圖

00:29:49.423 --> 00:29:53.794 
大家還注意到我給Satellite
Flyover 設置了地圖類型

00:29:54.595 --> 00:29:58.866 
還把OS X中可見的指南針
和縮放控制進行隱藏

00:30:01.335 --> 00:30:04.738 
我還生成了
MKMapCamera

00:30:04.805 --> 00:30:06.373 
初始狀態是地標的座標

00:30:07.841 --> 00:30:09.510 
我需要的設置就是這些

00:30:10.777 --> 00:30:15.716 
接着我準備再生成幾個
MKMapCamera

00:30:17.150 --> 00:30:21.622 
首先
是一個稍稍向下傾斜的斜度攝像頭

00:30:22.389 --> 00:30:24.591 
這裏還加上了旋轉

00:30:24.658 --> 00:30:26.727 
這樣可以稍作旋轉

00:30:27.494 --> 00:30:31.932 
因爲MKMapCamera
在MKMapView具有動畫屬性

00:30:32.366 --> 00:30:35.135 
我會做些動畫處理
以便在這兩個之間進行切換

00:30:38.005 --> 00:30:44.444 
這裏我先添加一段短的動畫效果
把攝像頭設置成斜度攝像頭

00:30:44.811 --> 00:30:49.783 
再把視圖向下傾斜一點
再加稍長的動畫內容

00:30:49.850 --> 00:30:51.752 
也會做少許旋轉動作

00:30:53.120 --> 00:30:54.821 
在主ViewController中

00:30:54.888 --> 00:30:59.860 
我加入了rightCallout
AccessoryView

00:31:00.060 --> 00:31:02.729 
這可以打開
新的View Controller

00:31:04.198 --> 00:31:06.466 
我們再加上按鈕

00:31:18.979 --> 00:31:21.949 
好的
我們再來看懸崖小屋 就像這樣

00:31:22.082 --> 00:31:26.920 
這裏有個小按鈕可以稍稍傾斜

00:31:28.989 --> 00:31:29.957 
再做旋轉

00:31:43.403 --> 00:31:45.472 
這個非常有趣
我們也來看看這個

00:31:45.539 --> 00:31:46.707 
因爲我覺得非常酷

00:31:49.810 --> 00:31:51.812 
就這樣
泛美金字塔也好了

00:31:59.920 --> 00:32:03.090 
好的現在我們看到了
Flyover的部分功能

00:32:03.357 --> 00:32:05.058 
那我們回到講座中來

00:32:05.959 --> 00:32:08.529 
一開始時我就說過
我想說說

00:32:08.629 --> 00:32:11.565 
現有MapKit API的
部分功能

00:32:11.632 --> 00:32:13.433 
看看它們怎麼和
Flyover怎麼配合

00:32:14.535 --> 00:32:16.670 
我先從MK註釋講起

00:32:17.504 --> 00:32:21.441 
MK註釋用於註釋地圖的單一座標

00:32:21.909 --> 00:32:25.445 
最常見的情況
是我們今天使用的圖釘

00:32:26.446 --> 00:32:29.983 
如果是用標準地圖類型顯示建築

00:32:31.251 --> 00:32:33.720 
註釋就是位於最上面的部分

00:32:34.421 --> 00:32:38.292 
在使用Flyover時
地圖類型時就是這種情況

00:32:38.692 --> 00:32:42.729 
當使用Flyover時
無論發現什麼

00:32:43.130 --> 00:32:47.034 
註釋將出現在任何建築 樹木
大船 雕塑的上方

00:32:48.368 --> 00:32:51.071 
接下來是MKOverlay

00:32:51.905 --> 00:32:56.476 
疊加圖層是用於強調地圖的區域
而不是單一的座標

00:32:57.311 --> 00:33:02.216 
如果是在標準地圖類型的3D地圖中

00:33:03.650 --> 00:33:07.354 
你會注意到建築阻隔了疊加圖層

00:33:08.155 --> 00:33:11.191 
Flyover也是同樣如此

00:33:11.558 --> 00:33:16.096 
Flyover的建築和樹木
會阻隔任何疊加層

00:33:16.964 --> 00:33:18.232 
就像是這樣

00:33:21.502 --> 00:33:27.474 
不過疊加層會拉到地面的上方
這樣就會跟着地勢走

00:33:28.642 --> 00:33:29.576 
就像是這樣

00:33:30.677 --> 00:33:33.780 
我覺得爲了在app中
用到Flyover

00:33:33.847 --> 00:33:37.050 
大家需要掌握的就是這些

00:33:37.117 --> 00:33:39.453 
我真是迫不及待
想看看大家的成果

00:33:41.255 --> 00:33:43.957 
總結一下今天所講的內容

00:33:44.458 --> 00:33:48.795 
我們對自定義圖釘 callouts
和顯示帶有交通狀況 指南針

00:33:48.862 --> 00:33:52.232 
和比例尺的地圖增加了幾種新方法

00:33:53.500 --> 00:33:55.969 
還增添了Transit ETA請求

00:33:56.036 --> 00:34:00.140 
以及啓動地圖app中的顯示
Transit方向的功能

00:34:01.041 --> 00:34:05.312 
我們還增加了Satellite Flyover
和Hybrid Flyover地圖類型

00:34:05.379 --> 00:34:09.683 
這樣可以在app中高度真實地顯示
地面的3D模型和衛星圖像

00:34:11.851 --> 00:34:13.554 
若想了解更多詳情可以看今天

00:34:13.620 --> 00:34:16.723 
MapKit文件資料
和開發人員論壇

00:34:17.757 --> 00:34:18.592 
感謝大家光臨