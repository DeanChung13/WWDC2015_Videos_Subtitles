核心圖像的新方面
大家早上好我的名字是大衛·海沃德
今天我很榮幸能給大家講講
iOS 9和Mac OS X ElCapitan “核心圖像” 上
有什麼新料
首先說一下我們今天要講哪幾件事
首先 我會給那些剛剛接觸主題的人
簡單介紹下 “核心圖像”
我建議你們回去後
看看我們去年以來的演示
尤其是其中那個關於如何在 “核心圖像” 中編寫內核的
討論 非常棒
接下來我們會講一講今年在 “核心圖像” 上
有什麼新料
我們在這裏要講的東西很多
我們今天會議剩下的三分之一時間會用來談談如何使用
“核心圖像”如何把它與我們的平臺上的
其它圖形框架橋接起來
首先
來簡單介紹下“核心圖像”
在概念上
“核心圖像” 的理念是指你可以在圖像上使用濾鏡
舉個簡單的例子你有一張輸入圖像
然後你通過一個濾鏡增加了一種色彩效果 如棕黑色調
但是如果你不喜歡這個
棕黑色調 那麼你就可以再改變一次色彩效果 把色調
改成偏藍色調
你也可以使用 “核心圖像”來增加類似幾何扭曲這樣的
事件效果
在這個例子中 我們使用的就是一種簡單的轉換
放大了圖像的某一部分
你可以把這些想象成各個濾鏡上都有一張
中間圖像
但是我們實現濾鏡的方法
它們實際上是非常簡便的對象
生成時耗時極少
在它們之間並無中間緩衝區
存在的必要
還有一個概念也很重要和每個濾鏡聯繫在一起的
是一個或者多個內核
CI內核是小的子例程這些子例程施加的效果
就是內核想要實現的效果
“核心圖像” 的另一項特性是
我們把這些內核
連接到了一個程序
儘可能減少中間緩衝區的使用
以此來提高性能
“核心圖像” 還有一項關鍵特性我們稱之爲
“興趣域支持”
這個理念指的是如果你僅僅對某個圖像的某一部分進行
渲染 這可能是因爲你在某張較大的圖象上進行了放大
或者是因爲這些渲染是在圖塊上進行的
我們就可以問一下每個濾鏡正在渲染的圖塊需要多大的
圖像輸入 這樣我們就可以向源圖像計算回
要生成想要的輸出需要用到的圖像的
精確區域
“核心圖像” 還有一項很棒的特性 允許我們獲得良好的
性能尤其是當我們處理
大圖像時
當你使用 “核心圖像” 時你需要注意其中的
四個主要類
第一個是CI內核
我之前已經提到了
它代表的是寫在 “核心圖像”內核語言的
程序或者例程
第二個關鍵的類是濾鏡即CI濾鏡
這是一個可變對象可以有多個輸入
這些輸入參數可以是數字、向量
或者其他圖像
根據輸入參數的當前狀態濾鏡會使用一個或者多個
內核來生成
一幅輸出圖像
一個CI圖像就是一個不可變對象
表示根據已經使用的上一個內核
生成圖像的“食譜”
最後是CIContext對象
這是一個非常重量級的對象
“核心圖像” 就是通過這個對象來進行渲染的
建議你不要太過頻繁地在你的應用程序中創建
這個CIContext對象 如果你處理的是快速動畫
那麼創建一次就夠了
關於CIContext還有一點很棒
它們可以實現到我們的系統中各種不同的後端渲染器上
現在我想講的下一件事就是我們後面的這個介紹講的是
今年 “核心圖像” 上有什麼新料
我們今天要講這麼幾件事情
我們會講一下Metal講一下新的濾鏡
新的檢測器 顏色管理支持以及內核類和語言的
某些改進
關於 “核心圖像” 我要講的最重要的事情
就是我們現在把它統一實現到了我們的各個平臺上
因此只要我們不專門提起那麼大多數情況下
“核心圖像” 的行爲在iOS和OS X上是完全一致的
是完全等價的
這是一個很棒的特性開發者就可以依賴這個
這個一致的行爲
這些可能是一些小事比如
當你包含 “核心圖像”頭部時
無論你是在哪個平臺你就可以包含 “核心圖像”
包含“核心圖像” H
這樣如果你編寫的是
跨平臺的代碼那就容易了很多
我們現在在兩個平臺之間
會進行API奇偶校驗
因此
今天我們想說的一件主要的事情就是
“核心圖像”對Metal的支持
我們稍後會在演示中展開講更多的細節
不過現在我就想先向你們強調這一點
關鍵的一點在於
現在Metal Textures
既可以當做“核心圖像” 的輸入
又可以當做“核心圖像” 的輸出
從內部來說“核心圖像” 環境可以把
Metal當作它們的內部渲染器
這就意味着如果你在CI的內核語言中
寫好了一個內核那麼它就會自動即時翻譯成
Metal語言
還有一件事要記住我們的內置濾鏡
尤其是 “高斯” 和 “卷積”濾鏡
現在是構建在Metal性能材質的頂部
爲的就是在支持的多個平臺上獲得儘可能好的性能
關於濾鏡還有一些要說
就像我之前提到過的
我們現在有一個統一的“核心圖像” 執行
這就意味着我們現在在各個平臺上內置了二百種濾鏡
也就是說
我們向iOS“核心圖像” 執行中
添加了海量的濾鏡
這次發版時添加了超過四十種濾鏡
它們分別屬於不同的類別
有些濾鏡很有趣 比如喜劇效果、CMYK半色調、
德羅斯特以及卷頁效果
還有一些卷積濾鏡也很有用
比如中值濾鏡、
邊緣檢測以及噪聲抑制
我們還有一些對圖像分析來說非常有用的簡化濾鏡
比如對一幅圖像進行“區域最大化”
或者 “平均分佈列”
爲了讓你們體驗一下它
我想向你們展示我們的一個示例應用程序的最新
最新版本 名字叫“核心圖像奇幻屋”
我們儘量每年都更新這個應用程序
我們現在已經有二百個濾鏡
當你在這個應用程序中打開濾鏡彈窗時
你可以看到我們現在把它們分成了不同的種類
你還可以看到我們用紅色高亮顯示了我們新加的
濾鏡這裏有一個API
可以幫助你確定某個濾鏡是在哪次發版時加進去的
這個 當然了展示了 “CMYK半色調” 特效在
一臺iPad上視網膜分辨率情況下的
良好性能
這是我們應大家要求
<br/>添加到各個平臺的
“核心圖像” 上的兩個新的濾鏡
這些濾鏡可以用來
生成條形碼
因此在這個實例中輸入一個濾鏡的就不是
一個數字或者另一幅圖像而是一個文本串
我們添加了這兩個濾鏡以便生成PDF417條形碼
以及code 128條形碼
“核心圖像” 還有一項特性我們稱之爲我們的
CI檢測器類
這些是我們過去發佈的類
它們可以用來做像檢測圖像中的人臉、
檢測圖像中的QR codes碼、
檢測圖像中的矩形等事情
今年我們又新增了一個類
它可以用來檢測圖像中的文本區域
這個濾鏡的理念是定位可能包含直立文本的
區域
我來在一臺iPad上運行下簡單給你們做個演示
我們已經把它連接到了“核心圖像奇幻屋”
我的書架上有個舊盒子如果我們打開文本檢測器
它就定位到了直立文本定位到了
文本的滾動以及單獨的字符
當我們放大並且旋轉攝像頭
直立文本也檢測到了成一個角度的
某些文本
這就是我們的新文本檢測器開發者會用這個檢測器來實現
什麼好玩的功能我對此十分期待
隨着我們現在在iOS上的“核心圖像” 統一實現
我們還有了 “自動顏色管理”
這一很棒的
功能
自從 “核心圖像” 出現後OS X上就可以使用
這項功能了 但是現在我們也把它弄到了iOS上
這就意味着現在 “核心圖像” 完全支持
基於ICC的CGColorSpaceRefs了
這些可以被用到輸入文本、輸出文本上
甚至還可以被當做“核心圖像” 的一個工作區
這是因爲完成了在iOS上支持ColorSync這一
很棒的工作才實現的
對用戶來說 這就意味着
你可以自動得到用色彩空間標記的TIFF或者JPG
正確渲染
很多圖像是用sRGB標記的
在之前的iOS版本上它們已經可以正確渲染了
不過現在如何你的圖像是用一個色彩空間而不是用sRGB
來標記的 那麼你也可以得到正確的行爲了
這裏有一個例子是用Pro Photo色彩空間
標記的一幅圖像
背景中的紅色臺子不飽色
膚色也很難看
當你在這個上面正確看到嵌入ICC輪廓時
圖像就正確進行了渲染
這是你在 “核心圖像” 上自動得到的
我們還對CI內核類做了一些新的支持
現在在OS X上已經可用了
當然它在iOS上早就可以用了
這是我們的統一執行的另外一項福利
舉例來說 我們有兩個類分別叫做CI顏色內核
以及CI扭曲內核
這些類背後的理念是讓你能夠更容易地
最常見的基礎濾鏡
之前在OS X上如果你想要寫一個簡單的融合濾鏡
用給定的遮罩把這三個圖像
融合到一起 那麼你就需要
寫幾行代碼對採樣器
正確進行取樣
然後你需要寫好遮罩
把這三幅圖形組合到一起
而如果你用CI顏色內核類
那麼代碼就簡單的多了
現在內核的輸入就是一個採樣器 下劃線
下劃線採樣參數那麼內核的代碼就只不過是
把三個結果混合到一起的數字遊戲
對開發者來說這是件大好事 事情更簡單了
“核心圖像” 簡化、連接項目的工作
就更加容易了
我們還對OS X上可用的CI內核語言
做了大量的優化
我們的統一執行當我們把CI內核語言
編譯進目的環境語言時
我們會通過Apple的LLVM技術來實現
這樣 我們的語言中就有了一項新的特性
比如If、For以及While這些之前都是不可用的
現有的apps中的CI內核應該不會受到影響
不過有了新的編譯器我們的報警更嚴謹了
所以如果你的app鏈接到了
El Capitan或者稍後會鏈接它
請密切留意編譯器報警
舉例來說這是一個內核的簡單示例
之前在OS X使用內核語言是不可能的
因爲這個特定的濾鏡有一個輸入參數
這個參數是一個計數
我們想在這個內核中有一個For循環
會基於那個計數變量進行循環
在這個特定的例子中我們想要對n點進行
矢量動態模糊
現在寫這個內核就很容易了
你可以更加天馬行空你可以有一個
提前退出的For循環
在這個例子中我們會對那副圖像進行採樣
直到我們得到了圖像上的一個不透明區域 然後我們
For循環僅僅返回圖像中的
顏色的平均色
因此你要記住
我們的內核語言就是我們這個語言的整體目標
我們想實現的就是讓你僅僅寫一次內核
然後不管你的內核運行在什麼樣的設備上
你的內核就都可以運行
這樣它就可以獨立運行不管運行在什麼樣的系統中
不管是iOS還是OS X不管你的輸入圖像尺寸如何
內核語言也同樣支持目的核心
以及採樣器轉變因此我們也支持圖像自動鑲嵌圖案
此外CI內核語義和我們的
後端渲染器是獨立工作的
因爲無論我們用到是Metal
還是OpenCL，還是OpenGL
還是OpenGL ES你在CI內核語言中
寫一次你的算法就可以了
這就是今年“核心圖像”上有什麼新料的重點內容
我們接下來的主題是要講一講如何
把 “核心圖像”和其他框架橋接起來
具體來說 指的就是
我們的平臺上可用的某些很棒的圖形資源
我們的平臺上有很棒的
成像框架
比如 “核心動畫” 、
SceneKit、SpriteKit、Metal、
AV Foundation、
IOSurfaces以及多個視圖類
我們今年花了大量的時間來讓它們能夠
和 “核心圖像” 兼容
開始討論前
我想介紹下託尼·朱他會展開講一下
“核心圖像”以及Metal
謝謝 大衛
早上好我的名字是託尼
首先我要告訴你們關於“核心圖像”
以及Metal更多的信息
就像大衛之前提到的今年我們在 “核心圖像” 中
添加了Metal渲染支持
我們這樣做的一個原因是爲了增加我們的
圖像類型支持擴展套件
例如IOSurface以及CGImag
無論你的CIContext類型是什麼
你都可以把它們用作
一個CI濾鏡的輸入或者輸出
不過如果你有一個基於OpenGL的CIContext
你也可以渲染進、渲染出OpenGL紋理
今年 如果現在你有一個基於Metal的CIContext
那麼你也可以渲染進、渲染出Metal紋理
之前沒有這項支持時
你就必須把一個Metal紋理轉換成某種現有的圖像類型
這就有可能在CPU和GPU之間
造成 “昂貴的”數據複製
有了這項支持我們就可以高效
渲染進、渲染出這些資源
我們再來看看 “核心圖像” 內用於Metal支持的
一些新的APIs
首先是一個允許你用一個輸入Metal紋理對一個
CI圖像進行初始化的API
以及一本你可以在其中
指定諸如紋理標記顏色空間
等事情的可選字典
這是一個使用高層框架的優點的
一個示例例如 “核心圖像”
優點是它會自動幫你處理類似
顏色管理等等細節問題
要使用這些基於Metal的
資源進行渲染你需要通過給它你的
應用程序正在用的Metal設備
<br/>來創建一個基於Metal的
CIContext新的CIContext
再說一遍 你可以爲中間緩衝器指定
類似工作顏色空間或者工作地墊的
選項字典
你甚至還可以說明
你想要使用某個次優GPU
無論是哪種情況
有了這個新的基於Metal的CIContext
我們就有了新的渲染API允許你把任何
CI圖像渲染到一個輸出Metal紋理
這個API有個很棒的特性我想要
專門提出來就是可以指定
任選命令緩衝區
如果你想又快又好地做事你可以指定爲 “無”
此時 “核心圖像” 就會在內部創建一個
然後把所有必要的命令編碼到那裏
然後在返回之前把它提交上去
這樣就可以高效調度GPU上的渲染調用
不過你也可以給那個調用提高一個命令緩衝區
此時 “核心圖像” 只會向它編碼命令
然後不經過提交就把它返回回來
這樣的話你就可以完全控制你對
命令緩衝區的調度以便在GPU上進行渲染
你也就有了在命令緩衝區的任何地方插入CI濾鏡
靈活性
我來詳細解釋下這點
對於那些第一次使用Metal的
人來說 使用Metal進行渲染基本上就是向一個命令緩衝區
編碼一系列的渲染命令
在這個例子中我們有兩組命令
用我們剛纔看到的那個新的API
你現在就可以向
這個命令緩衝區的任何地方
插入那個CI濾鏡
比如在緩衝區的開頭、
結尾
甚至可以是在那兩個渲染命令的正中間
你想象一下這種情況你需要對某些紋理進行
某些繪製、引發或者渲染
然後把紋理送入一系列的CI濾鏡
並由此生成一些輸入紋理
在上面進行更多的渲染
然後 “核心圖像” 會從內部爲你的圖像圖表中可能有的
每個濾鏡編碼全部命令
實際上就像大衛之前提到過的
我們的某些內置濾鏡也會使用Metal性能材質
來利用這些專門爲
支持Metal的設備進行了調整的高度優化的
材質
最後我想提一下這種調用協定
完美地賦予了它自身使用CI、直接向一個
MetalKit視圖進行渲染的能力
我想向你們演示一個
示例代碼以便進一步向你們解釋
這是一個示例代碼如果你需要基於新的MetalKit
框架、創建一個新的應用程序
那麼你就需要寫這個代碼了
你需要做的第一件事就是當你想要設置視圖時
你要在這裏做幾件事
第一件關鍵的事
是把那個視圖的 “僅幀緩存器” 屬性設置爲 “假”
這樣 “核心圖像” 就可以使用Metal計算着色器來向
那個視圖的輸出紋理進行渲染
你下一步要做的
就是使用一臺Metal設備來把那個CIContext初始化
這樣做的原因是在一個應用程序中
類似初始化一個CIContext這種事情 你只想做一次
然後在 “繪製和視圖委託”功能中
要通過那個視圖渲染某些CI濾鏡
你就需要寫這樣的代碼
讓我來帶領你們逐句通過這個代碼
首先你要創建一個命令緩衝區
這個緩衝區最終會給到這個可繪製物
然後我們要用一些給定的輸入Metal紋理
來對一個CI圖像進行初始化
現在 這個CI圖像可以通過其它方式出現 舉例來說
我們有的某些其它圖像類型比如一個CGImage
不過在這個例子中 我們只是向你們演示下如何使用新API
一旦你有了一張CI圖像
你就可以把一系列的CI濾鏡鏈接到它上面
在這個例子中 我們要使用一個CI高斯模糊濾鏡
然後一旦你有了你想要渲染的CI圖像
你就想要抓取當前綁定到那個視圖的當前可繪製物上
的紋理然後使用我們在這裏想用的
命令緩衝區 把CI圖像渲染到那個紋理
最後 一旦我們編碼好了這個渲染命令
你就還需要向命令緩衝區插入另外的一個Metal命令
目的是爲了顯示視圖的當前可繪製物
然後你只需要在緩衝區調用提交即可
把一些 “核心圖像” 濾鏡
集成到一個MetalKit應用程序
就是這麼簡單
接下來我想談一談
如何橋接 “核心圖像”以及AV Foundation
有了我們今年在這些框架中做的最新的變更
現在向你的AVFoundation應用程序添加 “核心圖像”
濾鏡就很容易了
這是因爲現在 “核心圖像”
已經方便地和AVVideoComposition類
集成到了一起
默認你會得到自動顏色管理
但是如果你不需要你也可以禁用它
我們來通過幾個例子看看如何把CI濾鏡
應用到視頻上
首先是在導出視頻的語境中其次是在實況回放
一個視頻的語境中
要演示這些例子
我們要使用幾年前我們在
蘋果全球開發者大會上演示給你們的一個濾鏡
在這個濾鏡中對於視頻圖像的每一幀
我們都會首先在它上面應用一個棕黑色調濾鏡以及
隨機噪聲最後是在它的頂部進行一些
垂直刮痕覆蓋
你們中如果有人記得的話這是一個老電影濾鏡
是幾年前我們在蘋果全球開發者大會上演示給你們的
第一個濾鏡非常直接
它只需要一個單一的輸入圖像
以及一個輸入時間參數你可以用這個參數來
以可重複的方式、可預見的結果
來向視頻應用特效
我們回來看看導出那個視頻時 我們應該怎樣
應用這個濾鏡
你首先需要做的 就是創建一個經過過濾的合成
賦予它你想要導出的音頻視頻資產以及一個回調塊
你在這個回調塊中可以指定渲染視頻的每一幀時
應用的一個濾鏡 “配方”
從這個回調塊中 我們就可以得到一個請求對象
這個對象就是一個輸入參數你就可以得到把你的
CI濾鏡鏈接在一起的
合成時間以及源圖像
一旦你有了自己的經過過濾的CI圖像
你就可以調用請求對象上的Finish With圖像
你可以向那個調用傳遞一個“無” 語境
然後AVVideoComposition
默認就會創建一個CIContext
就像我之前提到的
CIContext會自動得到顏色管理
如果你想禁用它那麼你只需要創建一個
你自己的CIContext
指定一個空顏色工作區然後把它傳遞到那個
Finish With圖像調用中
我們剛剛向你展示的濾鏡是一個十分簡單的濾鏡
並不涉及卷積濾鏡
但是在這個例子中你確實有了卷積濾鏡
你要小心的一件事是不良的結果
即乾淨的像素滲透進了
那副圖像的邊緣
要解決這個問題我們有一個簡單的方法
我們在很多類中都會用到這個方法 也包括那個類
你首先要做的
就是有了源圖像 你就想把卷積濾鏡應用到它上面
你想通過夾緊延伸來調用圖像
它會無限邊緣複製那個圖像的全部像素
以及圖像的邊緣
這樣的話當你應用這個濾鏡時
你就不會再出現清晰的像素和圖像融合這個問題了
因爲如果那樣做 你最後得到的就是一張無限大的圖像
濾鏡應用結束時你想要通過剪切矩形
來增加圖像以便把那個圖像剪切回到
源圖像的範圍
通過使用這個簡單的方法你看到的圖像就更簡潔了
邊緣邊界也非常漂亮、明快、敏銳
因此一旦我們有了那個
AVVideoComposition
如果你想要創建一個導出會話以便導出一個視頻
你就可以通過創建這個
音頻視頻導出會話並且指定你想要導出的
一個輸出URL位置來實現
你也可以指定我們剛剛創建的視頻組成的導出位置
要記住的一點是你可能想要...
你想要調用 “從URL刪除項目”來刪除任何可能已經存在於
那個導出位置的項目
一旦你完成後你就可以在導出會話上
調用ExportAsynchronously
這樣就會開始一個進程導出那個
視頻並且把CI濾鏡應用到
你的視頻的每一個單一的幀上
如果你想要更新你的UI上的某些進度
以便顯示那個導出的進度
你就可以在你的調用塊中使用 “合成時間” 參數
來更新這樣的UI元素
現在它導出了
如果是回放一個音頻視頻資產你需要寫的代碼
實際上也非常類似
創建視頻組成的代碼和我們之前看到的一模一樣
唯一的不同之處在於你不需要再創建一個
導出會話
你需要用那個音頻視頻資產以及我們剛剛創建的視頻組成
來創建一個AVPlayerItem
然後再用那個播放器項目創建一個AVPlayer
之後在你的播放器內調用“播放”
現在我要向你們展示一個視頻 讓你們看看我們是如何
在回放時 把那個老電影濾鏡應用到一個音頻視頻資產的
這裏要注意的一件事是
當你清洗這個視頻時
你可以看到同樣的特效以可重複的方式、
可預期的結果應用到了這個視頻上
因此 “核心圖像”
和AV Foundation高效互操作在了一起
接下來我想請亞歷克斯
來再給你們講講“核心圖像” 提供程序
謝謝
謝謝 託尼
我的名字是亞歷山大·納曼我要講講 “核心圖像”
提供程序然後我們再講講我們的
系統上的更多的API還有STKs
以及它們是如何和 “核心圖像” 一起工作
創造有趣的應用程序
我們從
CIImageProvider開始吧
CIImageProvider是
我們在CI圖像上的一個類型之前OS X上就有了
但是現在 作爲我們的
統一執行的一部分現在iOS上也有了
對你來說你就可以把輸入圖像帶入
你的系統 而如果沒有它這就是不可能的
舉例來說如果你有一個不被支持的
文件格式你想要創建一個基於
那個文件格式的CI圖像
或者說 如果你有某些從某些站點流出的數據
而且你想創建一個CI圖像
那麼你就可以使用一個CIImageProvider
它們是通過回調實現的
你可以坐享其成當我們需要填寫數據時
我們會通知你、告訴你你就可以得到自動鑲嵌圖案
而我們就會爲你處理輕便性以及緩存
我們來看看它是怎樣實現的
先說重要的你創建你自己的類
在這個例子中 我們創建一個叫做圖塊提供程序的類
然後我們用這個圖塊提供程序創建一個CI圖像
除了這個我們讓它的尺寸和我們試圖
創建的圖像尺寸一致無論我們想用什麼樣的格式
來創建這幅圖像一個可選擇的顏色空間
在這個例子中我們在選項字典中
給出圖塊尺寸
要把這個用起來
我們只需要實現一種叫做“提高圖像資料” 的方法
“核心圖像” 就會通知你、告訴你
填寫這個信息
你必須在那個數據指針中填寫這個信息
數據指針有給定的行字節值在X和Y軸上有確定的位置
有確定的寬度和高度如果你願意的話
你還可以標記一些用戶信息
要實現你自己的圖像提供程序
你要做的就是這些
現在我們再來談談我們擁有的各種視圖類
談談你可以在iOS和OS X上
和 “核心圖像” 一起用的各種視圖類
我們對使用 “核心圖像”進行渲染就有了一個廣譜
支持所處的系統可以是
非常高級的例如UIImageView
這樣對應用了一種
“核心圖像” 特效的圖像進行渲染
就非常容易
也可以是非常低級的系統
或者可能是高級性能APIs比如GLKView
或者MTK視圖你就可以對你所做的事情
有細粒度更高的控制
那麼讓我們來看看UIImageView
UIImageView可能是
在iOS上展示一幅CI圖像的最簡單的方式
你需要在你的UIImageView上
做的 就是把圖像屬性設置成一個UI圖像...
在這個例子中是一個基於CI的圖像
問題在於雖然使用這個方法非常簡單
它並不是展示一幅CI圖像的性能最高的方法
那麼最後我們不得不做的
就是把它渲染回CPU
然後把它發送回GPU
效率不是儘可能地高
如果我們看一個簡單的示例
在這個例子中
我們通過使用一個UIImageView
來運行一個像素化濾鏡
我們可以看到應用了這種特性後
我們在視網膜尺寸圖像上得到了大約每秒二十幀
如果我們改用OpenGL ES-based視圖
並且應用同樣的濾鏡
我們就可以看到我們現在是每秒四十八幀
如果我們再進一步
進行一次基於Metal的查看
我們在這裏還有些許提升
我們就是每秒五十二幀
雖然這並不特別了不起但是我們僅僅應用了一個濾鏡
因此我們得到的優勢並不那麼明顯
不像我們應用多個濾鏡或者我們有一堆較小的
渲染時我們得到的優勢那麼明顯
但是基本理念就是這個
現在讓我們看看 “核心圖像”以及 “核心動畫”
看看我們怎樣可以讓它們一起工作
這是一個我們在iOS以及OS X上
有所不同的例子非常少見
在OS X上 我們只需要應用即可 要讓 “核心圖像”
以及 “核心動畫” 一起工作我們只需要做兩件事
先說重要的
在你的NSview你只需要說view.layer
使用 “核心圖像” 濾鏡把它設爲
“真” 然後可選擇地指定你想要應用到
你有的無論哪個層的濾鏡
陣列
你需要做的就這些
而在iOS上
我們就沒有這種支持了
因此你可以做的就是直接OpenGL
你可以通過衍生於GLKView來這麼做
或者通過創建一個UIView確保你覆寫了層類方法
並且返回了CA鷹layer.self
來這麼做
當你這麼做的時候你就會得到一個GL基於ES的對象
然後你就可以用它創建你自己的CIContext
那樣就可以確保你獲得最優性能
這些都很棒不過你需要牢記一件事
如果你想要獲得很棒的性能
那麼這就不僅僅是使用最好的API這麼簡單
更是要有效地使用最好的API
在這個例子中你要記住的第一件事就是
僅僅創建你的CIContext一次因爲緩存就發生在那裏
那裏也保持了
一大堆的狀態
因此
當你使用低層APIs時要記住這點
現在 我想談談
IOSurface上的“核心圖像”
我們在 “核心圖像” 執行的內部
大量使用IOSurface
作爲一個API 我們超愛它因爲它給我們提供了
一堆系統中其它API不存在的
功能性
因此大體上我們就有了很棒的輕便性
一些鎖定語義因此我們就可以讓數據在
IOSurfaces上進進出出非常適合用來把數據從CPU
搬到GPU或者從GPU搬到CPU
我們對不同格式的支持廣譜
令人難以置信我們認爲可能有些是
整個系統上最棒的
舉例來說 我們有420、444、
RGBA半浮動以及很多其它的支持
現在在iOS上作爲一個開發者
要直接使用IOSurface就比較難了 但是你可以通知 “核心圖像”
你想要通過創建“像素緩衝區” 的方式
來使用IOSurface
IOSurface上KCV像素緩衝區
IOSurface屬性鍵是指定了的
當你那樣做的時候如果你從一個CV像素緩衝區
創建了一個CV圖像並且圖像有這個鍵
那麼內部結束時就是
“核心圖像” 知道它是一個
IOSurface支持的CV像素緩衝區
我們就可以儘可能高效地進行渲染
因此如果你想在iOS上享受IOSurface的全部好處
那麼你就需要記住這個
接下來我想再談幾個其他的APIs
我們會仔細看幾個例子 看看我們可以怎樣實際一起使用
“核心圖像” 以及STKs、非常容易地創建示例應用程序
那麼我們從SpriteKit開始吧
如果我們在XCode中開始創建一個新的應用程序
我們選擇 “遊戲”然後選擇一種
遊戲技術SpriteKit
然後我們構建、運行我們就得到了這個應用程序
這樣當你點擊屏幕時新的飛船就會顯示出來
你可以看到我們是每秒六十幀
我們現在可以用少量的代碼把 “核心圖像”
添加到這個應用程序
在這個例子中
我們會在GameScene.swift中修改
Touches Began方法那麼一開始
每次點擊後會發生的事情
就是會把那個子畫面添加到根節點
我們再修改下
我們要使用一個SK特效節點
一個SK特效節點會把整個環境渲染進一個緩衝區
然後你就可以向它應用一系列的濾鏡
因此我們添加一個SK特效節點
我們就不像之前那樣把子畫面增加到根
我們會把子畫面添加到特效
我們說 我們想啓用某些特效
我們要創建一個濾鏡在這裏例子中
我們要使用一個像素化濾鏡
它和我們之前看到的濾鏡是一模一樣的
然後我們把那個特效
添加到根
我們需要做的就這些
如果你想要添加 “核心圖像”到一個SpriteKit應用程序
那麼你需要寫的代碼正是這個
如果我們現在運行我們有的同樣的示例
並且開始點擊
我們就在我們的應用程序內得到了
美麗的像素化子畫面
而且運行的幀率也一樣
現在
我們再談談SceneKit
理念是相同的我們通過 “開始”來創建一個應用程序
我們選擇SceneKit作爲一個遊戲技術
如果我們直接構建、運行這個app
我們就得到了
這艘以交互速度旋轉的宇宙飛船
以及駛離我們方向的宇宙飛船
如果我們想要向這個應用程序添加 “核心圖像”
那麼我們需要做的
就是到GameViewControllerswift中的
View DidLoad方法找到飛船
飛船在示例代碼中是對齊的
然後我們就再次創建像素化濾鏡
給飛船指定一個濾鏡可選陣列
如果我們這麼做了後運行app
就得到一艘美麗的像素化飛船
你可以把它應用到你的場景中的任何節點 並且
我們再次得到了很棒的幀率
同時使用SceneKit以及“核心 圖像” 的一大優勢在於
你可以使用 “核心動畫”
來動畫繪製屬性
在這裏例子中我們要創建一個
CA基礎動畫我們要動畫繪製
輸入規模因此我們會得到一個
變化的規模像素化特效隨着時間推移
這個特效會被應用一個零到五十的值
在兩秒內它會悄悄地來、悄悄地走
如果我們添加這個代碼
我們的飛船就會有一個
美麗的
動畫繪製像素化特效
並且 幀率仍然很棒
這個並不是一定需要應用到一個節點上
你可以把它應用到你的整個場景上
這裏我們推出了一個示例
你可以下載它它叫 “香蕉”
和動畫一起 我們應用了相同的特效
並且我們會在這裏實時改變像素化規模
當它像素化後我可以比全分辨率更好地
玩這個遊戲了這讓我有點吃驚
不過除了創建遊戲外你可以用這個
在遊戲結尾添加一個特效
舉例來說如果你想讓你的資產的不同
版本被不同的
圖像處理特效渲染
你就可以和這些APIs一起
來使用 “核心圖像”完全沒問題的
到現在爲止 我們今天看了很多東西
看了怎樣一起使用 “核心圖像”
以及Metal和AVFoundation
爲什麼IOSurface對我們如此重要
我們還看了如果你僅僅創建了一幅圖像一次
並且不需要頻繁更新
那麼使用UIImageView的最簡單的方法是什麼
僅僅應用一個特效一次是一種很棒的方法
我們也向你演示瞭如何使用“核心動畫”
如何CIImageProvider帶入定製數據
以及如何在遊戲語境或者其他應用程序語境中使用它
你如何可以用SceneKit或者SpriteKit非常簡單地創建它
要獲取更多信息
我們在developer.apple.com有很多的資源
可以在線獲取
如何你有任何其它諮詢
你可以通過chick@apple.com
聯繫斯蒂芬·奇克
你可能想要參加其它會議
包括 “在AVFoundation 中編輯電影”
這場會議幾天前已經舉行過了不過你可以在線觀看視頻
還有昨天舉行的“Metal中有什麼新料第二部分”
如上所述謝謝你們來參會
希望你們會愛上在你們的應用程序中使用 “核心圖像”
祝你們在會議剩餘的時間裏過得愉快  謝謝！