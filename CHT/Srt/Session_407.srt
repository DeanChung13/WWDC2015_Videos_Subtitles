00:00:20.621 --> 00:00:23.090 
在Interface Builder中執行用戶界面設計

00:00:26.360 --> 00:00:27.261 
謝謝

00:00:30.364 --> 00:00:32.466 
下午好 歡迎大家吃完午餐後回來

00:00:32.633 --> 00:00:34.768 
我猜大家是吃了午餐看視頻的

00:00:35.035 --> 00:00:36.136 
我還正在吃我的早餐呢

00:00:36.703 --> 00:00:39.239 
不管您吃了什麼餐 或者您來自哪裏

00:00:39.373 --> 00:00:42.776 
歡迎探討Core Data線程問題

00:00:43.677 --> 00:00:44.545 
我只是開了個玩笑

00:00:45.179 --> 00:00:46.647 
我們來聊聊
Interface Builder

00:00:46.713 --> 00:00:48.182 
我的名字叫凱文凱文· 凱希

00:00:48.248 --> 00:00:50.150 
我是一位界面編程工程師

00:00:50.217 --> 00:00:51.885 
我們今天來做一些不同的事情

00:00:52.452 --> 00:00:54.655 
介紹Interface 
Builder兩個新特性

00:00:54.855 --> 00:00:56.456 
但是我先想做另外兩件事情

00:00:56.590 --> 00:01:00.160 
第一件我們要給你們一些
更高級的內容提示和技巧最好實例

00:01:00.227 --> 00:01:02.296 
Interface 
Builder在後臺運行的

00:01:02.896 --> 00:01:04.397 
然後我們要來看一下

00:01:04.464 --> 00:01:06.400 
Interface Builder
如何幫

00:01:06.466 --> 00:01:09.036 
在開發自己的應用過程中的每一步的

00:01:09.670 --> 00:01:11.004 
讓我解釋得更清楚些

00:01:11.772 --> 00:01:12.739 
您在這裏

00:01:12.806 --> 00:01:14.508 
您有一個非常棒的點子

00:01:15.042 --> 00:01:17.077 
現在 可喜的是有其他一些同伴

00:01:17.144 --> 00:01:19.313 
也覺得您的點子非常棒

00:01:19.746 --> 00:01:20.681 
可是問題來了

00:01:20.747 --> 00:01:22.115 
他們生活在世界各地

00:01:22.182 --> 00:01:24.451 
並且他們使用不同的蘋果產品

00:01:25.385 --> 00:01:26.220 
那您要怎麼辦呢

00:01:26.587 --> 00:01:28.355 
首先您要想想您的應用

00:01:28.689 --> 00:01:30.123 
它會具有一些什麼樣的特點呢

00:01:30.524 --> 00:01:34.695 
哪些將成爲您會面對的
不同的共享功能塊呢

00:01:35.028 --> 00:01:38.065 
在您思考這些功能塊的時候
您將會觀察每個獨立的場景

00:01:38.332 --> 00:01:40.167 
並且在每個場景中 繼續下去

00:01:40.234 --> 00:01:42.002 
實際上都會慢慢深入到界面層

00:01:42.636 --> 00:01:44.171 
好 讓我們回到第二步

00:01:44.738 --> 00:01:48.876 
針對不同的產品
並且是不同的語言來開發界面

00:01:48.942 --> 00:01:50.277 
那將會是非常大的工作量

00:01:50.611 --> 00:01:53.413 
Interface Builder
爲您節省大量工作

00:01:53.647 --> 00:01:55.282 
會在任何一個步驟中

00:01:56.383 --> 00:02:00.554 
我們可將整個過程調製成三個主要步驟

00:02:00.721 --> 00:02:03.323 
這些步驟將爲我們的議題
提供完美的解決方案

00:02:03.790 --> 00:02:04.925 
我們將開始討論

00:02:04.992 --> 00:02:07.027 
設計時用Interface 
Builder

00:02:07.094 --> 00:02:09.329 
我將提供給大家一些最好的實例

00:02:10.030 --> 00:02:11.698 
然後我們將稍微揭開一些內幕

00:02:11.832 --> 00:02:13.901 
Interface 
Builder是怎麼工作的

00:02:14.368 --> 00:02:17.938 
然後
我們將在此次演示中花上大量時間

00:02:18.005 --> 00:02:20.240 
來討論運行中的
Interface Builder

00:02:20.307 --> 00:02:23.644 
不僅討論在運行時您怎麼與它交互

00:02:23.944 --> 00:02:25.679 
而且討論您可以怎麼樣利用不同運行時

00:02:25.746 --> 00:02:27.814 
操作系統特性的好處

00:02:27.881 --> 00:02:29.850 
來增強您應用的可適用性

00:02:30.751 --> 00:02:33.387 
深入討論設計時刻的
Interface Builder

00:02:33.654 --> 00:02:34.922 
最好的方法莫過於直接展示

00:02:34.988 --> 00:02:37.257 
設計時刻的
Interface Builder

00:02:38.759 --> 00:02:40.294 
在我在講示例之前 我要告訴大家

00:02:40.761 --> 00:02:44.064 
在這個示例程序中
我會帶給大家5個提示和技巧

00:02:44.131 --> 00:02:45.966 
5個最好的實例

00:02:46.266 --> 00:02:49.369 
我們將在
我們正在開發的一個駕車旅行的應用中

00:02:49.436 --> 00:02:51.271 
增加一些新的功能

00:02:51.338 --> 00:02:53.540 
我們將增加一個新的標籤

00:02:53.607 --> 00:02:55.709 
讓我們可以關注那些正在自駕遊的朋友

00:03:00.047 --> 00:03:02.015 
所以 在這個應用中

00:03:02.082 --> 00:03:06.486 
我將實現來自一位設計人員的要求
我非常樂於效勞

00:03:06.553 --> 00:03:09.590 
原因有兩個 第一
如果您正在和一個設計師一起工作

00:03:09.656 --> 00:03:13.527 
他/她在和您一起工作的時候
會跟您說一些行話

00:03:14.027 --> 00:03:16.296 
第二如果您並沒有和一個設計師工作

00:03:16.363 --> 00:03:19.533 
爲了告訴您這些
信息設計應用以及最好設計方法

00:03:19.733 --> 00:03:21.535 
不一定需要設計師幫助就能完成

00:03:23.370 --> 00:03:25.706 
我們用靜態的模擬性演示

00:03:25.772 --> 00:03:30.210 
就像您在屏幕上看到的一樣
會有兩塊數據是您需要從這個應用抓取

00:03:30.344 --> 00:03:32.713 
第一 信息展示的佈局 它存放的地方

00:03:32.980 --> 00:03:36.216 
第二 外觀 它長成什麼樣子

00:03:36.750 --> 00:03:38.452 
首先我們將從應用佈局開始

00:03:38.519 --> 00:03:39.853 
它將給我們演示

00:03:39.920 --> 00:03:43.390 
最佳實例一 引用自動佈局

00:03:43.724 --> 00:03:46.059 
特別是引用棧視圖

00:03:46.960 --> 00:03:49.563 
引用自動佈局意味着處理視圖間的關係

00:03:49.630 --> 00:03:53.400 
協同抵抗那些對象約束

00:03:53.901 --> 00:03:56.837 
對於那些過去已經
使用過自動佈局的朋友

00:03:57.137 --> 00:04:01.008 
您就知道和
對象約束一起工作非常靈活和強大

00:04:01.475 --> 00:04:02.643 
還有一些其他的東西

00:04:03.477 --> 00:04:07.681 
例如 您需要不停地去定義一套約束

00:04:08.182 --> 00:04:09.850 
在這裏 棧視圖就要派上用場了

00:04:10.417 --> 00:04:11.885 
如果約束只是把

00:04:11.952 --> 00:04:16.990 
舊有的位置尺寸信息抽象成關係的話

00:04:17.156 --> 00:04:18.992 
棧視圖將走得更遠

00:04:19.493 --> 00:04:22.529 
它將會把這些關係抽象成行爲

00:04:22.896 --> 00:04:25.599 
讓我們來進一步應用棧視圖
到我們的應用中

00:04:26.200 --> 00:04:27.634 
切換到Xcode

00:04:28.402 --> 00:04:31.205 
這裏就是我們強大的新功能

00:04:31.572 --> 00:04:35.209 
直接在Interface
Builder中應用棧視圖

00:04:35.275 --> 00:04:36.877 
我並不認爲還有比這更簡單的了

00:04:36.944 --> 00:04:40.581 
我只是簡單地選擇視圖放入棧視圖

00:04:41.148 --> 00:04:46.453 
然後使用畫佈下方的棧按鈕
直接點擊

00:04:46.520 --> 00:04:47.855 
現在 我們就擁有了一個棧視圖

00:04:48.722 --> 00:04:50.257 
一旦我們擁有了棧視圖

00:04:50.324 --> 00:04:53.694 
我們可以就調校棧視圖不同的屬性

00:04:53.861 --> 00:04:55.662 
現在 在明天的自動佈局課程

00:04:55.729 --> 00:04:57.865 
他們將深入棧視圖所有不同的屬性

00:04:58.065 --> 00:04:59.266 
但是我們將聚焦在一點

00:04:59.333 --> 00:05:00.634 
那就是對齊

00:05:01.468 --> 00:05:03.237 
如果我們切換回我的模型

00:05:04.538 --> 00:05:06.673 
您會看到我的設計師要求

00:05:06.740 --> 00:05:09.676 
基線與這些標籤對齊

00:05:10.811 --> 00:05:12.312 
什麼是基線對齊

00:05:13.347 --> 00:05:15.482 
基線對齊大致上可以允許您將

00:05:15.549 --> 00:05:19.152 
不同大小的文字對齊 看起來舒適

00:05:19.219 --> 00:05:22.322 
如果您有文本性對象像按鈕 標籤

00:05:22.389 --> 00:05:23.624 
和分斷控制按鈕

00:05:23.690 --> 00:05:29.997 
您想要基線對齊它們
而不是使用居上居中或居下

00:05:31.265 --> 00:05:33.834 
讓我們回到Interface 
Builder我們可以

00:05:34.368 --> 00:05:37.371 
如果進入屬性檢測器 我可以做什麼

00:05:38.639 --> 00:05:43.477 
我可改變棧視圖的對齊方式爲基線對齊

00:05:43.544 --> 00:05:44.778 
這是第一年也是最後一年

00:05:44.845 --> 00:05:46.647 
如果您有多行文本的話

00:05:46.713 --> 00:05:48.415 
您可以根據第一行

00:05:48.482 --> 00:05:49.550 
或者最後一行文本

00:05:49.616 --> 00:05:52.319 
在這個例子中 總共就只有一行
也就無關緊要了

00:05:53.487 --> 00:05:55.489 
看起來真棒 我們選擇第一行

00:05:56.356 --> 00:05:58.258 
讓我們繼續應用棧視圖

00:05:58.325 --> 00:06:00.661 
我可以將這個標籤中的棧放入棧視圖

00:06:01.228 --> 00:06:02.329 
我可以增加圖片視圖

00:06:02.396 --> 00:06:05.132 
我把它嵌入到棧視圖

00:06:05.199 --> 00:06:07.601 
Interface Builder
就會自動推理

00:06:07.668 --> 00:06:11.071 
對齊方向等不同的屬性

00:06:11.939 --> 00:06:13.841 
現在 我們有了這個外部棧視圖

00:06:13.907 --> 00:06:16.109 
我們需要將它放入表單元格

00:06:16.210 --> 00:06:17.444 
表單元格本身不是棧視圖

00:06:17.511 --> 00:06:19.880 
爲了做到這點 我們要使用原始約束

00:06:21.281 --> 00:06:25.385 
我要去把我的TIE 戰鬥機

00:06:25.886 --> 00:06:30.123 
打開來加一些約束 
我要在這個跳出界面上澄清兩件事情

00:06:30.190 --> 00:06:31.525 
第一件

00:06:31.592 --> 00:06:33.026 
什麼是佈局邊緣

00:06:33.093 --> 00:06:34.094 
具體指哪些東西

00:06:34.895 --> 00:06:37.331 
佈局邊緣就是一個視圖上
邊緣內側的空白部分

00:06:37.631 --> 00:06:40.467 
系統提供了一些默認值

00:06:40.534 --> 00:06:43.437 
如果您使用佈局邊緣

00:06:43.637 --> 00:06:48.575 
它們將根據不同的上下文自動適應
例如不同的設備或者視圖層次等級結構

00:06:49.443 --> 00:06:54.114 
一般地如果您有按鈕 標籤

00:06:54.181 --> 00:06:56.517 
這些用戶將交互或者看到的內容

00:06:56.783 --> 00:06:58.886 
如果不是約束到另一個表視圖的話

00:06:58.952 --> 00:07:00.587 
您希望約束它們到邊緣

00:07:01.221 --> 00:07:02.723 
如果您有一些像圖片視圖

00:07:02.789 --> 00:07:05.659 
它們待在您整個表視圖單元格後面

00:07:05.926 --> 00:07:07.661 
那把它們約束到邊界相比就比較合理

00:07:07.728 --> 00:07:09.129 
甚至這些邊緣會改變

00:07:09.196 --> 00:07:11.665 
您的圖片還是仍然

00:07:11.899 --> 00:07:12.833 
留在後臺

00:07:13.567 --> 00:07:16.136 
如果我取消選中約束

00:07:16.203 --> 00:07:18.539 
約束和邊緣
您可以在這裏看到更大的數據

00:07:18.605 --> 00:07:20.807 
Interface Builder
默認調整到邊緣

00:07:20.874 --> 00:07:22.543 
非常有幫助
因爲這正是我們想要的

00:07:23.410 --> 00:07:26.880 
第二件我想去澄清的是這裏這個
我將要使用的更新框

00:07:27.181 --> 00:07:28.448 
更新框促成

00:07:28.515 --> 00:07:31.752 
Interface Builder
移動您在IB畫布中的視圖

00:07:31.818 --> 00:07:33.954 
使得它們符合運行時的約束條件

00:07:34.421 --> 00:07:36.123 
當我增加約束

00:07:36.190 --> 00:07:37.658 
我有一系列選擇去實現

00:07:38.425 --> 00:07:40.494 
如果我說所有容器內的框架

00:07:40.561 --> 00:07:42.963 
它指所有在
表視圖單元格中的子視圖運行時

00:07:43.030 --> 00:07:44.498 
移動它們到

00:07:44.565 --> 00:07:46.266 
約束指示的地方

00:07:47.367 --> 00:07:51.572 
然而 如果我有一個大視圖
而其中又有非常多的子視圖

00:07:52.139 --> 00:07:54.174 
也許我只是想移動當前實例

00:07:54.241 --> 00:07:56.109 
我正在工作的那些東西

00:07:56.176 --> 00:07:58.412 
這裏 我們可以使用折中方案

00:07:58.478 --> 00:08:01.715 
它只會移動我增加的新約束中的

00:08:01.782 --> 00:08:02.950 
那些條目

00:08:03.784 --> 00:08:05.552 
現在 我只剩下一件事情 並不重要了

00:08:06.019 --> 00:08:08.989 
我們需要給所有框架增加約束

00:08:10.257 --> 00:08:11.592 
我們正在做着呢

00:08:12.192 --> 00:08:14.962 
好 下一件事情 我需要更改棧視圖中

00:08:15.028 --> 00:08:17.030 
每一個條目的對齊方式

00:08:17.431 --> 00:08:19.099 
另一個這麼操作的例子

00:08:19.166 --> 00:08:21.768 
我需要改變它爲填充 可是現在

00:08:21.902 --> 00:08:24.338 
那的確不是我需要尋找的 對嗎

00:08:25.506 --> 00:08:28.408 
棧視圖建立在自動佈局上

00:08:28.475 --> 00:08:30.310 
意味着它可以使用約束

00:08:30.377 --> 00:08:32.446 
去非常好地調校您的佈局

00:08:33.212 --> 00:08:37.183 
所以 如果我想要使這個圖片
擁有1比1的比例 甚至是在棧視圖中

00:08:37.251 --> 00:08:40.354 
我仍然可以增加一個約束來增加
一個比例值

00:08:41.255 --> 00:08:44.958 
然後改變乘數到1比1

00:08:47.828 --> 00:08:50.597 
接下來我要在圖片視圖和右手邊內容間

00:08:50.664 --> 00:08:52.933 
增加一些空間

00:08:53.901 --> 00:08:56.370 
因爲我的設計師希望在那裏
會有一些間距

00:08:57.371 --> 00:08:59.806 
現在我需要改變間距的棧視圖

00:08:59.873 --> 00:09:04.811 
完全被標籤以及其他棧視圖封閉了嗎
那我要怎麼得到它

00:09:05.279 --> 00:09:08.081 
Interface Builder
得到封閉視圖的幾種方法是

00:09:08.148 --> 00:09:10.350 
我可以使用跳躍條或者使用輪廓視圖

00:09:10.551 --> 00:09:12.119 
但是我要展示我最喜歡的方式

00:09:12.186 --> 00:09:14.221 
Xcode高級提示一

00:09:14.588 --> 00:09:15.656 
也是目前最快的選擇

00:09:16.290 --> 00:09:19.092 
如果我按住shift右擊或者
control左擊

00:09:19.159 --> 00:09:21.128 
我會在鼠標指示處看到一個全面的列表

00:09:21.195 --> 00:09:24.164 
那麼我就可以簡單地選擇我需要的

00:09:26.200 --> 00:09:28.702 
我選好後可以改變間距

00:09:29.803 --> 00:09:31.605 
到我想要的那樣 就是這樣

00:09:33.006 --> 00:09:35.309 
最後一件我想要
演示給你們的關於棧視圖的是

00:09:35.375 --> 00:09:38.178 
您如何同時使用多個棧視圖

00:09:38.245 --> 00:09:41.181 
去獲取您想要的佈局

00:09:41.748 --> 00:09:43.650 
如果讓我們來看看需求說明

00:09:44.985 --> 00:09:48.789 
您就能看到這一套標籤設計師想要它們

00:09:48.856 --> 00:09:51.692 
表現得像一個整體並且

00:09:51.758 --> 00:09:53.126 
垂直居中於表格視圖單元格

00:09:54.494 --> 00:09:56.563 
我們可以把右手邊的這些內容

00:09:56.630 --> 00:09:58.632 
放在另外一個棧視圖中並且調整對齊

00:09:59.199 --> 00:10:00.133 
讓我來演示一下

00:10:01.101 --> 00:10:04.371 
我會使用我的最快選擇來到棧視圖

00:10:05.372 --> 00:10:07.207 
我要在另外一個棧視圖中嵌入它

00:10:08.408 --> 00:10:10.944 
您會看到這個藍色稍有變深

00:10:11.478 --> 00:10:14.248 
意思是現在可以改變居中對齊了

00:10:15.482 --> 00:10:18.118 
現在對齊方式影響到了非堆棧方向

00:10:18.185 --> 00:10:20.487 
因爲這是一個垂直棧視圖

00:10:20.554 --> 00:10:22.556 
它將水平對齊

00:10:22.623 --> 00:10:24.224 
可是我要改變的是垂直對齊方式

00:10:24.658 --> 00:10:26.793 
所以我要改變通道爲水平對齊

00:10:28.428 --> 00:10:31.064 
您可以看到運用非常小的約束

00:10:31.131 --> 00:10:33.734 
通過棧視圖 
我就能精確得到想要的佈局

00:10:35.769 --> 00:10:37.838 
在應用自動佈局時 我們的建議是

00:10:37.905 --> 00:10:40.974 
使用棧視圖並且優先使用它

00:10:41.041 --> 00:10:43.777 
然後您只需要使用最原始的約束即可

00:10:44.178 --> 00:10:45.546 
我們認爲您可以使用棧視圖

00:10:45.612 --> 00:10:47.114 
來開發大部分UI

00:10:47.181 --> 00:10:48.315 
這使它變得簡單

00:10:48.382 --> 00:10:50.284 
這使不同佈局測試變得簡便

00:10:50.551 --> 00:10:54.087 
不再需要調整一堆約束

00:10:54.354 --> 00:10:55.889 
維護也變得簡單

00:10:55.956 --> 00:10:57.224 
以後回頭只需要

00:10:57.291 --> 00:10:59.026 
編輯一個您的文件了

00:11:00.827 --> 00:11:02.229 
好的 這就是

00:11:03.463 --> 00:11:06.533 
接下來 讓我們來看下

00:11:06.600 --> 00:11:08.502 
我們的應用外觀

00:11:08.769 --> 00:11:12.673 
第一件事情
我需要準備設計時刻的畫布

00:11:14.708 --> 00:11:16.810 
我需要通過編輯畫佈菜單來做到這點

00:11:16.877 --> 00:11:19.012 
Interface 
Builder有很多選項

00:11:19.079 --> 00:11:20.948 
來自定義畫在畫布上的內容

00:11:21.415 --> 00:11:24.084 
例如這些棧視圖爲我創建的藍色背景

00:11:24.151 --> 00:11:26.353 
在佈局的時候就非常有用

00:11:26.420 --> 00:11:29.223 
我可以看到棧視圖具體多大

00:11:29.456 --> 00:11:31.425 
可是在設計的時候 我想要看到

00:11:31.491 --> 00:11:34.328 
它跑起來具體長什麼樣

00:11:34.995 --> 00:11:36.597 
所以我就直接關掉這些

00:11:38.265 --> 00:11:41.435 
好 在示例講演外觀的章節

00:11:41.502 --> 00:11:45.072 
我們要看下使用Interface 
Builder的3個最佳示例

00:11:45.939 --> 00:11:47.274 
我們回到我們的需求說明

00:11:47.341 --> 00:11:48.842 
我們看第一個

00:11:49.910 --> 00:11:52.980 
我們的設計師定義了頁頭和頁身

00:11:53.046 --> 00:11:57.184 
而不是外在的字體或者字體大小

00:11:57.251 --> 00:11:58.652 
這些是什麼

00:11:58.719 --> 00:12:01.088 
這些叫做動態類型風格

00:12:01.154 --> 00:12:03.657 
它們由系統定義 當您使用它們的時候

00:12:03.757 --> 00:12:04.758 
它允許系統

00:12:04.825 --> 00:12:08.462 
自動調整有效的大小和字體

00:12:08.529 --> 00:12:12.266 
適應在運行時候根據用戶偏好的
一系列要求

00:12:12.499 --> 00:12:15.669 
例如用戶可以自行更改爲

00:12:15.736 --> 00:12:16.970 
更大的字體

00:12:17.404 --> 00:12:19.373 
當您的應用使用了動態類型

00:12:19.439 --> 00:12:23.544 
它會自動適應那些字體改變
當您使用了自動佈局

00:12:23.610 --> 00:12:25.245 
視圖會圍繞它而自動調整

00:12:26.213 --> 00:12:29.049 
在InterfaceBuilder
我們可以非常簡單地應用它

00:12:30.150 --> 00:12:32.819 
我只要選擇
我想要使用的自動類型的標籤

00:12:33.220 --> 00:12:34.254 
然後進入視察器

00:12:36.557 --> 00:12:41.094 
選出一個字體類型而不是外加的字體

00:12:41.228 --> 00:12:43.664 
在這個例子裏我會選擇頁頭

00:12:44.264 --> 00:12:45.899 
我已經在剩下的標籤上應用了它

00:12:45.966 --> 00:12:48.335 
所以我們動態類型也講完了

00:12:50.804 --> 00:12:52.840 
接下來我們要帶上

00:12:52.906 --> 00:12:55.242 
圖片視圖 我們要使用

00:12:55.309 --> 00:12:57.044 
兩種最好的示例來演示

00:12:57.277 --> 00:13:00.080 
一個是可設計性 另一個是可視察性

00:13:00.747 --> 00:13:04.184 
可設計性讓在Interface 
Builder畫布中可實現

00:13:04.251 --> 00:13:05.552 
看到我們自定義繪畫的代碼

00:13:06.320 --> 00:13:07.721 
讓我們來看看一些這樣的代碼

00:13:08.722 --> 00:13:12.359 
我要來打開工程導航

00:13:12.459 --> 00:13:13.994 
增加一些文件

00:13:14.361 --> 00:13:16.330 
託尼剛上線

00:13:16.396 --> 00:13:18.098 
遠程傳送給我這個代碼

00:13:18.632 --> 00:13:20.467 
讓我們把它加入我們的工程

00:13:21.235 --> 00:13:24.505 
然後打開它 打開的時候

00:13:24.571 --> 00:13:27.407 
我要給大家演示Xcode高級提示三

00:13:27.474 --> 00:13:29.076 
高級導航

00:13:29.810 --> 00:13:34.248 
如果option加shift點擊這
個文件 我得到一個小顯示器

00:13:35.749 --> 00:13:39.186 
這個顯示器允許我更改具體
我想要打開文件的目標

00:13:39.520 --> 00:13:42.990 
所以我們選擇一個新標籤
選擇一個新分區

00:13:43.123 --> 00:13:44.258 
如果我有多個標籤

00:13:44.324 --> 00:13:47.661 
我甚至可以選擇特定的分區
裏面甚至有沒有被打開的標籤

00:13:48.195 --> 00:13:51.465 
如果我使用command鍵
我甚至可以在一個新窗口中打開

00:13:52.499 --> 00:13:54.535 
在這個示例我只是使用助手編輯器

00:13:58.071 --> 00:14:01.608 
應用可設計性實際上只需要簡單的兩步

00:14:02.242 --> 00:14:04.745 
您所需要做的是用IB可設計性

00:14:04.811 --> 00:14:06.346 
標記一個UI子視圖

00:14:06.713 --> 00:14:09.283 
然後用它設置一個自定義類

00:14:10.751 --> 00:14:13.353 
所以我們選擇我們的圖片視圖

00:14:13.420 --> 00:14:16.290 
或者將要成爲我們的圖片視圖
改變身份檢查器

00:14:16.356 --> 00:14:20.027 
加入我們自定義的子類

00:14:20.527 --> 00:14:22.829 
Interface Builder
會創建我們的項目

00:14:22.896 --> 00:14:26.900 
啓動一個進程來渲染我們的代碼

00:14:26.967 --> 00:14:29.236 
並在畫布中演示出來

00:14:30.537 --> 00:14:34.474 
如果我們改變代碼

00:14:34.541 --> 00:14:38.679 
它將自動演示這些改變創建它們

00:14:39.012 --> 00:14:42.015 
並會在Interface 
Builder中應用它們

00:14:45.152 --> 00:14:47.721 
接下來我們想要採用可視察性

00:14:48.088 --> 00:14:51.058 
您可以看到在這裏我把一些不同的屬性
標記爲增加IB可視察性

00:14:51.124 --> 00:14:53.794 
當您標記一個屬性爲IB可視察性時

00:14:53.861 --> 00:14:56.730 
Interface Builder
可爲您創建一個視察器

00:14:57.865 --> 00:15:01.301 
如果我選擇圖片視圖來到屬性視察器

00:15:02.169 --> 00:15:03.770 
您可以看到我標記的三個屬性

00:15:03.837 --> 00:15:06.006 
爲可視察性 顯示在視察器中

00:15:06.974 --> 00:15:08.408 
我們可以快速採用這些屬性

00:15:09.142 --> 00:15:13.113 
所以我可以說
我要增加那個小圖片在那裏

00:15:13.180 --> 00:15:17.150 
我們要使用我們的畫筆
如果我回憶正確 說明裏說到兩點

00:15:18.352 --> 00:15:21.321 
我們也可以給它一個不錯的邊緣

00:15:22.589 --> 00:15:24.124 
現在 這裏我們的可設計性

00:15:24.191 --> 00:15:25.659 
和可視察性在同時工作

00:15:25.726 --> 00:15:28.529 
來幫助您快速地在您的設計上重複書寫

00:15:28.695 --> 00:15:32.032 
我並沒有編譯和運行過
但是我可以精確地看到

00:15:32.099 --> 00:15:33.767 
在運行時候的樣子

00:15:33.834 --> 00:15:35.402 
這都歸功於可設計性和可視察性

00:15:38.105 --> 00:15:41.341 
這就是我們關於運用

00:15:41.408 --> 00:15:43.243 
動態類型可設計性和可視察性

00:15:43.310 --> 00:15:45.179 
來調整我們應用外觀的章節

00:15:47.147 --> 00:15:51.451 
現在 我們知道我們的應用

00:15:51.518 --> 00:15:53.220 
不是都由一個場景組成 

00:15:53.854 --> 00:15:57.624 
除非您寫幻燈片應用大部分情況下

00:15:57.691 --> 00:15:59.660 
您會有多個場景

00:15:59.726 --> 00:16:04.398 
如果我放大Storyboard
我可以看到有許多場景

00:16:05.332 --> 00:16:08.702 
您可以使用Segue
將一個場景加入到您應用的流中

00:16:09.403 --> 00:16:12.239 
創建一個Segue我可以
control拖拽一個視圖控制器

00:16:12.306 --> 00:16:15.175 
或者一個對象 它將初始化
一個Segue 然後選擇

00:16:15.242 --> 00:16:17.277 
我想要的Segue的類型

00:16:17.344 --> 00:16:19.279 
在這個例子中我將增加一個關係

00:16:19.346 --> 00:16:22.583 
來增加另外一個
標籤到我們的標籤欄控制器

00:16:24.318 --> 00:16:26.420 
現在我們一旦創建Segue
我意識到我似乎

00:16:26.486 --> 00:16:30.123 
想要在這個表格視圖控制器中實現導航

00:16:30.190 --> 00:16:32.226 
所以
我將在一個導航控制器中嵌入這個

00:16:33.060 --> 00:16:34.294 
我將要選擇編輯器菜單插入

00:16:34.361 --> 00:16:37.831 
在一個導航控制器中插入這個

00:16:39.166 --> 00:16:42.169 
這些是Interface 
Builder會幫到我們的地方

00:16:42.236 --> 00:16:43.837 
這是另一個Xcode高級提示

00:16:44.471 --> 00:16:47.875 
Interface 
Builder針對這個特定的場景 

00:16:47.941 --> 00:16:49.576 
展示了導航條和標籤條

00:16:49.910 --> 00:16:51.612 
這些對象並沒有被添加到我們的場景裏

00:16:51.678 --> 00:16:54.281 
Interface Builder
並沒有添加這些到場景

00:16:54.348 --> 00:16:57.384 
它只是讓您看到當您給出一些上下文後

00:16:57.451 --> 00:17:00.087 
您的應用具體看起來會怎麼樣

00:17:00.220 --> 00:17:02.823 
這就不需要編譯和運行

00:17:02.956 --> 00:17:05.492 
就能針對不同的上下文進行設計

00:17:06.560 --> 00:17:08.762 
選擇您的視圖控制器
您可以看到您的模擬矩陣

00:17:08.829 --> 00:17:11.865 
這些是屬性的名字

00:17:12.999 --> 00:17:14.367 
然後來到屬性視察器

00:17:15.368 --> 00:17:17.137 
您可以看到我的模擬矩陣

00:17:17.570 --> 00:17:19.373 
它們都說是被推理的

00:17:19.439 --> 00:17:21.775 
被推理的
基本上是使用圍繞我的上下文

00:17:21.974 --> 00:17:25.679 
我們知道我們在一個標籤控制器裏面
我們知道我們在一個導航控制器裏面

00:17:25.746 --> 00:17:28.448 
Interface Builder
就會知道去顯示哪個條

00:17:28.549 --> 00:17:30.984 
我可以覆蓋任何這些我想要的

00:17:31.652 --> 00:17:34.154 
我可以說實際上我想要

00:17:34.221 --> 00:17:35.656 
它看起來像一個提示框

00:17:35.722 --> 00:17:36.857 
如果我有內容在這個框裏

00:17:36.924 --> 00:17:38.792 
如果頂部這條是黑色的會怎樣

00:17:39.860 --> 00:17:41.161 
我會把它設置成被推理的

00:17:42.362 --> 00:17:46.700 
所有這些矩陣數據不會影響

00:17:46.767 --> 00:17:49.136 
您實際運行時的應用 除了一個例外

00:17:49.203 --> 00:17:51.004 
那就是尺寸模擬矩陣

00:17:51.505 --> 00:17:53.841 
尺寸模擬矩陣
實際上會改變視圖控制器的尺寸

00:17:53.907 --> 00:17:55.876 
但是一般情況下

00:17:55.943 --> 00:17:58.312 
把它放入自動
調整大小的視圖控制層次結構

00:17:58.812 --> 00:18:01.748 
如果您不適用視圖控制器
它也是非常有幫助的

00:18:01.815 --> 00:18:03.984 
例如您想要設置您自己應用的大小

00:18:04.852 --> 00:18:08.455 
甚至當您的應用運行在不同設備上

00:18:08.522 --> 00:18:10.023 
您想要設計一個您腦中特定的尺寸

00:18:10.090 --> 00:18:12.626 
它也將會是有幫助的

00:18:12.693 --> 00:18:17.297 
我的說明是針對iPhone 6 
Plus的 所以我可以改變

00:18:17.364 --> 00:18:20.534 
屏幕尺寸爲5.5英寸

00:18:21.268 --> 00:18:24.771 
可以在如此規格尺寸的視圖控制器上
進行編輯設計

00:18:25.706 --> 00:18:28.275 
Interface 
Builder其他屬性今天不討論

00:18:28.342 --> 00:18:31.912 
它們能夠允許您使用預覽助手
觀察到您的應用在不同的設備上

00:18:31.979 --> 00:18:34.381 
看起來會怎麼樣

00:18:34.815 --> 00:18:36.984 
但是當您腦中有個特定的上下文的時候

00:18:37.351 --> 00:18:39.119 
這真的會非常有用 好吧

00:18:41.421 --> 00:18:42.723 
讓我們回到推理

00:18:42.823 --> 00:18:44.324 
讓我們完成我們的視圖控制器

00:18:45.526 --> 00:18:47.861 
給它一個標題 朋友

00:18:48.896 --> 00:18:50.898 
讓我們增加一些標籤按鈕項

00:18:52.833 --> 00:18:57.604 
我們已經增加
一項這使得我們可以邀請新朋友

00:18:58.138 --> 00:19:00.641 
使用Xcode 7
我可以增加多個條目項

00:19:00.707 --> 00:19:01.942 
到我的導航項

00:19:10.217 --> 00:19:11.885 
這些都是些小功能啊 對吧

00:19:14.154 --> 00:19:17.324 
讓我們使用一個Segue來完成它

00:19:17.391 --> 00:19:20.227 
使它看起來符合情景

00:19:20.294 --> 00:19:24.031 
如果您放大看 我們有一個不錯的開始

00:19:25.632 --> 00:19:28.101 
就像我會根據功能或者重用

00:19:28.168 --> 00:19:31.572 
重構我的代碼

00:19:31.638 --> 00:19:32.873 
到幾個不同的文件

00:19:32.940 --> 00:19:35.375 
我現在使用Interface
可以實現相同的事情了

00:19:36.710 --> 00:19:40.013 
如果我只是選擇我想要的視圖控制器

00:19:40.080 --> 00:19:43.016 
來到編輯器菜單
我可選擇重構到Storyboard

00:19:44.051 --> 00:19:45.485 
您可以寫入一個名字 我叫它跟隨

00:19:45.552 --> 00:19:47.154 
因爲這是我們的跟隨標籤

00:19:47.387 --> 00:19:50.090 
Interface Builder
會創建一個新Storyboard 

00:19:50.157 --> 00:19:52.926 
把這些
視圖控制器移入Storyboard

00:19:53.093 --> 00:19:56.530 
放置一個關聯到我們舊的
Storyboard中的場景

00:19:57.097 --> 00:20:00.067 
現在我們使用Storyboard
就顯得真簡單了

00:20:10.377 --> 00:20:13.013 
讓我們回到幻燈片

00:20:13.080 --> 00:20:15.015 
我們看到相當數量不同的東西

00:20:15.082 --> 00:20:16.950 
所以讓我們簡單概述下

00:20:19.620 --> 00:20:22.322 
我已經給了您5個最好的實例

00:20:22.389 --> 00:20:24.992 
我們採用了棧視圖和動態類型

00:20:25.058 --> 00:20:27.294 
來增強你們應用的可適應性

00:20:27.361 --> 00:20:30.030 
我們已經採用可設計性和可視察性

00:20:30.097 --> 00:20:32.933 
使得在不需要編譯和運行的情況下
可以快速顯示您的設計

00:20:33.300 --> 00:20:35.636 
最後
我們使用Storyboard關聯

00:20:35.702 --> 00:20:38.539 
來確保像處理我們的代碼那樣

00:20:38.605 --> 00:20:39.740 
模塊化我們的界面

00:20:41.141 --> 00:20:42.176 
我也給了你們一個提示

00:20:42.242 --> 00:20:43.710 
我希望你們會覺得有幫助

00:20:43.777 --> 00:20:47.247 
當你們使用Interface 
Builder的時就像可以選擇東西

00:20:47.314 --> 00:20:48.782 
可以自定義畫布

00:20:48.849 --> 00:20:51.752 
使用多個條目項打開正是您想要的文件

00:20:51.818 --> 00:20:55.022 
當然也可以使用模擬矩陣的好處

00:20:55.122 --> 00:20:58.525 
在設計的時刻
就能看到您應用的具體情況

00:21:00.460 --> 00:21:01.995 
可是如果我點擊編譯會怎樣

00:21:02.663 --> 00:21:05.632 
讓我們來講講踏它
在編譯的時候的一些情況吧

00:21:07.167 --> 00:21:09.036 
現在 去做到這點 我們需要退後一步

00:21:09.102 --> 00:21:11.038 
看看設計時刻的情況

00:21:11.104 --> 00:21:13.040 
在運行的時候 我們會走向哪裏

00:21:13.607 --> 00:21:16.410 
在設計的時候 你們工作於XML文件

00:21:16.810 --> 00:21:20.781 
在編譯的時候
一個叫做IB的進程

00:21:20.914 --> 00:21:23.851 
把這些文件編譯成nib文件

00:21:24.184 --> 00:21:27.688 
Nib文件是
非常小特別優化了的二進制文件

00:21:27.754 --> 00:21:30.891 
它使用一個
叫做鍵值壓縮的進程來創建這些

00:21:32.559 --> 00:21:34.695 
我有一些例子來看下它們是怎麼樣的

00:21:35.362 --> 00:21:37.231 
Interface Builder
編譯Storyboard

00:21:37.297 --> 00:21:38.365 
它首先會做兩件事情

00:21:38.699 --> 00:21:41.969 
第一它嘗試最優化您應用的性能

00:21:42.536 --> 00:21:44.505 
第二它會盡可能少地

00:21:44.571 --> 00:21:45.973 
創建nib文件

00:21:46.807 --> 00:21:50.978 
如果我有一個視圖控制器
它有一個視圖和一些子視圖

00:21:52.312 --> 00:21:55.816 
Interface Builder
編譯時爲此視圖控制器創建nib文件

00:21:55.883 --> 00:21:57.918 
-並且創建一個nib文件給這個視圖

00:21:59.219 --> 00:22:00.921 
爲什麼是兩個nib文件呢

00:22:01.488 --> 00:22:04.625 
爲視圖控制器和視圖建兩個nib文件

00:22:04.825 --> 00:22:07.394 
意味着視圖層次結構可以按照要求加載

00:22:08.662 --> 00:22:10.764 
來看下這裏的另一個示例
它有一個表視圖控制器

00:22:10.831 --> 00:22:14.067 
和一個導航控制器 
看起來甚至更有趣了

00:22:14.801 --> 00:22:18.038 
它又一次根據Segue
關係創建儘可能少的nib文件 

00:22:18.472 --> 00:22:22.176 
我們知道那兩個視圖控制器在一起

00:22:22.242 --> 00:22:24.311 
所以我們會把它們放入相同的nib中

00:22:25.279 --> 00:22:28.749 
接下來我們會
給您一個表視圖的nib文件

00:22:28.982 --> 00:22:31.852 
也會爲單元格創建一個nib文件

00:22:33.387 --> 00:22:35.289 
所以在運行的時候這些會怎麼樣呢

00:22:36.623 --> 00:22:40.327 
UI Storyboard API
時候分配一個Storyboard

00:22:40.460 --> 00:22:44.331 
起初您所有分配的內存是分配給

00:22:44.398 --> 00:22:46.300 
UI Storyboard實例本身

00:22:46.533 --> 00:22:48.402 
不是視圖控制器也不是視圖

00:22:49.403 --> 00:22:51.371 
當您初始化視圖控制器時

00:22:51.438 --> 00:22:54.541 
它將爲視圖控制器載入nib文件

00:22:54.608 --> 00:22:58.111 
直到有人要求 
實際並沒有視圖層次結構被加載

00:22:59.713 --> 00:23:02.316 
同樣的 我給予導航控制器

00:23:02.382 --> 00:23:04.885 
和表視圖控制器一個標示
這樣我就可以使用

00:23:04.952 --> 00:23:07.588 
初始化API來得到

00:23:07.654 --> 00:23:09.556 
那個視圖控制器實例了

00:23:09.623 --> 00:23:11.291 
但是再一次 直到有人要求它

00:23:11.358 --> 00:23:12.893 
視圖並沒有被加載到內存

00:23:14.828 --> 00:23:16.897 
那這些表視圖單元格呢
這裏就比較有趣了

00:23:17.497 --> 00:23:22.503 
Interface Builder
自動地將表視圖單元格nib文件同

00:23:22.569 --> 00:23:25.272 
在您設置的
重用標示器下的表視圖註冊到一起

00:23:25.339 --> 00:23:27.274 
那個表視圖單元

00:23:27.941 --> 00:23:30.043 
現在那就意味着這些單元格

00:23:30.110 --> 00:23:33.480 
在有人使用標示器
實際DQ這個單元格之前

00:23:33.547 --> 00:23:34.615 
並不會被加載

00:23:35.249 --> 00:23:39.119 
現在這也意味着
在運行的時候nib文件

00:23:39.186 --> 00:23:42.789 
如果被加載進內存
它可以快速初始化它

00:23:45.292 --> 00:23:46.793 
談到編譯時的
Interface Builder

00:23:46.860 --> 00:23:48.996 
就有一些可以來談一談了

00:23:49.463 --> 00:23:50.931 
第一個就是性能

00:23:51.164 --> 00:23:53.600 
Interface Builder
代替您

00:23:53.800 --> 00:23:56.270 
把您的應用性能調到儘可能的好

00:23:57.504 --> 00:23:59.706 
nib文件只是在需要時被加載

00:24:00.040 --> 00:24:03.010 
而且nib文件本身也非常小且優化的

00:24:04.178 --> 00:24:08.315 
Interface Builder
重用了不同的nib文件

00:24:08.382 --> 00:24:10.751 
例如在這個我們能看到的表視圖單元格

00:24:11.051 --> 00:24:13.520 
一旦運行時擁有nib文件 它就能夠

00:24:13.587 --> 00:24:17.357 
重新快速初始化 因爲需要新的單元格

00:24:18.592 --> 00:24:21.361 
最終您終於看到在編譯時刻和運行時刻

00:24:21.562 --> 00:24:24.064 
所有事物的生命週期

00:24:24.264 --> 00:24:26.600 
您也懂得了與不同的對象怎麼交互

00:24:26.800 --> 00:24:28.869 
例如視圖控制器還有視圖層次結構

00:24:30.737 --> 00:24:33.440 
我們討論設計時刻
Interface Builder

00:24:33.574 --> 00:24:36.043 
我們揭開了一些編譯時刻的內容

00:24:36.510 --> 00:24:38.212 
但是我們會花課程剩下的時間來

00:24:38.278 --> 00:24:41.181 
討論下運行時的
Interface Builder

00:24:41.248 --> 00:24:43.784 
在您有那些不同的產品和語言的時候
發生了什麼呢

00:24:43.917 --> 00:24:46.286 
談及這個我要帶上我的同事
託尼 裏恰爾迪

00:24:50.424 --> 00:24:51.358 
謝謝你 凱文

00:24:52.826 --> 00:24:53.660 
下午好

00:24:54.228 --> 00:24:56.897 
p我的名字叫託尼 就職於
Interface Builder

00:24:58.298 --> 00:25:00.534 
凱文已給了您一些超棒的練習

00:25:00.601 --> 00:25:04.071 
關於在設計時刻創建您的UI
以及他給您看了

00:25:04.137 --> 00:25:06.640 
在編譯的時候發生了些什麼

00:25:07.174 --> 00:25:09.209 
現在我會給您一些例子

00:25:09.276 --> 00:25:12.446 
教會您怎麼在運行的時候增加動態行爲

00:25:13.981 --> 00:25:16.783 
Interface Builder
支持三個一般機制

00:25:16.984 --> 00:25:18.986 
來控制運行時候的UI

00:25:20.087 --> 00:25:21.922 
先用IB 
action和IB outlets

00:25:21.989 --> 00:25:26.593 
在您的Storyboard
和源碼之間創建聯繫

00:25:28.462 --> 00:25:31.098 
您也可以自定義您Segue的行爲

00:25:31.532 --> 00:25:33.433 
或者動態初始化

00:25:33.500 --> 00:25:36.703 
及使用Storyboard API
增加視圖控制器

00:25:38.238 --> 00:25:41.542 
最終您可以使用自動佈局和自動尺寸

00:25:41.675 --> 00:25:44.077 
來定義您的UI怎麼根據容器的改變

00:25:44.144 --> 00:25:45.445 
自動適應尺寸

00:25:46.213 --> 00:25:47.381 
讓我們從連接開始

00:25:49.183 --> 00:25:51.151 
在Swift IB outlets

00:25:51.218 --> 00:25:53.787 
默認內部展開是可選擇的

00:25:54.922 --> 00:25:57.224 
如果您在視圖控制器和

00:25:57.291 --> 00:25:59.960 
一個它視圖層次
中的視圖之間創建了outlet

00:26:00.027 --> 00:26:02.229 
在視圖加載後您可以安全地展開

00:26:03.764 --> 00:26:05.799 
有的時候 您會有外加的屬性

00:26:05.866 --> 00:26:08.135 
儲藏在您的視圖控制器中 它會影響

00:26:08.202 --> 00:26:11.538 
視圖的外觀 如果那樣的話 您會想要

00:26:11.605 --> 00:26:14.141 
使用可選鏈接同屬性的設置觀察器一起

00:26:14.208 --> 00:26:16.577 
展開這個屬性

00:26:17.311 --> 00:26:19.179 
如果您的outlet還沒有被鏈接

00:26:21.682 --> 00:26:24.651 
IB Action
允許您通過手勢識別器和控制器

00:26:24.718 --> 00:26:27.888 
來回應事件

00:26:28.555 --> 00:26:30.891 
您有可能在沒有從當前視圖導航走的
情況下

00:26:31.058 --> 00:26:33.160 
使用action去更新一些狀態

00:26:34.828 --> 00:26:37.464 
您也可以使用
IB Action去動態地選擇

00:26:37.531 --> 00:26:39.867 
哪一個Segue
是在事件之後您想要去執行的

00:26:43.904 --> 00:26:45.706 
接着
我們有Storyboard API

00:26:45.772 --> 00:26:47.641 
mac上
的類UI Storyboard

00:26:47.708 --> 00:26:49.409 
或者NS Storyboard

00:26:49.476 --> 00:26:52.179 
允許您從一個
Storyboard文件抓取關聯

00:26:52.246 --> 00:26:54.948 
然後從那個
Storyboard實視圖控制器

00:26:55.382 --> 00:26:57.751 
如果您有一個需要重複實例化的UI

00:26:57.818 --> 00:26:59.920 
這會非常有用

00:27:00.554 --> 00:27:03.390 
如果您在低於iOS 9或者
Mac OS10 11操作系統顯示

00:27:03.457 --> 00:27:05.225 
這也是您在應用中

00:27:05.292 --> 00:27:07.628 
鏈接多個
Storyboard的唯一途徑

00:27:09.763 --> 00:27:13.233 
我們在UI
控制器上也有許多API功能

00:27:13.300 --> 00:27:16.703 
允許您自定義您Segue行爲

00:27:16.770 --> 00:27:18.505 
今天我們針對Segue做了不少改進

00:27:18.572 --> 00:27:20.841 
來使得iOS開發儘可能地輕鬆

00:27:21.074 --> 00:27:23.710 
我們針對子類UI 
Storyboard Segue或

00:27:23.777 --> 00:27:26.480 
NS Storyboard 
Segue改進使其更輕鬆

00:27:26.547 --> 00:27:31.218 
如果您想要了解這些
請來明天的Storyboard課程

00:27:34.188 --> 00:27:35.822 
最終我們擁有了可適應性

00:27:37.191 --> 00:27:39.626 
Interface Builder
支持兩種技術

00:27:39.793 --> 00:27:42.696 
來幫助您適應您的
UI到不同的容器尺寸

00:27:44.198 --> 00:27:48.068 
第一點我們有自動佈局允許您

00:27:48.168 --> 00:27:50.904 
根據視圖之間的關係調整尺寸和位置

00:27:51.238 --> 00:27:53.841 
這樣您就不再依賴於編代碼的框架值了

00:27:55.809 --> 00:27:57.177 
在某些情形下

00:27:57.244 --> 00:28:00.981 
當您容器的長和寬超過了限定值

00:28:01.048 --> 00:28:03.517 
您需要做比較大的改動

00:28:04.184 --> 00:28:06.820 
在那些情形下我們有另外的一個大功能

00:28:06.887 --> 00:28:09.556 
叫做尺寸類可以使得它變簡單

00:28:11.892 --> 00:28:12.993 
現在我來給做您一個演示

00:28:13.060 --> 00:28:15.829 
您怎麼用運行時的
Interface Builder

00:28:15.896 --> 00:28:17.397 
來運用這三個一般技術

00:28:17.464 --> 00:28:18.699 
讓我們切到Xcode

00:28:26.740 --> 00:28:30.043 
我們將建立一個可以記錄您朋友

00:28:30.110 --> 00:28:31.912 
在他們自駕旅行中行爲軌跡的UI界面

00:28:31.979 --> 00:28:34.815 
計劃以後將它集成到凱文的
自駕旅行應用上

00:28:36.316 --> 00:28:41.355 
就像您在UI中能看到的那樣
我有三行標牌

00:28:41.822 --> 00:28:46.260 
在每一個行中我從類目裏顯示三個標牌

00:28:48.595 --> 00:28:51.298 
如果我們看下我們
應用中的Storyboard

00:28:51.365 --> 00:28:54.234 
您會發現我使用棧視圖執行了這個UI

00:28:54.868 --> 00:28:57.638 
在這個棧視圖中 我有三個容器視圖

00:28:58.906 --> 00:29:02.643 
一個容器視圖允許您在另一個控制器中

00:29:02.709 --> 00:29:04.878 
嵌入一個視圖控制器
當您擁有時在相同場景下

00:29:04.945 --> 00:29:08.081 
您想要使用多次的需要重複使用的
UI片段的時候

00:29:08.148 --> 00:29:10.450 
這將相當地有用

00:29:12.085 --> 00:29:13.187 
我嵌入的視圖控制器這裏

00:29:13.253 --> 00:29:15.022 
擁有它自己的棧視圖

00:29:15.255 --> 00:29:17.758 
在這個棧視圖裏
標包含了下面這個牌視圖控制器中的

00:29:17.824 --> 00:29:19.593 
多個實例

00:29:21.261 --> 00:29:23.764 
在每個類目中顯示的標牌數量

00:29:23.830 --> 00:29:27.201 
是被一個用戶設置控制着的
所以在設計時我並不能夠靜態地獲得它

00:29:27.935 --> 00:29:30.404 
不同於使用這裏爲這個視圖控制器

00:29:31.004 --> 00:29:32.139 
操作的容器視圖

00:29:32.206 --> 00:29:34.675 
我用
Storyboard API初始化

00:29:35.609 --> 00:29:36.944 
我根據

00:29:37.010 --> 00:29:42.182 
它在標示檢查器
設置的Storyboard ID

00:29:42.249 --> 00:29:43.717 
從代碼關聯它到這個視圖控制器

00:29:45.118 --> 00:29:47.221 
讓我們來看下我們相應的代碼

00:29:48.622 --> 00:29:51.959 
我們將使用跳躍條導航到關於我

00:29:52.025 --> 00:29:53.660 
標牌棧視圖控制器的源碼

00:30:02.069 --> 00:30:05.506 
好 您看到在我的視圖這裏加載方法 

00:30:09.776 --> 00:30:14.147 
用storybook API實例化
那個標牌視圖控制器來實現視控制器

00:30:15.082 --> 00:30:18.919 
特別地我使用從UI視圖控制器中

00:30:19.219 --> 00:30:21.121 
獲取的Storyboard屬性

00:30:21.922 --> 00:30:24.591 
然後我通過標示符執行
實例化視圖控制器

00:30:25.659 --> 00:30:30.597 
我傳入的這個標識符就跟我們
在標示檢查器裏看到的一樣

00:30:32.866 --> 00:30:35.602 
在我們增加或者實例化子類後

00:30:35.736 --> 00:30:38.071 
我們把它添加成子視圖控制器

00:30:39.072 --> 00:30:40.174 
然後我們添加它的視圖爲

00:30:40.240 --> 00:30:41.909 
我們棧中一個安置的子視圖

00:30:43.610 --> 00:30:46.547 
所以這個
Storyboard API實例化

00:30:46.613 --> 00:30:49.716 
和增加子視圖控制器方面非常棒
但是如果您想要

00:30:49.783 --> 00:30:52.619 
增加一個不同於
視圖控制器相關子視圖的時候

00:30:53.520 --> 00:30:55.522 
讓我們
回到Storyboard作爲示例

00:30:58.225 --> 00:31:00.194 
我們如果看下行爲視圖控制器頂部這裏

00:31:00.260 --> 00:31:04.731 
我在場景文檔中有一個
視圖在這裏

00:31:05.465 --> 00:31:09.603 
場景文檔允許您存儲高級別的對象與
您的視圖控制器一起

00:31:09.970 --> 00:31:14.875 
可在場景文檔中放入一個視圖 如果不
想視圖在運行時初始化視圖的一部分

00:31:16.009 --> 00:31:18.779 
在Xcode 7裏
當您在場景文檔中放入一個視圖

00:31:18.846 --> 00:31:22.015 
您選擇它
它就會顯示在您視圖控制器上方

00:31:22.082 --> 00:31:23.016 
自己的編輯器上

00:31:27.421 --> 00:31:30.357 
這就意味着它們並不是您視圖層次結構
初始部分的情況

00:31:30.424 --> 00:31:33.660 
您也可以在Storyboard
畫佈下可視化編輯您的視圖

00:31:35.429 --> 00:31:37.164 
如果這個視圖有問題鏈接的話

00:31:37.231 --> 00:31:38.465 
會顯示錯誤信息

00:31:38.932 --> 00:31:42.302 
所以我現在想要
創建一個outlet鏈接到這個視圖

00:31:42.402 --> 00:31:46.240 
並且如果有問題鏈接
我需要從代碼這裏增加它

00:31:47.307 --> 00:31:50.143 
我想要打開助手編輯器

00:31:50.210 --> 00:31:53.647 
這將帶我去執行我的活動視圖控制器

00:31:55.449 --> 00:31:58.352 
然後我將要control拖拽到源碼

00:31:58.986 --> 00:32:00.654 
然後放手 我得到一個小彈出框

00:32:00.721 --> 00:32:02.923 
允許我設置我的outlet鏈接

00:32:04.591 --> 00:32:07.661 
但是第一個選項這裏是我是否想要

00:32:07.728 --> 00:32:09.663 
創建一個outlet
或者outlet集

00:32:10.397 --> 00:32:14.334 
Outlet集是
用來批量增加或者刪除

00:32:14.401 --> 00:32:17.738 
子視圖或者約束的好東西
但是不適用於我的例子

00:32:17.804 --> 00:32:19.439 
我只是想要增加一個獨立的視圖

00:32:19.506 --> 00:32:21.141 
所以我選擇了outlet

00:32:22.242 --> 00:32:23.477 
接下來我可以爲連接命名

00:32:23.544 --> 00:32:26.280 
我會叫它連接錯誤視圖

00:32:28.949 --> 00:32:33.420 
最後一點我想要指出的是存儲類型

00:32:34.788 --> 00:32:36.323 
可以選擇強類型或者弱類型

00:32:37.925 --> 00:32:39.993 
一般情況下
您應該設置outlet爲強類型

00:32:40.661 --> 00:32:43.530 
特別是
您鏈接一個outlet到一個子視圖

00:32:43.597 --> 00:32:46.767 
或者鏈接到一個並不會
被視圖層次結構保留的約束的時候

00:32:47.901 --> 00:32:50.103 
只有當您有一個自定義視圖關聯回

00:32:50.437 --> 00:32:54.074 
以前的一些內容的時候
您才需要使用弱類型

00:32:54.374 --> 00:32:55.609 
一般情況下並不推薦

00:32:56.143 --> 00:33:00.914 
我會選擇強類型點擊連接
它會產生我的outlet

00:33:03.517 --> 00:33:05.786 
現在我想要拷貝一些代碼

00:33:06.353 --> 00:33:09.289 
這些代碼在視圖加載前被提前執行

00:33:10.290 --> 00:33:14.194 
我確認下是否有問題 如果有

00:33:14.561 --> 00:33:18.765 
我把連接錯誤視圖
添加到根棧視圖的頂部

00:33:19.199 --> 00:33:21.735 
我通過outlets同時獲取視圖

00:33:23.237 --> 00:33:25.539 
讓我們在模擬器中看下這個

00:33:30.844 --> 00:33:33.013 
就像現在看到的那樣 有問題連接

00:33:33.747 --> 00:33:35.949 
我的視圖正如
我需要的那樣顯示在最上方

00:33:37.317 --> 00:33:40.020 
所以在iPad
滿屏的情況下看起來不錯

00:33:40.654 --> 00:33:43.056 
如果我在分視圖中運行會怎麼樣

00:33:46.493 --> 00:33:50.631 
我只是拖拽分區到屏幕中間
然後放開鼠標

00:33:50.998 --> 00:33:53.333 
您可以看到
我的UI在適應窄篇幅的時候

00:33:53.400 --> 00:33:54.535 
顯示得並不好

00:33:56.003 --> 00:33:59.473 
我真正想要的是當寬度比較小的時候

00:33:59.740 --> 00:34:01.175 
這些標牌垂直顯示

00:34:01.875 --> 00:34:04.044 
所以任何一個標牌可以獲取

00:34:04.111 --> 00:34:05.512 
當前屏幕本身的寬度

00:34:06.513 --> 00:34:09.283 
同時當我們回到全屏模式的時候

00:34:09.349 --> 00:34:11.284 
我想要我的棧視圖繼續

00:34:11.351 --> 00:34:12.753 
像現在這樣水平顯示

00:34:14.955 --> 00:34:17.456 
做到這點
我要回到我的Storyboard

00:34:17.824 --> 00:34:19.025 
我要關掉助手

00:34:19.092 --> 00:34:20.594 
給我們更大的空間

00:34:22.228 --> 00:34:23.864 
我將選擇我的棧視圖

00:34:23.931 --> 00:34:25.364 
來到它的屬性視察器

00:34:28.768 --> 00:34:32.139 
您能看到現在的棧視圖設置成水平對齊

00:34:33.005 --> 00:34:35.708 
旁邊的通道屬性爲+按鈕

00:34:36.577 --> 00:34:39.246 
這個+
按鈕允許您增加一個類尺寸自定義

00:34:40.080 --> 00:34:44.518 
一個尺寸類是一個
一維或者二維的抽象尺寸範圍 

00:34:44.985 --> 00:34:45.985 
在我的例子裏

00:34:46.053 --> 00:34:50.389 
我想要在寬度爲迷你的時候
自定義這個屬性

00:34:51.358 --> 00:34:54.428 
因爲我並不在意高度 
所以我將選擇任何高度

00:34:55.661 --> 00:34:57.764 
這麼做的時候 我在視察器中得到
一個新行和新值

00:34:57.965 --> 00:35:00.934 
主要是在寬度迷你高度任意的時候

00:35:01.001 --> 00:35:03.470 
產生作用的

00:35:05.038 --> 00:35:06.807 
我將改變它到水平

00:35:08.175 --> 00:35:09.276 
我重新跑一次

00:35:13.046 --> 00:35:15.148 
又一次我們在全屏了

00:35:15.349 --> 00:35:18.652 
我們的棧視圖還是水平顯示着

00:35:20.153 --> 00:35:21.755 
現在讓我們再試一下分屏模式

00:35:25.626 --> 00:35:26.860 
好吧 我們看到了

00:35:29.663 --> 00:35:31.765 
大家看 現在我們的配件視圖

00:35:31.832 --> 00:35:33.467 
正像我們想要的那樣垂直顯示着

00:35:33.534 --> 00:35:36.470 
每個標牌都得到了半屏的寬度

00:35:42.209 --> 00:35:44.077 
所以那只是一種方式 您可使用尺寸類

00:35:44.144 --> 00:35:48.081 
您可以爲單個屬性重載屬性值

00:35:48.448 --> 00:35:52.352 
但是您也可以增加和刪除整個
新的子視圖或者約束

00:35:52.586 --> 00:35:53.520 
如果您想要學的更多

00:35:53.587 --> 00:35:55.189 
您可以使用尺寸類

00:35:55.255 --> 00:35:57.558 
我們會在最後一年有一個非常棒的課程

00:35:57.624 --> 00:35:59.426 
叫做使用UI套件創建可適應應用

00:36:00.928 --> 00:36:03.363 
這就是關於示例的全部了

00:36:03.430 --> 00:36:04.932 
所以讓我們回到幻燈片

00:36:10.671 --> 00:36:13.240 
凱文和我剛剛展示給大家很多技術

00:36:13.307 --> 00:36:15.175 
來獲取儘可能多關於
Interface Builder

00:36:15.242 --> 00:36:17.044 
讓我們來複習一下最重要的點

00:36:18.545 --> 00:36:21.648 
第一點您看到如何使用
自動佈局約束和棧視圖

00:36:21.715 --> 00:36:23.317 
來創建靈活的用戶界面

00:36:23.383 --> 00:36:26.820 
而不是依賴於硬性代碼框數據

00:36:26.887 --> 00:36:27.921 
來實現這點

00:36:29.723 --> 00:36:31.859 
然後凱文演示給您如何使用

00:36:31.925 --> 00:36:34.728 
可設計性和可視察性來快速地

00:36:34.795 --> 00:36:36.129 
複寫您自定義視圖的外觀

00:36:38.365 --> 00:36:39.933 
我們介紹了一個新的功能來

00:36:40.000 --> 00:36:43.403 
幫助您模塊化您的UI
叫做重複關聯

00:36:44.238 --> 00:36:47.040 
然後我展示給您怎麼使用
Storyboard API

00:36:47.107 --> 00:36:49.510 
來重複地實例化重用部件

00:36:51.044 --> 00:36:54.181 
最後您看到了您的UI怎麼樣使用尺寸

00:36:54.248 --> 00:36:56.917 
來自動適應不同的容器尺寸

00:36:58.886 --> 00:37:00.921 
如果您想要獲得更多的信息

00:37:00.988 --> 00:37:03.557 
您可以在
論壇發帖或者聯繫我們的宣傳員

00:37:04.491 --> 00:37:08.562 
我們也非常推薦您明天看下我們課程在
Storyboard什麼是新的

00:37:08.629 --> 00:37:11.164 
以及後天的自動佈局課程

00:37:12.165 --> 00:37:14.401 
如果您想要學習更多關於尺寸類的知識

00:37:14.468 --> 00:37:17.804 
去年我們的創建可適應性應用的課程

00:37:18.405 --> 00:37:20.307 
最後如果您想要學習更多關於

00:37:20.374 --> 00:37:22.609 
使用Xcode怎麼處理您的
自動佈局常見問題的話

00:37:22.776 --> 00:37:25.679 
我們在2013年也有一個很棒的課程

00:37:26.413 --> 00:37:28.682 
謝謝大家 
也祝大家在剩下的發佈會上愉快開心