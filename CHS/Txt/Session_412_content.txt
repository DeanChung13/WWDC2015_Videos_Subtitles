深入分析
谢谢
谢谢 我是查德·伍尔夫
我是克里斯·马克尔
我们是苹果的性能工具工程师
这是会议412
我们会深入谈一下“分析”
也就是谈一下Instruments中的时间分析器以及如何用它
来优化你的应用程序
当你想要找出你的应用程序把大部分时间都花在哪里了
的时候你就可以求助于时间分析器
举个例子
当你试图查明应用程序在
运行时间内做了什么事时时间分析器就会非常有用
你想看到具体调用情况
我们的会议会这样分成若干部分
我们将会谈谈为什么我们想要举办一场专门针对
时间分析器的会议的动机
不过会议会以向你们演示展示它的工作原理的细节
你的应用程序在源代码级别
以下的工作原理为中心
最后我们会就你们如何自行使用时间分析器
给你们一些小窍门
首先快速谈谈我们的动机这次会议是受
“Instruments 7”的直接启发
“Instruments 7”的目的是展示新的外观新的感觉
它意味着新的工艺图并且还意味着我们想让这种
新感觉更具响应性想让这种新感觉更流畅
我们会从在各个方面对我们的UI进行优化
我们还想尝试新的图形风格
我们过去就想尝试新的图形风格
但是我们现有的图形代码的性能不足
我们知道我们不得不把注意力放在渲染上面
因为它是应用中的一块硬骨头
Instruments必须处理成百上千
有时候甚至是数以百万的数据点 Instruments必须把这些
处理成一个非常容易理解的表达
那里的算法复杂性毫无疑问就很高了
对于我们来说 这就意味着我们必须对我们的应用程序中
特别重要的一部分进行重写也就是对位于app顶部的轨迹视图进行重写
整个冬季 克里斯和我拿出了新的轨迹视图的设计
开始根据一系列的原型进行构建
我们并没有在Instruments中直接生成原型
而是为了简单起见 把它拆分到了一个单独的应用程序中
这就是我们最近的一个原型的样子
当我们生成原型时我们做了一件事 我们设置了
一项“性能预算”
当我们分层堆放功能特性的
时候 我们会依据这项“预算” 不断地对
我们的代码的性能进行评估
当我们超出了“预算”时我们就会借助于时间分析器
看看到底是我们的应用程序的哪一部分出了问题
有时候很容易就可以修复而有时候则不然
因为我们生成的是原型
所以即使我们需要进行一些大的结构改变才能把
性能拉回正道这也是相当容易的
当我们把它集成回Instruments时
我们会再次借助于时间分析器
找出我们的集成点中的“热点”
这样经过几次迭代后我们最终得到了Instruments 7
这个版本实现了我们的性能目标
时间分析器帮助我们“熬过”了这个冬天
为此我们兴奋不已因此当苹果全球开发者大会
来临时 我们想开一次会议谈谈时间分析器
谈谈它善于解决哪些问题
我们想要和你们分享我们写轨迹视图时的经验
我们今年所做的就是在iOS上创建了一个演示应用程序
它和轨迹视图的第一个原型看起来很像
我们也给自己设定了性能目标
我们想要绘制十万个数据点
我们想要平移和缩放的帧速为完美的每秒钟六十帧
我们还想让它支持第一代iPad mini
我们选择第一代iPad mini的原因是...
你知道我说的是什么...
如果它能支持第一代iPadmini 那么它在其它的平台上
尤其是后面的平台上也就没问题
克里斯会向你们展示这个应用程序
他会对它进行时间剖析他会向你们展示把这些东西
组合到一起时我们发现了什么东西
谢谢 查德 这里我有Xcode的原型应用程序
我想点出几样东西
当我们初步实现时我们发现 我们根本就处理
不了不到十万个的数据点
一开始 我们先从一万个数据点开始
还有一点也很重要你应该在你的发版构建上进行
时间剖析因为你肯定想在你进行
剖析时 把编译器的优化利用起来
我要开始剖析应用程序了
我要从产品菜单中选择“剖析”
这样就会构建应用程序把它安装到iPad上
并且显示出Instrument模板用户
这里 时间分析器已经为我们选择好了
我要点击“选择”
这里 你可以在我们的轨迹视图中看到Instruments
我们过一会儿再回来看这个
现在我要开始录制了
点击“录制”按钮我们向你展示了app
我想要强调下 你们在这里看到的 这个并不是模拟器
这是QuickTime对app上已有的东西进行的镜像
这是我们的图表我要开始滚动
滚动没有什么不好我要通过收聚进行缩小
刚开始还不错不过之后就开始卡了
这可不太妙
最后我要用我的手指进行
前后滚动我正在移动我的手指
但是显示器并没有更新太卡了
性能表现太糟糕了
我们来看看发生了什么
让我们回到Xcode中回到Instruments中
我们把分析器停下来
快速让你们看看新的轨迹视图
这里我们看到了CPU使用情况
它指的是在某个特定的时间单位内
平均的CPU使用情况
这里的时间单位取决于你当前的缩放程度
当我使用我的app时你可以看到不同的部分
那里消耗的时间是不同的
这是滚动 这是缩小这是缩小时进行前后滚动
关于轨迹视图 还有一点很棒 就是我可以使用这个
缩小手势来放大我感兴趣的某段数据
如果你用的不是Trackpad那么你可以按住选项键
上下滚动来进行放大和缩小
我想看看这段特定的数据
就是这里的这个活动
刚才我在这里进行了滚动
为此我要使用一个过滤器只需单击并拖动
就可以把那些特定的样例给选中这样我就可以专注于
那个特定的数据
我要在下面这里创建更多的空白
下面这里是我们的详细视图
它可以向我们显示我们在某个特定的函数
或者方法内拥有的时间分析器的样本百分比的数量
这样我们就有了符号名
这是我们的百分比这是我们的符号
当你进行时间剖析时你通常所做的第一件事是把这个扩展开来
然后查看某种...在这里对数字进行对比
这里是具体的方法函数
看看突出来的是什么类型的情况 
你知道的那些值得你进行调查的情况会显示出来
还有一个选项 如果我们认真看看检查器窗格
点击扩展开的细节 我们就能看到最厚重的堆栈踪迹
这是针对主线程的
当我进行时间剖析希望提高性能时
我就会关注这里因为这里是最物有所值的
我们来看看发生了什么
主线程调用了应用程序的主线程 进行循环
核心动画开始工作了
没有什么异常情况发生
实际上这就是剖析时常见的事
你想看看应用程序最常干的事情是什么
但是看起来它并没有做什么特别的事情
那里什么也没有
没有要求在这里计算第四十个斐波纳契数也没有做什么其它异常的事
但是 你知道的看看这个调用栈
看看这个堆栈踪迹我知道了我的应用程序做了什么事
这是一个简单的原型app它的作用就是
构建一个路径并且绘制一个路径
实际上 我能够看到这里有一个调用一个CG环境路径
它没有被我的代码根据堆栈踪迹调用到
就在这里占据了很大一块时间
我要点击下那个看看它
如果我们看看我们的调用树
我就可以看到一些有趣的事
我们可以看到根据这个调用树
这个绘制路径会被这个
绘制分层法在UI试图上调用
它还会为图形视图调用我们的drawRect
这占据了大量的时间
这就是app所做的其中一件事
如果我看看这里的那个时间环境绘制路径占据了
你知道 样本的55%但是这个drawRect占据的却非常少
这就很有趣了如果我在drawRect方法上
右击下我就可以看到源代码
我知道了如果你看看底部那里
我就可以从drawRect方法上调用绘制路径
但是在哪个样例中都显示不出来
只是在添加路径
这可不太寻常
因为我的预期是我的drawRect方法
运行需要一段时间
它只是我的app完成的一半
看这个我注意到
drawRect返回了一个空白
最后调用的方法是环境绘制路径
这可能就是所谓的“尾部调用消除”
查德会给大家讲讲什么是“尾部调用消除”
以及如何对它进行验证
好的 要解释刚才克里斯看到的情况
我们就需要理解时间分析器是怎样知道在你的应用程序内调用什么的
这个的技术含量就比较高了我会一步一步向你们讲解
左边是drawRect的代码右边则和你想象的堆栈
在UIKit调用drawRect之前为那个线程找到的一样
当向drawRect进行调用时
和大多数函数 方法所做的事情一样
它会建立自己的调用帧
它会首先推送链路寄存器以及堆栈上的
帧指针的上一个值的返回地址
现在drawRect知道了怎样返回它的调用程序怎样恢复帧指针
下一件发生的事是我们得到帧指针设置成新的基础
然后drawRect会给它的局部变量
编译程序的暂存空间腾出空间
现在我们有了一个drawRect的帧
现在代码开始运行了我们到绘制路径那里
绘制路径做的事也相同它把自己的帧推送到了堆栈上
时间分析器的工作方式就是在内核中使用一项服务
以每秒1000x的速度对CPU所做的事进行采样
在这个例子中如果我们采一次样
我们就可以看到 我们是在环境绘制路径中运行的
然后内核会看下帧指针寄存器
看看函数帧的基础在哪里
然后找到调用它的程序的返回地址
现在我们可以看到那个drawRect是在绘制路径中调用
如果我们想看看drawRect中
调用了什么我们就可以使用我们推送到
堆栈上的帧指针来找到drawRect的基础
然后继续返回堆栈直到我们到达底部
这就是一次回溯
如果我们有足够的回溯并且把它们放到
调用树视图你就可以搞清楚在你的应用程序内发生了什么
我想指出一点堆栈上的帧指针
是绝对必须的
如果你编译代码时关闭了fomit-frame-pointer
想要进行和我们这里一样的时间剖析
让我们看看这个优化实例
启用编辑器优化后drawRect
就是进行编译的
同样地我们有一个drawRect帧
我们要准备调用绘制路径了
你可以注意到 当绘制路径返回drawRect时就完成了
什么也不需要做
它就会返回回来
它返回时会弹出堆栈结构
恢复帧指针的上一个值
然后回到调用程序
编译器看到这个后会想
为什么绘制路径需要用到drawRect的堆栈结构的东西？
明明不需要的此外返回它的调用程序时
为什么要返回drawRect？
那么它就会把代码重新整理成这样
它会弹出堆栈结构恢复帧指针
然后直接向绘制路径进行回调
这就意味着我们无需再跳回调用程序了
解释这个要比让你们直接看到更困难
让我们想象一下 当运行这个代码时它会是什么样的
我们会弹出堆栈结构去掉局部变量
我们会把帧指针恢复成初始值
链路寄存器的值
然后我们跳回绘制路径代码的开头
绘制路径会使用它在链路寄存器中找到的值
帧指针中找到的值把它自己的帧推送回堆栈
从绘制路径的透视图中它会直接在
UIKit的环境中从绘制层上得到调用
此时如果我们进行一次时间采样
我们就可以看到同样的情况
即使发生的不是实际的调用序列
时间分析器看到的就是这样
我们在我们的调用树上最后看到的就是这个
这就叫“尾部调用消除”在高度优化的代码上
很常见也有一些好处
它能够节省堆栈内存
节省堆栈内存时它会让缓存保持“热度”
然后重新利用内存缓存和数据
它对递归代码有着深刻影响
尤其是尾部调用递归代码在那里 一个函数或者方法
会最后调用自身然后返回回来
无需推送这些帧一个递归函数内的
尾部调用消除就可以让性能和迭代版本
一样好所以堆栈就不会增长
并且性能也很优秀
这个优化也能兼容高度递归代码
如果为了剖析你想把它关掉
显示一个更清晰的堆栈踪迹
你就可以到项目的构建设置中把它关掉
并且把编辑器标志
从CFLAGS设置成FNO-optimize-sibling-calls
关掉优化
不幸的是性能同时也会受到影响
但是这样你可以在时间分析器中得到更好一个的结果
如果你选择忍受它你想要知道是否发生了
尾部调用消除那么你该怎么做？
你可以看看反汇编调用最后调用的情况
如果是个普通的调用那么它会使用指令的
一个分支和家族链接那里是第一个实例
那就意味着它会跳到新函数
并且在链路寄存器内保存返回的值
如果是一个尾部调用并且我们需要直接跳到
直接跳到新函数内 那么它就是一个直接的分支指令没有BL
那就是一个指令和链路的调用指令
分支就是一个转移指令
如果你看看它你会发现很眼熟
现在就由克里斯来决定了他可以禁用优化 重新编译
或者他也可以继续由你决定
我要看看反汇编
在Instruments详细视图的右上角那里
有一个按钮查看反汇编 如果我点击下
我就可以看到那个方法的反汇编
我们就可以确认添加路径环境调用是一个分支和链路
环境调用绘制路径是一个简单的分支
我确信这是一个尾部调用消除的例子
我在调用树上看到的55%的调用都不属于我的drawRect
它们本来应该属于我的drawRect
这是个好消息
现在我知道了drawRect就是我的最重的堆栈结构
我的最重的堆栈踪迹
消耗了我55%到60%的时间
很好 我知道应该优化哪里了
我要优化drawRect开始吧
我们来看看这个drawRect
看看这个drawRect 如果有张桌子的话我早就掀了
优化的地方不多
很难想出一个能用的更简单的
但是又能用的drawRect
我们有四个函数调用 环境你知道的 CG调用
这个drawRect没有起到多少作用
那么这个实际上就是进行剖析时
一个很常见的事
你看了下自己的“热点”和代码
发现你没有多少能直接在代码中进行修改
提高你的性能的地方
你知道 这个节点你该做什么？
你知道 除了掀桌子晚上在枕头上嚎啕大哭之外
我们所做的事 就是仔细检查开始查看核心图像文档以及其它绘图
你知道 Cocoa绘图资料
我们无意中发现了这里的这个特殊的属性
这是drawsAsynchrously
你瞧！这是一个“让我的代码更快”按钮
是一位苹果工程师创建的
非常棒
在那个上面 你可以看到
我从资料中复制出来粘贴都了那里
它说了几件有趣的事
首先它说 它可能提高性能也可能不会提高性能
你应该衡量得失
你懂得 好了 爸爸
我们开始度量吧
我们看看这个能否提高性能
这次 要启动Instruments我要给Instruments进行
运行command-I
它会做同样的事情
它会构建应用程序安装到设备上
显示出模板选择器
需要一点时间
还需要一点时间
还得再需要一点时间
好了 我还想使用另外一种快捷方式 如果你看看下面的选择按钮
如果我按住选择按钮它就变成了“剖析”
这就意味着着当我点击这个按钮时
应用程序就会开始录制
会替我省一两步
我现在点了
现在时间分析器出来了
会对app进行度量
我要快速进行一些前后滚动
捕捉一些数据
我想够了
让我们把录制停下来
我要进行过滤获得具体滚动数据
如果我们到下面这里看看细节视图
很有希望
实际上上你们可以看到这里有多个线程
线程正在发挥作用
这很好
如果我们继续如果我按住选项
点击提示三角符号我就可以看到这个线程在
调用什么这是一些群调用
一些CG调用 很好
这就是绘制代码
我们继续一个接一个检查下
按住这个选项键
群调用 CG调用
很好 这个看起来很有希望
我是多线程理论上我的app应该更快了
但是 多线程并不一定意味着更快
我们应该确认它真的在帮我们做事
有一种方法可以确认 我碰巧知道这台设备有两个CPU
如果CPU以最大性能
并行运行 那么我应该会看到在我图表上面这里
看到200%的CPU使用情况
但是我看不到有超过100%的情况
那么这就是某种警告信号了它并不一定意味着两个
CPU没有同时工作
它只是意味着我应该进一步检查下
那么我们怎样进一步检查？
Instruments就有我们称之为“策略”的东西 
它指的是对数据进行划分的不同方法为的是查看数据
这里有三个
第一个是Instrument策略即默认值
我们在这里看的就是
第二个是CPU策略
它显示的是每个CPU或者CPU的数据 相关数据
最后一个是线程策略
它给你显示了每个线程处理的细节情况
我们来看看CPU策略
我们可以看到我们拥有的每个CPU
我们可以看到它们做了多少功
在底部我们可以看到组合使用情况
这里有一件很棒的事可以做当我放大的足够大
图表向我显示的细节就会发生变更
它就会显示那个CPU是否处于活跃状态 
而不再显示平均使用情况
它就会显示活跃或者不活跃而不再显示平均使用情况
现在每个CPU都显示了一个在线状态或者离线状态是否处于工作中
这里你可以注意到CPU从来没有一起工作中
这里没有并行性
你懂得 这可不好
如果我们还想试试伤口撒盐我们可以看看线程策略
它可以向我们显示每个图标
每个图标代表了时间分析器采集的一个样本
你可以点击 看看调用堆栈
这里的这个是位于一个后台线程上
你可以看到核心图形调用这是主线程
你可以看到主线程...我们在主线程上进行的工作
你可以看到 如果我放大到合适的程度
应该就是这里了我滚动下
你可以看到两个线程并没有真的同时工作过
它是从一个线程跳到另一个线程
因此drawsAsynchronously并没有真的为我们做什么事
从理论上来说它可能会拖慢我们
我们不仅进行了绘制而且还进行了管理
你懂得 核心图形系统对它工作的线程进行了管理
类似这种的事情 并没有什么实质作用
我会把它关掉
我会再掀一张桌子
不很清晰神奇按钮没多大作用
我们现在该怎么做？
同样这也是时间剖析中一个很常见的情况
你尝试了很多事但是大部分都不起作用
我们往回退一步
app会怎么做？
它构建了一条路径然后描绘了一条路径
我们已经看过绘制路径代码了
我们来考虑下构建路径代码
就在这里
我们想做的事就是调查下我们构建的实际路径
这个代码的作用就是循环数据元素
创建一条路径然后为每个数据元素向那个路径中一行
我们想知道我们向那个路径中添加了多少行
时间分析器就可以告诉我们这个信息
它不能告诉你某个特定的方法
函数被调用了多久被调用了多少次
它不知道一个被调用了仅仅
几次的慢函数同一个被调用了很多次的快函数之间
有什么区别
在这个例子中 我们要借助于NSLog 我们就可以实现
一个情况 即我们每次添加一个路径 我们就放大计数器一次
然后当我们循环结束时我们就把它录入
重点要指出的是NSLog并不是一个
很快的函数
在高性能代码中你不会想让它出现的
除了收集诊断信息或者进行调试以外
你可能不会想用它做任何其它事情
当你用完后把它从代码中删掉
在这个例子中 我们仅仅添加注释 这样你可以看到
我们发现 我们在例子中的这个点这里添加了十万行
这是没有必要的
事实上 这台设备上无论如何也显示不了十万行
尤其是当你缩的足够小所有的数据
就都需要适合一百个屏幕点
没理由在那里绘制十万行
我们绘制一百行就可以了
这样工作就少了很多
我们继续 创建一个执行来实现它
如果是多个数据元素数据点位于一个单一的
屏幕点那么它就会找出最大值
绘制一条单一的行
如果我们使用一百个屏幕点我们就会创建一百个屏幕行
我们来切换到那个执行
我们对它的感觉很好
我们把元素数量的上限改成了十万
而不是一万
我们看看这对我们是否有帮助
我要使用command-I来启动Instruments
因为Instruments已经打开了它就会把它弄到
前台立即开始录制
好了 一个新的录制
我们来滚动下滚动看起来没问题
我再缩小下
缩放性能也有了非常大的提高
需要的时间更多因为我要缩小的数据更多了
看起来真的很好
我要进行前后滑动
现在它能很好地追踪我的手指了
它能跟得上我的手指真棒
万岁！都搞定了！
还差一点
当我们前后滚动时
如果我们看一下我们使用的CPU的实际数量
我们就可以看到 你懂得有时候会降到60%
通常是七十到八十秒
从技术上说我们实现了我们的性能目标
我们要做的我们接下来要对这个app
原型做什么？
我们添加了一些附加特性
我们知道我们需要比这里更多的净空
我们怎样能让它更快？我们怎样能让这个app更好？
我们怎样实现性能目标？
我们专注下这个
我们来过滤下那个数据
我要给我自己一点空间
在这个例子中我要按住选项键
点击“主要”把它展开
我就可以到这里看到这里的这个方法
你懂得 现在绘制路径就足够快了
反而是构建路径成了瓶颈
我想关注下这个方法
我要点击下“聚焦”按钮
它会把方法中的所有事情移动到一边
把这个方法中
我们的百分比标准化
这个方法把55%的时间用在了获取下个元素上
把10到11%的时间用在了objc msgSend上
关于objc msgSend我知道的是
它是一个超快的方法
它是经过极致优化的
但是如果我能把那个10%拿回来 我还是想要
如果我们看看我们代码里面我们就可以看到它已经 
很干净了
我们大部分的时间都花在了获取下个元素上
这里的这个百分比 要比树状视图中的略微高一点
因为它包括了objc msgSend的时间
如果我把它去掉这个迭代程序就更快了
希望我就可以实现我想要的性能提升
请查德给我们讲讲如何实现这一点
我们来谈谈objc msgSend
无论你何时使用方括号符号
无论你何时使用点符号来访问一个对象的属性
编辑器就会把它隐式插入
它的目的是查找选择器的实现方法
然后调用那个方法
我们如何在Objective-C中进行动态分派
要讲的东西还很多
Objc msgSend非常快也不会推送堆栈结构
当你看你的时间剖析时
通常来说你不会看到它的效果
你能看到它的时机就是在一个完美的例子中
就像我们在我们的迭代程序中看到的那样
我们要做的就是迭代超过十万个点
用一个小的方法主体称之为“获得下一个方法”
只需增加一对值返回一个结构即可
那么接下来要发生的就是Objective-C消息发送
开销时间会积累到一个可测量的程度
是否有方法可以避开开销呢？
不一定
Objective-C从设计上就是一种动态语言
要访问对象和类的方法你就必须
进行objc msgSend调用
每次它都会这样做因为你可以在运行时间
转换方法执行
Objective-C内没有编译时间
比如说我想调用这个特殊的方法主体
这里唯一的异常是 如果你进行所谓的“方法缓存”
你可以自己查找方法执行
然后通过函数指针调用它
一般来说我不推荐你们这么做
你可以想象的到它很脆弱
一般来说 根据我的经验它没有给过我期望的性能你得想想我们起初
到这里的目的是什么
我们到这里的原因获得下个元素方法有一个小的方法主体
即使你通过函数指针调用它你也必须对自变量
进行整理把帧推送到堆栈上
并且在你完成后把它们弹出来
你们在上一组幻灯片中看到的正是这个
开销可能会很大增加后会再返回
我想要指出的是方法缓存并不像
直接插入那样快在这个例子中
我们真正想实现的是直接插入那个小的方法主体
我们在Objective-C中该怎样实现？
你还有其它选项
首先 你本来应该用 C
你本来应该用结构而不是一个
迭代程序举例来说 你可以向这个方法中传递一个C线
如果你想要那个OO特点你可以使用C++
你在Objective-C中使用C++的方法
是把文件从a .m重命名为a .mm
然后你就可以使用C++语法
因为通常Arc是默认打开的
然后你取出Objective-C对象把它们放进
STL容器内把它们放到你的类和结构的实体变量中
这很方便你也可以得到C++的性能好处
我在Instruments中大量用它以便在轨迹视图
以及Instruments其它关键的地方尽可能地快
根据我的亲身经验这个有一个主要的下降趋势
你需要提前知道你的代码的哪一部分会
从C++中受益哪一部分代码会从
Objective-C中受益
有时候像我们在演示示例中那样
你可能在那里犯错误并且直到进行剖析才意识到
我们是用Objective-C写了我们的
Objective-C没有意识到它在我们的时间剖析中有多慢
除了我刚刚提到的这些你还有其它更好的选项吗？
当然了 你知道的已经有了
Swift非常完美因为不像Objective-C
Swift只有在注释为动态时它才是动态的
如果你确保性能关键类是内部的
并且使用整体模块优化
编译器或者整体工具链就可以确定何时只有
一个方法执行
并且把它内联到调用点让你的性能有明显的提升
尤其是对迭代程序这个例子
因为我们是在生成原型在Swift的视图控制器中
重写迭代程序就非常容易了
克里斯之前干过这个
我有一个Swift执行已经就绪了
这是Objective-C执行的一个简易的接口
采用了他们在今天上午的会议上提出的关于...
...优化Swift代码的几点建议
具体来说就是打开整体模块优化
让我们来剖析下这个Command-I
它会开始构建
安装到设备上
它会开始进行剖析
好的 我要把应用程序提前这样你们就能看到
这是滚动
看起来不错
缩小
好了
缩小
非常棒 非常快
要缩小很多数据
现在 如果我前后移动它移动的就非常快了
太棒了
谢谢 实际上我们可以到这里
看看CPU使用情况
你懂得我们取得的优化超过了
我们的预期去掉objc msgSend
我们本来预期会有5到6%的提升 这个有点低
如果我关掉这个提示三角符号 你就可以看到
它们两个以此运行 你可以看到之前的运行更低...
当前的运行很明显更低
事实上如果我到这儿
查找我的构建路径方法现在我就必须进行搜索
这就是你进行搜索的方法
如果我点击command-F这个对话就会显示出来
我可以输入构建路径 
它会在这里给我显示我的方法
如果我们看看这个 你就可以在这里看到我的Swift代码
我的获得下一个调用就在这里
没有在任何样例中显示出来
你懂得没有样例包括了这个
为什么？因为Swift能够把它内联
鞭子意味着这里没有函数开销
没有方法调用开销等等
因为迭代程序的代码和其余的代码是内联的
它就有了进一步优化这就解释了出现比我们预期的
更高的性能的原因
它是忽略了动态调度
查德 你还有什么想对大家说的么？
当然了 我们还剩五分钟！
当你自行探索Instruments时这里有一些小窍门
首先要指出的是在录制设置下面
叫做“录制等待线程”
我提到过我们使用样例
活跃CPU的服务和内核
但是如果你有空闲的线程被一个加锁阻塞或者等待
输入/输出你就可以勾选这个复选框
服务就同样也会对空闲线程进行采样
如果你有代码和加锁争夺支配权
那么当你激活录制等待线程时
你会看到热区显示出来
我还发现了另外一件有趣的事
在“显示设置”中调用树那里
调用树被反转了过来
打个比喻就是它把调用树颠倒了过来
在树的底部节点看到的就不是叶子
那就是没有被调用到任何地方的函数
它们显示到了顶部
如果某个实用功能同时被五六个地方调用了
你把调用树反转过来看看到底是谁在调用
那个特定的函数
它给你提供了调用树上的数据的一个不同的视角
当你在调用树上右键点击一个节点
你就可以看到环境菜单这也是那里的一件有趣的事
我经常做的一件事就是给调用者记账
那么你就可以给调用者的方法记一笔欠函数的账
你可以给调用者记一笔欠整个框架库的账
那里还有一个选项可以修剪子树
如果你当时不想处理某个具体的问题
你可以把它从数据上修剪掉然后专注于你想专注的事情
我们从中学到了什么？
就是通过这个我要提醒你们的第一件事
就是提前合并性能目标
如果你像我们一样进行了一个大的性能重写
你要首先设好预算然后对它进行监视
因为一旦你开始在它的顶部分层放置大量的代码
要改变就很难了
其次 要经常进行度量
在我们的整个演示中我们用时间分析器进行了时间剖析
我们用那个数据来找出“热区”
然后把它返回最后我们就得到了一个运行良好的应用程序
如果你还是不明白 可能你可能很幸运 直接点吧
我会从一个测量开始然后把它当成领头羊来追随
第三 这个对我来说很重要
我鼓励你们深入挖掘下去
你第一眼看到的某些性能问题可能
看上去是无解的
你说别人的的代码中就出现过这种问题
或者是运行时间的副效应
我们给出你时间分析器运行时间的详细资料的
原因给出你反汇编视图的样子
就是想向你们展示那是一个细节丰富的一个完整的世界
用它你就可以像我们今天一样解决性能问题
我鼓励你们带着创造性去进一步挖掘
看看像这样的会议
我知道你们能够修复问题 实现你们想要的性能目标
只要你今天开始干就行
史蒂芬·莱塞是我们的开发工具福音传道者
如果你有问题的话就可以联系他
与我们相关的会议是“能量调试问题”
证明了如果你在CPU上的代码是有效的 CPU耗能就会更低
那次会议是周三举行的
明天还会有一个关于iOS以及Watch OS的会议
好消息是 时间分析器也能用于watch上的app
这是一项大福利
祝你们在会议剩余的时间内过得愉快