网络扩展和VPN新功能
谢谢
大家早上好
欢迎大家学习第717课
我叫杰米·伍德今天我和同事汤米·保利一起
我们是Apple核心操作系统网络部门的网络工程师
我们很高兴向你们介绍
网络扩展和VPN的新功能
你们可能会问什么是网络扩展框架？
它能为我提供什么功能
供我的App使用？
网络扩展框架提供大量的API
可以定义和扩展Apple平台
的核心网络功能
让我们来看一些具体的例子
来了解如何使用网络扩展API创建App
如果贵公司在公共区域部署Wifi热点
就像酒店、机场和咖啡馆一样
你可以使用任何热点帮助器 API来创建APP
以连接到Wi-Fi热点
如果贵公司创建一个专用vpn服务
让你的用户安全地浏览互联网内容
可使用NEVPN管理器API创建APP
以连接到你的个人VPN服务
如果你的公司创建远程访问VPN服务器
可以使用任何隧道系列API
创建APP以连接到VPN服务器
最后 如果你的学校想要创建网络内容过滤器供学校使用
以保护学生安全地上网
你可以使用过滤器提供者系列API
创建APP过滤网络内容
今天的课程我将会讲解网络扩展API
让我们来深入讲解热点帮助器API
热点帮助器API用于创建APP以连接到Wi-Fi热点
你们可能已经知道
一些API可用于创建APP
来连接到Wi-Fi热点
它们包括CNSetSupportedSSID
CNMarkPortalOnline API
但是这些API具有局限性
其中一个问题是可以传递给CNSetSupportedSSID
的热点列表数量受到限制
如果你有一个WiFi热点全局网络
并且想将你的APP连接到网络 你很快就会
达到数量限值
另一个缺点是
为了调用CNMarkPortalOnline
用户必须手动运行应用程序
更糟糕的是并不会有提示信息来提示用户运行APP
这不利于用户体验
用户并不知道他们需要进入APP
才能连接到WiFi热点
因此我们引入热点帮助器API
来解决这些限制问题
实现方法是首先将你的APP
作为一个热点帮助器注册到系统
然后当设备进入WiFi网络范围之内
扫描WiFi网络或者用户选择他
进行连接时 系统将调用你的APP
在后台运行APP调用你的APP
让你的APP有机会声明为具有一定机密等级的Wi-Fi热点
机密等级包括高、中或低
如果声明为高机密等级的热点
系统将会提醒你
进行WiFi热点身份验证
它会定期要求你
保持身份验证会话
热点帮助器API还允许你
在设置APP时标注在Wi-Fi管理器中
显示的WiFi网络你可以使用APP名称
或公司名称标注这些WiFi网络
这就是热点帮助器API的功能
你可以使用这个API来创建APP
无缝连接到Wi-Fi热点
接着来看NEVPN管理器API
你可以使用这个API创建APP
连接到个人VPN服务用户可以使用此服务
安全浏览互联网内容
NEVPN管理器API是并不是iOS 9的新功能
iOS 8已经有这个API
我们对这个API进行增强让这个API可用于
OS X和OS X El Capitan
方法是先使用NEVPN管理器API
在平台上配置和控制
内置IPSEC客户端
你可以创建一个个人VPN配置
稍后我会讲解个人VPN配置是什么
内置IPSEC客户端支持IKE v1
和IKE v2密钥交换协议
你可以使用其中一项协议
你可以配置VPN以便在特定网络条件下自动连接
作为iOS 9和OS X El Capitan中的新功能
你可以配置http代理
通过VPN隧道传输http流量
多个个人VPN配置可以共存
并且与企业VPN协作
假设用户使用你的APP
连接你的个人VPN服务
他们可以安全地互联网内容
并且可以访问公司内部网络的内容
当他们连接企业VPN时
所有供内部人员
使用的信息
将使用企业VPN传输
其他任何不经过
企业VPN传输的内容
将继续通过个人VPN传输
个人VPN保持连接状态
继续通过隧道传输流量
是NEVPN管理器API提供的功能
我们还对NEVPN管理器进行了其他方面的增强
即增强了IKE v2协议支持
IKE v2是一个很不错的隧道协议
在这版本中我们让它变得更好
现在我们还支持MOBIKE
我们可以将IKE v2隧道流量
从一个网络接口0转到另一个网络接口
例如如果你的隧道
通过WiFi接口连接但是当用户走出
WiFi网络范围时
设备可切换到蜂窝网络接口
IKE v2隧道将无缝切换数据传输
非常不错
现在我们全面支持IPv6
无论是在IKE v2隧道之内或之外
现在我们还支持IKE报文分割
从而使IKE v2隧道能够在各种网络环境中更可靠地工作
另外还支持IKE重定向
使你能够平衡IKE v2服务器的负载
在进行这些增强之后
此协议变得更好用了
IKE v2的性能更优化
能够在各种网络环境中更可靠地运行
现在让我们来看一些代码
该如何使用NEVPN管理器API？
在这里我展示一些代码
代码的功能是这个个人VPN配置
每个使用NEVPN管理器API的APP
访问一个个人VPN配置
这个配置使用一个NEVPN管理器对象表示
首先我获得共享管理器对象的引用
而且系统上的所有VPN配置
存储在网络扩展首选项之中
当我在代码中处理配置之前
我需要调用完成处理操作从首选项中载入这个配置 
在完成处理操作中我首先要做的是进行检查
查看我的配置是否存在
我查看管理器对象上的协议资产
如果它显示为nil就说明还没有配置
我需要设置一个配置
在这里我将设置一个IKE v2配置
然后填入所有的IKE v2专有配置参数
完成后我将在管理器对象上
设置协议资产并且启用VPN配置
在系统上 
一次只能启用一个VPN配置
完成之后我将保存首选项
将配置保存到
网络扩展首选项之中
并应用系统配置
以使用这些配置
在这里你可以使用API手动启动
和停止VPN隧道检索VPN隧道状态
以确定是否连接
或断开连接等
但是为了良好的用户体验我们还需要
配置按需连接
利用按需连接功能你可以设置规则
说明何时应该自动连接VPN
因此在本例中我需要设置一个规则
规定当设备位于WiFi网络之内时
应该连接我的VPN
因此首先要做的事情是
我需要创建一个按需连接规则对象
这个规则说明
当符合这个规则时将会连接VPN
接下来 我需要为我的规则设置接口类型匹配条件
当它提示设备位于特定类型的网络接口上时
即符合此条规则
我将这个网络接口类型设置为Wi-Fi
当设备位于WiFi网络上时即符合此条规则
我将设置按需连接规则组
以包含这条新规则
并将结果保存到首选项之中
现在当设备位于WiFi网络上时将会自动连接我的VPN
这就是NEVPN管理器API的功能
你可以使用这个API创建APP
来连接到你的个人VPN服务
让我们来继续了解
隧道提供者系列API
你可以使用这些API创建APP
以连接到企业VPN服务器
为此 你需要创建一个自定义VPN
协议提供者
这实质上是自定义隧道协议
的客户端侧实现
这些协议提供者作为APP扩展运行
它们在后台运行处理后台流量
你可以创建两种类型的隧道提供者
你可以创建一个数据包隧道提供者
这些隧道在IP层传输数据
你可以创建 或者说你能够创建一个App代理提供者
在APP层通过隧道传输数据
隧道提供者系列API中的一些API允许你
在你的APP中配置和控制协议提供者
这与VPN管理器API相似可配置
和控制IPSEC客户端API允许你
配置和控制你的自定义协议提供者
让我们来深入了解NEPacket隧道提供者API
它的原理是怎样的？
假设有一个NEPacket隧道提供者在系统上运行
而且它已经连接到VPN服务器
并且提供一个通向某个内部网络的隧道
这样 你的APP将会尝试连接到内部网络中的某个资源
APP将会打开网络连接
创建一个socket并建立TCP/IP连接
TCP/IP链路数据包将路由到UTUN0接口
这是一个虚拟接口它并不通过物理网络
发送数据包而是将数据包转发到
NEPacket隧道提供者
数据隧道提供者接受这些数据包
将它们封装为隧道协议格式
发送到隧道服务器
隧道服务器解封这些数据包
将它们发送到内部网络
然后转送到最终目的地
返回数据包经过服务器的封装
被传输给提供者提供者解封它们
通过UTUN0接口将它们注入到网络传输堆栈
然后通过TCP/IP协议栈
将数据包返回给应用程序
这就是其基本工作原理
NEPacket隧道提供者有很多的
UTUN0接口控制功能
最重要的是它可以指定路由
IP目的地将被路由至UTUN0接口
并经过隧道
数据包隧道提供者可以指定虚拟地址
以分配给接口另外还可指定DNS
和应该使用的代理设置
以用于路由经过隧道的数据流量
接下来汤米·保利将为我们简要介绍
如何创建一个NEPacket 隧道提供者
谢谢杰米我们很高兴告诉你们现在你们可以编写自己的
自定义VPN协议提供者
为了帮助你们做到这一点我想向你们介绍
如何创建数据包隧道提供者
我从一个Xcode项目开始
在这个项目中已经有一个APP
APP使用管理器API创建一个配置
我们将跳过这个部分
假设我已经实现一个框架
来进行我的自定义协议协商
我将介绍如何构建这个新扩展
并将所有部分组合起来 好的
这是我的项目
首先要做的事情是为你的扩展添加一个新目标
为此我们需要在OS X ElCapitan中
将这个目标添加到网络扩展框架之中
这样在你的系统上如果你访问系统、库、框架
网络扩展框架
你将会进入资源文件夹我们提供一个模板安装程序
适用于这些目标类型
你可以进入安装程序
我为这个用户进行安装
现在我们看到这些模块
如果进入我的项目在应用扩展下方
尝试创建一个新目标现在我有四个新目标类型
还有App Proxy提供者可用于应用层VPN
这里有两个过滤器控件和一个数据提供者
让我能够进行数据过滤
稍后我将会讲解数据过滤还有一个数据包隧道提供者
在这个例子中 我的协议为我的VPN使用IP级隧道
我将选择数据包隧道提供者
我们在Swift中写入它的名称称为数据包隧道
很好 现在我有了一个新目标
我可以开始构建我的VPN提供者
让我们进入实际代码编写
我的协议基于UDP协议
它使用UDP协议与服务器对话
并通过隧道传输系统数据流量
我已经细化NEPacket隧道提供者类
在我的扩展中将会调用这个类
以启动和停止我的VPN
在这里 我需要覆盖的最重要函数
startTunnelwithOptions函数
当用户或系统要自动启动你的VPN时将会调用这个函数
你会发现 它调用这个函数并传递其结果值
你可以使用这个函数来通知系统
你已经完成设置VPN
当你调用这个函数时系统将知道你已经完成连接
而且准备就绪
前面我说过我的协议基于UDP
在开始时 我想要建立与服务器之间的UDP连接
为此需要创建一个NWUDP会话对象
这是我们已经为网络扩展框架添加的众多便利性网络API之一
它可以帮助你
可靠高效地进行连接
因此UDP会话让我能够
连接到一个主机
它将为我完成所有的DNS解析工作
并且异步通知我是否已经准备就绪
我可以同时读写多个数据报文
以实现最高效的连接		
现在让我们来实现这个函数
我首先要做的事情是
确定连接目标
我查看一下配置来获取服务器地址
这可能是一个IP地址或是主机名称
我这里加入一个NW主机端点
这是一个容器对象它接收地址
或主机名称并且将它们与
协议端口进行组合
然后我调用这个函数开始DNS解析过程
建立服务器连接
此时系统开始执行这些操作
然后我等待需要读取和写入的事件
我执行KeyVO以观察UDP会话的状态属性
以获得这些临时值
此至我的启动调用基本完成
我最后要做的事情是
保存在开始位置编写的此函数
因为我还没有完成我的VPN连接
因此我要声明一个pendingStartCompletion
稍后我会保存它
好了 现在我要跳过
与服务器协商的部分
假设协议已经知道如何这样做
现在我将跳到已经分配地址
和其他网络设置的部分
将这些设置应用于系统并让系统知道
我们将要使用VPN
这是我编写的自定义函数
它说明我已经建立连接
接下来我要做的是
创建NEPacketTunnelnetworksettings
这是一系列的设置
我可以在系统中应用这些设置
我可以设定IPv4设置
我已经指定了地址和子网
以及路由设置
在这个例子中我想使用系统的默认路由
但是我也可以设置一个较长的隧道分离路由列表
我可以定义隧道使用的开销字节
对于每个数据包规定使用多少字节
进行加密和封装
这样系统就知道所发送的数据包的大小
最后 我可以设定DNS设置
我可以设定分配的DNS服务器或域
为了将这些设置应用于系统
我只需调用此函数
在调用完成之后我得到一个回调处理程序
让我知道已经成功应用设置
然后我可以调用此函数
让系统知道我已经启用VPN
这个功能很不错 我已经完成连接
但是现在我还不能设置向前和向后数据传输路由
让我们来看看代码
前面杰米讲过它的实现方法是这样的
我们有一个虚拟接口
将数据包发送给协议提供者
后者将数据发送给服务器
从服务器接收返回的数据包时
我们重新将数据包注入堆栈
我们首先从输出数据流开始
数据包隧道提供者具有一个名为数据包流的属性
它表示你可以
读取和写入的虚拟接口
如果我调用此函数
系统将使用一组已经发送至网络的数据包进行回调
我可以将这些数据包发送至我的协议处理程序进行封装
和加密 然后生成
一组新的加密数据包流量
我可以轻松地将它们作为多个数据报文
一次性写入UDP会话以发送给服务器
这是在向外发送数据包时所需做的全部
接收数据包的方式与此类似
这里有一个函数接收UDP服务器
返回的数据包
我只需要将它们发送给我的协议
就可以解封它们生成IP数据包 然后
我可以将它们写入数据流量属性
现在 我建立了一个连接
并且可以进行读取和写入
让我们来看看实际效果
好的 这是我的设备
会看到我已经安装我的VPN APP
你会看到如果我进入Safari
尝试访问内部网站
现在我确实可以访问内部网站
我可以进入“我的VPN”APP我点击“start VPN”
APP所做的事情是
在后台启动隧道数据包提供者
你可以看到状态栏中显示VPN图标
它实际上已经启动并建立连接
我可以返回Safari
看到我的内部网页已经加载
这表明我们在Swift中编写的VPN协议提供者程序
完全正常地运行 就是这么简单
交给杰米
好的 谢谢Tommy
刚才Tommy向我们介绍如何创建一个数据包隧道提供者
这不仅容易实现而且功能十分强大
讨论Packet Tunnel Provider对象
我想花一点时间介绍用于托管APP的Per-App VPN 
Per-App VPN十分适合BYOD应用也就是使用你自己的设备
在BYOD应用中公司员工
希望使用他们自己的个人设备
连接他们的设备到公司的内部网络
访问网络资源
而且 他们不希望他们的所有互联网访问流量
都通过企业VPN进行路由
另外  企业希望为员工提供访问权限
同时想要限制某些应用程序
访问他们的内部网络
这时适合使用Per-App VPN
利用Per-App VPN你可以设置VPN
仅允许某些特定的托管应用使用VPN
这种设置方法是使用Apple自己的MDM
MDM的含义是托管设备管理协议
你将设备注册到一个MDM服务
这个MDM服务就能够
提供相应的配置包括VPN配置
和托管应用程序
MDM服务还可以将这些托管应用程序
与Per-App VPN配置进行关联以发送
Per-App VPN部署
现在我们支持Per-App VPN实际上我们一直都通过
自定义App代理提供者支持它
在iOS 9和OS XEl Capitan中通过自定义
数据包隧道提供者支持Per-App VPN
并且通过平台内置IPSEC客户端支持Per-App VPN
现在来看Per-App VPN如何在网络数据路径中运行
有一个数据包隧道提供者它和前面一样
我们还有一个UTUN0接口数据流量被路由到这个接口
另外有一个托管APP
链接到VPN配置
不同于按IP地址将数据流量路由到UTUN0接口
现在将会按应用程序将数据流量路由到UTUN0接口
只有这个托管应用程序才能访问VPN
如果用户使用其他非托管应用程序
在物理接口之外
连接到网络
即使它想要连接到与托管应用程序相同的目标IP也不会成功 
Per-App VPN的工作原理
Tommy将向我们简要介绍
如何配置Per-App VPN
好的 谢谢杰米
让我们感到兴奋的是
现在每个人只需要编写一个自定义协议程序
或者使用内置的IPSEC协议 
就可以部署Per-App VPN 来提供良好的UID解决方案
前面杰米讲过 我们通过MDM(托管设备管理协议)
创建这些Per-App配置MDM将选择VPN的配置文件
并且将托管应用程序
与这个VPN相关联
现在我将介绍如何修改现有的VPN配置文件
使它配合Per-App VPN工作
这个配置文件
配置我刚才创建的APP
让我们来看VPN配置文件
这里有很多的内容
现在并不需要理解它们
我将高亮标出一些独特的部分
只需要进行三处修改
就可以让这个配置文件配合Per-App VPN工作
第一处是负载类型
通常情况下它是com.Apple.vpn.managed 
只需要在末尾加上applayer就可设定为Per-App VPN
前面我们说过有多种类型的提供者
可以配合Per-App VPN工作
我们需要说明你想要使用哪种类型
在VPN负载内部我们用一个新的键值
表示提供者类型
你可以指定数据包隧道或App代理
在本例中你看到我的APP使用数据包隧道协议
我指定了这个协议
最后一个需要添加的字段名是VPN UUID
是一个任意字符串
作为VPN配置与托管APP之间的关联符
当MDM服务器选择托管APP时 将会使用
相同的VPN UUID标记它们
这样系统就知道只有这些APP才能 
通过那个VPN路由数据流量
这个配置文件应该可以用于Per-App VPN
我们希望你们能够创建
支持Per-App VPN的APP
希望你们能够轻松地利用它来进行开发
在你们进行开发时可能无法获得
一个完整的MDM解决方案
我们只能为你们提供开发版本支持
而不是发行版本支持
在信息Plist中指定将哪些APP
与你的VPN配置相关联
能够让你更容易地测试Per-App VPN
让我们来看你的APP的信息Plist 它很简短
我们看到一个新的键值名称为NETest App Mapping
这是一个数组字典
键值与前面所述的UUID 相同
这个关联符将配置与APP关联在一起
在数组内你可以指定想要数据流量强制经过VPN的
APP的字符串束标识符
在本例中我将使用Box APP
让我们来看看它是什么样的
我已经在我的设备上安装配置文件和信息Plist
这里有一个配置
用于我的Per-App VPN
你可以看到我 我设置为自定义数据包隧道协议
这里还列出了关联的APPBox
VPN配置内的一个关联APP
只需要进行设置就可以让Per-App VPN
配合你的协议工作 谢谢
好的 谢谢Tommy
Per-App VPN十分适合
BYOD部署能够为公司员工 
提供良好的用户体验
我们强烈鼓励你部署它
接下来我想介绍NEApp代理提供者API
现在任何App代理提供者都可以独占性地配合
Per-App VPN工作
让我们来看它们是如何工作的
以及它们与数据包隧道提供者之间区别
我们有一个托管APP一个在系统上系统运行的
APP代理提供者APP想要连接到
内部网络资源
不同于将IP数据包路由到UTUN0接口
托管APP写入到其socket的
数据被直接转发到代理提供者
在那里 NEApp代理提供者可以将数据发送到代理服务器
代理服务器的返回数据
将被发送回代理提供者
后者将数据注入socket
然后发送给APP
添加NEApp代理提供者API原因
实际上跟服务器有关
你可以连接到这些透明的
网络代理服务器
这些服务器通常比配置完好的IP层VPN更容易部署
你不必配置虚拟IP以分配给UTUN0接口
而且它们的扩展性更好
我们提供NEApp代理提供者API
来连接到这些服务器
iOS 9和OS X El Capitan中的
APP代理提供者新增功能是不仅能够代理TCP流量
而且能够代理UDP流量
这里有一个托管APP
用它来描述在物理接口之外进行连接
这是NETunnel提供者系列API
你可以使用这些API为你的隧道协议
创建客户端
用于连接到企业VPN服务器
现在让我们来看
NEFilter提供者系列API
我们可以使用这些API为学校创建
网络内容过滤解决方案
目前学校可以使用几种方法利用iOS设备
进行网络内容过滤
他们可以部署现场内容过滤器将设备放在他们的局域网内
将所有互联网流量路由
经过内容过滤器
过滤内容
其缺点是 这种方法
只能在学校局域网内使用
如果学生想要把学校iPad
或iPhone带回家当他们回家后他们要么
完全不能浏览互联网内容或者互联网内容将不会过滤
这样可不好
为了解决这种问题 
学校可以部署代理将它放入互联网接口
将所有互联网流量路由经过代理
以进行流量过滤
其缺点是学校必须部署和维护代理
并不是所有的学校都有足够的资源来这样做
另一个解决方案是使用全隧道VPN
与全局代理一样它也有很多问题
而且可能更难以部署和维护
对学校来说最好的解决方案是
在设备上过滤网络内容
在离开设备之前
和实际提供给用户之前
NEFilter提供者系列API允许这样做
目前NEFilter提供者API只能在iOS中使用
通过使用API可以执行
网络内容态评估
能够随时更新过滤规则
例如 限制网络下载
当用户访问一些禁止访问的内容时
你可以发送一个可自定义的禁止访问页面
提示禁止访问这些内容
目前NEFilter提供者只能在受监管设备上运行
其目标用户是学校
学校拥有自己的设备并对设备加锁
使学生不能安装新的APP或更改设置
这时过滤器提供者正好派上用场
让我们来看过滤器提供者如何在数据路径中工作
有个NEFilter数据提供者扩展
运行在系统上
它的作用是允许和禁止
网络内容经过系统
由于它能够访问所有网络内容
我们已经锁定这个数据提供者
让它在只读沙盒中运行
它不能访问网络
而只能读取磁盘
我们还提供另外一个扩展
即NEFilter控制提供者它的作用是
为过滤器数据提供者提供数据
使过滤器能够发挥作用
例如互联网下载规则
要求将下载数据定入到
数据提供者可以访问的磁盘位置
现在假设用户使用Web kit 运行一个APP
是吧在它们的UI中有个UI Web视图
进入Web kit 的所有内容
被传输给过滤器提供者 
他决定允许或禁止该数据
并非所有APP都使用Web kit
有一些APP使用其他网络API
例如NSURL会话NSURL连接
以及部分Network API
对于这些API 我们在socket层中添加一个挂钩
将流量引导至过滤器数据提供者
这样数据提供者就进行允许/禁止决定
你可以看到过滤器控制提供者
和数据提供者一起在设备上
提供全面的内容过滤解决方案
因此对于Web kit APP来说
当数据提供者做出禁止决定
禁止某些内容访问操作时
数据提供者可以命令Web kit
显示禁止访问页面
这是一个禁止访问页面示例
你可以使用API通过多种方式
自定义这个禁止访问页面
你可以更改显示内容结构
例如可以显示学校名称
可以自定义这个请求访问链接
你可选择不显示链接
不向用户提供内容访问选项
如果你需要显示内容可以显示链接文本
和链接目标
这个目标指向Web服务用户可以访问此服务
请求访问被禁止的内容
这就是NEFilter提供者系列API的原理
你可以使用这些API为学校创建功能强大、全面的
基于设备的网络内容过滤解决方案
这是今天网络扩展API的所有内容
你可以使用这些APP
开发一些不错的APP
你可以开发APP以便于使用Wi-Fi热点、个人VPN服务
企业远程访问VPN
还可以为学校开发基于设备的
网络内容过滤解决方案
你可以看到这些API功能很强大
你可以使用这些API扩展和自定义Apple平台的核心网络功能
因为这些是非常强大的API要求你们
具备一定的能力来熟练使用它们
为了使用NEVPN管理器API
你需要在项目设置的Xcode中
选择个人VPN功能
为了使用热点帮助器API、NETunnel系列
API和NEFilter提供者系列API
你需要查看其他一些专门资料
你可以发送电子邮件至networkextension@Apple.com
来索取这些资料
发送一份问卷调查给你你需要填写问卷
并寄回给我们让我们能够处理你的请求
我们很高兴将这些API介绍给你们
我们期待收到你们的请求
为你们提供这些API
你们需要做的是
设置Captive Network APP端口
以使用NEHotspot帮助器 它可无缝连接
在你的个人VPN APP中使用NEManager API
为使用你的个人VPN的用户提供
无缝的用户体验
你可以使用NETunnel
提供者来创建功能强大的自定义企业VPN APP
来连接到你的VPN服务器 
你可以使用MDM来部署Per-App VPN
提供良好的BYOD用户体验
还可以使用NEFilter提供者API
为学校创建动态的基于设备的网络内容过滤解决方案
在这里你可以获得更多的信息
但是 这些文档还没有发布它们即将发布
请经常在开发者网站上搜索相关内容
另外示例代码还不是很完善
请经常搜索简单的隧道应用示例
我们会发布一些不错的示例代码
但是目前还没有完成
请经常搜索它们
如果你想了解更多信息
请参与开发论坛联系开发人员技术支持部门
可以联系我们的主要讲师保罗·丹博
可将网络扩展相关问题发送到这个地址
还有其他一些讲座
也希望你们给予关注
特别介绍今天上午11:00
举行的其他核心操作系统网络功能讲座
将会介绍APP开发和下一代网络
谢谢你们参加讲座 祝你们愉快