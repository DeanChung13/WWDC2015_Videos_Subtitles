MapKit的最新內容
大家下午好
歡迎來到206號講座
本次講座是關於《MapKit的最新內容》
我是蘇米特·隆卡爾
我是在地圖團隊工作的軟件工程師
今天下午的講座內容很多
那我們閒話少說直接開始
開始之前我們先來看看今天的講座日程
今天第一個話題是現有MapKit API的功能改進
這裏我主要介紹新功能
不好意思 我主要探討
我們新增的API功能以支持現有的功能
之後我會談談Transit
我們主要關注MapKit中的Transit問題
最後是Flyover
Flyover是MapKit中的全新Map Type
iOS 6起可以運用在iOS的應用中
現在我們就展示給大家看
關於這個話題我們還準備了許多演示
這樣大家可以看到所有這些新增API是怎樣工作的
大致是這些
接下來我們直接介紹今天首個話題
現有API的改進
根據諸位開發人員的提議和要求
今年我們下大力氣
確保大家和你們的應用能夠充分利用MapKit的功能
這些新增的API可以使你在應用中自定義MapKit
同樣可以改善用戶體驗
對於像諸位這樣的開發人員來說
這意味着諸位會減少編碼量
我們現在來逐個看這些API
先來看看Pin Color Customization
MapKit圖釘也叫MKAnnotationView
從一開始它們就是MapKit的重要組成部分
它們可以在地圖上確定任何單個圖釘的具體位置
但談及自定義的時候我們卻沒有太多可以修改的
你只能將之設爲紅色或綠色或紫色
你沒有其他選擇
從iOS3起 你只有這三種選擇
現在我們來看可以實現自定義的新款API
我們把它設定爲
MKPinAnnotationView的屬性
叫做pinTintColor
在iOS上 叫做UIColor在OS X上 是NSColor
之後我們也稱其爲UIColor和NSColor
這意味着在地圖上你有數百萬不同顏色可以選擇
我希望藉此機會指出舊版API
即圖釘顏色設置的不足之處
因此如果你的應用軟件還在用這款API
一定要升級到我們正在介紹的最新版API
這就是關於圖釘顏色自定義的內容
接下來是Callout自定義
在詳細介紹callouts前
先來說說什麼是callout
對於已經使用這個功能很久的朋友來說
就當是溫故而知新吧
那什麼是callout呢
callout就是點擊註釋時 跳出來的那個白色氣泡
主要由四部分構成
其一是標題
其二 緊接在標題下面的副標題
然後是右輔助視圖和左輔助視圖
通常情況下這四部分足以向我們展示和提供該點
和它們所代表的座標的信息
但是當內容數量增加時就會出現問題
例如 在這個callout中
你可以看到副標題就附在這點上
那麼怎麼才能自定義callout來滿足應用需求呢
事實證明 這也是研發人員一直以來試圖解決的問題
有時遇到這樣的問題
在地圖軟件中點擊那個點後
會跳出類似這樣的東西
點擊註釋時你會得到一個POI
和帶有Yelp點評功能的callout
爲了實現類似的行爲
我們見過開發人員做過這樣的事情
他們把Emojis放入副標題中
我是說 這種辦法對這類情況還是可以的
可是當處理更復雜的情況比如像這種情況又會怎樣呢？
結果發現這不是個好的辦法
爲了解決這個問題我們來介紹一個新的辦法
它可以幫你自定義callout
我們這裏介紹的屬性叫做detailCalloutAccessoryView
在iOS上 會用到UIView在OS X上 則是NSView
那麼這是個UIView和NSView
這意謂着可以更大限度地實現自定義
那麼即便想使用也可以這麼做
這會開啓無數自定義callout的可能
同時這些callout都支持從右到左的語言自動排版
也就是說所有的功能已準備好只需你輸入一行代碼即可
我們來快速看看示例代碼以及怎麼在應用中使用
這裏我有一個回調函數當你點擊註釋時就會執行該函數
先來設置detailCalloutAccessory屬性
detailCalloutAccessoryView屬性 作爲UIImageView
大家來看 我放了一個泰姬陵的圖片在callout中
這些就是自定義callout所要做的
怎麼樣 很棒吧？
正如我剛纔所說的這只是UIView和NSView
我們非常高興能爲大家提供這個功能
來看看你們能用它做些什麼
希望我們很快就能看到結果
這就是關於Callout自定義的所有內容
我們來繼續講地圖自定義
在這個特定的話題中我們將介紹新版API
它可以幫助大家控制在Map View上進行的內容
比如在你所有的應用程序中有個地圖程序
怎樣才能控制Map View的內容呢？
如今這些API在地圖程序中已經使用了好多年
現在我們就給大家看看
首先來看交通狀況
現在你可以在Map View中顯示任何交通高峯
你只需要在Map View上插面小旗
這個叫做shows Traffic
與交通狀況功能相似的
我們還要介紹顯示或隱藏比例尺的方法
你可以在Map View左上角顯示或隱藏比例尺
同樣的你還可以顯示或隱藏指南針
你可能注意到了這些API與現有的API很相似
比如showsPointsOfInterest或showsBuilding
我們相信通過使用這些API
你可以在自己的應用中自定義Map View
並獲得實現棒的用戶體驗
這就是地圖自定義
除了地圖和這些談過的API外
我們對MapKit也有很多改進
首先是時區支持
我們在MK地圖項增添了時區屬性
使用這個屬性可以獲得相關的時區
可以和CLGeocoder一起使用
因此你可以用一個特定的座標找到相關的時區
你也可以和MK本地搜索一起使用
這樣就可以搜索感興趣的區域或任何你想查找的內容
還可以找到相關時區
此外我們還對MapKit做了諸多改進
以實現更好的Swift兼容性
同時我們還增加了WatchKit支持
從而可以在手錶上啓動你自己的地圖程序
這些就是我們對MapKit做的所有改進
我們來繼續講下一個話題
同時這也是我個人最喜歡的話題Transit
昨天的講座很令人興奮
同時我們也推出了地圖程序的新功能 Transit
今天我們主要介紹這對於MapKit而言意味什麼
在這個功能方面我們已經做了許多工作
在設計該功能時我們將用戶放在開發過程的中心位置
爲了在你的應用程序中提供類似的體驗
我們希望同過地圖軟件給你提供相似的體驗
和你...
我們採用MapsTransit的入口來實現這一點
我們來逐個看這個入口
首先可以應用Transit ETA
如果你之前使用過MKDirections協議
MKDirection類型和相關的API的話
那麼你也許知道我們支持汽車和步行這兩種交通方式
你可以針對這兩種交通類型提出方向和ETA請求
今年我們添加了新的交通方式
MKDirectionsTransportType和Transit
有這個TransportType就可以應用ETA
我要指出的是你將只爲Transit應用ETAs
你不會獲得Transit方向
我們進入示例代碼之前
來看一下可以怎樣從ETA之外獲得什麼
比如你可以獲得預計到達時間和預計離開時間
考慮到交通頻率的性質大多數都取決於時間和地點
因此提供這一信息就變得非常重要
我們相信通過這些信息
你會爲程序用戶羣提供很棒的用戶體驗
我們來看示例代碼
怎樣才能應用這些Transit ETA
這裏我有個輔助函數getTransitETA
那我先生成MKDirectionsRequest
之後我將設置起點和目的地
一旦完成我將交通類型設置爲Transit
因爲我們感興趣的是獲得Transit ETA
使用剛剛生成的函數
我將要創建MKDirections對象
我叫它ETA計算程序
隨着CompletionHandler確定終點
同時在CompletionHandler上
我將處理從服務器反饋回來的信息
這就是Transit ̨ETA
現在既然我們具備了Transit ETA
那爲了提供完整的體驗我們會介紹一種方法
來啓動地圖軟件進入Transit模式
到目前爲止你可以在地圖軟件上通過不同的啓動方式
甚至其他相關的軟件來啓動運行
此外MKLaunchOptionsDirectionsModeKey
將給你指出哪些地圖軟件模式可以使用
現在我們支持Driving方式和步行方式
在iOS 9中我們還引入Transit模式
通過這個模式你可以從你的程序中啓動地圖應用
我們快速來看這裏的示例代碼
那麼我這裏有個輔助公式openInMapsTransit
這是一個使用座標的公式
我基本上先要用那個解析座標生成MK地圖項
之後我會用Transit模式設置生成字典啓動選項
一旦完成
我只需在地圖程序上使用openInMapsWithLaunchOptions
基本上這是在Transit模式上啓動地圖程序
並且是以在地圖上設置的內容作爲目的地
這部分內容就是這些了
讓我們來看看這些API是怎麼運行的
好的 爲了這次演示 我創建了一個舊金山城市的旅遊應用程序
基本上只是個加上了一些註釋的簡單地圖視圖
我來快速運行一下你們可以看到現在我有什麼
正如大家所見我們有張舊金山的地圖
我用地標做了幾個不同註釋
比如這裏是蘇特洛訊號塔
這裏是金門大橋還有所有這些
我還隨意設置了這些圖釘的顏色
所以如果我向下滾動到...
viewForAnnotationcallback
你們可以看到我設置了圖釘顏色屬性
來自定義這些圖釘顏色
好了
隨着演示的進行我們要嘗試更多的自定義
接下來 我要在副標題加上Transit ETA
爲了實現這個內容我創建了個簡單的輔助公式
我把它拖拽到這裏
這樣就有了個可以簡單處理
當地地標註釋的輔助公式
然後我要這個位子生成MKDirectionsRequest
大家可以看到我已經生成了一個MKDirectionsRequest
之後我在只需在應用中設置個起點和目的地
最後我把交通類型設置爲Transit
因爲我們感興趣的是Transit ETA
一旦具備這些我將繼續
生成MKDirection對象
在這個位置我用該應用創建了MKDirection對象
在CompletionHandler中
我將副標題的註釋設置爲我們預計的到達時間
在地圖視圖上加註釋前我將快速地調試這個功能
我們稱這個功能爲LandMarkPin
好的 我們來運行一下
好了 從Moscone West會議中心到市政廳
坐公共交通工具大約要22分鐘我們在看看其他圖釘
到輪渡大廈 是17分鐘
非常好這能通過使用Transit
給用戶提供一些類似需要多少時間到達目的地的初步信息
但是爲了提供完整的Transit體驗
我們還要想辦法將它們運用在地圖程序中
爲了實現這次演示的目的
我要將rightcalloutAccessoryview
放在我的callout中
同時當我點擊時可以用戶直接轉換到地圖程序
我們快速結束這塊內容並回過頭繼續callback模式
我將在我的AnnotationView
設置rightCalloutAccessoryView
這是我之前添加的rightCalloutAccessoryView
讓我們試一下
好了
你可以看到rightCalloutAccessoryView
這裏已經添加了公交車圖標但沒出現任何數據
因爲我們還沒有點擊callback模式
這套公式每次操作都需要callout的輔助控制
我們快速把這些內容添加在這裏
這個就是已經執行了的
每次操作都需要callout輔助控制的
callback模式
我一旦這樣 就會加入代碼
在地圖應用中啓動給定的地圖項
這裏我先來用模式Key生成字典對象
模式鍵設成Transit
然後 從以往的設置獲取座標
我準備生成MKMapItem
一旦完成我就會在地圖項中打開啓動選項
把這個地圖項變爲Transit模式
我們快點繼續再次運行應用
好了
來看輪渡大廈
點擊這裏
地圖應用進入了Transit模式
可以看到需要乘坐18分鐘的40路公交
再回到示例app試試其他的內容
來看蘇特洛訊號塔的結果好了
這就是獲得的結果
根據Transti的結果需要45分鐘
相當遠
哦 明白了出了點問題
公交站移位了也許就是需要那麼久的原因
無論怎樣 這就是在MapKit中的Transit體驗
我想談談怎樣實現剛說過的自定義callout
我們繼續來看怎樣在示例app中
應用這些callout
好了 首先 我們來談談callback模式
每次點擊註釋就會得到調用
在這裏 我會在視圖上設置具體的回調輔助屬性
爲路標所準備的數據中我有部分圖像
在Callout高級設置中設置UIImageView
來看在註釋中是什麼樣子
在這裏讀出圖像數據
從解析的plist文件中讀出圖像名稱
接着生成UIImage
然後生成UIImageView
在detailCalloutAccessoryView中設置
我們就來運行這個
好了 很好
我現在有了金門大橋的圖像
我們繼續來看
就這樣
這是非常漂亮的金門大橋圖像
來看看還有什麼
還有輪渡大廈的圖像
這就是目前的位置
很好
沒有泛美金字塔圖像
從這裏可知
當我們設置具體的回調輔助視圖
我們總能獲得優先級或副標題
對金門大橋而言我們添加了細節
因而我們也有了副標題
但是一旦設置detailCalloutAccessoryView
它就會獲得優先級或副標題
對於部分其他地標我現在沒有圖像
我們可以在這裏加上文本
我已經生成了文本視圖
那麼我這裏有自定義文本視圖
基本上我剛設置過高和寬
這樣可以通過具體的回調
輔助視圖顯示內容
與圖像類似 我可以從歸檔這些地標建築的
plist文件中讀出數據
我把這些detailTextView
設置成detailCalloutAccessoryView
好我再快速地來運行一次
好了 很好我們來看一下
正如大家所見在蘇特洛訊號塔下面有不錯的文本視圖
我們再來看看其他內容
市政廳也是一樣 文本也不錯
這裏我希望回調副標題
回調UIImageView再回調TextView
這就是這個API的所有出彩的地方
我們非常高興爲大家介紹它
並且堅信各位能實現出色的應用
那麼從這個演示中學到的是
如何來自定義這些圖釘顏色
我們學到如何自定義回調
也學到如何應用Transit ETA
以及如何將用戶帶到地圖應用以便提供豐富的交通體驗
我這邊就是要介紹這些
再來看Flyover有請伊麗莎白
好的
我們來談談Flyover
我是伊麗莎白·林奎斯特
也是在地圖團隊工作的工程師
今天我給大家介紹這些內容
首先Flyover是什麼？
怎樣在應用中發揮作用？
在使用Flyover時怎麼設置正確的區域
並處理攝像頭？
我還會介紹Flyover與現有部分MapKit API怎樣配合
首先Flyover具體是指什麼？
例如說這是Flyover
這裏是各種城市和地標的高度真實3D模型
在世界各地哪兒都有這樣的東西
自從iOS 6起在地圖應用中都可以找到
我們現在爲大家提供機會
爲用戶展示這些互動3D視圖
大家可能注意到在地圖應用中並沒有衛星圖像
有的是位於代表地面的
3D立體圖上方的平面衛星圖
在你們的app中也是這種情況
Flyover的另一個重要特點是:
它是在球體上展示而不是像其他2D地圖類型那樣展示
這就意味着要如何處理區域設置
這部分內容我稍後會介紹
那麼在應用中怎樣才能獲得Flyover視圖呢？
如果以前用過MapKit那麼一定會熟悉MK地圖類型
這是在MK地圖視圖上設置的屬性
是爲了選擇將要顯示的數據類型
我們有普通地圖的標準
還有衛星地圖是從上到下的衛星視圖
還有在衛星視圖中加入了道路
標籤和興趣點的混合地圖
我們現在爲大家介紹兩種新的地圖類型
Satellite Flyover和Hybrid Flyover
爲了在app中顯示這類內容
只需將地圖視圖中的地圖類型
設置爲Satellite Flyover即可
如果想添加諸如標籤 興趣點道路和國界等內容
可以使用HybridFlyover地圖類型
我說過在使用Flyover時有些內容需要考慮
其中重要的一項是怎樣設置地圖的可見區域
大家可能對使用矩形的幾種MapKit方法比較熟悉
如MKCoordinateRegion和MKMapRect
以便設置和獲得地圖的可見區域
不過地圖視圖的可見區域並非總是矩形
在iOS 7中我們介紹可以查看
有斜度的地圖視圖
這樣可以從一定角度查看地圖
當你這麼做時
可見區域就不會是完全的矩形
在Flyover中就是這種情況
這樣也可以看到傾斜的地圖視圖
現在將這個區域縮小來看
這樣就可以看到可見區域的實際形狀
我們在這裏需要做的是定義地圖的可見區域爲矩形
這就包括我們在屏幕上實際看到的內容
就是本例中的藍色矩形
在Flyover中就是這麼做
可見區域都定義爲矩形也就是在屏幕上所包括的區域
在Flyover中視圖不必爲了不是矩形而傾斜
如果有一片區域是這樣 而且還相當大
在本例中可以試着把可見區域設置成藍色矩形
最後就會是這樣
這裏的點就是矩形顯示將一直成爲近似值
因爲Flyover是出現在球體上
同樣如果面積很大的區域
有部分區域實際上不會顯示
在這種情況下部分可見區域實際是球體後面
即便這是個別情況矩形區域設置在
Flyover中依然奏效在傾斜地圖視圖中
如果是從上到下的視圖需要放大很多
建議要確保你是通過
MKMapCamera在展示這個世界的相應部分
MKMapCamera早在2013年的iOS 7中就已推出
想了解MKMapCamera的更多詳情
以及普遍的地區設置問題
我推薦大家看看《將MapKit放入透視圖》
這是2013年的講座內容
但是我要簡要介紹MKMapCamera的功能
它有四個基本屬性
中間座標代表想在屏幕中間顯示的世界上的位置
朝向是攝像頭所朝的方向
斜度是你看地圖視角的傾斜程度
還有高度是你希望攝像頭所處位置
在地圖上方的高度是以米爲單位
還有一個便捷的MKMapCamera初始化器
這會令中心座標和你希望攝像頭
所在位置的視點座標
你所希望攝像頭處的高度
這樣就可以獲得從視點座標看到中心座標的攝像頭位置
不過 在Flyover中有地面 建築
和各種有趣的內容
這就意味着高度
實際上並不像你想象中的那麼簡單
例如這是在建築上方的高度麼？
這是地面上的高度麼？
還是海平面高度？
這並非是中心座標和攝像頭之間的距離
攝像頭實際上在這種情況下更容易測量
我們就在這裏添加了MKMapCamera的新初始化器
我們來快速瞭解一下這是怎麼實現的
先從中心座標開始
也就是你希望在屏幕中間的位置
接着確定一個距離以米爲單位
你希望中心座標和攝像頭所在位置之間的距離
注意這與海拔高度不同
還要確定斜度也就是希望攝像頭所處的角度
還有朝向準備看的方向
通過這個初始化器
你可以完全不必擔心在攝像頭下方的
地面或建築會發生什麼情況
我先放一段短的演示
來看可以用Flyover完成哪些很酷的事情
好的蘇米特剛剛給大家看了旅遊應用
我的Mac上也有類似應用
可以看到這裏的地標
例如懸崖小屋
大家可能還記得有些位置我們還沒有真實的圖像
那我覺得可以用Flyover進行補足
我想做的是
在我的callouts中添加
detailCalloutAccessoryView
我將使用MKMap以便爲Flyover
爲設置成detailCalloutAccessoryView的圖像
MKMap快照非常有用
當你只需要地圖的靜態圖像時
當你不要與它互動時都是如此
我還會爲這個快照加上幾個選項
最重要的是要把mapType
設置成Satellite Flyover
我會使用新的初始化器生成MKMapCamera
來看註釋部分的座標
我接着使用這些選項生成MKMap快照器
啓動快照器如果也已完成且沒有錯誤
我就在detailCalloutAccessoryView生成圖像
我們當然要調用這個功能
好的我們來看效果如何
如果我沒記錯懸崖小屋是我們還沒有圖像的那個
來看 現在有了
好的我們應該還有另外幾處
例如市政廳
相當酷不過 Flyover視圖
當時是可以互動的
我覺得可以在視圖中添加一點動畫效果
我生成一個新的ViewController
這個還太常用不過其中有MKMapView
我會在其中添加部分有用的常數
然後我來設置地圖視圖
大家還注意到我給SatelliteFlyover 設置了地圖類型
還把OS X中可見的指南針和縮放控制進行隱藏
我還生成了MKMapCamera
初始狀態是地標的座標
我需要的設置就是這些
接着我準備再生成幾個MKMapCamera
首先是一個稍稍向下傾斜的斜度攝像頭
這裏還加上了旋轉
這樣可以稍作旋轉
因爲MKMapCamera在MKMapView具有動畫屬性
我會做些動畫處理以便在這兩個之間進行切換
這裏我先添加一段短的動畫效果把攝像頭設置成斜度攝像頭
再把視圖向下傾斜一點再加稍長的動畫內容
也會做少許旋轉動作
在主ViewController中
我加入了rightCalloutAccessoryView
這可以打開新的View Controller
我們再加上按鈕
好的我們再來看懸崖小屋 就像這樣
這裏有個小按鈕可以稍稍傾斜
再做旋轉
這個非常有趣我們也來看看這個
因爲我覺得非常酷
就這樣泛美金字塔也好了
好的現在我們看到了Flyover的部分功能
那我們回到講座中來
一開始時我就說過我想說說
現有MapKit API的部分功能
看看它們怎麼和Flyover怎麼配合
我先從MK註釋講起
MK註釋用於註釋地圖的單一座標
最常見的情況是我們今天使用的圖釘
如果是用標準地圖類型顯示建築
註釋就是位於最上面的部分
在使用Flyover時地圖類型時就是這種情況
當使用Flyover時無論發現什麼
註釋將出現在任何建築 樹木大船 雕塑的上方
接下來是MKOverlay
疊加圖層是用於強調地圖的區域而不是單一的座標
如果是在標準地圖類型的3D地圖中
你會注意到建築阻隔了疊加圖層
Flyover也是同樣如此
Flyover的建築和樹木會阻隔任何疊加層
就像是這樣
不過疊加層會拉到地面的上方這樣就會跟着地勢走
就像是這樣
我覺得爲了在app中用到Flyover
大家需要掌握的就是這些
我真是迫不及待想看看大家的成果
總結一下今天所講的內容
我們對自定義圖釘 callouts和顯示帶有交通狀況 指南針
和比例尺的地圖增加了幾種新方法
還增添了Transit ETA請求
以及啓動地圖app中的顯示Transit方向的功能
我們還增加了Satellite Flyover和Hybrid Flyover地圖類型
這樣可以在app中高度真實地顯示地面的3D模型和衛星圖像
若想了解更多詳情可以看今天
MapKit文件資料和開發人員論壇
感謝大家光臨