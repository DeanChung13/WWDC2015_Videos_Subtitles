早上好
採用新Trackpad特性
歡迎來到會議217：
“採用新Trackpad特性”
我叫羅利·雷德 我是一名AppKit工程師
我是使用新的壓力觸控trackpads方面的“大師”
我們接下來要講的就是這個
新的壓力觸控trackpads
它們是很酷很酷的技術
與我們之前的trackpads不同之處在於
它沒有可供你按壓的實體鍵
代替實體鍵的是四個力傳感器
這樣我們就可以測量用戶對trackpad
施加了多大的力然後我們會把它
和我們的Taptic引擎結合起來
當我們確定用戶在trackpad
按壓的力足夠大足以觸發鼠標的時候
我們就會使用Taptic引擎
把trackpad向側面
稍微拉一下
這樣用戶就會感覺
他們實際上已經按壓到了一個按鈕
就是這樣 trackpad向側面移動
但是你的大腦會讓你以爲
你實際上已經按壓到了一個按鈕
這種感覺真的很棒這樣欺騙你的大腦
讓你的大腦以爲你已經
按壓到了一個按鈕這真的很奇妙
我們樓下實驗室有一些trackpad
如果你還沒有體驗過它
請下來試試
在那裏順便看看Taptic引擎
真的很棒
概括一下你施加了一點壓力
我們給你算一次單擊 但是當你向trackpad施加
更大的力我們也可以辨別出來
我們也可以感覺得到
我們稱之爲Force click
我們也會給你一個更加強烈的
觸覺感受
那麼有了Force click
你就可以很多好玩的事
事實上 讓我給你演示一些
你現在就可以用Forceclick做的好玩的事
像我這樣你可以看到我四處移動光標
你可以看到我對trackpad施加的力
如果我再進一步 你就可以得到Force click
那麼大家都聽到了吧？
是我添加的 你知道
通常情況下 當你進行Force click
的時候 你的電腦並不會發出聲音 我加了這個聲音
是因爲你們並不能實際感受到這個觸覺反饋 因爲
你們在那裏 而我在這裏
這樣 當我在演示中向trackpad施加力的時候
你們就可以觀看了
你能做的一件事就是在取景器中重命名文件
有時候這有點棘手
你必須點擊它然後像這樣
再來一次...我又失敗了
你的時間選擇要正好
這樣你纔不會雙擊打開它
但是有了Force Touch
我就可以Force click它
然後就立即可以編輯文件名了
編輯文件名就非常容易了
但這只是你可以用Force click
完成的事情中的小小的一件
我要很快打開TextEdit
我來捕獲窗口
你也已經看過這個例子了
你可以Force click
你就可以看到“快速瀏覽”
非常奇妙你可以坐在那兒 如果你
調整你施加的力的程度的話你就可以“調戲”下動畫
我們還有另外一項功能特性
我剛纔快速向你演示了一些東西 這個你是知道的
通過改變力的大小我可以改變速度
照片顯示的速度
顯示的指示器的量
你可以控制力的量
當然了沒有繪製區
你就沒法繪製任何東西壓力演示也就沒法完成
最後不要像這樣連接音響
而是要在這個控制器上...
當你把照片歸零時
你會感受到輕微的觸覺反饋
就是在trackpad上
真的很奇妙
我們再回到幻燈片中
我們已經講了很多東西
我們再來講講API
就是那個應用程序用的API就是我們在系統中使用的
各種API這樣你就可以在你的應用程序
中使用Force ToTouch trackpad
添加各種各樣的
新的功能特性
我今天會教你如何成爲
在OS X上使用ForceTouchtrackpad
的“大師”
要成爲
Force Touchtrackpad方面的大師
儘管我們會讓你在一天內速成
你也得從小處着手
你得學習所有的事情
你得學習一個“侍從”在使用
Force Touchtrackpad方面
全部的知識
這些都是與高級API
以及內置工具相關這些API和工具
有些是在我們的掌控下
然後我們會繼續 我們需要學習一名“騎士”在使用
Force Touchtrackpad方面
全部的知識
這些都與壓力流在系統內的變化有關
事件流我們會講講如何在你的
應用程序定製“彈性加載”然後講一講進行
“對齊反饋”的方式
給用戶提供更多的觸覺反饋
最後我們會讓你成爲
Force Touchtrackpad
方面的“大師”
這與力的控制有關
對trackpad進行配置
這樣它可以在給定的情景中給出適當的觸覺反饋
以便你進行控制
並且在適當時機手動進行觸覺反饋
我們來看看吧
要成爲一名“侍從” 我們要說的是“表格行動作”
它是一項很棒 很奇妙的新功能
你在克雷格在keynote上進行的電子郵件應用程序
演示中已經看到過了
我們來講講彈性加載控制
內置的一些東西還有加速器控制
我們會通過一些案例研究來實現這一點
比如說 在郵件這裏如果你在郵件的某行上做
雙指滑動這個動作你會看到更多的
“表格行動作”你就可以點擊它們
或者你可以進行平滑的滑動一個時間更長的滑動
實際上它會激活默認動作
這是用戶的完整手勢之一
這樣向你的應用程序中
添加一些其它的功能就
非常棒
我自己每天都在郵件中用它
它用的API非常簡單
在你的tableView授權中
只要實現
tableView ow
ActionsForRow界限即可
我們會告訴你是什麼界限要麼是前面的
要麼是後面的這樣我們就可以爲你處理爲
從右到左 從左到右
然後你只要返回一個“表格行動作”陣列
創建一個新NS表格行動作你以一個類型 一個標題
以及一個處理程序如果選中了一個項目
那麼回調的就是這個處理程序無論是點擊選中
或者是完成了默認的完整的滑動
那麼它就會調用處理程序
我們有這麼幾種類型：“規則的”以及“破壞的”
藍色高亮的就是“規則的” 在你的
“表格行動作”大部分類型中你都應該使用
“規則的”
紅色的是“破壞的”
不要因爲它們的顏色而做出選中
它不僅僅只是紅色那麼簡單
破壞性的項目 因爲它們本質上就是破壞性的
事實上我們也讓用戶更難完成一次
完整的滑動
他們必須在trackpad上滑動較長的距離
這樣才能觸發默認的
破壞性的動作
這樣是爲了防止他們意外觸發破壞性的動作
儘量在所有的事情上使用“規則的”
把“破壞的”留給破壞性的項目
不要嘗試用紅色它的語義非常重要
你要注意這一點
這個API就是這樣
非常簡單
這個適用於新的Force Touch trackpad
也同樣適用於我們的
老款trackpads和Magic Mouse
這樣你很容易就能把它們加到你的應用程序中
你就可以開啓新的奇妙的可能
我們再來看看取景器中的“彈性加載”
我這裏有下載的一張洛拉的圖像
我想把她移動到“我的文檔”文件夾
我要通過Force clicking
開始拖動它
回到我的歷史我甚至還要改成圖標模式
這樣我就能更加容易地找到文檔文件夾
最後 把它放進“我的文檔”文件夾
你之前可能已經知道了彈性加載
你可以懸停在一個文件夾上超時後
文件夾就會進行彈性加載
我們向許多地方和應用程序中添加了
彈性加載以便把窗口置前
就像你剛纔看到的按鈕是彈性加載的
你只要進行Forceclick 就可以越過
懸停超時
這樣用起來就更直觀更便利
要在這項工具欄按鈕上
實現彈性加載取景器所做的
就是把NSButton的彈性加載屬性設置爲“真”
他們就是在IB內校驗了下框
就這麼簡單
分段控制你也可以這麼做
當我把圖標佈局從列表視圖改爲圖標視圖
那就是NSSegmentedControl
再說一遍 它就是個springLoaded屬性
你可以在IB的一個勾選框上進行設置
在你的按鈕 分段控制上打開彈性加載
就這麼簡單
你可以勾選使用但是如果是
在導航中那麼拖放
就很有用我建議你們去試試
打開它
這是施加力的另一個實例這是QuickTime
我想讓你們注意看這裏的這個快進按鈕
我要使用ForceTouchtrackpad
我要向那個按鈕
施加不同的壓力
你可以看到 我可以達到5x10x 30x
你也可以放慢速度
當你翻看你的電影文件時
你可以控制前進的速度
當你接近你要找的區域時你就可以放慢速度
避免跑過頭
QuickTime能這樣做是因爲
我們有了一種新的按鈕類型
因此快進按鈕就是帶有自定義圖像的NSButtons
它們可以把按鈕的類型設爲
AcceleratorButton或者
MultiLevelAcceleratorButton
對AcceleratorButton來說
你可以在IB這裏設置
當trackpad上的力發生改變時
這個按鈕就會持續發送活動消息
因此當力發生改變時你就會得到新的活動消息
如果力再次發生改變你又會收到新的活動消息
當用戶點擊按鈕達到兩次時
doubleValue的域爲1 這是因爲
用戶達到了我們在trackpad上
接受的力的按壓的最大值
你可以看到壓力在1到2之間變動
你可以隨意
對它進行調整
QuickTime這個實例中 它控制的是加速度
你最終得到的值爲零
當用戶結束追蹤按鈕時你會得到
一條值爲零的活動消息
當他們釋放鼠標按鈕時
你會得到最後一條域爲零的活動消息
實際上 QuickTime在這裏使用的
就是MultiLevelAcceleratorButton
你可以在IB這裏進行設置
MultiLevelAcceleratorButton
是離散的
而AcceleratorButton是一個平滑域
一個介於一到二之間的連續域
AcceleratorButton是整數層
是一個離散整數層你可以用
maxAcceleratorLevel
對它 進行設置
我們的域是介於一到五因此你可以設置
在你的加速中你想要的層數
默認是二
QuickTime把它設置成了五
你又看到了doubleValue
域爲零到五當你點擊時爲一
當用戶上升層級時
它會上升到你設置的最大層級
當用戶停止追蹤時你會得到零的最終
活動消息
QuickTime做的就是這個
這裏你可以看到
QuickTime是如何映射你的各種速度爲
一、二、三、四、五
比如說三就是10x快進
加速器控制的另一個實例：這是“地圖”
“地圖”上有這個漂亮的縮放按鈕
實際上
這些是當做NSSegmentedControls
實現的
NSSegmentedControls
有一種新的追蹤模式
即MomentaryAccelerator
它和加速器NSButtonType
的工作方式一模一樣
在IB中設置這個同樣也非常容易
但是當分段控制活動消息發出後
你應該請求選定的分段的doubleValue
而不是請求
doubleValue
它和我們之前談到的域是一樣的
當用戶結束追蹤時它爲一到二
並且最後活動消息值爲零
分段控制沒有多層選項
它們僅僅支持連續模式
這是一個照片的例子
通過施加力 調整力瀏覽
“照片”中的照片
我可以控制照片移動的速度
我們稱之爲連續加速控制
如果你在NSButton
或者NSSegmentedControl上
有一項加速控制設置
你可以在NSControl節
把連續標誌設置爲“真”
或者在IB中勾選框
你就可以得到我們所說的連續加速控制
連續加速控制是不同的
因爲你不太需要關心
它們的doubleValues
當動作發生時你只是想盡快移動到
下一個滑動上
doubleValue無關緊要
它們會像心跳一樣回來
而力會改變心跳的頻率
這就是區別所在
要把問題講清楚讓我們來對兩者進行對比
在加速控制中
只要壓力發生變化 我們就可以獲取到你的活動消息
因此可能會有延遲
它們可能會互相靠近
這樣你就改變了你在電影中
的快進速度
如果是連續控制對連續加速來說
它會參加到心跳中
然後你就可以完成你的動作
如果用戶施加了多次力頻率會很高
它們可能會
緊密結合起來
像滑動照片此時動畫速度是連續的
它就非常適合不過你何時應該呈現
下一張照片？
應該在下次發出活動消息時呈現
它爲用戶提供了許多控制
要成爲一個“侍從”你需要了解的就這些
恭喜你們現在都成了使用
Force Touchtrackpads方面的“侍從”
我們講了“表格行動作”一個非常容易實現的API
彈性加載NSButtons
加速器NSButtons 分段控制
打開它們很容易我們的高層API
使用這些API在這裏真的物有所值
我們希望你們在你們的應用程序內打開它們
我們接着來看看怎樣成爲一名“騎士”
要成爲一名“騎士”
那就需要理解力在系統內的流動方式
我們來講一下力的事件流
然後我會講一下
彈性加載協議
這樣你就可以使用和NSButton相同的API
在你的自定義應用程序內提供彈性加載
我們最後會談一些對齊反饋API
可以幫助你進行對齊指導以及類似的事情
我們再來談談事件流
我們在OS X已經有了很多事件
你向上和向下移動鼠標
你的放大 旋轉手勢
現在我們再介紹一個：
NSEventTypePressure

新MacBooks時引入的
你也可以在那裏獲得
它們是壓力手勢
當然了和新的事件類型
我們有事件掩碼：NSEventMaskPressure
這意味着在你的跟蹤迴路中
你可以向你的跟蹤迴路中添加
事件掩碼壓力
當你追蹤鼠標時你也可以讓
壓力事件起作用
使用真的很方便
如果你更喜歡響應器這種方式 這樣你可以
覆蓋鼠標向上鼠標拖動 鼠標向下
我們也還有一種新的響應器方式
pressureChangeWithEvent
這樣如果你喜歡的話
你就可以獲取它們
我們再來挖掘下壓力手勢的屬性
這是一種手勢和鼠標事件序列不同
後者爲鼠標上移 鼠標拖動鼠標下移有個體類型
壓力只有單一類型
它有一個段會經歷開始 改變 結束
這樣的一個循環直到手勢結束
我們也有一個階段
階段是指我們如何確定
Force click是否發生了
當你用trackpad進行鼠標下移
你會得到“開始”段
壓力手勢它是階段一
這是標準點擊層次
用戶增加力度
在trackpad上達到了Force click
層級就變成了階段二
這樣你就知道用戶實現了Force click
你就可以立即完成你的Force click動作
比如說重命名取景器
這樣當用戶從trackpad上
釋放力的時候
當它到達點擊層級時就會返回階段一
當手勢結束時最終到了階段零
因爲鼠標按下去後就不再往下了
這樣得到了階段零“結束”段的最後事件
現在 當然了沒有真正的壓力值
就不會完成任何壓力手勢
因此我們也有壓力屬性
它的域爲零到一
注意這裏
壓力屬性就是當前階段的
壓力
正如你在這個圖表中看到的
當你進入階段一壓力開始上升
並且在你進入階段二時達到了1
當你越過階段二壓力立即掉回了零
當你在階段二增加壓力時壓力又重新
開始上升
壓力屬於當前階段
現在我展示的是
trackpad上的力和用戶在壓力事件中的值
這兩者之間的
線性映射但是
我不希望你們過度曲解
我們喜歡把trackpad上的每次點擊
都當成一次冒險我們看到了很多
不同的變量用戶使用他們的拇指
他們偏好的硬度設置
他們如何與trackpad進行交互
因此我們忙着對這些曲線進行動態變更
給用戶儘可能好的體驗
我們把trackpad的輸入標準化爲
零到一的壓力域
你在你的應用程序中也應該用這個
你可能注意到了之前我在演示時四處點擊
僅僅在TextEdit四處點擊
我並不會看到動畫彈出
直到我離的足夠近施加的壓力非常接近
Force click
當用戶只是隨意點擊時你不會希望有
一大堆的動畫出現
分散用戶的注意
當他們接近轉移到階段二時
這個動畫很有用
階段的轉移屬性
就是用來幹這個的
你可以在這裏看到它的域爲零到一
但是在零這裏停留了很長時間
直到你開始接近下一階段
這個例子中是階段二
我想讓你們接近階段二它會暴漲到一
你可以用這個域控制你的動畫
而如果你只是在界面內隨意點擊
它就不會妨礙你
你可以得到這個動畫你一接近階段二
你就可以彈出結束動畫
你可以看到你一接近階段二
階段過渡值就掉回了零在這個例子中
我們沒有階段三可以過渡因此剩餘的時間
它仍然停在零
我之前提到過當壓力手勢存在
鼠標事件也就同時繼續
trackpad還是會繼續模仿鼠標
它也會發出壓力手勢
我要看看這些流是如何在系統中
同時並行
我們接着要講的就是這個
這是一個實例 用戶向trackpad施加力
進行點擊慢慢接近
Force click閾值
然後釋放了壓力
這就是他們的輸入
下面這裏我們要向你演示
進入你的應用程序的事件
一開始用戶施加的是輕微的壓力
這些就是全部的鼠標移動
我們還沒有到達點擊閾值
我們還沒有開始壓力手勢
這些只是鼠標移動
還沒有壓力手勢進來
你達到點擊閾值出現了鼠標下移
你也到了階段一得到壓力開始事件
此時壓力值要變成零
我們不能保證
是壓力開始事件先發生還是
鼠標向下先發生它們有時候會交換位置
處理這個最容易的方式是尋找鼠標向下這個事件
如果你也要壓力事件那麼在鼠標向下發生之後
繼續尋找壓力事件
當用戶開始向trackpad施加更多的力
你可以看到 當我們接近Force click閾值時
壓力朝着一升上去了
如果光標移動這些將作爲鼠標拖動事件
體現出來
你就有了鼠標拖動事件以及
壓力事件我們仍然處於階段一
我們達到了Forceclick閾值
現在你在階段二得到了壓力手勢
壓力值一路掉回了零
用戶繼續向trackpad施加更大的力
壓力再次開始增加 當他們從trackpad上釋放
壓力時它就開始
朝着零回落
現在他們釋放回到了Force click閾值
壓力爲零
此時我們仍然處於階段二
用戶再多釋放一點壓力
我們也仍然處於階段二
實際上 在這個圖表上我們誇張了一點
不過對於一個人來說在trackpad上以一個
恆速保持壓力非常困難
如果他們恰好處於Forceclick層級 他們就會
超越 然後略微下降我們並不希望
觸發 關閉Forceclick
觸發 關閉 觸發 關閉
這不是用戶想做的
我們要求你往Forceclick閾值下
多降一點直到我們最終脫離階段二
然後我們給你最終的階段一事件
在那個小的時間段內
事件的壓力將爲零
很明顯 你在Forceclick閾值下方
壓力將會開始上升
既然你處於階段一用戶繼續釋放
壓力上升再次開始回來
你注意到 它並不是一路跳回階段一
因爲那是間隙的一部分
要注意的一點是這就是爲什麼你不應該
嘗試合併階段一和階段二 獲得更大的
動態範圍的原因
但我們到了“大師”階段時我們會再
多談談
無論何時發生階段二
我們也會自動提供觸覺反饋因此不要嘗試把
壓力合併到兩個階段
要麼看着階段一 使用壓力要麼看着階段二 使用壓力
如果你需要在後者進行你的動畫
或者階段過渡屬性
我們達到了階段一的點擊閾值點
因此你的壓力現在回到了零
就像我們用Force click閾值
做的那樣實際上 在我們
最終從階段一釋放之前
用戶必須釋放更多的力
我們要施加一個力結束時階段爲零
鼠標上移
還是這樣無法保證是鼠標上移先發生
還是壓力結束事件
先發生處理這個最容易的方式是：
尋找鼠標上移同時追蹤壓力
和鼠標運動直到
發生了鼠標上移
忽略任何可能在壓力事件之前
之後發生的序列
這個適用於Mice也同樣適用於我們的
老款trackpads
以及新ForceTouchtrackpads
最後 鼠標上移後如果用戶用非常非常輕微的
壓力四處移動這些鼠標移動
壓力手勢結束了我們會再次開始循環
就像我們一開始做的那樣
如果壓力會和這個鼠標下移聯繫起來
瞭解鼠標下移
就非常重要
是否來自一臺模仿鼠標的設備？
是否給出了壓力手勢事件？
我們就是通過使用鼠標下移事件上的
associatedEventMask屬性
來幫助你做這個
你在鼠標移動事件上也可以看到這個
使用真的非常方便
你爲associatedEventMask
請求鼠標下移事件
你發現它包括了EventMaskPressure
如果你正在使用Cocoa
你就用NSEventMaskPressure
把它結束了
因爲你正在校驗位域
如果它確實包括EventMaskPressure
你知道壓力事件就要來了
你就可以把它設置好 這樣你就可以有不同的筆刷寬度
比如說在你繪畫時
這很棒
如果它不包括EventMaskPressure
那麼它就來自一個鼠標或者 比如說
一臺老款trackpad此時你想選擇一個默認的
筆刷寬度
通常你在此時選擇最大的筆刷寬度
或者你想要選擇一半的筆刷寬度
你在整個鼠標拖動序列中
都使用這個定值
這是新EventTypePressure
它有很多新屬性有一個段
因爲它是一個手勢當前階段的壓力
位於零到一的域內
當然你有階段你很容易就可以看到
當用戶達到Force click
那些過渡動畫的階段過渡
相連事件掩碼
你知道 當你的鼠標事件會有壓力
與它們相連時
當然如果你使用了響應器方式
事件響應器方式
會引起壓力變化
我們再來講講彈性加載
講一講NSButton是如何實現彈性加載的
你可以在你的定製控制器中使用完全相同的API
向你的應用程序添加彈性加載
這是一個
NSSpringLoadingDestination協議
如果你曾經實施過的話
它和NSDraggingDestination
協議非常類似
在你的目標中在你的目標視圖中
你需要實現springLoadingEntered
或springLoadingUpdated
這裏給你一個實例看看是如何實現的：
NSButton實現
springLoadingEntered
而不是springLoadingUpdated
因爲一個按鈕要麼是激活的 要麼是禁止的
因此你一按住按鈕
它就會返回彈性加載選項然後它就
在生命期內就不變了
拖曳就發生在按鈕中
NSSegmentedControl另一方面
實現了springLoadingUpdated
每個段都可能是激活的或者禁止的 彼此獨立
是一個視圖
因此有了springLoadingUpdated
分段控制就可以對拖曳進行觀察 精確找出拖曳
在控制器哪裏
如何動態改變彈性加載選項的
就像我提到過的 你需要...
如果你實現其中的一個方式
你需要實現彈性加載選項
如果你願意你可以兩者都實現
你並不需要僅僅實現其中一個 但是
你最起碼要實現其中一個
對你的彈性加載選項來說很明顯
你返回彈性加載選項應該是“激活的”還是“禁止的”
非常簡單
我們還有其它一些有趣的選項
持續激活
一般來說彈性加載動作是離散的
彈性加載產生了
按鈕發出了動作結束了
還有一個持續版本我們在下面的
幻燈片中 會
講到
我想再講講沒有懸停的情況
就像我之前提到的彈性加載可以通過
懸停或者Force click激活
懸停非常適合
沒有Force Touchtrackpads的
人羣
舉例來說如果你想在一塊很大的畫布上
進行Force click
用戶把項目拖拽過畫布
他們只是試圖拖到畫布另一邊
他們擡起手指回來繼續拖拽
或者擡起鼠標繼續拖拽
這個時間可能會很長
光標停住不動而
彈性加載一直處於激活狀態
這就是一個假的激活
這不是用戶試圖做的
如果因爲懸停 你收到了大量假的激活
如果你遇到了這種情況你可能想考慮下
無懸停彈性加載選項
用戶就可以用
Force Touchtrackpad進行
Force click在你的視圖的那個位置
得到彈性加載
你要保守地使用使用之前務必三思
因爲我們不想遺漏任何沒有Force Touch trackpad
的 用戶
但是如果你收到了大量的假的激活
那麼偶爾用一個這個選項就很好
與springLoadingEntered
和“已更新”一起我們當然還有
springLoadingExited...
當用戶退出了你的視圖它就會告訴你
還有draggingEnded
彈性加載是拖放操作的一部分
因此如果用戶拖過了你的視圖
你的彈性加載目的
你實現了draggingEnded
當拖拽完成後當用戶釋放了鼠標
取消了拖拽
你會拿回draggingEnded
無論用戶是在你的應用程序中還是在另一個進程中
完成了拖拽都不重要
任何實現了draggingUpdated的人
都會得到他們的回調
因爲這是拖拽的一部分
NSDraggingDestination
還有一個draggingEnded函數
它和我們這裏的函數一模一樣
如果你同時使用了彈性加載目的
和NSDraggingDestination
那麼你只需要
實現一個draggingEnded
它會應用於兩者之上因此如果你同時使用了
彈性加載目的和拖拽目的
你就需要爲彈性加載目的和拖拽目的
完成清除工作
現在我們來看看彈性加載真正好玩的地方
因此 要求你實現springLoadingActivated
我們就是在這裏告訴你的目的
用戶進行了彈性加載
我們有一個布爾值通常這個值爲“是”
就像我提到的彈性加載是一個離散動作
它發生了NSButton剛剛發生了動作
大家都滿意了
但是 如果你有連續位組
那麼只要用戶進行Force click
我們會發送一個springLoadingActivated“是”
你可以啓動一個計時器你可以繼續
往那個計時器添加你的活動消息
當你從Force click釋放後 它會回覆給你
一個springLoadingActivated“否”
你就知道你該關閉你的計時器了
如果用戶使用懸停
當懸停超時時 你會得到
springLoadingActivated“是”
當它們從控制器移出時你就會得到
一個“否”
要把這個和正常的離散動作進行對比
通常是在釋放Force click時
來自Force click的彈性加載
它們會一路進入Force click
當它們釋放Force click
如果你不是連續使用你就會得到
一個springLoadingActivated“是”
除非你在彈性加載時需要連續發出你的活動消息
那麼我們通常
會建議你用它
最後 我們有
springLoadingHighlightChanged
我們希望給用戶提供反饋告訴它們當前的情況
我們有三種高亮形式：不高亮
標準高亮 增強高亮
當你得到一個
springLoadingHighlightChanged
消息 你需要告訴draggingInfo那個
springLoadingHighlight是爲了什麼
設置需要展示的視圖
然後你就可以更新在正確的高亮顯示
那裏繪畫
重要的是不要試圖推斷
用戶的任何動作
這就是springLoadingActivated的用途
就像當你從一個菜單中選擇一個項目時
我們會讓那個菜單項目閃爍讓用戶知道 確認他們已經
選擇了那個項目我們在彈性加載中
也做了類似的事
我們是通過改變高亮實現的
因此你需要做的就是用任何需要的
高亮方式繪畫然後你的應用程序的
風格就會和系統的其它地方
保持一致
使用springLoadingActivated來知道何時
發出活動消息
這是彈性加載目的
我們有對齊反饋 當你在Interface Builder中
有兩個項目在一起時你可以看到這個
我們把它們對齊了繪製了這個漂亮的對齊指導
我們有一些新的API能幫助你實現這一點
繪圖由你決定但是我們的新API能幫助你
決定何時應該對齊
這裏給你一個例子我們來看看這個跟蹤迴路
一個典型的跟蹤迴路
我們放大下
你得到了你的鼠標下移事件
你找出你的事件掩碼是什麼你想要追蹤哪個事件
你請求下個事件你移動你的項目
更新你的數據模型設置你的需求顯示
鼠標上移了嗎？沒有你就繼續這個循環
無論drawRect什麼時候被調用你就繪製
你把你的項目拖過屏幕直到發生了鼠標上移
我們有一個
NSAlignmentFeedbackFilter對象
能幫到你
你把鼠標上移你做的第一件事
你從對齊反饋過濾器中
得到輸入事件掩碼
對齊反饋過濾器需要知道這個
當你調用nextEventMatchingMask時
你只需要或者把它們 或者
把它們的並集 在Swift實例中和你的事件掩碼並運算
你一旦得到下個事件你要做的第一件事
就是把事件送到對齊反饋過濾器
它會立即返回
它只是更新一些內部狀態
你移動...不好意思 如果你使用的是pan手勢識別器
你也可以用pan手勢識別器來進行更新
它和跟蹤迴路工作方式十分類似
一切都適用除了這個消息差異
對齊反饋過濾器一旦處理完輸出 返回後
像你平常那樣你把項目移到你的數據模型
然後你準備對齊
我們來挖掘一下準備對齊你得使用對齊反饋過濾器
來幫助你實現這一點
我們之前在數據模型中有對象
我們得到了事件我們決定用戶移動到這裏
如果我們不進行任何對齊
這裏就是默認位置
這是對象結束的地方
我們想知道：是否應該在這裏對齊 是否應該
向下對齊這條線 或者我們是否要同時對齊
弄到下面角落裏
使用對齊反饋過濾器對象來幫助你
決定這個
alignmentFeedbackToken
ForHorizontalMovementInView
previousXalignedX和defaultX
這些座標都位於窗口座標空格上
因此無論你在視圖內的縮放層級是什麼
它都工作的很好
如果發生對齊我們就會返回給你一個
對齊反饋令牌
如果你沒有得到對齊反饋令牌
那就不要進行任何對齊
如果你得到了對齊反饋令牌
在這個例子中 在你的數據模型中改變X位置
改變爲對齊位置留住那個
對齊反饋令牌
然後你也可以校驗縱向運動
除了你要發送你的Y值代替你的X
你還是可能得到 或者得不到對齊反饋令牌
如果你得到兩個對齊反饋令牌 你就需要
在兩個軸線中對齊這樣你的對象就會
到下面角落這裏
有時候這個並不經常發生
但是如果它同時在X軸和Y軸對齊
你只想對齊到一個位置它要麼對齊
兩個軸要麼哪個軸都不對齊
此時我們有運動的對齊反饋令牌
你越過點而不是一個個體X座標
或者Y座標兩者都可以
你可能得到 也可能得不到對齊反饋令牌
你對拖拽的各種項目進行迭代 這樣它們
可以對齊你拿回你的對齊反饋令牌
如果發生對齊你就改變你的數據模型
現在你有了一系列令牌
你想要給使用新Force Touch trackpad的
用戶提供觸覺反饋
我們會使用對齊反饋過濾器來幫助我們這樣做
我們會讓對齊反饋過濾器在執行時間來
執行反饋
現在執行時間先使用默認值
我們稍後會再講一講執行時間
然後你給陣列傳遞一個反饋令牌
如果沒有對齊 你甚至可以傳遞一個空的陣列
對齊反饋過濾器在這方面很健壯
它知道什麼都不用做
然後你設置你的視圖爲需要顯示
無論什麼時候要求你就重新繪製 如果你
有令牌 你就知道你何時在重新繪製
如果對你的UI合適的話繪製對齊指導
然後反饋就會同步和屏幕改變執行
用戶就可以有一個漂亮的
同步看到對齊指導彈出
他們也同時從trackpad上感受到
觸覺反饋
如果用戶用的不是ForceTouch trackpad 對齊
反饋過濾器也知道應該如何工作
所以你只需要假設是Force Touch trackpad
你只需要寫就可以了
如果不是那就沒問題
所以 實際上
就是使用對齊反饋過濾器
它們非常簡單的API添加到你的應用程序
和現有的跟蹤迴路中很容易
讓整個app提供一致的風格
比如 我們看看光標的速度
因此如果用戶移動的很快我們就不對齊
因爲我們不想在那個時候
進行對齊
那不是用戶想要做的
我們來看修改值
這會給所有使用系統寬度對齊反饋API
的應用程序提供
一致的風格
你就可以用它不僅僅是拖拽一個項目
如果你重新調整尺寸比如說 或者自動調整
那就非常適合用對齊反饋過濾器
它可以用在很多不同的地方
要成爲一名“騎士”你需要了解的就這些
恭喜
你們現在都是使用
Force Touch trackpad的“騎士”了
我們來繼續成爲“大師”
都是關於力的控制
是關於對trackpad進行配置
這樣它就能適用於你的定製情景
手動提供觸覺反饋
我們再回到繪圖這個例子
你開始繪圖 你按壓ForceTouch trackpad
你得到了Force click
但是它並不真的適用於你的繪圖
就像我之前提到的你不希望嘗試合併
階段一的壓力值和階段二的壓力值
合併 甚至在釋放時也不行
這樣用戶就會在繪圖過程中
得到觸覺反饋這種經歷
可不妙
因此我們想要對trackpad進行配置
讓它在這個例子中不提供一點Force click動作
我們能用壓力配置對象做的 就是這個
我們先用一個pressureBehavior開始
校驗下頭部文檔和資料
校驗NSEvent.h頭部文檔中對每個
都有大量的描述
我不會每個都講
默認的是DeepClick這是系統
發生的
在這個例子中 我們想要PrimaryGeneric
PrimaryGeneric是個階段一手勢
因此當用戶在繪製時他們就不會得到
Force click動作
給用戶提供了在他們的trackpad上輸入力的
最大的動態範圍把它向你映射回去
映射到零到一的壓力
最適合繪圖以及其它多個
情景校驗頭部文檔
看看其它行爲描述看看
哪個適合你的情景
一旦你完成壓力配置後
你就可以調用設置
trackpad現在在新的配置中配置好了
一切都很好有了一些畫布
在鼠標拖拽時 你可以
僅僅把trackpad設置成一個不同的配置
在鼠標上移中 你對鼠標的位置進行校驗
如果這個特定的
鼠標位置需要改變
創建一個壓力配置調用設置
trackpad就會做出改變
你需要意識到此時你在和用戶競賽
用戶可能使用光標翻過你的視圖 立即進行
Force click 釋放鼠標而你甚至
還沒有下移鼠標
也許你被從虛擬內存中置入分頁
你的app失去響應了
你可以試着設置壓力此時的trackpad配置
但是用戶已經完成了他們的手勢
手勢不會生效
當你設置trackpad配置時它會自動重置爲
系統默認值用戶也會同時
結束手勢因此你不需要擔心
對它復原
但是對多數情況來說這不夠理想 當你需要
根據鼠標位置 在最後一分鐘決定
配置應該是什麼時這很有用
而不是在NSView上設置壓力配置
提前創建一個壓力配置
在NSView上把它設置爲壓力配置屬性
系統就會在鼠標下移發生之前
設置好trackpad
事實上 系統可以給trackpad配置爲這種配置
即使你的app
失去了響應
現在用戶就可以繼續和你的應用程序交互了
你甚至還沒有完成鼠標下移
但是他們沒有感受到Force click
因爲它位於PrimaryGeneric行爲
以及你從應用程序中得到的事件
當你最終得到你的事件此時從系統中
獲得如果
你失去了響應 不要在它們裏面進行Force click
它們不會到階段二
我們再來講講觸覺反饋
觸覺反饋應該保守使用
它們是用於微妙的交互
我們想讓trackpad感覺很奇妙不是嗎？
當用戶想要對齊某些東西時
它們會得到觸覺反饋感覺很棒
但是我們不是想在這裏按摩用戶的指頭
我們只是想進行微妙的交互
事實上 如果用戶用回我們的老款
trackpads我們希望他們根本
意識不到 雖然設備換了但是卻
基本感覺不到
使用觸覺反饋的意義就在這裏
正確使用的話當用戶試圖做一些事情
的時候給他們一點微妙的反饋
是的 就這樣
它就應該一直是這樣
我都不知道
微妙的交互
你爲defaultPerformer請求了
NSHapticFeedbackManager
始終請求defaultPerformer
因爲它可以根據輸入設備以及用戶的偏好
進行改變
在某個特定的運行時間你要求執行反饋模式
我們有三個
模式：“通用”“對齊”以及“LevelChange”
對齊可以用於很多事情
即使你只是旋轉一幅照片進行水平對齊
打個比方 你也可以爲它使用對齊
“LevelChange”就是NSButton在不同的多次方式中用的
當層級改變時它會提供觸覺反饋
如果那兩項對你試圖做的事情描述的不夠充分
那就使用“通用”
你想讓你的觸覺反饋與屏幕上進行的事物
同步執行那麼默認的
就是DrawCompleted
如果你用Cocoa繪畫或者用核心動畫
你就用DrawCompleted執行時間
這個會自動把它們爲你同步起來
這樣在事件進程中 繪畫中你就能確定你的觸覺反饋
你就可以僅僅關注繪畫
如果你直接用Medal或者OpenGL
那就可以用“現在”當事情在屏幕上更新時
你需要確保你排列了它們這樣
它們可以同時發生
就是這些
你們現在都是使用
Force Touchtrackpad的“大師”了
我迫不及待想看看你們在你們的
應用程序中運用這些東西我們講了“表格行動作”
加速按鈕 彈性加載我們講了力在
系統中的流動
進行對齊反饋最後是控制trackpad
爲你的特定需求配置trackpad
你能做的事情很多
剛纔在我的演示中的小app
叫做Force TouchCatalog
你可以下載後看一看
我們也有對齊指導樣例應用程序
把它們用起來也確實有用
我建議你們看看“WebKit和Safari中的
網站開發有什麼新料”
這樣你就可以瞭解Safari在網站環境中
是如何承擔壓力的
這之後我們會有個實驗室
“Cocoa和Force Touch 手勢”
實驗室 我當然也會到場
我十分樂意傾聽你們就如何在你們的
應用程序中使用ForceTouch的想法 你們甚至可以給我
展示下你們已經完成的東西我會十分樂意觀看
並且和你們討論
會議結束後請到實驗室找我
非常感謝祝你們剩餘的時間過得愉快