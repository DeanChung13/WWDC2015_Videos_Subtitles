Metal技術最新內容 第一部分
下午好
歡迎來到WWDC 2015
歡迎參加
《Metal技術最新內容》講座的上半場
本週的三次講座中
有許多Metal的內容
實際上 我們已經在API中加入很多新內容
所以決定要把《Metal技術的最新內容》
講座分爲兩部分
那麼今天
我主要對過去12個月的Metal
生態系統進行扼要回顧
像諸位這樣的開發人員已經運用Metal
創造了很多應用
我會介紹我們今年推出的
部分新功能
最後 我們會通過具體實例
介紹app瘦身技術
將Metal如何與
系統的其他部分相整合
在下半場《Metal技術最新內容》講座中
丹·大汀和安娜·蒂科諾娃
將詳細介紹今年
我們用Metal新推出的
一款非常棒的支持庫
或是兩個這樣的支持庫
MetalKit可爲API提供便捷
讓你可以生成出色的Metal應用
和MetalPerformanceShaders
我們高度優化的着色器庫
可以直接從應用調用
最後 在後一場講座中
菲爾·貝內特
會深入介紹利用...Metal應用
實現可能的最好
表現的出色技巧
在本次講座中
我們將介紹最新GPU
System Trace工具所以一定要看看
去年的WWDC上
我們介紹了iOS 8的Metal技術
目標是圖形的重新實現
並計算API在我們的平臺上
給你提供最好的GPU表現
我們通過讓你和GPU之間的軟件
發揮最大效用實現這些
爲更形象地說明
我們現在來看
在去年的WWDC舉的例子
其中描述
GPU和CPU每幀完成的工作
在本例中
頭部工具條代表CPU所用時間
底部工具條代表GPU時間
正如大家所見目前CPU密集
GPU在幀的部分位置比較空閒
有了Metal 我們可以
大幅減少GPUAPI開銷
有效地
將GPU作爲高幀數的瓶頸
這其中最棒的是你可以利用CPU
額外的空閒時間
讓遊戲效果更好
例如 可以增加更多物理應用或AI
如果你可以簽署更多
繪製調用來增加場景的複雜性
但是我們不會止步於此
Metal還可以實現成本較高的操作
例如 着色器編譯
和狀態確認
從每幀數千次的繪製時間
到發生頻率不高的
加載時間均有涉及更好的是在部分情況下
是構建時間
這樣用戶根本不會發現任何影響
此外
在iOS 8中
我們不僅爲iOS設備
引入了計算或首次面對此類計算
而且還提供了圖形和計算
API之間的凝聚整合性內容
以便在支持Metal的設備上有效交叉進行渲染
和計算操作
最後
通過Metal
你的應用可以
更高效地運用多線程
而不會受到API的影響可以實現
多線程編碼
結果會非常出色
去年
我們展示了
Epic開發的《禪境花園》演示
其中用到Metal實現場景中十倍
數量的繪畫調用
我們還展示了EA的《植物大戰殭屍》技術演示
其中使用Metal把控制檯渲染引擎
才能得到支持
這就爲開發界設定了高標準
在去年 我們見證了充分利用Metal API
而推出的部分
水平極高的作品
諸如SuperEvil Mega Corp公司
推出的MOBAVainglory遊戲
其中運用了Metal實現每秒60幀的效果
迪斯尼的《Infinity:ToyBox 2》
Metal使其
可將控制器圖形和遊戲
體驗帶到了iOS
Gameloft的《Asphalt 8》
可以運用Metal
提高遊戲可玩性將遊戲中的渲染速度
比對手高出3倍
但還不僅是遊戲方面
隨着用於iPhone的
新版本Pixelmator推出
Metal被用於強大的
變形工具中的
加速圖形處理功能
實際上
相關反響非常強烈
有相當數量的
主要內容和遊戲開發人員
在OS X上使用Metal
因爲我們對在iOS平臺上
推出領先的遊戲
控制檯引擎所做承諾大部分這樣的內容
才能得到支持
這包括
UnityEpic的《虛幻引擎4》
EA的《寒霜》
移動引擎
去年 我們還展示了
Metal怎樣在
應用訪問GPU的全局圖景中發揮作用
一方面 我們有着高水準的2D和
3D場景圖像API
以提供難以置信的
功能和便捷
另一方面
通過Metal
我們提供了GPU的直接訪問路徑
這樣你可以爲
應用所做的事情
就會多了很多如果選擇使用
更高級的API
最棒的是
我們可以在幕後實現很多改進
你可以從中受益
而我們不需改動一行代碼
今年
我們很高興宣佈了
我們做到了這些並讓Metal
在整個系統技術中表現得更強大更高效
我相信這將會提升
用戶在我們的平臺上的體驗
這也是支持Metal設備的很棒的一年
iPhone 5S和iPadAir在去年的WWDC上
都是主打產品隨着iPhone 6
6+和 iPad Air 2的推出
我們現在有了支持Metal設備的
難以置信的安裝基礎
但是當然還不止於此
我們很高興地宣佈
將Metal納入了OS X平臺
我們在所有的
傳送配置中都廣泛支持Metal
實際上 自2012年起所有的Mac就已支持Metal
當然 這意味着我們會支持所有
三家GPU廠商：Intel AMD和Nvidia
其他好消息還包括
我們將大家熟悉的
iOS上的所有工具也都加在了Mac平臺
這其中包括Frame
DebuggerShader Profiler
和所有API分析工具
這相當了不起
我們瞭解調試複雜圖形
和計算應用的難度
並認爲這對大家在OS X上的
開發工作意義重大
當然 所有這些在
OS X ElCapitan版本
搭建的種子中可以獲得如今這一版本可以下載
OS X上的Metal
是你所熟悉的同樣API
用的是iOS
增加了幾項主要功能
新款API支持設備選擇
離散內存
和新的紋理格式
Metal可以讓你將iOS應用帶入
OS X變得異常容易
這裏有幾個實例
開發人員正是這樣做的
大家從主題演講中聽到我們在與Epic合作
將其iOS Metal開發代碼帶到
Mac中的《虛幻引擎》
Epic運用Metal
和延遲渲染器
在《堡壘之夜》遊戲中創建這種神奇的風格效果
此外 Unity在幾周內
就推出了他們的引擎
並展示了他們的《海盜村》
演示
很高興能在OS X的Metal中看到這樣的內容
我們在與若干Mac開發者合作
幫助他們通過Metal使用Metal的強大功能
同樣 大家從主題演講中聽到
數字內容生成應用的相關介紹
Adobe這樣的開發者
在使用Metal訪問GPU
加速圖像處理能力
The Foundry公司
也在運用Metal
加速其3D建模應用MODO
今天
來自The Foundry公司的傑克•格里斯雷
來談談他們在OS X使用Metal的經驗
歡迎傑克
謝謝 拉夫
大家好我是傑克•格里斯雷
在The Foundry公司負責新技術部門
在The Foundry 我們爲數碼藝術家創建工具
我們的軟件在全世界
用於遊戲 影視等領域
包括拍攝真實的祕魯熊
變形怪物獵人
但並非僅限於虛擬世界
我們的部分設計客戶如阿迪達斯是
是在切實生產產品
如果你詢問設計師
他們會告知你 任何產品都是經過成千上萬次試驗纔會成型
我們理解這一過程
我們創造的工具
就是針對此類支持
MODO是我們的著名3D
建模動畫和渲染系統
它可用來製作遊戲電影和產品設計
等等很多不同的應用
我們的用戶創造出
非常精彩的畫面和動畫在真實世界和虛幻世界中都有
在我們的MODO 9.01最新版本中
對GPU渲染器做了修改
旨在爲設計者提供儘可能
高質量的流暢互動體驗
這樣做的好處在於如果視口是實時
你就可以完成數十倍單個軟件
渲染器的決定
在iOS中 我們已經完成了部分早期工作
但是在幾個月前我們有個絕好的機會
可以在OS X上開始使用Metal
我們組織了一個小團隊讓他們來接受挑戰
只給4周時間來看他們可以將
生成多少新的MODO視口並在Metal上運行
我們機會立刻會得到一些很令人震驚的結果
雖然
這不過是小三角
但是這代表了我們的一個巨大里程碑
一旦我們可以做到這點就可以很快的取得進步
我們的進攻計劃其實是從下往上
並開始將新視口的功能帶到了Metal
第一天
我們是從環境開始入手
我們添加了更多的三角
加一點着色處理會
讓它看似更像是真正的汽車
加上柔和的陰影
還有特殊的高光處理
加上了閃閃發亮的效果
人人都喜歡亮閃閃的東西
就這樣四周後
大家還記得那個單一的三角形嗎？
結果難以置信
把這些都放入Metal
僅僅用四周時間
我們就實現了
所有視口都在Metal的MODO運行
很棒的一點是
這提供了跨iOS和OS X的標準化渲染器
我們在兩個平臺間生成了WYSIWYG工作流
那麼我們學到了什麼？
首先我們瞭解到使用Metal充滿樂趣
我使用OpenGL工作已經20年時間
我可以告知大家API輕鬆易用
就像是呼吸新鮮空氣一般
其次
Metal中的調試和
優化工具也非常神奇
我剛說過
如果你在GPU上做過調試
就會知道爲什麼這點很重要
Metal的速度非常快
在部分測試中我們實現了3倍加速
這是在同樣的GPU使用完全相同的數據的結果
繼續來看 我們對新的視口有些很大的計劃
我們想將它整合到TheFoundry公司的所有工具中
希望 能很快看到Metal
出現在有趣的地方
請拉夫回到臺上非常感謝
謝謝 傑克
非常好
接下來我會聊聊iOS 9和OS XEl Capitan
引入的新功能
這樣的功能有很多
只能對我們
今年新增的功能選擇性介紹一番
實在沒時間各個都講一遍
我先來說說子集問題
包括GPU系列集
我們的新內存模型
紋理壁壘
<br/>和擴展的紋理支持
當然 我之前提過
在本週晚些時候的講座中
大家可以瞭解到
MetalKitMetalPerformance
Shaders新的Metal System
Trace工具等更多內容
我們現在就來詳細介紹
我想先從GPU開始
這是我們的Metal功能集
Metal定義了專門針對生成GPU
硬件的功能集合
Metal調用這些GPU系列
因此GPU功能集
是由iOS或OS X平臺所定義
Family Name主要針對
硬件生成
版本則可以
讓我們隨着時間推移增加功能
詢問功能集意義不大
只需在Metal設備上
調用supportFeatureSet 來決定是否GPU系列即可
這裏是iOS功能集矩陣
大家會注意到我們會支持
兩個主要GPU系列
和版本來區分
iOS 8
和iOS 9功能
在OS X中
GPUFamily1 v1功能集代表
我們將在OS X ElCapitan推出的新功能
這在桌面平臺定義了支持Metal
設備的基礎
現在 我想談談
兩個新的着色器常數更新我們所添加的API
首先來看看背景
對於在命令緩衝區的每個
繪畫編碼都需要發送給
着色器部分常數數據
若要每個繪畫都有單獨的
常數緩衝區那麼效率就會變得極低
所以一般來說 大多數Metal應用
會每幀分配一個單獨的常數緩衝區
接着在爲繪畫編碼時
將常數數據增加到緩衝區
代碼會是什麼樣呢？
首先 我們爲
常數緩衝區和數據設置
正如示意圖在繪圖環中
你發送新的常數數據
或將新的常數數據圈入常數緩衝器
現在 值得注意的是
setVertexBuffer調用
實際上在做兩件事
它在設置常數緩衝區
也在更新其中的偏移
現在 在這兩個操作中 設置常數
緩衝區的調用造價最高
Metald的API可以實現
分離這兩個操作
並將造價高的調用
用來設置常數緩衝區
或頂點緩衝在繪畫環之外
如果每幀有數千繪圖調用
這就會有大量的節約
但是如果你只有少量的常數數據
讓Metal來管理常數緩衝區效率
也許會更高
Metal有setVertexBytes API
你可以用它來爲
每個繪畫調用增加新常數
實際上 關於這一點我還要補充一些
我說過
如果只有少量常數
API很好可以有數十字節常數
如果有更大的常數集
你想在
其他API中使用
很可能 這樣會效果更好
好 我現在來談談新的內存模型
新內存模型的目標是支持統一
和離散的內存系統 而無需
做出太多改變
Metal現在支持離散內存
這是高速內存部分桌面的
GPU可以訪問
我們實現這些的方式
是通過新的存儲模式
你可以明確
資源在內存中的位置
模式可以是共享
專用和
託管狀態
在接下來的幻燈片中
我會依次來介紹
先來看看共享內存模式
這就是在iOS 8
現有執行的模式
在統一的內存系統用於存儲
緩衝區或紋理的
內存共享於CPU和GPU之間
內存只有一份拷貝
內存在命令緩存區邊界方面保持一致
也就是說在通過CPU訪問之前
需要用GPU做此番處理
這會令它易於使用
但在iOS 9
和OS XEl Capitan中
我們引入了專用存儲模式
專用內存
只能通過渲染 計算
或傳送操作由GPU進行訪問
專用內存的優勢在於性能
Metal可以用最便於GPU
訪問的方式存儲數據
例如 使用幀緩衝壓縮
專用存儲模式與離散內存系統
配合很好可以將資源
放入GPU可以最快訪問的內存中
現在 只有在OS X中
我們引入了託管存儲模式
有了託管內存資源就可以在
離散內存
和系統內存中進行存儲
Metal管理着兩個拷貝的一致性
這樣可以提供分享存儲模式的
便捷性和靈活性
在多數情況下
是專用存儲模式的性能
如果你有統一內存系統的
桌面系統
就你不必擔心
託管額外的開銷
只有Metal維護的資源的一份拷貝
如果要調整CPU或GPU的數據
還有另外兩方面需要
考慮
首先
如果要用CPU調整數據
則要通過調用緩衝didModifyRange
或紋理replaceRegionAPI 讓Metal瞭解
同樣 如果要讀回數據
則需要調用synchronizeResource API
還要注意的是
在真正用CPU讀取
數據前 要等到操作完成之後才行
我們現在來看之前展示的
着色器常數升級實例
這個實例正在使用共享內存
在離散內存系統中
你很想讓常數
在離散內存中
這就可能要用到專用緩衝區
還是必須要將轉移託管到緩衝區
使用託管緩衝區則要簡單很多
有它就會相當容易
只需要做兩點
首先
在生成常數緩衝區時
必須明確託管存儲模式
然後
要調用didModifyRange
告知Metal 你已經用CPU升級了常數
就這樣
代碼的其餘部分仍然保持不變
值得注意的是在默認情況下
緩衝區可以在所有平臺共享
在iOS
在默認狀況下紋理也是同樣如此
但是在OS X上
我們選擇爲紋理託管
製作默認模式因爲它可以允許
編寫攜帶版代碼而不影響性能
但是在有些情況下你不會想要
使用託管紋理
這就是其中之一
當你有幀緩衝區
或可渲染紋理時
你想用專用存儲模式
還獲取最佳性能
如果只有GPU可以
訪問數據這就非常重要
這就是我們在Metal中的新內存模式
我想來介紹Metal中的兩個部分功能
都是OS X特有的我覺得你會喜歡
首先是分層渲染
API的意圖是要
讓你可以將繪製的
每個三角形的紋理
的具體層次都能進行渲染
因此這可以是數組紋理的切片
3D紋理的平面或立體紋理的表面
在每個三角形的基礎上你可以明確
要渲染哪一層
只要在頂點着色器中
明確數組索引即可
遊戲《堡壘之夜》就是用的這種技術
爲部分環境照明渲染立方體
貼圖的表面
我們認爲 你也會覺得這個功能同樣有用
第二個功能也是OS X所特有
就是紋理壁壘
在默認狀態GPU會傾向於覆蓋
繪畫調用的執行
不能在隨後的調用中
可靠使用繪畫調用的輸出
而無需某種形式的顯性同步
Metal現有一個API
可以在這些
繪畫調用之間插入壁壘
對於在OS X
執行有效的可編程混合非常關鍵
API很易於使用
只是在你想要同步的繪畫操作中間
插入壁壘
最後 當然不是最不重要的內容
我談談
今年Metal的擴展紋理支持
在默認條件下
iOS中所有紋理的
最大限制已經增至8k
我們還增加了OS X的立方體數組支持
在所有平臺上的各板中
都能提高防疊效果
我們還大量增加了像素格式
便於在計算着色器編寫
或讀取數據
還有是紋理使用屬性
這可以實現對紋理標籤
告知Metal 你準備怎樣使用它們
Metal會對使用進行優化
例如
如果你有可渲染紋理時
想要設置renderTarget
和shaderRead旗標
這會告知Metal
你計劃在紋理上
所渲染 然後還要從中取樣
默認狀態下
使用是未知的
Metal不會做任何假設紋理會如何使用
允許Metal在系統的任何地方進行使用
與iOS不同
桌面GPU 更喜歡
單獨境深模板紋理
我們添加了兩個新的組合境深模板格式
32-8格式
在所有硬件
iOS和OS X都會支持
不過只有部分會支持24-8格式
如果這意味着是精度要求
就需要檢查是否可用
我們來談談紋理壓縮
所以所用壓縮格式類型取決於所
針對的設備
以及編碼的數據類型
在iOS
我們支持若干格式
包括PVRTC
ETC2
和EAC
對於GPUFamily2的新增內容是
我們也支持ASTC
因此ASTC是高質量壓縮
要比相同大小的
PVRTC和ETC要好很多
它可以實現對若干不同格式的
圖像內容
高度圖
法線圖等等進行編碼
它還提供了尺寸和質量之間的
細粒度控制
每個像素爲1到8 bits
在低端
這是PVRTC所需的一般存儲
最後
如我之前提到
這隻在支持GPUFamily2的
設備上可用
所以 大家要留意這點
最後 在OS X中
我們介紹了桌面GPU
支持的所有原生紋理壓縮格式
這些BCn格式
大家應該都很熟悉
如果是在桌面平臺
或遊戲控制檯工作過
你可能已經有了這種格式的資產
這是我們的擴展紋理支持
我今天就介紹這些功能
我想換個話題
談談一種
名爲app瘦身的新技術
在上次講座中大家可能聽到過一些
這不是Metal特有的功能
但是它是基於
以前我在講座中之前介紹的GPU系列
首先 設定上下文
開發人員典型的遊戲開發
和開發流程在我們的平臺上
基本是這個樣子
你一般會有藝術管道
來生成部分資產
資產是通過Xcode搭建
或自定義工具管道
是二進制格式
然後二進制格式再
發送到App Store的某處這個具體的
或是相同的二進制要部署到
你的所有用戶的設備中
這樣很好
但是一旦開始有了具備具體設備
功能的資產
就會開始遇到一些問題
例如
如果有些資產是專門針對
Metal設備
有些資產是特別用於舊式設備
現在必須要下載兩種版本
以便用於所有的用戶設備
顯然 這並不理想
App瘦身可以通過允許按照功能
爲資產貼標籤 來解決這個問題
這樣只有設備需要的資產
纔會真正下載到設備中
具體怎麼做呢？
app瘦身
可以實現
跨越兩級來定義功能
即GPUFamily版本
和設備內存大小
這就會生成一個矩陣可以用來針對
具體設備
我們現在來看典型的法線圖實例
理想狀態下 你希望將法線圖壓縮存儲
EAC是不錯的格式
但是因爲部分
就是設備不支持壓縮紋理
特別是EAC你可能需要
該資產的未壓縮格式
app瘦身可以爲資產加標籤
並僅下載
壓縮格式到支持Metal的設備上
未壓縮版本到舊式設備中
但是app瘦身的功能還不僅如此
我們來繼續擴展實例
它可以支持更多設備
具體在本例中我們將生成5個資產
我們先從高分辨率的ASTC版本
用於最強大的2GB設備
然後 我們會包括稍低的分辨率
用於1GB版本的設備
因爲部分Metal設備並不支持ASTC
我們也會包括EAC版本
然後 對於舊式設備
我們有未壓縮版本的資產
我們可以把這個實例進一步擴展
通過最低未壓縮資產的較低
分辨率的版本用於較低端的設備
512MB的配置
你可能不希望生成5個資產
但是我想要說明的一點是
你有着極大的靈活度來
鎖定具體設備
爲用戶生成最佳體驗
Xcode整合了很好的UI 可以
這樣來爲資產加標籤
首先需要做的是定義你要
鎖定的設備功能
這會生成小矩陣
然後只需要
留下資產
以便與GPUFamily系列的
相互交叉和準備鎖定的設備內存大小相匹配即可
這非常簡單
但是 當然我們
意識到並非所有的開發人員都有
存在於Xcode的工具管道
所以我們也包括了這些
我們支持app瘦身的JSON文件格式
以便明確資產分類
正如在Xcode一樣
你需要明確GPUFamily版本
以及希望包含在分類中的各資產的
設備類型
一旦將資產分類定義完畢
怎樣在運行時間獲取數據呢？
答案就是NSDataAsset類
它可以提供與運行設備的
功能相匹配的資產
通過NSDataAsset很容易做到
只要
用賦予資產分類的名稱
分配NSDataAsset對象即可
然後在數據中使用
通過我開始展示的示意圖和法線圖
實例來把它接合在一起
在這種情況下你的藝術家可以
生成一系列法線圖部分壓縮 部分未壓縮
鎖定你想要的具體設備
可以通過Xcode或自定義工具管道
做成二進制格式包括很多資產的
龐大二進制格式上傳到App Store
最棒的是
只有用戶所需的法線圖
纔會下載到他們的設備中
這就是app瘦身
我們認爲 這將會改變大家
在支持Metal的設備上
生成和部署內容的方法
這就是在過去12個月間
Metal生態系統
的旋風之旅
我們看到像諸位這樣的開發人員 使用Metal
生成非常出色的內容
我們將Metal帶入了OS X
我們也將所有出色的Metal GPU工具帶入OS X
我們引入了部分強大的新款API
相信大家一定會喜歡
最後 我們談到了Metal怎樣與
系統相整合通過app瘦身技術來實現
總之 這是相當不錯的一年
我們非常渴望看到大家
在來年能對Metal有怎樣的出色應用
請來訪問我們的在線文檔資料
還可以到支持論壇看看
如果問題沒有得到解答 當然還可以
聯繫我們的遊戲技術開發顧問
阿蘭·斯卡夫
本週還有兩場講座
《Metal技術最新內容》下半場
安排在週四上午
《Metal性能優化技術》講座則是
在週五
請務必要記得參加
非常感謝