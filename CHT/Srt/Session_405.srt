00:00:19.319 --> 00:00:24.224 
構建豐富的Playground
創建引人入勝的Swift在Xcode 7的內容

00:00:25.692 --> 00:00:26.527 
早上好！

00:00:31.765 --> 00:00:32.833 
感謝大家來到今天

00:00:32.900 --> 00:00:35.135 
關於Rich Playground編寫的
講座環節

00:00:35.202 --> 00:00:37.638 
我叫 山姆
是 Xcode 團隊的一名工程師

00:00:39.540 --> 00:00:41.241 
那麼 現在Playground
已經推出大約一年了

00:00:41.308 --> 00:00:44.011 
而我們已經被你們
用它所做的事情震撼了

00:00:44.411 --> 00:00:46.980 
我們已經看到了各種東西
有人寫出了他們的第一個“Hello, world”

00:00:47.047 --> 00:00:50.050 
更有人在Playgrounds中
寫出了多本書

00:00:50.117 --> 00:00:51.685 
反應是非常驚人的

00:00:53.053 --> 00:00:54.721 
那麼今天我將談幾個內容

00:00:55.756 --> 00:00:57.224 
我們將討論 自去年以來

00:00:57.291 --> 00:00:59.359 
我們在Playground上
增加的一些新特性

00:00:59.593 --> 00:01:02.829 
以及我們已經更新的
一些現有特性

00:01:03.530 --> 00:01:05.299 
我們也將涉及一些
小建議和竅門

00:01:05.364 --> 00:01:08.302 
它們能幫助您編寫出
真真正正的豐富的Playgrounds

00:01:08.368 --> 00:01:10.671 
您希望與世界上的其他人
分享的Playgrounds

00:01:11.872 --> 00:01:13.073 
而作爲一點獎勵

00:01:13.674 --> 00:01:17.644 
我們將解決WWDC的出席者中
一個常見的問題

00:01:18.111 --> 00:01:21.582 
那就是如何玩遍舊金山

00:01:22.950 --> 00:01:23.917 
那麼問題是什麼呢？

00:01:25.052 --> 00:01:27.054 
這個嘛 舊金山是一個大地方

00:01:28.355 --> 00:01:29.489 
有很多可看的東西

00:01:29.823 --> 00:01:33.660 
但實際上在講座環節之間
你不會有太多的時間去做這件事

00:01:33.727 --> 00:01:36.463 
您還有實驗室活動
還要寫您的下一個偉大的app

00:01:37.297 --> 00:01:39.833 
而你多半恰好在本週末
要趕航班

00:01:39.900 --> 00:01:41.668 
所以這裏有個終結點

00:01:42.769 --> 00:01:43.937 
而作爲工程師

00:01:44.438 --> 00:01:48.041 
我們希望在解決問題的時候
儘可能地高效

00:01:48.542 --> 00:01:50.611 
在這個問題的語境下 這意味着

00:01:50.878 --> 00:01:52.846 
我們不希望走不必要的路

00:01:53.881 --> 00:01:55.415 
那麼我們將如何解決這個問題？

00:01:55.883 --> 00:01:58.418 
這個麼
一旦我們知道我們想要參觀的地方

00:01:58.819 --> 00:02:00.821 
我們會從Moscone Center出發

00:02:00.888 --> 00:02:03.790 
以可能的最快的方式
遍歷所有我們想看的地方

00:02:04.057 --> 00:02:07.160 
而且要趕在我們
衝向舊金山國際機場之前看完

00:02:07.828 --> 00:02:10.364 
那麼爲了做到這個
我們將建立一個Playground

00:02:10.797 --> 00:02:13.600 
那麼 閒話少敘
讓我們進入正題

00:02:22.176 --> 00:02:23.010 
好了

00:02:23.510 --> 00:02:25.979 
那麼我這裏 已經有了一個
已爲我們設置好的Playground

00:02:26.046 --> 00:02:28.382 
而我們將快速地花一點時間
查看一下我們已有的東西

00:02:28.682 --> 00:02:30.918 
首先我們這裏有一個地點結構體

00:02:31.418 --> 00:02:34.421 
地點將是我們
希望在舊金山參觀的地方

00:02:34.955 --> 00:02:37.958 
它們將有一個字符串形式的名字

00:02:38.225 --> 00:02:41.428 
以及位置 
以 CLLocationCoordinate2D 表示

00:02:43.030 --> 00:02:45.199 
接下來我們有一個城市結構體

00:02:45.699 --> 00:02:49.369 
那麼在我們這個問題的語境下
它將代表舊金山

00:02:50.404 --> 00:02:52.573 
而且我們可以把這認爲是
一個地點的集合

00:02:52.639 --> 00:02:54.308 
它是我們用來放這些東西的類型

00:02:54.608 --> 00:02:57.411 
那麼在內部
我們有一系列的地點

00:02:57.911 --> 00:03:01.381 
然後我們在這裏有一個函數 通過它
我們可以向我們的城市添加地點

00:03:02.316 --> 00:03:04.418 
那麼讓我們往下進行
創建我們的城市

00:03:05.319 --> 00:03:06.787 
我們將把它叫做“舊金山”

00:03:08.021 --> 00:03:10.924 
如我剛纔所言
我們需要從某處開始我們的旅行

00:03:10.991 --> 00:03:14.027 
因此我們將繼續往下進行
爲Moscone Center創建一個地點

00:03:14.094 --> 00:03:15.195 
就是我們將出發的地方

00:03:15.896 --> 00:03:17.297 
那麼讓我們在那裏創建Moscone 

00:03:18.232 --> 00:03:21.068 
最後我們終於要向我們的城市
添加地點了

00:03:23.003 --> 00:03:25.405 
那麼 你們中間
熟悉Playgrounds的朋友會記得

00:03:25.472 --> 00:03:27.241 
對於每行被執行的代碼

00:03:27.407 --> 00:03:29.610 
我們在這裏的結果側邊欄
都會得到一個結果

00:03:30.277 --> 00:03:32.479 
因此我們會看到
我們的addPlace函數被調用

00:03:32.546 --> 00:03:35.349 
而且我們似乎是要
將Moscone Center傳遞給它

00:03:36.049 --> 00:03:39.219 
但是 如果您繼續往下看
下面我們創建了城市和地點

00:03:39.653 --> 00:03:40.854 
我們所要獲取的就是類型

00:03:41.855 --> 00:03:45.125 
因此這是非常方便的
但是我們也想更具有描述性

00:03:45.192 --> 00:03:47.494 
尤其是我們將要
創建更多的幾個地點時

00:03:47.728 --> 00:03:49.696 
如果我們一個地點接一個地點地
逐一參觀

00:03:49.930 --> 00:03:51.765 
我們將不能區分這些東西

00:03:52.599 --> 00:03:55.502 
那麼對於我們的地點來說
最具描述性的東西就是名稱

00:03:55.569 --> 00:03:59.273 
那麼我們如何讓名稱
返回到我們的結果側邊欄呢？

00:03:59.940 --> 00:04:01.708 
我們有一個新的協議
來解決那個問題

00:04:01.875 --> 00:04:04.178 
叫作CustomStringConvertible

00:04:04.545 --> 00:04:08.615 
那麼我能做的就是
在這裏爲我的地點擴展結構體

00:04:08.949 --> 00:04:11.618 
表明我將
執行CustomStringConvertible

00:04:12.119 --> 00:04:13.987 
而你能看到
現在我這裏有個錯誤

00:04:14.421 --> 00:04:16.490 
因爲它們實際上還不符合協議

00:04:17.291 --> 00:04:18.992 
因此 爲了實際符合協議

00:04:19.059 --> 00:04:21.661 
我們需要執行一個現成的屬性

00:04:21.728 --> 00:04:23.130 
叫作 description

00:04:24.264 --> 00:04:26.033 
而那將返回一個字符串

00:04:26.099 --> 00:04:28.468 
而對我們來說
我們希望返回我們的地名

00:04:28.735 --> 00:04:30.070 
因爲那是最具描述性的東西

00:04:30.737 --> 00:04:33.640 
您現在可以看到如果你回顧下面
我們創建地點的地方

00:04:34.308 --> 00:04:37.044 
這裏我們有Moscone Center
而不僅是類型名

00:04:37.811 --> 00:04:39.446 
那麼這對我們的城市意味着什麼？

00:04:40.080 --> 00:04:42.683 
多半最具描述性的東西

00:04:42.883 --> 00:04:45.886 
是返回當前城市內的地點清單

00:04:46.119 --> 00:04:47.754 
以便我們能夠看到旅行的進展

00:04:48.589 --> 00:04:51.191 
因此我們將往下進行
爲城市進行這個操作

00:04:51.925 --> 00:04:54.261 
執行那裏的
CustomStringConvertible

00:04:55.762 --> 00:04:58.866 
並繼續往下進行返回描述

00:05:00.100 --> 00:05:02.402 
對於它 我們將返回
places.description

00:05:02.469 --> 00:05:04.805 
因此它將給出
我們一系列地點的描述

00:05:05.873 --> 00:05:08.442 
那麼現在您可以看到
當我們最初創建San Francisco時

00:05:08.575 --> 00:05:10.277 
實際上裏面沒有任何東西

00:05:10.644 --> 00:05:12.212 
因此我們這裏獲得了一個空陣列

00:05:12.880 --> 00:05:16.416 
但是然後當我們對其添加地點後
我們得到了Moscone Center

00:05:16.550 --> 00:05:18.185 
那麼當我們創建越來越多的地點時

00:05:18.252 --> 00:05:20.787 
我們將在結果側邊欄內
看到越來越多的東西

00:05:22.656 --> 00:05:24.391 
因此 關於Playgrounds
很酷的事情之一就是

00:05:24.458 --> 00:05:28.495 
你總能更進一步地查看
獲得關於某個結果的更多信息

00:05:28.762 --> 00:05:31.698 
只須點擊結果旁邊的
這個Quick Look按鈕即可

00:05:32.065 --> 00:05:34.368 
那麼 我就點擊查看
Moscone Center

00:05:34.768 --> 00:05:37.437 
我們看到了關於我們的地點的
更多一些信息

00:05:38.138 --> 00:05:40.941 
我們有地名和經緯度

00:05:41.708 --> 00:05:43.310 
這對於調試是非常方便的

00:05:43.677 --> 00:05:48.515 
但是 經緯度對我沒有實際幫助
我對製圖學不是那麼在行

00:05:48.582 --> 00:05:50.817 
我不知道如何在世界上定位這些東西

00:05:51.318 --> 00:05:53.520 
因此我想看到更直觀一點的東西

00:05:53.587 --> 00:05:56.924 
某種讓人大聲喊出的東西
“呀 那就是要找的地方”

00:05:57.491 --> 00:05:59.726 
而對我來說
沒有什麼能比一個藍色大圓點

00:05:59.793 --> 00:06:02.029 
下面加個名字
更能讓我喊出地名來了

00:06:02.095 --> 00:06:03.697 
我也會在地圖上加上這個東西

00:06:04.398 --> 00:06:05.599 
那麼我們要怎麼實現呢？

00:06:05.966 --> 00:06:09.102 
通常當我們希望
做有些定製化或直觀的事情時

00:06:09.169 --> 00:06:10.204 
我們會創建一個視圖

00:06:10.604 --> 00:06:13.574 
那麼我們將繼續往下進行
在這裏創建一個UI View子類

00:06:14.541 --> 00:06:16.577 
而我們已經設置了它的一些內容

00:06:17.711 --> 00:06:20.147 
讓我們快速地查看一下
我們在這裏都有些什麼

00:06:21.014 --> 00:06:23.417 
我們這裏有個類叫做 View

00:06:24.151 --> 00:06:25.853 
它將是一個UI View子類

00:06:26.420 --> 00:06:30.057 
我們在內部有另一個視圖
它將成爲我們的藍色大圓點視圖

00:06:30.858 --> 00:06:33.994 
然後我們有一個名稱標籤
以顯示我們的地名

00:06:34.661 --> 00:06:38.565 
然後當我們創建這個東西時
我們將讓它決定它的大小

00:06:38.999 --> 00:06:40.400 
最後 在layout子視圖中

00:06:40.467 --> 00:06:43.070 
我們將放置這些東西
以便當藍色圓點位於頂部

00:06:43.136 --> 00:06:44.004 
而文本位於下部

00:06:45.506 --> 00:06:48.075 
那麼我們先創建其中一個
看一下它是什麼樣子

00:06:49.910 --> 00:06:51.778 
而且我們將讓Quick Look彈出

00:06:53.614 --> 00:06:57.384 
妙極了 那開始更像是一個
我能在地圖上看到的地點了

00:06:58.652 --> 00:07:00.921 
但是我們實際上
要怎樣把這些東西合在一起

00:07:01.355 --> 00:07:03.123 
以便當我們快速查看地點時

00:07:03.190 --> 00:07:04.892 
我們實際上會看到視圖返回？

00:07:05.926 --> 00:07:07.861 
爲了實現那個目的
我們有另一個新的協議

00:07:07.961 --> 00:07:11.265 
該協議叫做 
CustomPlaygroundQuickLookable

00:07:11.832 --> 00:07:14.067 
CustomPlaygroundQuickLookable
所做的就是

00:07:14.134 --> 00:07:16.236 
如果您執行了要求的方法

00:07:16.737 --> 00:07:19.339 
它將讓您 返回另一個type

00:07:19.406 --> 00:07:22.643 
作爲您的type或其他type的
Quick Look 顯示的內容

00:07:22.709 --> 00:07:25.946 
因此那可能是一個貝塞爾曲線
或某種顏色

00:07:26.313 --> 00:07:28.182 
但是對於我們的情況
我們希望返回視圖

00:07:29.183 --> 00:07:32.986 
因此我將要繼續往下進行的就是
爲我們的地點創建一個擴展

00:07:34.454 --> 00:07:35.455 
並且表明

00:07:35.889 --> 00:07:39.226 
它將執行
CustomPlaygroundQuickLookable

00:07:39.927 --> 00:07:43.030 
那麼我們這裏又有一個錯誤
因爲那我們實際上還未遵從那個協議

00:07:43.297 --> 00:07:44.865 
因此我們將通過執行

00:07:44.932 --> 00:07:47.801 
CustomPlaygroundQuickLook
添加對它的遵從

00:07:48.902 --> 00:07:50.971 
那麼我們將向那個這個方法內返回

00:07:51.205 --> 00:07:54.575 
一個反映該視圖的
PlaygroundQuickLook

00:07:55.142 --> 00:07:58.912 
現在 因爲我們已經設置了一個擴展
我們可以讀取我們的地名

00:07:58.979 --> 00:08:01.648 
因此 我們可以往下進行
並將地名 賦給那裏的初始值

00:08:02.416 --> 00:08:06.153 
那麼現在 當我們快速查看地點時
我們就該看到了

00:08:06.653 --> 00:08:08.555 
妙極了
我們有了Moscone Center

00:08:08.622 --> 00:08:11.325 
一切都開始看上起更像個地名了

00:08:12.526 --> 00:08:14.728 
但是 我們這裏還有點代碼它似乎

00:08:14.795 --> 00:08:17.397 
與我們的Playground
其它部分格格不入

00:08:18.131 --> 00:08:21.201 
我們想把這些內容移開
因爲實際上沒有其他人關注它

00:08:21.268 --> 00:08:24.204 
它無助於展示我們所做的工作

00:08:24.805 --> 00:08:27.274 
那麼對這些內容
我們將繼續往下進行...

00:08:27.341 --> 00:08:29.877 
首先我們將刪除這裏的地點視圖
因爲我們並不需要它

00:08:30.644 --> 00:08:32.679 
並且我們將截取這裏的這個

00:08:33.046 --> 00:08:33.914 
我們所聲明的視圖

00:08:34.881 --> 00:08:39.385 
並將它直接放在
我們的地點擴展裏面

00:08:41.087 --> 00:08:42.289 
清除這裏的一些空白

00:08:43.390 --> 00:08:46.260 
那麼當Playground重新執行時
您應該看到...

00:08:46.426 --> 00:08:47.961 
妙極了
真是我們以前看到的樣子

00:08:48.095 --> 00:08:51.465 
但是現在 那個視圖代碼
正好全部嵌入在我們的擴展內

00:08:51.532 --> 00:08:53.333 
因此它是精緻而乾淨的

00:08:54.801 --> 00:08:56.303 
這對我們的城市意味着什麼呢？

00:08:56.737 --> 00:09:00.874 
如果我們遵循這樣一種模式
希望看看當前我們城市裏面有些什麼

00:09:01.208 --> 00:09:03.610 
那麼我們會希望看看
我們的城市裏面有些什麼地方

00:09:04.344 --> 00:09:05.846 
那麼這將是默認發生的

00:09:05.913 --> 00:09:07.781 
所以 如果我們點擊
Moscone Center的快速查看

00:09:07.848 --> 00:09:09.616 
我們會發現那裏有了個“Place”

00:09:09.983 --> 00:09:12.920 
而且我們可以看到
Moscone Center那裏的藍點

00:09:12.986 --> 00:09:15.856 
但是... 隨着我們添加更多地點

00:09:15.923 --> 00:09:18.492 
它不會對我們有太大幫助
它只是會被列入清單而已

00:09:18.859 --> 00:09:23.230 
我們希望對這些東西的相對位置
有一個直觀的印象

00:09:23.297 --> 00:09:26.366 
因此我們開始着手解決
如果我們在Moscone Center

00:09:26.433 --> 00:09:29.236 
我們多半不會
直接去Golden Gate Bridge

00:09:29.303 --> 00:09:31.738 
我們首先多半會去
類似Coit Tower的地方

00:09:32.873 --> 00:09:36.109 
爲此我們創建了另一個擴展
這次是 City 的擴展

00:09:36.176 --> 00:09:39.813 
它將仍然是
CustomPlaygroundQuickLookable

00:09:40.380 --> 00:09:42.583 
我們將在這裏創建
我已經有了一些現成的代碼

00:09:43.383 --> 00:09:44.852 
我們將快速地查看一下它

00:09:45.552 --> 00:09:46.887 
那麼它是一個City的擴展

00:09:46.954 --> 00:09:49.189 
我以同樣的方式執行了
CustomPlaygroundQuickLookable

00:09:49.523 --> 00:09:53.493 
我們已經通過執行這裏的CustomPlayground
QuickLook方法而遵從了協議

00:09:53.894 --> 00:09:55.729 
然後在內部我將創建一個視圖

00:09:56.063 --> 00:09:58.732 
根據它們的經緯度
算出這些東西

00:09:58.799 --> 00:10:00.834 
應該在視圖中的位置

00:10:02.102 --> 00:10:04.972 
那麼現在 當我們快速查看City時
我們應該看到...

00:10:06.139 --> 00:10:09.676 
妙極了！Moscone Center在那裏的
一個空地圖的東邊

00:10:10.410 --> 00:10:11.745 
但是我們將創建一張圖片

00:10:11.812 --> 00:10:13.780 
表明我們我們將在這裏
實際看到的東西

00:10:15.015 --> 00:10:17.150 
那麼既然我們已經有了這個

00:10:17.651 --> 00:10:18.852 
我們將添加更多幾個地點

00:10:19.119 --> 00:10:20.020 
但是在那之前

00:10:20.287 --> 00:10:24.324 
我想讓這裏的地圖視圖
一直保持打開狀態 或至少可見

00:10:24.691 --> 00:10:27.361 
當我檢查代碼的時候
我將打開並關閉它多次

00:10:28.095 --> 00:10:31.832 
爲此我們有這個很酷的小東西
叫做“內嵌結果”

00:10:32.132 --> 00:10:35.002 
那麼 緊靠這個快速查看按鈕
如果我點擊Show Result

00:10:35.435 --> 00:10:40.307 
那將會把“快速查看”
直接放在生成它的這行代碼下面

00:10:41.308 --> 00:10:44.278 
那麼我可以繼續在Playground的工作
並查看它的持續運行

00:10:44.344 --> 00:10:46.213 
以及瞭解實際發生的事情

00:10:47.047 --> 00:10:50.050 
而很酷的事情是目前它還很小

00:10:50.350 --> 00:10:53.453 
因此我們可以選定並向外拖拽它
就像我們拖拽任何其他窗口一樣

00:10:53.587 --> 00:10:55.055 
隨意調整到希望的大小

00:10:56.156 --> 00:10:58.792 
我們可以開始處理
我們在Playground上的其他內容

00:10:58.859 --> 00:10:59.893 
添加地點

00:11:00.127 --> 00:11:01.795 
我們會看到它們
出現在我們的地圖上

00:11:03.130 --> 00:11:04.331 
那麼我們希望看到什麼呢？

00:11:05.199 --> 00:11:08.402 
我聽說過Golden Gate Bridge
是很酷而且很出名的

00:11:08.702 --> 00:11:10.170 
因此我將往下進行並嘗試一下

00:11:10.604 --> 00:11:12.606 
我們將把它添加到我們想看的地點

00:11:13.073 --> 00:11:14.274 
而當Playground重新執行的時候

00:11:14.341 --> 00:11:17.144 
我們將看到它基於Golden Gate Bridge
的實際位置

00:11:17.611 --> 00:11:20.013 
我們將把它放在西北部

00:11:20.180 --> 00:11:23.650 
如果我對
舊金山地理的瞭解是正確的

00:11:23.917 --> 00:11:24.918 
我想那就沒錯

00:11:26.153 --> 00:11:29.156 
我們還想看些什麼？
Sutro Tower 怎麼樣？

00:11:29.223 --> 00:11:31.658 
它有點像是是來自於
電影《世界大戰》裏面的東西

00:11:31.825 --> 00:11:32.860 
我將把它加入

00:11:33.694 --> 00:11:35.929 
並放在地點中

00:11:36.597 --> 00:11:38.131 
我將加入 Sutro Tower

00:11:38.799 --> 00:11:40.200 
Playground 重新執行

00:11:40.534 --> 00:11:43.237 
然後我們就會看到
下方也即南邊的Sutro Tower

00:11:44.104 --> 00:11:46.940 
那麼我們已經開始真正瞭解
我們的地點是如何創建的

00:11:47.007 --> 00:11:51.578 
而隨着我們添加越來越多這些地點
根據它們所在的位置 我們將看出

00:11:51.645 --> 00:11:53.113 
如何遊覽這些地點

00:11:53.547 --> 00:11:55.883 
現在我將繼續往下進行
並切換到前面的幻燈片

00:11:57.784 --> 00:11:58.986 
那麼您可能已經注意到了

00:11:59.686 --> 00:12:02.089 
我們的Playground到末尾時
變得有點冗長

00:12:02.155 --> 00:12:04.858 
我們有些視圖代碼和一些擴展

00:12:05.392 --> 00:12:09.196 
而且有很多並沒有幫助我們
描述問題的內容

00:12:09.930 --> 00:12:11.665 
它還不是那麼完美

00:12:12.165 --> 00:12:13.700 
那麼我們應該做的就是

00:12:13.767 --> 00:12:16.670 
直接把大量代碼
從Playground主體中取出

00:12:16.904 --> 00:12:18.505 
但仍然把它留在附近以便使用

00:12:19.439 --> 00:12:22.776 
那麼爲了向您展示我們如何操作的
我想邀請我的同事 康納 上臺

00:12:33.954 --> 00:12:34.788 
謝謝你 山姆！

00:12:34.955 --> 00:12:35.789 
大家好！

00:12:35.889 --> 00:12:38.492 
我叫 康納
是 Xcode 團隊的一名工程師

00:12:39.026 --> 00:12:42.196 
今天我將和大家談談
如何讓您的Playgrounds更加強大

00:12:42.629 --> 00:12:45.032 
並更專注於手頭的問題

00:12:45.732 --> 00:12:47.835 
爲了達到這個目的
讓我們直接進入一個演示程序

00:12:47.901 --> 00:12:50.671 
在裏面我將查看
山姆 剛纔開始的Playground

00:12:51.004 --> 00:12:53.707 
併爲找到穿越舊金山的最佳路徑
添加一些支持

00:12:54.074 --> 00:12:55.776 
同時也讓目標更加明確

00:12:56.276 --> 00:12:57.477 
現在讓我們來看看演示吧

00:13:08.822 --> 00:13:10.591 
好了 那麼我們已經在Xcode中了

00:13:11.191 --> 00:13:14.661 
如果您注意到的話 我們的Playground
與 山姆 剛纔向您展示的基本相同

00:13:14.728 --> 00:13:17.331 
我們開始先爲舊金山創建一個city

00:13:18.131 --> 00:13:21.668 
我們創建幾個地點
然後將它們添加到city

00:13:22.436 --> 00:13:26.440 
用這個內嵌結果結束
以表明您到目前創建了哪些內容

00:13:27.407 --> 00:13:30.077 
不過如果您注意到的話
有一個重大區別

00:13:30.244 --> 00:13:33.013 
那就是整個Playground
現在正好佔據一個屏幕

00:13:34.081 --> 00:13:36.617 
然而 在地點構造體內
我仍在使用我的自定義 city

00:13:36.917 --> 00:13:38.819 
而儘管Swift編譯器很棒

00:13:39.052 --> 00:13:41.622 
它也不能憑空創建出構造體

00:13:41.889 --> 00:13:43.524 
因此 我們將轉而採用我們在

00:13:43.590 --> 00:13:47.094 
Xcode 6.3中添加的一個特性
叫做“輔助資源”

00:13:48.061 --> 00:13:50.797 
“輔助資源”
是額外的Swift源文件

00:13:50.931 --> 00:13:52.666 
它們被嵌入在您的Playground內部

00:13:53.100 --> 00:13:55.369 
而且被預先編譯到
一個單獨的Swift模塊中

00:13:56.703 --> 00:13:58.205 
因爲它們不需要具備互動性

00:13:58.272 --> 00:14:00.807 
它們可以比Playground本身
有更好的表現

00:14:01.608 --> 00:14:03.710 
此外 由於它們位於一個單獨模塊內

00:14:03.777 --> 00:14:05.212 
您可以利用讀取控制

00:14:05.546 --> 00:14:10.951 
來確保只顯示那些您希望
Playground可見的輔助資源

00:14:11.018 --> 00:14:14.555 
因此 您可以在輔助資源中
隱藏大量的內部執行細節

00:14:15.722 --> 00:14:17.824 
爲了找到它們 
我們將繼續進行並打開瀏覽器

00:14:19.059 --> 00:14:21.495 
在您的PC中
我們在頂部有Playground

00:14:21.862 --> 00:14:24.231 
然後 在Playground內
我們有sources文件夾

00:14:24.431 --> 00:14:27.367 
在sources文件夾內
我們有一批Swift 源文件

00:14:28.535 --> 00:14:30.938 
我可以打開一個
這裏我們有city.swift

00:14:31.004 --> 00:14:35.509 
而它大體上是與 山姆
剛纔處理的構造體是一樣的

00:14:35.576 --> 00:14:36.977 
只是有些小的修改

00:14:37.945 --> 00:14:40.180 
首先 我將把它標爲 public

00:14:40.948 --> 00:14:45.085 
因爲我們想讓city能夠
被主Playground自身使用

00:14:45.919 --> 00:14:48.622 
我也添加了對城市的
旅行時間的支持

00:14:48.689 --> 00:14:52.726 
以便於我們能夠實際追蹤
遊覽城市的每個地點所需的時間

00:14:54.461 --> 00:14:58.398 
如果我們看一下place.swift
我們發現這裏有同樣的基本的東西

00:14:58.565 --> 00:15:00.133 
因此 與我們以前的同樣的構造體

00:15:00.367 --> 00:15:01.902 
只是被修改而成爲public

00:15:02.035 --> 00:15:05.772 
並有其他一些修改
以便與更新後的city構造體協同工作

00:15:06.974 --> 00:15:09.810 
有幾個其他的輔助資源文件
我不會去探討它們

00:15:09.877 --> 00:15:12.212 
一個與屬性列表的序列化有關

00:15:12.546 --> 00:15:16.350 
另一個是我從我做過的其他項目
收集來的各種實用工具

00:15:16.683 --> 00:15:19.219 
它將在我執行我們的算法的時候
幫我的忙

00:15:20.354 --> 00:15:21.655 
現在讓我們回到主Playground

00:15:23.457 --> 00:15:26.293 
那麼這裏我們看到
我們有了一個城市的起點

00:15:26.360 --> 00:15:27.928 
我們在開始建立某些東西

00:15:28.328 --> 00:15:30.697 
但是我想參觀更多地點
而不只是這兩個

00:15:30.964 --> 00:15:35.302 
而我們也希望有
在不同地點之間的旅行時間

00:15:35.936 --> 00:15:38.505 
我可以用代碼形式全部添加它們
但是那還不夠好

00:15:38.572 --> 00:15:40.707 
因爲我們在Playground上方
將會有一堆代碼

00:15:40.774 --> 00:15:42.943 
它們對我們將要展示的東西
並無益處

00:15:44.077 --> 00:15:46.914 
因此 我將利用Playgrounds中的
另一個特性

00:15:46.980 --> 00:15:48.649 
叫做“嵌入式資源”

00:15:49.583 --> 00:15:53.320 
“嵌入式資源”是被複制到
 Playground內的文件

00:15:53.720 --> 00:15:56.623 
Playground本身在運行的時候
可以使用這些文件

00:15:56.690 --> 00:15:58.959 
作爲主 bundle 的資源

00:15:59.793 --> 00:16:02.763 
而且它們也駐留在瀏覽器中
在這個小Resources文件夾內

00:16:03.297 --> 00:16:05.499 
我將要做的就是把一個plist

00:16:05.566 --> 00:16:09.336 
從定義舊金山這個城市的
Finder中拖進來

00:16:10.204 --> 00:16:13.173 
因此我將繼續並執行這個操作
我有了SanFrancisco.plist

00:16:13.841 --> 00:16:14.942 
我可以把它拖到這裏來

00:16:15.509 --> 00:16:17.711 
它就會在Playground文件內被複制

00:16:17.845 --> 00:16:20.714 
這意味着當你決定
與其他某人共享你的Playground時

00:16:20.781 --> 00:16:23.183 
我們無須擔心
任何外部文件引用的中斷

00:16:23.350 --> 00:16:25.786 
它全部都在那裏面
因此你可將其作爲獨立單元發送

00:16:26.687 --> 00:16:28.689 
讓我們看一下這個plist的樣子

00:16:29.823 --> 00:16:32.726 
首先 我們有一系列地點

00:16:33.560 --> 00:16:36.763 
每個地點將一組經緯度
映射到一個地名

00:16:38.031 --> 00:16:39.933 
然後讓我們在這個文件裏
向下滾動一點

00:16:40.334 --> 00:16:43.103 
在這裏我們會看到
有一系列的旅行時間

00:16:43.704 --> 00:16:46.340 
而旅行時間則將兩個地點映射

00:16:46.406 --> 00:16:48.842 
到兩個地點之間
旅行所需的時間和分鐘數

00:16:49.910 --> 00:16:54.515 
這些時間是使用iOS 9內的
trans directions創建的

00:16:55.449 --> 00:16:57.718 
不過即使我將這些東西
稱作目的地和出發地

00:16:58.051 --> 00:17:00.320 
我將把它進行一些簡化

00:17:00.387 --> 00:17:05.626 
並且假定 從A點到B點所需的時間
 與從B點到A點所需的時間相同

00:17:05.992 --> 00:17:08.829 
因此這實際上是雙向旅行時間

00:17:10.263 --> 00:17:11.964 
現在切換回主Playground 

00:17:12.598 --> 00:17:14.535 
這裏並不需要全部代碼

00:17:15.002 --> 00:17:17.069 
我將選取其中的大部分將其刪除

00:17:17.804 --> 00:17:21.575 
並替換爲一個調用
加載我的城市San Francisco

00:17:22.843 --> 00:17:25.345 
從調用這個城市初始值開始

00:17:25.579 --> 00:17:27.714 
調用contentsOfPropertyListAtURL

00:17:28.080 --> 00:17:31.185 
它將做的不過就是查看主bundle

00:17:31.518 --> 00:17:35.656 
以便爲特定的資源獲取URL
這個資源即San Francisco plist

00:17:36.390 --> 00:17:40.460 
我們知道
我們剛把它加入了Playground

00:17:40.928 --> 00:17:42.796 
因此我將把它強制拆包爲可選型

00:17:42.863 --> 00:17:45.399 
以便把它傳遞給我的初始值

00:17:46.867 --> 00:17:50.838 
此外 這個初始值也經過更新
以便利用Swift 2的錯誤處理特性

00:17:51.405 --> 00:17:53.140 
因此我將向編譯器表明

00:17:53.207 --> 00:17:55.442 
我知道我可以通過Try這個關鍵字
並在末尾加上一個感嘆號

00:17:55.509 --> 00:17:56.777 
拋出一個錯誤

00:17:56.844 --> 00:17:59.112 
因爲我不想 增加大量的無助於

00:17:59.479 --> 00:18:02.182 
我將在Playground中所展示內容的
錯誤處理代碼

00:18:02.349 --> 00:18:04.251 
此外 我知道這個plist是正確的

00:18:04.451 --> 00:18:06.753 
因此我這樣加載它是沒有問題的

00:18:08.288 --> 00:18:09.723 
我們可以通過內嵌形式顯示它

00:18:10.457 --> 00:18:11.692 
讓我們把它放大一些

00:18:13.427 --> 00:18:15.295 
那麼這裏就是我們的城市

00:18:15.729 --> 00:18:19.266 
我們有Moscone Center
Coit Tower 漁夫碼頭

00:18:19.333 --> 00:18:23.136 
Painted Ladies, SutroTower
金門公園 金門大橋

00:18:23.570 --> 00:18:25.873 
以及雖然不在我們的地圖上
但仍然在那裏的

00:18:26.073 --> 00:18:27.774 
舊金山國際機場

00:18:27.841 --> 00:18:30.277 
而且你可以看到連通機場的
所有路線

00:18:31.445 --> 00:18:33.547 
很棒 現在我們有了一個
我們可以使用的城市

00:18:33.814 --> 00:18:37.818 
但是現在在我看來
我想把這個Quick Look弄得更好一點

00:18:38.118 --> 00:18:40.821 
通過爲我即將參觀的所有地點
增加一些圖標

00:18:41.922 --> 00:18:43.690 
碰巧的是在我的桌面電腦內

00:18:44.091 --> 00:18:45.292 
我有這個圖片文件夾

00:18:45.893 --> 00:18:49.663 
而如果我把它打開你會看到
這裏我有一組用於每個地點的圖標

00:18:50.864 --> 00:18:52.399 
那麼我將選取那些圖標

00:18:52.666 --> 00:18:55.402 
並也也把它們
拖拽到Resources文件夾內

00:18:55.969 --> 00:18:59.573 
正像plist一樣 它們將被複制到那裏
並提供給我的Playground使用

00:19:00.340 --> 00:19:03.310 
我還確實需要更新我的Quick Look
以便利用這些圖片

00:19:03.744 --> 00:19:07.581 
因此我將繼續並在輔助編輯器中
更新 place.swift 文件

00:19:07.648 --> 00:19:08.682 
通過點擊它即可

00:19:10.450 --> 00:19:12.819 
然後我會發現這個位置視圖

00:19:13.153 --> 00:19:17.858 
我們要利用這些圖片
更新作爲初始值的藍色圓點

00:19:18.692 --> 00:19:20.227 
那麼我可以選取所有那些代碼

00:19:21.762 --> 00:19:24.131 
並更新我們的地點視圖

00:19:24.998 --> 00:19:27.234 
我們將從獲取與之關聯的圖片開始

00:19:27.901 --> 00:19:30.838 
創建一個圖片視圖
然後設置幾個屬性 然後將其返回

00:19:31.672 --> 00:19:33.006 
現在當我保存這個文件時

00:19:33.674 --> 00:19:35.976 
Xcode 將注意到
輔助資源已發生變化

00:19:36.043 --> 00:19:38.512 
並將自動重新編譯
它們的Swift 模塊

00:19:39.146 --> 00:19:42.549 
一旦編譯結束
我們將重新運行Playground 

00:19:42.816 --> 00:19:45.219 
Quick Look將會自動更新

00:19:45.285 --> 00:19:48.055 
我所要做的不過是
進行編輯並存儲到磁盤

00:19:49.323 --> 00:19:51.325 
棒極了
Quick Look 看起來好多了

00:19:51.391 --> 00:19:52.759 
讓我們切換回標準編輯器

00:19:52.826 --> 00:19:54.695 
並開始研究我們的算法

00:19:55.195 --> 00:19:56.296 
我仍將隱藏瀏覽器

00:19:56.363 --> 00:19:58.365 
因爲我不需要它
而且我想要額外的空間

00:20:01.502 --> 00:20:04.771 
因此我們將執行暴力算法
來找到我們通往舊金山之路

00:20:05.138 --> 00:20:06.473 
而爲了開始這一過程

00:20:06.740 --> 00:20:08.775 
我們需要獲取通往舊金山的所有路線

00:20:09.476 --> 00:20:11.912 
因此我們將從這個開始
而我們所做的就是

00:20:11.979 --> 00:20:14.948 
通過我們在city結構體上的city方法
調用所有路線

00:20:15.015 --> 00:20:17.117 
告訴它我們希望
從Moscone Center開始

00:20:17.451 --> 00:20:18.886 
並且我們希望在機場結束

00:20:19.119 --> 00:20:22.923 
而如果你看一下右邊的側邊欄
我們發現我們有720條路線

00:20:24.525 --> 00:20:26.293 
然後我將執行算法

00:20:28.328 --> 00:20:33.066 
這裏我們將從幾個變量開始
它們將存放我們的結果

00:20:33.267 --> 00:20:35.702 
一個用於最佳旅行時間
一個用於最佳路線

00:20:36.904 --> 00:20:40.207 
然後我們將迭代所有穿城路線

00:20:40.807 --> 00:20:42.643 
爲每個路線獲取旅行時間

00:20:44.077 --> 00:20:46.180 
然後我們將把它
與我們的最佳旅行時間相比較

00:20:46.246 --> 00:20:48.382 
如果必要的話
更新我們的結果變量

00:20:49.583 --> 00:20:53.887 
最後 我們會在這裏
看到穿過城市的最佳旅行時間

00:20:53.954 --> 00:20:55.155 
那麼我們將把它內嵌顯示

00:20:55.455 --> 00:20:59.026 
並且我們將看到如果我們從不停留
並設法在所有交通工具之間轉車

00:20:59.092 --> 00:21:02.763 
在這些地點之間需要 235 分鐘

00:21:04.398 --> 00:21:07.467 
我們也可以爲線路添加內嵌顯示
因此我們可以看到

00:21:07.534 --> 00:21:10.637 
我們將從Moscone Center出發
正如我們所期待那樣

00:21:10.838 --> 00:21:13.440 
然後我們將直接前往
Painted Ladies和Sutro Tower

00:21:13.707 --> 00:21:15.776 
然後到金門公園和金門大橋

00:21:16.376 --> 00:21:18.812 
然後我們將前往漁夫碼頭
以及 Coit Tower

00:21:18.946 --> 00:21:23.183 
最後抵達舊金山國際機場
搭乘我們的班機

00:21:24.551 --> 00:21:26.720 
那麼很棒
我們已經有了我需要的

00:21:27.187 --> 00:21:29.189 
遊覽景點的全部信息

00:21:29.256 --> 00:21:31.992 
那麼現在讓我們切換回幻燈片
來解決那個問題

00:21:50.110 --> 00:21:52.779 
剛纔我爲大家展示了
如何使用Playgrounds中的

00:21:52.846 --> 00:21:55.115 
輔助資源和嵌入式資源特性

00:21:55.382 --> 00:21:58.652 
以便在讓它高度專注於
您希望實現的任務的同時

00:21:58.719 --> 00:22:00.721 
讓您的Playground更加強大

00:22:02.055 --> 00:22:03.757 
我這裏有些非常有趣的東西

00:22:03.824 --> 00:22:06.894 
我想在會議結束回家時
與人分享

00:22:07.294 --> 00:22:10.631 
但是它還不夠精煉
還不足以示人

00:22:11.665 --> 00:22:13.867 
然而 我們已經
在Xcode 7中添加了很多不錯的特性

00:22:13.934 --> 00:22:16.670 
這讓您能夠比以往更好地
分享您的 Playground

00:22:17.137 --> 00:22:19.640 
那麼現在
我想邀請我的同事 馬特 上臺

00:22:20.007 --> 00:22:22.543 
向您展示這些特性
謝謝大家！

00:22:29.082 --> 00:22:30.717 
非常感謝 康納！
嗨 大家好！

00:22:30.784 --> 00:22:33.820 
我叫 馬特
 也是Xcode團隊的一名工程師

00:22:34.321 --> 00:22:36.490 
我覺得 康納 和 山姆
已經做得很棒了

00:22:36.557 --> 00:22:38.859 
他們搭建了一個
令人驚歎的 Playground

00:22:38.926 --> 00:22:42.529 
向人們展示
如何以最佳方式遊覽舊金山

00:22:42.996 --> 00:22:45.199 
但它還未完成
不能與世界分享

00:22:45.265 --> 00:22:47.401 
因此我將爲您提供幾個建議和竅門

00:22:47.568 --> 00:22:49.970 
讓您的 Playground
更加豐富 也更吸引人

00:22:50.037 --> 00:22:52.706 
以便讓您把它放在互聯網上
人們也會很喜歡它

00:23:03.050 --> 00:23:04.618 
那麼您在這裏
可以看到我們有了Playground

00:23:04.685 --> 00:23:06.453 
康納 剛剛完成了在它上面的工作

00:23:06.954 --> 00:23:09.790 
而且 康納 也寫了
一個非常簡單的算法

00:23:10.190 --> 00:23:13.560 
它遍歷舊金山這座城市中的
所有可能路線

00:23:13.894 --> 00:23:15.229 
並將其互相比較

00:23:15.762 --> 00:23:18.332 
而這對於你們大家是很不錯的
因爲我們這裏已經由 康納

00:23:18.398 --> 00:23:20.267 
在執行算法的時候
講解了路線的每一步

00:23:20.901 --> 00:23:22.636 
然而 當我們將它
與全世界分享的時候

00:23:22.703 --> 00:23:25.339 
遺憾的是並不是每個人
都在這裏參加 WWDC

00:23:25.606 --> 00:23:28.742 
因此我們要添加一點信息
一點上下文

00:23:28.909 --> 00:23:30.978 
以便今後查看此Playground的人

00:23:31.044 --> 00:23:33.146 
會明白我們到底是怎樣
達到這一步的

00:23:34.548 --> 00:23:37.451 
因此我們在Xcode 6.3中
推出了一個新特性

00:23:37.684 --> 00:23:39.586 
叫做Playground標記註釋

00:23:39.753 --> 00:23:41.722 
而那讓您對您的Playground

00:23:41.788 --> 00:23:44.791 
添加富文本格式的漂亮的顯示

00:23:45.092 --> 00:23:46.493 
以便人們能夠更好地理解

00:23:46.560 --> 00:23:49.563 
您究竟是如何得到
你想要的 Playground 的

00:23:50.430 --> 00:23:54.835 
那麼再給我一點空間
我將先把QuickLook放在一邊

00:23:56.003 --> 00:23:59.339 
而且我將把Playground頂部的註釋

00:23:59.940 --> 00:24:03.377 
用一些關於遊覽舊金山的信息替換

00:24:03.777 --> 00:24:05.612 
現在您可以看到
這看上去非常像個註釋

00:24:05.679 --> 00:24:07.681 
您可以把它放在
您的源文件的其他任何地方

00:24:07.748 --> 00:24:13.320 
但是 富文本標記註釋
和其他註釋的最大區別是冒號

00:24:13.787 --> 00:24:16.456 
我們在註釋中的
第一個星號後面有個冒號

00:24:16.690 --> 00:24:19.560 
而且我們也可以對單行註釋這樣做

00:24:19.760 --> 00:24:21.328 
也在這裏添加一個冒號

00:24:22.029 --> 00:24:23.463 
而當我來到上邊的編輯器菜單

00:24:23.864 --> 00:24:25.699 
並選擇Show Rendered Markup

00:24:26.233 --> 00:24:27.301 
您會發現它重新渲染

00:24:27.367 --> 00:24:30.437 
而且現在我們有了這些
好看而豐富的文本塊

00:24:30.637 --> 00:24:33.707 
我們可以用它們來解釋
我們的Playground中正在發生什麼

00:24:34.775 --> 00:24:36.743 
我們實際上也可以
重新安排它們的格式

00:24:37.444 --> 00:24:39.313 
因此 如果我切換回Raw Markup

00:24:41.014 --> 00:24:42.216 
我可以使用一個井字符號

00:24:42.783 --> 00:24:46.053 
表明我們希望有一個標題
顯示“Exploring San Francisco”

00:24:46.153 --> 00:24:49.456 
而且我可以使用星號
比如在“most efficient”前後

00:24:49.957 --> 00:24:52.059 
來表明我們希望
這些內容是斜體的

00:24:52.826 --> 00:24:54.094 
因此如果我再次執行它

00:24:55.095 --> 00:24:57.531 
您會看到我們有了個不錯的
大號字體的粗體標題

00:24:57.598 --> 00:24:59.967 
精確地解釋我們將要討論的內容

00:25:00.234 --> 00:25:01.435 
所以那是一個不錯的開端

00:25:01.802 --> 00:25:03.570 
我也想給它加上更多一點註釋

00:25:04.238 --> 00:25:06.940 
介紹這個Playground裏面
正在發生的事情

00:25:07.741 --> 00:25:09.076 
例如 所有的路線

00:25:09.142 --> 00:25:12.713 
“所有的穿城路線”有點含糊
而且有點神祕

00:25:12.946 --> 00:25:14.681 
因此我將添加一點

00:25:16.950 --> 00:25:19.152 
關於這些路線如何計算出來的信息

00:25:20.587 --> 00:25:23.891 
而算法本身很可能也使用了一些解釋

00:25:24.825 --> 00:25:26.126 
因此我們將把算法記錄下來

00:25:27.361 --> 00:25:29.730 
而如果我再次切換
回到已被渲染的標記

00:25:30.364 --> 00:25:34.334 
您會看到現在我們開始獲得
某種看起來更像是一本書的東西

00:25:34.401 --> 00:25:37.538 
某種用戶可以坐下來
查看 通讀並理解的東西

00:25:37.604 --> 00:25:39.406 
我們甚至有一個不錯的
以粗體字顯示的列表

00:25:39.473 --> 00:25:42.576 
我們通過在每行開頭插入一個星號
來實現這個效果

00:25:44.211 --> 00:25:45.078 
因此那是非常棒的

00:25:46.380 --> 00:25:48.048 
但是它還不夠豐富

00:25:48.115 --> 00:25:51.251 
我們想把它讓它更進一步
因此爲了實現目標

00:25:51.318 --> 00:25:54.922 
我們將採用我們很久以前
在Playgrounds上推出的一個特性

00:25:54.988 --> 00:25:58.525 
它現在在Xcode 7上的效果更好
那就是“實時視圖”

00:25:59.193 --> 00:26:01.128 
因此我已經鬥膽寫了一個實時視圖

00:26:01.361 --> 00:26:03.697 
我已經把它加入了附屬資源

00:26:04.198 --> 00:26:07.501 
而我們先從把它
與這個Playground一道展示開始

00:26:07.568 --> 00:26:10.370 
以視覺化地呈現
這個算法的工作機制

00:26:11.638 --> 00:26:15.275 
那麼使用實時視圖的第一步是
您需要導入XCPlayground

00:26:15.342 --> 00:26:18.679 
它是一個有很多確實很棒的功能的模塊

00:26:18.745 --> 00:26:21.181 
它們讓您用 Playground
做一些非常酷的事情

00:26:21.248 --> 00:26:24.284 
現在也歡迎您在輔助資源中做這件事

00:26:24.351 --> 00:26:27.588 
比如創建一個 helper 方法
用它顯示您的實時視圖

00:26:27.654 --> 00:26:29.456 
您不必在主Playground中做那件事

00:26:29.523 --> 00:26:32.492 
但是我將在這裏做這件事
只是爲了更清楚地表明它的工作原理

00:26:34.328 --> 00:26:37.130 
一旦我們獲取了我們的舊金山這個城市
我們就準備好顯示它

00:26:37.297 --> 00:26:39.233 
因此我將實例化一個視圖控制器

00:26:40.567 --> 00:26:42.102 
有了我們的新的城市視圖控制器

00:26:42.970 --> 00:26:45.272 
我將把舊金山這個城市傳遞進來

00:26:46.940 --> 00:26:50.077 
然後我將使用XCPShowView函數

00:26:52.012 --> 00:26:53.247 
將城市名賦值給它

00:26:54.915 --> 00:26:56.783 
並傳入我們的視圖控制器的視圖

00:26:58.185 --> 00:26:59.520 
那麼如果我現在切換回去

00:26:59.586 --> 00:27:02.990 
並在Playground重新執行後
顯示我們的輔助編輯器

00:27:03.690 --> 00:27:08.195 
我們將看到一個實時視圖
看上起正像是舊金山市

00:27:13.400 --> 00:27:14.701 
您可以看出我們使用了

00:27:14.768 --> 00:27:17.671 
我們已添加更多內容的
更豐富的 Quick Looks

00:27:17.804 --> 00:27:20.507 
而且我們把它們設置在
看起來更真實的背景上面

00:27:20.574 --> 00:27:22.276 
以便避免人們太分不清方向

00:27:23.577 --> 00:27:25.412 
那麼這就是第一步
但是我們也希望展示

00:27:25.479 --> 00:27:27.548 
算法本身是如何工作的

00:27:27.781 --> 00:27:29.783 
而爲了達到這個目的
我們將添加一些代碼

00:27:30.717 --> 00:27:33.554 
當我們預演我們的算法時
它會更新實時視圖

00:27:34.254 --> 00:27:38.258 
因此這裏我們有一個循環
它對所有線路進行迭代

00:27:38.458 --> 00:27:41.528 
而我將用我的
視圖控制器上的方法替換它

00:27:42.162 --> 00:27:44.998 
這個方法叫做
VisualizePathIteration

00:27:45.399 --> 00:27:47.901 
而我寫它的時候用了尾隨閉包

00:27:48.802 --> 00:27:50.838 
以便能夠實際更新它
因此它看起來

00:27:50.904 --> 00:27:53.774 
幾乎與我們最初的循環代碼
完全類似

00:27:54.274 --> 00:27:56.410 
而且我還將在這裏添加一行

00:27:56.977 --> 00:27:58.712 
告訴視圖代碼控制器：

00:27:58.846 --> 00:28:00.480 
一旦我們發現更好的路線

00:28:00.547 --> 00:28:03.383 
我們希望顯示那條路線
尤其是在我們的地圖上

00:28:06.286 --> 00:28:07.921 
因此它會從頭到尾再執行一次

00:28:09.723 --> 00:28:10.724 
而你也會因此看到

00:28:11.992 --> 00:28:16.864 
當我們在舊金山全城遍歷所有路線
我們將以視覺化形式展示它們

00:28:17.464 --> 00:28:20.400 
而這是很不錯的
因爲現在正在閱讀這個程序的人們

00:28:20.467 --> 00:28:25.138 
可以實際看到我們是如何得到答案
如何找到最佳穿城路線的

00:28:27.374 --> 00:28:28.809 
不過您可能注意到了某些東西

00:28:29.476 --> 00:28:32.079 
那就是它將檢查大量的路線

00:28:32.346 --> 00:28:36.483 
實際上它將檢查 720 條路線
正如 康納 早些時候指出

00:28:36.717 --> 00:28:38.185 
而那是相當多了

00:28:38.585 --> 00:28:42.122 
實際上 實時視圖默認運行30秒

00:28:42.189 --> 00:28:46.360 
您可以使用Playground右下角的
控制條進行更改

00:28:46.994 --> 00:28:51.164 
而那甚至不足以遍歷
舊金山市的所有穿城路線

00:28:51.231 --> 00:28:52.833 
現在我們已經將其人工減慢了一些

00:28:52.900 --> 00:28:55.669 
因此 當我們在實時視圖上
迭代它們時您可以看到那些路線

00:28:56.303 --> 00:28:58.605 
但是我覺得的當人們看到路線時
他們會說...

00:28:58.739 --> 00:29:00.073 
哦 一定有條更好的路線

00:29:00.674 --> 00:29:01.542 
實際上確實有

00:29:01.608 --> 00:29:05.279 
而且我們也樂於從一開始
就把它展示給我們的用戶們

00:29:06.280 --> 00:29:07.581 
因此我們將使用另一種算法

00:29:08.015 --> 00:29:10.350 
它是“最近鄰近似算法”

00:29:10.417 --> 00:29:11.585 
而它將做的就是

00:29:11.818 --> 00:29:14.321 
假定我們從 Moscone 出發

00:29:14.621 --> 00:29:16.623 
我們查看我們想參觀的所有地點

00:29:16.690 --> 00:29:18.659 
然後我們選擇最近的一個
並去往那裏

00:29:19.092 --> 00:29:20.060 
然後從那個地點開始

00:29:20.127 --> 00:29:22.329 
我們將選擇下一個最近的地點
並將從那裏繼續

00:29:22.896 --> 00:29:23.730 
而如果我願意

00:29:23.897 --> 00:29:27.367 
我可以在這個Playground文件的正下方
執行那一操作

00:29:27.935 --> 00:29:30.938 
但是那將開始變得有點難以理解
而且不是那麼專注於目標了

00:29:31.004 --> 00:29:32.739 
Playgrounds的妙處之一在於

00:29:32.806 --> 00:29:35.709 
它們是由目標非常非常明確的
內容片段組成的

00:29:35.776 --> 00:29:37.444 
因此我們希望能夠維持這一特點

00:29:38.145 --> 00:29:40.881 
而爲了達到這個目的
我們在Xcode 7中有一個全新的特性

00:29:40.948 --> 00:29:41.949 
叫做 Pages

00:29:42.149 --> 00:29:45.719 
它讓您在單一Playground文件中
有多頁內容

00:29:46.787 --> 00:29:48.989 
因此爲了達到那一目的
我們將打開瀏覽器

00:29:50.591 --> 00:29:53.293 
在左下角我們將點擊加號按鈕

00:29:53.894 --> 00:29:55.762 
並選擇 New Page

00:29:56.530 --> 00:29:59.766 
而那將在同樣的Playground中
創建一個全新的頁面

00:30:00.667 --> 00:30:02.469 
我將把這個頁面叫做
Nearest Neighbor

00:30:04.404 --> 00:30:06.273 
這是根據我們
即將使用的算法而命名的

00:30:07.774 --> 00:30:10.677 
然後我們將把我們
最初的 Playground

00:30:12.045 --> 00:30:13.413 
重命名爲Getting Around

00:30:16.250 --> 00:30:17.885 
此外 Pages 的很酷的一點是

00:30:17.951 --> 00:30:19.753 
就像是輔助資源

00:30:19.820 --> 00:30:22.789 
以及您可以在頂層水平
加入Playground中資源一樣

00:30:23.056 --> 00:30:24.691 
你也可以在單頁的基礎上那麼做

00:30:24.758 --> 00:30:29.863 
你可以看到我可以展開
這些Playground頁面中的任何一個

00:30:29.930 --> 00:30:31.632 
而且我們可以嵌入它們自己的來源

00:30:32.165 --> 00:30:34.601 
例如 任何名稱相同的資源

00:30:34.668 --> 00:30:37.404 
都將優先於更大的
Playground 中的那些資源

00:30:37.471 --> 00:30:39.907 
所以如果您希望
在每個頁面上有不同的印記

00:30:39.973 --> 00:30:42.543 
或者在您將講授的
每個頁面上的概念上

00:30:42.609 --> 00:30:45.879 
有特定的圖片
您可以非常容易地做到

00:30:46.980 --> 00:30:49.449 
那麼現在我將切換到最近鄰頁面

00:30:50.517 --> 00:30:52.052 
切換回 Raw Markup 頁面

00:30:52.553 --> 00:30:55.856 
我已經寫好了算法
因此我將徑直把它粘貼進來

00:30:58.192 --> 00:31:01.929 
那麼我們這裏是一個帶有
最近鄰近似算法的Playground

00:31:02.296 --> 00:31:04.464 
而且您可以看出
當它運行的時候

00:31:05.566 --> 00:31:08.268 
它會檢查少得多的穿城路線

00:31:10.437 --> 00:31:12.673 
不過 這不是一個最優算法

00:31:12.940 --> 00:31:16.243 
原因是它不一定會找到我們的
最佳穿城路線

00:31:16.510 --> 00:31:19.346 
但是您可以看出它已經完成了
非常酷

00:31:19.513 --> 00:31:23.817 
因此這是一個不錯的方法
表明對此問題可能不止一個答案

00:31:24.785 --> 00:31:25.853 
而如果我們執行它

00:31:27.955 --> 00:31:28.922 
的話我們也可以表明

00:31:31.124 --> 00:31:34.294 
我們從哪裏獲得的這條路線

00:31:34.361 --> 00:31:39.233 
我們實際上是在維基百科上
發現的關於這個算法的信息

00:31:40.767 --> 00:31:42.803 
遺憾的是 我縮進得有點太遠了

00:31:47.040 --> 00:31:48.809 
我們可以直接在Playground中
嵌入一個鏈接

00:31:48.876 --> 00:31:52.179 
它將把我們帶到解釋此算法
如何工作的頁面

00:31:52.713 --> 00:31:55.716 
我們也可以在單一Playground中
鏈接不同頁面

00:31:56.016 --> 00:31:59.553 
並回到我們早些時候發現的最優路線

00:32:00.687 --> 00:32:03.657 
而實際上 當我們查看路線的數量

00:32:03.724 --> 00:32:05.559 
我們所走的穿過城市的不同路線

00:32:05.626 --> 00:32:07.761 
以及該算法的執行所花費的時間時

00:32:08.028 --> 00:32:09.863 
我們檢查了這頁上的720條路線

00:32:09.930 --> 00:32:13.267 
並發現了一條僅比另一個頁面上
快21分鐘的路線

00:32:13.567 --> 00:32:15.669 
那麼這給了人們一個參考框架
他們會說：

00:32:15.969 --> 00:32:17.371 
或許有其他方法做這件事

00:32:17.437 --> 00:32:20.507 
而他們可以用Playground
自己試驗

00:32:20.574 --> 00:32:21.408 
這是非常棒的

00:32:23.043 --> 00:32:24.545 
而那將在Playgrounds中

00:32:24.978 --> 00:32:27.848 
添加標記 頁面以及
實時視圖等部分

00:32:36.123 --> 00:32:40.394 
那麼我們在Xcode 7的Playgrounds中
有了大量的真正令人驚歎的新特性

00:32:40.460 --> 00:32:42.029 
我們向您展示了
定製化的Quick Looks

00:32:42.095 --> 00:32:44.031 
它將讓您選擇自定義的數據類型

00:32:44.097 --> 00:32:47.234 
並讓它們與內置類型一樣
生靈活現

00:32:47.835 --> 00:32:49.369 
我們也有內嵌結果

00:32:49.503 --> 00:32:50.971 
它們就在Playground內部

00:32:51.038 --> 00:32:53.841 
因此您既可以讓一些結果
直接顯示在產生它們的各行代碼間

00:32:53.907 --> 00:32:57.177 
也可以在與他人 分享您的 Playground 時
讓另一些結果隨Playground顯示 

00:32:57.578 --> 00:32:59.379 
我們還有輔助資源這一特性

00:32:59.446 --> 00:33:04.718 
您可以把附屬於您的Playground的
但並不像主Playground內的代碼

00:33:04.985 --> 00:33:06.286 
那樣有啓發性的代碼 放在一邊

00:33:06.353 --> 00:33:10.257 
以便您的用戶只看到
你願意他們看到的API 和實際功能

00:33:10.924 --> 00:33:13.527 
我們還有“嵌入式資源”特性
藉此您可以嵌入圖片

00:33:13.594 --> 00:33:16.864 
並讓東西更活靈活現更吸引人

00:33:17.497 --> 00:33:19.366 
我們還有全新的標記註釋特性

00:33:19.566 --> 00:33:22.002 
當您不能與用戶在一起時
它們真的是一個不錯的

00:33:22.069 --> 00:33:24.371 
指導您的用戶
通讀Playground的方式

00:33:24.705 --> 00:33:26.907 
經過改進的
比以往任何時候都好的實時視圖

00:33:27.441 --> 00:33:31.311 
以及那些 讓您在單一Playground中
覆蓋多個話題的頁面

00:33:31.378 --> 00:33:34.815 
同時不偏離任何一個主題的重心
這是確確實實非常酷的

00:33:35.549 --> 00:33:38.986 
那麼那就是我們在Xcode 7的
Playgrounds中的內容

00:33:44.358 --> 00:33:46.560 
如想了解更多信息
您可以訪問我們的網站

00:33:46.627 --> 00:33:49.162 
我們那裏有文稿和開發者論壇

00:33:49.396 --> 00:33:53.200 
您也可以和斯特凡·樂塞
我們的開發者工具宣傳官交談

00:33:53.800 --> 00:33:55.736 
我們還有幾個相關的講座環節
將要進行

00:33:56.036 --> 00:33:58.906 
包括《Swift在實踐中》
它將是在明天下午舉行

00:33:58.972 --> 00:34:01.141 
以及《在Swift中 如何使用
數值類型來打造更好的app》

00:34:01.208 --> 00:34:03.310 
此外還有本週的《Xcode中的新特性》
以及《Swift中的新特性》

00:34:03.377 --> 00:34:04.811 
等環節都 將是很棒的

00:34:04.878 --> 00:34:07.714 
非常感謝大家！
請欣賞 WWDC 的剩餘內容！