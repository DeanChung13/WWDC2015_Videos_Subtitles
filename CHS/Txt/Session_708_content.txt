调试能量的问题
你们好
嗨大家好
早上好
希望你们在苹果全球开发者大会上愉快
我叫Abhinav Pathak
和我的同事Pai-Han Huang
将要谈谈调试能量的问题
我们将向你们显示我们现有的工具
以及我们今年特意为iOS构建的新的工具
使用这些工具你发现你的应用程序中的能量问题
另一方面就是了解决这些问题客户就会真正喜欢你的程序
让我们开始
红色的电池图标
当它出现的时候我们都很憎恨它
客户也很憎恨它
具有良好的电池寿命对于精彩的用户体验是十分重要的
一次又一次证明人们所想要的最重要特色是电池的寿命
在Apple为确保客户获得良好的电池寿命
我们做出了很大的努力
然而通常客户运行的应用程序
是从它们的设备中吸走能量的主要原因
为了帮助我们的客户了解
哪个程序消耗电池能量哪个程序耗能最大
几年前针对OS X侧我们就有了活动监测能量影响工具
在这里你可以看到
每个应用程序瞬间及一段时间内的影响
这样用户就可以了解他们的设备发生了什么
在iSO 8我们引入了电池使用用户界面
一个面向用户的UI
在这里他们可以看到最后24小时以及最后7天内
能量在他们所使用的不同的应用程序中的分解比例
排在前面的应用程序可能有正当的理由
“嗨 我喜欢这个应用程序所以我一直在用”
为了使客户更好地了解这里的关键因素是什么
今年我们在它的顶部包括了一个单独触发器
在这里他们可以切换并且看到使用了多少应用程序
获得多少屏幕时间
以及它在后台运行使用了多少
然后他们就可以进行评估“嗨 我用它用的多”
或者“嗨 这个程序消耗了很多能量”
这个讲座就是关于如果你的应用程序在列表中名列前茅
你怎样把它降下来同时不影响用户的使用的问题
这个讲座也针对通常耗能很少的人们
如何才能耗能更少并且获得完美的客户体验
为了更好地进行概括
我们将快速介绍能量的基本原理和最佳范例
我们将对早晨的讲座进行总结
我们将向你展示能量调试流程
以及我们用来调试能量的工具
我们将进行演示
我们为这次讲座专门构建的样本程序中修复能量问题
向你展示修复能源问题是多么简单然后我们就将结束这次讲座
就这么简单
每个人都知道能量101
能量等于功率乘以时间
我们现在看到这里有个图表
X轴是时间Y轴是功率
这是一个应用程序使用波形图
发生了什么
我们说一个用户启动一个应用程序一堆活动在后台支持这个程序
然后该程序就悬停
最重要的一点是
图表下面的整个区域都是这个特定的应用程序的能量消耗
能量是由功率和时间来决定的
为了进一步说明这一点
我们在这里取两个长方形
它们消耗的功率是不同的消耗的时间也是不同的
但是他们的能量消耗是相同的
第二个概念
有些叫做固定成本的东西有些东西叫做动态成本
我们在系统中的许多的硬件组件
如果你要使用它们我们必须将它们引入一种
它们可以开始服务于你的请求的状态
相比休眠转态这些状态消耗能量很大
一旦将它们引入它们就做你要求它做的工作
然后我们让它们保持等待状态
你知道的将会有更多的工作出现
一旦我们看到没有出现工作出现
我们让它们平静下来进入睡眠
固定成本可以是非常非常昂贵
我们在整个的讲座中都将追踪这个固定成本
只要它开始影响你的应用程序
当说到降低能量的使用方法有三条非常简单的你需要遵守的规则
第一个规则永远不要做
客户真的需要完成那个工作吗？
如果你不做它固定成本 动态成本 能量功率时间
我们说到的所有的一切东西都是零
真了不起
如果你必须做就少做点
用最少的工作量来满足客户的需要
下一个就是在一个更好的时间去做
一个客户在野外拍摄照片
我难道需要现在就把照片上传到服务器上面
也许应该有些耐心等到用户将电源插头接上再说
第三点就是要高效地去做
什么是最有效的算法或者我用最好的办法来服务这个请求
我们可以看到这些不断地在我们讲座的不同部分中出现
这些问题需要插入我们所具有的能量调试流程和工具才能解决
让我们来看看能量调试流程是什么样子
它与正常的软件工程调试很相似
你都做些什么你编写代码并构建它
你在一个非常简单的调试器上运行代码
该调试器将向你显示你的代码中的高级别问题是什么
你可以很容易地识别 修复很多问题然后你再重新运行它
然而有些问题很难
你不断进行修改并说，“给我一个集中调试器，好吗？”
“嗨 我有内存问题”
让我获得一个针对内存的集中工具
可以直接针对我的程序代码的确切行问题在哪？
一旦你用这个完成了调试
你将它发给你的客户你的客户就可以使用了
在OSX一侧有Xcode在这里你可以编写和构建你的程序
作为通用调试器的一部分在Xcode的内部有能量调试工具
我们马上就要谈到这种调试工具
这些说明最主要的是告诉你的应用程序是如何运转的
作为仪器的一部分我们有集中工具
一旦你识别
你会说“嗨 系统的这部分有问题让我过来修复这个问题”
至于客户会受到能量消耗的影响
他们可以过来看看
在我们进入到工具之前
让我们来看看在OSX上的能量调试优先级
原因就是该工具非常关注能量调试优先级
因为它们能向你指出你需要修复你的问题的确切位置
OSX上的优先级是CPU和GPU
它们有很高的固定成本
要将它转入它们可以为你服务或者你的请求在空闲转态
消耗的功率是它们在休眠状态下的十倍
一旦它们在空闲状态
如果你使用了百分之一的CPU
那就是要比最高空闲功率消耗多百分之十
从那时起 指数增加
百分之十的CPU 2倍的空闲状态百分之百的CPU 一百倍的空闲状态
这里的规则很简单
如果你不需要 就不要惊醒CPU
让这头大熊睡去吧 不要去挑拨它
我们在Xcode中的工具我管它叫能量计量器
它打印出你的能量报告就像是这个样子
你如何到达那儿
你如果在运行你的应用程序你点击调试分析部分
你一点击那儿你就会看到一群计量器
点击能量影响计量器
你就会看到那个报告
你在报告中看到什么
最主要的是你会看到你是否是OSX中的坏公民
最根本的是是否你正在使用超高CPU
如果你在阻止
你的应用程序在后台中且用户看不到它
系统会尝试让你进入App Nap中这是一种后台悬置状态
而你正在阻止系统那样做
你并没有积极服务于任何请求
但是你消耗了很多的能量
空闲阻止你不让CPU进入空闲状态
如果它不能进入空闲状态它就不能进行休眠状态
一旦进入休眠状态CPU唤醒开销就会说
“嗨 负责把这个家伙唤醒”
你一旦找出了最可能发生问题的地方
你能做的就只能在报告的下面
你有我们刚才所描述的事情
但是你有这些可以跳入工具的按钮
这些工具专门为每个区域使用的
你知道的它们能够帮助你定位哪行代码正在导致很高的CPU的使用
哪行代码正在导致唤醒开销
你可以继续调试你的程序
说到减少OSX上的能量
我们再次强调我们的三个简单的规则永远不要做 做得少一些
你想要合并所有的计时器
你不想不断地唤醒系统
最小化CPU唤醒
在最佳时间唤醒
使用后台活动调度程序API
在这个调度程序你可以指定许多的参数
并且可以让系统来替你选择最佳的时间
有效地去做
在工作队列中设置最佳的工作优先级QoS工作优先级
编写一个计算程序算法
我们接着说iOS
CPU仍然是主要的能量消耗
但是由于这些设备与OSX中的设备是不同的
其它的几样东西也在起作用
首先是两个外围定位和连网
它们与CPU一样在一些情况下很费能量
接下来当一个应用程序在后台中运行时
你的程序会消耗所有这三个硬件
它会消耗许多的能量
你并没有显示能量但是所有其它的组件消耗能量都很巨大
让我们来一个个看一下
定位能量通常是这样起作用的
它的功率并不很高
功率被你已经调用的API及你所调用程序的精确度的数据所消耗
时间组件很大那就导致了能量变得巨大
说到修复定位同样的原则 从来不做
只有你真的需要它时只做连续定位
用户就会真的请求它
请在完成时就立即停止
一旦你获得了定位一旦你的请求获得满足 就停止
下面是是高效地去做
你需要的最精确是什么
你需要知道三英尺之内的用户在地球的位置吗？
或者为晴空万里城市预测气候吗？
你到底想要做些什么
我们进入到定位网站
我们说“嗨这里有一批人们想要使用范例”
每个使用范例我们都设计了API目的是更好地服务于开发者你
试着读一下这些API什么是你真正想要的
我们将为你做好能源管理工作
说到连网
类似的原则从来不做 消减传输
你能缓存吗？你能压缩吗？
你需要在最小的组成要素上最高质量的媒体吗？
你能在更好的时间去做吗？你考虑过容忍吗？
什么时候需要它？
你能将它标为任意吗？
你将它标为任意的时刻就是系统接管的时刻
你可以规定在接下来的6小时或12个小时内
我需要将这个上载或下载
系统就会计算出什么是最佳的时间来为你做这个工作
一旦工作完成 系统就会告诉你嗨 工作干完了
做的更加有效些
合并传输
让我们来看个例子这个是什么意思
我们说你有个同步数据到服务器的请求用户在使用你的应用程序
因为数据在设备上产生用户只能周期性地同步
很简单的解决方案
当数据正在设备上产生的时候只需要不断地推送它
这会发生什么
每推送一次你提供了数据
你发送你的10比特 100比特射频停留了很长的时间
然后它睡着了
下一次推送相同的现象在重复
固定成本在那个阶段是很高的
你如何来修复它呢
非常简单
合并所有的传输
让用户与该设备进行互动构建一个状态
然后偶尔将状态发送到云上
这样你就只支付了一次固定价格的费用
下来讨论后台
首先 当你的应用程序在后台运行时
它耗尽了用户的能量
如果没有必要不要在后台中做任何事情
如果你需要去做它尽快调用你的任务完成处理器
这个任务完成处理器是在向系统表示说“嗨 我完成了
请悬置我吧请让设备睡觉吧”
做得更有效率些
正如你所知有许多的后台API可以帮系统忙
在你发现的最佳时间最佳的能量消耗周期
请替我做这个工作系统就会替你去做
让我们回到iOS上的能量调试流程
我们目前只有Xcode在这里你编写和构建你的代码
客户拥有电池使用用户UI他们可以看到程序是如何节约能量的
到目前为止我们有开发的工具
叫做能量诊断工具
它可以对你的程序的行为做初步诊断
让我们来看看这个工具
你怎样才能使能它呢
你进入到设置开发者来到记录窗口
你打开这里的能量触发器
然后你就说“嗨 开始记录”
一旦你开始记录
就像你的用户那样使用你的应用程序
持续上几个小时12个小时 24个小时 几天
一旦你完成了只要点击按钮 结束记录
下面将你的设备与Mac连接进入工具 选择能量诊断
然后说“嗨 导入你刚才的记录数据”
你一旦那样做你就获得像这样的图片
这里试图想向你说明当你在使用时
那些占用大量性能硬件的状态
你会看到GPU的状态你会看到Wi-Fi 蓝牙
你会看到它们呆了多长时间什么时候在上面 什么时候离开等等
你将会看到有多少数据包从每个接口中发出
CPU的活动性是什么
在顶部 你将会看到能量使用等级是20中的多少量
如果你是20中的20相信我 你有麻烦了
这是非常非常高的能量消耗
你希望靠近1
如果你想要做长期的实验这个工具是很不错的
但是它不能做的是它不能告诉你为什么硬件能量在上升
你请求它了吗？你在哪儿请求它了？
它并没有精确定位没有细致到进入你的代码
为解决这个问题
今年我们引入了
在iOS上的能量计量器以及一些工具
这可以用来精确定位产生问题的代码
为了进行详细说明让我们来进行演示
我的同事Pai-Han Huang将来谈谈这个
好 在这个演示中我将谈谈这个能量故障工具的主要特点
演示应用程序
向你展示如何使用这个新工具来识别和提高你的应用程序的能量效率
作为一名开发者
我喜欢这些新的工具因为它们易于使用 有效
因此在演示结束后
我希望你们和我一样将这些新的工具用到项目设计中
演示主要有两部分组成
一个是新工具箱另外一个是演示应用程序
首先让我来向你们介绍新的工具箱
我们看到的是iOS能量计量器的屏幕截图
是其它新能量调试工具的入口点
它在哪儿呢？
它实际上在Xcode调试导航器的内部
你可以在这儿看见
在你通过Xcode启动了你的应用程序后
你就会自动地进入到这里
当你点击它的时候它就会将你带到屏幕的右手侧
能量计量器能将代码的能量影响可视化
瞬间的和实例的平均的能量影响也可以实现
因此首先是你的代码瞬间的能量影响可以在那里的场计量器中看到
在这个图表中有三个不同的区域
在里程表中 最下面的一个当指针指向一个绿色区域
它表明你的代码的能量影响实际上是合理的
祝贺你你是iOS生态系统的好公民
但是我仍然要建议你
去看看这些新的工具看看你如何能使你的客户更加快乐
当指针向上移动时它就进入了黄色区域
在黄色区域中你的代码的能量影响是很大的
很有可能你没有仔细对待它
在电池使用用户界面中你的应用程序会显示很高能量消耗
因此请使用新的能量调试工具来看看如何提高你的代码的能量效率
但是如果指针在继续向上移动你进入了红色区域
红色区域表示代码的能量影响是很大的
它意味着只要稍微使用你的应用程序
用户会很明显地感到设备上的电池有明显地下降
所以请使用新的工具
请使用新的工具！
对不起 我表示道歉我那样不太好 我总是抗议
那些不认真对待电池寿命的人
我向你承诺 我是个非常不错的人
请来今天下午的最后一个讲座我们来谈谈
好么？
但是速度计能向你提供
应用程序的瞬间能量影响的整个信息
如果你想看到更多的分解信息
你应该看这儿
能量影响分段
这个图表每秒钟就要刷新一次
如果你的应用程序给CPU
定位或连网引入了任何的工作负载
你就会看到一个方块显示在对应的时隙中的顶部的三行中
正如前面的讲座中所提到的
你的应用程序不只是在前台能够消耗掉大量的功率
在后台也一样
因此基于此次观察我们有了第四条有关后台规则
当你的应用程序呆在后台不离开
你就会看到移动的方块显示在第四行上
在这个图表的上面你就会看到一系列的彩色条
它们就像是这个
有两种颜色
红色表示开销
用提供的系统资源如射频模块来进行你的应用程序的工作的能量
它也与早期的讲座中硬件的固定成本相対映
对于蓝条
它表示由你的应用程序引入用来服务工作负荷的能量
除了瞬间信息我们还提供平均信息
例如像这个 百分率的平均开销
这个家伙向你展示了平均的能量影响
在底部 你会看到一系列有关图标
CPU、 定位、连网和后台的说明
它还提供一些你如何优化它们的建议
但是请记住
iOS能量计量器的设计是为了
使你迅速高层次地了解代码的能量影响
如果你想要更详细的信息 更加分解
那么请在这个按钮上点击
在你点击这个按钮后它就会将你弹到对应的工具中
为你的应用程序提供分解的能量信息
这是iOS能量计量器
让我简单地向你介绍工具
工具你们很多人都使用过它们
它看起来很相似
例如 你看这个在屏幕上的是定位工具
我们如何开始
我们以触发这个按钮来开始记录它然后停止
在你记录后你将会看到像这样的系统活动
你就会明白为什么你看到这样的活动性
例如在这里你会看到定位服务它正在努力请求定位
如果你想要更多 更详细的信息
到这儿 扩展细节
然后你将使用这个家伙
代码堆栈
这就是对工具的介绍
接下来让我来简单地说下演示程序
屏幕上你将会看到我们的演示程序的屏幕截图
我们管它叫能量兄弟
因此作为一名iOS能量软件工程师
我迫切地想知道是否我能够在每个地方提高我的能量效率
不只是我的电话而且是我的日常生活
能量兄弟可以很好地满足我的需求
例如我可以用它拍摄一张图片
它会从我拍摄的图片中提取能量计的信息
它会询问我的设备的定位
根据我的定位获取气象信息
将气象信息与我的使用相关联显示在屏幕上
结构是这样的有个集中数据管理器
如果我从那儿导入一张图它就尝试着对它进行采集
并且基于定位
它会尝试着寻找一个连网服务来根据我的定位获得天气信息
然后数据管理器会将这个信息关联作为一个曲线显示在屏幕上
然后我们试着给它一张图片看一下这个新工具
是如何帮助我们识别和提高能量兄弟的能量效率的
在左侧的屏幕上你将会看到Xcode
右侧是我的测试设备的屏幕截图
好 让我们通过打开项目文件来启动能量兄弟
它目前正在做的是在我点击了这个圆形按钮后
它就尝试着构建 发送二进制文件
并为我启动它
一旦它被启动，我们就会看到这个
它在这儿
让我们来调试这里的导航器
能量影响就在这儿
我们继续
我们最想做的就是
看看这里是否有活动的方块
因为我并没有在用户界面做任何事情
因此看起来没有什么活动的方块
这是个好的现象
因为在应用程序空闲的时候是不应该有过多的事情发生
这样很好
让我点击“导入图片”导入一张图片
从我的相册中选择一张图片
它将试着提取信息而我将设置采集
好了 我看到许多的活动出现了
包括CPU 连网和定位
但是从它们当中我立即注意到一件事
那就是定位一直都在进行中
这可不合情理
因为能量兄弟可不是那种跟踪你跑步锻炼的应用程序
那么我为什么需要持续监控我的设备的定位呢
这太不合理了
因此来看看定位工具将会告诉我们什么
以及我们如何来识别代码行来改进这种情况
接下来我将要点击定位工具
我说是重启
然后你试着用这个工具为我启动这个应用程序
好了让我来重新再次导入图片
设置采集
继续
好了在屏幕上你可以看到这个
这是定位活动率
它不停地在进行 没有停止
但是它在哪儿
我们在哪儿导入的
看这个
进入到扩展细节
就是这部分请求定位
那是我们如何请求定位服务
让我们停在这儿
回到Xcode
查找请求定位
好了它已经在这儿了
那么请求想要做什么呢
首先你想要设置确定视图控制器
在这一片代码中你想要建立创建一个定位管理器
然后你就要调用起始更新定位
在这一行之后
所发生的是定位服务通过那的一个回调
来周期性地向我们推送位置更新
那么在回调中让我们看看它做了些什么
首要的事情是你想要看这里是否有更新的任何东西
如果它是零那是无效的我们忽视它 返回
然后我们将它保存
我们说“是否定位是水平精度是实际符合我们的标准和期望”
如果没有我们返回
如果有
那么我们会试着处理确定视图控制器内部的定位
然后返回
不断地重复这种回调路径
每当我们从定位服务中接收到一个回调就这样
推送看起来并不好
那么我们应该怎么做呢？
我们应该做的就是当我们获得了一个数值时就停止它
就像这一行
我们说当我们获得了一个定位数值更新我们就将它停止
让我们来看看再次启动
看看能量计量器将会告诉我们什么
我希望看到的是在我首次接收到一个成功的定位更新后
我应该将定位停止并且定位服务不应该永远在进行
让我们等待将它启动
嗯
好 进入到iOS能量计量器
让我再次试着导入一张图片
从图库中选择一张图片
设置采集
好了 定位一秒 两秒 三秒 四秒 它不见了
只是一行代码就起到了立竿见影的效果
你可以仔细思考下这个场景
所以如果这个应用程序已经打开了很长时间
想象一下通过修改一行代码你可以节约多少能量
真是令人惊叹
让我们多尝试几次能量兄弟
看看当我们导入另一个下次会发生什么
好了 我们导入了另一个
我看到定位出现了四秒
但是这次
我注意的大事件是连网服务
这看起来不太好
能量兄弟想要发现连网服务的原因是它想要获得天气信息
但是我两分钟之前刚查询过
所以天气不会在两分钟内甚至是一个小时内有很大变化
我可以说天气也不会有多大变化
我们想重新连网的目的是什么
尽管我们早在两分钟之前已经有过请求
因此让我们直接到代码看看我们如何来修复这个问题
我们实际上请求定位的地方就在天气文件的内部
有个函数叫做获取如果失踪
让我们来看看它在第一部分做些什么
我们尝试着设置一些参数
如日期 基于查询的URL
基于设备定位的URL以及当前日期
以及我是否在今天之内进行过这种查询
你将为定位坐标保留原点坐标
你将要设置一个完全是一个小时的秒的数目的常数
所以我们应该首先尝试去做的是
如果我们今天已经查询过了
并且从两分钟前我们最后一次查询起
数据管理器已经提取了天气
那么我们说我们就返回
下来是如果我们今天没有做
并且数据管理器已经提取了天气
那我们还是返回
如果这两种情况都不满足
那么我们就尝试着建立一个
基于定位 日期的任务我们将在这里下载它
那有什么错么
它出错的原因实际上在这儿
计量器内部
因此我们将添加像这样的另外一种情况
就是说如果我今天已经完成的了这个
并且先前的提取在一个小时之内
那我就不再做它
让我们来再次启动它
来看看如何在能量计量器的内部看到改进的地方
我们希望看到是这样的
因为我们在如五分钟之前就完成了提取
当我们在下个小时内再次导入一张照片的时候
就不应该每次都看到任何的连网
让我们来看看能量计量器是否同意我的理论
好
开始
我尝试导入一张图片
从相册中选一张图片设置采集
我看到了定位
它像以前呆了四秒钟
但是神奇的是所有的连网都不见了
这正是我们所希望的
所以这是提高我们的能量兄弟的能量效率的又一种好办法
除了前台
能量兄弟还可以在后台消耗大量的电池
让我们看看当能量兄弟实际上在后台时能量计量器能告诉我们什么
我们通过点击返回主页按钮将能量兄弟放入后台
我们看到的是这儿
我们看到许多能量兄弟的后台活动
那就意味着只要能量兄弟在后台
设备就不能休眠
这样就会消耗大量的能量因为保持设备唤醒状态要有固定成本
这并不合理因为能量兄弟不需要在后台做任何事情
这里出什么错了吗？
当我们真的要转到后台的时候让我们进入到回调
这就是代码
它做些什么
它做以下事情你在设法设置后台任务标示符
它们所做的就是为数据管理器存档
就是将所有更改都存入数据管理器中
它们会说等待输入
如果真的要完成它我们就会在后台任务中编写代码
听起来合理吗？
不合理为什么不合理？
因为我们的应用程序一直会在后台对不对？
那么用户如何能够真的通过用户界面与能量兄弟来进行互动呢
所以根本就没有输入
而我们一直在等
这看起来可不太好
我们应该做的就是我们不应该等
相反的
我们应该做这样的事情
在我们将数据存档到数据管理器后
我们将立即调用后台任务使后台任务标示符无效
让我们再次启动能量兄弟来看看能量计量器会告诉我们什么
我们希望的是这样
在我们进行数据管理器中的所有更改后
它就会直接退出它本身释放控制给助手
它将不会像以前那样一直呆在后台中
好了 进入能量计量器
将能量兄弟放入后台中
我们现在在后台一秒 两秒 它消失了
这次我们又赢了
所以要记住我刚才做的一点点现场修复
你就会看到有显著的改进
下来Abhinav将继续向你们介绍
因为我们持续几个小时甚至一天都是在讲
进行重大的电池改进的内容
我的演示就到这里下来还是Abhinav
谢谢 Pai-Han
这是个很不错的演示 回到幻灯片看看演示都发生了什么并做个总结
我们开始使用能量兄弟无效率的代码我们像用户那样运行
看看都发生了什么
这所有的都亮了
糟糕 糟糕 真糟糕能量消耗太大了
你的应用程序在电池用户界面上能量消耗很高
我们如何修复它？
我们来到定位 我们说“嗨 定位被启动了 那么停止”
改了一行代码定位停止了
让我们看看之前和之后它看起来是什么样子
如果你聚焦定位时间轴你就会看到定位一直在进行着
后来只是在每当有关一张图片导入有实际请求的时候定位才进行
让我们继续说连网
之前每张新图片导入我们就获得天气信息
那可不好我们想要消减传输
我们放入了一个很简单的块
嗨 如果这是最近调用的 不要管了
我们不再需要新的信息
那对能量计量器有什么影响
还是两张图片之前和之后
如果你聚焦连网部分
连网在很长时间内都是高亮的
顶部的红条一直在高亮着说明连网硬件消耗很大
在应用程序使用期间消耗了很多的能量
在底部我们只做了一次连网
那之后最近刚调用过的就不再做了
后台对话怎么样
当我们进入后台的时候我们将我们的状态存入数据库
然后说“嗨 让我们等待用户输入”
不是等待用户输入的好地方目前用户可能在输入任何东西
非常简单的修复
我们说不要等待用户输入了
只需要调用任务完成处理器
告诉系统“嗨 我完成了 悬置我吧让系统休眠吧”
之前和之后能量计量器看起来是什么样子呢
让我们集中于后台行
顶部的后台一直在运行
在底部一旦我们完成了数据库的存档
后台的工作就完成了我们被悬置了
太神奇了
让我们来看看之前和之后的整个的代码
之前我们看到一切东西都在发亮
如果这发生在你的程序上这就是个问题
之后我们进行同样的使用给用户提供同样的效能和体验
但是硬件上的能量负载却非常非常小
正如我们所承诺的这个幻灯片最重要的是在开始
如果你的应用程序是顶部的情况
请做些更改
你就会看到你的程序出现在用户界面的底部
我们所做的就是拿了两个新安装的iPhone 6
在其中的一个安装了无效率的代码
在第二个安装了经过修复的代码
让它们完成完全相同的工作量同时也在运行着其它的应用程序
对能量兄弟和其它的应用而言都是相同的负荷量
我们发现修复代码要少消耗百分之五十的能量
包括显示能量
两个应用程序都是完全相同的
在右顶部你看到电池用户界面百分之二十八
而优化过的代码下降很多
用户获得了完全相同的东西
对这个讲座做个总结
对于获得完美的用户体验电池寿命确实很重要
设计应用程序时要记住三点
从来不做 尽量少做
更有效率地做
在良好的时间去做
后台应用考虑得更加周全
请尝试新的调试工具
我们有实验室我现在就说的更加详细些
离开时拿份我们的能量指南
它包含有我们这次讲座的所有信息甚至更多
将你们的应用程序带到能量实验室
有关你在何处可找到能量指南的更多信息
请找这次讲座的技术支持联系
最后与这些讨论的相关讲座
主要是我们说过的一些概念但是更加的详细
谢谢大家来参加讲座