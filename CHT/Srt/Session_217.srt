00:00:20.988 --> 00:00:21.822 
早上好

00:00:22.155 --> 00:00:24.958 
採用新Trackpad特性

00:00:25.025 --> 00:00:26.493 
歡迎來到會議217：

00:00:26.560 --> 00:00:28.195 
“採用新Trackpad特性”

00:00:28.495 --> 00:00:30.764 
我叫羅利·雷德 我是一名
AppKit工程師

00:00:30.831 --> 00:00:33.700 
我是使用新的壓力觸控tra
ckpads方面的“大師”

00:00:34.735 --> 00:00:37.037 
我們接下來要講的
就是這個

00:00:37.104 --> 00:00:38.739 
新的壓力觸控
trackpads

00:00:39.273 --> 00:00:42.309 
它們是很酷很酷的
技術

00:00:42.409 --> 00:00:44.845 
與我們之前的trackpads
不同之處在於

00:00:45.045 --> 00:00:48.182 
它沒有可供你按壓的
實體鍵

00:00:48.715 --> 00:00:51.218 
代替實體鍵的
是四個力傳感器

00:00:51.485 --> 00:00:53.954 
這樣我們就可以測量
用戶對trackpad

00:00:54.021 --> 00:00:55.822 
施加了多大的力
然後我們會把它

00:00:55.889 --> 00:00:57.524 
和我們的Taptic引擎
結合起來

00:00:57.925 --> 00:00:58.759 
當我們確定用戶
在trackpad

00:00:58.825 --> 00:01:01.361 
按壓的力足夠大
足以觸發鼠標的時候

00:01:01.428 --> 00:01:02.829 
我們就會使用
Taptic引擎

00:01:02.896 --> 00:01:04.998 
把trackpad向側面

00:01:05.331 --> 00:01:07.968 
稍微
拉一下

00:01:08.502 --> 00:01:10.304 
這樣用戶就會感覺

00:01:10.370 --> 00:01:12.673 
他們實際上已經按壓到了
一個按鈕

00:01:13.173 --> 00:01:15.108 
就是這樣 trackpad
向側面移動

00:01:15.342 --> 00:01:16.977 
但是你的大腦會讓你以爲

00:01:17.044 --> 00:01:18.579 
你實際上已經按壓到了
一個按鈕

00:01:18.879 --> 00:01:21.281 
這種感覺真的很棒
這樣欺騙你的大腦

00:01:21.348 --> 00:01:23.150 
讓你的大腦以爲你已經

00:01:23.217 --> 00:01:24.685 
按壓到了一個按鈕
這真的很奇妙

00:01:24.751 --> 00:01:26.587 
我們樓下實驗室有一些
trackpad

00:01:26.653 --> 00:01:28.155 
如果你還沒有
體驗過它

00:01:28.589 --> 00:01:29.756 
請下來試試

00:01:30.591 --> 00:01:33.460 
在那裏順便看看
Taptic引擎

00:01:34.061 --> 00:01:35.195 
真的很棒

00:01:35.395 --> 00:01:38.265 
概括一下
你施加了一點壓力

00:01:38.332 --> 00:01:41.535 
我們給你算一次單擊 但是當
你向trackpad施加

00:01:41.602 --> 00:01:45.305 
更大的力
我們也可以辨別出來

00:01:45.372 --> 00:01:46.373 
我們也可以感覺得到

00:01:46.440 --> 00:01:47.941 
我們稱之爲
Force click

00:01:48.008 --> 00:01:48.876 
我們也會給你一個
更加強烈的

00:01:48.942 --> 00:01:49.943 
觸覺感受

00:01:50.878 --> 00:01:52.312 
那麼有了
Force click

00:01:52.379 --> 00:01:53.647 
你就可以很多
好玩的事

00:01:53.847 --> 00:01:54.982 
事實上 讓我給你演示一些

00:01:55.048 --> 00:01:57.451 
你現在就可以用Force
click做的好玩的事

00:02:03.423 --> 00:02:05.993 
像我這樣
你可以看到我四處移動光標

00:02:06.126 --> 00:02:09.329 
你可以看到我對trackpad
施加的力

00:02:09.395 --> 00:02:12.799 
如果我再進一步 你就可以得
到Force click

00:02:12.999 --> 00:02:14.401 
那麼
大家都聽到了吧？

00:02:14.468 --> 00:02:15.502 
是我添加的 你知道

00:02:15.569 --> 00:02:16.837 
通常情況下 當你進行
Force click

00:02:16.904 --> 00:02:19.039 
的時候 你的電腦並不會
發出聲音 我加了這個聲音

00:02:19.106 --> 00:02:21.241 
是因爲你們並不能實際
感受到這個觸覺反饋 因爲

00:02:21.308 --> 00:02:22.342 
你們在那裏 而我在這裏

00:02:22.910 --> 00:02:27.147 
這樣 當我在演示中向tra
ckpad施加力的時候

00:02:27.214 --> 00:02:28.415 
你們就可以
觀看了

00:02:29.149 --> 00:02:31.885 
你能做的一件事
就是在取景器中重命名文件

00:02:31.952 --> 00:02:33.620 
有時候
這有點棘手

00:02:33.687 --> 00:02:37.191 
你必須點擊它
然後像這樣

00:02:37.257 --> 00:02:39.293 
再來一次...
我又失敗了

00:02:39.359 --> 00:02:40.294 
你的時間選擇要正好

00:02:40.360 --> 00:02:41.695 
這樣你纔不會雙擊
打開它

00:02:42.196 --> 00:02:43.764 
但是有了
Force Touch

00:02:43.830 --> 00:02:45.699 
我就可以
Force click它

00:02:45.766 --> 00:02:48.302 
然後就立即
可以編輯文件名了

00:02:48.502 --> 00:02:49.336 
編輯文件名就非常容易了

00:02:49.403 --> 00:02:51.271 
但這只是你可以
用Force click

00:02:51.338 --> 00:02:52.606 
完成的事情中的
小小的一件

00:02:52.673 --> 00:02:54.608 
我要很快打開
TextEdit

00:02:55.242 --> 00:02:59.646 
我來捕獲窗口

00:03:00.347 --> 00:03:02.049 
你也已經看過這個例子了

00:03:02.115 --> 00:03:03.417 
你可以
Force click

00:03:03.483 --> 00:03:05.686 
你就可以看到
“快速瀏覽”

00:03:05.752 --> 00:03:08.255 
非常奇妙
你可以坐在那兒 如果你

00:03:08.322 --> 00:03:12.492 
調整你施加的力的程度的話
你就可以“調戲”下動畫

00:03:12.659 --> 00:03:15.495 
我們還有另外一項
功能特性

00:03:15.562 --> 00:03:18.065 
我剛纔快速向你演示了
一些東西 這個你是知道的

00:03:18.131 --> 00:03:20.701 
通過改變力的大小
我可以改變速度

00:03:20.767 --> 00:03:23.470 
照片顯示的速度

00:03:23.537 --> 00:03:27.341 
顯示的指示器的量

00:03:27.407 --> 00:03:29.109 
你可以控制力的量

00:03:29.176 --> 00:03:31.612 
當然了
沒有繪製區

00:03:31.678 --> 00:03:34.781 
你就沒法繪製任何東西
壓力演示也就沒法完成

00:03:35.582 --> 00:03:38.452 
最後
不要像這樣連接音響

00:03:38.519 --> 00:03:40.821 
而是要在
這個控制器上...

00:03:40.921 --> 00:03:42.256 
當你把照片
歸零時

00:03:42.322 --> 00:03:43.957 
你會感受到
輕微的觸覺反饋

00:03:44.258 --> 00:03:45.459 
就是在trackpad上

00:03:45.893 --> 00:03:47.694 
真的很奇妙

00:03:48.161 --> 00:03:49.429 
我們再回到幻燈片中

00:03:50.564 --> 00:03:51.765 
我們已經講了很多東西

00:03:52.299 --> 00:03:53.433 
我們再來講講
API

00:03:53.500 --> 00:03:56.970 
就是那個應用程序用的API
就是我們在系統中使用的

00:03:57.037 --> 00:03:59.039 
各種API
這樣你就可以在你的應用程序

00:03:59.106 --> 00:04:01.441 
中使用Force To
Touch trackpad

00:04:01.508 --> 00:04:04.211 
添加
各種各樣的

00:04:04.278 --> 00:04:05.112 
新的功能特性

00:04:06.947 --> 00:04:08.315 
我今天會教你如何成爲

00:04:08.382 --> 00:04:09.783 
在OS X上使用Force
Touchtrackpad

00:04:09.850 --> 00:04:11.285 
的“大師”

00:04:11.351 --> 00:04:12.286 
要成爲

00:04:12.352 --> 00:04:13.887 
Force Touch
trackpad方面的大師

00:04:13.954 --> 00:04:14.955 
儘管我們會讓你在
一天內速成

00:04:15.022 --> 00:04:15.923 
你也得從小處着手

00:04:15.989 --> 00:04:17.089 
你得學習
所有的事情

00:04:17.156 --> 00:04:18.192 
你得學習一個“侍從”在使用

00:04:18.257 --> 00:04:19.358 
Force Touch
trackpad方面

00:04:19.426 --> 00:04:20.427 
全部的知識

00:04:20.494 --> 00:04:22.729 
這些都是與高級
API

00:04:23.030 --> 00:04:25.199 
以及內置工具相關
這些API和工具

00:04:25.265 --> 00:04:26.767 
有些是在我們的掌控下

00:04:27.301 --> 00:04:28.502 
然後我們會繼續 我們需要
學習一名“騎士”在使用

00:04:28.569 --> 00:04:29.970 
Force Touch
trackpad方面

00:04:30.037 --> 00:04:31.538 
全部
的知識

00:04:31.905 --> 00:04:34.842 
這些都與壓力流在
系統內的變化有關

00:04:34.908 --> 00:04:37.211 
事件流
我們會講講如何在你的

00:04:37.277 --> 00:04:39.646 
應用程序定製“彈性加載”
然後講一講進行

00:04:39.713 --> 00:04:41.081 
“對齊反饋”的方式

00:04:41.148 --> 00:04:43.417 
給用戶提供
更多的觸覺反饋

00:04:44.151 --> 00:04:47.087 
最後
我們會讓你成爲

00:04:47.154 --> 00:04:48.322 
Force Touch
trackpad

00:04:48.388 --> 00:04:49.223 
方面的“大師”

00:04:49.289 --> 00:04:50.390 
這與力的控制有關

00:04:50.524 --> 00:04:52.059 
對trackpad
進行配置

00:04:52.359 --> 00:04:54.795 
這樣它可以在給定的情景中
給出適當的觸覺反饋

00:04:54.862 --> 00:04:57.531 
以便你
進行控制

00:04:57.931 --> 00:05:00.234 
並且在適當時機
手動進行觸覺反饋

00:05:01.068 --> 00:05:02.703 
我們來看看吧

00:05:05.205 --> 00:05:08.408 
要成爲一名“侍從” 我們要
說的是“表格行動作”

00:05:08.475 --> 00:05:10.010 
它是一項很棒 很奇妙的
新功能

00:05:10.077 --> 00:05:12.145 
你在克雷格在keynote
上進行的電子郵件應用程序

00:05:12.212 --> 00:05:13.380 
演示中
已經看到過了

00:05:13.814 --> 00:05:15.182 
我們來講講
彈性加載控制

00:05:15.249 --> 00:05:18.252 
內置的一些東西
還有加速器控制

00:05:18.619 --> 00:05:20.387 
我們會通過一些案例研究
來實現這一點

00:05:21.021 --> 00:05:24.124 
比如說 在郵件這裏
如果你在郵件的某行上做

00:05:24.191 --> 00:05:27.194 
雙指滑動這個動作
你會看到更多的

00:05:27.261 --> 00:05:28.762 
“表格行動作”
你就可以點擊它們

00:05:28.896 --> 00:05:31.665 
或者你可以進行平滑的滑動
一個時間更長的滑動

00:05:31.732 --> 00:05:35.169 
實際上
它會激活默認動作

00:05:35.269 --> 00:05:37.171 
這是用戶的完整手勢
之一

00:05:37.538 --> 00:05:39.473 
這樣向你的應用程序中

00:05:39.573 --> 00:05:41.141 
添加一些其它的功能
就

00:05:41.208 --> 00:05:42.075 
非常棒

00:05:42.142 --> 00:05:43.677 
我自己每天都在
郵件中用它

00:05:44.211 --> 00:05:45.913 
它用的API
非常簡單

00:05:46.246 --> 00:05:47.347 
在你的tableView
授權中

00:05:47.414 --> 00:05:48.282 
只要實現

00:05:48.348 --> 00:05:49.183 
tableView ow

00:05:49.249 --> 00:05:50.250 
ActionsForRow
界限即可

00:05:50.317 --> 00:05:52.252 
我們會告訴你是什麼界限
要麼是前面的

00:05:52.319 --> 00:05:54.121 
要麼是後面的
這樣我們就可以爲你處理爲

00:05:54.188 --> 00:05:55.189 
從右到左 從左到右

00:05:56.523 --> 00:05:59.726 
然後你只要返回一個
“表格行動作”陣列

00:06:00.727 --> 00:06:04.998 
創建一個新NS表格行動作
你以一個類型 一個標題

00:06:05.065 --> 00:06:07.234 
以及一個處理程序
如果選中了一個項目

00:06:07.634 --> 00:06:11.104 
那麼回調的就是這個處理程序
無論是點擊選中

00:06:11.171 --> 00:06:13.207 
或者是完成了默認的
完整的滑動

00:06:13.574 --> 00:06:15.976 
那麼它就會調用
處理程序

00:06:17.344 --> 00:06:20.080 
我們有這麼幾種類型：
“規則的”以及“破壞的”

00:06:20.881 --> 00:06:22.883 
藍色高亮的
就是“規則的” 在你的

00:06:22.950 --> 00:06:25.552 
“表格行動作”大部分類型中
你都應該使用

00:06:25.619 --> 00:06:27.221 
“規則的”

00:06:27.855 --> 00:06:29.223 
紅色的是
“破壞的”

00:06:29.957 --> 00:06:31.825 
不要因爲它們的顏色
而做出選中

00:06:31.959 --> 00:06:33.360 
它不僅僅只是紅色那麼簡單

00:06:35.128 --> 00:06:38.398 
破壞性的項目 因爲它們
本質上就是破壞性的

00:06:38.465 --> 00:06:39.967 
事實上
我們也讓用戶更難完成一次

00:06:40.033 --> 00:06:41.635 
完整的滑動

00:06:41.768 --> 00:06:44.004 
他們必須在trackpad
上滑動較長的距離

00:06:44.271 --> 00:06:47.541 
這樣才能觸發
默認的

00:06:47.608 --> 00:06:48.442 
破壞性的動作

00:06:48.642 --> 00:06:51.345 
這樣是爲了防止他們
意外觸發破壞性的動作

00:06:51.745 --> 00:06:54.181 
儘量在所有的事情上使用
“規則的”

00:06:54.248 --> 00:06:57.251 
把“破壞的”留給
破壞性的項目

00:06:57.317 --> 00:07:00.687 
不要嘗試用紅色
它的語義非常重要

00:07:00.754 --> 00:07:01.622 
你要注意這一點

00:07:03.223 --> 00:07:04.591 
這個API就是
這樣

00:07:04.791 --> 00:07:05.626 
非常簡單

00:07:05.792 --> 00:07:07.628 
這個適用於新的
Force Touch trackpad

00:07:07.694 --> 00:07:08.795 
也同樣適用於我們的

00:07:08.862 --> 00:07:11.064 
老款trackpads
和Magic Mouse

00:07:11.265 --> 00:07:13.300 
這樣你很容易就能把它們
加到你的應用程序中

00:07:13.600 --> 00:07:16.069 
你就可以開啓新的
奇妙的可能

00:07:17.871 --> 00:07:19.740 
我們再來看看
取景器中的“彈性加載”

00:07:19.806 --> 00:07:23.677 
我這裏有下載的一張
洛拉的圖像

00:07:23.744 --> 00:07:25.746 
我想把她移動到
“我的文檔”文件夾

00:07:25.812 --> 00:07:27.114 
我要通過
Force clicking

00:07:27.181 --> 00:07:28.348 
開始拖動它

00:07:28.415 --> 00:07:31.051 
回到我的歷史
我甚至還要改成圖標模式

00:07:31.118 --> 00:07:32.853 
這樣我就能更加容易地
找到文檔文件夾

00:07:33.020 --> 00:07:35.189 
最後 把它放進“我的文檔”
文件夾

00:07:35.923 --> 00:07:38.025 
你之前可能已經知道了
彈性加載

00:07:38.392 --> 00:07:40.561 
你可以懸停在一個文件夾上
超時後

00:07:40.627 --> 00:07:43.330 
文件夾就會進行
彈性加載

00:07:43.664 --> 00:07:45.299 
我們向許多地方
和應用程序中添加了

00:07:45.365 --> 00:07:47.100 
彈性加載
以便把窗口置前

00:07:47.501 --> 00:07:49.436 
就像你剛纔看到的
按鈕是彈性加載的

00:07:49.670 --> 00:07:52.306 
你只要進行Force
click 就可以越過

00:07:52.372 --> 00:07:53.473 
懸停超時

00:07:53.540 --> 00:07:58.078 
這樣用起來就更直觀
更便利

00:07:59.346 --> 00:08:02.082 
要在這項工具欄按鈕上

00:08:02.149 --> 00:08:05.652 
實現彈性加載
取景器所做的

00:08:05.719 --> 00:08:08.255 
就是把NSButton的彈
性加載屬性設置爲“真”

00:08:09.189 --> 00:08:10.724 
他們就是在IB內校驗了下
框

00:08:10.791 --> 00:08:11.692 
就這麼簡單

00:08:11.758 --> 00:08:13.894 
分段控制
你也可以這麼做

00:08:13.961 --> 00:08:17.631 
當我把圖標佈局
從列表視圖改爲圖標視圖

00:08:18.031 --> 00:08:19.433 
那就是
NSSegmentedControl

00:08:19.499 --> 00:08:21.702 
再說一遍 它就是個
springLoaded屬性

00:08:21.768 --> 00:08:23.937 
你可以在IB的一個勾選框
上進行設置

00:08:24.004 --> 00:08:27.140 
在你的按鈕 分段控制上
打開彈性加載

00:08:27.407 --> 00:08:28.408 
就這麼簡單

00:08:28.642 --> 00:08:31.078 
你可以勾選使用
但是如果是

00:08:31.144 --> 00:08:33.080 
在導航中
那麼拖放

00:08:33.145 --> 00:08:34.948 
就很有用
我建議你們去試試

00:08:35.015 --> 00:08:35.916 
打開它

00:08:37.384 --> 00:08:40.354 
這是施加力的另一個實例
這是QuickTime

00:08:40.419 --> 00:08:42.856 
我想讓你們注意看這裏的
這個快進按鈕

00:08:44.057 --> 00:08:45.325 
我要使用
ForceTouchtrackpad

00:08:45.392 --> 00:08:46.660 
我要向那個按鈕

00:08:46.727 --> 00:08:48.095 
施加不同的
壓力

00:08:48.161 --> 00:08:50.497 
你可以看到 我可以達到5x
10x 30x

00:08:50.764 --> 00:08:51.598 
你也可以放慢速度

00:08:51.999 --> 00:08:53.734 
當你翻看你的
電影文件時

00:08:54.067 --> 00:08:55.969 
你可以控制前進的
速度

00:08:56.036 --> 00:08:58.138 
當你接近你要找的區域時
你就可以放慢速度

00:08:58.205 --> 00:09:00.040 
避免
跑過頭

00:09:01.808 --> 00:09:03.410 
QuickTime能這樣做
是因爲

00:09:03.477 --> 00:09:04.845 
我們有了一種新的按鈕類型

00:09:04.912 --> 00:09:08.815 
因此快進按鈕就是帶有自定義
圖像的NSButtons

00:09:08.882 --> 00:09:11.518 
它們可以
把按鈕的類型設爲

00:09:11.652 --> 00:09:13.253 
Accelerator
Button或者

00:09:13.320 --> 00:09:14.855 
MultiLevel
AcceleratorButton

00:09:15.522 --> 00:09:17.057 
對Accelerator
Button來說

00:09:17.124 --> 00:09:18.592 
你可以在IB這裏設置

00:09:20.594 --> 00:09:23.096 
當trackpad上的力
發生改變時

00:09:23.363 --> 00:09:25.432 
這個按鈕就會持續
發送活動消息

00:09:25.532 --> 00:09:27.601 
因此當力發生改變時
你就會得到新的活動消息

00:09:27.734 --> 00:09:29.736 
如果力再次發生改變
你又會收到新的活動消息

00:09:30.270 --> 00:09:33.006 
當用戶點擊按鈕達到
兩次時

00:09:33.073 --> 00:09:35.609 
doubleValue的域
爲1 這是因爲

00:09:35.676 --> 00:09:38.679 
用戶達到了
我們在trackpad上

00:09:38.745 --> 00:09:41.682 
接受的力的按壓的最大值

00:09:42.850 --> 00:09:45.552 
你可以看到
壓力在1到2之間變動

00:09:45.619 --> 00:09:48.288 
你可以
隨意

00:09:48.355 --> 00:09:49.656 
對它
進行調整

00:09:49.723 --> 00:09:52.960 
QuickTime這個實例
中 它控制的是加速度

00:09:54.027 --> 00:09:55.729 
你最終得到的值
爲零

00:09:55.796 --> 00:09:58.065 
當用戶結束追蹤按鈕時
你會得到

00:09:58.131 --> 00:10:00.334 
一條值爲零的
活動消息

00:10:00.634 --> 00:10:01.935 
當他們釋放
鼠標按鈕時

00:10:02.402 --> 00:10:04.471 
你會得到最後一條
域爲零的活動消息

00:10:05.506 --> 00:10:07.441 
實際上 QuickTime
在這裏使用的

00:10:07.508 --> 00:10:09.409 
就是MultiLevel
AcceleratorButton

00:10:09.977 --> 00:10:11.712 
你可以在IB這裏
進行設置

00:10:12.312 --> 00:10:13.981 
MultiLevel
AcceleratorButton

00:10:14.047 --> 00:10:15.616 
是離散的

00:10:15.983 --> 00:10:19.753 
而AcceleratorB
utton是一個平滑域

00:10:19.820 --> 00:10:21.455 
一個介於一到二之間的
連續域

00:10:21.622 --> 00:10:24.291 
AcceleratorBu
tton是整數層

00:10:24.358 --> 00:10:25.959 
是一個離散整數層
你可以用

00:10:26.026 --> 00:10:28.295 
max
AcceleratorLevel

00:10:28.362 --> 00:10:29.329 
對它 進行設置

00:10:29.663 --> 00:10:33.166 
我們的域是介於一到五
因此你可以設置

00:10:33.233 --> 00:10:35.169 
在你的加速中
你想要的層數

00:10:35.936 --> 00:10:37.704 
默認是二

00:10:38.205 --> 00:10:39.806 
QuickTime把它設置
成了五

00:10:40.274 --> 00:10:42.242 
你又看到了
doubleValue

00:10:42.309 --> 00:10:45.212 
域爲零到五
當你點擊時爲一

00:10:45.279 --> 00:10:46.713 
當用戶上升
層級時

00:10:46.780 --> 00:10:48.982 
它會上升到
你設置的最大層級

00:10:49.349 --> 00:10:51.652 
當用戶停止追蹤時
你會得到零的最終

00:10:51.718 --> 00:10:53.287 
活動消息

00:10:53.387 --> 00:10:54.888 
QuickTime做的
就是這個

00:10:54.955 --> 00:10:55.889 
這裏你可以看到

00:10:55.956 --> 00:10:57.658 
QuickTime是
如何映射你的各種速度爲

00:10:57.724 --> 00:11:00.494 
一、二、三、四、五

00:11:00.561 --> 00:11:03.463 
比如說
三就是10x快進

00:11:05.666 --> 00:11:08.769 
加速器控制的另一個實例：
這是“地圖”

00:11:09.436 --> 00:11:11.171 
“地圖”上有這個
漂亮的縮放按鈕

00:11:11.972 --> 00:11:13.473 
實際上

00:11:13.540 --> 00:11:16.143 
這些是當做NSSegmented
Controls

00:11:16.210 --> 00:11:17.044 
實現的

00:11:17.144 --> 00:11:18.212 
NSSegmentedControls

00:11:18.278 --> 00:11:19.179 
有一種新的追蹤模式

00:11:19.246 --> 00:11:21.048 
即Momentary
Accelerator

00:11:21.114 --> 00:11:24.017 
它和加速器
NSButtonType

00:11:24.084 --> 00:11:26.653 
的工作方式一模一樣

00:11:27.387 --> 00:11:29.156 
在IB中設置這個
同樣也非常容易

00:11:30.190 --> 00:11:31.692 
但是當分段控制活動消息
發出後

00:11:31.758 --> 00:11:34.595 
你應該請求選定的分段的
doubleValue

00:11:34.761 --> 00:11:35.963 
而不是
請求

00:11:36.029 --> 00:11:37.231 
doubleValue

00:11:37.698 --> 00:11:40.334 
它和我們之前談到的
域是一樣的

00:11:40.400 --> 00:11:43.937 
當用戶結束追蹤時
它爲一到二

00:11:44.004 --> 00:11:45.105 
並且最後活動消息值爲零

00:11:46.440 --> 00:11:49.209 
分段控制
沒有多層選項

00:11:49.443 --> 00:11:51.912 
它們僅僅支持
連續模式

00:11:55.048 --> 00:11:56.350 
這是一個照片的例子

00:11:57.184 --> 00:12:02.389 
通過施加力 調整力
瀏覽

00:12:03.090 --> 00:12:04.258 
“照片”中的照片

00:12:04.324 --> 00:12:07.027 
我可以控制照片移動的
速度

00:12:07.794 --> 00:12:10.898 
我們稱之爲
連續加速控制

00:12:11.598 --> 00:12:13.233 
如果你在NSButton

00:12:13.300 --> 00:12:14.568 
或者NSSegmented
Control上

00:12:14.635 --> 00:12:16.203 
有一項
加速控制設置

00:12:16.537 --> 00:12:18.272 
你可以在
NSControl節

00:12:18.338 --> 00:12:20.140 
把連續標誌設置爲“真”

00:12:20.340 --> 00:12:22.042 
或者在IB中勾選框

00:12:22.776 --> 00:12:26.380 
你就可以得到我們所說的
連續加速控制

00:12:27.181 --> 00:12:29.116 
連續加速控制
是不同的

00:12:29.183 --> 00:12:30.884 
因爲你不太需要關心

00:12:30.951 --> 00:12:31.852 
它們的
doubleValues

00:12:31.919 --> 00:12:33.921 
當動作發生時
你只是想盡快移動到

00:12:33.987 --> 00:12:34.888 
下一個滑動上

00:12:34.955 --> 00:12:37.024 
doubleValue
無關緊要

00:12:37.090 --> 00:12:39.193 
它們會像心跳一樣
回來

00:12:39.359 --> 00:12:41.662 
而力會改變
心跳的頻率

00:12:42.029 --> 00:12:42.996 
這就是區別所在

00:12:43.263 --> 00:12:46.400 
要把問題講清楚
讓我們來對兩者進行對比

00:12:46.967 --> 00:12:48.068 
在加速控制中

00:12:48.936 --> 00:12:51.638 
只要壓力發生變化 我們
就可以獲取到你的活動消息

00:12:51.705 --> 00:12:53.841 
因此
可能會有延遲

00:12:54.041 --> 00:12:56.043 
它們可能會互相靠近

00:12:56.243 --> 00:12:58.378 
這樣你就改變了
你在電影中

00:12:58.445 --> 00:12:59.279 
的快進速度

00:13:00.280 --> 00:13:04.952 
如果是連續控制
對連續加速來說

00:13:05.018 --> 00:13:06.186 
它會參加到心跳中

00:13:06.253 --> 00:13:07.754 
然後你就可以
完成你的動作

00:13:07.921 --> 00:13:09.923 
如果用戶施加了多次力
頻率會很高

00:13:09.990 --> 00:13:12.559 
它們
可能會

00:13:12.626 --> 00:13:13.460 
緊密結合起來

00:13:13.527 --> 00:13:16.763 
像滑動照片
此時動畫速度是連續的

00:13:16.830 --> 00:13:19.199 
它就非常適合
不過你何時應該呈現

00:13:19.266 --> 00:13:20.501 
下一張照片？

00:13:20.734 --> 00:13:22.436 
應該在
下次發出活動消息時呈現

00:13:22.703 --> 00:13:24.171 
它爲用戶提供了
許多控制

00:13:25.472 --> 00:13:27.274 
要成爲一個“侍從”
你需要了解的就這些

00:13:27.341 --> 00:13:28.876 
恭喜
你們現在都成了使用

00:13:28.942 --> 00:13:30.711 
Force Touch
trackpads方面的“侍從”

00:13:30.777 --> 00:13:33.514 
我們講了“表格行動作”
一個非常容易實現的API

00:13:33.580 --> 00:13:35.949 
彈性加載
NSButtons

00:13:36.016 --> 00:13:38.452 
加速器NS
Buttons 分段控制

00:13:38.585 --> 00:13:41.522 
打開它們很容易
我們的高層API

00:13:41.622 --> 00:13:45.092 
使用這些API
在這裏真的物有所值

00:13:45.392 --> 00:13:47.327 
我們希望你們在你們的
應用程序內打開它們

00:13:48.428 --> 00:13:49.596 
我們接着來看看
怎樣成爲一名“騎士”

00:13:50.531 --> 00:13:51.665 
要成爲一名“騎士”

00:13:51.732 --> 00:13:54.201 
那就需要理解力在系統內的
流動方式

00:13:54.701 --> 00:13:56.570 
我們來講一下
力的事件流

00:13:57.437 --> 00:13:58.438 
然後我會講一下

00:13:58.505 --> 00:14:01.074 
彈性加載
協議

00:14:01.141 --> 00:14:04.778 
這樣你就可以使用和
NSButton相同的API

00:14:04.978 --> 00:14:07.381 
在你的自定義應用程序內
提供彈性加載

00:14:08.015 --> 00:14:11.451 
我們最後會談一些
對齊反饋API

00:14:11.518 --> 00:14:15.122 
可以幫助你進行對齊
指導以及類似的事情

00:14:16.390 --> 00:14:17.391 
我們再來談談
事件流

00:14:18.292 --> 00:14:20.427 
我們在OS X已經
有了很多事件

00:14:21.228 --> 00:14:23.096 
你向上和向下移動鼠標

00:14:23.163 --> 00:14:26.233 
你的放大 旋轉
手勢

00:14:26.500 --> 00:14:27.901 
現在我們再介紹一個：

00:14:28.001 --> 00:14:29.303 
NSEventType
Pressure

0.3介紹


00:14:32.573 --> 00:14:33.941 
新MacBooks時
引入的

00:14:34.274 --> 00:14:37.711 
你也可以在那裏
獲得

00:14:38.712 --> 00:14:40.080 
它們是壓力手勢

00:14:41.114 --> 00:14:42.783 
當然了
和新的事件類型

00:14:42.850 --> 00:14:46.520 
我們有事件掩碼：
NSEventMaskPressure

00:14:46.854 --> 00:14:49.056 
這意味着
在你的跟蹤迴路中

00:14:49.590 --> 00:14:51.158 
你可以向你的跟蹤迴路中
添加

00:14:51.225 --> 00:14:52.993 
事件掩碼壓力

00:14:53.694 --> 00:14:56.730 
當你追蹤鼠標時
你也可以讓

00:14:56.797 --> 00:14:58.432 
壓力事件
起作用

00:14:59.166 --> 00:15:00.200 
使用真的很方便

00:15:01.702 --> 00:15:03.504 
如果你更喜歡
響應器這種方式 這樣你可以

00:15:03.570 --> 00:15:06.640 
覆蓋鼠標向上
鼠標拖動 鼠標向下

00:15:06.707 --> 00:15:08.642 
我們也還有一種新的
響應器方式

00:15:08.709 --> 00:15:10.043 
pressureChange
WithEvent

00:15:10.110 --> 00:15:11.011 
這樣如果你喜歡的話

00:15:11.078 --> 00:15:11.979 
你就可以獲取它們

00:15:14.348 --> 00:15:17.317 
我們再來挖掘下
壓力手勢的屬性

00:15:17.651 --> 00:15:20.420 
這是一種手勢
和鼠標事件序列不同

00:15:20.487 --> 00:15:23.190 
後者爲鼠標上移 鼠標拖動
鼠標下移有個體類型

00:15:23.257 --> 00:15:26.593 
壓力只有
單一類型

00:15:26.960 --> 00:15:29.897 
它有一個段
會經歷開始 改變 結束

00:15:30.130 --> 00:15:32.065 
這樣的一個循環
直到手勢結束

00:15:33.534 --> 00:15:34.701 
我們也有一個階段

00:15:34.835 --> 00:15:35.869 
階段是指我們如何確定

00:15:35.936 --> 00:15:37.437 
Force click
是否發生了

00:15:37.804 --> 00:15:40.707 
當你用trackpad
進行鼠標下移

00:15:40.774 --> 00:15:43.343 
你會得到“開始”段

00:15:43.410 --> 00:15:46.346 
壓力手勢
它是階段一

00:15:46.413 --> 00:15:48.882 
這是標準
點擊層次

00:15:48.949 --> 00:15:50.484 
用戶增加力度

00:15:50.551 --> 00:15:51.952 
在trackpad上達到了
Force click

00:15:52.019 --> 00:15:53.687 
層級
就變成了階段二

00:15:53.754 --> 00:15:56.390 
這樣你就知道用戶實現了
Force click

00:15:56.790 --> 00:15:59.459 
你就可以立即完成你的For
ce click動作

00:15:59.526 --> 00:16:01.728 
比如說
重命名取景器

00:16:02.763 --> 00:16:03.964 
這樣當用戶
從trackpad上

00:16:04.031 --> 00:16:05.332 
釋放力的時候

00:16:05.799 --> 00:16:08.035 
當它到達點擊層級時
就會返回階段一

00:16:08.101 --> 00:16:10.504 
當手勢結束時
最終到了階段零

00:16:10.904 --> 00:16:15.275 
因爲鼠標按下去後
就不再往下了

00:16:15.742 --> 00:16:19.913 
這樣得到了階段零
“結束”段的最後事件

00:16:21.849 --> 00:16:25.152 
現在 當然了
沒有真正的壓力值

00:16:25.219 --> 00:16:26.620 
就不會完成任何
壓力手勢

00:16:26.687 --> 00:16:28.322 
因此我們也有
壓力屬性

00:16:28.388 --> 00:16:29.723 
它的域爲
零到一

00:16:30.858 --> 00:16:32.159 
注意這裏

00:16:32.226 --> 00:16:34.328 
壓力屬性
就是當前階段的

00:16:34.394 --> 00:16:35.395 
壓力

00:16:35.462 --> 00:16:36.730 
正如你在這個圖表中看到的

00:16:36.797 --> 00:16:39.499 
當你進入階段一
壓力開始上升

00:16:39.566 --> 00:16:43.003 
並且在你進入階段二時
達到了1

00:16:43.070 --> 00:16:45.239 
當你越過階段二
壓力立即掉回了零

00:16:45.305 --> 00:16:47.574 
當你在階段二增加壓力時
壓力又重新

00:16:47.975 --> 00:16:51.445 
開始
上升

00:16:51.512 --> 00:16:54.381 
壓力屬於
當前階段

00:16:55.015 --> 00:16:55.849 
現在我展示的是

00:16:57.217 --> 00:16:59.953 
trackpad上的力
和用戶在壓力事件中的值

00:17:00.020 --> 00:17:03.357 
這兩者
之間的

00:17:03.423 --> 00:17:05.459 
線性映射
但是

00:17:05.526 --> 00:17:06.527 
我不希望你們過度曲解

00:17:07.160 --> 00:17:10.263 
我們喜歡把trackpad
上的每次點擊

00:17:10.329 --> 00:17:12.999 
都當成一次冒險
我們看到了很多

00:17:13.066 --> 00:17:15.769 
不同的變量
用戶使用他們的拇指

00:17:15.836 --> 00:17:18.505 
他們偏好的
硬度設置

00:17:18.972 --> 00:17:20.874 
他們如何與trackpad
進行交互

00:17:20.941 --> 00:17:23.109 
因此我們忙着對這些曲線
進行動態變更

00:17:23.176 --> 00:17:25.145 
給用戶
儘可能好的體驗

00:17:25.512 --> 00:17:28.281 
我們把trackpad的輸
入標準化爲

00:17:28.682 --> 00:17:30.484 
零到一的
壓力域

00:17:30.784 --> 00:17:32.452 
你在你的應用程序中
也應該用這個

00:17:35.055 --> 00:17:37.157 
你可能注意到了
之前我在演示時四處點擊

00:17:37.224 --> 00:17:39.826 
僅僅在TextEdit
四處點擊

00:17:40.394 --> 00:17:44.965 
我並不會看到
動畫彈出

00:17:45.032 --> 00:17:46.834 
直到我離的足夠近
施加的壓力非常接近

00:17:46.900 --> 00:17:47.901 
Force click

00:17:48.936 --> 00:17:51.371 
當用戶只是隨意點擊時
你不會希望有

00:17:51.438 --> 00:17:52.673 
一大堆的動畫
出現

00:17:52.739 --> 00:17:54.174 
分散
用戶的注意

00:17:54.341 --> 00:17:57.845 
當他們接近轉移到
階段二時

00:17:57.911 --> 00:17:59.012 
這個動畫很有用

00:17:59.346 --> 00:18:00.981 
階段的
轉移屬性

00:18:01.048 --> 00:18:02.015 
就是用來幹這個的

00:18:02.149 --> 00:18:04.284 
你可以在這裏看到
它的域爲零到一

00:18:04.351 --> 00:18:07.154 
但是在零這裏
停留了很長時間

00:18:07.221 --> 00:18:09.389 
直到你開始
接近下一階段

00:18:09.456 --> 00:18:10.490 
這個例子中是階段二

00:18:11.058 --> 00:18:13.927 
我想讓你們接近階段二
它會暴漲到一

00:18:13.994 --> 00:18:17.731 
你可以用這個域
控制你的動畫

00:18:18.031 --> 00:18:19.600 
而如果你只是在界面內
隨意點擊

00:18:19.666 --> 00:18:21.168 
它就不會妨礙你

00:18:21.635 --> 00:18:23.604 
你可以得到這個動畫
你一接近階段二

00:18:23.670 --> 00:18:26.006 
你就可以彈出
結束動畫

00:18:26.073 --> 00:18:29.510 
你可以看到
你一接近階段二

00:18:29.576 --> 00:18:32.346 
階段過渡值就掉回了零
在這個例子中

00:18:32.412 --> 00:18:34.982 
我們沒有階段三可以過渡
因此剩餘的時間

00:18:35.048 --> 00:18:36.717 
它仍然停在零

00:18:38.085 --> 00:18:42.222 
我之前提到過
當壓力手勢存在

00:18:42.289 --> 00:18:45.392 
鼠標事件
也就同時繼續

00:18:45.492 --> 00:18:47.761 
trackpad還是會
繼續模仿鼠標

00:18:48.695 --> 00:18:51.632 
它也會發出
壓力手勢

00:18:51.698 --> 00:18:54.034 
我要看看
這些流是如何在系統中

00:18:54.101 --> 00:18:55.335 
同時並行

00:18:55.669 --> 00:18:56.770 
我們接着要講的
就是這個

00:18:56.837 --> 00:19:00.841 
這是一個實例 用戶向tra
ckpad施加力

00:19:01.141 --> 00:19:02.242 
進行點擊
慢慢接近

00:19:02.309 --> 00:19:03.710 
Force click
閾值

00:19:03.777 --> 00:19:05.245 
然後釋放了
壓力

00:19:05.312 --> 00:19:06.180 
這就是他們的輸入

00:19:06.513 --> 00:19:08.949 
下面這裏
我們要向你演示

00:19:09.016 --> 00:19:10.217 
進入你的應用程序的事件

00:19:11.051 --> 00:19:13.253 
一開始
用戶施加的是輕微的壓力

00:19:13.854 --> 00:19:15.789 
這些就是全部的鼠標移動

00:19:15.856 --> 00:19:18.058 
我們還沒有到達
點擊閾值

00:19:18.392 --> 00:19:20.394 
我們還沒有開始
壓力手勢

00:19:20.494 --> 00:19:21.628 
這些只是鼠標移動

00:19:21.795 --> 00:19:23.597 
還沒有
壓力手勢進來

00:19:24.698 --> 00:19:27.034 
你達到點擊閾值
出現了鼠標下移

00:19:27.568 --> 00:19:31.138 
你也到了階段一
得到壓力開始事件

00:19:31.438 --> 00:19:33.674 
此時
壓力值要變成零

00:19:34.274 --> 00:19:35.142 
我們不能保證

00:19:35.209 --> 00:19:38.178 
是壓力開始事件先發生
還是

00:19:38.245 --> 00:19:41.114 
鼠標向下先發生
它們有時候會交換位置

00:19:41.882 --> 00:19:45.252 
處理這個最容易的方式
是尋找鼠標向下這個事件

00:19:45.319 --> 00:19:47.354 
如果你也要壓力事件
那麼在鼠標向下發生之後

00:19:47.421 --> 00:19:49.022 
繼續尋找
壓力事件

00:19:50.390 --> 00:19:53.026 
當用戶開始向trackpa
d施加更多的力

00:19:53.093 --> 00:19:54.995 
你可以看到 當我們接近
Force click閾值時

00:19:55.062 --> 00:19:56.697 
壓力
朝着一升上去了

00:19:57.197 --> 00:19:58.999 
如果光標移動
這些將作爲鼠標拖動事件

00:19:59.066 --> 00:20:00.267 
體現出來

00:20:00.334 --> 00:20:01.602 
你就有了鼠標拖動事件
以及

00:20:01.668 --> 00:20:03.570 
壓力事件
我們仍然處於階段一

00:20:04.037 --> 00:20:05.739 
我們達到了Force
click閾值

00:20:06.340 --> 00:20:08.575 
現在你在階段二得到了
壓力手勢

00:20:08.642 --> 00:20:11.278 
壓力值
一路掉回了零

00:20:12.079 --> 00:20:14.515 
用戶繼續向trackpad
施加更大的力

00:20:14.815 --> 00:20:17.117 
壓力再次開始增加 當他們從
trackpad上釋放

00:20:17.184 --> 00:20:18.986 
壓力時
它就開始

00:20:19.052 --> 00:20:20.420 
朝着零回落

00:20:20.988 --> 00:20:23.190 
現在他們釋放回到了Forc
e click閾值

00:20:23.257 --> 00:20:24.324 
壓力爲零

00:20:25.859 --> 00:20:27.427 
此時
我們仍然處於階段二

00:20:28.295 --> 00:20:30.531 
用戶再多釋放
一點壓力

00:20:30.664 --> 00:20:31.899 
我們也仍然處於階段二

00:20:32.533 --> 00:20:34.601 
實際上 在這個圖表上
我們誇張了一點

00:20:35.102 --> 00:20:37.638 
不過對於一個人來說
在trackpad上以一個

00:20:37.704 --> 00:20:39.706 
恆速保持壓力
非常困難

00:20:39.773 --> 00:20:42.209 
如果他們恰好處於Force
click層級 他們就會

00:20:42.276 --> 00:20:44.444 
超越 然後略微下降
我們並不希望

00:20:44.511 --> 00:20:45.979 
觸發 關閉Force
click

00:20:46.046 --> 00:20:47.181 
觸發 關閉 觸發 關閉

00:20:47.247 --> 00:20:48.615 
這不是用戶
想做的

00:20:48.916 --> 00:20:52.319 
我們要求你往Force
click閾值下

00:20:52.386 --> 00:20:55.856 
多降一點
直到我們最終脫離階段二

00:20:56.390 --> 00:20:58.992 
然後我們給你最終的
階段一事件

00:20:59.493 --> 00:21:00.594 
在那個小的時間段內

00:21:00.661 --> 00:21:03.964 
事件的壓力
將爲零

00:21:04.298 --> 00:21:06.233 
很明顯 你在Force
click閾值下方

00:21:06.300 --> 00:21:07.868 
壓力將會
開始上升

00:21:09.403 --> 00:21:13.140 
既然你處於階段一
用戶繼續釋放

00:21:13.340 --> 00:21:16.276 
壓力上升
再次開始回來

00:21:16.343 --> 00:21:18.412 
你注意到 它並不是
一路跳回階段一

00:21:18.478 --> 00:21:20.047 
因爲那是
間隙的一部分

00:21:20.647 --> 00:21:23.450 
要注意的一點是
這就是爲什麼你不應該

00:21:23.517 --> 00:21:25.519 
嘗試合併階段一
和階段二 獲得更大的

00:21:25.586 --> 00:21:27.487 
動態範圍的
原因

00:21:27.554 --> 00:21:30.157 
但我們到了“大師”階段時
我們會再

00:21:30.224 --> 00:21:32.326 
多談談

00:21:32.659 --> 00:21:33.894 
無論何時發生階段二

00:21:33.961 --> 00:21:37.097 
我們也會自動提供觸覺反饋
因此不要嘗試把

00:21:37.164 --> 00:21:38.899 
壓力
合併到兩個階段

00:21:39.233 --> 00:21:41.869 
要麼看着階段一 使用壓力
要麼看着階段二 使用壓力

00:21:41.969 --> 00:21:43.403 
如果你需要在後者
進行你的動畫

00:21:43.470 --> 00:21:46.273 
或者
階段過渡屬性

00:21:48.942 --> 00:21:52.212 
我們達到了階段一的
點擊閾值點

00:21:52.279 --> 00:21:53.514 
因此你的壓力現在回到了零

00:21:53.580 --> 00:21:55.415 
就像我們用
Force click閾值

00:21:55.482 --> 00:21:57.017 
做的那樣
實際上 在我們

00:21:57.084 --> 00:21:58.685 
最終從階段一釋放之前

00:21:58.752 --> 00:22:03.490 
用戶
必須釋放更多的力

00:22:04.124 --> 00:22:06.693 
我們要施加一個力
結束時階段爲零

00:22:06.760 --> 00:22:08.495 
鼠標上移

00:22:08.896 --> 00:22:11.198 
還是這樣
無法保證是鼠標上移先發生

00:22:11.265 --> 00:22:13.634 
還是
壓力結束事件

00:22:14.101 --> 00:22:16.737 
先發生
處理這個最容易的方式是：

00:22:16.803 --> 00:22:19.439 
尋找鼠標上移
同時追蹤壓力

00:22:19.506 --> 00:22:21.108 
和鼠標運動
直到

00:22:21.175 --> 00:22:22.976 
發生了鼠標上移

00:22:23.243 --> 00:22:25.612 
忽略任何可能在壓力事件
之前

00:22:25.679 --> 00:22:26.747 
之後發生的序列

00:22:27.247 --> 00:22:31.885 
這個適用於Mice
也同樣適用於我們的

00:22:31.952 --> 00:22:33.220 
老款trackpads

00:22:33.287 --> 00:22:34.454 
以及新
ForceTouchtrackpads

00:22:35.055 --> 00:22:37.457 
最後 鼠標上移後
如果用戶用非常非常輕微的

00:22:37.524 --> 00:22:39.927 
壓力四處移動
這些鼠標移動

00:22:40.093 --> 00:22:42.396 
壓力手勢結束了
我們會再次開始循環

00:22:42.462 --> 00:22:44.131 
就像
我們一開始做的那樣

00:22:45.966 --> 00:22:49.102 
如果壓力會和這個鼠標下移
聯繫起來

00:22:49.169 --> 00:22:50.904 
瞭解鼠標下移

00:22:50.971 --> 00:22:53.407 
就
非常重要

00:22:53.607 --> 00:22:56.610 
是否來自一臺
模仿鼠標的設備？

00:22:56.677 --> 00:22:58.712 
是否給出了
壓力手勢事件？

00:22:59.313 --> 00:23:01.815 
我們就是通過使用
鼠標下移事件上的

00:23:01.882 --> 00:23:04.017 
associatedEve
ntMask屬性

00:23:04.484 --> 00:23:06.153 
來幫助你做這個

00:23:06.220 --> 00:23:08.222 
你在鼠標移動事件上
也可以看到這個

00:23:09.089 --> 00:23:09.990 
使用真的非常方便

00:23:10.991 --> 00:23:12.860 
你爲associated
EventMask

00:23:12.926 --> 00:23:13.861 
請求鼠標下移事件

00:23:13.927 --> 00:23:16.363 
你發現它包括了
EventMaskPressure

00:23:16.430 --> 00:23:18.198 
如果你正在使用Cocoa

00:23:18.265 --> 00:23:20.200 
你就用
NSEventMaskPressure

00:23:20.267 --> 00:23:21.735 
把它結束了

00:23:21.802 --> 00:23:23.237 
因爲你正在校驗
位域

00:23:24.605 --> 00:23:27.040 
如果它確實包括EventM
askPressure

00:23:27.107 --> 00:23:29.376 
你知道壓力事件
就要來了

00:23:29.443 --> 00:23:32.746 
你就可以把它設置好 這樣
你就可以有不同的筆刷寬度

00:23:33.013 --> 00:23:34.014 
比如說在你繪畫時

00:23:34.081 --> 00:23:34.915 
這很棒

00:23:35.415 --> 00:23:37.150 
如果它不包括
EventMaskPressure

00:23:37.618 --> 00:23:41.221 
那麼它就來自一個鼠標
或者 比如說

00:23:41.288 --> 00:23:43.090 
一臺老款trackpad
此時你想選擇一個默認的

00:23:43.156 --> 00:23:45.192 
筆刷寬度

00:23:45.259 --> 00:23:47.961 
通常你在此時選擇
最大的筆刷寬度

00:23:48.328 --> 00:23:51.532 
或者你想要選擇
一半的筆刷寬度

00:23:51.732 --> 00:23:53.166 
你在整個鼠標拖動序列中

00:23:53.600 --> 00:23:55.969 
都
使用這個定值

00:23:57.738 --> 00:24:01.141 
這是新EventTypeP
ressure

00:24:02.543 --> 00:24:05.179 
它有很多新屬性
有一個段

00:24:05.546 --> 00:24:07.681 
因爲它是一個手勢
當前階段的壓力

00:24:07.748 --> 00:24:10.751 
位於零到一
的域內

00:24:11.051 --> 00:24:12.653 
當然你有階段
你很容易就可以看到

00:24:12.719 --> 00:24:14.288 
當用戶達到
Force click

00:24:14.354 --> 00:24:15.556 
那些過渡動畫的階段過渡

00:24:15.622 --> 00:24:17.257 
相連
事件掩碼

00:24:17.324 --> 00:24:20.194 
你知道 當你的鼠標事件
會有壓力

00:24:20.260 --> 00:24:21.828 
與它們
相連時

00:24:22.196 --> 00:24:24.031 
當然
如果你使用了響應器方式

00:24:24.097 --> 00:24:25.332 
事件響應器方式

00:24:25.532 --> 00:24:26.834 
會引起
壓力變化

00:24:28.335 --> 00:24:29.736 
我們再來講講
彈性加載

00:24:29.803 --> 00:24:31.905 
講一講NSButton是如
何實現彈性加載的

00:24:32.039 --> 00:24:34.641 
你可以在你的定製控制器中
使用完全相同的API

00:24:34.708 --> 00:24:36.543 
向你的應用程序添加
彈性加載

00:24:37.911 --> 00:24:38.779 
這是一個

00:24:38.846 --> 00:24:40.814 
NSSpringLoadingDestination
協議

00:24:40.881 --> 00:24:42.416 
如果你曾經實施過的話

00:24:42.482 --> 00:24:43.984 
它和
NSDraggingDestination

00:24:44.051 --> 00:24:45.018 
協議非常類似

00:24:46.787 --> 00:24:49.656 
在你的目標中
在你的目標視圖中

00:24:49.723 --> 00:24:51.325 
你需要實現
springLoadingEntered

00:24:51.391 --> 00:24:52.559 
或springLoadingUpdated

00:24:53.260 --> 00:24:54.962 
這裏給你一個實例
看看是如何實現的：

00:24:55.195 --> 00:24:56.330 
NSButton實現

00:24:56.396 --> 00:24:57.631 
springLoading
Entered

00:24:57.698 --> 00:24:59.099 
而不是
springLoadingUpdated

00:24:59.299 --> 00:25:01.368 
因爲一個按鈕要麼是
激活的 要麼是禁止的

00:25:01.435 --> 00:25:02.769 
因此
你一按住按鈕

00:25:03.070 --> 00:25:06.139 
它就會返回彈性加載選項
然後它就

00:25:06.206 --> 00:25:07.341 
在生命期內就不變了

00:25:07.407 --> 00:25:08.775 
拖曳
就發生在按鈕中

00:25:09.476 --> 00:25:11.245 
NSSegmentedControl
另一方面

00:25:11.311 --> 00:25:12.846 
實現了
springLoadingUpdated

00:25:13.313 --> 00:25:15.983 
每個段都可能是激活的
或者禁止的 彼此獨立

00:25:16.049 --> 00:25:17.651 
是一個視圖

00:25:17.718 --> 00:25:19.620 
因此有了
springLoadingUpdated

00:25:20.153 --> 00:25:23.290 
分段控制就可以對拖曳
進行觀察 精確找出拖曳

00:25:23.357 --> 00:25:24.491 
在控制器哪裏

00:25:24.558 --> 00:25:26.393 
如何動態改變
彈性加載選項的

00:25:26.894 --> 00:25:28.729 
就像我提到過的 你需要...

00:25:29.062 --> 00:25:30.430 
如果你實現其中的
一個方式

00:25:31.164 --> 00:25:32.766 
你需要實現
彈性加載選項

00:25:33.333 --> 00:25:35.936 
如果你願意
你可以兩者都實現

00:25:36.003 --> 00:25:37.704 
你並不需要僅僅實現
其中一個 但是

00:25:37.771 --> 00:25:38.872 
你最起碼要實現其中一個

00:25:39.540 --> 00:25:41.041 
對你的彈性加載選項來說
很明顯

00:25:41.108 --> 00:25:43.577 
你返回彈性加載選項應該是
“激活的”還是“禁止的”

00:25:43.644 --> 00:25:45.379 
非常簡單

00:25:45.746 --> 00:25:47.548 
我們還有其它一些
有趣的選項

00:25:47.614 --> 00:25:49.016 
持續激活

00:25:49.550 --> 00:25:52.452 
一般來說
彈性加載動作是離散的

00:25:52.519 --> 00:25:53.520 
彈性加載產生了

00:25:53.754 --> 00:25:56.857 
按鈕發出了動作
結束了

00:25:57.157 --> 00:25:58.659 
還有一個持續版本
我們在下面的

00:25:58.725 --> 00:26:00.394 
幻燈片中 會

00:26:00.460 --> 00:26:02.129 
講到

00:26:02.763 --> 00:26:04.097 
我想再講講沒有懸停的情況

00:26:05.499 --> 00:26:07.634 
就像我之前提到的
彈性加載可以通過

00:26:07.701 --> 00:26:09.303 
懸停或者
Force click激活

00:26:09.369 --> 00:26:11.071 
懸停非常適合

00:26:11.138 --> 00:26:12.506 
沒有Force Touch
trackpads的

00:26:12.573 --> 00:26:13.574 
人羣

00:26:14.675 --> 00:26:17.211 
舉例來說
如果你想在一塊很大的畫布上

00:26:17.277 --> 00:26:18.579 
進行
Force click

00:26:18.946 --> 00:26:20.214 
用戶把項目拖拽過畫布

00:26:20.280 --> 00:26:22.983 
他們只是試圖
拖到畫布另一邊

00:26:23.150 --> 00:26:24.751 
他們擡起手指
回來繼續拖拽

00:26:24.818 --> 00:26:26.553 
或者擡起鼠標
繼續拖拽

00:26:26.620 --> 00:26:27.788 
這個時間可能會很長

00:26:28.422 --> 00:26:30.490 
光標停住不動
而

00:26:30.557 --> 00:26:34.127 
彈性加載
一直處於激活狀態

00:26:35.162 --> 00:26:37.097 
這就是一個
假的激活

00:26:37.164 --> 00:26:38.732 
這不是用戶試圖
做的

00:26:39.399 --> 00:26:41.134 
如果因爲懸停 你收到了
大量假的激活

00:26:41.201 --> 00:26:43.203 
如果你遇到了這種情況
你可能想考慮下

00:26:43.837 --> 00:26:47.074 
無懸停
彈性加載選項

00:26:47.274 --> 00:26:48.742 
用戶就可以用

00:26:48.809 --> 00:26:49.943 
Force Touch
trackpad進行

00:26:50.010 --> 00:26:52.379 
Force click
在你的視圖的那個位置

00:26:52.513 --> 00:26:53.480 
得到彈性加載

00:26:54.314 --> 00:26:57.484 
你要保守地使用
使用之前務必三思

00:26:57.551 --> 00:26:59.086 
因爲我們不想遺漏任何沒有
Force Touch trackpad

00:26:59.152 --> 00:27:00.687 
的 用戶

00:27:01.054 --> 00:27:03.824 
但是如果你收到了
大量的假的激活

00:27:04.024 --> 00:27:05.626 
那麼偶爾用一個這個選項
就很好

00:27:07.661 --> 00:27:08.629 
與springLoading
Entered

00:27:08.695 --> 00:27:10.130 
和“已更新”一起
我們當然還有

00:27:10.197 --> 00:27:11.164 
springLoadingExited...

00:27:11.231 --> 00:27:13.767 
當用戶退出了你的視圖
它就會告訴你

00:27:13.967 --> 00:27:15.502 
還有draggingEnded

00:27:15.569 --> 00:27:17.738 
彈性加載是
拖放操作的一部分

00:27:17.804 --> 00:27:21.742 
因此如果用戶
拖過了你的視圖

00:27:21.942 --> 00:27:24.645 
你的彈性加載
目的

00:27:24.845 --> 00:27:26.547 
你實現了
draggingEnded

00:27:26.880 --> 00:27:29.283 
當拖拽完成後
當用戶釋放了鼠標

00:27:29.349 --> 00:27:30.684 
取消了拖拽

00:27:31.385 --> 00:27:33.253 
你會拿回
draggingEnded

00:27:33.387 --> 00:27:37.057 
無論用戶是在你的應用程序中
還是在另一個進程中

00:27:37.124 --> 00:27:39.059 
完成了拖拽
都不重要

00:27:39.493 --> 00:27:41.862 
任何實現了
draggingUpdated的人

00:27:41.929 --> 00:27:43.130 
都會得到他們的回調

00:27:45.432 --> 00:27:46.834 
因爲這是拖拽的一部分

00:27:47.367 --> 00:27:48.836 
NSDraggingDestination

00:27:48.902 --> 00:27:52.973 
還有一個
draggingEnded函數

00:27:53.173 --> 00:27:54.741 
它和我們這裏的函數
一模一樣

00:27:54.975 --> 00:27:57.277 
如果你同時使用了
彈性加載目的

00:27:57.344 --> 00:27:59.546 
和NSDragging
Destination

00:27:59.947 --> 00:28:00.814 
那麼你只需要

00:28:00.881 --> 00:28:02.583 
實現一個
draggingEnded

00:28:02.649 --> 00:28:04.918 
它會應用於兩者之上
因此如果你同時使用了

00:28:04.985 --> 00:28:07.287 
彈性加載目的
和拖拽目的

00:28:07.688 --> 00:28:09.556 
你就需要爲彈性加載目的
和拖拽目的

00:28:09.623 --> 00:28:11.425 
完成
清除工作

00:28:13.093 --> 00:28:15.596 
現在我們來看看
彈性加載真正好玩的地方

00:28:15.996 --> 00:28:18.899 
因此 要求你實現
springLoadingActivated

00:28:18.966 --> 00:28:21.735 
我們就是在這裏
告訴你的目的

00:28:21.802 --> 00:28:23.270 
用戶進行了彈性加載

00:28:24.471 --> 00:28:26.273 
我們有一個布爾值
通常這個值爲“是”

00:28:26.607 --> 00:28:29.109 
就像我提到的
彈性加載是一個離散動作

00:28:29.176 --> 00:28:32.045 
它發生了
NSButton剛剛發生了動作

00:28:32.913 --> 00:28:36.183 
大家都滿意了

00:28:36.416 --> 00:28:39.486 
但是 如果
你有連續位組

00:28:39.553 --> 00:28:40.754 
那麼只要用戶
進行Force click

00:28:41.388 --> 00:28:43.123 
我們會發送一個
springLoadingActivated“是”

00:28:43.190 --> 00:28:45.492 
你可以啓動一個計時器
你可以繼續

00:28:45.692 --> 00:28:47.995 
往那個計時器添加你的
活動消息

00:28:48.061 --> 00:28:51.732 
當你從
Force click釋放後 它會回覆給你

00:28:51.999 --> 00:28:54.134 
一個springLoading
Activated“否”

00:28:54.201 --> 00:28:56.537 
你就知道你該關閉
你的計時器了

00:28:56.937 --> 00:28:58.472 
如果用戶使用懸停

00:28:58.539 --> 00:29:00.474 
當懸停超時時 你會得到

00:29:00.541 --> 00:29:02.042 
springLoadingActivated
“是”

00:29:02.109 --> 00:29:03.844 
當它們從控制器移出時
你就會得到

00:29:03.911 --> 00:29:05.379 
一個
“否”

00:29:06.513 --> 00:29:09.016 
要把這個和
正常的離散動作進行對比

00:29:09.149 --> 00:29:10.851 
通常是在釋放
Force click時

00:29:10.918 --> 00:29:12.719 
來自Force click的
彈性加載

00:29:12.786 --> 00:29:14.154 
它們會一路進入
Force click

00:29:14.221 --> 00:29:15.522 
當它們釋放Force click

00:29:15.589 --> 00:29:17.324 
如果你不是連續使用
你就會得到

00:29:17.391 --> 00:29:18.892 
一個springLoadingActivated
“是”

00:29:18.959 --> 00:29:22.095 
除非你在彈性加載時
需要連續發出你的活動消息

00:29:22.162 --> 00:29:23.297 
那麼我們通常

00:29:23.363 --> 00:29:27.134 
會建議你
用它

00:29:28.902 --> 00:29:29.903 
最後 我們有

00:29:29.970 --> 00:29:31.305 
springLoading
HighlightChanged

00:29:31.638 --> 00:29:33.640 
我們希望給用戶提供反饋
告訴它們當前的情況

00:29:33.707 --> 00:29:35.742 
我們有三種高亮形式：不高亮

00:29:35.976 --> 00:29:37.244 
標準高亮 增強高亮

00:29:38.679 --> 00:29:40.414 
當你得到一個

00:29:40.480 --> 00:29:42.216 
springLoading
HighlightChanged

00:29:42.282 --> 00:29:44.751 
消息 你需要告訴
draggingInfo那個

00:29:44.818 --> 00:29:46.520 
springLoading
Highlight是爲了什麼

00:29:46.587 --> 00:29:48.188 
設置需要展示的視圖

00:29:48.255 --> 00:29:51.491 
然後你就可以更新
在正確的高亮顯示

00:29:51.558 --> 00:29:52.860 
那裏繪畫

00:29:54.228 --> 00:29:56.697 
重要的是
不要試圖推斷

00:29:56.763 --> 00:29:59.466 
用戶的
任何動作

00:29:59.900 --> 00:30:02.035 
這就是springLoadingActivated
的用途

00:30:04.238 --> 00:30:08.075 
就像當你從一個菜單中
選擇一個項目時

00:30:08.141 --> 00:30:10.444 
我們會讓那個菜單項目閃爍
讓用戶知道 確認他們已經

00:30:10.511 --> 00:30:13.413 
選擇了那個項目
我們在彈性加載中

00:30:13.480 --> 00:30:14.882 
也做了類似的事

00:30:14.948 --> 00:30:17.317 
我們是通過改變高亮
實現的

00:30:17.684 --> 00:30:19.586 
因此你需要做的
就是用任何需要的

00:30:19.653 --> 00:30:21.722 
高亮方式繪畫
然後你的應用程序的

00:30:22.089 --> 00:30:24.791 
風格就會和
系統的其它地方

00:30:24.858 --> 00:30:25.993 
保持一致

00:30:26.360 --> 00:30:27.995 
使用springLoadingActivated
來知道何時

00:30:28.061 --> 00:30:29.463 
發出
活動消息

00:30:30.898 --> 00:30:32.266 
這是彈性加載
目的

00:30:33.233 --> 00:30:34.835 
我們有對齊反饋 當你在
Interface Builder中

00:30:34.902 --> 00:30:37.004 
有兩個項目在一起時
你可以看到這個

00:30:37.070 --> 00:30:39.273 
我們把它們對齊了
繪製了這個漂亮的對齊指導

00:30:40.107 --> 00:30:42.476 
我們有一些新的API
能幫助你實現這一點

00:30:42.643 --> 00:30:45.245 
繪圖由你決定
但是我們的新API能幫助你

00:30:45.312 --> 00:30:46.313 
決定何時應該對齊

00:30:47.080 --> 00:30:50.551 
這裏給你一個例子
我們來看看這個跟蹤迴路

00:30:50.617 --> 00:30:51.718 
一個典型的跟蹤迴路

00:30:51.785 --> 00:30:53.620 
我們放大下

00:30:53.687 --> 00:30:54.888 
你得到了你的鼠標下移事件

00:30:54.955 --> 00:30:57.758 
你找出你的事件掩碼是什麼
你想要追蹤哪個事件

00:30:57.824 --> 00:31:01.662 
你請求下個事件
你移動你的項目

00:31:01.762 --> 00:31:04.097 
更新你的數據模型
設置你的需求顯示

00:31:04.164 --> 00:31:06.700 
鼠標上移了嗎？沒有
你就繼續這個循環

00:31:06.867 --> 00:31:10.270 
無論drawRect什麼時候被調用
你就繪製

00:31:10.337 --> 00:31:12.573 
你把你的項目拖過屏幕
直到發生了鼠標上移

00:31:13.373 --> 00:31:14.208 
我們有一個

00:31:14.274 --> 00:31:16.410 
NSAlignmentFeedbackFilter
對象

00:31:16.476 --> 00:31:17.778 
能幫到你

00:31:18.946 --> 00:31:20.380 
你把鼠標上移
你做的第一件事

00:31:20.447 --> 00:31:21.915 
你從對齊反饋過濾器中

00:31:21.982 --> 00:31:23.851 
得到
輸入事件掩碼

00:31:24.952 --> 00:31:27.688 
對齊反饋過濾器需要知道
這個

00:31:27.754 --> 00:31:29.189 
當你調用
nextEventMatchingMask時

00:31:29.256 --> 00:31:31.425 
你只需要或者把它們 或者

00:31:31.491 --> 00:31:34.661 
把它們的並集 在Swift實例中
和你的事件掩碼並運算

00:31:35.562 --> 00:31:38.866 
你一旦得到下個事件
你要做的第一件事

00:31:38.932 --> 00:31:41.201 
就是把事件送到
對齊反饋過濾器

00:31:41.268 --> 00:31:42.436 
它會立即返回

00:31:42.503 --> 00:31:44.104 
它只是更新一些
內部狀態

00:31:44.938 --> 00:31:48.675 
你移動...不好意思 如果
你使用的是pan手勢識別器

00:31:48.742 --> 00:31:51.011 
你也可以用pan手勢識別器
來進行更新

00:31:51.078 --> 00:31:52.746 
它和跟蹤迴路工作方式
十分類似

00:31:52.980 --> 00:31:56.283 
一切都適用
除了這個消息差異

00:31:58.252 --> 00:31:59.953 
對齊反饋過濾器一旦
處理完輸出 返回後

00:32:00.020 --> 00:32:03.524 
像你平常那樣
你把項目移到你的數據模型

00:32:03.590 --> 00:32:06.093 
然後
你準備對齊

00:32:06.627 --> 00:32:09.296 
我們來挖掘一下準備對齊
你得使用對齊反饋過濾器

00:32:09.363 --> 00:32:11.632 
來幫助你
實現這一點

00:32:12.199 --> 00:32:14.668 
我們之前在數據模型中
有對象

00:32:14.735 --> 00:32:17.171 
我們得到了事件
我們決定用戶移動到這裏

00:32:17.271 --> 00:32:18.639 
如果我們不進行任何對齊

00:32:19.072 --> 00:32:20.741 
這裏就是
默認位置

00:32:20.841 --> 00:32:22.476 
這是對象
結束的地方

00:32:23.243 --> 00:32:26.280 
我們想知道：是否應該
在這裏對齊 是否應該

00:32:26.346 --> 00:32:29.082 
向下對齊這條線 或者我們
是否要同時對齊

00:32:29.149 --> 00:32:30.384 
弄到下面角落裏

00:32:31.418 --> 00:32:34.188 
使用對齊反饋過濾器
對象來幫助你

00:32:34.254 --> 00:32:35.088 
決定這個

00:32:35.155 --> 00:32:36.223 
alignmentFeedback
Token

00:32:36.290 --> 00:32:37.724 
ForHorizontal
MovementInView

00:32:37.791 --> 00:32:40.394 
previousX
alignedX和defaultX

00:32:40.794 --> 00:32:43.030 
這些座標都位於
窗口座標空格上

00:32:43.096 --> 00:32:47.201 
因此無論你在視圖內
的縮放層級是什麼

00:32:47.267 --> 00:32:48.502 
它都工作的
很好

00:32:49.837 --> 00:32:51.972 
如果發生對齊
我們就會返回給你一個

00:32:52.039 --> 00:32:54.308 
對齊反饋
令牌

00:32:55.008 --> 00:32:56.577 
如果你沒有得到
對齊反饋令牌

00:32:56.643 --> 00:32:57.644 
那就不要進行任何對齊

00:32:57.711 --> 00:32:59.079 
如果你得到了
對齊反饋令牌

00:32:59.413 --> 00:33:01.782 
在這個例子中 在你的
數據模型中改變X位置

00:33:02.015 --> 00:33:04.484 
改變爲對齊位置
留住那個

00:33:04.551 --> 00:33:05.719 
對齊反饋令牌

00:33:06.653 --> 00:33:09.256 
然後你也可以校驗
縱向運動

00:33:09.323 --> 00:33:11.525 
除了你要發送你的Y值
代替你的X

00:33:11.825 --> 00:33:14.394 
你還是可能得到 或者得不到
對齊反饋令牌

00:33:14.962 --> 00:33:17.064 
如果你得到兩個
對齊反饋令牌 你就需要

00:33:17.130 --> 00:33:19.466 
在兩個軸線中對齊
這樣你的對象就會

00:33:19.533 --> 00:33:21.168 
到下面角落這裏

00:33:22.903 --> 00:33:25.138 
有時候
這個並不經常發生

00:33:25.205 --> 00:33:28.141 
但是如果它同時在
X軸和Y軸對齊

00:33:28.709 --> 00:33:32.446 
你只想對齊到一個位置
它要麼對齊

00:33:32.713 --> 00:33:35.749 
兩個軸
要麼哪個軸都不對齊

00:33:35.983 --> 00:33:39.186 
此時我們有運動的
對齊反饋令牌

00:33:39.253 --> 00:33:42.122 
你越過點
而不是一個個體X座標

00:33:42.189 --> 00:33:44.758 
或者Y座標
兩者都可以

00:33:44.825 --> 00:33:49.263 
你可能得到 也可能得不到
對齊反饋令牌

00:33:49.930 --> 00:33:53.867 
你對拖拽的各種項目
進行迭代 這樣它們

00:33:53.934 --> 00:33:56.203 
可以對齊
你拿回你的對齊反饋令牌

00:33:56.270 --> 00:33:59.139 
如果發生對齊
你就改變你的數據模型

00:33:59.673 --> 00:34:02.276 
現在你有了
一系列令牌

00:34:02.776 --> 00:34:04.344 
你想要給使用新
Force Touch trackpad的

00:34:04.411 --> 00:34:06.313 
用戶提供
觸覺反饋

00:34:07.281 --> 00:34:09.583 
我們會使用對齊反饋過濾器
來幫助我們這樣做

00:34:09.650 --> 00:34:11.418 
我們會讓對齊反饋過濾器
在執行時間來

00:34:11.485 --> 00:34:13.152 
執行
反饋

00:34:13.620 --> 00:34:15.621 
現在執行時間
先使用默認值

00:34:15.688 --> 00:34:17.991 
我們稍後會
再講一講執行時間

00:34:18.824 --> 00:34:20.860 
然後你給陣列傳遞
一個反饋令牌

00:34:21.027 --> 00:34:23.330 
如果沒有對齊 你甚至可以
傳遞一個空的陣列

00:34:23.597 --> 00:34:26.166 
對齊反饋過濾器
在這方面很健壯

00:34:26.233 --> 00:34:27.734 
它知道什麼都不用做

00:34:28.502 --> 00:34:30.103 
然後你設置你的視圖
爲需要顯示

00:34:30.469 --> 00:34:35.141 
無論什麼時候要求
你就重新繪製 如果你

00:34:35.208 --> 00:34:37.244 
有令牌 你就知道你
何時在重新繪製

00:34:37.311 --> 00:34:41.215 
如果對你的UI合適的話
繪製對齊指導

00:34:41.581 --> 00:34:43.784 
然後反饋就會同步
和屏幕改變執行

00:34:43.851 --> 00:34:46.453 
用戶就可以
有一個漂亮的

00:34:46.520 --> 00:34:49.188 
同步
看到對齊指導彈出

00:34:49.389 --> 00:34:50.524 
他們也同時從trackpad上
感受到

00:34:50.591 --> 00:34:53.193 
觸覺
反饋

00:34:53.327 --> 00:34:56.864 
如果用戶用的不是Force
Touch trackpad 對齊

00:34:56.929 --> 00:34:59.032 
反饋過濾器也知道
應該如何工作

00:34:59.333 --> 00:35:01.668 
所以你只需要假設是
Force Touch trackpad

00:35:01.735 --> 00:35:02.936 
你只需要寫就可以了

00:35:03.003 --> 00:35:04.938 
如果不是
那就沒問題

00:35:07.441 --> 00:35:09.009 
所以 實際上

00:35:09.142 --> 00:35:10.811 
就是使用對齊
反饋過濾器

00:35:11.011 --> 00:35:13.113 
它們非常簡單的API
添加到你的應用程序

00:35:13.180 --> 00:35:15.716 
和現有的跟蹤迴路中
很容易

00:35:16.083 --> 00:35:17.551 
讓整個app提供
一致的風格

00:35:17.784 --> 00:35:20.854 
比如 我們看看
光標的速度

00:35:21.088 --> 00:35:23.624 
因此如果用戶移動的很快
我們就不對齊

00:35:23.690 --> 00:35:25.092 
因爲我們不想在那個時候

00:35:25.158 --> 00:35:26.393 
進行
對齊

00:35:26.960 --> 00:35:28.562 
那不是
用戶想要做的

00:35:28.996 --> 00:35:30.464 
我們來看修改值

00:35:30.831 --> 00:35:32.633 
這會給所有使用系統寬度
對齊反饋API

00:35:32.699 --> 00:35:35.302 
的應用程序
提供

00:35:35.369 --> 00:35:36.436 
一致的風格

00:35:36.970 --> 00:35:39.740 
你就可以用它
不僅僅是拖拽一個項目

00:35:40.107 --> 00:35:42.509 
如果你重新調整尺寸
比如說 或者自動調整

00:35:42.676 --> 00:35:44.778 
那就非常適合用
對齊反饋過濾器

00:35:45.179 --> 00:35:47.581 
它可以用在
很多不同的地方

00:35:49.149 --> 00:35:50.617 
要成爲一名“騎士”
你需要了解的就這些

00:35:50.684 --> 00:35:51.518 
恭喜

00:35:51.585 --> 00:35:53.020 
你們現在都是使用

00:35:53.086 --> 00:35:54.488 
Force Touch trackpad
的“騎士”了

00:35:55.055 --> 00:35:56.990 
我們來繼續成爲
“大師”

00:35:57.491 --> 00:35:59.092 
都是關於
力的控制

00:35:59.560 --> 00:36:01.261 
是關於對trackpad
進行配置

00:36:01.328 --> 00:36:04.531 
這樣它就能適用於
你的定製情景

00:36:04.731 --> 00:36:06.366 
手動提供
觸覺反饋

00:36:09.770 --> 00:36:11.605 
我們再回到
繪圖這個例子

00:36:12.773 --> 00:36:15.642 
你開始繪圖 你按壓Force
Touch trackpad

00:36:15.709 --> 00:36:17.110 
你得到了
Force click

00:36:17.177 --> 00:36:19.146 
但是它並不真的
適用於你的繪圖

00:36:19.213 --> 00:36:20.814 
就像我之前提到的
你不希望嘗試合併

00:36:20.881 --> 00:36:23.183 
階段一的壓力值
和階段二的壓力值

00:36:23.250 --> 00:36:25.586 
合併 甚至在釋放時
也不行

00:36:25.652 --> 00:36:27.788 
這樣
用戶就會在繪圖過程中

00:36:27.855 --> 00:36:29.656 
得到觸覺反饋
這種經歷

00:36:29.723 --> 00:36:31.325 
可不妙

00:36:31.992 --> 00:36:33.393 
因此我們想要對trackpad
進行配置

00:36:33.460 --> 00:36:37.965 
讓它在這個例子中不提供一點Forc
e click動作

00:36:38.031 --> 00:36:40.400 
我們能用壓力配置對象
做的 就是這個

00:36:40.467 --> 00:36:42.903 
我們先用一個
pressureBehavior開始

00:36:43.370 --> 00:36:45.706 
校驗下頭部文檔
和資料

00:36:45.772 --> 00:36:49.042 
校驗NSEvent.h
頭部文檔中對每個

00:36:49.109 --> 00:36:50.511 
都有
大量的描述

00:36:50.577 --> 00:36:51.845 
我不會每個都講

00:36:51.945 --> 00:36:54.581 
默認的是DeepClick
這是系統

00:36:54.648 --> 00:36:55.549 
發生的

00:36:55.616 --> 00:36:57.518 
在這個例子中 我們想要
PrimaryGeneric

00:36:57.951 --> 00:37:00.454 
PrimaryGeneric是個階
段一手勢

00:37:00.787 --> 00:37:03.323 
因此當用戶在繪製時
他們就不會得到

00:37:03.390 --> 00:37:04.791 
Force click動作

00:37:04.858 --> 00:37:08.629 
給用戶提供了在他們的
trackpad上輸入力的

00:37:08.695 --> 00:37:11.532 
最大的動態範圍
把它向你映射回去

00:37:11.598 --> 00:37:12.966 
映射到零到一的壓力

00:37:13.267 --> 00:37:15.636 
最適合繪圖
以及其它多個

00:37:15.702 --> 00:37:18.305 
情景
校驗頭部文檔

00:37:18.372 --> 00:37:21.341 
看看其它行爲描述
看看

00:37:21.408 --> 00:37:22.976 
哪個適合
你的情景

00:37:24.578 --> 00:37:25.913 
一旦你完成壓力
配置後

00:37:25.979 --> 00:37:26.880 
你就可以調用設置

00:37:26.947 --> 00:37:29.516 
trackpad現在在新的配置中
配置好了

00:37:29.883 --> 00:37:32.553 
一切都很好
有了一些畫布

00:37:33.220 --> 00:37:34.788 
在鼠標拖拽時 你可以

00:37:34.855 --> 00:37:37.791 
僅僅把trackpad設置成
一個不同的配置

00:37:37.958 --> 00:37:39.993 
在鼠標上移中 你對
鼠標的位置進行校驗

00:37:40.060 --> 00:37:41.328 
如果這個特定的

00:37:41.395 --> 00:37:42.729 
鼠標位置
需要改變

00:37:43.530 --> 00:37:45.566 
創建一個壓力配置
調用設置

00:37:45.632 --> 00:37:47.034 
trackpad就會
做出改變

00:37:47.901 --> 00:37:50.571 
你需要意識到
此時你在和用戶競賽

00:37:51.305 --> 00:37:55.676 
用戶可能使用光標
翻過你的視圖 立即進行

00:37:55.742 --> 00:37:57.311 
Force click 釋放鼠標
而你甚至

00:37:57.377 --> 00:37:58.879 
還沒有
下移鼠標

00:37:58.979 --> 00:38:01.949 
也許你被從虛擬內存中
置入分頁

00:38:02.015 --> 00:38:03.684 
你的app失去響應了

00:38:04.318 --> 00:38:07.321 
你可以試着設置壓力
此時的trackpad配置

00:38:07.387 --> 00:38:10.757 
但是用戶已經
完成了他們的手勢

00:38:11.024 --> 00:38:12.092 
手勢不會生效

00:38:12.659 --> 00:38:16.029 
當你設置trackpad配置時
它會自動重置爲

00:38:16.830 --> 00:38:19.266 
系統默認值
用戶也會同時

00:38:19.333 --> 00:38:21.468 
結束手勢
因此你不需要擔心

00:38:21.535 --> 00:38:22.769 
對它復原

00:38:23.270 --> 00:38:26.440 
但是對多數情況來說
這不夠理想 當你需要

00:38:26.507 --> 00:38:30.043 
根據鼠標位置 在最後一分鐘
決定

00:38:30.110 --> 00:38:32.346 
配置應該是什麼時
這很有用

00:38:33.013 --> 00:38:37.518 
而不是在NSView上設置
壓力配置

00:38:38.352 --> 00:38:40.220 
提前創建一個
壓力配置

00:38:40.420 --> 00:38:42.022 
在NSView上把它設置爲
壓力配置屬性

00:38:42.089 --> 00:38:44.291 
系統就會在
鼠標下移發生之前

00:38:44.358 --> 00:38:46.326 
設置好
trackpad

00:38:46.393 --> 00:38:48.695 
事實上 系統可以給
trackpad配置爲這種配置

00:38:48.762 --> 00:38:50.697 
即使你的app

00:38:50.764 --> 00:38:52.566 
失去了
響應

00:38:53.100 --> 00:38:56.370 
現在用戶就可以繼續
和你的應用程序交互了

00:38:56.436 --> 00:38:57.804 
你甚至還沒有完成
鼠標下移

00:38:57.871 --> 00:38:59.039 
但是他們沒有
感受到Force click

00:38:59.106 --> 00:39:01.842 
因爲它位於
PrimaryGeneric行爲

00:39:01.909 --> 00:39:04.011 
以及你從應用程序中
得到的事件

00:39:04.077 --> 00:39:06.547 
當你最終得到你的事件
此時從系統中

00:39:07.080 --> 00:39:08.415 
獲得
如果

00:39:08.482 --> 00:39:12.019 
你失去了響應 不要在它們裏面
進行Force click

00:39:12.085 --> 00:39:13.754 
它們不會到階段二

00:39:13.820 --> 00:39:16.390 
我們再來講講
觸覺反饋

00:39:18.192 --> 00:39:20.360 
觸覺反饋應該
保守使用

00:39:20.727 --> 00:39:21.995 
它們是用於微妙的交互

00:39:22.062 --> 00:39:24.164 
我們想讓trackpad感覺很奇妙
不是嗎？

00:39:25.165 --> 00:39:26.633 
當用戶想要
對齊某些東西時

00:39:26.700 --> 00:39:28.535 
它們會得到觸覺反饋
感覺很棒

00:39:28.602 --> 00:39:30.671 
但是我們不是想在這裏
按摩用戶的指頭

00:39:31.004 --> 00:39:33.040 
我們只是想進行
微妙的交互

00:39:33.874 --> 00:39:37.044 
事實上 如果用戶
用回我們的老款

00:39:37.110 --> 00:39:38.846 
trackpads
我們希望他們根本

00:39:38.912 --> 00:39:41.281 
意識不到 雖然設備換了
但是卻

00:39:41.348 --> 00:39:42.916 
基本
感覺不到

00:39:43.383 --> 00:39:47.521 
使用觸覺反饋的
意義就在這裏

00:39:47.754 --> 00:39:49.990 
正確使用的話
當用戶試圖做一些事情

00:39:50.057 --> 00:39:52.259 
的時候
給他們一點微妙的反饋

00:39:52.426 --> 00:39:53.827 
是的 就這樣

00:39:53.894 --> 00:39:55.195 
它就應該
一直是這樣

00:39:55.262 --> 00:39:56.129 
我都不知道

00:39:56.697 --> 00:39:57.598 
微妙的交互

00:39:58.065 --> 00:39:59.266 
你爲defaultPerformer
請求了

00:39:59.333 --> 00:40:00.901 
NSHaptic
FeedbackManager

00:40:00.968 --> 00:40:03.003 
始終請求
defaultPerformer

00:40:03.070 --> 00:40:05.839 
因爲它可以根據輸入
設備以及用戶的偏好

00:40:06.240 --> 00:40:09.510 
進行改變

00:40:10.143 --> 00:40:12.079 
在某個特定的運行時間
你要求執行反饋模式

00:40:12.145 --> 00:40:14.481 
我們
有三個

00:40:14.848 --> 00:40:17.584 
模式：“通用”“對齊”
以及“LevelChange”

00:40:17.651 --> 00:40:19.386 
對齊可以用於
很多事情

00:40:19.887 --> 00:40:23.824 
即使你只是旋轉一幅
照片進行水平對齊

00:40:23.891 --> 00:40:26.193 
打個比方 你也可以
爲它使用對齊

00:40:26.560 --> 00:40:30.163 
“LevelChange”就是NS
Button在不同的多次方式中用的

00:40:30.230 --> 00:40:32.599 
當層級改變時
它會提供觸覺反饋

00:40:33.300 --> 00:40:35.802 
如果那兩項對你試圖
做的事情描述的不夠充分

00:40:35.869 --> 00:40:37.905 
那就使用
“通用”

00:40:39.072 --> 00:40:42.109 
你想讓你的觸覺反饋
與屏幕上進行的事物

00:40:42.176 --> 00:40:44.178 
同步執行
那麼默認的

00:40:44.244 --> 00:40:45.746 
就是
DrawCompleted

00:40:45.812 --> 00:40:47.614 
如果你用Cocoa繪畫
或者用核心動畫

00:40:47.881 --> 00:40:50.851 
你就用DrawCompleted
執行時間

00:40:50.984 --> 00:40:53.987 
這個會自動把它們
爲你同步起來

00:40:54.054 --> 00:40:57.024 
這樣在事件進程中 繪畫中
你就能確定你的觸覺反饋

00:40:57.090 --> 00:40:59.826 
你就可以僅僅
關注繪畫

00:41:00.294 --> 00:41:02.396 
如果你直接用Medal
或者OpenGL

00:41:02.663 --> 00:41:05.832 
那就可以用“現在”
當事情在屏幕上更新時

00:41:06.133 --> 00:41:09.269 
你需要確保你排列了它們
這樣

00:41:09.336 --> 00:41:10.971 
它們可以同時
發生

00:41:12.139 --> 00:41:13.307 
就是這些

00:41:13.373 --> 00:41:14.508 
你們現在都是使用

00:41:14.575 --> 00:41:16.276 
Force Touch
trackpad的“大師”了

00:41:16.343 --> 00:41:18.312 
我迫不及待
想看看你們在你們的

00:41:18.378 --> 00:41:20.914 
應用程序中運用這些東西
我們講了“表格行動作”

00:41:20.981 --> 00:41:24.318 
加速按鈕 彈性加載
我們講了力在

00:41:24.518 --> 00:41:26.520 
系統中的
流動

00:41:26.753 --> 00:41:29.723 
進行對齊反饋
最後是控制trackpad

00:41:29.790 --> 00:41:32.192 
爲你的特定需求配置
trackpad

00:41:32.626 --> 00:41:34.228 
你能做的事情很多

00:41:35.796 --> 00:41:37.631 
剛纔在我的
演示中的小app

00:41:37.698 --> 00:41:39.032 
叫做Force Touch
Catalog

00:41:39.099 --> 00:41:40.601 
你可以下載後
看一看

00:41:40.667 --> 00:41:43.237 
我們也有對齊指導
樣例應用程序

00:41:43.303 --> 00:41:44.805 
把它們用起來
也確實有用

00:41:46.773 --> 00:41:49.109 
我建議你們看看
“WebKit和Safari中的

00:41:49.176 --> 00:41:50.811 
網站開發
有什麼新料”

00:41:50.878 --> 00:41:54.615 
這樣你就可以瞭解Safari
在網站環境中

00:41:54.681 --> 00:41:58.252 
是如何承擔壓力的

00:41:59.586 --> 00:42:02.723 
這之後我們會有個實驗室

00:42:02.789 --> 00:42:04.825 
“Cocoa
和Force Touch 手勢”

00:42:04.892 --> 00:42:06.226 
實驗室 我當然也會到場

00:42:06.426 --> 00:42:08.862 
我十分樂意傾聽
你們就如何在你們的

00:42:08.929 --> 00:42:11.965 
應用程序中使用Force
Touch的想法 你們甚至可以給我

00:42:12.032 --> 00:42:14.668 
展示下你們已經完成的東西
我會十分樂意觀看

00:42:14.735 --> 00:42:15.602 
並且和你們討論

00:42:15.669 --> 00:42:18.038 
會議結束後請到
實驗室找我

00:42:18.739 --> 00:42:20.774 
非常感謝
祝你們剩餘的時間過得愉快