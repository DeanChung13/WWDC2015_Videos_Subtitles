00:00:19.319 --> 00:00:24.391 
從iPad iOS 9的多任務開始

00:00:25.158 --> 00:00:27.394 
今天我很高興能在這裏

00:00:27.995 --> 00:00:30.964 
爲您介紹iPad上的多任務執行

00:00:32.064 --> 00:00:36.003 
我的名字是彼得·哈加斯
我是一名UIKit的框架工程師

00:00:36.904 --> 00:00:39.540 
待會兒我的同事會加入我們

00:00:40.040 --> 00:00:42.342 
他們是雅各布·肖和庫爾特·雷維斯

00:00:42.576 --> 00:00:45.612 
所以您可以看到
UIKit的這次演說也是“多任務”

00:00:47.447 --> 00:00:49.783 
多任務執行是一個巨大的功能

00:00:50.384 --> 00:00:52.953 
所以我們把它分成三部分來介紹

00:00:53.453 --> 00:00:54.655 
這是第一部分

00:00:56.056 --> 00:00:57.057 
明天下午您可以聽到

00:00:57.391 --> 00:01:03.463 
我們帶給iPad和iOS 9的
所有偉大且全新的媒體功能介紹

00:01:04.063 --> 00:01:06.466 
並能瞭解
picture-in-picture視頻

00:01:07.000 --> 00:01:11.638 
以及在多任務執行時app如何與其它
app一起使用攝像頭

00:01:12.873 --> 00:01:16.844 
明天下午之後還有一個關於您的app
非常棒的講座

00:01:17.377 --> 00:01:22.916 
在與其它app一起在iPad上
執行多任務時如何成爲傑出的“公民”

00:01:23.483 --> 00:01:27.054 
我非常推薦您明天去這兩場講座都去聽

00:01:30.157 --> 00:01:33.660 
今天我們要討論三個主題

00:01:35.028 --> 00:01:38.165 
第一 在您的app上的多任務執行

00:01:39.066 --> 00:01:39.933 
是什麼

00:01:40.534 --> 00:01:43.403 
您爲什麼要採用它
您如何採用它

00:01:44.071 --> 00:01:46.206 
以及在UIKit的層面上
它意味着什麼？

00:01:47.674 --> 00:01:51.512 
第二 我們對UIKit做出的改變

00:01:52.312 --> 00:01:55.816 
它讓您使用多任務執行變得非常簡單

00:01:57.184 --> 00:02:02.122 
第三是做出了
最新的也最棒的UIKit API

00:02:02.556 --> 00:02:06.293 
來確保您的app在多任務執行時
能真正出彩

00:02:06.827 --> 00:02:07.761 
讓我們開始吧

00:02:12.766 --> 00:02:14.268 
正如您在Keynote上看到的

00:02:14.368 --> 00:02:18.705 
多任務執行爲iPad用戶
帶來了一種很棒的新體驗

00:02:20.174 --> 00:02:22.009 
他們可以做一件自己喜歡的事情

00:02:22.209 --> 00:02:23.410 
比如瀏覽網頁

00:02:24.144 --> 00:02:27.581 
然後從右側滑入
來與另一個app進行交互

00:02:29.183 --> 00:02:32.653 
我們把這種模式
叫作“slide over”

00:02:41.962 --> 00:02:46.533 
然後用戶可以把
分配器滑動到屏幕的左側

00:02:47.234 --> 00:02:49.870 
在上方點擊以並排顯示app

00:02:51.238 --> 00:02:52.639 
如您在Keynote上看到的

00:02:52.706 --> 00:02:55.375 
我們把這種模式
叫作“Split View”

00:02:56.810 --> 00:02:58.679 
鑑於你們都是iOS開發者

00:02:58.979 --> 00:03:00.581 
我敢肯定你們都非常熟悉

00:03:00.647 --> 00:03:03.450 
我們的UI Splitview Controller API

00:03:04.151 --> 00:03:05.219 
我可以肯定地告訴您

00:03:05.285 --> 00:03:07.321 
它跟Split View
是完全不同的

00:03:10.290 --> 00:03:13.360 
用戶可以拖動兩個應用程序
之間的分配器

00:03:14.361 --> 00:03:18.098 
並調整它們的大小以獲取一個
50/50Split View界面

00:03:25.405 --> 00:03:28.642 
然後他們就可以保留分配器
並持續拖動到左側

00:03:29.376 --> 00:03:30.911 
來使用邊上這個app

00:03:31.144 --> 00:03:34.414 
在這個案例裏 全屏顯示的是地圖

00:03:36.016 --> 00:03:38.619 
然後他們可能會選擇滑入另一個app

00:03:38.919 --> 00:03:41.121 
或再次從側面滑入同一個app

00:03:42.523 --> 00:03:45.592 
通過iPad上iOS 9的
多任務執行

00:03:46.193 --> 00:03:48.829 
用戶掌控他們的體驗

00:03:49.563 --> 00:03:53.634 
掌控運行中的app以及其運行大小

00:03:55.369 --> 00:04:00.908 
iPad和iOS9的多任務執行
還有一個很酷的特徵

00:04:01.775 --> 00:04:04.511 
就是
picture-in-picture視頻

00:04:05.646 --> 00:04:10.083 
關於這個您都可以在明天的
媒體多任務執行講座中聽到

00:04:11.552 --> 00:04:18.257 
今天我們要解釋您的app如何使用
split view和slide over

00:04:19.726 --> 00:04:21.995 
爲了瞭解如何使用它們

00:04:22.429 --> 00:04:23.864 
我們有必要先講一講

00:04:24.264 --> 00:04:27.801 
在UIKit app中
正變得越來越重要的一樣東西

00:04:28.669 --> 00:04:30.470 
以及它的適應性

00:04:38.145 --> 00:04:42.649 
在過去 我們曾經鼓勵您
把您的app做成普遍通用的

00:04:43.350 --> 00:04:47.855 
這意味着相同的app可以
在iPhone和iPad上運行

00:04:49.857 --> 00:04:52.860 
去年我們介紹給您一個簡單的方法

00:04:53.393 --> 00:04:57.698 
來查看您應該向您的用戶
提供什麼類型的界面

00:04:59.066 --> 00:05:02.769 
通過介紹水平尺寸等級

00:05:05.372 --> 00:05:10.878 
去年 iPhone豎直時
擁有緊湊的水平尺寸

00:05:12.112 --> 00:05:16.083 
它們按傳統方式顯示
一個單列的內容

00:05:17.618 --> 00:05:21.555 
而iPad擁有常規的水平尺寸

00:05:22.656 --> 00:05:26.059 
許多蘋果本身的系統app都以此指示

00:05:26.126 --> 00:05:28.896 
它們應該顯示多列內容

00:05:30.163 --> 00:05:33.767 
並更改呈現給用戶的信息格式

00:05:36.637 --> 00:05:40.207 
另外 在去年的全球研發大會上

00:05:40.974 --> 00:05:44.611 
這個設置在橫向時也是適用的

00:05:45.812 --> 00:05:47.981 
iPhone用緊湊的水平尺寸

00:05:48.582 --> 00:05:51.218 
iPad用常規的水平尺寸

00:05:52.853 --> 00:05:56.323 
那就是去年的全球研發大會

00:05:58.158 --> 00:05:59.726 
但是如果您仔細觀察

00:05:59.960 --> 00:06:04.698 
去年還有一個很明顯的消息
如果您用顯微鏡看的話

00:06:05.465 --> 00:06:09.069 
我們當時在提示您
爲iPhone 6+做好準備

00:06:11.772 --> 00:06:13.707 
就像我們現有的iPhone手機一樣

00:06:14.241 --> 00:06:18.512 
iPhone 6+也有緊湊的
水平尺寸

00:06:20.214 --> 00:06:22.015 
但是當旋轉爲橫向時

00:06:23.016 --> 00:06:26.053 
它就是常規的水平尺寸了

00:06:27.020 --> 00:06:32.726 
這是第一次一個app在運行時
就可以有不同的尺寸

00:06:34.428 --> 00:06:36.563 
我們就那樣來到了今年

00:06:38.165 --> 00:06:40.968 
同樣的 如果您接受了今年的邀請

00:06:41.502 --> 00:06:43.036 
然後畫了線條並且旋轉它

00:06:43.103 --> 00:06:45.806 
你知道在邏輯上來說這是合理的
它就形成了一個“P”

00:06:46.139 --> 00:06:48.509 
“iPad的多任務執行”中的
這個“P”字

00:06:48.976 --> 00:06:49.977 
顯而易見

00:06:56.316 --> 00:06:57.150 
謝謝

00:06:57.751 --> 00:07:01.388 
那麼iPad的多任務執行如何與適應
性達到協調呢？

00:07:03.323 --> 00:07:06.026 
讓我們舉一個
slide over app的例子

00:07:07.694 --> 00:07:10.230 
用戶從右側顯示屏滑過

00:07:11.798 --> 00:07:16.036 
app以緊湊的水平尺寸出現

00:07:17.204 --> 00:07:21.675 
這顯示了我們通常擁有的
iPhone體驗

00:07:23.177 --> 00:07:26.647 
接着用戶可能會選擇
把他們的app調整爲全屏顯示

00:07:27.147 --> 00:07:31.218 
這樣它會就變成常規的橫向尺寸

00:07:31.652 --> 00:07:34.388 
並顯示它傳統的
iPad UI

00:07:35.622 --> 00:07:39.960 
兩個以前從不可能在iPad上
發生的事情 現在發生了

00:07:41.061 --> 00:07:46.767 
首先
app開始以緊湊的水平尺寸類顯示

00:07:47.301 --> 00:07:49.970 
這在以前的iPad上是完全不可能的

00:07:51.004 --> 00:07:55.776 
第二 當用戶調整它時
app的尺寸級別也產生改變

00:07:56.276 --> 00:07:59.279 
這也是全新的iOS 9功能

00:08:06.520 --> 00:08:09.890 
所以 這爲您的app
和您的用戶帶來了什麼？

00:08:10.991 --> 00:08:13.393 
讓我們從這些用戶的觀點來看看

00:08:15.395 --> 00:08:21.468 
他們可以瀏覽網絡並與iPad上他們
喜愛的另一個app進行交互

00:08:22.703 --> 00:08:24.037 
因此 他們會從右側滑入

00:08:24.438 --> 00:08:27.774 
他們會想在這個列表中看到app

00:08:30.511 --> 00:08:35.249 
通過在您的app採用多任務執行
在iPad和iOS 9中

00:08:36.216 --> 00:08:39.019 
您可以讓用戶更頻繁地進入您的app

00:08:40.020 --> 00:08:45.559 
在使用其他喜歡的iPad app時
花更多的時間在您的app上

00:08:46.393 --> 00:08:50.197 
並以您可能從來沒有想象過的
全新的方式

00:08:50.597 --> 00:08:52.566 
與其他的app一起使用您的app

00:08:53.667 --> 00:08:58.505 
用戶會希望所有在他們的iPad上的
app都支持多任務執行

00:08:59.006 --> 00:09:01.008 
而我們就在這裏幫您採用它

00:09:02.409 --> 00:09:07.181 
讓我們來看看 添加多任務執行到您的
iOS app有多麼容易

00:09:08.182 --> 00:09:10.717 
我有好消息告訴大家
這真的很簡單

00:09:11.818 --> 00:09:14.588 
您所需要做的就是
使用Xcode7測試版

00:09:15.689 --> 00:09:17.357 
並創建一個新的項目

00:09:18.192 --> 00:09:20.527 
所有用Xcode 7創建的新項目

00:09:20.861 --> 00:09:23.697 
都默認啓用iPad多任務程序

00:09:24.264 --> 00:09:26.934 
而且您所寫的所有代碼
都會在多任務執行中運行

00:09:27.234 --> 00:09:28.936 
僅此而已
就只是做一個新項目

00:09:31.238 --> 00:09:34.975 
現在就在這場講座之前
臺下的一些我的同事提醒我

00:09:35.042 --> 00:09:38.946 
有一兩個現有的app可以
選擇採用多任務執行

00:09:39.680 --> 00:09:42.182 
而對於這些app也很簡單

00:09:42.583 --> 00:09:45.118 
您只需要按照
三個簡單的步驟來做

00:09:47.020 --> 00:09:50.891 
首先 使用iOS 9 SDK
創建您的app

00:09:51.592 --> 00:09:55.028 
您可以在Xcode的構建設置裏
這麼做

00:09:57.097 --> 00:10:02.936 
其次
支持全方位app的iPad版本

00:10:04.771 --> 00:10:07.875 
在去年的會議上我們鼓勵您去思考

00:10:08.008 --> 00:10:11.912 
隨着簡單界限大小的變換環境如何變化

00:10:12.513 --> 00:10:15.048 
而這個建議也將保持在iOS 9中

00:10:16.216 --> 00:10:20.387 
因爲一個多重任務的大小調整
只是一個範圍的大小變化

00:10:21.822 --> 00:10:27.394 
但是 因爲用戶掌控着
他們手裏的iPad的環境

00:10:27.728 --> 00:10:33.267 
在多重任務裏您的iPad app要
支持所有的環境是非常重要的

00:10:35.469 --> 00:10:40.440 
最後
第三樣您需要做的是使用啓動記事板

00:10:41.775 --> 00:10:45.512 
去年介紹的
啓動記事板對您來說是一個偉大的程式

00:10:45.579 --> 00:10:48.015 
它幫您的app明確
一個記事板的啓用外觀

00:10:48.482 --> 00:10:50.384 
這個外觀適用於iOS支持的

00:10:50.918 --> 00:10:57.024 
所有大小 配置 方位 裝置

00:10:58.492 --> 00:11:01.862 
在iPad的多重任務
所支持多種不同的尺寸下

00:11:02.429 --> 00:11:05.599 
使用啓動記事板是
將其加入的一個必要條件

00:11:07.167 --> 00:11:08.302 
其中一個要點是

00:11:09.069 --> 00:11:11.738 
如果您的app需要一個全屏的體驗

00:11:12.172 --> 00:11:15.843 
您可以在您的信息欄中
使用UI全屏按鍵

00:11:16.243 --> 00:11:17.444 
選擇退出

00:11:25.452 --> 00:11:27.888 
現在我們已經知道用您現有的項目

00:11:28.188 --> 00:11:31.758 
創建或添加一個新的多任務執行項目
是多麼簡單

00:11:32.492 --> 00:11:35.762 
讓我們看看它在您的ipad
和UIKit級別上是如何運作的

00:11:36.330 --> 00:11:39.032 
有一些非常重要的變化
是您應該注意的

00:11:40.934 --> 00:11:44.838 
在過去 UI屏幕邊界會返回

00:11:45.205 --> 00:11:48.675 
裝置整個展示的可視範圍

00:11:49.710 --> 00:11:51.778 
這也發生在iOS 9上

00:11:53.080 --> 00:11:59.186 
無論您的app正在全屏操作
或在多重任務中被重新調整了尺寸

00:12:00.521 --> 00:12:04.591 
一個真正重要的改變是
該UI窗口邊界

00:12:04.825 --> 00:12:06.760 
好吧
它返回您的窗口邊界

00:12:07.528 --> 00:12:12.866 
但是您的窗口邊界不總是
與該設置的屏幕邊界相同

00:12:13.433 --> 00:12:17.104 
例如 當您的app
在多任務執行中被調整大小

00:12:18.539 --> 00:12:20.174 
另一個重要改變是

00:12:20.674 --> 00:12:25.779 
您的窗口框架原點總是在左上角

00:12:26.246 --> 00:12:27.114 
（0,0）

00:12:27.714 --> 00:12:30.417 
<br/>
不管您在屏幕的左側運行

00:12:32.319 --> 00:12:33.720 
還是在右側運行

00:12:34.988 --> 00:12:39.593 
我們不希望您擔心
您在屏幕的哪一邊運行

00:12:39.660 --> 00:12:41.628 
或者
您正在運行其他哪些程序等等

00:12:42.095 --> 00:12:45.666 
我們只希望您關注您的app使用體驗

00:12:48.035 --> 00:12:50.704 
現在讓我們來談談
在您的app被調整的時候

00:12:51.238 --> 00:12:54.341 
哪些不同類型的轉移可以發生

00:12:55.175 --> 00:12:59.680 
舉個例子 在iOS9中完美表現
多任務執行的app

00:13:00.480 --> 00:13:02.282 
全新的Notes app

00:13:03.617 --> 00:13:05.419 
這是在iPad上
新的Notes app

00:13:05.485 --> 00:13:08.121 
作爲一個slide over
app在運行

00:13:09.356 --> 00:13:12.860 
您會發現它看起來很像
iPhone的Notes app

00:13:13.994 --> 00:13:16.396 
它顯示單列的UI

00:13:18.031 --> 00:13:22.769 
我們稱之爲橫向尺寸緊湊級

00:13:24.571 --> 00:13:27.207 
隨後 用戶可能會調整我們的app

00:13:28.375 --> 00:13:35.182 
而在某一點我們會改變哪個級別的體驗
是我們需要提供給用戶的

00:13:37.117 --> 00:13:40.888 
請注意
現在的Notes顯示兩列的內容

00:13:42.523 --> 00:13:47.694 
這是相同的常規水平尺寸
就如我們之前看到的那樣

00:13:50.831 --> 00:13:54.735 
請留意註釋如何改變了
該app的信息架構

00:13:55.235 --> 00:13:59.473 
以在左側顯示您的注意列表
並在右側顯示一個註釋

00:14:00.374 --> 00:14:05.712 
這類型的變換
是您應該使用尺寸轉換來影響的

00:14:08.182 --> 00:14:11.151 
關於這轉換
有重要的一點需要注意

00:14:11.585 --> 00:14:15.522 
並不是所有的尺寸調整
都會導致尺寸變化

00:14:16.990 --> 00:14:22.129 
例如 如果Notes在iPad上以
split view運行

00:14:23.163 --> 00:14:25.265 
而用戶稍微調整了該app

00:14:26.767 --> 00:14:28.902 
這不會改變尺寸級別

00:14:30.137 --> 00:14:33.640 
它將仍然顯示一個單列UI

00:14:36.009 --> 00:14:38.111 
爲了不改變用戶體驗

00:14:39.146 --> 00:14:44.117 
Notes使用這個新尺寸來影響
其視圖的定位和排版

00:14:45.752 --> 00:14:48.422 
再看看
我們把app弄得稍微小了一點

00:14:49.223 --> 00:14:51.692 
仍然是單列UI

00:14:54.261 --> 00:14:58.098 
UIKit已對我們當前的API
作出了一些重要的變化

00:14:58.498 --> 00:15:00.701 
以使您的app更容易地採用它

00:15:02.002 --> 00:15:05.873 
我們鼓勵您使用的其中一種技術是
是自動排版

00:15:06.607 --> 00:15:10.310 
UIKit和AppKit的
聲明視圖佈局體系

00:15:11.845 --> 00:15:16.416 
自動佈局讓您
使用限制來定位您的觀點

00:15:17.084 --> 00:15:22.456 
然後當範圍更改時
自動排版將重新設置適當的中心和框架

00:15:22.890 --> 00:15:24.224 
這真的很容易使用

00:15:25.459 --> 00:15:31.031 
在新的iOS 9裏
我們增加了一些偉大的新限制便利

00:15:31.365 --> 00:15:34.301 
API創建自動排版限制
變得非常簡單

00:15:35.469 --> 00:15:39.640 
此外 如果您使用領先和尾部排版屬性

00:15:40.274 --> 00:15:44.311 
在您的app裏
您將得到很多從右到左的免費語言支持

00:15:53.120 --> 00:15:58.392 
我們看到的另一個
幫助app調整的重要領域

00:15:59.226 --> 00:16:01.161 
是以易讀性的形式呈現的

00:16:02.462 --> 00:16:05.566 
我們在UIView上引入新的API

00:16:06.233 --> 00:16:07.601 
“可讀性內容指南”

00:16:08.969 --> 00:16:11.171 
這將返回一個UI排版指南

00:16:11.672 --> 00:16:15.242 
它代表着一個UIView的可閱範圍

00:16:16.810 --> 00:16:22.182 
這意味着 如果您使用這個可讀性內容
指南定位您的觀點

00:16:22.449 --> 00:16:24.885 
它們將總是保持在可閱寬度內

00:16:25.619 --> 00:16:26.453 
舉個例子

00:16:28.055 --> 00:16:30.791 
在這個app示例中
我們採用了可閱性內容指南

00:16:31.625 --> 00:16:35.095 
視圖是全尺寸
它的尺寸是整個iPad

00:16:35.996 --> 00:16:39.600 
但可閱性內容指南
提供了足夠的間隔

00:16:40.167 --> 00:16:42.970 
以確保文字是
是很容易被閱讀的

00:16:45.005 --> 00:16:47.274 
可閱性內容指南的一個很大的特點

00:16:47.508 --> 00:16:49.576 
是會自動調整

00:16:49.977 --> 00:16:53.647 
這取決於當前app的尺寸級別和裝置

00:16:55.449 --> 00:16:57.951 
它與動態類型也配合地相當完美

00:16:58.252 --> 00:17:00.954 
這是我們鼓勵所有app採用的

00:17:02.155 --> 00:17:05.392 
您可以決定是否使用自動排版

00:17:07.361 --> 00:17:11.131 
許多iOS app中常見的組件
是UI表視圖

00:17:11.665 --> 00:17:14.968 
我們想讓可閱性在那裏也很容易被使用

00:17:16.002 --> 00:17:19.138 
所以我們在UI表視圖推出了新的工具

00:17:19.806 --> 00:17:23.010 
“可閱寬度決定單元排版間隔”

00:17:24.243 --> 00:17:26.012 
當此屬性設置爲是時

00:17:26.680 --> 00:17:31.151 
您的表視圖的單元內容外觀
將有排版的間隔

00:17:31.218 --> 00:17:34.988 
相對於那些邊距設定這樣的內容制定

00:17:35.556 --> 00:17:38.692 
是給用戶一個合適的可閱的寬度

00:17:40.327 --> 00:17:43.530 
這意味着 通過簡單地使用排版邊距

00:17:43.597 --> 00:17:46.099 
在您的UI表視圖的單元內容呈現中

00:17:47.167 --> 00:17:53.507 
其內容在您的單元中 會以一個合適的
寬度在iPad上全屏運行

00:17:55.742 --> 00:17:58.679 
或在一個
例如縱向iPhone的小屏幕上運行

00:18:00.581 --> 00:18:04.718 
現在 我們已經談到了多任務執行的
一些很大的改進

00:18:05.385 --> 00:18:08.522 
我想把它交給我的朋友兼同事雅各布肖

00:18:09.022 --> 00:18:13.460 
來談談UIKit裏什麼在改變以及
一些您的app應該遵循的最佳實踐

00:18:13.694 --> 00:18:14.528 
雅各布？

00:18:20.601 --> 00:18:21.435 
謝謝 彼得

00:18:22.936 --> 00:18:27.474 
我想告訴大家
一些爲了支持多任務執行的iOS改變

00:18:28.041 --> 00:18:31.979 
還有一些運作已變更的app的
最佳實踐

00:18:34.081 --> 00:18:34.915 
所以去年我們要求

00:18:35.582 --> 00:18:39.887 
您通過使用特徵和尺寸
讓您的app普遍通用

00:18:40.921 --> 00:18:42.589 
您可以看到更多的相關信息

00:18:42.990 --> 00:18:45.926 
呈現在“與UIKit創建普遍化應用
套件”去年的談論中

00:18:47.461 --> 00:18:51.431 
那麼現在iPad的多任務執行
就在這裏到底發生了什麼變化？

00:18:52.399 --> 00:18:54.434 
其實答案是沒有多少

00:18:55.536 --> 00:18:57.171 
僅此而已
請盡情享受這會談

00:18:59.773 --> 00:19:02.709 
好吧 所以有幾個重要的變更
是您必須要牢記的

00:19:03.076 --> 00:19:05.379 
這能給您的app一個很棒的
多任務執行體驗

00:19:05.812 --> 00:19:07.114 
讓我們來談談當中的一些要素

00:19:08.415 --> 00:19:09.950 
讓我們先從方位開始談起

00:19:11.485 --> 00:19:14.188 
你們有多少人的app代碼
看起來是這樣的？

00:19:15.055 --> 00:19:16.924 
沒關係
這是一個免判定區域

00:19:18.759 --> 00:19:20.727 
這種代碼在過去有很大的意義

00:19:21.995 --> 00:19:25.832 
它讓您的app在縱向或橫向時
有一個不同的排版

00:19:26.366 --> 00:19:29.336 
以便真正最佳地利用空間
這是您可以用到的

00:19:30.804 --> 00:19:34.408 
但是您要想想這如何運行於
iPad上的多任務執行

00:19:35.242 --> 00:19:38.912 
例如 這裏
雖然iPad本身就是橫向的

00:19:39.980 --> 00:19:42.716 
我們並不希望
在這裏使用橫向版本的排版

00:19:43.383 --> 00:19:45.485 
因爲我們有太多的垂直空間

00:19:46.220 --> 00:19:48.822 
這讓我們使用以前的排版更合理

00:19:48.889 --> 00:19:50.457 
我們稱那爲縱向排版

00:19:51.758 --> 00:19:57.364 
因此在多任務執行中最好避免過度考慮
尤其是關於界面方位要素的

00:19:58.198 --> 00:20:01.168 
讓我們來看看您可以怎麼做
來應對這種變化

00:20:02.603 --> 00:20:03.737 
爲了更好地理解這一點

00:20:04.204 --> 00:20:07.241 
讓我們來仔細看看
在旋轉過程中發生了什麼

00:20:08.208 --> 00:20:10.444 
首先讓我們來看看
一個iPhone的旋轉

00:20:11.712 --> 00:20:15.749 
當裝置旋轉時
您的app將被調整並與其一起旋轉

00:20:16.650 --> 00:20:20.487 
而實際上我們可以把這個轉化
分成兩部分

00:20:22.256 --> 00:20:25.759 
首先
您的app被調整成新的內容的尺寸

00:20:26.894 --> 00:20:29.863 
然後它實際上是旋轉了方向
其實只是用戶看到了正面

00:20:31.532 --> 00:20:35.936 
現在我們可以在iPad上做一些相似
的旋轉 包括多任務執行

00:20:37.070 --> 00:20:40.007 
再次 這是旋轉本身的樣子

00:20:40.941 --> 00:20:44.578 
我們首先可以將它拆開爲
首先是內容調整尺寸

00:20:46.246 --> 00:20:47.214 
然後是旋轉

00:20:48.949 --> 00:20:53.153 
現在當用戶在查看此旋轉時
這兩個變化將同時發生

00:20:53.754 --> 00:20:56.490 
但是不妨想想把
它們當作兩次獨立的變更

00:20:57.391 --> 00:20:59.026 
這樣做的一個很大的好處是

00:20:59.593 --> 00:21:02.429 
您確實可以用多任務執行的尺寸調整
共享很多東西

00:21:03.263 --> 00:21:05.032 
在這裏 相同的事情正在發生

00:21:05.399 --> 00:21:07.935 
只是尺寸調整部分而不包括旋轉

00:21:08.802 --> 00:21:10.370 
因此當用戶調整app時

00:21:11.738 --> 00:21:13.640 
它僅僅是一個內容邊界尺寸變化

00:21:15.242 --> 00:21:18.679 
因此在過去如果您使用的是界面方位

00:21:19.146 --> 00:21:24.151 
明確地說我會鼓勵您做而不是去思考您
該怎麼處理相關的視圖尺寸變化

00:21:24.618 --> 00:21:25.886 
針對於這類型的排版變更

00:21:26.854 --> 00:21:30.757 
另一個很好的選擇就是考慮
使用垂直或水平尺寸

00:21:31.625 --> 00:21:35.229 
不管用其中哪一種方法都能讓您的應用
程序非常契合地運行多任務執行

00:21:37.097 --> 00:21:39.399 
那麼接下來就讓我們一起來仔細看看

00:21:39.766 --> 00:21:42.169 
類似旋轉和多任務執行的
尺寸調整的轉變

00:21:43.804 --> 00:21:47.474 
以前我們有提及
您的應用程序的相關旋轉

00:21:48.942 --> 00:21:52.713 
但是這些回調都明確地運行
界面的方位變更

00:21:53.447 --> 00:21:56.817 
因此相對的
在iOS 8我們推出了新的相關回調

00:21:57.117 --> 00:21:59.853 
以針對特性組合或視圖尺寸的變化

00:22:00.621 --> 00:22:02.589 
我們強烈鼓勵您使用這些

00:22:03.991 --> 00:22:07.861 
現在爲了更好地瞭解
這類旋轉轉移的發生

00:22:08.262 --> 00:22:11.832 
讓我們來看看時間表在這當中的轉變

00:22:12.799 --> 00:22:13.834 
讓我們從旋轉開始談起

00:22:15.235 --> 00:22:19.139 
現在我們可以把這個旋轉轉移
分成幾個不同的階段

00:22:20.107 --> 00:22:22.876 
首先我們將設置即將產生的變更

00:22:24.111 --> 00:22:27.181 
然後我們將創建我們將給用戶
展示的動畫

00:22:28.148 --> 00:22:29.850 
然後我們將實際運行這些動畫

00:22:30.117 --> 00:22:33.987 
而這一階段是旋轉發生時
該用戶實際看到的部分

00:22:35.222 --> 00:22:37.758 
接着當一切都完成後
我們要進行一些清理

00:22:39.226 --> 00:22:43.330 
現在當轉移中的尺寸與其尺寸級別
實際上爲您的app變更了

00:22:43.664 --> 00:22:45.699 
此爲最後的“設置”階段

00:22:47.134 --> 00:22:49.570 
所以現在我們已看見各階段的這種轉變

00:22:49.770 --> 00:22:51.405 
讓我們來看看這些回調又怎麼融入

00:22:52.806 --> 00:22:55.576 
所有轉移回調都發生於

00:22:55.642 --> 00:22:57.978 
這些轉移的“設置”階段

00:22:59.313 --> 00:23:04.318 
現在同樣的 當尺寸改變時
這被稱作“特徵組合已變更”

00:23:04.518 --> 00:23:06.220 
在您的視圖和視圖控制器裏

00:23:08.055 --> 00:23:13.260 
現在兩個轉移回調不只給您
有關即將發生的更改的信息

00:23:13.760 --> 00:23:16.029 
它們也給您的app帶來一個轉移協調

00:23:16.730 --> 00:23:21.735 
轉移協調可以使用的API
來添加自己要運行的動畫區塊

00:23:22.069 --> 00:23:24.004 
作爲主要動畫的一部分

00:23:24.905 --> 00:23:28.208 
如果您那麼做
它們將設置於“創建動畫”階段

00:23:29.877 --> 00:23:33.280 
同樣的 如果您添加完整區塊
到轉移協調它們將在最後運行

00:23:33.514 --> 00:23:36.016 
作爲“清理”階段的一部分

00:23:36.817 --> 00:23:40.954 
現在請留意 在您的app的
“運行動畫”的明確階段沒有任何回調

00:23:41.588 --> 00:23:45.259 
這是因爲它一般能比較好地
執行您想要的那些任務

00:23:45.592 --> 00:23:48.529 
不論是在這些轉移的開始或最末端

00:23:49.930 --> 00:23:53.400 
所以現在我們談過了旋轉轉移
和一切事件發生的時間表

00:23:53.901 --> 00:23:56.270 
讓我們一起來看看
多任務執行的尺寸調整

00:23:57.704 --> 00:24:00.774 
現在這個轉移過程中
我們先進行一些設置

00:24:01.775 --> 00:24:03.277 
然後再創建一些動畫

00:24:03.911 --> 00:24:05.779 
好了
希望您能看見這裏的這個圖像

00:24:06.113 --> 00:24:07.414 
這些都是完全相同的階段

00:24:07.848 --> 00:24:11.251 
而回調完全以與多任務執行的尺寸調整
相同的方式發生

00:24:11.785 --> 00:24:14.154 
這就是關於新回調的特別好的地方

00:24:14.855 --> 00:24:19.426 
它允許您使用
和多重任務尺寸調整相同的旋轉代碼

00:24:21.562 --> 00:24:25.799 
現在有一個重要的內容要牢記
尤其是關於轉移的尺寸調整

00:24:26.834 --> 00:24:31.271 
那就是您的app有一個時間限制
來讓您進行想要的變更

00:24:32.372 --> 00:24:33.540 
就像使app的啓動

00:24:33.607 --> 00:24:37.144 
如果您的app花費過長時間
來做出這些變更它將會被中止

00:24:38.212 --> 00:24:40.013 
但我敢肯定
這不會發生在你們任何人身上

00:24:42.082 --> 00:24:44.017 
因此有一點要記住

00:24:44.184 --> 00:24:46.653 
如果您在您裏的轉移回調
同時執行這兩種

00:24:46.954 --> 00:24:51.158 
那“將轉換到特徵組合”會發生在
“視角將轉移到尺寸”之前

00:24:51.592 --> 00:24:52.893 
這是非常有用的
要牢記

00:24:53.861 --> 00:24:57.831 
然而如彼得之前提到的
有一些多任務執行的尺寸調整當中

00:24:58.165 --> 00:24:59.900 
您的app只有尺寸會更改

00:25:00.267 --> 00:25:02.002 
而尺寸級別是保持不變的

00:25:02.936 --> 00:25:05.405 
當這種情況發生時特徵組合不會改變

00:25:05.906 --> 00:25:08.642 
所以我們不會採用
特徵組合的回調之類的方法

00:25:09.243 --> 00:25:11.278 
我們只能稱之爲“視角將轉移到尺寸”

00:25:12.212 --> 00:25:15.816 
您仍然可以使用轉移協調的API

00:25:16.116 --> 00:25:18.585 
以添加到動畫和完成塊

00:25:20.187 --> 00:25:21.788 
現在類似的有一些情況下

00:25:22.089 --> 00:25:24.191 
就只有特徵組合
會在您的app上發生變化

00:25:24.391 --> 00:25:25.592 
但尺寸將保持不變

00:25:26.393 --> 00:25:29.997 
這很可能發生
例如當您改寫視圖控制器的特徵組合時

00:25:31.532 --> 00:25:33.033 
所以您在實施這些回調時

00:25:33.433 --> 00:25:37.304 
請確保它們當中只有僅僅一個被調用
因爲事實上其它也可能被同時調用

00:25:38.539 --> 00:25:39.540 
這就是轉移

00:25:41.108 --> 00:25:42.809 
接下來讓我們看看窗口

00:25:43.243 --> 00:25:45.112 
特別是UI窗口

00:25:46.580 --> 00:25:48.282 
一般情況下當您的app被啓動後

00:25:48.549 --> 00:25:51.552 
您將創建一個新的UI窗口
並給它一個框架

00:25:51.618 --> 00:25:54.755 
這同等於您的主界面畫面界限

00:25:56.056 --> 00:25:57.057 
那麼當這種情況發生時

00:25:57.257 --> 00:25:59.760 
如果用戶調整您的
多任務執行過程中的app

00:26:00.093 --> 00:26:02.896 
那麼該用戶界面窗口的框架
將自動調整其尺寸

00:26:03.163 --> 00:26:04.598 
以匹配新的app尺寸

00:26:05.599 --> 00:26:09.002 
而這將繼續下去
只要用戶調整您的app就會發生

00:26:10.370 --> 00:26:12.105 
但是如果您創建一個UI窗口

00:26:12.339 --> 00:26:14.641 
它的大小不同於屏幕上的界限

00:26:15.309 --> 00:26:19.112 
就在您的app被調整尺寸的時候
那麼我們會把窗口調整到相同的尺寸

00:26:20.547 --> 00:26:21.415 
正如彼得所說

00:26:21.949 --> 00:26:26.353 
原先的UI窗口處在左上角
即使您的app被調整了尺寸

00:26:26.720 --> 00:26:29.523 
因此所有的UI窗口都將在
您app的其餘部分運行

00:26:31.358 --> 00:26:34.728 
現在一般來說
在過去做一個全屏尺寸的窗口

00:26:35.596 --> 00:26:38.265 
您必須要創建UI窗口
並明確給它一個框架

00:26:38.465 --> 00:26:40.567 
這還要同等於主UI屏幕的界限

00:26:41.502 --> 00:26:43.837 
而您仍然可以做到這一點
憑藉iPad的多任務執行

00:26:44.371 --> 00:26:46.507 
但在iOS 9
我們已經把這變得更簡單

00:26:47.274 --> 00:26:49.343 
現在您可以創建一個新的UI窗口

00:26:49.543 --> 00:26:51.078 
而不經過任何的明確框架

00:26:51.612 --> 00:26:54.147 
我們將正確地調整其尺寸
以符合您的app當前使用狀況

00:26:54.448 --> 00:26:55.916 
再自動調整其尺寸

00:26:56.183 --> 00:26:58.252 
用於所有的多任務執行尺寸調整

00:27:00.053 --> 00:27:02.789 
好的
現在讓我們一起來看看這緒論

00:27:05.359 --> 00:27:08.662 
在iOS 8中
我們引入了UI演示控制器

00:27:09.229 --> 00:27:11.965 
這是一個了不起的類別
它用來製作特製的個性化演示

00:27:12.499 --> 00:27:14.601 
或用於運行自帶系統的演示

00:27:15.402 --> 00:27:18.105 
您可以看到“進去看看演示控制器”

00:27:18.272 --> 00:27:22.576 
這是去年WWDC的一個講座
您可以瞭解更多信息關於這類使用

00:27:24.244 --> 00:27:26.680 
一個關於演示控制器的重大事件爲

00:27:27.047 --> 00:27:29.550 
多任務執行是對自適應性的支持

00:27:31.318 --> 00:27:35.856 
因此舉例來說
您可以在iPad上展現彈出式演示

00:27:37.224 --> 00:27:38.926 
當您的app的尺寸級別變更

00:27:39.459 --> 00:27:42.162 
在這種情況下
比如緊湊的水平尺寸

00:27:42.563 --> 00:27:46.767 
就會自動變換該演示文稿
爲一種適當的風格

00:27:47.634 --> 00:27:50.070 
所以在這裏
我們已經適應了一個全屏模式的風格

00:27:51.338 --> 00:27:53.140 
而這種情況發生在裝置之間

00:27:53.874 --> 00:27:57.711 
例如如果您在iPhone上
執行同樣的彈出式演示

00:27:58.178 --> 00:28:01.682 
這也會自動以全屏幕模式的風格展示

00:28:03.283 --> 00:28:04.952 
在iPhone 6+的景觀方面

00:28:05.219 --> 00:28:08.322 
我們同樣會把它
做成一種表格來展示給您

00:28:09.556 --> 00:28:11.925 
而且所有的這些改變在您的
app當中自動發生

00:28:12.159 --> 00:28:14.061 
只要通過使用
“視圖控制器演示”就可以

00:28:22.236 --> 00:28:25.339 
然而您可能也想要深入瞭解
這些變化是怎麼發生的

00:28:26.840 --> 00:28:28.075 
例如在這個app中

00:28:28.775 --> 00:28:30.511 
當我們在全屏模式中以彈出式窗口演示

00:28:31.011 --> 00:28:35.883 
我們希望
在導航欄顯示一個“完成”按鍵

00:28:36.316 --> 00:28:38.185 
以便用戶可以關閉該演示

00:28:39.319 --> 00:28:42.022 
但是當我們使用原生的彈窗呈現風格時

00:28:42.256 --> 00:28:43.857 
我們並不需要顯示那個“完成” 按鍵

00:28:44.091 --> 00:28:47.361 
因爲用戶可以通過
點擊彈窗外的任何地方來關閉它

00:28:48.662 --> 00:28:50.030 
而且我們可以做出這類的變更

00:28:50.497 --> 00:28:53.133 
藉助“自適應演示控制授權”API

00:28:54.434 --> 00:28:58.639 
事實上在iOS 8.3中
我們引入了一些新的方法到這個草案中

00:28:59.573 --> 00:29:05.546 
當您的視圖控制器演示被採用時
這些方法讓您能控制更多發生的變更

00:29:06.747 --> 00:29:09.449 
這樣您可以做類似於隱藏和顯示導航欄

00:29:09.716 --> 00:29:11.718 
或其他任何對您的app有用的變更

00:29:13.220 --> 00:29:16.857 
現在最後關於彈窗演示
請務必要特別記住的是

00:29:17.291 --> 00:29:22.262 
從彈窗出來的箭頭
指向那個彈窗正確的來源

00:29:23.497 --> 00:29:24.831 
這特別重要

00:29:25.032 --> 00:29:31.538 
尤其當您的app
在橫向緊湊和常規尺寸級別中適應時

00:29:32.439 --> 00:29:35.809 
您可以很容易地做到
用一個彈窗演示控制器API

00:29:36.443 --> 00:29:37.744 
不論是設置工具條按鍵對象

00:29:38.245 --> 00:29:40.414 
還是在源代碼方陣當中設置源代碼視圖

00:29:41.882 --> 00:29:42.816 
這就是演示的呈現了

00:29:43.784 --> 00:29:47.821 
我最後想要告訴您
關於多任務執行當中鍵盤的變更

00:29:49.423 --> 00:29:51.658 
現在當用戶用您的app
進行多任務執行

00:29:52.926 --> 00:29:55.629 
如果他們點擊到文字區域
像地圖中的搜索條

00:29:56.496 --> 00:30:00.567 
那麼鍵盤會確實地出現在
用戶正在交互的所有app的頂端

00:30:01.301 --> 00:30:02.503 
這意味着它對您真的很重要

00:30:02.569 --> 00:30:06.306 
它讓您要考慮是否要把您app
的一部分移出鍵盤

00:30:06.573 --> 00:30:08.175 
以確保用戶依然可以與它們交互

00:30:09.176 --> 00:30:12.412 
您可以通過UI鍵盤 通知API實施

00:30:12.813 --> 00:30:13.881 
就像您在過去做的一樣

00:30:15.482 --> 00:30:18.385 
您可以用這些通知變更您的app

00:30:18.785 --> 00:30:20.988 
比如設置滾動瀏覽內容插圖

00:30:21.388 --> 00:30:24.157 
或者移動重要的UI元素以維持可見度

00:30:25.125 --> 00:30:26.527 
所以舉例來說 在這個app當中

00:30:26.960 --> 00:30:31.865 
我們可能想要移動評論和評價視圖
以確保其仍然可見

00:30:33.200 --> 00:30:34.735 
而且這真的是一項重要的變更

00:30:34.935 --> 00:30:38.372 
因爲在過去
您的app唯一能夠與鍵盤交互的時候

00:30:38.572 --> 00:30:40.340 
就是它明確地自己顯示出鍵盤時

00:30:41.208 --> 00:30:42.509 
但現在有了多任務執行

00:30:42.776 --> 00:30:46.046 
用戶採用的其他app
就可以促使鍵盤顯現

00:30:46.480 --> 00:30:47.481 
所以您會想要考慮

00:30:47.614 --> 00:30:50.918 
是否app中的任意一個視圖
都需要移動其UI

00:30:51.051 --> 00:30:52.786 
以在鍵盤顯示的時候仍維持可見度

00:30:54.488 --> 00:30:57.624 
以下是一些有關iPad多任務執行的
變更和最佳實踐

00:30:58.325 --> 00:30:59.660 
幾個重要的事項要牢記

00:31:00.460 --> 00:31:05.232 
在您的app旋轉的時候
務必考慮其尺寸和尺寸級別而不是方位

00:31:06.433 --> 00:31:09.069 
還有要思考您如何
針對位置轉移變化做出協調

00:31:09.203 --> 00:31:11.738 
比如旋轉和
多任務執行的尺寸調整時

00:31:12.439 --> 00:31:15.042 
最後使用自適應彈窗演示

00:31:15.142 --> 00:31:17.544 
好讓您的app契合運行於
我們所有的裝置

00:31:17.611 --> 00:31:20.080 
以及它被使用的各種環境當中

00:31:21.048 --> 00:31:22.916 
現在我要交給庫爾特雷維斯

00:31:23.083 --> 00:31:25.319 
讓他來告訴你們如何
最有效地利用多任務執行

00:31:31.191 --> 00:31:32.025 
謝謝

00:31:32.292 --> 00:31:33.594 
謝謝您 雅各布
謝謝您 彼特

00:31:34.561 --> 00:31:38.832 
那麼現在您知道您的app如何
以及爲什麼能夠採用多任務執行了

00:31:39.533 --> 00:31:41.301 
您知道什麼改變了
其實並不多

00:31:41.768 --> 00:31:43.470 
您知道該去做什麼
不該去做什麼

00:31:44.204 --> 00:31:47.875 
那我在這裏告訴大家你們的app該如
何有效利用多任務執行

00:31:47.941 --> 00:31:50.344 
並傳送一流的體驗給您的用戶

00:31:51.812 --> 00:31:55.649 
您的app確實需要自適應性設計

00:31:56.083 --> 00:31:58.218 
而我將重申三我們之前說過的事情

00:31:58.886 --> 00:32:01.054 
首先 您的app應該是普遍通用的

00:32:01.288 --> 00:32:03.690 
您的app應當能在
iPhone和iPad上運行

00:32:05.192 --> 00:32:09.663 
其次 不要再想像這是
iPhone和iPad的用戶體驗

00:32:09.763 --> 00:32:13.200 
想象它們是緊湊和常規寬度

00:32:13.534 --> 00:32:16.770 
因爲現在緊湊寬度
已經可以在iPad上體驗得到

00:32:18.238 --> 00:32:21.808 
最後 使用自適應性
在它們之間進行更換

00:32:21.909 --> 00:32:23.710 
尤其在用戶調整您的app尺寸時

00:32:24.945 --> 00:32:27.247 
這樣設計的自適應性的挑戰

00:32:27.314 --> 00:32:30.784 
是爲了讓您的app能自行適應
各類動態的尺寸變化

00:32:31.752 --> 00:32:35.689 
接着我會給您兩樣東西
事實上爲六大策略

00:32:36.657 --> 00:32:42.062 
您的app可以採用以使其更加靈活
以及更能適應動態的尺寸變更

00:32:42.696 --> 00:32:44.765 
接下來我會談及可能出現的一些細節

00:32:45.299 --> 00:32:47.434 
一些您在採用多任務執行中
可能會遇到的事項

00:32:47.768 --> 00:32:49.570 
和如何處理這些事項的指導方針

00:32:50.704 --> 00:32:51.638 
那麼我們開始

00:32:52.005 --> 00:32:54.775 
第一條策略 靈活

00:32:55.876 --> 00:32:58.278 
不要辛苦地編碼尺寸
不要擅自假設

00:32:58.545 --> 00:33:00.948 
您的app應當着眼於它的尺寸

00:33:01.715 --> 00:33:02.883 
並在那個基礎上做些什麼

00:33:03.851 --> 00:33:05.986 
而且它應該對尺寸變化有所反應

00:33:07.087 --> 00:33:11.892 
唯一能找出您的app靈活與否的方法
是真正地去嘗試嘗試延伸

00:33:12.359 --> 00:33:14.328 
我們在這裏做一些運動一點點的熱身

00:33:14.394 --> 00:33:16.897 
您會發現有一張瑜伽墊
就在您座位前方的地面上

00:33:17.264 --> 00:33:18.131 
請把它拿出來！

00:33:18.632 --> 00:33:20.934 
不
不幸的是我只是在說您的app

00:33:21.301 --> 00:33:22.503 
但我們還是會做同樣的事情

00:33:22.736 --> 00:33:24.638 
我們會讓您的app做一個熱身練習

00:33:25.539 --> 00:33:27.808 
我們會運行所有的多任務執行場景

00:33:28.675 --> 00:33:31.478 
而且我們會小心地觀察您app的UI

00:33:31.678 --> 00:33:33.514 
請留意
哪些好用 哪些不好用

00:33:35.182 --> 00:33:37.150 
當您在做這個時
集中注意力到佈局排版上

00:33:37.351 --> 00:33:38.318 
您的視圖是什麼

00:33:38.452 --> 00:33:42.356 
不要擔心這些動畫或其它類似的
特別是如果您是在模擬器上這麼做

00:33:42.456 --> 00:33:44.858 
因爲您的體驗會跟真的裝置上不一樣

00:33:46.093 --> 00:33:46.960 
讓我們開始吧

00:33:48.195 --> 00:33:49.830 
您的app採用了多任務執行

00:33:50.731 --> 00:33:52.566 
您可以開始
用Slide Over啓動它

00:33:53.467 --> 00:33:54.868 
然後變更您的app尺寸爲更大

00:33:54.935 --> 00:33:55.869 
這是一個尺寸變更

00:33:56.770 --> 00:33:59.540 
再讓它變大
它會變成全屏 另外的尺寸改變

00:34:00.474 --> 00:34:02.209 
現在Slide Over
另一個app

00:34:02.476 --> 00:34:04.178 
並按下按鍵
以使用Split View

00:34:04.344 --> 00:34:05.312 
您的app會變小

00:34:06.580 --> 00:34:08.482 
最後讓我們旋轉整個iPad

00:34:09.315 --> 00:34:10.817 
這樣我們就得到一個尺寸變化

00:34:11.451 --> 00:34:13.920 
這會產生旋轉
方位也會變更

00:34:14.221 --> 00:34:15.222 
而且這是動畫的

00:34:16.223 --> 00:34:18.358 
那麼這就是所有
可能發生到您的app上的事項

00:34:18.425 --> 00:34:21.161 
而且您應該在app所有地方進行嘗試

00:34:21.527 --> 00:34:22.896 
以確保它可以處理這些事情

00:34:23.830 --> 00:34:26.400 
當您嘗試這個時或許您會
發現有些東西 好用有一些不好用

00:34:27.234 --> 00:34:31.572 
所以爲了幫助修復這些
不好用的東西 好好聽着

00:34:33.139 --> 00:34:35.576 
第二條策略
使用自動佈局排版

00:34:35.641 --> 00:34:36.610 
這應該並不奇怪

00:34:36.677 --> 00:34:39.446 
這是爲了讓您的app UI
變得靈活的方法之一

00:34:40.614 --> 00:34:43.283 
所有您需要做的就是
提供視圖和限制條件

00:34:43.717 --> 00:34:45.485 
系統會考慮所有的限制條件

00:34:46.053 --> 00:34:47.621 
並在那些基礎上設置您的視圖框架

00:34:47.688 --> 00:34:49.322 
所以您不用辛苦地編碼任何事項

00:34:50.690 --> 00:34:55.829 
您也可以使用頁邊距和UIK給您提供
的指導方針來構建這些限制條件

00:34:56.830 --> 00:35:01.101 
而且在iOS 9中 有新的API
可以促使這整個過程更便利

00:35:02.536 --> 00:35:03.770 
那麼想更多瞭解這個

00:35:04.304 --> 00:35:07.674 
請參考星期四的兩個自動佈局排版的講
座 我保證您會學到很多

00:35:10.244 --> 00:35:12.946 
那麼讓我們看看不久前的這個例子

00:35:17.050 --> 00:35:17.885 
我們有...

00:35:20.754 --> 00:35:21.588 
不好意思

00:35:22.055 --> 00:35:24.958 
我們有這個app顯示一些文字
而且它有這些可閱性頁邊距

00:35:27.227 --> 00:35:30.531 
現在當您的視圖尺寸變大時
這將如何運行

00:35:30.597 --> 00:35:32.366 
但可閱性內容指南變小了

00:35:33.333 --> 00:35:35.369 
我們並不希望您的app有所顧慮

00:35:35.602 --> 00:35:39.907 
“這是一個iPad 它又大又寬
我需要用不同的方式處理這些頁邊距”

00:35:39.973 --> 00:35:42.109 
您只需要用這個指導方針
它就會自動運行

00:35:42.910 --> 00:35:44.344 
所以這就是
如何在代碼中做這個

00:35:45.712 --> 00:35:48.115 
首先做一個標籤
我們會把我們的文字放在裏面

00:35:49.416 --> 00:35:51.518 
第二步
標籤來到了一些超級視圖裏

00:35:52.119 --> 00:35:54.821 
我們會從超級視圖中
得到可閱性內容指南

00:35:56.156 --> 00:35:59.826 
現在我們會設置一些限制條件讓此標籤
適合該可閱性內容指南

00:36:00.694 --> 00:36:02.262 
那麼這些限制條件是一個排列

00:36:02.629 --> 00:36:05.632 
而我們實施的第一項就是
讓這個標籤引領錨杆

00:36:05.699 --> 00:36:06.733 
這是引領的一側

00:36:07.301 --> 00:36:11.038 
相當於這個可閱性內容指南的引領錨杆
爲引領的一側

00:36:12.306 --> 00:36:15.976 
記住這是使用新的iOS 9的
方便API

00:36:17.077 --> 00:36:19.847 
我們對兩個側邊的拖拽錨
都做出同樣的運行

00:36:19.980 --> 00:36:23.083 
現在這個標籤的寬度會匹配
可閱性內容指南的寬度

00:36:24.318 --> 00:36:27.221 
接下來我們需要做的所有事項
就是激活這兩條限制條件

00:36:27.487 --> 00:36:28.789 
再讓自動佈局完成其餘的事項

00:36:28.856 --> 00:36:30.157 
我們並不需要做完所有的事項

00:36:31.692 --> 00:36:33.560 
當然我也可以用Xcode做這個

00:36:33.627 --> 00:36:36.830 
我可以用我的畫板進行設計
這會將我引導到下一個策略

00:36:37.397 --> 00:36:40.167 
充分利用Xcode支持的
尺寸級別

00:36:40.968 --> 00:36:44.171 
您可以設置您的UI在不同的尺寸級別
中運行不同的事項

00:36:44.872 --> 00:36:46.974 
比如說使用
Interface Builder

00:36:47.040 --> 00:36:49.076 
當您在編輯一個畫板或者XIB文件時

00:36:49.877 --> 00:36:53.480 
您可以從不同的尺寸級別
添加或刪除用戶限制條件

00:36:54.414 --> 00:36:57.618 
而且您也可以改變視圖的屬性
比如字體的大小等等

00:36:58.719 --> 00:37:00.888 
您也可以使用資產目錄的優勢

00:37:00.954 --> 00:37:05.125 
讓應用不同版本的圖片
處於不同的尺寸級別

00:37:06.260 --> 00:37:10.330 
記住這不僅可應用在
您第一次初始化加載您的UI

00:37:10.764 --> 00:37:12.733 
同樣也可以用在動態尺寸變更時

00:37:13.166 --> 00:37:17.304 
我們記住這所有的幕後事項
當尺寸變更時我們都會使用這些

00:37:18.872 --> 00:37:19.840 
我再舉個例子

00:37:20.541 --> 00:37:22.843 
這裏我已經做好了畫板
也設置了有兩個視圖的UI

00:37:23.443 --> 00:37:25.679 
這有一張圖片和一些文字

00:37:25.846 --> 00:37:28.315 
我把它們並排在一起
我讓限制條件來執行這事項

00:37:29.650 --> 00:37:31.852 
我在默認的UI運行我的app

00:37:32.252 --> 00:37:34.087 
使用的是“任意寬度”級別

00:37:35.155 --> 00:37:38.325 
我想要做一個版本
那會有一點有別於緊湊尺寸級別

00:37:38.759 --> 00:37:41.461 
那麼我要做的就是點擊控制
我變更它到緊湊寬度

00:37:42.596 --> 00:37:44.064 
我得到了同樣的兩個視圖

00:37:44.198 --> 00:37:46.767 
但我改變了我的限制條件
讓這個佈局排版變得不一樣

00:37:47.034 --> 00:37:49.136 
現在圖片在頂部 文字在底部

00:37:50.604 --> 00:37:53.841 
我通過點擊控制底部做這個
將它改變到緊湊級別

00:37:53.941 --> 00:37:58.445 
而且您還可以看到有藍色文字在告訴我
正處於一個不同的 更特殊的模式

00:38:00.314 --> 00:38:02.382 
現在我可以在這個點運行我的app

00:38:02.616 --> 00:38:04.284 
並嘗試改變它的尺寸看看會發生什麼

00:38:04.985 --> 00:38:06.954 
但很好的是
實際上我並不需要真的這麼做

00:38:07.054 --> 00:38:09.857 
我可以在Xcode看到動態的預覽

00:38:10.958 --> 00:38:13.060 
僅僅使用Xcode中的窗格助理功能

00:38:13.493 --> 00:38:19.800 
您就可以同時處於不同的配置下
在您的記事板中擁有不止一個預覽

00:38:20.501 --> 00:38:22.202 
所以這裏我用iPad三分之一寬度

00:38:22.469 --> 00:38:26.073 
即Slide Over和
app時所發生的事 即緊湊佈局

00:38:27.174 --> 00:38:30.677 
在我看着iPad全屏的同時
也看着其他的佈局排版

00:38:31.678 --> 00:38:33.680 
所以您想做多少次這預覽
就可以做多少次

00:38:33.981 --> 00:38:35.616 
僅僅點擊角上的“+”按鍵

00:38:36.283 --> 00:38:37.885 
並選擇iPhone上的任意尺寸

00:38:37.951 --> 00:38:40.454 
iPad上的任意尺寸的
多任務執行配置

00:38:40.787 --> 00:38:42.623 
您可以立刻看見它們
而且它們都是動態的

00:38:49.363 --> 00:38:50.831 
我們也可以使用資產目錄

00:38:51.665 --> 00:38:52.566 
我會展示它如何運行

00:38:53.166 --> 00:38:55.869 
這裏我已經有一個資產目錄
我在看着一個特定的資產

00:38:56.837 --> 00:39:00.874 
我會把這設置爲普遍通用的
以便它能在所有的裝置上運行

00:39:02.009 --> 00:39:05.579 
然後我會做和之前差不多的步驟
我會設置兩個不同的版本

00:39:06.180 --> 00:39:09.483 
一個默認的用於任何寬度
另一個用於緊湊寬度

00:39:10.784 --> 00:39:12.486 
現在您可以看見
我已經取得這兩個圖片

00:39:12.553 --> 00:39:13.820 
這是兩個不同的版本

00:39:14.454 --> 00:39:19.726 
我可以拉一個大星星來運行
用於任何通常寬度的配置

00:39:20.594 --> 00:39:23.664 
我拉一個小點的圖片作爲緊湊寬度

00:39:25.766 --> 00:39:26.633 
這就是Xcode

00:39:27.401 --> 00:39:30.103 
現在您也可以順便在文檔或代碼

00:39:30.304 --> 00:39:32.840 
如果您有興趣的話 試試看這麼做

00:39:33.340 --> 00:39:35.542 
就這麼使用自適應性回調的優勢

00:39:36.510 --> 00:39:37.477 
以下是運行的方法

00:39:37.945 --> 00:39:39.146 
如果您在一個視圖控制器中

00:39:39.680 --> 00:39:42.616 
您可以重載“將轉移到特徵組合”

00:39:43.350 --> 00:39:46.253 
我們會給您更換的新組合

00:39:47.821 --> 00:39:50.224 
又或者您可以重載
“視圖將轉移到尺寸”

00:39:50.290 --> 00:39:52.559 
我們就會給您更換的的尺寸

00:39:53.927 --> 00:39:59.199 
現在比如說我想要我的app
根據不同水平尺寸級有不同的UI

00:39:59.867 --> 00:40:03.504 
我們來重載“將轉移到特徵組合”

00:40:05.005 --> 00:40:06.206 
我們必須要做的第一件事

00:40:06.874 --> 00:40:09.743 
叫“超級無敵”
讓系統進行常規運行

00:40:11.011 --> 00:40:12.112 
然後我們添加我們的代碼

00:40:12.579 --> 00:40:15.382 
我們將查看這個新組合的水平尺寸級別

00:40:16.617 --> 00:40:19.086 
並且根據它是哪個級別
我們會做一些不同的事

00:40:20.053 --> 00:40:21.321 
這裏是您存放代碼的地方

00:40:22.589 --> 00:40:26.360 
如爲緊湊級別
變更您的UI以用於緊湊寬度

00:40:26.994 --> 00:40:29.530 
如爲常規級別
變更您的UI以用於常規寬度

00:40:30.230 --> 00:40:33.834 
如無所顯示那就意味着我們在
創建和摧毀之間

00:40:34.067 --> 00:40:34.902 
那就什麼也不要做

00:40:36.837 --> 00:40:41.008 
現在比如說我有那個類似的更換
但我想要它和其他事項一起進行

00:40:41.475 --> 00:40:43.977 
比方說當我旋轉iPad時

00:40:44.478 --> 00:40:47.614 
我想要在改變的同時
讓動畫旋轉到側邊

00:40:48.582 --> 00:40:49.416 
是這樣的

00:40:50.150 --> 00:40:51.785 
我們以同樣的方式開始

00:40:52.619 --> 00:40:54.121 
用“超級無敵”同樣的方法重載

00:40:54.955 --> 00:40:57.157 
然後不直接做這個變換

00:40:57.524 --> 00:40:58.525 
我們提供一個區塊

00:40:59.126 --> 00:41:01.595 
然後再把我們的變化放在該區塊當中

00:41:02.362 --> 00:41:04.064 
在這裏我們得到一個區塊
叫做“動畫”

00:41:04.331 --> 00:41:06.633 
接着我們使用這個代碼變更裏面的UI

00:41:08.202 --> 00:41:12.372 
然後把這個區塊
放到協調的“動畫側邊的轉移”方法裏

00:41:13.307 --> 00:41:18.545 
這個方法會關注該區塊
並在動畫設置完成的同時調用它

00:41:19.112 --> 00:41:22.015 
您在當中完成的一些更換都會由該區塊
自動地轉換成動畫

00:41:23.984 --> 00:41:26.053 
這就是如何在低水平的代碼中運行

00:41:27.154 --> 00:41:30.424 
我會講一些高級API
尤其是UIKit提供給您的

00:41:35.596 --> 00:41:38.699 
首先正如雅各布之前提到的
自適應演示控制器

00:41:39.967 --> 00:41:43.704 
其次
是經典的UI表格視圖和UI組合視圖

00:41:43.804 --> 00:41:46.473 
這些讓您能在小事物的基礎上
建立一個更大的UI

00:41:46.540 --> 00:41:49.376 
就像一個組閤中的一個單行或單個元素

00:41:50.944 --> 00:41:53.680 
同樣是iOS 9的新功能
有個叫做UI堆棧視圖

00:41:54.481 --> 00:41:55.883 
這能讓您創建一個視圖列表

00:41:55.949 --> 00:41:58.752 
並把它們放到一個垂直的堆棧
或者水平的隊列中

00:41:59.152 --> 00:42:01.154 
以及設置一些它們如何放置的參數

00:42:01.922 --> 00:42:05.025 
同樣的想了解更多的話
請查看第一個自動佈局的相關講座

00:42:06.894 --> 00:42:10.397 
高級API的最後一點是
它大得足以擁有自己的數字

00:42:10.998 --> 00:42:12.699 
那就是UI Split
View控制器

00:42:13.867 --> 00:42:17.538 
我們在日常的app中用得很多
比如郵件 信息和註釋

00:42:18.305 --> 00:42:21.408 
如果它對您的app也有用
那就使用它

00:42:22.809 --> 00:42:24.344 
我把郵件作爲一個例子

00:42:24.511 --> 00:42:26.380 
這裏我們看着全屏iPad

00:42:26.880 --> 00:42:29.416 
您可以看到該app被分成兩個部分

00:42:29.983 --> 00:42:33.987 
注意這有別於您看見的
split view多任務執行

00:42:34.054 --> 00:42:34.988 
這是一個app

00:42:36.823 --> 00:42:40.160 
那麼我們有一側是可以查看的信息列表

00:42:40.427 --> 00:42:41.261 
您可以選擇一個

00:42:42.229 --> 00:42:45.999 
另一方面我們有一個視圖
展示了相關細節

00:42:46.266 --> 00:42:47.868 
在這情況下這是一個特定的信息

00:42:49.770 --> 00:42:53.974 
所以如果您的app
能處理一個相同或類似的配置

00:42:54.041 --> 00:42:57.044 
我們極力推薦您採用Split
View控制器

00:42:57.110 --> 00:42:59.980 
因爲它會在多任務執行當中
爲您處理很多事項

00:43:00.080 --> 00:43:01.582 
我稍後會展示一些

00:43:02.583 --> 00:43:03.784 
但首先這是您如何採用它

00:43:04.885 --> 00:43:07.487 
您在您的app內創建一個UI
Split View控制器

00:43:07.654 --> 00:43:11.124 
這是典型的根視圖控制器
是您最高等級的UI

00:43:12.626 --> 00:43:15.295 
它是一個容器視圖控制器
並且有子控制器

00:43:15.462 --> 00:43:18.565 
我們稱它們爲主控制器
和二級視圖控制器

00:43:19.900 --> 00:43:25.138 
在郵件裏
有一個表格視圖包括了信息列表

00:43:26.139 --> 00:43:29.710 
而在二級控制器的一側
有一個自定義的視圖顯示您的信息

00:43:30.210 --> 00:43:31.645 
當中的一條信息填充在其中

00:43:31.712 --> 00:43:33.113 
您提供視圖控制器

00:43:33.947 --> 00:43:36.850 
UI Split View控制器

00:43:36.917 --> 00:43:40.554 
專門決定在哪裏及在什麼時候
顯示這兩個視圖控制器

00:43:42.089 --> 00:43:43.090 
回到郵件

00:43:43.390 --> 00:43:47.160 
在全屏時我們有很多的空間
我們可以並列呈現這些空間

00:43:47.961 --> 00:43:49.630 
如果用戶切換到一個不同的app

00:43:50.130 --> 00:43:53.901 
然後從側面把郵件滑動出來的話
會發生什麼呢？

00:43:54.935 --> 00:43:57.971 
在那種情況下
它是緊湊寬度 空間更小

00:43:58.505 --> 00:44:00.741 
那麼這個Split View控制器
就會做出自行調適

00:44:01.008 --> 00:44:05.312 
這決定了它會顯示二級視圖控制器
以啓動這個郵件信息

00:44:06.213 --> 00:44:09.216 
也提供導航控制器

00:44:09.883 --> 00:44:11.418 
以返回其它列表或主列表

00:44:12.352 --> 00:44:15.889 
一旦用戶選擇了其中之一
他們就可以再次回到之前的二級列表

00:44:17.090 --> 00:44:20.827 
這些視圖控制器依然是獨立的
它們並不需要做這些選擇

00:44:24.298 --> 00:44:25.632 
所以這裏要注意的事項是

00:44:25.699 --> 00:44:29.203 
這裏有着我們之前看到的兩個完全相同
的視圖控制器

00:44:29.570 --> 00:44:31.238 
不同之處在於它們變小了

00:44:32.372 --> 00:44:35.309 
而且我們在以不同的方式導航運行

00:44:37.177 --> 00:44:38.545 
因此如果您想要嘗試這個

00:44:38.912 --> 00:44:40.614 
您必須確定在您的電腦中有這個代碼

00:44:40.948 --> 00:44:44.751 
只需要做一個新的Xcode
在其中做一個新的iOS應用程序

00:44:45.319 --> 00:44:47.521 
並使用“主從複合應用程序”的模板

00:44:48.021 --> 00:44:49.890 
它就會自動設置一個畫板

00:44:49.957 --> 00:44:51.758 
其中包括一個
Split View控制器

00:44:52.159 --> 00:44:53.527 
以及每個側邊的視圖控制器

00:44:54.394 --> 00:44:56.296 
您可以在這上面創建您自己的app

00:44:56.597 --> 00:44:59.333 
或者你也可以僅把它作爲一個測試臺來
使用搭配Split View控制器

00:44:59.399 --> 00:45:00.234 
再看看它能做什麼

00:45:02.202 --> 00:45:03.804 
這就是我會給您的6條策略

00:45:07.941 --> 00:45:10.777 
請盡情合理地混搭它們
以在您的app當中發揮作用

00:45:11.979 --> 00:45:14.648 
您可以看看我們的代碼示例以比較實例

00:45:15.015 --> 00:45:18.285 
這是一個app叫做“自適應圖片”
您可以在開發者網站上搜索它

00:45:19.720 --> 00:45:22.789 
在所有型號的
iPhone和iPad上

00:45:22.856 --> 00:45:25.192 
以及iPad的多任務執行上測試它
看看它能做什麼

00:45:27.194 --> 00:45:28.228 
這就是策略

00:45:28.295 --> 00:45:31.031 
如果您使用這些
您的app會開始做出合適的尺寸調整

00:45:31.398 --> 00:45:32.666 
這或許會運行得很好

00:45:33.200 --> 00:45:35.068 
但您也可能會遇到一些新事情

00:45:36.203 --> 00:45:39.573 
所以一旦您採用了多任務執行
這些新事情很可能就是一些小陷阱

00:45:40.140 --> 00:45:41.875 
我會給您一些指導方針來妥善處理它們

00:45:43.243 --> 00:45:45.012 
第一條指南 也是最重要的

00:45:45.946 --> 00:45:47.981 
用戶控制您的app尺寸

00:45:48.849 --> 00:45:51.251 
用戶總是掌握着它們的大小

00:45:52.252 --> 00:45:54.922 
所以您的app不能制止尺寸變換髮生

00:45:55.155 --> 00:45:57.858 
我知道有時候這很不方便
但這也是您的app所不能阻止的

00:45:58.892 --> 00:46:01.728 
同時您的app不能促使尺寸的變化

00:46:02.262 --> 00:46:05.432 
您不能說“我的app現在想要全屏”
這種方式沒有用

00:46:06.934 --> 00:46:10.337 
而且我想說
尺寸變化可以在任何時候發生

00:46:10.504 --> 00:46:13.740 
用戶可能在任何時間
選擇改變app的尺寸

00:46:13.874 --> 00:46:15.042 
這就像按Home鍵一樣

00:46:15.209 --> 00:46:16.410 
他們可以在任何時間這麼做

00:46:17.644 --> 00:46:19.246 
那麼我們該如何應對尺寸變化？

00:46:19.379 --> 00:46:22.449 
好的 我們的指南是保持用戶導向

00:46:23.050 --> 00:46:24.218 
不要讓用戶迷茫

00:46:25.419 --> 00:46:27.888 
我會用一個真實的
app具體實例解釋這狀況

00:46:28.789 --> 00:46:30.090 
我有一個待做事務列表app

00:46:30.824 --> 00:46:32.726 
它有一個我需要完成的事項串

00:46:33.393 --> 00:46:34.895 
而且我已經把它們分成三個目錄

00:46:34.995 --> 00:46:36.830 
家 工作和學校

00:46:38.031 --> 00:46:39.499 
現在我將要穿上我的設計帽

00:46:39.900 --> 00:46:43.537 
我選擇做一些UI
用於常規寬度和緊湊寬度

00:46:44.938 --> 00:46:48.141 
在常規寬度 我想 “好的
把它們放在滾動視圖中是合理的

00:46:48.208 --> 00:46:49.209 
我們把它們彼此疊放

00:46:49.743 --> 00:46:51.378 
我們讓用戶滾動瀏覽它們”

00:46:54.615 --> 00:46:59.753 
在緊湊寬度 我想 “好的
我們一次僅顯示目錄中的其中一個

00:47:00.954 --> 00:47:05.058 
每個都在不同的頁面
而且讓用戶滾動頁面

00:47:05.492 --> 00:47:07.127 
但一次只有一個是可見的”

00:47:08.829 --> 00:47:09.696 
那麼這很好

00:47:10.163 --> 00:47:11.064 
我有了兩個UI

00:47:11.131 --> 00:47:14.001 
但現在我需要想該怎樣
從一個到另一個地變化

00:47:15.235 --> 00:47:17.237 
比如說我正在查看學校

00:47:18.472 --> 00:47:21.175 
而用戶把app的尺寸更換成常規寬度

00:47:21.475 --> 00:47:22.309 
我該怎麼做？

00:47:23.110 --> 00:47:27.414 
好 如果我僅僅做一個新的滾動視圖
並把我的事項放進去

00:47:27.781 --> 00:47:30.417 
它很有可能滾動到非常頂端
在(0,0)位置

00:47:31.051 --> 00:47:32.953 
學校於是變得不可見了

00:47:33.554 --> 00:47:35.622 
那用戶可能迷茫了
我們並不想那麼做

00:47:36.423 --> 00:47:40.861 
app應當選擇並製作一個好的選擇和
滾動以便相同的事項再度可見

00:47:40.928 --> 00:47:41.929 
所以學校是可見的

00:47:43.030 --> 00:47:46.099 
這不會自動發生
您的app需要做出相應的選擇

00:47:48.035 --> 00:47:51.071 
比如說用戶持續使用app
他們往下滾動一點

00:47:51.738 --> 00:47:53.207 
他們寫一些代碼再完成運行

00:47:53.340 --> 00:47:54.508 
很好
今天寫了一些代碼

00:47:55.242 --> 00:47:59.379 
然後他們決定
把app的尺寸調整成緊湊類

00:48:00.414 --> 00:48:01.248 
我們該怎麼做？

00:48:02.449 --> 00:48:05.219 
您會看到所有的三個目錄都
同時出現在屏幕上

00:48:05.485 --> 00:48:08.422 
所以我們可以做一個示範
讓它們中的任意一個可見

00:48:09.323 --> 00:48:10.924 
但在這個示範中 這或許很合理

00:48:11.058 --> 00:48:12.893 
當他們最後一次
檢查工作中完成的事情時

00:48:13.927 --> 00:48:16.063 
他們依然看着它並且沒有作出任何控制

00:48:16.430 --> 00:48:18.065 
那我們應該選擇去那個頁面

00:48:18.832 --> 00:48:23.270 
不過這裏有app必須做的決定
而您的app也必須做出類似的決定

00:48:29.009 --> 00:48:30.544 
所以保持用戶至上

00:48:31.645 --> 00:48:32.946 
千萬不要做出突然的改變

00:48:33.280 --> 00:48:35.115 
尤其當一個尺寸改變到另一個尺寸時

00:48:35.249 --> 00:48:36.550 
嘗試保持同一事項是可見的

00:48:37.918 --> 00:48:39.853 
您或許需要用新的方式來
呈現你的聰明才智

00:48:40.153 --> 00:48:44.224 
您或許需要做點什麼
比如持續留意用戶最近最常看或點擊的

00:48:44.691 --> 00:48:45.926 
這是您之前不需要做的

00:48:47.494 --> 00:48:49.029 
再說這也是特別重要的

00:48:49.096 --> 00:48:53.867 
尤其當您從大尺寸更換成小尺寸
因爲您不能顯示之前的一切事項

00:48:55.736 --> 00:48:59.139 
所以說調整尺寸在這裏
是另一件可能會發生的新事情

00:49:00.140 --> 00:49:02.042 
尤其一旦您的app採用了多任務執行

00:49:03.043 --> 00:49:05.512 
譬如說您的app處於非活動狀態
用戶按下Home鍵

00:49:06.613 --> 00:49:09.416 
隨後您app的尺寸可能會有變更

00:49:09.716 --> 00:49:13.086 
該系統或許會依據不同的尺寸級別
做一個app的屏幕截圖

00:49:14.421 --> 00:49:18.158 
當這發生時
和之前相同的自適應方式就會被調用

00:49:19.159 --> 00:49:21.662 
但沒有什麼是可見的
用戶不會看到任何東西

00:49:22.563 --> 00:49:23.463 
當這完成後

00:49:23.730 --> 00:49:26.333 
系統將恢復到原始尺寸

00:49:27.234 --> 00:49:30.504 
現在這或許有點棘手 但我已經給了您
一些相關的指南去妥善處理

00:49:30.637 --> 00:49:31.905 
接下來我會多展示一個實例

00:49:32.639 --> 00:49:33.640 
我又拿出了我的app

00:49:34.608 --> 00:49:38.212 
我處於活躍狀態
它是緊湊寬度而我在看着工作頁面

00:49:38.979 --> 00:49:40.414 
現在用戶按了Home鍵

00:49:41.849 --> 00:49:44.451 
系統會馬上做屏幕截圖

00:49:44.985 --> 00:49:48.222 
現在這不是一個新事情了
我們已經做這個很久了

00:49:48.889 --> 00:49:50.924 
即將發生的是用戶會截這個屏幕截圖

00:49:51.024 --> 00:49:52.893 
接着該app會恢復活躍狀態

00:49:53.627 --> 00:49:57.764 
我們會先展示該屏幕截圖
再像之前那樣淡出到實時的app

00:49:58.098 --> 00:50:00.601 
記住這個屏幕截圖就在這裏
我們在工作當中它是紫色的

00:50:02.169 --> 00:50:03.804 
現在有了多任務執行

00:50:04.471 --> 00:50:08.475 
系統會調整我們的尺寸至常規尺寸
並截個屏幕截圖爲己用

00:50:10.043 --> 00:50:12.546 
現在系統將把我們的尺寸
調整成緊湊類別

00:50:13.547 --> 00:50:15.449 
此刻app必須做出選擇了

00:50:15.616 --> 00:50:18.852 
我會給您展示如果做了不好的選擇和好
的選擇分別會發生什麼

00:50:19.419 --> 00:50:20.888 
以及這兩者之間的不同

00:50:21.421 --> 00:50:22.856 
我們先做不好的選擇

00:50:24.324 --> 00:50:25.192 
我們回到緊湊類別

00:50:25.259 --> 00:50:28.362 
我的app決定“好的 家在頂端
所以我們會再一次顯示家”

00:50:29.663 --> 00:50:31.265 
app稍微保持一會兒不活躍狀態

00:50:31.665 --> 00:50:33.567 
接着用戶返回並重新激活了app

00:50:34.501 --> 00:50:37.337 
然後系統再次顯示了步驟3的屏幕截圖

00:50:38.005 --> 00:50:40.607 
記住我們紫色是在工作
這是相同的屏幕截圖

00:50:41.975 --> 00:50:47.948 
現在這個在家裏在家裏的系統會從這個
淡出到活躍狀態的app

00:50:48.749 --> 00:50:49.616 
這看起來不太好

00:50:49.850 --> 00:50:53.720 
這真的是一個醜陋的的動畫
而且沒有做到用戶想要的

00:50:54.221 --> 00:50:55.923 
他們在一個地方
然後離開app

00:50:56.023 --> 00:50:57.491 
接着又返回
於是顯示了其它地方

00:50:57.558 --> 00:50:58.392 
這不好

00:50:59.626 --> 00:51:01.828 
所以我們應該做的是從頭再來

00:51:02.930 --> 00:51:05.999 
我們在常規寬度
系統將把我們的尺寸調整至緊湊類別

00:51:06.934 --> 00:51:08.001 
我們應當調整尺寸...

00:51:08.068 --> 00:51:12.840 
我們應當把app調整回
原先不活躍時的狀態

00:51:13.974 --> 00:51:16.410 
然後用戶激活這個app

00:51:17.177 --> 00:51:19.112 
系統顯示屏幕截圖
這是相同的事項

00:51:19.746 --> 00:51:21.915 
我們淡出到活躍的app
這是同樣的事項

00:51:21.982 --> 00:51:22.816 
無縫連接

00:51:23.684 --> 00:51:25.352 
那麼這就是您想要處理問題的方式

00:51:26.887 --> 00:51:31.525 
當app不活躍而且尺寸又變換時
保持同樣的外觀

00:51:32.192 --> 00:51:33.227 
您可以這麼做...

00:51:34.461 --> 00:51:38.532 
當您的app處於不活躍狀態時
記住您的尺寸和狀態 在哪一頁

00:51:40.000 --> 00:51:42.669 
當您的尺寸變換時
而您仍處於不活躍狀態

00:51:43.237 --> 00:51:45.539 
並且尺寸又返回到最初尺寸

00:51:46.273 --> 00:51:49.243 
那個應用記得您的狀態
回到最初的頁面

00:51:54.281 --> 00:51:55.782 
那麼我們進入最後的兩項指南

00:51:55.849 --> 00:52:00.654 
這會關係到接下來我們將談及的
多任務執行相關講座

00:52:00.721 --> 00:52:02.589 
不過首先我想介紹一些術語

00:52:03.757 --> 00:52:04.958 
那麼有兩個app在運行中

00:52:05.659 --> 00:52:08.896 
主app是那個全屏啓動的

00:52:09.463 --> 00:52:12.099 
這就是您一般在app運行時所想的

00:52:13.200 --> 00:52:16.170 
當您Slide Over另一個
app 我們稱作第二app

00:52:17.304 --> 00:52:21.074 
現在不管您怎樣調整app的尺寸
它們都保持不變 它們始終是一樣的

00:52:22.242 --> 00:52:24.978 
通常我們用完全相同的方式
對待這些app

00:52:25.045 --> 00:52:26.680 
它們確實沒有太大區別

00:52:27.047 --> 00:52:32.085 
區別就發生在當我們討論資源時
那不可被輕易共享的兩個app

00:52:33.187 --> 00:52:35.289 
其中之一可能是一個終端顯示

00:52:36.256 --> 00:52:41.261 
如果您用AppleTV銜接把您的
iPad插入電視或使用飛機鏡像

00:52:41.862 --> 00:52:46.600 
您可以在iPad和外接屏幕上
同時顯示UI

00:52:47.901 --> 00:52:52.039 
使用多任務執行只有主app
可以看見外接顯示

00:52:52.306 --> 00:52:54.141 
不是第二app

00:52:55.876 --> 00:53:01.415 
通常app使用外接顯示會在iPad
和外接顯示屏上分隔它們的UI

00:53:01.481 --> 00:53:04.151 
當一個顯示屏被激活
又或者當用戶接入裝置時

00:53:04.718 --> 00:53:05.552 
那是他們所期待的

00:53:05.619 --> 00:53:08.155 
他們只是接入什麼裝置
然後就會期待什麼事情會發生

00:53:08.322 --> 00:53:10.424 
現在的多任務執行有一個怪癖

00:53:11.358 --> 00:53:12.960 
比如說您的app是第二app

00:53:13.961 --> 00:53:17.064 
當用戶快速調整其尺寸至主app時

00:53:17.264 --> 00:53:18.265 
只要它處於全屏幕狀態

00:53:19.566 --> 00:53:22.336 
這時候您的app就會得到一個通知

00:53:22.469 --> 00:53:25.839 
說有屏幕可用
並且外接屏幕可用

00:53:26.874 --> 00:53:31.879 
如果您的app選擇快速打開其UI
並且在iPad和其他屏幕分隔顯示

00:53:32.279 --> 00:53:34.815 
這或許不是用戶所希望的
但這完全取決於您的app

00:53:35.516 --> 00:53:36.817 
那麼在您的app中試一試

00:53:37.150 --> 00:53:39.086 
確保您所做是對用戶有用途的事項

00:53:41.688 --> 00:53:43.357 
最後一項指南是關於性能方面的

00:53:43.423 --> 00:53:46.393 
同樣的我們有關於這方面的完整講座
所以我只會提及一些要點

00:53:47.294 --> 00:53:48.228 
我們之前說過

00:53:48.929 --> 00:53:52.533 
如果您的app對於尺寸轉換無法做出
適當的應對 它將會被終止

00:53:52.666 --> 00:53:55.969 
所以在尺寸變更時
盡您所能少運行程序

00:53:58.005 --> 00:53:59.673 
如果您有任何做起來比較慢的事項

00:53:59.740 --> 00:54:04.411 
採用完成區塊和“視圖將轉移到尺寸”
或“將轉移至特徵組合”

00:54:05.612 --> 00:54:07.281 
r同樣的在動畫區塊當中

00:54:08.282 --> 00:54:11.218 
不要任何做多餘的佈局排版
也不要調用“在需要時佈局”

00:54:11.818 --> 00:54:15.923 
系統會在適當的時候做出佈局排版
並且妥善利用這點優勢

00:54:16.123 --> 00:54:20.127 
僅僅調用“設置必要佈局”來完成佈局
因爲佈局相當耗費時間

00:54:22.663 --> 00:54:24.898 
這就是策略
這就是指導方針

00:54:24.965 --> 00:54:28.402 
現在您已經知道很多關於如何讓
您的app更優秀地運行多任務執行

00:54:31.438 --> 00:54:34.508 
您已經知道怎樣和爲什麼要在
您的app當中採用多任務執行

00:54:35.709 --> 00:54:38.412 
您知道自適應性
自從iOS 8就已開始普及

00:54:38.679 --> 00:54:40.814 
我們在iOS 9當中做的
並不是一個很大的延伸

00:54:41.748 --> 00:54:46.320 
您知道怎麼提供好的用戶體驗

00:54:46.386 --> 00:54:47.421 
您有技術

00:54:48.255 --> 00:54:51.959 
因此您的用戶想要採用多任務執行
讓他們使用吧

00:54:53.627 --> 00:54:55.596 
想了解更多信息
請查看我們的文檔

00:54:55.662 --> 00:54:58.732 
特別是
“在iPad採用多重任務處理改進”

00:54:59.399 --> 00:55:00.467 
查看我們的代碼示例

00:55:01.268 --> 00:55:04.505 
您可以和DTS
即研發這論壇的技術支持對話

00:55:04.938 --> 00:55:07.641 
一般的查詢 請詢問庫爾特羅赫特
他是我們的傳道士

00:55:08.141 --> 00:55:10.677 
如果您有更多問題
我們還有更多的講座

00:55:11.211 --> 00:55:14.781 
再說一次如果您想找到
picture-in-picture或共享相機

00:55:14.915 --> 00:55:17.284 
請到去“媒體爲基礎的多任務執行
app概要”

00:55:17.985 --> 00:55:20.120 
如果您想知道怎樣做一個好公民

00:55:20.187 --> 00:55:23.624 
比如通過app共享CPU或存檔資源

00:55:24.358 --> 00:55:26.159 
請去“優化您的多任務執行APP”

00:55:27.327 --> 00:55:29.763 
最後到“Cocoa Touch
與多任務執行室”來拜訪我們吧

00:55:29.830 --> 00:55:31.231 
我們會針對您的app協助您

00:55:32.432 --> 00:55:34.935 
感謝大家今天的到來
一起與多任務執行向前邁