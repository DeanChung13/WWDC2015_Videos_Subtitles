Core Location中有什麼新料
下午好 歡迎參加“Core Location中有什麼新料”
我的名字是亞當·德里斯科爾我是Core Location
框架團隊的一名工程師
今天我很高興爲你們呈現這次會議
這是因爲現在事情越來越複雜了
正如你所知道的我們現在有了Apple Watch和iPhone
因此我們認爲我們應該重點關注簡化
我們怎樣才能簡化你們的任務
今天我們想給你們準備了一些好東西
你們中可能有人是第一次接觸到Core Location這個框架
我想我要先來給你們一個概述看看我們做的事
看看我們的一系列API
用戶也就是購買你們的apps的人瞭解
Core Location決定你們能否使用它的也正是用戶
你不能冒險訪問他們的位置
你需要請求權限 我們也有API可以讓你請求權限
之後我們還有“生活必需品”也就是位置更新信息
你用來獲取用戶當前的位置的就是API的這一部分
自從iOS 8開始我們引入了室內獲取地址的能力
這裏的室內可以是像機場購物中心這樣的大型場所
並且我們還有統稱爲監視APIs
這些APIs可以允許你指定一件你感興趣的事件
這樣當這個事件發生時即使你的應用程序沒有處於
運行狀態也可以運行起來以便獲取相關的信息
第一個API是一個區域監視
這個API允許你指定一個地理區域或者指定一個
基於iBeacon的區域這樣當用戶進入或者離開
那個區域時你的應用程序就可以後臺啓動
我們還有訪問監視這是一種互補技術
這個API可以允許你指定當用戶到達或者離開某個位置時通知到你
而你無需提前知道這個位置是什麼
它可以提醒多種類型的事項如果訪問監視設爲
日誌類型的事項時那麼當我靠近一個商店時就會提醒我買牛奶
我想知道我今天都去了哪些地方做了哪些事情
我們還有其他APIs、位置、地理編碼
我今天就不展開講了
我們也對許多這些區域API做了改進
不過我想專門提一提室內位置
室內位置更精確了
檢測樓層的變化也更快了
最重要的是示例也被重寫了
使用了MapKit因此就更簡便了
如果你認爲這個與你的用戶有關係
那就去看看吧對你來說把它用起來應該是很容易的
我們會把會議的大部分時間用來談論其中的兩點
即授權以及位置更新
具體來說我們今天會分成四部分來講
第一部分是後臺位置
你可以用我們的API的這一部分來記錄
用戶到過的位置
你可能開發了一款跑步追蹤app你的用戶想要
得到一張他們的軌跡地圖或者是一款導航app
你想通過開啓方向給他們指路
針對其它的位置使用案例我們有了一些新的API
你只需要知道用戶當前的位置即可
你不想有繪圖能力但是卻希望用他們的當前
位置信息告訴他們最近的商店在哪裏
諸如此類的事情
然後我們要講講授權講講授權在OS 8上的變更
講一講現在有了AppleWatch它又該怎麼用
最後我們會深入講一講針對Apple Watch的最佳實踐的
具體細節希望如果你開始用的話能給你提供諸多幫助
好 背景位置更新
我們決定不要了
開個玩笑
在iOS 2或者3上幻燈片看起來是這樣的
如果你是iOS 2或者3的用戶那麼你就記得當你在跑步時
如果你想獲得一張軌跡地圖你必須讓手機在你的口袋內處於激活解鎖狀態
自從iOS 4開始藉助於我們稱之爲
“後臺方式”的操作方式我們對此做了很大的改進
你的應用程序默認仍然是僅在前臺運行
不過現在你可以在Xcode中使用這個便利的功能標籤
說你想在後臺保持保持活躍狀態
不被掛起以便於接受位置更新信息
然後它會在你的信息plist中設置一個數值鍵
靜態用於整個app這個鍵就是UI後臺方式
那麼之後會發生什麼呢？
我們稍後會來看一個視頻
不過在那之前讓我們看看...
讓我來列出視頻中需要留意的地方
它可以允許你...當用戶使用你的應用程序時啓動位置更新
然後假如說用戶感到無聊了
他們又去查看了郵箱他們的音樂一個小的演示
也許他們會盯着主屏幕盯上一陣
但是在此期間你還是可以訪問用戶的位置
之後用戶重新啓動了你的app
你就可以停止會話停止訪問他們的位置
這樣就可以避免因爲使用GPS而損耗他們的電量
視頻來了
用戶啓動了我們的app
中間那裏有一個按鈕表明他們希望我們
開始記錄位置那我們就開始了
看視力表注意看正在計算數字
他們去過哪裏
用戶把我們的app切換到了後臺
你可以看到現在頂部那裏就是我們稱爲藍條的東西
藍條表明我們的示例app現在仍然處於運行中
這樣用戶就可以通過點擊這個藍條返回app
用戶剛剛點了藍條
注意看視力表中的數字變大了
當然在視力表中還不算大
這就表明我們持續接收到了位置更新信息
這是統計了我們接收到的位置更新信息
我們持續在後臺接收到了位置更新信息
用戶要求我們停下來那我們就返回到起點
App開發者已經用這個打造了
很多很棒的體驗
然後我們在想我們能否再做些什麼來對它進行優化
這裏是否還有優化的空間？
在簡化這個主題下你可以看到
一旦用戶在你的應用程序中選擇了這項功能
那麼它就有了一項責任因爲如果你持續在後臺運行
用戶就可能不知道這個還在運行
那麼如果出現一個bug或者在你的UI中發生一個
極端狀況那麼你就會在用戶沒有意識到的情況下用去大量的電量
我們認爲這個風險很高我們想要降低風險
這樣一個bug或者一個意料之外的狀況的後果也可以降低
你現在需要立即做的一件事我們想要改進的一件事
就是當你的app進入或者退出前臺的時候
你必須與你的app經歷的轉移
進行緊密的耦合
一旦你選擇開始運行並且在後臺使用用戶的位置時
你必須告訴我們你不想去後臺
也只有在這之後你纔會進到後臺中
然後就到了我們在視頻這裏看到的這個視圖
你在你的app中可能已經看過這個視圖了
我們對示例做了修改在委託回調中
停用了位置更新以便表明
它進到了後臺中藍條一閃而過然後消失了
這可能會讓用戶感到困惑
你可以注意到這裏的統一特徵是
你註冊要求能夠以一種連續的方式在後臺校驗
訪問用戶的位置但是這個卻是以一種
全權委託的方式爲你的整個app永久實現的。
實際上你也僅僅希望在特定時候這麼做
僅僅當用戶在後臺積極使用你的app時這麼做
自從iOS 9開始我們就有了一個新的API可以幫你進行表達
這個API叫做“允許後臺位置更新”
這是一項你可以在你的位置管理器中設置的屬性
如果你有多個位置管理器那麼在適當的時候
你就得分別對它們進行設置
你可以設置不同的位置管理器爲不同的值
設置好後起什麼作用？
如果你把這個屬性設置爲“是”
那麼你就選擇了在你的信息plist中
你請求的那種行爲
如果你說你想要繼續在後臺運行這種權限
你把這個設置爲“是”然後啓動了位置更新
那麼你就會保持在後臺運行並接受那些位置更新
而如果你把它設置爲“否”你就不會在後臺繼續運行
好的 那麼關鍵的問題來了默認值是什麼？
設置時我們怎樣才能知道？
默認值是“否”
我想再說一遍
這裏的默認值是“否”
如果你的應用程序需要後臺運行
以便記錄位置軌跡或者以便進行導航
那麼當你採用iOS 9時你就必須進行變更才行
你必須到app中看看用戶是否同意你做這個
看看用戶是否真的想讓你在後臺記錄一個會話
然後在那裏把這項屬性設置爲“是”
當用戶停止後把它設置回“否”
一旦你設置好後你就無需擔心出現
直接案例時如何從前臺過度到後臺
這樣當你被切換到後臺時你就無需急匆匆關掉
位置更新因爲那時你已經配置成了
繼續後臺運行或者停止後臺運行
好 因此如果你的app使用了後臺位置更新
那麼你就必須進行變更
兼容性怎麼樣呢？
App Store中的app會被中斷麼?
不會App Store中的app都不受新規定的約束
但是當你採用iOS 9 SDK時你還是需要儘快完成變更
如果你想支持那些不是最新最棒的iOS上面的用戶又該怎麼辦？
他們可能仍然在運行iOS 8
對此你可以按標準方式處理
在你的app上設置一個最低部署目標然後運行時進行校驗
對選擇器做出響應，
看看你當前運行時遵循的位置管理器
是否有這項屬性
在Objective-C中看起來是這個樣子
Swift中對選擇器做出響應
我們在Swift中有了一個新的高檔屬性
可以對此做出響應
如果運行時你的位置管理器懂得
與這項屬性相關的知識你可以把它設置爲“是”
否則你就可以假定它已經設置成了“是”
你無需再設置它了
壞消息是這也意味着你無法把它設置爲“否”
以便獲取額外的保護
好 再簡單講講側邊欄因爲我知道你們中的很多人
都對這種帶有聽覺提示的後臺位置更新感興趣
當用戶把他們的手機放在 臂環上或者放置在他們的儀錶板上時
，這或許是與他們進行溝通的首選方式
自從 iOS 9開始core audio團隊就引入了這個新的
長文件名的選項
它的作用就是你可以使用這個選項來表明
你即將進行語音輸出
這樣系統就可以把你和用戶可能有的其它輸出混合起來
這樣不會把你混淆起來但是可以把你和音樂混合起來
請去看看“Core Audio中有什麼新料”
就是昨天舉行的如果適合你的話請去看看
後臺位置
如果你不需要持續訪問用戶的位置時
那麼，又該怎麼辦呢？
你不是想爲他們繪製一幅地圖
你只是想要告訴他們他們當前所處的位置
自從iOS 9開始我們就爲此引入了一項新的方法
叫做“請求位置”
從根本上說它就是把你過去爲了實現
這個目標需要完成的過程給自動化了
如果你接觸過Core Location
那麼你可能已經知道了規矩
你開始更新位置了
你看到那些更新信息進到你的委託中來了
你可以注意到這些信息一開始進來的很快
但是精度卻不是最高
那麼你就需要密切關注精確度等級了
弄明確什麼時候精度足夠了什麼時候沒有獲取更高的
精度的空間了在繼續等待和獲得收斂精度
並使用那個精度的位置之間進行正確的權衡獲得了位置後
不要忘記停掉位置更新
我們會自動替你停掉位置更新
當你調用請求位置時
我們會開始自動獲取位置更新
但是我們不會把它們給到你的委託回調中
我們會根據你要求的精度在內部取得它們的閾值
然後我們會用你需要的位置信息回調一次你的委託
它會使用你的邏輯確定最佳位置是什麼
在那個時候我們會自動爲你停掉
位置更新這樣你就沒用忘掉停掉它
或者在那裏出現bug的風險
好的 那麼...
我對它的工作原理對如何解釋我們在幕後
所做的事有了一個較爲直觀的瞭解
你不能通過使用這個API來生成它
別忘了我們僅僅給了你一次委託回調
來看看它是什麼樣的
那個響鈴表示的是你設置的期望的精確度
你可以把它當成一個直徑來看
你想要的固定精度應該比這個更嚴格
當更新信息進來時我們要在地圖頂部這裏用曲線圖來表示
現在你可以看到某個位置的中心是用一個
看起來像是地圖的黑色圓圈來表示
精確度等級是用一個大直徑半透明的圓
來表示我們馬上就可以看到
注意看隨時間而發生的變化
第一個位置很快進來了但是精確度不敢恭維
隨時間推移越來越精確了
當精確度等級足夠高時我們就會接受這個精確度
給到你的委託回調的就是這個位置
好 我之前已經提到過這個是可以配置的
可以配置你期望的精確度
那麼該怎麼設置呢？
好消息是我們已經在位置管理器上有了一項叫做
“期望精確度”的屬性
你可能已經熟悉了這項屬性
你可以用它來控制開始更新位置時
你期望的精確度是什麼類型的
它也同樣適用於請求位置
讓我們略微調低下
把它縮小精確度更高
現在可能又太高了
我們重新運行下模擬器看看會發生什麼
第一個位置我們可以看到繼續在收斂
有時候你的收斂會出現迴歸
不過整體趨勢是收窄直到你達到某種平衡點
在這一點注意看我們尚未真正滿足
精度標準
我們的精度沒法再繼續提高了
那麼此時我們就會把這個返回你的委託回調中
這就意味着當你在你的請求位置中設置了一個期望的精確度時
你得到的位置的精確度可能會更高
對於精確度來說是一個更小的值
或者視我們獲取的方式不同精確度也可能更低
你可能運氣好遇到了第一種情況
也可能出現了第二種情況遇到了具有挑戰性的情況
它們是在這個委託回調上發送給你的
位置管理器的位置管理器會對位置進行更新
記住最後一個參數是一個陣列
我們只會給你一個位置
因此它就是陣列中的零元素
另一方面如果用戶做了任何他們想做的事
如果你請求位置的環境
是我們沒法建立用戶位置的環境
可能是在煤礦底部我們就會在位置管理器上
回調失敗錯誤
因此我們向你保證
只要你不中斷請求位置你一定會得到
這兩種回調中的一種
這樣如果你願意的話你就可以斷開
某些應用程序邏輯
你從錯誤回調中得到的錯誤是“KCL錯誤位置未知”
請求位置時還有兩件事要記住
第一件事是開始更新位置是和它互相排斥的
因爲我們使用的是相同的委託回調
如果你已經有了一個開始更新會話已經開始了
並且沒有停掉那麼請求位置就會被忽略掉
另一方面如果你有一個活躍的請求位置
但是我們仍在收斂我們尚未爲你選定一個位置
而你又調用了開始更新那麼它就會接管過去
請求就會被取消
你也就會開始向委託回調發送定期更新
互相排斥 你一次只能有一個
開始有效地更新位置享有優先權
此外就是你可以使用停止更新位置
來取消一個請求
如果用戶從你之前已經請求了他們的位置的
地方開始導航我們希望你停止更新位置
你對它們不再感興趣了我們也可以省點電
很好 我們今天爲你們準備的就是這兩個APIs
這就是我們首先要講的兩點
那麼我們現在再來談論一個
你們都非常感興趣的話題
也就是你們到這裏要看的
就是Apple Watch
關於Apple Watch要知道的第一件事就真的離不開
Apple Watch和iPhone
這兩種設備它們是一對的
它們彼此之間有直接的關係
我們想讓它們密切配合
以便獲得儘可能好的用戶體驗
還有一件事在某種程度上反映了這種情況就是你把你的apps交付給
你的用戶的方式
現在你可以編寫watchOSapps了 但是用戶並不是通過一個
watchOS App Store來得到它們的用戶是通過現有的App Store
在他們的iPhone上得到一個包
當他們這樣做的時候如果他們配置系統來這麼做
或者他們選擇這麼做iOS就會把那個元件
送到Apple Watch上
你從中可以學到的就是你的watchOS元件
和你的iPhone元件之間同樣也有緊密的關係
對於Core Location來說它們就是一個相同的授權身份
因此如果你有了授權無論是什麼類型的授權
無論你處於什麼樣的狀態它都適用於兩者
好 這是它的一個子話題
第一個授權有一些難題
我們會遇上的
第二個是協作
既然我們有了兩種設備你的app分成了兩塊
那麼我們怎樣讓它們一起工作呢？這裏有一些最佳實踐可以降低複雜性
好的 我們來快速小結下確保我們在授權方面的瞭解是一致的
用戶知道他們掌控着一切
因此你需要請求訪問用戶位置的權限
要麼是通過使用中授權請求
要麼是通過始終授權請求
“使用中”和“始終”
這些都是iOS 8上的新名詞
它們是什麼意思呢？
當你使用這些不同類型的授權時
你使用位置的能力會發生怎樣的改變呢？
希望這個表格可以幫助回答那個問題
在iOS上我們會考慮哪個app請求了使用中授權
並且被授予了權限哪個app請求了
始終授權並且被授予了權限
先講一下當你在測試上簽名後得到的三點東西
如果你有這些中的某種授權
並且用戶點擊了你的app
那麼你能訪問他們的位置嗎？
答案是“能”
毫無疑問你已經知道這個了
那麼我們來個稍微複雜點的例子
這個並不適用於需要“始終”授權的apps
因此此類apps中沒有事務
用戶也沒有預期
如果你請求“始終”授權
你基本上就是在請求全權委託
當你訪問他們的位置時用戶並不期待知道這一點
我們不會給用戶提示線索
好的 在這個例子中我就是間歇地在後臺中調用了
此時你就是通過後臺來訪問用戶的位置的
不過這與前臺啓動或者與用例中已知的其它情況無關
這是一個後臺app刷新啓動
或者一個區域監視啓動
在這個例子中要訪問用戶的位置
你就需要“始終”授權
這是因爲用戶並不知道
如果期待用戶在“使用中”考慮你時
他們就不能直觀地理解當前的情況
因此如果是“使用中”授權你就無法訪問Swift
好的  簡單再現了下監視API就是爲了我們看到的這個
有個事實鮮爲人知即在兩個例子中
你都可以訪問監控程序API區域監視
在使用UI本地通知時如果你是“始終”授權
或者“使用中”授權那麼你就可以訪問它
這裏的通知包括一個觸發事件CL區域
無論你何時進入或者退出那個區域
用戶都會得到通知他們就可以決定是否讓你通過
用戶的消息很靈通
他們可以毫無保留地知道當前的情況
那麼對於watchOS來說又會發生什麼改變呢？
記住我們談論的僅僅是你的app的watchOS元件
而不是iPhone app和Watch app的複合體
那麼在Apple Watch上你能做什麼？
當用戶在你的Watch app上翻看時你可以訪問他們的位置嗎？
可以 但是還是需要延伸到後臺
我們僅在watchOS上提供這個請求位置API
你可以訪問用戶的單一位置
但是你不能啓動一個後臺追蹤會話
你也不能在前臺進行追蹤會話
爲什麼？
Apple Watch是專門圍繞快速瀏覽而優化的
我們並不希望當用戶在街區散步時
坐到那裏舉着他們的胳膊盯着看很長時間讓他們疲憊不堪
在Apple Watch上使用請求位置API再合適不過了
這並不意味着你不能通過Apple Watch
啓動一個後臺會話而是指用戶不能僅僅
通過與Apple Watch的交互就可以記錄他們的跑步軌跡
我們還需要iPhone的配合我們來談談到底該怎樣做
後臺間發
你的watch app可以在後臺運行的情況並不多
如果你發現你是在後臺運行
那麼只有你獲得了“始終”授權你才訪問用戶的位置
watchOS最常見的情況最常用的表最相關的行中都沒有
監控程序API不能用
你無法...我們無法在Apple Watch中
後臺啓動你的app
不然要這些APIs就沒有意義了
好 我多次提到了“使用中”這個概念
我們來深挖下看看它具體指什麼
如果是在前臺那麼你的app就被認爲是在“使用中”
對於iPhone和Apple Watch來說都是如此
如果用戶是正在活躍地翻看它
不過因爲這種情況不多不需要持續更新
沒有後臺追蹤Apple Watch只在這種情況下才被認爲是“使用中”
但是在iPhone上如果你有藍條那麼你也可以被認爲是“使用中”
藍條意味着你啓動了一個會話並且會話仍在繼續
那麼這裏統一的特徵是什麼？
我們怎樣才能擴展到Apple Watch中？
這兩者都代表不同類型的你對用戶可見
是的 更具體地說就是用戶意識到了你在那裏處於運行中
正在代表他們做一些事
如果用戶僅僅使用了Apple Watch
Apple Watch就會給iPhone發一條消息
讓後者代替它做一些事此時
即使iPhone位於用戶的口袋內用戶沒有使用iPhone
使用狀態也會傳送到iPhone app上
他們使用的是兩者的聚集體整個複合體
授權是在複合層面進行處理的
你需要使用一個API發送消息從而實現這一點
關於這個API我們稍後再講
當你在iPhone上處理來自Apple Watch的工作時
你就會認爲是在“使用中”
那麼首先你是怎樣得到授權的呢？
授權是需求你請求的
我之前提到的兩個API請求“使用中”授權
或者請求“始終”授權
你可以通過iPhone來實現麼？通過Apple Watch來實現麼？
還是兩者都不行呢？
這些都很無趣
那麼這個在iPhone上看起來是什麼樣的呢？
用戶會啓動你的app
然後他們會做一些事表明
你需要訪問他們的位置
然後你會意識到你還沒有獲得授權
你會調用請求“使用中”授權
你可以在對話框的頂部看到
發送給用戶的請求
下面是你的使用描述鍵
你可以在你的apps信息plist中對此進行設置
解釋一下你使用用戶位置的目的
我們希望你能認真解釋一下
這樣用戶可以理解他們爲什麼需要授權你們這項權限
用戶可以理解你的設計折衷
在這個例子中你可以看到
這裏的目的是爲了演示
這個理由就很充分
此時就讓我們允許授權
你可以立即看到位置更新啓動了
好 停止後讓我們把這個發送到後臺
總結下我們看到了什麼
當你通過iPhone請求位置授權時
iPhone會顯示一個提示這個提示你們都已經習慣了
不過要注意下AppleWatch卻什麼也沒顯示
它在那裏閒着沒事
這是因爲當用戶使用他們的手機時
他們不太可能同時使用他們的Watch
如果他們確實是在使用Watch想看看時間
或者看看那裏的那個app我們不想阻止它
那麼那時又該怎麼做？
你可以通過Apple Watch請求位置授權嗎？
是的 你也可以這麼做
它的行爲略有不同因此你只有在特定的
環境中才這麼做在其它環境中則不然
我們來看看這麼做會發生什麼
用戶啓動了你的app
然後他們導航到了你需要位置授權
才能滿足用戶的要求的地方
假設我們沒有收到過授權這是一次新的啓動
你可以請求“使用中”授權
iPhone和AppleWatch上出現了一個提示
Apple Watch出現了一個告警
Apple Watch上的告警說到“看看你的iPhone
你需要在那裏處理一條提示”
上面也有一個關閉按鈕
用戶可以點它關閉告警
它不是模態的
當你有一個未處理的請求時你應該期待看到用戶
正在和app互動
這對iOS來說是陌生的
這並不算是對提示問題做出了回答
用戶並沒有放棄他們在這裏做出決定的能力
他們只是說“別擋路”
還是爲了演示起見用戶來到他們的手機上授權給了我們
然後它很快就重置了
看起來並沒有重置不過如果你快速看一下我們得到了一個位置
你可以反覆運行直到你得到一個位置
那麼我們都看到了什麼？
什麼情況呢？
Apple Watch在AppleWatch上啓動了一個請求
Apple Watch顯示了一條報警這樣用戶就知道發生了什麼
用戶就理解了這個工作流程需要被中斷
無論他們想繼續什麼他們都需要先答覆這個授權
同你已經習慣了的一樣iPhone會顯示一條提示
重要的是用戶需要在iPhone上答覆這條提示
好的
這個看起來有點不便那麼我們爲什麼這麼做呢？
兩條充分的理由
第一條我們真的需要你在那個
用途描述鍵中認真解釋下你的用途
如果你解釋過了那就意味着用戶需要在Apple Watch滾動查看
這個用戶體驗可不好
我們寧願把這條提示的大型屏幕真實狀況顯示在iPhone
我們想要讓用戶控制授權的用戶體驗很棒
現在iPhone就是總體控制
位置授權以及隱私授權的根目錄
我們想把所有的交互都集中到iPhone上
這樣用戶就不會感到意外
如果用戶願意的話他們之後就可以到設置中
隱私中位置服務中對設置機進行變更
好的 之前我提到過請求位置就是我們現在
在watchOS上提供的直接通過watchOS讀取用戶的交互的API
那麼你可以期待什麼類型的精確度呢？
如果你在Apple Watch上發出了請求
那麼視你手邊是否有iPhone
如果你有那麼你可以得到一切信息
甚至包括精確到米的室內位置
另一方面如果你沒有那麼你可以據此製作原型
理解用戶的預期就像假如你指明瞭
一個請求的位置一樣
請求期望的KCL一百米位置精確度
這個位置精確度不是最佳的但是要記住
它的精確度往往要大於一百米
事實上如果環境理想的話你甚至可以用它來繪製跑步軌跡
現在沒有更新所以不要試
這裏還有一件事要知道即“最佳努力”
因爲Apple Watch的網絡連接狀況不是很好
它可以處於假如說一個異常位置
用戶對它的期望不高
甚至無法在用戶的環境中確定用戶的位置
沒問題 這是最佳努力的免責聲明
不過還是很努力了
當我們手邊有iPhone時我們就可以加倍努力
使用iPhone來更多地瞭解環境
緩存一段較長的距離
比如說用戶跑步那麼除非
他們跑的步很遠否則就沒問題
不過當你試圖爲你的用戶確定用途時
要把這點考慮進去
無論期望用戶是否隨身攜帶iPhone
如果用戶是在他們的家工作場所或者某個他們
熟悉的場所附近使用你的app
那麼大概他們就不需要攜帶
另一方面如果你期待用戶在旅行中使用你的app
或者任何用戶關閉他們的流量套餐 避免收到
天價話費賬單時使用你的app
你都需要鼓勵用戶隨時攜帶iPhone
哪怕他們關掉了流量
讓我們假設我們手邊有一臺iPhone
如果你需要持續的位置更新
這在後臺中很常見或者你需要區域監視
或者爲了任何你能在iOS上用 但是卻不能
在watchOS上用的事情你就需要你的iPhone進行協作來實現了
那麼我們該怎麼做呢？
有一個很棒的會議實際上就是在今天的
這場會議之前在這裏舉行的就是午飯之前舉行的
不幸的是它已經結束了
不過你可以去蘋果全球開發者大會app上面看視頻
如果你之前參加了 很好
那麼這就有點像是一個概述了
這是一個框架的一部分與“位置”有很大的關係
首先是WC會話
這個類代表了Apple Watch和iPhone
之間的連接
上面有兩個方法與我們的關係很大
第一個是SendMessage回覆處理程序出錯處理程序
第二個是“更新應用上下文”
SendMessage回覆處理程序出錯處理程序是雙向的
你可以從任意一方發送
“更新應用上下文”則必須通過iPhone啓動
我們來看看它們在實際上是如何爲我們工作的
我們首先要使用SendMessage回覆處理程序出錯處理程序
來從Watch app向我們的iPhone app
進行通訊
用戶導航到了app中我們需要另一端
提供幫助的地方
他們要求我們啓動起來
我們把那個消息發送過去你可以看到app啓動了
藍條也出現在了視頻中
表明它可以進行持續的後臺位置會話了
它可以把那個信息發送回去了
你就可以看到更新顯示到了
watch顯示器上如果不是太小的話
我們把它停下來把東西都收起來
可以了吧？然後我們就可以回頭看看那裏發生了什麼
關鍵一點如果你給iPhoneapp發送了一條消息
而app當時不是處於運行狀態那麼如有必要的話
它就可以通過Apple Watch到iPhone的SendMessage啓動起來
因此你就無需擔心讓用戶啓動app
他們可以把手機放到他們的口袋中
一切事情都會自動搞定
注意“使用中”狀態傳送出去了
我之前提到過這點你剛纔看到它起作用了
因爲用戶正在使用Watch正在使用你的app
這就意味着它就有權在
iPhone上啓動一個後臺位置追蹤持續會話
這就意味着要考慮到這一點
允許位置更新標記屬性
如果你想要啓動一個持續後臺位置會話
那就把它設爲“是”如果不想
則把它設爲“否”
當用戶掏出他們的手機並且在他們使用他們的
watch時偶然看到手機的話他們就不會看到那個神祕的
藍條進進出出
換個方向會怎樣呢？
也就是從iPhone到Apple Watch
我們還是可以使用SendMessage回覆處理程序出錯處理程序
因爲它是一個雙向的API
當我們這樣做的時候你可以看到我們出了問題
我們的消息沒有發送出去
實際上 在這個例子中發生的就是
因爲Watch app尚未運行我們每次這樣做的時候
都要在我們的委託上
調用出錯處理程序
SendMessage回覆處理程序出錯處理程序是在app到手機
這種情況下啓動的而不是在手機到watch
這種情況下啓動的
也許我們應該看看我之前提到的其他API
“更新應用上下文”
這個就是手機到watch
我們可以使用這個API
當我們這樣做的時候就發生了一些不同的事情
我們的Apple Watchapp仍然沒有運行
但是我們發送的消息掛出了
尤其是最後一條消息掛出了
你不想使用這種方法
來發送三角點更新但是你想要
發送狀態更新整個上下文更新
當你這麼做的時候系統會爲你保持它
直到用戶進行更新啓動了你的app
好的你的app就運行了並且得到了
一直期待的更新
你可以看到如果你自己看它已經知道啓動了
你可以稍後通過你的phone app發送持續
定期更新更新UI
初始狀態已經就位了
更新應用上下文同樣也適合
用來進行後續通信
好的 就整條從iPhone到Apple Watch的路徑來說
有一件事要提一提看看我們引入iOS 6上面的
Core Location的這個API叫做
“推遲位置更新直到行程超時”
這個API就是系統的某種天然補碼
因爲當用戶不看Apple Watch時
你就無需讓它進行實時更新
你只要讓它進行某種程度的更新即可
實現這一點的最佳方式是對更新進行批量處理
偶然發送一次即可
這樣你就無需讓用戶的藍牙廣播時刻運行
我們也可以省點電
對於iOS來說你可以在手機上把這個API
用於Core Location以便表明
當前你運行在這樣一種延遲容忍模式
除非用戶經過了一段特定的距離或者經過了一段
特定的時間否則你都無需被喚醒
也許他們走了一英里 這是他們的步幅
如果按照距離計算你超時了
已經過去了五分鐘
或者你想要給你的AppleWatch發送一個更新
好的 就是這個
我們已經允許了後臺位置更新這是一項新的屬性
你需要對此採取行動但是它可以讓你免去
緊耦合和高風險的麻煩
之後我們得到了請求位置
這是一個新的方法位於C位置管理器上
它可以允許你刪去一些樣本
你們可能都用樣本並且在你僅需要一個位置時讓你獲取到
同時使用這兩種設備的主題就是協作
好消息是我很高興告訴大家
我們有了一個示例叫做potluck
其中演示了我們今天講的所有的東西
實際上那個app就是我們用來給這些視頻做演示的
你可以自己安裝然後運行它
希望如果你正在編寫的app不工作了
potluck會幫到你你可以找到問題
弄清楚是哪裏出了錯
這裏有很多信息
我相信你們可以很快記一下
首先是當然也可能是最重要的看看potluck
你可以通過這個鏈接看到示例代碼
向下滾動直到你到達P節那就是potluck
有一些會議我想它們都與你們密切相關
這些會議都已經結束了不過它們的視頻都在網上
待會兒你可以去看看
尤其是從頂端介紹WatchKIt 2.0
以及介紹 Watch Connectivity
我最後提到的API就是它
沒錯。
我希望你們都去看看
我迫不及待想看看你們可以用OS 9 watchOS 2
以及Core Location能打造出什麼東西繼續加油