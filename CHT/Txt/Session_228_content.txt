JAKE BEHRENS: 早上好
歡迎來到 "WatchKit 提示和技巧"
我叫Jake Behrens，
我是蘋果watchOS框架的講師
今天，我們將討論如何利用的不同的方法
去優化你在watchOS上安裝的應用
在 watchOS 1中
將會有很多我們需要討論的東西
同樣這個也適用於watchOS 2
在討論的過程中 我將會指出這些
如今 隨着之前蘋果手錶的發佈之後
在寫第一個手錶app的過程中
我們有了和很多個開發者一起工作的經歷
在這個過程中我們學到了很多
而今天我們也將會和你們分享很多關於
類似於怎樣優化你的網絡
或者怎樣減少你的下載時間等很有用的知識
所以 首先讓我們從數據和交流開始吧
正如我前面所提到
從你的web服務器上或者安裝的蘋果應用程序中 獲取信息是至關重要的
以至於你必須將一部分內容
去實際的顯示給用戶
現在，想象一下你的用戶正在車站等候
他們擡高了自己的手腕他們正在和你的應用程序進行交互
突然你啓動了一個網絡請求
然後公共汽車從拐角處開過來了
因爲他們得到了自己想要的東西所以用戶們放下了胳膊
然後他們匆忙地朝着公共汽車趕去上車然後坐下來
好了你要做的事情就是確保下一次提高手腕
他們重新回到你的應用程序中的時候
數據仍然在那兒等着他們
而不是你必須重新讀取它
所以 你怎樣纔能有效的完成這個過程呢？
好 第一部分就是你需要一個網絡請求
這是你如何獲得信息的過程
下一步你需要做的就是詢問系統是誰請求了
後臺的任務中斷處理
這種方法是向系統提出要求說“嘿 我需要一些時間
因爲我可能需要完成某個進程一旦你開始
暫停我的 WatchKit 擴展程序時”
更進一步 如果你碰上後臺任務聲明
你會需要將其保持在打開的狀態上
以便你的網絡請求能夠得以完成
那我們怎樣去完成這些呢？
現在我們要一起走過整個過程
第一件事你需要做的是設置好你的網絡請求
爲此我們將使用默認 NSURLSession
現在注意 我不會使用後臺 NSURLSession
因爲在哪種情況下
如果我們的 WatchKit 擴展程序被暫停了
其完成就會取決
於我們總的 iPhone 應用程序
如果我們要把我們能做的一切
都在 WatchKit 擴展程序中完成
所以 接下來我們要索求那個後臺任務的聲明
我們怎樣做到這一步？
做到這一步我們需要使用
“合理執行到期活動”
這一NSProcessInfo上的方法。
這一方法會向系統索求一個後臺任務聲明
並說“嘿 我可能仍需做件事情
一旦你要暫停 WatchKit 擴展程序”
做法是 你向系統傳遞一個調試字符串
這裏字符串是 networkReq
然後系統就會執行那個程序塊
現在 該程序塊就會立即被調用
當系統調用“合理執行到期活動 ”時
現在 有些事情要牢記於心
這些事情實在重要
第一件事情是該程序塊的執行
將會在一個異步隊列上安排
所以你的主隊列依然會被釋放出來用戶將能與其界面
進行互動這不會有任何問題
用戶不會感覺到有任何不同
如果 “已到期” 變量設置爲“假”那就意味着
我們的時間還沒用完
也就是 系統已經給了我們一個後臺任務聲明
然而 如果失效了
那麼久意味着系統不能給我們提供一個後臺任務中斷
這意味着系統不能正常的運行
然而 如果說我們已經有了一個後臺任務中斷
這就意味着系統可能已經覺得我們完全沒有時間了
所以便在把失效設定爲正確之後
再執行這個模塊
將會給你一段時間
來確保你已經刪除了你所擁有的任何狀態
或者在WatchKit擴展完全終止之前
你需要做一些事情
正如我所說的那樣最關鍵的事情就是這個模塊需要用異步序列的方式去執行
第二個很重要的就是一旦這個
模塊執行完畢
然後你的時間消失
它放棄了後臺的任務中斷
因此我們要做的就是確保
我們有足夠的時間去完成我們的網絡請求
可能需要兩秒
可能需要十秒
可能花更多時間
我們將會利用稱爲調度信號量的東西
調度信號量是中央調度（GCD)的一部分
這本質上允許我們用一種異步隊列的方式
去暫停執行
所以稱之爲“調度信號量等待”
與此同時 它將會暫停執行
但是 在你需要再一次重新啓動的時候
你可以請求“調度信號量信號”
現在 請注意我已經經過了一段時間
這本質上是一個超時
在這兒我已經把它設置到30秒了
當然也可以是其他數字
然而我想確定的是你知道一旦它到達30秒
我應當獲得我的數據或者報失
所以這可能有點抽象
而且是有一點點先進的概念
所以讓我們看看實際中真正需要的代碼
好的 因此我這裏有一個爲watchOS 1建立的
WatchKit 擴充
我面前是一個子集工作界面控制器
您可以看到我做的第一件事是創建一種屬性
用於執行會話數據任務
我們將要用這個數據任務來
從我們的網絡服務中提取信息
接下來將激活
並實現您隨時隨地可以網絡編碼
就這個例子來說 簡而言之
我正在做的就是即將激活
首先我會檢查數據任務的狀態
我還會看一下它是否已在運行
因爲如果用戶擡起手腕 開始了互動
開啓了網絡請求 放低了手腕
啓動了後臺時間 接着又擡起手腕
但是該請求還沒有完成 那麼我不想再次啓動網絡請求
我只會在當前沒有網絡請求運行時
再次啓動網絡請求
因此接下來我將創建一個網址
僅指向我的網絡服務
這裏它指向了應用商店的元數據
一旦我有了這個網址我就開始創建信號
稱爲“發送信號創建”
接下來我將使用一種方法 我稱之爲
“請求確認信號”
來傳送這個新創建的信號
因此 如果我們審視使用這種方法時正在發生的情形
這其實就是我們所說的“理性執行到期的活動”
我們正在調試字符串傳送如果到期設設定爲假
那就意味着我們獲得了一些後臺時間
而我正在通過我的逾時進行傳送
我稱之爲“發送信號等待”
記住 這將會導致異步隊列暫停執行
沒問題 用戶依然可以與應用進行互動
假如WatchKit擴充進入了後臺
它就保持在那裏
確保了我們有足夠的時間
完成我們的網絡請求
那麼 如果到期設定爲“真”，
這意味着我們或者沒有接收到背景任務
執行或者我們可能接受到了
但是現在系統又再次調用它說你已經超時
那麼 我們將調用一個方法
是我創建的稱作“用信號釋放執行” 
再一次傳那個信號
所有這些方法實際上就叫“發送信號”
這允許執行恢復 而且它允許完成
阻止 它也對調用非常關鍵
因爲如果我們停止執行的時間太長 系統會認爲
我們的進程已經暫停 這樣不好
因爲最後它直接停止了進程
所以，我們沒有任何機會保存狀態或做任何清理
我們直接就被停止了
好 那麼讓我們回到“意願激活”
所以我們被要求執行任務
接下來要做的事情就是我們要使用
我們的URL來創建數據任務
現在 注意到我沒有傳送它
不管我有沒有背景任務執行
背景任務執行技術
是一個獲得額外時間的方法 對吧？ 
我的意思是它不能確保但是我們希望能用此得到更好的體驗
所以我就創建我們網絡要求
因爲可能用戶正在這時用app互動交流
網絡要求已經開始並且在很短的時間應答一切都很順利
你在此還看到有一個用於數據任務的便利完成處理程序
所以當要求結束時
我將調用“用信號釋放執行”
再次傳遞那一信號
所以我們允許對異步隊列執行恢復
這允許阻止完成
然後 WatchKit擴展可以完全掛起。
這會確保系統不會認爲操作進程已掛起
這樣 一旦創建數據任務
我們就可以調用恢復來啓動這樣它可以去網路
獲取信息 我們處理其餘工作
現在
你對這項技術有了一些瞭解
可以使用它嘗試並行使
WatchKitextension內的聯網權利
這是非常不錯的體驗因爲進入到watchOS2
你就會有很多可以利用的東西
我們將對此稍作介紹
但你如果已經聯網到
WatchKitextension
這將會使你做好準備一切都已經就緒
我看到過許多例子在使用打開父代程序
使內置的iPhone app 完成聯網
這會中斷橋接
現在 在某些情況下我們的網絡服務不提供數據
數據實際已經在內置的iPhone app內
如需要得到數據
我們實際需要越過watchOS 1中的進程
從WatchKitextension
進入到內置的iPhone app
我們可以使用打開父代程序來完成
這是基於WK界面控制器的方法
可以讓我們發送信息詞典
到iPhone app並在後臺啓動它
讓它進行一些處理併發送響應
在UI程序委託上
我們選擇‘處理WatchKit extension請求響應’
這將會進入信息詞典
進行一些處理併發送響應
在使用中還需要考慮一些問題
第一如果在‘處理WatchKit extension請求’中
有任何異步操作 你應確保創建了
一個後臺任務
你想在進入該方法後立刻完成
原因是如果你離開並決定
完成一些異步操作那麼不管它是多麼瑣碎
系統會說‘好
我想我們實際並不想做什麼
那麼我就要去暫停iPhone app了’
然後 你將失去機會發送響應
另一件事是在你將發送響應時
如果使用定製對象
則應把它們變成NSData
如果使用定製的二元格式
則可以在WatchKitextension打開
這樣更可取因爲一個重要的方面
就是使數據儘可能變小這樣傳輸才最快
現在 對於設備對設備的交流我們已有很多瞭解
現在，在watchOS 2中‘打開父代程序’標爲不可用
這是因爲不再有這個必要
也不再需要
因爲現在我們有了WatchConnectivity
framework
這對我們有很大幫助
我們不僅可以在iPhoneapp之間發送信息
而且還可以輸送文件
你還可以 也應當利用
應用程序上下文
這樣就可以用最新信息
更新該上下文
同時使你可以獲得網絡上Watch app內的信息
也許這是提供的最新功能
然後 你會說‘iPhone app以後會需要這樣所以我想終止它’
它將會被轉移
但是iPhone app並未被啓動
因爲它現在實際並不需要處理任何事情
所以在這種情況下 它只是等待
下一次iPhone app的啓動
這是在設備之間完成交流的高效方式
這裏 有一個精彩的演講題目爲
“Watch Connectivity 介紹”
你應當進行了解如果還沒這樣做的話
現在 一旦我們獲得了數據就需要進行管理
和維護 然而我們需要把它存放在硬盤中
在watchOS 1中
使用應用程序組是做這項工作的一個非常好的方法
你可以使用共享的應用組集合
儲存一些模型數據或一些共享資產
內置iPhone app
和WatchKitextension
可以指向並找到它們
現在 你也可以使用共享的NSUserdefaults
但應當用於較小的狀態數據
比如 Boolean configuration
或類似數據它並不適用於模型數據
模型數據一般比較大
應以平面文件保存
在你的共享集合或數據存儲中
通常 針對watchOS 1或watchOS 2
你應考慮簡化模型
Apple Watch上的體驗與
iPhone是非常不同的
所以你想確保得到信息是你所需要的
這方面的一個例子是WWDC app
多年以來 在WWDC app之中
我們不再把實體增添到
Core Data模型中
當我們去進行Apple Watch的體驗時
我們看看它然後說
我們實際上不需要Watch上的這一切
我們對此進行了討論並且最終認識到
我們所需要的是數據的簡化版
我們僅僅需要這些演講的簡單列表
包括演講 實驗以及收藏
我們需要做的是創建一個操作在任何時間
內置iPhone app的數據可以變化
它可以輸出一套簡化的JSON文件
到共享組集合
WatchKit extension可以讀取
並予以展示
這是非常棒的體驗
設備對應設備交流的最後一種方式是
使用Handoff
Handoff是一種非常的方式可以讓用戶
從Apple Watch到iPhone上繼續一項活動
這方面的一個例子是如果你使用
Apple Watch上的WWDC app
你會注意到iPhone的鎖屏上
在要查看的特定區域的左下角
有WWDC app的圖標
現在 如果你從左下角向上滑動
就會進入iPhone上WWDC app 
你想要的位置
這對於用戶來說非常有用
使用Handoff非常簡單
你可以使用WK界面管理器
更新用戶活動
你還可以向用戶發送一個NS數據詞典
記住該詞典應
包括你需要的一切
這樣iPhone app才能使用戶到達
他們想去的位置
因此 無論你需要的數據多麼瑣碎
都需要輸入到詞典中
這樣 系統會自動爲你工作
其中之一是自動使用戶活動
在一段時間後失效
所以你什麼都不用做
給用戶足夠的時間拿出電話
去他們想去的地方
如果你再次調用‘更新用戶活動’
即是目前的活動
如果他們切換到另一應用
而該應用調用‘更新用戶活動’
即是目前的活動
現在 如果你已經調用了‘更新用戶活動’
但是當時用戶正在與你的應用進行交互
他們輕敲一個按鈕確實可以使背景發生轉換
你實際上可自己手動使用戶活動無效
如果沒有出現這種情況你什麼都不用做
因此數據足夠
我希望watchOS 1對你有用
尤其是 一旦你開始使用
WatchConnectivityframework 
它即會幫你向watchOS 2過渡
現在讓我們來談談界面組件
在你創造這個世界創建這些數據時
你最不希望給用戶的體驗
是加載指示條
你所做所有這些是爲了一個控制器
每一件東西用戶可能都會想要或需要
讓我們看看如何能夠優化這種體驗
我們如何能夠加載更快？
其中一種方法是我們可以...
通過優選加載方法和時間來實現
所以你這裏可以看到watchOS 1的
Weather app
而且我們有這個漂亮的大信息環
對嗎？我們想立刻把它呈現給用戶
但是我們還有個10日預報
這個10日預報包括另外一些圖像
表格行 數據 而我們也不一定想要用戶
等我們加載所有這些東西
因此我們採用一種技術使得我們在
‘異步分派’內加載10日預報時
call within將激活
現在，這樣做可以使得will activate完成
而一旦我們有了這個圖像
則最先顯示它
因此我們將其呈現在will activate即可完成
之後即立刻加載10日預報
而用戶實際並未看出有什麼不同
當我們向下滾動至10日預報則它已經在那裏了
但是我們已經能夠給大家所有數據立即加載
並且更快的印象了
其他你能夠做的就是少直接加載幾個表格單元格
對嗎？如果你確實有帶圖表和數據的單元格
那麼你可能只要四五個這樣的單元格
直接顯示給用戶即可
這些加載之後
你可能希望能夠在別處加載
因此看一下
同時 只要更新實際發生變更的信息即可
我見過許多數據只做了一點小小變更
就全部重新加載的例子
無需如此
只要更新這個屏面實際需要更新的內容就可以了
現在 我們一旦進入界面Builder你就能看到
我已經在爲控制器創建我的佈局了
而我將用到許多不同的羣組
我將隱藏和顯示許多不同的羣組
因爲根據某些數據或啓發
我只打算一次顯示一個也可能一次兩個
但是實際上我已經將所有這些東西
放在我的控制器裏了也就是說系統將會把這些全部實例化
因爲我們實際上並不知道你什麼時候會決定隱藏或顯示其內容
因此在某些情形下你可以對其稍作優化
方法是將這些分到一些單獨的控制器中
如果必要時你能夠加載其中某個
你確實會需要的控制器
那麼就最好了
現在 穿過我們的界面組件
其中你可能常用的是圖像
而圖像應該大小合適 來自你的服務器
或所包括的iPhone app
我看到過許多這樣的例子圖像較大
甚至比42毫米的watch還大
而該圖像其實只是隨處被重複使用和重新縮放
我這裏的意思是對於縮放 還有其他性能上的含義
而圖像不會像它看起來那麼好
因爲你沒有給它你恰好需要的尺寸
所以要給出正確尺寸的asset
在watchOS 2中這可能對視頻很關鍵
你也可以優化你的圖像
方法是採用‘設定圖像數據’而不只是‘設定圖像’
此時‘設定圖像’
只是要採用我們所用的默認壓縮
通過‘設定圖像數據’
你可以得到PNG壓縮或JPG壓縮
之後轉成NS數據blob
以傳送至Watch
從而你可以確保其大小符合你的需要
同時 我確信你聽人們說過這樣的話
你應該用asset catalog
asset catalog不僅是整理其中內容的好方法
而且還能夠爲你做很多別的事情
你可以設定該asset用於哪些具體設備
你可以設定並輕鬆看到‘是的 我有了2x asset
38毫米版本和42毫米版本’
目前 許多開發者問我...
這些插槽每一個都什麼時候用以及用在哪
那麼讓我們一起來看看。
首先是2x asset
這個用於你想要在兩臺設備
以相同尺寸採用的圖像
所以 如果是這樣你可以將它插入2x插槽即可
其他地方用法相同
你還可以針對38毫米提供具體的asset
現在 這可能就是你要插入2x插槽的圖像
沒問題
然後你可以給出一個具體的asset
針對可能大一些的42毫米版本會有所不同
現在 如果你既有38毫米
也有42毫米 沒問題也用2xasset
因爲我們要回退到該asset
所以 如果我們用38毫米版本或42毫米版本
我們要回退到2x asset
這樣 你的代碼庫將永不過時
另一項我們發現對WWDC app確實有用的技術
正在採用PDFs
通過採用PDFs 你可以從各工具中
去除整批free work
首先 你可以設定縮放因子
你還可以設定圖像生成的類型
作爲模板圖像所以如果你要給圖像着色
那麼去看看PDF的α值
如果你仍然想要你特別放入你的asset中的這些顏色
你也可以設定爲原圖
這裏所有事情就是當系統爲你打包時
當你前去創建它時我們要剪切這個PDF
所有尺寸及比例按你的需要用於你支持的設備
免費的資源很多
另一件很酷的事情是你可以把PDF文件
與位圖進行混合和匹配
你可以把這兩種格式的文件組合進一個PDF備用腳本
這樣就可以分別得到38毫米
和42毫米版本的位圖了
說完圖片 我們來說說動畫圖像
在watchOS 1裏 我們提供了一個你可以大加利用的動畫圖像序列
在watchOS2裏也可以這樣做
但是不要忘了如果你的屏幕上
同時有多個動畫圖像 嗯
你就需要做更多處理和渲染
你需要注意的另外一點是你要儘量控制
自己減少每部動畫的幀數
我見過很多的這樣的案例一段只有兩秒的動畫
裏面足足有300幀
似乎有點兒過分了
如果幀數減少了 但是仍然
可以得到你真正想要的效果
你會感到驚喜的
另一項你可以對這些動畫圖像進行的操作是逆向播放
你不必另行創建一個全新的圖像集
你只需選取一個已有的動畫文件
將時間設置爲負值
這項操作叫做“用圖片啓動動畫”
你來設定一個負時間值
請注意我的時間範圍是正向的
跨度是從0到15
這裏我沒做改變
只更改了持續時間
現在如果你喜歡動畫在watchOS2環境裏 你可以大展拳腳了
在watchOS 2裏 我們引入了一個動畫應用程序界面API
它是WatchKit的一個部分
讓你可以在你的Watchapp裏製作出流暢的
效果強大的動畫作品
它與UIView的動畫工作原理近似
你可以自行設定時間長度 還一個模塊
可以在這個區域重置一些屬性
這些最終都將合成在你的動畫作品裏
你可以設置動畫的高度 寬度 通道
內容嵌入以及其他屬性
到目前爲止 我已經見到了人們用這個程序製作的一些相當了不起的作品
而且只用到了間隔組和移動項
相當了不起
在“WatchKit佈局和動畫技術”中 還有很多有用的工具
關於圖像處理 我建議大家
關注今天的講座中"AppleWatch設計建議與技巧"這一部分
它將會從設計者心態的角度涉及很多的相關技巧
還會談及大量
你可以做和應該瞭解的操作
所以 一定要關注
配置的最後一塊是文本輸入控制器的使用
現在 很多開發人員問我怎樣才能
使用戶直接從我的UI進入?聽寫UI
他們不希望自己的用戶要經過
中間篩屏幕 並不停地敲擊麥克風
這樣做相當 相當直接
你只要在調用“目前的文本輸入器與建議”時 把建議設定爲零
然後把“允許輸入模式”設定爲普通
這樣就可以把用戶從你的app直接
轉入聽寫UI然後再返回你的app
極其簡單
現在我們要談談通知機制
消息通知是Apple Watch上一項意義重大的體驗
Apple Watch能夠如此操作簡便 表現驚人
很大程度上歸功於此
讓我們看一個遠程通知的有效載荷的例子
讓我們瀏覽一些你應該清楚的
爲了讓用戶的手腕得到最好
最高效的體驗而使用的技術
首先要注意的是你應該正在使用報警鍵的字典值
這讓你可以不僅提供一段正文
還可以設定一個標題
而且這個標題可以被用在short-look通知裏
所以當用戶在Apple Watch上收到通知時
他們首先看到的就是你的app的又大
又漂亮的圖標 然後要看到的是在屏幕底部的你的app的名字
如果你在有效負荷裏提供了一個標題
圖標和app名稱之間看到那個標題
這樣可以使通知的內容大爲豐富 
非常了不起 因爲那麼多的用戶 
要看他們的手腕他們會看到那條通知
並根據其信息決定他們是要繼續看
long-look 通知
還是把它先放下 過一段時間再到通知中心查看
所以要好好利用它
另一個要運用的功能是categary(類別)
Categories（類別）讓你可以指定
使用記事板中的具體哪一種控制器
來發送某種類型的信息
所以如果你點擊通知類別對象
你可以在這裏看到 你可以給它設置
與在有效負荷中相同的名稱所以你可以給每條通知設置
文本顏色和標題顏色
所以你就有很多辦法
可以給通知設置多種屬性
給用戶更好的體驗
現在是最後一步 如果你想讓客戶收到通知
聽到通知提示音並收到觸覺反饋
你需要設置音量值爲默認值
這樣可以確保
他們收到提示音和反饋
現在 我非常高興地告訴大家你也可以用UI本地通知來實現這些效果
所以 這些設置不僅可以用在遠程通知
現在 共有兩個通知的概念
第一個是動態通知
你可能在有效負荷中收到一些信息
你需要處理這些信息你需要得到一種資產
你需要進行一些操作 然後你要上傳
更多豐富的內容到你的動態信息中
還有一種靜態信息
很多人問過我哪裏會用到這種信息
靜態信息總是由通知中心發出
所以如果用戶點擊通知中心發出的信息
他們一定會看到靜態界面
所以你要確保這同時是一個很好的體驗
使用靜態通知的另一種情況
是你的動態通知下載時間過長
你可能正在處理一些數據從網絡檢索
一些資產 而且需要很長時間
那麼我們就要稱之爲損耗
並以靜態信息的方式立即爲客戶提供一些有價值的信息
現在我們終於可以聊一聊Glances
有了Glances就可以爲客戶提供
有價值的及時信息
你可能見過這樣的情況在隔了一會兒
查看Glances時試圖顯示
內容有了更新
你在頁面底部看到這個更新了的最近的標題字符串
在頁面上端右部看到這個旋轉的進度指示器
但是也許你看見它的時候正在下載信息
所以 讓我們再看一遍
你正在下載內容一切進展順利
然後 哦 內容去哪兒了 嘣
更新完全停止了
爲什麼會發生這種情況?
這種情況能夠發生是因爲在你的Glance控制器中
對於“將要激活”要採取稍有不同的處理方式
那麼會發生的情況是當“將要激活”完成的時候這個系統提供的快照
就會從UI上移除
所以與你在Watch app裏的做法稍有不同
你在這裏要確保的是你要在“將要激活”完成之前
選擇完全安裝
你要得到你需要的所有信息
這樣設置 就會完全安裝UI
在我們移除那個快照的時候UI已經安裝好了
整個鏡像消失沒有中間狀態
在你的記事本中可能有你會看到的佔位符文本
或者作用近似的文件
這些並不能提供真正好的體驗
另一件你應該做的事是慎重對待重新加載內容
用戶在Glances中切換屏幕時
"將要激活" 會出現在你的頁面上
所以 如果它出現在你的頁面上
而且在 "將要激活"中你正在下載一大堆東西 
進行文件處理 進行網絡請求
恐怕你的效率會大打折扣
所以重新裝載時一定要慎重
根據其他情形而不僅僅是 哦
他們看了我的內容
另外 與Watch app一樣
要限制比較設計的數量
因爲和之前一樣我們將需要在最前面實例化那些對象
最後 如果你要在Glances中顯示時間或日期
你應該使用WK界面的時間標籤
或者絕對時間或日期
如果你要這這裏找到一個例子
本次講座在35分鐘前開始
那麼 如果現在是下午1:00讓人有點糊塗了
我看到講座在不斷進行
我知道 但是它是在35分鐘前開始的
讓我有種下意識地反應像是 等等
現在究竟是什麼時間
這種情況下比較好的做法是給出一個絕對時間
講座在10:00開始
這就已經給了我可視性
"哦，既然現在是1:00 或 3:00"
我並沒有糊塗
內容在載入中 進展順利
我們已經談到了很多東西
首先 我們談到過優化
watchOS 1應用程序的網絡的方法
這樣要轉換爲watchOS 2
就更容易了 而且這很有可能
對你的應用程序有幫助
然後 我們談到過改善
性能佈局的方法 以縮短下載時間 提高運行效率
然後 我們又談到了如何確保
你的Glances的內容可視
這樣就不會讓用戶看到面前的鏡像一片空白
最後在watchOS 2 還有許多需要覈查的東西
除了在WatchKit中對watchOS 2的更新
我們還有ClockKit
來爲時鐘表面進行復雜設計
我們還有
WatchConnectivity框架
來進行所有設備到設備的交流
你還可以利用WatchKit 
本身的延伸NSURL
如果你想了解更多的信息可以查看我們的文檔
我們有代碼樣本
如果你有技術問題 可以讓論壇諮詢
你會得到與開發人員技術支持部提供的相似的一對一的幫助
最後 如果你有任何問題
請隨時與我聯繫這是我的email
今天我們還有一場關於AppleWatch 的精彩演講
題目是 "Apple Watch設計建議與技巧"
演講會涉及許多很棒的信息
幫助你開發了不起的Watch app
我們還進行了一場名爲 "Designing
for Apple Watch" 的演講
一場名爲"Introductionto WatchKit
for watchOS 2" 的演講 還有其它演講
總之 非常感謝