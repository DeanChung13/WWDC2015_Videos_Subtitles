00:00:26.527 --> 00:00:27.227 
肯奧爾：早上好

00:00:35.102 --> 00:00:38.071 
Xcode 7是我們下一步
推出的主要工具

00:00:38.372 --> 00:00:40.641 
是爲了開發 Mac、
iPhone、iPad

00:00:40.707 --> 00:00:42.509 
和 Apple
Watch app準備的

00:00:43.110 --> 00:00:44.778 
今天上午
讓我們來看一看

00:00:44.845 --> 00:00:46.580 
Xcode 加了哪些新料

00:00:49.483 --> 00:00:52.519 
今年最大的變化
是我們添加了

00:00:52.819 --> 00:00:56.890 
第三方平臺Watch OS
的支持 當然了

00:00:57.090 --> 00:00:58.992 
你仍然可以用Xcode
這款你已經熟悉的

00:00:59.193 --> 00:01:02.029 
同樣工具來開發 Apple
Watch應用

00:01:03.964 --> 00:01:07.367 
Xcode 7同樣也包括
Swift 2

00:01:08.368 --> 00:01:10.470 
後者是基於去年
我們介紹的

00:01:10.537 --> 00:01:11.238 
新的編程語言

00:01:12.272 --> 00:01:14.942 
從整體上說 
Swift 2速度更快

00:01:15.542 --> 00:01:18.078 
不僅是指你的
app在Xcode中

00:01:18.145 --> 00:01:20.781 
運行和調試速度更快 

00:01:21.248 --> 00:01:23.350 
此外app在用戶的
設備上也更快

00:01:25.485 --> 00:01:28.622 
Swift 2
還有一些新的語言功能

00:01:29.089 --> 00:01:33.160 
比如錯誤處理 
引入了顯式語法

00:01:33.560 --> 00:01:36.463 
這樣處理Swift中的
錯誤就更快了

00:01:37.831 --> 00:01:40.667 
可及性 現在Swift
對某些API的最低

00:01:40.734 --> 00:01:45.439 
OS需求有了深刻理解
這樣採納新API

00:01:45.506 --> 00:01:50.777 
繼續支持現有的OS
也都更加容易

00:01:52.279 --> 00:01:53.046 
可測試性

00:01:53.647 --> 00:01:57.518 
現在測試叢就可參閱
內部API

00:01:57.851 --> 00:02:01.255 
你的測試覆蓋更廣而無需公開

00:02:01.321 --> 00:02:03.724 
任何其它源信息

00:02:05.392 --> 00:02:09.329 
協議擴展使得你
能夠爲任何類添加方法，

00:02:09.630 --> 00:02:11.265 
以便實現某一協議

00:02:14.401 --> 00:02:17.137 
你可以藉助Xcode 7的
Migrator

00:02:17.504 --> 00:02:19.506 
把所有的Swift代碼 
轉換成Swift 2

00:02:20.340 --> 00:02:23.777 
它既適合項目 也適合
playgrounds

00:02:27.514 --> 00:02:29.216 
我們還向
Objective-C中添

00:02:29.283 --> 00:02:29.983 
加了新語言功能

00:02:30.083 --> 00:02:33.887 
這樣它和Swift
就配合的更好

00:02:34.855 --> 00:02:37.925 
比如Generics讓你
可以指定收集的...

00:02:39.493 --> 00:02:40.260 
類型信息

00:02:41.628 --> 00:02:43.830 
Nullability
Annotations

00:02:43.897 --> 00:02:45.098 
能讓你指定你

00:02:45.165 --> 00:02:47.701 
何時期待零值 何時期待非零

00:02:48.001 --> 00:02:49.303 
這樣
Objective-C

00:02:49.369 --> 00:02:51.004 
和Swift之間
就真正實現了

00:02:51.071 --> 00:02:54.408 
無縫交互 這很棒

00:02:55.108 --> 00:02:57.477 
我們已經先行一步，
在我們的SDK中

00:02:57.544 --> 00:02:58.579 
採用了這些特性

00:02:58.645 --> 00:03:01.949 
因此你現在就可以看到好處

00:03:04.885 --> 00:03:07.888 
如果你想用Swift 2

00:03:08.055 --> 00:03:10.824 
或者你昨天看到的新的API

00:03:11.425 --> 00:03:14.661 
在playground中
做就再好不過了

00:03:15.762 --> 00:03:17.698 
去年 我們引入了
playground

00:03:18.265 --> 00:03:20.968 
從那時起它們的進展很大

00:03:21.768 --> 00:03:25.072 
現在你不僅能探索擺弄代碼

00:03:25.839 --> 00:03:28.041 
還可以從一個
playground中

00:03:28.108 --> 00:03:31.111 
解釋一個想法 一個概念

00:03:32.579 --> 00:03:35.916 
我們引入了像Rich
Comments這樣的特性

00:03:36.049 --> 00:03:37.484 
你就可以用一個標示語法 

00:03:37.551 --> 00:03:41.388 
來解釋環境代碼中發生了什麼

00:03:42.256 --> 00:03:44.191 
它們的格式和字體都很漂亮

00:03:44.558 --> 00:03:46.493 
非常顯眼

00:03:47.761 --> 00:03:51.999 
你可以在這些
評論中添加網頁鏈接列表

00:03:52.165 --> 00:03:54.067 
甚至添加圖像

00:03:56.203 --> 00:03:59.439 
我們還允許拉取結果並顯示在

00:03:59.506 --> 00:04:02.142 
快速瀏覽窗中 你可以把它們

00:04:02.209 --> 00:04:05.913 
拉取到源代碼中
對應的那一行代碼下面

00:04:07.247 --> 00:04:11.852 
這對定位因果關係的
作用非常大

00:04:12.352 --> 00:04:13.387 
這很棒

00:04:15.522 --> 00:04:18.458 
通過向新支持源文件夾中
添加Swift代碼

00:04:18.858 --> 00:04:20.459 
你幾乎可以向
playground

00:04:20.527 --> 00:04:22.095 
無限添加功能

00:04:23.130 --> 00:04:23.830 
這有助於幫助你

00:04:23.897 --> 00:04:25.599 
保持playground
的整潔專注

00:04:25.732 --> 00:04:30.170 
同時 你也有地方
去放支持功能

00:04:31.438 --> 00:04:32.840 
這裏 還有一項性能

00:04:33.340 --> 00:04:34.808 
因爲是配套代碼 

00:04:35.042 --> 00:04:38.679 
運行時不是交互式的
就能對它們進行編譯

00:04:39.012 --> 00:04:40.714 
它們只是對
playground

00:04:40.781 --> 00:04:41.448 
提供支持

00:04:41.815 --> 00:04:44.151 
所以可以運行的很快

00:04:48.689 --> 00:04:50.190 
我們最新的
playground

00:04:50.991 --> 00:04:51.992 
特性是 Pages

00:04:52.626 --> 00:04:57.231 
這使你可以爲
某一話題編寫內容

00:04:58.398 --> 00:05:00.834 
例如 如果你想
製作一個與排序相關的

00:05:00.901 --> 00:05:05.372 
playground 
你就可以添加

00:05:05.439 --> 00:05:07.307 
一個與排序原則相關的介紹頁

00:05:07.908 --> 00:05:09.276 
然後你可以添加涵蓋特定

00:05:09.343 --> 00:05:10.911 
排序算法、快速排序、

00:05:10.978 --> 00:05:14.548 
冒泡排序等事情的後續頁面

00:05:15.649 --> 00:05:18.352 
之後 如果你想添加頁面導航

00:05:18.919 --> 00:05:22.089 
你可以添加一些
我們之前介紹的標示語法

00:05:23.657 --> 00:05:27.227 
Playgrounds是
進行教導的得力方式

00:05:28.896 --> 00:05:31.932 
去年 我們把教程
做成了playground

00:05:32.533 --> 00:05:35.702 
今年 我們又升級成了
Pages

00:05:39.006 --> 00:05:42.042 
這就是Swift 2 
和新playgrounds

00:05:44.878 --> 00:05:48.982 
除了iOS 9和OS 10
El Capitan

00:05:49.049 --> 00:05:51.652 
我們還向Watch 
OS 2中 添加了新運動

00:05:52.719 --> 00:05:56.890 
新的WatchKit能幫助
使你的app更具響應性

00:05:57.791 --> 00:05:59.560 
並且增強你作爲開發者的

00:05:59.626 --> 00:06:01.061 
控制能力和靈活性

00:06:02.196 --> 00:06:03.096 
如果你還沒看

00:06:03.163 --> 00:06:04.898 
“Watch OS 2中
有什麼新料”

00:06:04.965 --> 00:06:05.632 
我建議你看看

00:06:05.766 --> 00:06:06.800 
有些東西很棒。

00:06:10.704 --> 00:06:12.906 
當然 你也可以
使用Xcode中的故事板

00:06:13.340 --> 00:06:17.311 
來開發完整的watch
app 你還能快速展示

00:06:17.377 --> 00:06:19.746 
你的app如何在屏幕間轉換

00:06:20.881 --> 00:06:23.183 
你可以設計並完成
glances

00:06:23.250 --> 00:06:25.485 
甚至新WatchKit
complications

00:06:25.552 --> 00:06:26.220 
也可以

00:06:27.020 --> 00:06:29.022 
對於iOS來說使用新
StackView等

00:06:29.089 --> 00:06:30.390 
事物來開發

00:06:31.091 --> 00:06:34.394 
改變屏幕方向
適配不同屏幕

00:06:34.461 --> 00:06:38.665 
尺寸的app從未如此的簡單

00:06:39.900 --> 00:06:41.768 
有了新iPad
多任務處理功能

00:06:41.902 --> 00:06:44.104 
你在界面構建器中
定義的大小類

00:06:44.171 --> 00:06:47.007 
比以往任何時候都要重要

00:06:48.742 --> 00:06:53.380 
和iOS 9一起， 
我們還引入了一項叫

00:06:53.447 --> 00:06:55.282 
App Thinning
的新橫切特性

00:06:56.350 --> 00:07:00.020 
App Store
可以量身定製你的app

00:07:00.087 --> 00:07:01.388 
爲每臺用戶設備

00:07:01.455 --> 00:07:05.592 
推送最佳、最小版本

00:07:07.427 --> 00:07:10.264 
這樣你就可以集中精力
開發優秀的app

00:07:11.164 --> 00:07:13.033 
而不用擔心app的大小 

00:07:13.133 --> 00:07:18.338 
因爲你知道客戶
不會下載到無用內容

00:07:19.840 --> 00:07:21.775 
當然 Xcode也會幫助你
配置你的app

00:07:21.842 --> 00:07:23.944 
讓你的app瘦身

00:07:26.446 --> 00:07:28.916 
App Thinning
由三個不同的部分組成

00:07:30.217 --> 00:07:31.785 
第一個部分
就是Bitcode

00:07:32.719 --> 00:07:36.857 
當你存檔提交時
Xcode會把你的app

00:07:36.924 --> 00:07:40.060 
編譯到一個叫做
Bitcode的中間表述

00:07:40.460 --> 00:07:42.062 
然後再發送到store

00:07:43.330 --> 00:07:47.334 
稍後App Store會
重新優化你的代碼 

00:07:47.601 --> 00:07:51.872 
幫助你進一步校對編譯器更新

00:07:52.072 --> 00:07:54.074 
新處理器性能等事情

00:07:55.142 --> 00:07:56.677 
你不需要做任何事情

00:07:57.110 --> 00:07:58.612 
就可以坐享
Bitcode的益處

00:07:58.679 --> 00:08:00.781 
Xcode會替你搞定一切

00:08:02.649 --> 00:08:04.484 
其次就是Slicing

00:08:05.419 --> 00:08:09.923 
當App Store向
用戶設備推送你的app時

00:08:10.958 --> 00:08:14.761 
它會只推送那臺
需要的設備美術資源

00:08:15.062 --> 00:08:19.499 
舉例來說 如果你的
app中有爲iPhone6

00:08:19.566 --> 00:08:21.969 
和iPhone6s準備的
2x和3x的資源

00:08:22.035 --> 00:08:25.072 
那麼iPhone6
只會收到2x資源

00:08:25.439 --> 00:08:28.675 
而iPhone6s
只會收到3x資源

00:08:29.910 --> 00:08:32.746 
要利用Slicing 
你只需要使用

00:08:32.813 --> 00:08:35.148 
Xcode中的 Asset
Catalogs即可

00:08:38.485 --> 00:08:42.923 
最後是點播資源你可以控制

00:08:43.256 --> 00:08:45.058 
何時下載資源

00:08:45.792 --> 00:08:48.362 
例如 你可以在用戶通關

00:08:48.428 --> 00:08:52.533 
你的遊戲第4關時
纔開始下載第5關

00:08:53.467 --> 00:08:55.202 
你可以控制很多東西

00:08:55.502 --> 00:08:56.170 
這很棒

00:08:57.437 --> 00:08:59.439 
約翰會給大家演示一下
Watch OS 2

00:08:59.506 --> 00:09:01.775 
和 App
Thinning

00:09:10.017 --> 00:09:10.918 
喬恩·赫斯：早上好

00:09:11.652 --> 00:09:13.754 
今天我會演示Xcode7中
我最愛的兩項特色

00:09:13.820 --> 00:09:16.190 
即 native
watch 擴展功能

00:09:16.456 --> 00:09:17.424 
和應用瘦身

00:09:21.361 --> 00:09:23.263 
讓我們通過一個小遊戲來展示

00:09:24.198 --> 00:09:26.767 
我們的小遊戲 已經爲
WatchKit 1 

00:09:26.934 --> 00:09:28.936 
做好準備了

00:09:29.469 --> 00:09:31.738 
現在我想升級成
Watch OS 2

00:09:32.573 --> 00:09:34.174 
Xcode好像和我心有靈犀

00:09:34.641 --> 00:09:38.645 
我在導航這裏看到一個現代項
目的化序列已經放在隊列中了

00:09:39.279 --> 00:09:40.514 
我會選中它

00:09:40.647 --> 00:09:43.550 
開始把我的項目設置遷移到
Watch OS 2

00:09:44.418 --> 00:09:46.987 
面板這裏 
Xcode給了我一個總覽

00:09:47.054 --> 00:09:49.022 
讓我知道接下來會發生什麼

00:09:49.523 --> 00:09:51.258 
我想多向你們談談細節

00:09:52.392 --> 00:09:55.095 
像Watch OS 1
一樣 Watch OS 2

00:09:55.162 --> 00:09:58.298 
應用是由一個app
擴展功能和一個應用組成

00:09:59.066 --> 00:10:00.667 
你的代碼會進入
app擴展功能

00:10:00.734 --> 00:10:02.402 
然後遠程驅動app

00:10:03.203 --> 00:10:04.505 
Watch OS 2
就不一樣了

00:10:04.838 --> 00:10:08.342 
app擴展功能和app都會
直接運行在watch上

00:10:08.775 --> 00:10:12.112 
這樣應用的響應性
和獨立性都更好

00:10:12.880 --> 00:10:13.647 
聽起來很棒

00:10:13.714 --> 00:10:15.415 
我來試一下

00:10:16.283 --> 00:10:17.184 
發生了什麼？

00:10:17.751 --> 00:10:19.319 
Xcode幫我搞定了

00:10:19.386 --> 00:10:21.922 
所有遷移項目設置到
Watch OS 2的細節

00:10:22.456 --> 00:10:23.857 
昨天它幫我配置了構建

00:10:23.924 --> 00:10:25.993 
我們發佈的新Watch
OS SDK的

00:10:26.059 --> 00:10:26.793 
Watch目標

00:10:27.294 --> 00:10:29.763 
它幫我設置了Watch
OS 2 最低部署目標

00:10:30.297 --> 00:10:33.567 
爲它還幫我配置Watch
app擴展功能

00:10:33.634 --> 00:10:36.069 
Watch app內部複製
這樣當在Watch上安裝時

00:10:36.136 --> 00:10:38.272 
它們會一起移過去

00:10:38.972 --> 00:10:41.175 
好的 這就是升級項目設置到
Watch OS 2的

00:10:41.241 --> 00:10:42.009 
全部內容

00:10:43.410 --> 00:10:45.379 
我們的Watch應用都
很美觀、很輕便

00:10:46.280 --> 00:10:48.982 
但是我們的iOS應用
卻比較笨重

00:10:50.083 --> 00:10:52.452 
這主要是因爲
我的資源目錄中的圖片太多

00:10:53.520 --> 00:10:56.623 
我想讓資源變小
但又不想去除任何內容

00:10:57.324 --> 00:10:58.926 
這就是新App 
Slicing特性

00:10:58.992 --> 00:10:59.893 
大顯身手的時候了

00:11:00.561 --> 00:11:05.199 
大家看到這些圖像有1，2，
3x的不同表達了吧？

00:11:05.632 --> 00:11:07.434 
有了App Slicing
Xcode 7

00:11:07.501 --> 00:11:08.969 
就能和App
Store一起

00:11:09.036 --> 00:11:10.037 
確保每臺設備

00:11:10.103 --> 00:11:13.173 
僅僅獲取最最適合的單張圖像

00:11:13.707 --> 00:11:16.510 
這樣就可以降低
30%到40%的應用大小

00:11:17.010 --> 00:11:18.946 
最妙的是這基本上是自動的

00:11:19.446 --> 00:11:22.316 
我只需在工作
資源目錄中使用

00:11:22.449 --> 00:11:23.383 
Xcode 7就行了

00:11:24.751 --> 00:11:28.422 
但是如果你想把某些資源推
送給全體設備怎麼辦？

00:11:28.889 --> 00:11:32.125 
我們擴展了Xcode 7的
資源目錄

00:11:32.392 --> 00:11:33.694 
以便支持任意數據

00:11:34.161 --> 00:11:35.662 
你可以把任何數據放到這裏

00:11:36.763 --> 00:11:38.131 
我在目錄下面這裏

00:11:38.398 --> 00:11:39.666 
有一個天際線文件夾

00:11:40.234 --> 00:11:43.704 
裏面是世界各地城市的
3D模型

00:11:44.037 --> 00:11:45.239 
我們把這些模型展示給用戶

00:11:45.305 --> 00:11:46.673 
讓他們猜是哪座城市

00:11:47.441 --> 00:11:52.279 
我想把舊金山的
高質量模型

00:11:52.346 --> 00:11:54.248 
加到遊戲中

00:11:54.615 --> 00:11:57.017 
但是隻推送給最高端的設備

00:11:57.584 --> 00:11:58.252 
沒問題

00:11:58.685 --> 00:12:01.855 
圖像可以按照
比例因子和尺寸變動

00:12:02.155 --> 00:12:04.992 
數據資產也可以
根據設備的性能特徵變動，

00:12:05.459 --> 00:12:07.361 
比如設備的內存大小

00:12:07.561 --> 00:12:08.929 
GPU性能。

00:12:09.763 --> 00:12:12.933 
我想給2G內存的設備
增加專用資源

00:12:14.201 --> 00:12:15.602 
那麼我只需要把高端資源

00:12:16.036 --> 00:12:18.338 
拖動到這裏來 就萬事大吉了

00:12:18.539 --> 00:12:21.241 
每臺設備都能得到最佳資源

00:12:21.308 --> 00:12:22.309 
而不用重付費

00:12:24.411 --> 00:12:25.078 
好的

00:12:25.279 --> 00:12:27.114 
現在我想向你展示點播資源

00:12:28.248 --> 00:12:30.651 
它使得我們可以在
App Store中

00:12:30.717 --> 00:12:32.953 
遠程管理應用內容

00:12:34.621 --> 00:12:36.957 
通過用字符串做標記

00:12:37.224 --> 00:12:39.326 
我們把資源加進了點播資源中

00:12:39.793 --> 00:12:41.562 
字符串可以是任何內容

00:12:42.196 --> 00:12:45.299 
例如 如果我們是在開發遊戲

00:12:45.365 --> 00:12:48.535 
我們就可以根據關卡名稱
標記構成某一個關卡的資源

00:12:49.203 --> 00:12:50.838 
運行時 我們使用
NS Bundle

00:12:50.904 --> 00:12:52.539 
Resource
Request 類

00:12:52.840 --> 00:12:55.242 
就可以把整個
標籤的資源提取到遊戲中

00:12:55.576 --> 00:12:57.578 
<br/> 
供本地快速訪問

00:12:58.011 --> 00:13:00.614 
我給你們展示一下
如何使用點播資源

00:13:01.815 --> 00:13:03.650 
我先從目錄中選擇一個文件夾

00:13:03.984 --> 00:13:07.020 
與遊戲類型相關的
問題都在這裏了

00:13:08.055 --> 00:13:09.056 
我要在監視窗中

00:13:09.122 --> 00:13:11.391 
使用新的點播資源標記

00:13:13.627 --> 00:13:15.629 
把問題部分給標記出來

00:13:15.762 --> 00:13:17.931 
我只需勾選它們爲
點播資源託管即可

00:13:19.132 --> 00:13:21.134 
那麼你可以勾選
目錄中的哪些東西呢？

00:13:21.902 --> 00:13:23.971 
你可以像我一樣
標記整個文件夾

00:13:24.505 --> 00:13:26.640 
你也可以直接標記圖像和數據

00:13:26.740 --> 00:13:28.242 
你還可以標記
資源目錄中的...

00:13:28.308 --> 00:13:29.610 
Sprite
Atlases

00:13:29.676 --> 00:13:31.345 
Sprite 
Atlases是...

00:13:31.411 --> 00:13:33.113 
Xcode 7資源目錄中的
一個新組件

00:13:33.514 --> 00:13:35.616 
把你的Sprite 
Atlases放到目錄中

00:13:35.682 --> 00:13:38.418 
就激活了我之前提到的
Splicing 這一功能

00:13:39.686 --> 00:13:42.556 
你還可以在Xcode項目中
標記鬆散文件

00:13:43.924 --> 00:13:48.662 
我可以通過監視窗對某一文件
中的所有標籤進行總覽

00:13:49.196 --> 00:13:51.164 
如果我想看到
某個標籤中的文件

00:13:51.231 --> 00:13:53.033 
或者所有標籤中的
全部文件，該怎麼辦？

00:13:53.667 --> 00:13:55.736 
我可以到 Project
Editor

00:13:56.470 --> 00:13:57.137 
選擇我們的

00:13:57.204 --> 00:13:58.505 
Application
Target

00:13:58.572 --> 00:14:00.374 
然後再到 New
Resource 標籤中

00:14:00.607 --> 00:14:02.042 
就可以看到我的全部標籤了

00:14:02.376 --> 00:14:04.778 
如你所見
之前我標記了很多內容

00:14:05.913 --> 00:14:09.683 
這裏可以進行總覽 
確保一致性不出問題

00:14:11.118 --> 00:14:13.887 
例如 我發現這個
標籤和其它格式不一致

00:14:13.954 --> 00:14:16.323 
缺少問號後綴

00:14:16.990 --> 00:14:17.691 
沒問題

00:14:19.226 --> 00:14:22.429 
我一下子就編輯 更新好了

00:14:24.598 --> 00:14:27.301 
我們的內容在
點播資源中有標籤

00:14:28.068 --> 00:14:30.571 
現在我演示下
如何在代碼中調用

00:14:30.838 --> 00:14:33.841 
現在是新NS Bundle
資源請求類大顯身手的時候了

00:14:34.775 --> 00:14:38.312 
遊戲分類中有兩個回調非常
適合這種情景

00:14:38.745 --> 00:14:40.747 
啓用類和終止類

00:14:41.815 --> 00:14:43.917 
它們非常適用於點播資源 

00:14:43.984 --> 00:14:45.752 
有兩個原因 
第一 它們會適時歸類， 

00:14:45.853 --> 00:14:49.389 
第二 它們發生在
用戶啓動遊戲前

00:14:49.456 --> 00:14:51.425 
但是我們一知道用戶要玩遊戲

00:14:51.558 --> 00:14:53.493 
我們就可以
對點播資源進行預取

00:14:54.761 --> 00:14:56.864 
我用一個實例變量來延遲

00:14:56.930 --> 00:14:58.899 
一個 NS Bundle
資源請求

00:14:59.867 --> 00:15:02.970 
NS Bundle資源請求
是由標籤證實的

00:15:03.036 --> 00:15:05.072 
別忘了 
標籤就是簡單的字符串

00:15:05.572 --> 00:15:09.810 
我在類名後面附加批問題
來構成標籤

00:15:11.278 --> 00:15:14.948 
然後我就可以
通過標籤創建叢資源請求

00:15:16.283 --> 00:15:19.019 
最後 我要使用
新的開始獲取資源

00:15:19.419 --> 00:15:22.589 
來完成處理程序方法
來調用請求

00:15:23.090 --> 00:15:25.325 
這是一種在後臺運行的
異步方法

00:15:25.926 --> 00:15:27.628 
它會從store中下載
全部內容

00:15:28.095 --> 00:15:30.330 
下載完後會激發完成處理程序

00:15:31.031 --> 00:15:34.902 
只要它開始運行
我不說資源請求不用了

00:15:35.202 --> 00:15:37.638 
所有內容的
本地訪問一直會很快

00:15:38.172 --> 00:15:39.206 
我愛死這個了

00:15:39.606 --> 00:15:42.743 
我已經在用的相同
API的內容都有了

00:15:43.010 --> 00:15:44.611 
NS Bundle、
Path of

00:15:44.678 --> 00:15:46.446 
Resource、 
UI Image、

00:15:46.513 --> 00:15:48.615 
Image Name、
 Texture Name

00:15:48.682 --> 00:15:50.717 
這些方法的用法
都和之前一模一樣

00:15:50.984 --> 00:15:55.255 
我的應用中其它的
資源瞭望碼都沒有變

00:15:57.357 --> 00:15:59.927 
現在 所有的內容都可用

00:15:59.993 --> 00:16:01.895 
直到我說不用 
NS Bundle資源請求

00:16:01.962 --> 00:16:02.663 
我是怎樣做的？

00:16:03.263 --> 00:16:05.399 
在終止類這一方法中

00:16:05.899 --> 00:16:09.703 
我會調用結束訪問 NS
Bundle 資源請求

00:16:10.370 --> 00:16:13.040 
我讀取到緩存中的
內容都刪掉了

00:16:13.440 --> 00:16:16.643 
以後可以繼續訪問

00:16:16.844 --> 00:16:18.378 
並且當系統空間不足時

00:16:18.445 --> 00:16:19.947 
這裏會標記爲“可清除”

00:16:20.881 --> 00:16:24.184 
這樣我們就搞定了點播資源
所需的代碼

00:16:24.251 --> 00:16:25.919 
我想構建並運行
我們的遊戲

00:16:26.987 --> 00:16:27.855 
開始新遊戲

00:16:28.822 --> 00:16:30.858 
我要演示使用點播資源時的

00:16:31.191 --> 00:16:32.593 
一些調試功能

00:16:33.727 --> 00:16:37.264 
調試導航器這裏我要選擇磁盤

00:16:37.331 --> 00:16:41.835 
得到磁盤報告 瞭解應用
在磁盤上的使用情況

00:16:42.569 --> 00:16:45.873 
我們已經在Xcode 7
這裏添加了點播資源標籤

00:16:46.273 --> 00:16:49.409 
在“我的標籤”內 你可以
看到它們的大小和當前狀態

00:16:50.210 --> 00:16:52.145 
現在標記爲
“未下載”狀態的

00:16:52.880 --> 00:16:55.215 
都由Xcode扮演了
app store的角色

00:16:55.549 --> 00:16:58.886 
我所有的資源都在Xcode
還沒有到模擬器

00:16:59.386 --> 00:17:01.221 
但是 我點擊其中的一個類

00:17:02.623 --> 00:17:05.858 
我們在後臺運行的代碼
就會下載內容

00:17:05.992 --> 00:17:07.895 
現在 “我的標籤”
的狀態成了“使用中”

00:17:08.529 --> 00:17:10.097 
我換一個類

00:17:10.731 --> 00:17:12.900 
你就可以看到
第一個內容從緩存中刪除了

00:17:13.165 --> 00:17:14.101 
“已下載”標記還在

00:17:14.468 --> 00:17:16.537 
現在正在使用的是
“技術問題”

00:17:17.171 --> 00:17:19.006 
這就是Slicing 
和點播資源

00:17:19.606 --> 00:17:22.675 
有了應用 Slicing 
我們就能把iPhone 6

00:17:22.742 --> 00:17:27.814 
應用的大小從140多MB
降到不足100MB

00:17:28.515 --> 00:17:30.083 
有了點播資源
我們還能進一步

00:17:30.184 --> 00:17:33.887 
把初始安裝包的
大小降到30MB

00:17:34.354 --> 00:17:36.990 
現在用戶啓動遊戲就更快了

00:17:37.391 --> 00:17:38.192 
又輪到你了 肯

00:17:45.933 --> 00:17:46.967 
肯奧爾：謝謝 喬恩

00:17:50.003 --> 00:17:51.738 
今年 爲了直接增強
你的app品質

00:17:51.805 --> 00:17:57.144 
我們引入了很多新的特性

00:17:58.445 --> 00:18:00.480 
我們先來談談調試和剖析

00:18:02.382 --> 00:18:06.787 
Xcode 7我們給iOS
app引入了電量刻度

00:18:07.521 --> 00:18:11.458 
IOS 9會對比
每進程消耗的電量

00:18:11.692 --> 00:18:14.127 
會在右邊的電量報告這裏顯示

00:18:15.596 --> 00:18:18.065 
Xcode中的量規能讓你

00:18:18.298 --> 00:18:21.134 
預期情況和現實情況...

00:18:21.468 --> 00:18:23.871 
進行對比

00:18:24.471 --> 00:18:26.974 
如果你發現電量使用中

00:18:27.207 --> 00:18:29.910 
有尖峯而應用又處於空閒狀態

00:18:30.310 --> 00:18:33.280 
這就提示你可能有問題了

00:18:33.780 --> 00:18:36.016 
當你遇到此類問題時

00:18:36.250 --> 00:18:38.318 
你就知道到底應該看哪處代碼

00:18:39.386 --> 00:18:43.790 
或者 你可以跳轉到
Xcode 的各個報表的

00:18:43.857 --> 00:18:45.359 
Instruments
那裏

00:18:46.059 --> 00:18:49.963 
從電量報告那裏我們可以跳轉
到New Location

00:18:50.230 --> 00:18:52.566 
儀表那裏
然後就可以知道

00:18:52.633 --> 00:18:55.969 
是否有效利用了
核心位置API

00:18:56.703 --> 00:19:01.475 
我們可以知道
是否過多請求了用戶位置？

00:19:02.576 --> 00:19:05.913 
是否請求的用戶
位置的精度過高？

00:19:07.447 --> 00:19:09.516 
這些請求很耗電

00:19:09.750 --> 00:19:12.653 
我們就可以檢查一下

00:19:14.021 --> 00:19:15.389 
iOS中還有一個新...

00:19:15.489 --> 00:19:18.325 
Metal System 
Trace 工具

00:19:18.392 --> 00:19:23.997 
你可以瞭解你的代碼
是如何影響幀頻的

00:19:24.665 --> 00:19:29.036 
硬件渲染顯卡驅動能讓你瞭解

00:19:29.436 --> 00:19:33.273 
整個 Graphic 
Stack 功能很強大

00:19:34.741 --> 00:19:36.777 
你或許還注意到
Instruments

00:19:37.144 --> 00:19:39.279 
這裏有一個重新
設計了的軌跡視圖

00:19:40.314 --> 00:19:41.515 
更清晰了 

00:19:42.583 --> 00:19:45.786 
並且用起來也更加順手

00:19:46.320 --> 00:19:47.955 
通過雙指縮放等手勢

00:19:48.222 --> 00:19:51.658 
在數據中導航也很容易

00:19:53.193 --> 00:19:55.162 
新Instruments 
就介紹到這裏

00:19:58.098 --> 00:19:59.800 
我敢說

00:20:00.434 --> 00:20:02.536 
這裏的每個開發人員

00:20:02.803 --> 00:20:06.840 
都遇到過客戶報告崩潰了

00:20:08.775 --> 00:20:10.344 
但你就是沒法重現的問題

00:20:11.245 --> 00:20:11.912 
好的

00:20:12.312 --> 00:20:13.614 
總有那麼一兩次吧？

00:20:15.082 --> 00:20:16.016 
Xcode 7中的

00:20:16.083 --> 00:20:17.684 
Address
Sanitizer

00:20:17.751 --> 00:20:18.452 
能助你一臂之力

00:20:20.053 --> 00:20:21.655 
Address
Sanitizer

00:20:21.722 --> 00:20:23.290 
會把你的
Objective-C

00:20:23.357 --> 00:20:24.091 
編譯成C代碼 

00:20:24.625 --> 00:20:28.128 
並捕獲類似緩衝區溢出的事件

00:20:28.362 --> 00:20:32.132 
一發生這種事件就可以捕獲

00:20:32.766 --> 00:20:36.970 
Xcode會停在造成這個
問題的那行代碼那裏

00:20:37.604 --> 00:20:40.274 
這個新調試特性很厲害

00:20:40.974 --> 00:20:42.509 
凱特 會給大家演示一下

00:20:42.576 --> 00:20:44.178 
Address
Sanitizer

00:20:49.383 --> 00:20:51.118 
凱特·斯通：謝謝 肯

00:20:51.185 --> 00:20:53.787 
我們的小遊戲很適合
和朋友一起玩

00:20:54.288 --> 00:20:57.858 
但是有時啓動遊戲時會崩潰

00:20:58.992 --> 00:21:01.595 
崩潰很難預測
這種故障也很難重現

00:21:01.662 --> 00:21:04.665 
很難弄清楚原因

00:21:05.632 --> 00:21:07.367 
你肯定遇到過類似情況 

00:21:07.434 --> 00:21:11.572 
因爲我聽說有人會使用指針
來明確地管理內存

00:21:13.941 --> 00:21:15.976 
這個遊戲很美

00:21:16.777 --> 00:21:19.179 
我們可以開始新遊戲

00:21:19.880 --> 00:21:20.681 
選擇一個類

00:21:21.815 --> 00:21:25.586 
再選擇一些用戶
好了

00:21:26.220 --> 00:21:28.889 
看起來很不錯 突然...

00:21:29.223 --> 00:21:33.293 
現在在關卡中 正好重現問題

00:21:33.427 --> 00:21:34.528 
故障不好找

00:21:35.996 --> 00:21:37.297 
我們看看這個

00:21:37.364 --> 00:21:39.099 
是在哪裏崩潰的呢？

00:21:39.166 --> 00:21:40.067 
我怎麼調試？

00:21:40.934 --> 00:21:43.904 
是主類崩潰了

00:21:44.505 --> 00:21:46.807 
我在那裏根本就沒寫代碼

00:21:47.007 --> 00:21:49.409 
Stack Trace裏面
也沒有任何提示

00:21:49.776 --> 00:21:51.712 
這種故障最難處理了

00:21:52.279 --> 00:21:54.481 
幸虧Address 
Sanitizer能幫上忙

00:21:55.115 --> 00:21:58.752 
在Xcode中
我們有很多此類診斷工具

00:21:58.986 --> 00:22:00.787 
你只需要在Scheme
Editor中

00:22:00.854 --> 00:22:01.755 
運行你的app即可

00:22:02.122 --> 00:22:04.958 
當我在Scheme 
Editor中點擊Run時

00:22:05.025 --> 00:22:06.560 
<c.color000000><u> </u>我會按下選項這個快捷鍵

00:22:07.661 --> 00:22:09.830 
我可以對應用的運行方式
進行配置

00:22:10.130 --> 00:22:11.832 
其中
Diagnostics標記

00:22:12.165 --> 00:22:14.768 
能讓你選擇一些舊工具

00:22:15.002 --> 00:22:17.337 
以及Address
Sanitizer這新工具

00:22:17.771 --> 00:22:19.373 
Address 
Sanitizer

00:22:19.439 --> 00:22:20.841 
會重新編譯應用 
添加許多新工具

00:22:21.008 --> 00:22:23.143 
告訴我哪裏失效了

00:22:23.577 --> 00:22:25.612 
以及爲什麼失效了

00:22:25.979 --> 00:22:29.349 
這一點與衆不同

00:22:30.517 --> 00:22:33.620 
我們重新運行一下應用看看

00:22:34.922 --> 00:22:36.757 
現在我發現 當我選擇一個類

00:22:36.924 --> 00:22:40.427 
並移動到下個頁面時
應用馬上停止了

00:22:40.661 --> 00:22:43.830 
就是這裏發生了內存崩潰

00:22:44.364 --> 00:22:47.267 
這樣我在應用急剎車之前

00:22:47.334 --> 00:22:49.670 
就能找到問題所在

00:22:50.470 --> 00:22:53.373 
此時我就知道具體

00:22:53.774 --> 00:22:55.375 
是停在了哪個堆棧上 
是我調用的某個

00:22:55.442 --> 00:22:57.110 
Objective-C
代碼有問題

00:22:57.878 --> 00:23:01.215 
並不是每個人都能
全部用Swift寫代碼

00:23:01.515 --> 00:23:03.617 
事實上 這個遊戲就是
用Objective-C

00:23:03.684 --> 00:23:06.286 
框架封裝C代碼寫成

00:23:06.353 --> 00:23:08.455 
我們的問題就出在這裏

00:23:09.022 --> 00:23:10.457 
我不熟悉這種代碼。

00:23:10.524 --> 00:23:13.227 
是我要看看調用的代碼

00:23:13.293 --> 00:23:14.261 
用Swift寫的

00:23:15.028 --> 00:23:17.898 
我正在調用一些登錄API

00:23:18.432 --> 00:23:21.535 
它告訴我到底哪裏出故障了

00:23:21.869 --> 00:23:23.403 
但沒說原因

00:23:24.505 --> 00:23:26.807 
再往偵錯導航欄下面看

00:23:27.207 --> 00:23:30.244 
我發現Address 
Sanitizer 

00:23:30.310 --> 00:23:32.846 
還告訴我我使用了已經
釋放的內存

00:23:32.913 --> 00:23:35.382 
這就是問題的根源所在

00:23:36.316 --> 00:23:39.953 
我可以從偵錯導航欄中
看到具體是哪個內存

00:23:40.320 --> 00:23:43.023 
我正在讀取一個
50字節熱區的首個字節

00:23:43.090 --> 00:23:44.424 
而這裏已經分配出去了

00:23:45.192 --> 00:23:48.762 
我還可以再點擊下
實際看下內存

00:23:48.829 --> 00:23:51.798 
它之前是用來保存日誌消息的

00:23:52.299 --> 00:23:53.901 
Address 
Sanitizer

00:23:54.401 --> 00:23:55.903 
用灰色告訴我 這個內存無效

00:23:56.136 --> 00:24:00.707 
我不應該再繼續讀取這個內存

00:24:01.475 --> 00:24:02.809 
它還給了我

00:24:02.910 --> 00:24:05.646 
內存初始分配調用堆棧

00:24:05.712 --> 00:24:09.116 
我就知道是我在創建
有意義的使用日誌時

00:24:09.850 --> 00:24:13.654 
產生的更重要的是 
告訴我當時內存分配到了哪裏

00:24:14.688 --> 00:24:17.724 
我能看出來 是我調用

00:24:18.358 --> 00:24:20.627 
終止登錄那個設計欠佳的
API時發生的

00:24:20.794 --> 00:24:23.230 
我本來以爲它只會清除登錄

00:24:23.497 --> 00:24:26.300 
但它卻搞壞了關鍵資源

00:24:26.900 --> 00:24:28.402 
讓我們快速解決這個問題

00:24:29.303 --> 00:24:30.737 
我把這行代碼拿掉

00:24:30.804 --> 00:24:33.106 
每次錄入消息時不再調用它

00:24:33.507 --> 00:24:35.843 
而改成僅在銷燬時調用

00:24:37.110 --> 00:24:39.112 
連同工具 Address
Sanitizer

00:24:39.179 --> 00:24:39.947 
重構了應用

00:24:40.013 --> 00:24:43.016 
仍然很好用 仍然能交互使用

00:24:43.083 --> 00:24:46.954 
但我還能更進一步

00:24:47.020 --> 00:24:50.524 
現在一切正常了
除非再有問題

00:24:52.526 --> 00:24:54.127 
Address 
Sanitizer

00:24:54.194 --> 00:24:56.463 
不僅僅能提示已釋放的內存

00:24:56.730 --> 00:24:58.198 
它還能告訴我緩衝區溢出

00:24:58.265 --> 00:25:01.635 
並告訴我正在溢出的流

00:25:01.969 --> 00:25:05.272 
和堆棧內存

00:25:05.739 --> 00:25:07.841 
這是件非常強大的工具

00:25:08.342 --> 00:25:11.712 
你現在就應該把這件工具
用在你的應用上 

00:25:11.879 --> 00:25:14.381 
找出所有潛藏的內存問題

00:25:15.215 --> 00:25:17.551 
我們儘量讓它容易上手

00:25:18.118 --> 00:25:20.320 
因爲Address 
Sanitizer不僅能以

00:25:20.854 --> 00:25:22.890 
這種交互方式運行，

00:25:23.223 --> 00:25:25.292 
你還能把它用在
Xcode服務器中

00:25:25.359 --> 00:25:27.194 
這樣你就能
用它做一系列測試

00:25:27.394 --> 00:25:31.598 
代碼出現問題時及時發現問題

00:25:33.734 --> 00:25:35.836 
你想盡量減少崩潰次數

00:25:35.903 --> 00:25:38.739 
但老實說 徹底杜絕崩潰
是不可能的

00:25:39.306 --> 00:25:41.975 
所以我請板井
給大家講講Xcode

00:25:42.042 --> 00:25:45.379 
如何能幫助你分析得到的

00:25:45.445 --> 00:25:46.146 
崩潰日誌

00:25:57.391 --> 00:25:58.492 
板井·羅姆：謝謝 凱特

00:25:58.559 --> 00:25:59.426 
大家早上好

00:26:00.460 --> 00:26:02.963 
Apple開發者項目成員
可以讀取

00:26:03.030 --> 00:26:04.565 
Xcode中的新崩潰日誌

00:26:05.232 --> 00:26:06.433 
當你通過
App Store

00:26:06.500 --> 00:26:08.135 
或者TestFlight
分發你的app 

00:26:08.202 --> 00:26:10.137 
並把符號信息包含在內時

00:26:10.437 --> 00:26:12.172 
我們會從用戶那裏
收集崩潰日誌

00:26:13.040 --> 00:26:17.177 
這些日誌會聚合成崩潰報告

00:26:17.244 --> 00:26:19.279 
下載到Xcode中 
你就可以在配置窗口中

00:26:19.346 --> 00:26:21.949 
查看並分析這些日誌

00:26:23.116 --> 00:26:25.519 
這種集成是無縫的
你可以很容易地

00:26:25.586 --> 00:26:28.322 
找出並修復關鍵問題

00:26:28.755 --> 00:26:29.923 
我來告訴你如何使用

00:26:33.827 --> 00:26:35.529 
去年 我們引入了
TestFlight

00:26:36.263 --> 00:26:38.065 
TestFlight是一項
便捷的服務

00:26:38.131 --> 00:26:39.600 
能夠分發你的
apps測試版本

00:26:39.666 --> 00:26:42.636 
和Xcode中的崩潰日誌
配合的很好

00:26:43.470 --> 00:26:46.473 
昨天我們剛剛分發了
遊戲的一個測試版

00:26:46.874 --> 00:26:49.309 
用戶報告了一些崩潰

00:26:49.376 --> 00:26:50.744 
我想找出並修復

00:26:52.479 --> 00:26:53.614 
我先啓動Xcode

00:26:54.147 --> 00:26:55.382 
我已經在Xcode的
Account

00:26:55.449 --> 00:26:57.117 
Preferences
面板中輸入了

00:26:57.184 --> 00:26:59.486 
我的Apple ID 
所以我只需要打開配置窗口

00:26:59.553 --> 00:27:02.623 
查看崩潰日誌就可以了

00:27:04.491 --> 00:27:07.160 
窗口左邊是Xcode下載的
我的研發團隊通過

00:27:07.227 --> 00:27:08.929 
iTunes 
Connect 上傳到

00:27:08.996 --> 00:27:10.797 
App Store或
TestFlight的

00:27:10.864 --> 00:27:13.600 
與apps相關的全部信息

00:27:14.434 --> 00:27:15.369 
我選擇好遊戲

00:27:16.436 --> 00:27:19.940 
我可以從右邊選擇想要的版本

00:27:20.541 --> 00:27:23.310 
列表最上面的55號版本

00:27:23.377 --> 00:27:25.279 
是昨天通過
TestFlight分發的

00:27:25.345 --> 00:27:26.079 
我點擊它

00:27:27.781 --> 00:27:31.185 
Xcode會在下面下載
全部最近的崩潰信息

00:27:31.985 --> 00:27:35.389 
它們會按照出現頻率排序 
列表最上面的

00:27:35.822 --> 00:27:38.859 
當然就是測試者
遇到最多的問題

00:27:40.394 --> 00:27:42.763 
在右邊我能看到
崩潰的回溯跟蹤

00:27:44.131 --> 00:27:46.266 
Xcode會很貼心地
以美麗的淺澄色

00:27:46.333 --> 00:27:48.268 
高亮其中的一個
Stack框架 

00:27:49.069 --> 00:27:51.271 
這樣我就知道app 
可能有問題

00:27:52.940 --> 00:27:55.509 
尤其是使用日誌和登錄方法中

00:27:55.576 --> 00:27:57.511 
app發生崩潰的地方

00:27:58.378 --> 00:28:01.248 
這與凱特剛纔使用
Address 

00:28:01.315 --> 00:28:03.317 
Sanitizer
捕獲並修復的崩潰很相似

00:28:03.517 --> 00:28:05.552 
我最喜歡這種故障報告
因爲會自動修復

00:28:05.619 --> 00:28:07.020 
我看着就行

00:28:08.722 --> 00:28:10.657 
我會點擊窗口上面的
這個按鈕

00:28:10.724 --> 00:28:11.959 
把它標記爲“已解決”。

00:28:13.460 --> 00:28:17.097 
通過點擊窗口下方的過濾器

00:28:17.598 --> 00:28:19.733 
我還能讓Xcode 
過濾已經解決的崩潰

00:28:21.502 --> 00:28:24.171 
我可以集中精力
解決尚未修復的崩潰

00:28:25.172 --> 00:28:26.473 
我們剛纔已經小試身手了

00:28:26.540 --> 00:28:27.875 
讓我們再來看看下個崩潰

00:28:28.642 --> 00:28:31.478 
這次是在啓動畫面視圖控制
器內部崩潰的

00:28:31.812 --> 00:28:34.481 
即app漂亮的着陸頁那裏
你可以在那裏看到

00:28:34.548 --> 00:28:35.883 
由你的朋友的圖像組成的網格

00:28:36.183 --> 00:28:37.851 
我們想編一個陣列索引

00:28:38.018 --> 00:28:39.987 
但是我們的索引可能
超過了陣列界限

00:28:40.053 --> 00:28:41.688 
我想修復這個崩潰

00:28:42.389 --> 00:28:44.725 
我會點擊Open
和Project按鈕

00:28:44.791 --> 00:28:48.362 
先點擊後者
再點擊前者 回到代碼中

00:28:50.364 --> 00:28:52.533 
現在Xcode不僅
打開了我的項目 

00:28:52.633 --> 00:28:54.868 
還神奇地把我剛剛
在右邊整理器中

00:28:54.935 --> 00:28:56.503 
查看的崩潰報告傳送到了

00:28:56.937 --> 00:28:59.239 
偵錯導航器那裏
我就可以點擊

00:28:59.306 --> 00:29:00.774 
Stack Frames，

00:29:00.841 --> 00:29:04.278 
並導航崩潰報告和源代碼

00:29:06.280 --> 00:29:08.615 
我們好像遇到了下一影像法

00:29:09.383 --> 00:29:12.152 
這看起來像是喬恩昨天

00:29:12.219 --> 00:29:14.054 
到我辦公室談到的
他遇到的崩潰

00:29:15.322 --> 00:29:17.824 
我們正在給朋友圖像陣列

00:29:17.891 --> 00:29:20.494 
編索引並增加一個計數器

00:29:21.495 --> 00:29:24.231 
我們到達陣列邊緣時
我們把計數器設回零

00:29:24.598 --> 00:29:28.035 
這裏有一個
容易忽略的錯誤

00:29:28.368 --> 00:29:30.304 
這裏應該相等或者更大

00:29:30.370 --> 00:29:31.438 
我來修復它

00:29:32.339 --> 00:29:34.274 
如果你的朋友數量不是很多

00:29:34.341 --> 00:29:35.475 
你就很容易遇到這個崩潰

00:29:35.809 --> 00:29:37.611 
看來喬恩能發現
這個問題不是沒有原因的

00:29:39.780 --> 00:29:42.249 
現在我回到整理器中
修復更多崩潰

00:29:42.516 --> 00:29:43.917 
Xcode中的
新崩潰日誌功能

00:29:43.984 --> 00:29:45.185 
和TestFlight
配合的很好

00:29:45.252 --> 00:29:46.420 
能在你推送給客戶之前

00:29:46.486 --> 00:29:50.457 
幫助你發現並修復
大多數關鍵問題

00:29:50.924 --> 00:29:51.792 
肯 ̆輪到你了

00:30:00.467 --> 00:30:01.468 
肯奧爾：謝謝你 板井

00:30:03.871 --> 00:30:09.142 
測試 過去幾年來 
我們一直在向Xcode中

00:30:09.343 --> 00:30:11.178 
添加測試支持

00:30:11.545 --> 00:30:15.949 
讓你能測試應用中
越來越多的部分

00:30:16.783 --> 00:30:19.486 
Xcode 5中我們添加了
一個Test導航器

00:30:19.853 --> 00:30:23.223 
把這個和助理編輯器結合起來

00:30:23.290 --> 00:30:25.225 
我們的測試驅動
開發工作流程就很完美了

00:30:25.959 --> 00:30:29.162 
我們已經介紹了
XC Test單元測試框架

00:30:30.063 --> 00:30:33.567 
再加上Bots 
你就可以自動在Xcode

00:30:34.001 --> 00:30:36.470 
服務器上跑單元測試
實現持續集成

00:30:37.738 --> 00:30:40.607 
Xcode 6中我們
引入了性能測試

00:30:40.874 --> 00:30:43.177 
讓你很快找出性能迴歸

00:30:43.877 --> 00:30:46.680 
併爲異步API添加測試

00:30:47.881 --> 00:30:52.519 
在Xcode 7中 
我們還引入了用戶界面測試

00:30:54.087 --> 00:30:56.857 
UI測試使你能夠
試app中用戶真正看到

00:30:57.391 --> 00:31:00.160 
觸摸的那一部分

00:31:01.261 --> 00:31:02.963 
此類測試非常重要
因爲它們能夠幫助你

00:31:03.197 --> 00:31:06.066 
確保app運行時始終

00:31:06.133 --> 00:31:08.669 
和初始目的保持一致

00:31:09.269 --> 00:31:11.772 
即使你稍後做出變動
改進也不影響

00:31:14.875 --> 00:31:17.911 
和我們添加到Xcode中的
其它測試功能一樣

00:31:18.278 --> 00:31:20.480 
UI Tests也和
code 服務器配合的很好

00:31:21.882 --> 00:31:23.617 
這對UI Test來說
十分重要

00:31:24.218 --> 00:31:26.386 
因爲運行它們耗時比較久

00:31:27.287 --> 00:31:29.890 
在Xcode服務器上
你還能使用

00:31:29.957 --> 00:31:32.326 
比你自己辦公桌上多的多設備

00:31:33.193 --> 00:31:35.596 
這樣你的測試覆蓋範圍更廣

00:31:36.330 --> 00:31:38.265 
頻率更高

00:31:39.933 --> 00:31:41.935 
說到覆蓋範圍
爲了完善Xcode 7 

00:31:42.002 --> 00:31:44.137 
我們還添加了測試 Code
Coverage

00:31:44.771 --> 00:31:49.176 
你可以在Schemes 
Test action這裏

00:31:49.243 --> 00:31:51.178 
打開 Code
Coverage

00:31:51.845 --> 00:31:54.414 
當你打開後Xcode
在編譯你的app時

00:31:54.581 --> 00:31:56.083 
會使用特殊工具

00:31:56.550 --> 00:32:00.087 
輕鬆跟蹤執行的各行代碼

00:32:00.888 --> 00:32:02.689 
你運行一系列測試後

00:32:03.190 --> 00:32:05.325 
你會注意到源代碼
編輯器右邊這裏

00:32:05.392 --> 00:32:07.561 
有一個 New Code
Coverage 欄

00:32:08.562 --> 00:32:10.497 
你可以很快對調用的代碼

00:32:10.564 --> 00:32:14.001 
有一個直觀感受

00:32:15.068 --> 00:32:17.638 
更重要的是 你可以知道 
哪行代碼未被調用

00:32:18.805 --> 00:32:22.342 
瓊會給大家演示下
Xcode 7的UI測試

00:32:29.516 --> 00:32:30.551 
瓊威·福爾：謝謝 肯

00:32:31.818 --> 00:32:34.788 
使用Xcode中的UI
Testing 真的很容易

00:32:36.957 --> 00:32:41.662 
像這樣 你添加一個新
UI Testing目標

00:32:42.362 --> 00:32:44.631 
如果你之前用過單元測試

00:32:44.798 --> 00:32:46.733 
你可以把它
當做一個爲你創建的

00:32:47.201 --> 00:32:49.102 
測試用例子類別和方法

00:32:50.070 --> 00:32:52.472 
如果這是一個單元測試

00:32:52.573 --> 00:32:55.242 
你就需要徒手寫出測試方法

00:32:56.109 --> 00:32:58.679 
但現在 我們通過記錄應用

00:32:58.846 --> 00:33:01.915 
爲你寫好了測試方法

00:33:02.416 --> 00:33:03.150 
我們來看一下

00:33:08.388 --> 00:33:10.924 
我把光標放到Test
Method這裏

00:33:11.124 --> 00:33:14.261 
點擊窗口底部的

00:33:14.528 --> 00:33:16.530 
Record按鈕 開始記錄

00:33:18.365 --> 00:33:22.336 
記錄過程中我的
應用收到的任何事件

00:33:22.402 --> 00:33:24.605 
都會把源代碼投射到我的
Test Method中

00:33:25.372 --> 00:33:27.574 
我要配置一個新遊戲進行測試

00:33:27.808 --> 00:33:30.210 
我會點擊開始新遊戲按鈕

00:33:34.648 --> 00:33:37.084 
注意 我點擊按鈕後
對應的那行代碼

00:33:37.150 --> 00:33:39.386 
就立即在源碼編輯器中
顯示了出來

00:33:41.255 --> 00:33:42.723 
我要選一個類

00:33:42.890 --> 00:33:44.725 
這次測試
我選擇sci-fi。

00:33:46.393 --> 00:33:50.130 
點擊下一步 
我會邀請幾個玩家

00:33:50.464 --> 00:33:52.466 
愛麗絲 布蘭登 

00:33:52.866 --> 00:33:54.935 
我搜索一下史黛西

00:33:56.904 --> 00:33:57.571 
找到了

00:33:59.439 --> 00:34:00.107 
我點擊下

00:34:00.874 --> 00:34:05.913 
點擊下一步 最後點擊開關
標記遊戲爲“準備就緒”

00:34:07.381 --> 00:34:10.184 
這樣我就搞定了
想要記錄的內容

00:34:10.317 --> 00:34:12.553 
我們看看最後得到了什麼

00:34:15.621 --> 00:34:17.456 
第一行代碼中包含了

00:34:17.658 --> 00:34:20.027 
一條尋找標記爲開始
新遊戲的按鈕的查詢

00:34:20.594 --> 00:34:23.730 
然後返回了一個元素

00:34:24.264 --> 00:34:26.266 
這個元素是應用中
實際按鈕的代理

00:34:27.100 --> 00:34:29.937 
經由這個元素我現在就可以
讀取按鈕屬性

00:34:30.003 --> 00:34:32.639 
併發送事件
即一次屏幕觸摸

00:34:35.775 --> 00:34:38.145 
下面幾行代碼
包含了選擇sci-fi類

00:34:38.212 --> 00:34:41.514 
點擊“下一步”按鈕的
源代碼

00:34:44.150 --> 00:34:46.853 
UI Testing 
APIs設計的非常易讀

00:34:47.254 --> 00:34:49.889 
你能看到寫很容易

00:34:50.324 --> 00:34:52.793 
因此能幫你進行魯棒測試

00:34:54.862 --> 00:34:57.097 
既然是測試， 
那就需要真的測試某些東西，

00:34:57.164 --> 00:34:59.733 
它也確實這麼做了

00:35:00.767 --> 00:35:02.803 
如果我原樣運行測試，
它會隱性驗證

00:35:02.903 --> 00:35:05.472 
我交互的所有控件

00:35:05.873 --> 00:35:09.343 
同時 我還能繼續記錄

00:35:09.409 --> 00:35:12.346 
並且如果通不過測
試就讓其失敗

00:35:14.114 --> 00:35:16.016 
除了這一隱性驗證

00:35:16.083 --> 00:35:17.551 
我還非常希望在測試中

00:35:17.684 --> 00:35:20.254 
在不同的點上

00:35:20.320 --> 00:35:22.990 
對我的應用的其它方面
進行顯性驗證

00:35:24.157 --> 00:35:27.094 
在這個測試中 
我選擇了一個特定類

00:35:27.528 --> 00:35:29.596 
並邀請了一組特定的玩家

00:35:30.931 --> 00:35:33.467 
我們再向測試中添加幾組聲明

00:35:33.534 --> 00:35:35.235 
確保我們得得到想要的結果

00:35:40.240 --> 00:35:44.444 
這些聲明驗證了
應用中上一個屏幕中

00:35:44.511 --> 00:35:45.979 
UI有包含類名

00:35:46.313 --> 00:35:49.650 
以及玩家名稱的元素

00:35:51.485 --> 00:35:53.287 
有了這些聲明，
我就可以運行測試

00:35:53.387 --> 00:35:55.923 
確保它如期工作

00:36:05.132 --> 00:36:05.799 
沒問題

00:36:18.145 --> 00:36:19.613 
測試通過了

00:36:27.354 --> 00:36:28.956 
瓊威·福爾：這是對
Xcode 7中

00:36:29.022 --> 00:36:30.224 
測試的快速概覽

00:36:31.625 --> 00:36:33.227 
建議你們都試試

00:36:33.927 --> 00:36:35.028 
你會愛上它的

00:36:35.395 --> 00:36:37.464 
最重要的是
你們的客戶會愛上它

00:36:38.198 --> 00:36:38.866 
又輪到你了 肯

00:36:47.007 --> 00:36:48.175 
肯奧爾：很好 謝謝你 瓊

00:36:50.911 --> 00:36:51.645 
今天上午

00:36:51.845 --> 00:36:54.381 
我們僅僅看了少數幾項特性

00:36:55.682 --> 00:36:57.684 
但願它們激起了你的興趣

00:36:58.118 --> 00:37:00.153 
本週你還會看到
更多不錯的會話

00:37:00.220 --> 00:37:01.622 
讓你能夠更加深入瞭解

00:37:01.688 --> 00:37:03.690 
Xcode 7的細節內容

00:37:04.691 --> 00:37:06.627 
如果你還沒有
下載新 Xcode 

00:37:06.693 --> 00:37:08.695 
我建議你去下載 
並且告訴我你的意見

00:37:09.329 --> 00:37:09.997 
非常感謝