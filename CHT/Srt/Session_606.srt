00:00:19.653 --> 00:00:26.960 
《SceneKit改進》

00:00:30.130 --> 00:00:31.031 
謝謝大家

00:00:31.698 --> 00:00:35.602 
下午好 歡迎參加
《SceneKit改進》講座環節

00:00:35.903 --> 00:00:38.138 
我叫 託馬斯·古森斯

00:00:39.206 --> 00:00:41.775 
如果您還不知道SceneKit
是什麼

00:00:41.842 --> 00:00:46.246 
這裏有一個關於iOS 10上的
各種不同框架的概述

00:00:46.980 --> 00:00:50.951 
SceneKit和
SpriteKit是高級API

00:00:51.351 --> 00:00:53.987 
SpriteKit 是2D 的
而 SceneKit 是3D 的

00:00:54.655 --> 00:00:57.991 
您可以將他們
與其他遊戲開發技術配合使用

00:00:58.258 --> 00:01:00.360 
如Model I/O GameplayKit 
以及 GameController

00:01:01.028 --> 00:01:05.032 
有需要的話SceneKi
t也 可以讓您使用低級API

00:01:05.199 --> 00:01:07.367 
即OpenGL和Metal

00:01:09.002 --> 00:01:12.539 
SceneKit是隨OS X
Mountain Lion推出的

00:01:12.873 --> 00:01:15.609 
而且去年也在iOS 8上推出了

00:01:17.211 --> 00:01:21.682 
去年 我們在SceneKit上
添加了一些新的特性

00:01:21.849 --> 00:01:25.319 
使其方便用於休閒遊戲
如粒子系統

00:01:25.853 --> 00:01:29.423 
物理學 力場
以及與SpriteKit的集成

00:01:29.590 --> 00:01:32.059 
例如對於所有2D遊戲場景疊加

00:01:34.361 --> 00:01:37.164 
今年對SceneKit的
兩個主要擴展

00:01:37.431 --> 00:01:38.932 
是向Metal的過渡

00:01:39.199 --> 00:01:40.968 
以及新的場景編輯器

00:01:42.236 --> 00:01:43.837 
我們的這個演示將從

00:01:43.904 --> 00:01:45.739 
向您展示最新的
場景編輯器開始

00:01:46.240 --> 00:01:48.775 
然後解釋爲何
我們過渡到Metal

00:01:48.842 --> 00:01:51.144 
以及它的採用對您意味着什麼

00:01:51.912 --> 00:01:53.313 
最後我們將展示一些

00:01:53.547 --> 00:01:56.550 
我們今年對引擎添加的新特性

00:01:58.252 --> 00:02:00.187 
好
最新的場景編輯器

00:02:01.955 --> 00:02:04.191 
它在Xcode 7上提供

00:02:04.758 --> 00:02:07.928 
因此我們可以在El Capitan
或 Yosemite上運行它

00:02:08.762 --> 00:02:11.198 
而且它也在Force Field中
提供對力場的支持

00:02:12.432 --> 00:02:13.300 
要打開它

00:02:13.800 --> 00:02:17.204 
只須打開一個SceneKit
支持的3D文件

00:02:18.138 --> 00:02:20.908 
如DAE OBJ Alembic

00:02:22.042 --> 00:02:26.747 
或者您可以使用模版選擇器

00:02:27.447 --> 00:02:28.282 
創建一個新的

00:02:28.982 --> 00:02:32.319 
SceneKit文件
那樣它將創建一個新的

00:02:32.686 --> 00:02:34.755 
擴展名爲.scn的
空SceneKit文件

00:02:35.956 --> 00:02:40.360 
而scn文件不過是一個由
NSKeyedarchiver存檔

00:02:40.827 --> 00:02:43.063 
的一個scn場景實例

00:02:43.997 --> 00:02:47.167 
那意味着若您願意
您可以使用程序代碼 

00:02:47.467 --> 00:02:49.436 
製作一個您自己的
SceneKit文件

00:02:49.503 --> 00:02:51.305 
而這對生產流程而言是很方便的

00:02:53.574 --> 00:02:55.676 
那麼場景編輯器的主要目的是

00:02:55.742 --> 00:02:58.045 
讓您爲您的遊戲構建多個平面

00:02:58.545 --> 00:02:59.913 
您會發現

00:03:00.214 --> 00:03:01.415 
通過引用原始資源

00:03:01.481 --> 00:03:04.318 
將來自於不同文件的
多種資源

00:03:04.384 --> 00:03:05.919 
結合起來而構成一個
單一場景

00:03:05.986 --> 00:03:07.554 
確實是容易的

00:03:09.723 --> 00:03:13.493 
場景編輯器也爲SceneKit
的一些關鍵特性

00:03:13.560 --> 00:03:15.329 
加入了一些視覺效果編輯器

00:03:15.529 --> 00:03:20.501 
例如 讓您在一個3D場景中
實時配置粒子系統

00:03:21.368 --> 00:03:22.803 
配置您的物理學

00:03:23.203 --> 00:03:26.139 
檢查並配置您的
對象的物理形狀

00:03:26.206 --> 00:03:28.175 
並對模擬效果進行預覽

00:03:29.209 --> 00:03:30.477 
如力場的感知
而

00:03:31.044 --> 00:03:32.913 
且它還包含一個動作編輯器

00:03:32.980 --> 00:03:35.182 
讓您通過圖形用戶界面

00:03:35.415 --> 00:03:36.717 
構建動作序列

00:03:38.585 --> 00:03:41.121 
場景編輯器
也包含一些更高級的特性

00:03:41.188 --> 00:03:43.557 
如 如果您希望在您的場景中

00:03:43.624 --> 00:03:45.726 
實時編輯共享修改器

00:03:46.593 --> 00:03:47.961 
以及一些烘培工具

00:03:48.462 --> 00:03:50.564 
如烘培環境光遮蔽

00:03:50.831 --> 00:03:52.232 
關於此內容

00:03:52.299 --> 00:03:55.135 
請參考 MondelIo 講座環節
以瞭解更多信息

00:03:57.304 --> 00:04:00.073 
好了 最好還是
爲您做一個這方面的展示

00:04:00.240 --> 00:04:04.811 
那麼現在讓我請Amaury
上臺演示Xcode 7 謝謝

00:04:10.784 --> 00:04:13.787 
大家好 我叫 阿莫瑞
是SceneKit團隊的

00:04:13.887 --> 00:04:14.755 
一名軟件工程師

00:04:15.355 --> 00:04:18.892 
我們極大地改進了Xcode 7
中的SceneKit編輯器

00:04:19.493 --> 00:04:22.129 
而且由於它的最新編輯功能

00:04:22.196 --> 00:04:23.897 
現在很容易完全

00:04:23.964 --> 00:04:27.000 
以直觀和互動的方式構建場景

00:04:27.968 --> 00:04:30.204 
稍後在本節講座中
我將向您展示

00:04:30.270 --> 00:04:32.806 
如何在編輯器中使用SceneKit

00:04:32.873 --> 00:04:36.243 
構建拼圖遊戲Red Panda

00:04:36.810 --> 00:04:41.582 
但是目前我們將從一些
更簡單的東西開始

00:04:42.115 --> 00:04:44.151 
一個物理尺寸的小遊戲

00:04:44.351 --> 00:04:46.954 
它包括構建一個由木塊組成的塔

00:04:47.020 --> 00:04:48.422 
隨着我們把木塊從它上面移除

00:04:48.655 --> 00:04:49.990 
塔將最終倒掉

00:04:55.162 --> 00:04:56.463 
那麼您在這裏看到的是

00:04:56.530 --> 00:04:59.032 
一個顯示空場景的
SceneKit場景編輯器

00:05:00.067 --> 00:05:03.637 
在右側通常是應用區

00:05:03.704 --> 00:05:06.273 
這裏有檢測器和庫

00:05:07.207 --> 00:05:08.308 
在對象庫裏面

00:05:08.375 --> 00:05:10.244 
您可以發現很多SceneKit對象

00:05:10.677 --> 00:05:11.512 
比如模式

00:05:12.513 --> 00:05:13.347 
光線

00:05:14.314 --> 00:05:15.148 
照相機

00:05:16.083 --> 00:05:17.651 
幾何參數

00:05:18.185 --> 00:05:19.953 
以及物理場

00:05:21.021 --> 00:05:22.489 
現在 對於我們的木塊

00:05:22.556 --> 00:05:24.858 
我們使用一個簡單的
幾何形狀盒子

00:05:27.027 --> 00:05:29.062 
爲了對它的外觀進行自定義

00:05:29.296 --> 00:05:30.831 
我可以把它拖放到這裏看看效果

00:05:33.901 --> 00:05:36.537 
那麼現在正如在
Interface Builder中

00:05:36.970 --> 00:05:40.707 
檢測器也能編輯
您的3D對象的所有屬性

00:05:41.375 --> 00:05:43.710 
例如 在屬性檢測器中

00:05:43.777 --> 00:05:46.346 
我可以把幾何形狀的大小

00:05:46.747 --> 00:05:50.050 
改爲
2… X 1... X 6

00:05:50.984 --> 00:05:52.553 
而爲了把它放置在場景中央

00:05:52.619 --> 00:05:55.122 
我可以使用節點檢測器

00:05:55.889 --> 00:05:58.625 
並將其位置設爲...零

00:05:59.626 --> 00:06:01.695 
但是實際上
有一個更簡單的做法

00:06:03.096 --> 00:06:04.631 
即使用 3D 操縱器

00:06:04.831 --> 00:06:06.967 
我可以自由地在場景中移動對象

00:06:09.236 --> 00:06:11.305 
好了 那麼既然
我們的木塊已經準備好了

00:06:11.505 --> 00:06:14.575 
我們將把它
作爲一個構建其他木塊的模版

00:06:15.709 --> 00:06:19.246 
使用3D操縱器
我可以輕易地通過按住alt鍵盤

00:06:19.513 --> 00:06:21.148 
進行復制

00:06:22.616 --> 00:06:23.917 
我可以重複這個操作

00:06:25.953 --> 00:06:26.920 
進行選擇

00:06:29.156 --> 00:06:30.924 
把選定的部分複製

00:06:32.459 --> 00:06:33.293 
旋轉

00:06:35.028 --> 00:06:36.063 
再重新選擇

00:06:37.130 --> 00:06:38.098 
重複操作

00:06:39.299 --> 00:06:41.802 
再最後一次複製以完成塔的構建

00:06:44.938 --> 00:06:48.809 
我們現在準備好使用
SceneKit 內置的物理引擎

00:06:48.876 --> 00:06:50.577 
來使場景更有吸引力

00:06:51.578 --> 00:06:53.547 
我將直接選定所有對象

00:06:54.915 --> 00:06:56.650 
來到物理檢測器界面

00:06:57.751 --> 00:06:59.953 
並向每個木塊添加
一個動態實體

00:07:02.689 --> 00:07:04.725 
現在我們已經準備好運行模擬

00:07:05.592 --> 00:07:08.529 
如您所見 
我們的木塊現在受到重力影響

00:07:08.595 --> 00:07:09.830 
無限下落

00:07:10.764 --> 00:07:13.600 
爲防止這種情況
我們將向場景添加一個地板

00:07:14.735 --> 00:07:16.870 
因此我打開對象庫

00:07:17.905 --> 00:07:18.839 
放一個地板

00:07:20.007 --> 00:07:20.841 
將其定位

00:07:22.075 --> 00:07:23.610 
我需要一個靜態實體

00:07:23.677 --> 00:07:26.380 
以便讓它參與模擬

00:07:26.446 --> 00:07:28.015 
但卻不允許移動

00:07:28.949 --> 00:07:31.852 
如果我們再次運行模擬
什麼都不會發生

00:07:32.686 --> 00:07:35.455 
但是當我們從塔上
移除一些木塊時

00:07:39.993 --> 00:07:43.664 
我們就很好地瞭解了
遊戲會是什麼樣子

00:07:49.870 --> 00:07:52.739 
另外一個我想爲您展示的特性
是場景檢查

00:07:53.207 --> 00:07:56.243 
您可以在編輯器的左下角
進行場景檢查

00:07:57.711 --> 00:08:01.081 
在場景檢查中
您可以查看場景中的所有節點

00:08:01.782 --> 00:08:04.318 
也可以編輯節點層次

00:08:05.185 --> 00:08:07.187 
例如 我們有地板

00:08:07.387 --> 00:08:09.056 
很多木盒子

00:08:09.489 --> 00:08:10.757 
但是我們也有聚光燈

00:08:11.725 --> 00:08:13.794 
建立了工程之後

00:08:13.861 --> 00:08:16.330 
我就把這個燈放在場景右邊

00:08:17.064 --> 00:08:19.099 
目前它是隱藏並沒有效果的

00:08:19.733 --> 00:08:20.701 
讓我們把它顯示出來

00:08:22.336 --> 00:08:23.804 
爲了進一步改善照明

00:08:24.304 --> 00:08:26.473 
也爲了避免
這些完全黑暗的區域

00:08:26.807 --> 00:08:29.476 
我將直接向場景添加環境光線

00:08:32.412 --> 00:08:33.246 
就是這樣

00:08:33.313 --> 00:08:36.082 
僅僅通過編輯器
我們就構建了整個場景

00:08:36.149 --> 00:08:37.284 
它包括3D對象

00:08:37.683 --> 00:08:40.821 
質地
燈光和動態實體

00:08:41.221 --> 00:08:42.556 
在我們執行了手勢之後

00:08:42.623 --> 00:08:44.157 
它們就會組成一個不錯的遊戲

00:08:45.559 --> 00:08:48.195 
因此SceneKit場景編輯器
確實能夠

00:08:48.729 --> 00:08:51.598 
讓您以更少的代碼

00:08:51.999 --> 00:08:53.367 
編寫遊戲

00:08:53.901 --> 00:08:56.904 
通過編輯器
您實際上還可以做更多事情

00:08:57.404 --> 00:08:58.505 
而爲了說明那一點

00:08:58.739 --> 00:08:59.606 
讓我們切換到

00:08:59.673 --> 00:09:00.841 
Red Panda演示

00:09:00.908 --> 00:09:02.876 
並再次查看那個演示

00:09:06.246 --> 00:09:09.583 
那麼Red Panda是一個
3D拼圖遊戲

00:09:09.650 --> 00:09:13.253 
在裏面您可以通過全景動作
操縱攝像機

00:09:15.155 --> 00:09:18.825 
並控制角色的行走路線

00:09:20.561 --> 00:09:23.430 
遊戲的目標是收集這些花

00:09:24.598 --> 00:09:26.733 
而這裏是第一朵花

00:09:27.100 --> 00:09:30.571 
在它的路上 
Red Panda將必須收集物品

00:09:32.806 --> 00:09:33.874 
您看 有了那麼多細節

00:09:33.941 --> 00:09:35.442 
這個世界是多麼豐富多彩
栩栩如生

00:09:35.843 --> 00:09:39.546 
我們有大量的粒子系統
和具有動畫效果的植物

00:09:41.148 --> 00:09:44.184 
現在Red Panda可以
在平面上到處遊逛

00:09:44.251 --> 00:09:45.953 
例如 它可以爬山

00:09:47.054 --> 00:09:50.157 
但是在它的路上 
Red Panda還必須躲開障礙

00:09:53.360 --> 00:09:57.264 
是否注意到當我們強行推進的時候
叫聲就會變大？

00:09:58.131 --> 00:10:02.669 
這是因爲我們使用了
SceneKit最新API的3D音頻

00:10:03.370 --> 00:10:06.106 
這裏很多特性都在起作用

00:10:06.740 --> 00:10:10.077 
我們有用於導航和
碰撞檢測的物理引擎

00:10:10.210 --> 00:10:11.845 
我們有很多粒子系統

00:10:12.513 --> 00:10:15.716 
而陰影修改器和各種動作
讓場景變得生靈活現

00:10:15.916 --> 00:10:17.951 
那麼我們剛剛收集了第七朵花

00:10:18.585 --> 00:10:19.820 
而通過移動攝像機

00:10:20.153 --> 00:10:21.788 
我們可以看到物體藏在哪裏

00:10:23.423 --> 00:10:26.260 
讓我們快速走過拱門

00:10:29.897 --> 00:10:31.732 
這一關就完成了

00:10:35.736 --> 00:10:36.570 
謝謝你託馬斯

00:10:43.410 --> 00:10:44.678 
那麼我們現在將看一下

00:10:44.745 --> 00:10:46.914 
如何通過SceneKit場景編輯器

00:10:46.980 --> 00:10:47.848 
構建這個遊戲

00:10:53.987 --> 00:10:56.023 
那麼這是我們的遊戲起點

00:10:57.224 --> 00:10:58.525 
一個快速而簡易

00:10:58.592 --> 00:11:00.460 
和立刻改進您的場景的方式

00:11:00.928 --> 00:11:02.496 
是添加一個貴賓看臺

00:11:05.199 --> 00:11:06.099 
貴賓看臺...

00:11:06.834 --> 00:11:11.205 
只不過是代表環境的
一組六張圖片

00:11:12.105 --> 00:11:14.241 
在我們向場景添加了貴賓看臺後

00:11:14.575 --> 00:11:17.177 
我們有了一個
可以構建這個平面的環境

00:11:18.946 --> 00:11:22.416 
那麼如果我們看一下
在我們項目中的資源

00:11:22.883 --> 00:11:25.152 
我們可以看到
我們的藝術家爲我們

00:11:25.219 --> 00:11:26.420 
提供了很多構成要素

00:11:26.820 --> 00:11:30.324 
就是說我們有
用於竹子

00:11:31.992 --> 00:11:33.660 
要採集的花

00:11:35.362 --> 00:11:37.030 
珍珠以及很多結構元素

00:11:37.898 --> 00:11:40.400 
所需的不同文件

00:11:42.302 --> 00:11:43.770 
那麼現在您如何在您的場景中

00:11:43.837 --> 00:11:46.106 
使用這些外部構件呢？

00:11:47.808 --> 00:11:48.709 
你到場景中

00:11:49.276 --> 00:11:52.679 
並把一個外部構件拖拽
並放置到場景中

00:11:53.213 --> 00:11:55.682 
您可以看到
這個小的箭頭圖標

00:11:55.749 --> 00:11:57.951 
表明參照節點已被建立

00:11:59.686 --> 00:12:04.291 
有這些外部文件作爲外部資源
是很好很方便的

00:12:04.358 --> 00:12:06.894 
因爲那樣您就可以設計這個平面

00:12:07.094 --> 00:12:09.930 
而以後仍有機會編輯這些資源

00:12:10.397 --> 00:12:12.399 
您也可以將這些資源再次用於

00:12:12.566 --> 00:12:14.334 
您的遊戲的其他平面

00:12:16.170 --> 00:12:18.205 
那麼我把這個項目加入進來

00:12:19.206 --> 00:12:22.543 
如您所見
我已爲其他工業元素

00:12:23.443 --> 00:12:26.313 
加入其他參考節點

00:12:27.648 --> 00:12:30.717 
那麼這就是您通常
如何構建一個遊戲平面

00:12:31.151 --> 00:12:34.888 
您要一個接一個地添加構件

00:12:35.923 --> 00:12:36.757 
進行迭代

00:12:38.959 --> 00:12:41.662 
您要爲將要採集的花和珍珠

00:12:43.330 --> 00:12:44.231 
做同樣的操作

00:12:45.032 --> 00:12:46.600 
最後是植物

00:12:49.837 --> 00:12:52.005 
那麼這裏您可以看到
只是通過一個簡單的操作

00:12:52.439 --> 00:12:54.107 
我們就能達到什麼樣的狀態

00:12:55.609 --> 00:12:58.011 
大家記得
由於有了很多細節

00:12:58.078 --> 00:12:59.913 
是豐富的動畫效果的

00:13:00.080 --> 00:13:01.715 
我們有很多粒子系統

00:13:03.217 --> 00:13:05.419 
而且我們也有栩栩如生的植物

00:13:06.920 --> 00:13:09.223 
很多動畫是通過“蒙皮” 

00:13:09.356 --> 00:13:11.592 
這種相當複雜的
動畫特技實現的

00:13:11.825 --> 00:13:14.161 
它需要一個特殊工具完成

00:13:15.896 --> 00:13:17.397 
但是我們都使用陰影修改器

00:13:18.932 --> 00:13:20.934 
實際上
這裏還有最後一個元素

00:13:21.001 --> 00:13:22.870 
需要做成動畫

00:13:23.570 --> 00:13:24.738 
它就在小瀑布裏面

00:13:26.940 --> 00:13:29.042 
那麼爲了實現它

00:13:29.510 --> 00:13:31.311 
我將爲我們的瀑布打開場景

00:13:31.778 --> 00:13:33.947 
現在SceneKit的編輯器
讓您能夠

00:13:34.548 --> 00:13:38.685 
直接向場景中添加修改器
以便獲得即時反饋

00:13:39.453 --> 00:13:40.854 
和解決實時編譯問題

00:13:42.456 --> 00:13:44.925 
您可以在輔助編輯器中

00:13:44.992 --> 00:13:46.460 
添加並修改每個修改器

00:13:47.628 --> 00:13:49.696 
那麼在這裏我將選定瀑布

00:13:50.464 --> 00:13:52.533 
並選擇添加一個
幾何形狀修改器

00:13:54.768 --> 00:13:55.936 
我添加修改器

00:13:57.604 --> 00:13:59.439 
而你可以立刻看到它生效了

00:14:00.707 --> 00:14:02.676 
你可以把玩一下陰影修改器

00:14:02.743 --> 00:14:06.180 
並試圖對瀑布的最後效果圖
進行微調

00:14:06.413 --> 00:14:09.249 
你可以試圖弄清
最後的修改器是什麼

00:14:10.717 --> 00:14:12.119 
一旦你對您的場景滿意

00:14:13.420 --> 00:14:15.589 
您就關閉輔助編輯器

00:14:15.989 --> 00:14:17.291 
並回到您的主平面

00:14:19.193 --> 00:14:20.227 
如您所見

00:14:20.761 --> 00:14:22.629 
我們的山現在具有動畫效果

00:14:23.330 --> 00:14:26.834 
這是因爲我們使用了參考節點

00:14:27.234 --> 00:14:29.570 
而且當您編輯資源時

00:14:29.870 --> 00:14:32.172 
它們會自動在場景中有所反映

00:14:33.273 --> 00:14:34.875 
這裏我們想做的最後一件事情

00:14:35.809 --> 00:14:38.312 
是在場景中添加一個敵人

00:14:39.580 --> 00:14:41.548 
那麼這就是我們的敵人的場景

00:14:42.316 --> 00:14:43.150 
如您所見

00:14:43.650 --> 00:14:44.484 
它是靜態的

00:14:44.751 --> 00:14:45.752 
它沒有任何行爲

00:14:47.621 --> 00:14:49.857 
爲了添加行爲
我們使用動作

00:14:50.691 --> 00:14:53.160 
現在場景編輯器讓您能夠
直接在場景中

00:14:53.460 --> 00:14:55.395 
添加和編輯動作

00:14:56.730 --> 00:14:58.498 
那麼這就是動作編輯器

00:14:59.266 --> 00:15:00.534 
我將選定我的敵人

00:15:02.302 --> 00:15:03.737 
選擇一個行檢測

00:15:06.807 --> 00:15:07.641 
添加它

00:15:08.575 --> 00:15:11.245 
將其設爲沿 Y 軸旋轉

00:15:12.646 --> 00:15:14.648 
並讓它永遠...重複

00:15:17.651 --> 00:15:20.487 
那麼這就是我們爲敵人
賦予的簡單行爲

00:15:21.321 --> 00:15:25.192 
但是動作編輯器也讓您
構建一些複雜的情景

00:15:25.425 --> 00:15:27.294 
而關於那個話題的更多信息
我邀您觀看

00:15:27.361 --> 00:15:29.796 
“SpriteKit中的新特性”
這一講座環節

00:15:30.964 --> 00:15:32.766 
現在可以回到
我們的遊戲平面

00:15:34.535 --> 00:15:36.737 
向我們的敵人添加一個參考

00:15:38.172 --> 00:15:39.806 
那麼我們的場景就建完了

00:15:41.475 --> 00:15:44.211 
那麼剛纔我們看到了
編輯器如何讓您

00:15:44.278 --> 00:15:47.514 
使用來自於外部的構成要素
構建整個遊戲平面

00:15:47.881 --> 00:15:49.750 
以及如何藉助陰影修改器和動作

00:15:49.816 --> 00:15:51.585 
讓場景變得栩栩如生

00:15:52.352 --> 00:15:54.321 
話到此處
我要把舞臺還給託馬斯

00:15:54.755 --> 00:15:56.890 
他將談一下游戲架構

00:16:00.227 --> 00:16:01.662 
是的
我們非常樂於

00:16:01.728 --> 00:16:05.032 
將這個不錯的演示
作爲示例代碼提供給您

00:16:05.299 --> 00:16:07.201 
它在開發者站點上提供下載

00:16:07.868 --> 00:16:11.004 
你將看到它是非常簡單和直接的

00:16:11.104 --> 00:16:14.608 
那裏有大約一千個同時適用於
iOS 和 OS X的代碼項目

00:16:14.708 --> 00:16:17.911 
它包括諸如聲音和控件等一切

00:16:18.178 --> 00:16:19.580 
您剛纔看到的一切

00:16:21.748 --> 00:16:23.617 
Amaury剛纔向您展示了

00:16:23.684 --> 00:16:26.486 
爲了構建此演示
在Xcode 7中所做的工作

00:16:26.553 --> 00:16:28.622 
我將快速地展示剩餘的內容

00:16:28.689 --> 00:16:32.626 
包括在內部和外部的工作

00:16:33.260 --> 00:16:34.561 
我們做的第一件事

00:16:35.295 --> 00:16:37.264 
是爲我們的遊戲

00:16:37.831 --> 00:16:40.067 
定義一個方向
和一個簡單的遊戲播放控制

00:16:40.133 --> 00:16:42.169 
我們是從遊戲的
主要角色開始的

00:16:42.603 --> 00:16:44.705 
然後我們定義了
我們的平面的形狀

00:16:44.938 --> 00:16:47.274 
包括可收集物品應在的位置

00:16:47.608 --> 00:16:48.775 
以及敵人應在的位置

00:16:49.776 --> 00:16:53.046 
而且我們定義了
我們希望通過使用SceneKit

00:16:53.113 --> 00:16:54.648 
而實現的外觀

00:16:55.883 --> 00:16:57.751 
然後下一步就是

00:16:58.218 --> 00:17:00.821 
在3D工具中仔細查看3D模型

00:17:02.089 --> 00:17:05.893 
描繪出不同的質地
配置我們的角色

00:17:06.593 --> 00:17:07.895 
並使其具有動畫效果

00:17:08.795 --> 00:17:09.930 
最後的潤色

00:17:10.263 --> 00:17:12.633 
是通過添加某些粒子

00:17:12.900 --> 00:17:14.635 
植物以及煙霧完成的

00:17:14.902 --> 00:17:16.036 
我們最後通過在上面

00:17:16.103 --> 00:17:18.438 
添加一些二維疊加層
而完成的遊戲的製作

00:17:20.707 --> 00:17:23.443 
然後在代碼方面的
第一個挑戰是

00:17:23.510 --> 00:17:24.845 
對碰撞的處理

00:17:25.345 --> 00:17:28.214 
比如 我們不希望
我們的角色穿過牆壁

00:17:28.982 --> 00:17:30.450 
爲了通過碰撞實現它

00:17:30.617 --> 00:17:32.319 
我們採用了“碰撞網”

00:17:33.253 --> 00:17:37.057 
“碰撞網”簡化版本的
圓形網格

00:17:37.624 --> 00:17:38.825 
它有一個類似的形狀

00:17:39.193 --> 00:17:42.129 
因此碰撞的感覺
與您在屏幕上所看到的一致

00:17:43.363 --> 00:17:45.766 
當您出於性能原因
處理物理問題或碰撞時

00:17:45.832 --> 00:17:48.468 
應採用“碰撞網”
而不是“渲染網”

00:17:48.535 --> 00:17:51.171 
這一點是很重要的

00:17:52.873 --> 00:17:54.675 
而對於地面

00:17:55.075 --> 00:17:56.810 
我們希望角色能夠

00:17:56.877 --> 00:17:58.645 
在平臺上各處行進

00:17:59.346 --> 00:18:00.714 
但仍然緊貼地面

00:18:01.315 --> 00:18:03.383 
因此我們需要知道 

00:18:03.450 --> 00:18:05.419 
在3D世界裏任一點的標高

00:18:06.620 --> 00:18:08.522 
對此有幾個解決方案

00:18:08.655 --> 00:18:12.025 
我們這裏仍然採用了“碰撞網”

00:18:13.660 --> 00:18:14.728 
我們繪製了

00:18:15.329 --> 00:18:18.966 
陣列交叉
垂直陣列以及網格

00:18:19.700 --> 00:18:21.568 
這給了我們一個交叉點

00:18:22.135 --> 00:18:23.804 
是我們應該放置角色的位置

00:18:24.805 --> 00:18:28.809 
然後當我們使用觸屏或鍵盤
移動角色時

00:18:29.510 --> 00:18:32.246 
我們只是在X平面
或Z平面上移動它

00:18:33.380 --> 00:18:36.650 
然後我們在角色所在位置
繪製了一個新的交叉

00:18:37.885 --> 00:18:39.620 
這爲我們提供了一個新的交叉點

00:18:39.753 --> 00:18:43.423 
我們利用這個點調整我們的角色
在Y平面上的位置

00:18:44.958 --> 00:18:48.362 
我們在每個幀上都重複操作
這說明瞭讓我們的角色

00:18:48.595 --> 00:18:50.697 
在遊戲中動起來
是多麼的簡單

00:18:52.799 --> 00:18:53.767 
然後是多個動畫

00:18:54.268 --> 00:18:56.336 
遊戲中有幾個動畫元素

00:18:56.937 --> 00:19:01.175 
角色不管在空閒或工作時
都是動畫的

00:19:02.509 --> 00:19:04.945 
草和竹子的動畫

00:19:05.012 --> 00:19:06.413 
是爲了模擬風的效果

00:19:07.014 --> 00:19:08.415 
作爲一個不錯的意外效果

00:19:08.482 --> 00:19:10.417 
你會發現竹子投射的影子

00:19:10.484 --> 00:19:12.953 
也自動具有動畫效果

00:19:13.587 --> 00:19:15.556 
所有這些動畫都是重要的

00:19:16.056 --> 00:19:19.059 
因爲它們都有助於
讓您的遊戲更加栩栩如生

00:19:20.694 --> 00:19:21.628 
在技術上

00:19:23.430 --> 00:19:26.033 
角色和竹子是通過蒙皮
而實現的動畫效果

00:19:26.533 --> 00:19:31.572 
因此藝術家們已經在3D工具中
構建了骨架和動畫

00:19:31.772 --> 00:19:33.740 
並已將其導出爲DAE文件

00:19:34.241 --> 00:19:37.211 
因此在這裏
開發者完全沒有什麼好做的

00:19:39.313 --> 00:19:41.014 
草的動畫是直接在Xcode 7中

00:19:41.081 --> 00:19:44.151 
通過陰影修改器實現的

00:19:45.853 --> 00:19:48.488 
與動畫相關的是顆粒效果

00:19:49.957 --> 00:19:52.059 
遊戲中已有了幾種粒子效果

00:19:52.125 --> 00:19:55.095 
而且它們也是全部在Xcode7
中完成的

00:19:55.162 --> 00:19:56.096 
<br/>
這裏沒有代碼

00:19:57.264 --> 00:20:03.570 
對於珍珠和鮮花
燃燒的火球發出的一些火花

00:20:05.572 --> 00:20:07.307 
以及敵人吐出的一些火苗

00:20:07.374 --> 00:20:11.111 
都是通過顏色漸變的調節而完成的

00:20:11.278 --> 00:20:12.746 
由白色到黃色
然後到紅色

00:20:13.380 --> 00:20:15.549 
環境的顆粒效果

00:20:15.616 --> 00:20:17.918 
是四張由隨機大小

00:20:17.985 --> 00:20:19.753 
且或多或少模糊的點

00:20:20.053 --> 00:20:21.588 
構成的圖造成的

00:20:21.788 --> 00:20:23.090 
而且那些點都具有初始速度

00:20:23.156 --> 00:20:24.157 
以模擬風的效果

00:20:26.560 --> 00:20:28.328 
現在需要提一下我們的材質

00:20:29.096 --> 00:20:31.632 
以及我們如何在遊戲中
實現這種看起來很棒的材質效果

00:20:33.166 --> 00:20:34.001 
這裏就是...

00:20:34.268 --> 00:20:36.670 
我們的木塊
在遊戲中的樣子

00:20:37.037 --> 00:20:38.572 
但是如果您只是取它的幾何形狀

00:20:38.639 --> 00:20:40.207 
並用單調的顏色渲染它

00:20:40.274 --> 00:20:41.542 
它看上去就像是這個樣子

00:20:41.808 --> 00:20:43.410 
有點過於簡單化了

00:20:44.144 --> 00:20:45.312 
因此我們做的第一件事

00:20:45.379 --> 00:20:47.614 
是設置發散性的質地

00:20:48.081 --> 00:20:50.384 
這給了我們物體的基本顏色

00:20:51.151 --> 00:20:52.986 
然後我們添加一個常規圖

00:20:53.820 --> 00:20:55.956 
它使我們的表面
進一步變得極其細化

00:20:56.023 --> 00:20:58.725 
同時不會增加大量的多邊形

00:20:58.792 --> 00:20:59.893 
因此這是很容易做到的

00:21:01.261 --> 00:21:03.063 
然後我們添加一個光線圖

00:21:03.263 --> 00:21:06.633 
使用此次版本中最新的

00:21:07.067 --> 00:21:08.535 
自照明屬性

00:21:09.970 --> 00:21:12.206 
在對我們的物體的整體照明方面

00:21:12.272 --> 00:21:14.508 
光線圖讓細部進一步細化

00:21:14.575 --> 00:21:15.776 
比如
您可以看到...

00:21:16.243 --> 00:21:17.377 
石頭的角

00:21:17.611 --> 00:21:19.880 
您可以看到一些光的遮蔽

00:21:20.280 --> 00:21:22.115 
例如它在光線圖中具有
烘培效果

00:21:24.952 --> 00:21:28.155 
然後我們做的最後一件事
是建立一個反射立方圖

00:21:28.388 --> 00:21:29.790 
以便反映環境

00:21:29.857 --> 00:21:31.325 
尤其是天空

00:21:32.059 --> 00:21:32.893 
反射立方圖

00:21:32.960 --> 00:21:33.894 
看起來就是這樣

00:21:34.962 --> 00:21:38.298 
我們使用衰減器
使環境效果逐漸減弱

00:21:39.433 --> 00:21:42.836 
使朝向目光方向的

00:21:42.970 --> 00:21:44.671 
表面上的反射減弱

00:21:46.673 --> 00:21:49.209 
現在關於光線圖
還有一點需要注意

00:21:49.943 --> 00:21:52.679 
它只烘培整體照明

00:21:52.746 --> 00:21:56.450 
而不烘培直射的
主要光線和主要陰影

00:21:57.050 --> 00:21:59.052 
因爲我們希望整體照明

00:21:59.119 --> 00:22:00.787 
保持充分的動態感

00:22:01.421 --> 00:22:04.825 
如果我們想 有需要時
我們可以讓太陽的位置也動起來

00:22:05.225 --> 00:22:06.193 
但是最重要的是

00:22:06.493 --> 00:22:07.928 
在遊戲中角色可以行進

00:22:07.995 --> 00:22:10.664 
它的影子也是活躍和自動的

00:22:10.731 --> 00:22:12.432 
在這裏
您無事可做

00:22:14.434 --> 00:22:16.069 
那麼
那就是演示內容

00:22:16.136 --> 00:22:17.871 
我把舞臺移交給塞巴斯蒂安

00:22:17.938 --> 00:22:20.007 
他將繼續討論向Metal的過渡
謝謝大家

00:22:24.778 --> 00:22:25.746 
謝謝你 託馬斯

00:22:26.880 --> 00:22:28.315 
我是 塞巴斯蒂安

00:22:29.016 --> 00:22:31.251 
我正在從事SceneKit研發

00:22:31.485 --> 00:22:34.321 
我將跟大家談談向Metal

00:22:34.388 --> 00:22:36.156 
以及我們今年增加的

00:22:36.223 --> 00:22:38.358 
很多新特性的過渡

00:22:39.860 --> 00:22:41.695 
那麼
SceneKit正朝Metal過渡

00:22:42.596 --> 00:22:45.165 
大家知道
Metal是一個非常低水平的

00:22:45.232 --> 00:22:47.501 
低開銷的圖形 API

00:22:48.902 --> 00:22:51.738 
它爲多個平臺帶來了
更優的性能

00:22:51.805 --> 00:22:54.775 
以及更加現代的API

00:22:55.409 --> 00:22:58.478 
對您們SceneKit用戶來說
最重要的是它確實奏效

00:23:00.214 --> 00:23:02.482 
它也爲SceneKit帶來了
一些新特性

00:23:03.083 --> 00:23:06.620 
比如對陰影着色的計算
因此您可以僅使用...Metal

00:23:06.887 --> 00:23:11.225 
或是幾何資源或是Metal質地

00:23:11.291 --> 00:23:13.093 
作爲材質屬性

00:23:14.061 --> 00:23:16.830 
它還讓我們進行自動批處理

00:23:17.231 --> 00:23:20.934 
所以如果您的幾何資源
被多個物體使用

00:23:21.134 --> 00:23:22.402 
而且使用相同的材質

00:23:22.569 --> 00:23:25.706 
我們可以極大地降低
[聽不清] 的數量

00:23:26.440 --> 00:23:28.375 
我將通過演示向您表明這一點

00:23:29.343 --> 00:23:31.912 
您看到的是一個
運行在OpenGL ES編輯器上的

00:23:31.979 --> 00:23:33.981 
簡單的SceneKit 應用

00:23:34.348 --> 00:23:37.651 
它顯示的是一個
有小行星圍繞其軌道運動的行星

00:23:38.252 --> 00:23:40.487 
僅是顯示小行星就讓

00:23:40.554 --> 00:23:43.056 
OpenGL佔用了大量的CPU空間

00:23:43.123 --> 00:23:43.991 
如您所見

00:23:44.691 --> 00:23:47.027 
不增大CPU並降低幀速率的話

00:23:47.094 --> 00:23:49.863 
我們無法添加更多小行星

00:23:51.064 --> 00:23:54.201 
但如果我們轉到Metal渲染器上
運行的同樣的應用

00:23:55.302 --> 00:23:58.572 
我們可以增添多得多的小行星

00:23:58.906 --> 00:24:00.707 
過一會兒您就會看到

00:24:03.610 --> 00:24:06.313 
當然
CPU也開始被吃掉

00:24:06.680 --> 00:24:10.784 
但是我們可以
大幅增加小行星的數量

00:24:13.220 --> 00:24:14.555 
我覺得這是很棒的

00:24:17.524 --> 00:24:18.358 
謝謝大家

00:24:25.032 --> 00:24:29.336 
那麼您怎樣在您的SceneKit
應用上採用Metal呢？

00:24:30.404 --> 00:24:32.606 
首先
它是默認在iOS 9上運行的

00:24:32.673 --> 00:24:35.676 
因此您將不得不使用最新的SDK
對您的應用進行重新編譯

00:24:36.109 --> 00:24:39.146 
然後它將在所有支持它的硬件上
使用Metal的硬件上運行

00:24:40.314 --> 00:24:41.648 
它也是向後兼容的

00:24:41.715 --> 00:24:43.417 
因此如果您現有一個應用

00:24:43.483 --> 00:24:46.220 
您沒有對其進行更改
也沒有進行重編譯

00:24:46.286 --> 00:24:48.488 
它將默認在OpenGL上運行

00:24:49.690 --> 00:24:50.924 
而且如果您想的話

00:24:50.991 --> 00:24:53.527 
您可以選擇使用
OpenGL渲染器

00:24:53.894 --> 00:24:55.929 
比如
如果您有專用於OpenGL的

00:24:55.996 --> 00:24:57.731 
自定義着色器的話

00:24:58.899 --> 00:25:02.002 
選擇渲染器是非常簡單的

00:25:02.069 --> 00:25:04.838 
如果您有一個
配有內置渲染器的內置應用

00:25:04.905 --> 00:25:08.909 
您只須使用這個小小的按鈕

00:25:08.976 --> 00:25:10.010 
更改默認選項

00:25:11.178 --> 00:25:12.913 
您也可以通過編程方式實現

00:25:12.980 --> 00:25:16.016 
因此 如果您在運行時

00:25:16.083 --> 00:25:18.185 
創建了自己的場景視圖

00:25:18.519 --> 00:25:22.222 
您將爲其做出正確的選擇
那就是使用Metal或OpenGL

00:25:22.523 --> 00:25:23.357 
由您任選

00:25:23.757 --> 00:25:26.193 
關於...Meta的新特性

00:25:26.260 --> 00:25:28.395 
我們也增加了對
Metal着色器的支持

00:25:28.462 --> 00:25:31.965 
那麼您如何使用配有最新API的
SceneKit處理着色器呢？

00:25:32.699 --> 00:25:36.637 
在SceneKit上使用自定義
着色器的第一種方法

00:25:36.937 --> 00:25:39.540 
是使用Metal陰影修改器

00:25:39.873 --> 00:25:43.343 
陰影修改器曾只用GLSL編寫

00:25:43.744 --> 00:25:45.412 
現在我們同時支持這兩種語言

00:25:45.579 --> 00:25:48.949 
如果您添加一個GLSL修改器

00:25:49.283 --> 00:25:51.151 
在OpenGL上它將以
當前格式運行

00:25:51.218 --> 00:25:53.520 
而在Metal上
它將被轉換成Metal格式

00:25:54.021 --> 00:25:55.589 
它在大多數情況下可行

00:25:56.156 --> 00:25:59.793 
如果您使用Metal着色語言
編寫了自己的陰影修改器

00:26:00.060 --> 00:26:01.195 
在OpenGL渲染器上

00:26:01.261 --> 00:26:03.030 
它將變爲不可行 而被忽略

00:26:03.096 --> 00:26:05.399 
但是在Metal上將以
當前格式運行

00:26:07.034 --> 00:26:11.538 
在SceneKit中使用着色器的
第二種方法

00:26:12.139 --> 00:26:13.674 
是使用SCNPrograms

00:26:14.274 --> 00:26:16.243 
這種情況下是沒有自動轉換的

00:26:16.310 --> 00:26:17.711 
因此您將手動進行

00:26:17.945 --> 00:26:19.546 
您將必須轉換您的所有代碼

00:26:20.280 --> 00:26:21.882 
這是被支持的

00:26:21.949 --> 00:26:26.019 
它支持GLSL和Metal兩種着色
語言

00:26:26.486 --> 00:26:28.188 
因此您可以在相同的應用中

00:26:28.255 --> 00:26:29.389 
同時支持兩種語言

00:26:30.157 --> 00:26:31.525 
您可以離線編譯它們

00:26:32.326 --> 00:26:35.362 
您只須提供着色器片段

00:26:35.429 --> 00:26:37.531 
以及定點着色器的函數名稱

00:26:38.232 --> 00:26:39.933 
或者您可以運行時編譯它

00:26:40.000 --> 00:26:42.202 
在本例中
除了函數名稱外

00:26:42.269 --> 00:26:43.704 
您只須給出源代碼

00:26:45.539 --> 00:26:47.441 
現在我將向您展示
您如何通過創建一個

00:26:47.774 --> 00:26:49.810 
將能在SceneKit中工作的

00:26:50.244 --> 00:26:51.445 
極其小巧的着色器來實現

00:26:51.512 --> 00:26:53.146 
您要做的第一步操作

00:26:53.413 --> 00:26:56.683 
是加入我們的SceneKit標頭

00:26:57.217 --> 00:26:58.652 
以便您能夠...

00:26:58.919 --> 00:27:00.888 
讀取一些頂點語義

00:27:00.954 --> 00:27:03.891 
以及默認度量指標

00:27:05.792 --> 00:27:09.196 
在這裏我們確定
我們的自定義頂點結構

00:27:09.429 --> 00:27:11.899 
由於語義上的定義

00:27:11.965 --> 00:27:15.102 
這是SceneKit所
與生俱來的正確數據

00:27:16.103 --> 00:27:20.741 
我們還可以闡明
標準度量指標的使用

00:27:20.807 --> 00:27:22.442 
比如 模型視圖投影

00:27:24.211 --> 00:27:28.115 
而且我們可以
使用我們自己的數據

00:27:28.182 --> 00:27:30.851 
爲自己將試圖使用的算法
定義我們自己的結構

00:27:32.152 --> 00:27:36.190 
然後 我們只須通過
爲我們已經定義的結構

00:27:36.790 --> 00:27:38.525 
給出參數

00:27:38.759 --> 00:27:40.627 
從而創建頂點函數

00:27:42.396 --> 00:27:43.230 
真的很簡單

00:27:44.131 --> 00:27:45.599 
然後在程序中

00:27:45.666 --> 00:27:47.801 
我們只須定義同樣的結構

00:27:47.868 --> 00:27:50.237 
我們必須爲我們在
Metal定義中使用的結構

00:27:50.304 --> 00:27:52.506 
使用同樣的類型
以及同樣的佈局

00:27:53.640 --> 00:27:54.675 
我們創建了程序

00:27:54.875 --> 00:27:58.545 
給出了頂點
以及片段的函數名稱

00:27:59.746 --> 00:28:01.815 
然後我們可以通過使用該結構

00:28:01.882 --> 00:28:04.651 
並將其圍繞時間戳進行封裝 

00:28:04.718 --> 00:28:06.553 
提供一些數據

00:28:07.387 --> 00:28:08.222 
非常簡單

00:28:10.390 --> 00:28:12.693 
在SceneKit中使用着色器的

00:28:12.759 --> 00:28:14.528 
最後一種方式是使用技巧

00:28:14.995 --> 00:28:17.164 
技巧
是去年推出的

00:28:17.231 --> 00:28:19.399 
它是對您的所有
在角色場景上的應用

00:28:19.466 --> 00:28:20.701 
進行後期處理的

00:28:21.034 --> 00:28:22.369 
一種很不錯的方式

00:28:23.136 --> 00:28:24.137 
在本例中

00:28:24.204 --> 00:28:28.542 
您只須給出
在您的Pass定義中的

00:28:28.742 --> 00:28:31.645 
Metal着色器的
正確函數名稱

00:28:31.845 --> 00:28:32.679 
就是那麼簡單

00:28:32.846 --> 00:28:34.882 
它的工作原理
將與OpenGL版本類似

00:28:36.049 --> 00:28:37.351 
關於Metal就講那麼多

00:28:37.584 --> 00:28:38.952 
讓我們繼續往下進行
查看一些

00:28:39.019 --> 00:28:40.287 
今年我們爲您添加的新特性

00:28:43.390 --> 00:28:44.291 
第一個...

00:28:44.558 --> 00:28:46.260 
是與Model I/O的集成

00:28:46.326 --> 00:28:49.129 
我們已經增加了
對Model I/O的支持

00:28:49.396 --> 00:28:51.398 
包括將你們的模型和場景

00:28:51.665 --> 00:28:53.433 
導入...導出

00:28:55.002 --> 00:28:56.103 
如您所見

00:28:56.170 --> 00:28:59.940 
並不是
所有的文件格式都支持

00:29:00.007 --> 00:29:03.076 
我們在SceneKit中
支持的所有數據

00:29:03.143 --> 00:29:06.947 
因此請選擇
最適合您的應用的那個

00:29:09.917 --> 00:29:11.752 
我們也已經增加了場景過渡

00:29:11.818 --> 00:29:13.287 
只用了一行代碼
非常簡單

00:29:13.353 --> 00:29:15.222 
所以您可以在場景之間
建立過渡

00:29:15.556 --> 00:29:17.157 
而且有不錯的動畫

00:29:18.225 --> 00:29:19.293 
確實簡單易用

00:29:21.828 --> 00:29:23.697 
我們也增加了調試選項

00:29:24.064 --> 00:29:27.067 
因此您可以一次性地
把您的箱子 各種物理形狀

00:29:27.401 --> 00:29:30.070 
所有東西進行視覺化處理
以便調試

00:29:33.774 --> 00:29:36.176 
我們也增加了材質的混合模式

00:29:36.510 --> 00:29:38.846 
因此您可以爲每個節點

00:29:38.912 --> 00:29:40.781 
爲您應用中的每種材質

00:29:40.848 --> 00:29:42.783 
選擇透明度的工作方式

00:29:43.450 --> 00:29:45.018 
您可以用它創建新的特效

00:29:47.387 --> 00:29:50.324 
此外 我們還增加了一個
能夠在SceneKit中

00:29:50.390 --> 00:29:52.259 
爲所有元素工作的音頻引擎

00:29:52.793 --> 00:29:53.760 
我們可以創建...

00:29:54.027 --> 00:29:55.996 
3D聲音

00:29:56.230 --> 00:29:57.364 
將它們附加到各個節點

00:29:57.431 --> 00:30:00.267 
然後它們將
隨着節點在場景中移動

00:30:01.068 --> 00:30:03.237 
它也能與環境和
音樂協同工作

00:30:03.303 --> 00:30:04.671 
因此您可以禁用位置音頻

00:30:04.738 --> 00:30:06.240 
並讓自己創建的聲音循環

00:30:07.007 --> 00:30:10.477 
監聽器被放在了攝像頭節點

00:30:10.544 --> 00:30:12.346 
但是您可以把它移動到
場景中的任何節點

00:30:12.412 --> 00:30:13.247 
真的是很簡單的

00:30:14.848 --> 00:30:16.917 
它是基於
AVAudioEngine的

00:30:16.984 --> 00:30:19.586 
因此您只須從AV音頻節點
進行備註

00:30:19.653 --> 00:30:21.522 
而且如果您想或
您有現有音頻引擎的話

00:30:21.588 --> 00:30:24.525 
您可以進行自己的音頻處理工作

00:30:25.325 --> 00:30:29.029 
最後 我們也添加了
一種創建聲音動作的方式

00:30:29.096 --> 00:30:32.432 
因此 您可以把聲音
整合到您的動作序列中

00:30:32.566 --> 00:30:33.500 
真是簡單易行的

00:30:35.736 --> 00:30:39.273 
這裏講一下如何使用聲音API

00:30:39.573 --> 00:30:40.841 
首先
您必須從文件名上

00:30:41.074 --> 00:30:43.744 
把一個聲音實例化

00:30:44.244 --> 00:30:47.581 
然後您創建一個播放器
並把它附加到場景中的任意節點

00:30:47.848 --> 00:30:49.583 
它將立刻開始播放

00:30:49.783 --> 00:30:51.151 
當聲音結束時即會停止

00:30:51.919 --> 00:30:53.654 
如果您希望播放音效或音樂

00:30:53.921 --> 00:30:57.658 
您必須進行切換操作

00:30:58.091 --> 00:31:01.361 
如 數字音效 位置聲音
以及開始循環播放

00:31:02.996 --> 00:31:03.830 
最後

00:31:03.897 --> 00:31:06.800 
非常容易
創建一個歌曲播放選項

00:31:06.867 --> 00:31:08.068 
它只有一行

00:31:08.135 --> 00:31:10.037 
您可以手動執行或將其添加到

00:31:10.137 --> 00:31:11.772 
一個現有的動作序列上

00:31:14.274 --> 00:31:16.543 
這個API 曾在示例代碼中

00:31:16.810 --> 00:31:18.078 
被用於所有聲音

00:31:18.612 --> 00:31:21.515 
而我們使用碰撞網...

00:31:21.582 --> 00:31:24.885 
剛纔託馬斯向您展示了

00:31:25.419 --> 00:31:28.422 
來探測行走中的角色腳下的地面

00:31:29.223 --> 00:31:30.057 
比如

00:31:32.860 --> 00:31:34.194 
當他在草上行走時

00:31:36.563 --> 00:31:37.764 
或者當他在岩石上行走時

00:31:39.333 --> 00:31:40.400 
真的很簡單易行

00:31:41.969 --> 00:31:42.936 
那麼 就講那麼多了

00:31:43.003 --> 00:31:45.272 
我將把舞臺還給託馬斯

00:31:45.339 --> 00:31:47.007 
來爲這個講座進行一下總結
謝謝大家

00:31:53.180 --> 00:31:56.717 
這就是我們今年爲SceneKit
添加的特性的概述

00:31:57.351 --> 00:32:01.388 
一個很棒的場景編輯器
將爲您節省無數行的代碼

00:32:01.455 --> 00:32:03.857 
並將爲您的Game Insight
工具做更多的工作

00:32:03.924 --> 00:32:05.125 
這通常是一個不錯的主意

00:32:05.993 --> 00:32:07.861 
向Metal的平滑過渡

00:32:08.128 --> 00:32:10.397 
將提升您的遊戲的表現

00:32:10.898 --> 00:32:13.800 
而且多數時間
您自己什麼都不用做

00:32:15.135 --> 00:32:17.504 
在這個講座中
我們也展示了

00:32:17.571 --> 00:32:19.406 
一些新的特性

00:32:19.573 --> 00:32:24.111 
但是爲了獲得活動列表
請查看在線文稿

00:32:25.112 --> 00:32:27.014 
還有一個令人驚歎的演示app

00:32:27.147 --> 00:32:29.116 
我們將極其自豪地
與您分享它的代碼

00:32:29.783 --> 00:32:31.185 
在開發者站點上搜索 "Fox"

00:32:31.351 --> 00:32:32.886 
你們應該能找到它

00:32:34.521 --> 00:32:36.223 
如想獲取更多信息

00:32:36.557 --> 00:32:40.427 
請查看我們的
網上資源和在線文稿

00:32:41.094 --> 00:32:41.929 
一般事務的問詢

00:32:41.995 --> 00:32:44.631 
請聯繫我們的技術傳播者
Allan Schaffer

00:32:45.799 --> 00:32:47.334 
還有一些相關講座

00:32:48.101 --> 00:32:49.203 
如Model I/O

00:32:49.269 --> 00:32:51.672 
今年推出的很棒的新框架

00:32:52.539 --> 00:32:53.473 
並請查看

00:32:53.540 --> 00:32:55.843 
《SpriteKit中的新特性》
講座

00:32:55.909 --> 00:32:58.579 
他們有一個確實很棒的
關於場景編輯器的演示

00:32:58.645 --> 00:33:00.480 
會更加深入詳細

00:33:00.747 --> 00:33:02.583 
因此您一定會希望觀看那個講座

00:33:03.250 --> 00:33:04.251 
就講這麼多

00:33:04.418 --> 00:33:05.652 
謝謝
敬請暢享講座

00:33:05.853 --> 00:33:06.687 
謝謝大家