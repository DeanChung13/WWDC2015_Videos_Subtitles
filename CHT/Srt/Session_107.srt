00:00:24.391 --> 00:00:25.292 
傑森·比弗: 下午好

00:00:27.828 --> 00:00:29.429 
歡迎來到Cocoa Touch講座

00:00:29.530 --> 00:00:30.731 
我是傑森·比弗

00:00:30.797 --> 00:00:33.033 
是高級工程經理在iOS小組工作

00:00:35.202 --> 00:00:37.571 
iOS 9的最新內容有很多

00:00:37.771 --> 00:00:42.242 
不過 我首先希望來回
顧一下在過去幾年所做的改進

00:00:44.178 --> 00:00:48.015 
自從iOS 6起 我們開始
爲怎樣構建iOS應用等

00:00:48.081 --> 00:00:52.152 
較大改進奠定基礎我們開始在
所推出的每個主要版本中

00:00:52.352 --> 00:00:53.854 
都體現了這樣的改進

00:00:55.689 --> 00:00:57.791 
在iOS 6中 我們增加了自動佈局

00:00:58.325 --> 00:01:00.561 
以便於輕鬆構建動態和多功能界面

00:01:00.627 --> 00:01:03.230 
以便對適用尺寸和屏幕方向

00:01:03.664 --> 00:01:06.400 
以及本地化等方面的改進

00:01:06.733 --> 00:01:07.801 
做出反應

00:01:10.604 --> 00:01:12.639 
在 iOS 7中 我們
推出了動態類型

00:01:13.473 --> 00:01:15.375 
這可以幫助在用戶可選的

00:01:15.442 --> 00:01:18.745 
文字大小應用中實現漂亮的印刷樣式

00:01:19.546 --> 00:01:20.914 
與自動佈局一道

00:01:21.748 --> 00:01:24.017 
界面可以與用戶所選文本
大小的改變自動適應

00:01:24.084 --> 00:01:25.619 
通過採用動態類型系統

00:01:26.286 --> 00:01:31.458 
可以在文本渲染應用中免費

00:01:31.525 --> 00:01:33.360 
爲文本的可讀性實現改進

00:01:35.662 --> 00:01:38.999 
在iOS 8 我們做出的改進
可能算得上是最大

00:01:39.099 --> 00:01:40.901 
我們引入了適應性概念

00:01:42.603 --> 00:01:44.905 
這是指應用應該

00:01:45.172 --> 00:01:46.807 
在運行環境下適應改變

00:01:47.574 --> 00:01:50.410 
這一概念的基礎就是尺寸類別

00:01:52.246 --> 00:01:54.882 
尺寸類別會根據

00:01:54.948 --> 00:01:58.385 
空間是否會受到具體的尺寸束縛導致

00:01:58.452 --> 00:02:00.220 
應用的用戶界面發生結構改變

00:02:01.488 --> 00:02:05.058 
在這裏所顯示的設置應用中
在iPad和iPhone

00:02:05.125 --> 00:02:08.328 
運行的代碼完全相同

00:02:08.395 --> 00:02:12.633 
尺寸類別的不同
導致用戶界面的結構變化

00:02:14.234 --> 00:02:17.337 
尺寸類別iKit視圖控制
器許多部件的適應性

00:02:17.404 --> 00:02:21.441 
視圖控制器的呈現搜索結果

00:02:22.276 --> 00:02:25.179 
上拉菜單等等所有這些都

00:02:25.612 --> 00:02:30.684 
與尺寸分類和必須配合使用的
可用空間相適應

00:02:32.886 --> 00:02:34.555 
我們去年引入

00:02:34.621 --> 00:02:38.559 
適應性概念的時候我們爲何會往
這方面發展還不是很清晰

00:02:39.326 --> 00:02:42.663 
在應用中我們通常是全屏

00:02:43.163 --> 00:02:46.934 
在應用運行的時候一般
不需要改變用戶界面結構

00:02:48.402 --> 00:02:50.170 
隨着多任務處理的引入

00:02:50.871 --> 00:02:52.739 
做出上述改進的原因就很清晰了

00:02:53.273 --> 00:02:57.611 
你無需針對具體硬件

00:02:57.878 --> 00:02:59.313 
構建兩種不同的體驗

00:02:59.980 --> 00:03:02.783 
針對用戶運行的app你可以提供

00:03:03.250 --> 00:03:05.485 
根據尺寸打造的體驗連續性

00:03:06.687 --> 00:03:08.655 
應用這些基礎性基礎不僅app

00:03:08.722 --> 00:03:12.793 
可以用於我們所推出的所用硬件

00:03:13.760 --> 00:03:16.396 
也可以支持這些多任務處理的新功能

00:03:17.097 --> 00:03:20.901 
以及我們已有合作的
已採納所有這些改變的開發人員

00:03:21.735 --> 00:03:25.506 
在某種情況下真是隻需要
幾分鐘時間就可以讓他們的app

00:03:25.739 --> 00:03:28.208 
與我們的app無縫對接

00:03:30.511 --> 00:03:33.113 
需要特殊處理的是Picture
in Picture功能

00:03:33.480 --> 00:03:36.149 
如果應用支持背景媒體播放
可以在iOS 9中

00:03:36.783 --> 00:03:39.853 
使用新的API啓動播放器

00:03:39.920 --> 00:03:41.922 
支持 Picture in
Picture 功能

00:03:42.556 --> 00:03:44.658 
要記住 Picture in
Picture 功能

00:03:44.725 --> 00:03:46.326 
和所有多任務處理一樣應用

00:03:47.094 --> 00:03:50.063 
需要作爲“良民”確保

00:03:50.130 --> 00:03:52.032 
不會干擾整體用戶體驗

00:03:53.934 --> 00:03:56.970 
本週 還有幾場多任務處理的講座

00:03:57.137 --> 00:03:59.206 
《iPad多任務處理入門》

00:03:59.573 --> 00:04:02.142 
《基於媒體的App多任務處理要點》

00:04:02.476 --> 00:04:04.745 
以及《爲多任務處理優化App》

00:04:06.713 --> 00:04:09.550 
我們來繼續介紹iOS 9的最新內容

00:04:11.218 --> 00:04:12.586 
首先是自動佈局

00:04:14.054 --> 00:04:17.423 
我們先來講講最新的UI佈局指南分類

00:04:18.257 --> 00:04:21.428 
以免你在自動佈局束縛中用到了

00:04:21.495 --> 00:04:25.165 
額外的視圖 現在可以使用佈局指南

00:04:25.232 --> 00:04:27.100 
以避免視圖層次搞亂

00:04:29.069 --> 00:04:32.439 
我們介紹的是默認的兩個佈局指南

00:04:33.440 --> 00:04:36.410 
佈局邊界指南和可讀內容指南

00:04:36.910 --> 00:04:39.012 
可以在UIView使用這些屬性

00:04:39.546 --> 00:04:41.248 
在定義視圖內容方面

00:04:41.715 --> 00:04:44.218 
允許更多的表達性

00:04:45.919 --> 00:04:49.022 
這些會替代我們在iOS 8中
所介紹的佈局邊界

00:04:49.089 --> 00:04:52.092 
在編寫新代碼時 都應使用佈局指南
在重新訪問舊編碼時

00:04:52.159 --> 00:04:55.696 
也應該將邊界替換爲佈局指南

00:04:57.764 --> 00:05:00.033 
我準備花些時間
介紹一下第二種情況

00:05:00.100 --> 00:05:01.802 
可讀內容指南

00:05:05.472 --> 00:05:07.107 
當文本主體很大時

00:05:07.708 --> 00:05:10.043 
文本行長度與文本的可讀性

00:05:10.110 --> 00:05:12.446 
和易讀性都有很大關係

00:05:13.847 --> 00:05:16.583 
如果文本行太寬就像這樣

00:05:17.084 --> 00:05:19.319 
就很難看到文本行起始位置閱讀時

00:05:19.686 --> 00:05:22.856 
也就很難接上下一行

00:05:23.757 --> 00:05:25.659 
相反 如果文本行太窄

00:05:26.193 --> 00:05:29.997 
目光太過頻繁地來回轉移
則會打斷閱讀節奏

00:05:31.098 --> 00:05:33.967 
文本行的理想長度取決於許多因素

00:05:34.034 --> 00:05:36.603 
包括字體 大小 行距

00:05:38.038 --> 00:05:39.773 
不過通過使用可讀內容指南

00:05:40.440 --> 00:05:43.076 
可以確保無論用戶文本大小

00:05:43.143 --> 00:05:44.678 
或應用渲染文本的可用空間

00:05:45.078 --> 00:05:48.682 
如何文本的可讀性都不會有問題

00:05:51.919 --> 00:05:54.221 
我們來談談怎樣使用佈局指南

00:05:54.288 --> 00:05:56.757 
減少應用中的視圖數量

00:05:57.791 --> 00:06:00.494 
比如說有個視圖是要展示若干星球

00:06:00.561 --> 00:06:03.630 
我們希望以父視圖爲中心來展示

00:06:04.064 --> 00:06:06.667 
或是沿着x軸排開

00:06:07.201 --> 00:06:09.736 
在使用自動佈局束縛之前

00:06:09.803 --> 00:06:11.505 
我們要先在視圖層次中引入一系列

00:06:11.772 --> 00:06:13.073 
額外視圖來實現這一點

00:06:13.607 --> 00:06:16.443 
現在先來定義佈局指南

00:06:16.510 --> 00:06:20.514 
這定義的是視圖安排的空間

00:06:23.851 --> 00:06:25.886 
比例我們也生成了另一組束縛

00:06:25.953 --> 00:06:27.588 
是以這些視圖爲中心

00:06:29.389 --> 00:06:34.828 
然後只需改變活動狀態的束縛
就可以實現漂亮的動畫是這個樣子

00:06:35.529 --> 00:06:38.465 
本例中 我們同時改變了所有的束縛

00:06:39.199 --> 00:06:41.301 
但是如果我們是在不同的時間

00:06:41.368 --> 00:06:44.838 
使用框架動畫改變束縛

00:06:45.072 --> 00:06:47.241 
就會實現諸多非常有趣的效果

00:06:51.311 --> 00:06:55.382 
在iOS 9我們還將
StackView引入iOS

00:06:56.283 --> 00:06:59.820 
以便於將子視圖作爲堆棧管理

00:06:59.887 --> 00:07:02.122 
可以實現垂直或水平排布

00:07:02.389 --> 00:07:05.826 
StackView在覆蓋下
使用自動佈局

00:07:05.893 --> 00:07:07.394 
不過可以管理所有的束縛

00:07:08.862 --> 00:07:11.265 
可以調整間隔對齊

00:07:11.532 --> 00:07:14.801 
可以在可用空間允許均等

00:07:14.868 --> 00:07:18.138 
或按比例調整視圖分配方法

00:07:19.239 --> 00:07:21.842 
StackViews還可以嵌套

00:07:24.011 --> 00:07:26.914 
可以將StackView
作爲另一個StackView的元素

00:07:26.980 --> 00:07:29.183 
以便生成非常豐富的佈局

00:07:30.918 --> 00:07:32.653 
這些佈局將自動調整

00:07:32.719 --> 00:07:35.923 
內容顯示方式並根據可用空間

00:07:36.190 --> 00:07:37.824 
進行調整像這樣

00:07:40.160 --> 00:07:42.629 
我們還引入了快捷欄

00:07:43.163 --> 00:07:45.199 
連上硬件鍵盤後在屏幕底邊

00:07:45.666 --> 00:07:48.535 
或軟件鍵盤上有顯示

00:07:49.536 --> 00:07:53.440 
快捷欄包括字體控制 如黑體 斜體

00:07:53.507 --> 00:07:55.509 
下劃線 剪切 複製和粘貼

00:07:55.976 --> 00:07:58.212 
還可以根據應用自定義

00:07:59.680 --> 00:08:02.716 
符合UI文本輸入協議的任何內容

00:08:03.317 --> 00:08:06.019 
可以返回至使用該方法的輔助輸入項

00:08:08.188 --> 00:08:11.558 
UI文本輔助輸入項
是iOS 9中的新分類

00:08:12.492 --> 00:08:15.796 
有着兩個屬性用於確定

00:08:15.863 --> 00:08:17.531 
引導和追蹤欄-按鈕組

00:08:17.598 --> 00:08:19.566 
這樣就可以輕鬆
在這裏加入自己的元素

00:08:23.270 --> 00:08:26.840 
現在正如在State of 
the Union專題會所見

00:08:26.974 --> 00:08:29.209 
我們不再必須在單一的故事板上

00:08:29.276 --> 00:08:30.344 
爲應用準備整個界面

00:08:31.011 --> 00:08:33.447 
可以將故事板彼此相連

00:08:34.648 --> 00:08:37.183 
我們還提供瞭解開引線的方法

00:08:44.024 --> 00:08:48.095 
我們現在可以在操作系統實現
完全的從右至左支持

00:08:49.062 --> 00:08:51.732 
如果曾做過從右至左的語言本地化

00:08:52.165 --> 00:08:53.967 
並在iOS 9上連接了app

00:08:54.034 --> 00:08:56.436 
這一切也都將在app上自動實現

00:08:57.504 --> 00:09:00.240 
所有的UI Kit控件都將自動反轉

00:09:00.807 --> 00:09:02.676 
注意導航也發生了反轉

00:09:03.443 --> 00:09:05.179 
所有的動畫也都反轉

00:09:05.546 --> 00:09:08.882 
列表視圖單元格佈局
甚至滑塊和開關

00:09:08.949 --> 00:09:10.384 
也都發生反轉

00:09:11.752 --> 00:09:14.454 
集合視圖也會自動反轉佈局

00:09:14.521 --> 00:09:16.190 
流向改爲從右至左

00:09:16.256 --> 00:09:18.892 
這裏我們看到起始標記的滑動
要求向右滑動

00:09:18.959 --> 00:09:22.362 
未讀標記要求是向左滑動

00:09:29.303 --> 00:09:32.906 
視圖控制器和視圖上有兩個屬性

00:09:32.973 --> 00:09:34.908 
名爲語義內容屬性

00:09:35.709 --> 00:09:39.246 
可以確定內容如何排布

00:09:39.413 --> 00:09:42.249 
默認狀態下 所有內容都會自動反轉

00:09:43.150 --> 00:09:45.786 
不過可以按照應用中

00:09:45.853 --> 00:09:48.522 
所需通過自定義覆蓋這些屬性

00:09:49.189 --> 00:09:51.558 
還有一種方法

00:09:52.059 --> 00:09:54.428 
可以爲具體的內容屬性獲取佈局方向

00:09:58.165 --> 00:10:02.135 
語義內容屬性有着5個值之一

00:10:02.269 --> 00:10:04.471 
第一個未明確這是默認狀態

00:10:05.105 --> 00:10:07.407 
除非有理由改變
UI Kit做的事情

00:10:07.474 --> 00:10:09.176 
這個值不用管它

00:10:10.811 --> 00:10:15.282 
如果有一組控件代表播放

00:10:15.949 --> 00:10:17.417 
快進和倒退等播放控件

00:10:17.918 --> 00:10:20.387 
可以使用播放獲取佈局方向

00:10:21.488 --> 00:10:24.057 
如果有一組控件代表或導致

00:10:25.125 --> 00:10:27.961 
UI中出現部分方向改變

00:10:28.495 --> 00:10:32.699 
例如 文本對齊控件
文本編輯器中的左中右

00:10:33.200 --> 00:10:35.269 
可以使用獲取佈局方向

00:10:36.270 --> 00:10:38.272 
最後 還有兩個額外的值

00:10:38.605 --> 00:10:40.407 
可以執行從左至右

00:10:40.474 --> 00:10:41.675 
或從右至左的佈局

00:10:46.380 --> 00:10:49.316 
對於圖像而言 UI Kit不清楚

00:10:49.383 --> 00:10:51.685 
圖像是否應該在任何情況下都默認反轉

00:10:51.919 --> 00:10:53.754 
比如照片這類用戶內容

00:10:53.820 --> 00:10:56.490 
就不應反轉而在應用中的控件部分

00:10:56.557 --> 00:10:58.158 
則應該進行反轉

00:10:59.826 --> 00:11:02.663 
因此在UI圖像的
從左到右有屬性或方法

00:11:02.763 --> 00:11:07.334 
可以讓你告訴我們
是否想反轉圖像

00:11:07.901 --> 00:11:10.637 
另外還有一個屬性可以
詢問圖像是否已經反轉

00:11:11.538 --> 00:11:14.107 
鼓勵大家都到國際界面的

00:11:14.174 --> 00:11:16.243 
最新UI Kit支持看看了解一下

00:11:16.310 --> 00:11:19.613 
怎麼讓app支持從右至左的語言

00:11:23.450 --> 00:11:26.153 
關於用戶友好性現在可以使用

00:11:26.220 --> 00:11:28.655 
更多的語音 比如
亞歷克斯那樣以及AV

00:11:28.722 --> 00:11:31.592 
語音合成中的高質量語音

00:11:33.493 --> 00:11:36.396 
我鼓勵大家在關於 iOS
Accessibility 方面

00:11:36.463 --> 00:11:38.765 
瞭解更多怎樣讓app
實現用戶友好性的內容

00:11:42.102 --> 00:11:44.371 
大家可以看到過我們在iOS 9中

00:11:44.838 --> 00:11:47.474 
引入一系列最新文本編輯手勢

00:11:48.242 --> 00:11:52.779 
這些手勢可以在屏幕底部的鍵盤上操作

00:11:52.980 --> 00:11:54.715 
或也可以在文本區操作

00:11:55.382 --> 00:11:58.752 
它們可以實現間接移動插入點

00:11:59.686 --> 00:12:02.389 
可以輕鬆實現選擇詞語句子或段落

00:12:02.456 --> 00:12:05.559 
只需多次點擊即可

00:12:06.393 --> 00:12:09.196 
還可以輕鬆擴展現有的選擇

00:12:10.430 --> 00:12:12.599 
連同我們介紹的快捷欄

00:12:13.066 --> 00:12:17.004 
你可以輕鬆訪問 複製和粘貼
而無需移動到文本

00:12:17.804 --> 00:12:20.641 
文本互動操控可以相當輕鬆便捷

00:12:21.508 --> 00:12:24.645 
現在在應用中什麼都不用做

00:12:24.711 --> 00:12:26.780 
來運用這些文本編輯手勢

00:12:27.314 --> 00:12:30.317 
不過如果在自己應用中的文本視圖中

00:12:30.384 --> 00:12:31.451 
自定義了這些手勢

00:12:31.852 --> 00:12:33.320 
應該確認不要與

00:12:33.387 --> 00:12:34.922 
最新的系統文本手勢發生衝突

00:12:37.925 --> 00:12:41.228 
在iOS 7中 我們增加了

00:12:41.395 --> 00:12:43.864 
發現鍵盤硬件鍵盤命令的應用支持

00:12:44.865 --> 00:12:46.200 
App可以有自己的命令

00:12:46.266 --> 00:12:48.302 
比如生成新文檔的命令

00:12:49.369 --> 00:12:50.804 
這對已經瞭解這些命令的用戶

00:12:50.871 --> 00:12:53.006 
很是方便但是無法發現

00:12:53.073 --> 00:12:54.708 
這些命令是什麼

00:12:55.642 --> 00:12:59.947 
在 iOS 9中 我們引入了
最新鍵盤命令探索功能

00:13:00.647 --> 00:13:05.052 
HUD 如果持續按下硬件鍵盤上的
命令鍵並且保持片刻

00:13:06.553 --> 00:13:09.656 
HUD將會顯現告知此刻

00:13:09.723 --> 00:13:11.992 
可用的命令組是什麼

00:13:12.259 --> 00:13:14.595 
注意 這取決於上下文

00:13:15.462 --> 00:13:17.164 
根據當時應用的狀態不同

00:13:17.231 --> 00:13:19.233 
你會獲得不同的命令組

00:13:19.366 --> 00:13:22.870 
因此 並不是看到整個命令組
部分啓動 部分關閉

00:13:22.936 --> 00:13:25.672 
而是隻能看到
目前可以應用的部分

00:13:26.507 --> 00:13:29.009 
在應用中運用 只需要爲
爲每個主要命令

00:13:29.176 --> 00:13:33.180 
設置可探索功能標題

00:13:33.413 --> 00:13:35.749 
UI Kit可以自動找出

00:13:36.049 --> 00:13:38.085 
哪些命令在當時可以使用

00:13:42.322 --> 00:13:44.258 
我們可以聊一聊觸屏事件

00:13:45.392 --> 00:13:48.362 
在屏幕上跟蹤在手指和屏幕上

00:13:48.996 --> 00:13:53.433 
產生的筆觸之間會有一些固有延遲

00:13:54.401 --> 00:13:57.404 
需要花些時間掃描硬件

00:13:58.105 --> 00:14:01.208 
完成所有中間處理和繪圖

00:14:01.275 --> 00:14:03.010 
再將結果完全顯示出來

00:14:03.744 --> 00:14:05.879 
這就是所謂觸屏顯示延遲

00:14:06.313 --> 00:14:08.782 
大部分用戶在大多數情況

00:14:08.849 --> 00:14:10.584 
不會注意到這個延遲

00:14:11.185 --> 00:14:13.587 
當用戶移動手指足夠快時
延遲纔會明顯

00:14:14.621 --> 00:14:18.058 
儘管iOS已經具備
業界領先的觸屏顯示延遲

00:14:18.125 --> 00:14:23.230 
在iOS 9中我們將延遲水平
又做了大幅改進

00:14:25.299 --> 00:14:26.967 
在屏幕上跟蹤跟蹤觸控時

00:14:27.868 --> 00:14:30.404 
UI Kit會
隨着每次屏幕刷新

00:14:30.470 --> 00:14:33.273 
通知應用這樣應用就可以更新狀態

00:14:34.441 --> 00:14:36.877 
在部分更新款的硬件中

00:14:37.678 --> 00:14:40.881 
觸屏更新的頻率要超過顯示器

00:14:41.949 --> 00:14:45.018 
因此在上一次顯示器刷新後
現在有新方法

00:14:45.085 --> 00:14:47.221 
可以訪問任何中間觸屏

00:14:48.522 --> 00:14:52.392 
對於繪圖應用而言這
可以更流暢更準確地繪圖

00:14:54.728 --> 00:14:57.264 
作爲改善觸屏顯示延遲的第一步

00:14:57.331 --> 00:14:59.833 
我們現在還可以實現觸控預測

00:15:01.001 --> 00:15:03.804 
這會用到高級算法考慮觸控速度

00:15:03.871 --> 00:15:06.673 
加速度以及曲率

00:15:06.974 --> 00:15:08.675 
來預測觸控的走向

00:15:09.610 --> 00:15:13.180 
這就可以明顯減少繪圖時的延遲
因爲可以預測出觸控

00:15:13.247 --> 00:15:16.517 
將發生的位置而不是後知後覺

00:15:25.626 --> 00:15:26.860 
我們其實還不止於此

00:15:27.027 --> 00:15:28.829 
除了提供觸控預測

00:15:29.096 --> 00:15:32.065 
我們在整個軟件堆棧都做了調整

00:15:32.132 --> 00:15:36.537 
以便進一步降低延遲
我說過60毫秒以上

00:15:36.603 --> 00:15:38.405 
已經是業界領先水平

00:15:38.972 --> 00:15:40.774 
我們降到了不足30毫秒

00:15:49.449 --> 00:15:52.886 
我們還引入了
UI Kit動態的一系列改變

00:15:54.121 --> 00:15:57.824 
首先是我們支持非矩形碰撞邊界

00:16:04.932 --> 00:16:07.301 
除了矩形我們現在還支持橢圓形

00:16:07.367 --> 00:16:08.669 
和基於路徑的碰撞

00:16:08.969 --> 00:16:12.406 
這樣就會更爲接近真實的碰撞相互作用

00:16:14.007 --> 00:16:18.145 
我們還支持大量的現場行爲

00:16:19.213 --> 00:16:22.082 
我們現在有線性和放射性引力就像這樣

00:16:22.482 --> 00:16:27.688 
彈力 阻力和速度或是噪音和湍流場

00:16:27.754 --> 00:16:31.992 
就像這樣 以及電場和磁場等

00:16:32.926 --> 00:16:37.431 
我們還支持 定義
自己的場效的能力

00:16:40.701 --> 00:16:42.936 
最後 我們添加

00:16:43.136 --> 00:16:45.239 
一些新增額外附件類型

00:16:46.106 --> 00:16:48.942 
在簡單附上兩個對象之前

00:16:49.009 --> 00:16:51.044 
如果想以某種方式束縛它們的運動

00:16:51.111 --> 00:16:53.947 
必須要設置若干外部束縛

00:16:54.414 --> 00:16:56.650 
有了這些新增附件類型

00:16:56.917 --> 00:17:01.288 
可以極大簡化構建UI動態模型的過程

00:17:05.157 --> 00:17:08.996 
我們也添加了模糊半徑動畫的能力

00:17:15.202 --> 00:17:17.938 
爲實現漂亮的效果就像這樣

00:17:18.005 --> 00:17:20.073 
聚光燈效果的進出

00:17:21.808 --> 00:17:25.179 
我們還iOS 9中引入了
一系列EPI改進

00:17:25.945 --> 00:17:28.182 
以優化在Swift中的應用

00:17:29.449 --> 00:17:32.953 
這是利用Swift的更好表達能力

00:17:33.253 --> 00:17:37.858 
並改善編譯時間類型檢查功能

00:17:41.094 --> 00:17:44.231 
在可空性方面 可以明確屬性行爲

00:17:44.298 --> 00:17:46.400 
以及返回值能否爲零值

00:17:46.466 --> 00:17:49.837 
我們已經介紹了整個API定義了

00:17:49.903 --> 00:17:52.673 
零論證或返回零值

00:17:52.973 --> 00:17:54.575 
是否擔保不爲零值

00:17:58.111 --> 00:17:59.746 
我們還有輕量級泛型

00:17:59.880 --> 00:18:02.416 
這是輕量級形式的類型參數化

00:18:02.816 --> 00:18:06.153 
可以實現Cocoa和Cocoa
Touch API的更好表達

00:18:06.987 --> 00:18:10.657 
例如 UI視圖的子視圖方式

00:18:10.891 --> 00:18:15.295 
可以返回UI視圖數組
而不僅僅是ID數組

00:18:17.231 --> 00:18:19.600 
在《Swift最新內容》
講座中有更多相關內容

00:18:23.937 --> 00:18:27.774 
iOS 9新增了通知能力
可以實現針對用戶的文本輸入

00:18:27.841 --> 00:18:32.412 
或是來自客戶的文本輸入
速度可以等同於回覆文本消息

00:18:38.285 --> 00:18:41.889 
UI用戶通知動作分類
具備新的行爲屬性

00:18:41.955 --> 00:18:44.992 
如果設置文本輸入行爲

00:18:46.660 --> 00:18:49.663 
通知會有文本字段允許快速回復

00:18:55.969 --> 00:18:58.438 
還有一個額外的動作參數字典

00:18:58.505 --> 00:19:01.275 
可允許自定義Send按鈕的名稱

00:19:04.845 --> 00:19:07.514 
我們還要介紹最新的
SF Safari視圖控制器

00:19:08.415 --> 00:19:11.618 
這可以實現
用原生語言app顯示網絡內容

00:19:12.419 --> 00:19:15.155 
並用所有主要
Safari UI元素所包圍

00:19:15.222 --> 00:19:17.291 
用戶對此已經非常熟悉

00:19:18.192 --> 00:19:19.760 
甚至還可以支持高級功能

00:19:19.826 --> 00:19:21.161 
比如Reader和自動填表

00:19:24.198 --> 00:19:26.700 
在《Safari視圖控制器介紹》
講座中 會有更多內容

00:19:26.767 --> 00:19:28.869 
在iOS 9中 我們引入了
一系列最新擴展點

00:19:28.936 --> 00:19:31.371 
可實現在系統中擴展其他應用

00:19:33.006 --> 00:19:35.375 
對於VPN 我們有三個新擴展點

00:19:36.009 --> 00:19:38.579 
有包隧道提供者可以幫助你

00:19:38.645 --> 00:19:41.582 
構建自己的
VPN隧道協議客戶端

00:19:43.250 --> 00:19:46.887 
還有app-代理提供者
可以幫助你執行

00:19:46.954 --> 00:19:50.524 
自己的自定義透明網絡代理協議客戶端

00:19:52.059 --> 00:19:54.494 
還有過濾器控制提供方
和過濾器數據提供方

00:19:54.595 --> 00:19:57.965 
可允許實現動態裝置上內容過濾

00:19:58.999 --> 00:20:01.068 
對於Safari有兩個新擴展點

00:20:02.336 --> 00:20:05.005 
Shared Links可以讓應用
明確可以在共享鏈接

00:20:05.072 --> 00:20:08.575 
用戶種子上顯現的內容

00:20:10.811 --> 00:20:14.481 
內容攔截擴展可允許定義

00:20:14.548 --> 00:20:17.818 
內容或頁面資源的子集

00:20:19.853 --> 00:20:23.590 
並防止其顯現

00:20:28.362 --> 00:20:32.399 
對於Spotlight
還有一個擴展可以允許系統

00:20:34.201 --> 00:20:36.537 
對應用數據進行索引
而且還可以在背景完成

00:20:37.738 --> 00:20:40.908 
這樣就無需啓動應用來重新對

00:20:40.974 --> 00:20:43.110 
app內容進行索引

00:20:44.745 --> 00:20:46.914 
在《App搜索介紹》講座中
有更多相關內容

00:20:50.417 --> 00:20:54.321 
最後 音頻單元或核心音頻插件
可以作爲樂器 音效

00:20:54.388 --> 00:20:57.457 
或音頻發生器來使用

00:20:58.892 --> 00:21:01.228 
直至現在 iOS用戶還在僅限於

00:21:01.295 --> 00:21:03.864 
Apple提供的內置音頻單元

00:21:05.232 --> 00:21:07.434 
在iOS 9中 我們增加了新擴展點

00:21:07.501 --> 00:21:10.003 
可以將自己的音頻單元連入iOS

00:21:15.442 --> 00:21:17.811 
大家在《音頻單元擴展》講座中
可以瞭解更多內容

00:21:20.047 --> 00:21:22.816 
很多人都問到我我也很高興地宣佈

00:21:22.883 --> 00:21:26.153 
我們已經發布全新Swift
和Objective-C API

00:21:26.220 --> 00:21:27.621 
用於聯繫人互動

00:21:32.459 --> 00:21:33.126 
謝謝

00:21:35.596 --> 00:21:38.365 
大家在《iOS 10的iOS聯繫人
框架介紹》中

00:21:38.432 --> 00:21:39.566 
可以瞭解更多內容

00:21:42.069 --> 00:21:46.373 
對於Wallet和Passkit
在銀行和商家應用中

00:21:46.440 --> 00:21:48.141 
現在可以從零開始提供卡片

00:21:48.208 --> 00:21:49.610 
如果有特殊授權

00:21:51.712 --> 00:21:54.748 
還可以靜默Apple Pay
如果出現了

00:21:54.948 --> 00:21:57.551 
會影響應用的情況

00:21:57.818 --> 00:22:00.954 
因此 比如在應用在某種條件下

00:22:01.255 --> 00:22:03.557 
需要顯示條碼而且還連有NFC終端

00:22:03.891 --> 00:22:05.592 
通常會使得Apple Pay顯現

00:22:05.659 --> 00:22:08.095 
可以靜默這個功能這樣才能掃描條碼

00:22:08.829 --> 00:22:12.499 
在覈心位置app連接到iOS 9

00:22:12.566 --> 00:22:13.834 
或是晚些時候

00:22:13.901 --> 00:22:16.203 
背景位置跟蹤會有些改變

00:22:17.604 --> 00:22:21.875 
在CL Location 
Manager上還有新的API

00:22:22.743 --> 00:22:24.711 
要求一次位置更新

00:22:24.778 --> 00:22:28.282 
如果不需要持續更新位置

00:22:28.348 --> 00:22:29.783 
這是更爲有效方式

00:22:29.917 --> 00:22:31.151 
來獲得用戶的當前位置

00:22:37.024 --> 00:22:40.227 
對於MapKit 有若干新功能
具備地圖視圖

00:22:40.394 --> 00:22:42.963 
第一是訪問
3d Flyover View

00:22:47.968 --> 00:22:50.971 
現在可以顯示流量
以及量表和刻度尺

00:22:51.839 --> 00:22:54.341 
已生成自己的自定義調出

00:23:00.047 --> 00:23:03.684 
在HealthKit中 可以直接
實時訪問 Watch OS 2

00:23:03.750 --> 00:23:05.252 
傳感器數據還有若干新數據類型

00:23:06.820 --> 00:23:08.822 
跟蹤用戶水分的攝入量

00:23:09.423 --> 00:23:13.160 
跟蹤其在陽光下暴露的時間

00:23:13.393 --> 00:23:14.595 
以及生殖健康

00:23:15.863 --> 00:23:18.632 
新款API可實現
更好的HealthKit

00:23:18.699 --> 00:23:21.502 
數據設備跟蹤更好地支持刪除數據

00:23:22.102 --> 00:23:25.172 
以及跟蹤鍛鍊的新款練習會話API

00:23:25.572 --> 00:23:28.876 
幾個月前 我們公佈了
ResearchKit

00:23:28.976 --> 00:23:30.577 
可以用於開發人員和研究人員

00:23:31.144 --> 00:23:32.913 
創建醫藥研究app

00:23:34.248 --> 00:23:36.717 
ResearchKit現在包括
iPad支持...

00:23:36.783 --> 00:23:38.952 
PureTone
Audiometry

00:23:39.019 --> 00:23:41.388 
的新活動任務可用於確定

00:23:41.455 --> 00:23:44.024 
聽力閾值水平

00:23:44.691 --> 00:23:47.094 
以及簡單反應時任務

00:23:47.160 --> 00:23:49.630 
以便衡量用戶
對事件的反應時間

00:23:50.464 --> 00:23:52.999 
還有一種
圖像捕捉步驟可供使用

00:23:53.901 --> 00:23:57.037 
正如大家昨天所見
我們對HomeKit做了部分調整

00:23:58.939 --> 00:24:01.441 
我們現在可以支持詳細
變更通知

00:24:01.975 --> 00:24:03.243 
燈亮起時

00:24:03.744 --> 00:24:07.681 
就可以獲得具體的委託信息

00:24:08.315 --> 00:24:12.152 
明確特點和改動的配件

00:24:12.319 --> 00:24:15.689 
因此現在可以讓具體的燈亮起

00:24:15.756 --> 00:24:18.725 
而不是泛泛地房間裏有改動通知

00:24:21.261 --> 00:24:24.364 
HomeKit有4個預定義動作組 

00:24:24.631 --> 00:24:28.268 
早上醒來出門到家

00:24:28.335 --> 00:24:31.738 
上牀睡覺你可以完成
這些標準動作

00:24:31.805 --> 00:24:34.908 
關燈 鎖門這類事情

00:24:34.975 --> 00:24:36.410 
確保車庫門關好

00:24:36.510 --> 00:24:39.780 
所有這類問題都無需用戶另行配置

00:24:43.717 --> 00:24:46.854 
在iOS 8可以生成定時觸發器

00:24:46.920 --> 00:24:48.522 
實現執行計劃場景

00:24:49.556 --> 00:24:53.360 
在iOS 9可以生成
更爲複雜的觸發器

00:24:53.994 --> 00:24:56.063 
例如 要知道 當門鎖打開時

00:24:56.230 --> 00:24:58.565 
動作傳感器檢測到動作

00:24:58.665 --> 00:25:02.002 
這是在日出後30分鐘發生的事情

00:25:05.138 --> 00:25:07.608 
當然 Watch上還有
HomeKit 可以用手錶

00:25:07.674 --> 00:25:10.210 
直接控制家中的設備

00:25:12.346 --> 00:25:15.516 
有Wi-fi功能的附件
可以遠程連接

00:25:15.749 --> 00:25:17.818 
即便沒有Apple TV也沒關係

00:25:18.852 --> 00:25:20.988 
還可以與它們通過iCloud

00:25:21.722 --> 00:25:22.823 
直接溝通

00:25:22.990 --> 00:25:25.092 
有藍牙功能的配件

00:25:25.692 --> 00:25:27.661 
可以自動連上Wi-Fi

00:25:28.795 --> 00:25:31.265 
即便超出了配件的藍牙有效範圍

00:25:31.331 --> 00:25:32.633 
也依然可以控制

00:25:34.134 --> 00:25:36.937 
最後我們在家中的若干新項中

00:25:37.004 --> 00:25:38.472 
加入標準定義

00:25:42.910 --> 00:25:46.146 
對於CloudKit而言我們更新了

00:25:46.213 --> 00:25:48.081 
公共數據庫的限制和定價

00:25:48.415 --> 00:25:50.784 
但是更令人興奮的是
我們可以實現...

00:25:50.851 --> 00:25:52.886 
CloudKit 
WebServices

00:25:53.120 --> 00:25:54.521 
來整合網絡應用

00:25:59.459 --> 00:26:01.562 
本週還有兩個講座
是關於CloudKit 

00:26:02.296 --> 00:26:05.299 
《CloudKit最新內容》
和《CloudKit訣竅和技巧》

00:26:08.535 --> 00:26:10.270 
至此爲止 UI文檔

00:26:10.337 --> 00:26:12.105 
和動作控制器
會將發送給其他app的

00:26:12.172 --> 00:26:14.074 
每個文檔都進行備份

00:26:15.475 --> 00:26:18.278 
現在 只要打開到位
只要是在iCloud中儲存 

00:26:18.345 --> 00:26:21.148 
app可以要求直接打開文檔

00:26:22.282 --> 00:26:25.419 
可以在info.plist中

00:26:25.819 --> 00:26:26.820 
添加祕鑰

00:26:26.887 --> 00:26:28.655 
聲明適合執行新的代理方式

00:26:28.722 --> 00:26:29.923 
來直接打開文件即可

00:26:32.326 --> 00:26:35.128 
我們將在《構建基於文檔的app》
講座中詳細討論這個問題

00:26:39.466 --> 00:26:42.536 
現在 許多應用包括的資源在用戶首次

00:26:42.603 --> 00:26:44.638 
開啓應用時並不需要

00:26:45.873 --> 00:26:48.675 
將app可能會用到的每個資源
都包括在內  會令app

00:26:48.742 --> 00:26:52.346 
捆綁包太過龐大影響安裝速度

00:26:52.412 --> 00:26:54.381 
甚至會導致超出OTA限制

00:26:54.448 --> 00:26:55.949 
這會影響銷售

00:26:57.417 --> 00:27:00.888 
爲解決這個問題我們來介紹按需資源

00:27:01.822 --> 00:27:05.526 
應用會上傳單一的文件包
恰巧是滿足當天

00:27:07.427 --> 00:27:09.396 
所需 但是當應用有需求時

00:27:09.463 --> 00:27:10.797 
內容可以動態下載

00:27:11.465 --> 00:27:14.868 
這些資產都是運用基於輸入信息

00:27:14.935 --> 00:27:17.571 
以及用戶行爲的啓發式邏輯
處於智能化緩存狀態

00:27:21.408 --> 00:27:25.145 
在Xcode中 資產都是
使用簡單標籤分組

00:27:25.212 --> 00:27:26.113 
我們先來講講...

00:27:26.180 --> 00:27:29.049 
NS BundleResource
Request 的新分類

00:27:29.516 --> 00:27:32.452 
這可以實現用給定的標籤要求所有資源

00:27:33.720 --> 00:27:37.357 
一旦這些資源得以下載
你可以使用熟悉的API去訪問

00:27:37.424 --> 00:27:39.826 
　比如UI圖像命名圖像等

00:27:41.628 --> 00:27:44.431 
還有辦法在Xcode中進行檢測

00:27:44.498 --> 00:27:47.534 
模擬並未獲得資源
而對服務器提出要求

00:27:47.601 --> 00:27:49.736 
Xcode可以像服務器一般工作

00:27:49.870 --> 00:27:52.172 
嚮應用發送相應資源

00:27:53.340 --> 00:27:55.375 
現在 我們介紹另一種新技術

00:27:55.542 --> 00:27:58.312 
來解決應用大小的問題就是app分割

00:28:00.881 --> 00:28:05.018 
現在 應用常帶有與用戶安裝的硬件

00:28:05.085 --> 00:28:06.486 
不相關的資產和可執行內容

00:28:06.920 --> 00:28:11.058 
這一分割技術可以提供用戶設備

00:28:11.124 --> 00:28:14.728 
所需的資源和可執行內容部分

00:28:16.296 --> 00:28:18.966 
使用應用分割技術
處理App Store

00:28:19.066 --> 00:28:23.470 
可以自動生成併爲運行

00:28:24.738 --> 00:28:26.673 
iOS 9的設備提供應用的定製變量

00:28:26.740 --> 00:28:28.876 
這其中只包括設備相關的資源
和可執行內容部分

00:28:30.477 --> 00:28:31.678 
在服務器運用這種技術

00:28:31.745 --> 00:28:34.214 
不相關的內容甚至都不會下載

00:28:35.749 --> 00:28:37.184 
這會節省安裝時間

00:28:37.251 --> 00:28:39.286 
並有希望將app處於OTA限制以下

00:28:41.688 --> 00:28:45.025 
我們還要介紹最新的
NS數據資產分類

00:28:45.092 --> 00:28:48.095 
和設備上的這可以輕鬆獲取根據內存

00:28:48.161 --> 00:28:50.030 
圖像處理能力定製的內容

00:28:50.797 --> 00:28:54.401 
現在來看Game Center 
我們加入了嘉賓玩家功能  

00:28:54.468 --> 00:28:57.104 
在Game Center的多玩家
模式中 實現了新的配置

00:28:58.839 --> 00:29:01.909 
我們還統一了Game Center
服務器環境

00:29:01.975 --> 00:29:03.977 
以便於開發和測試的流線化

00:29:05.679 --> 00:29:07.714 
最後 我們來介紹ReplayKit

00:29:07.881 --> 00:29:11.585 
這可以提供
分享遊戲體驗的新方法

00:29:12.853 --> 00:29:15.756 
可以實現app輕鬆錄製視頻和音頻

00:29:15.822 --> 00:29:17.958 
並與其他用戶分享

00:29:20.160 --> 00:29:23.063 
在iOS 9中 SpriteKit
支持Metal

00:29:23.130 --> 00:29:24.731 
適用於相應的系統支持

00:29:25.365 --> 00:29:28.068 
對於不支持Metal的系統
它是開放式GL

00:29:28.502 --> 00:29:30.804 
這些都是自動完成無需人工幹預

00:29:32.472 --> 00:29:34.441 
還有一個全新的動作編輯器

00:29:36.176 --> 00:29:39.680 
當然它與按需資源緊密整合

00:29:42.482 --> 00:29:44.885 
在《SpriteKit最新內容》
講座中有更多詳情

00:29:47.554 --> 00:29:51.558 
對於SceneKit在Xcode中
有全新的場景編輯器

00:29:51.625 --> 00:29:54.361 
可以支持粒子 物理 

00:29:54.661 --> 00:29:56.029 
動作等等 

00:29:56.930 --> 00:29:59.867 
SceneKit還有相當多的新功能

00:30:01.235 --> 00:30:05.305 
場景轉換 音頻節點 模型i/o 

00:30:05.973 --> 00:30:09.943 
環境光遮蔽 光照圖
以及許多其它功能

00:30:12.846 --> 00:30:15.916 
SpriteKit和
SceneKit是構建遊戲

00:30:15.983 --> 00:30:18.085 
圖形界面的強大框架

00:30:18.719 --> 00:30:21.455 
對於遊戲它的強大之處
不僅在於圖像能力

00:30:23.590 --> 00:30:25.926 
遊戲有實體和組件部分

00:30:26.159 --> 00:30:31.131 
還有代理在遊戲中都有着目標和行爲

00:30:32.666 --> 00:30:35.402 
需要發現路徑算法
允許代理在遊戲附近導航

00:30:35.469 --> 00:30:39.206 
還需要AI允許代理決定之後

00:30:39.606 --> 00:30:41.842 
要採取怎樣的行動

00:30:44.278 --> 00:30:45.379 
參與遊戲所需的所有

00:30:45.445 --> 00:30:48.615 
這些元素現在都可在
GameplayKit中找到

00:30:48.682 --> 00:30:52.085 
在《GameplayKit介紹》
講座中還可以瞭解更多詳情

00:30:52.719 --> 00:30:55.656 
最後當然 我們要談談
WatchOS 2

00:30:56.123 --> 00:30:59.092 
除了直接訪問現有的框架

00:30:59.193 --> 00:31:01.828 
還有新框架如Watch連結性

00:31:02.229 --> 00:31:07.301 
將app與電話和WatchKit
連結 來搭建Watch錶盤組件

00:31:09.837 --> 00:31:12.039 
在《WatchOS 2 
WatchKit介紹》中

00:31:12.105 --> 00:31:13.240 
可以瞭解更多詳情

00:31:13.307 --> 00:31:15.509 
本週所有講座
的綜述在《探討WatchOS 2》

00:31:15.876 --> 00:31:17.377 
中有介紹

00:31:19.580 --> 00:31:21.782 
若要了解更多信息
當然有文件資料

00:31:22.549 --> 00:31:25.552 
有在線論壇開發人員技術支持

00:31:26.753 --> 00:31:28.188 
謝謝希望大家這周過得愉快