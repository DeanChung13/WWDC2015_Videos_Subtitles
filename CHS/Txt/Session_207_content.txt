WatchKit in Depth第一部分
诸位早上好！
欢迎参加WatchKit in Depth第一部分的讲座
讲座分为两个环节这是第一个环节
进一步探讨WatchKit中的变化
我叫安德鲁·普拉兹
将与福里斯特·希尔一道讲述今天的话题
希望您会感兴趣
我将讲述三个部分
即架构 手表 app内部手表扩展的基本布局工作原理
我会讲述资源和数据的存放地点
因为它是由两个部分构成的系统所以开始时可能会有点难以理解
对于那些已经从事过Watch OS 1开发的朋友
WatchOS 1是WatchKit的一个扩展是一个手表app
我将会讲到迁移有哪些变化以及有哪些相同之处
然后福里斯特将继续谈一下
WatchKit中的一些新的API以及新的类 
因此您的手表 app包含三个部分
它有一个iOS应用
你将会在手机上安装它
此外你还将提供一个WatchKit扩展
这是你自己写的代码
然后是一个手表OS应用
它包含资源和界面描述
您有了手机下载了您的app
而我们已完成的工作就是增加一批新的数据
一批附带并与其一道安装的文件
而那就是手表app
它包含您对界面的描述或许也有一些资源
然后就是您的WatchKit扩展
它包含代码和额外的资源
因此当您把它与您的手表匹配时
我们将所有的那些信息复制过去它就会出现在主屏幕上
作为一个完整的应用出现
当然手机上仍然留有备份以备以后重新安装的不时之需
因此我会谈到两个你将要提供的部分
一个是界面另一个是实际代码以及扩展
当您创建了一个新的WatchKit App
您可以看到实际上有两个独立的目标
两个独立的组件带有interface Storyboard的app
和您的代码这里的代码即Swift
而你有多达四个不同的可以向其添加代码的东西
因此对于storyboard这是它的界面部分
您可以在IB内编辑它正如编辑一个iOS应用一样
而我们提供相当丰富的一组界面元素 标签 图像等等
这就是watchOS 1的全部内容而且我们在watchOS 2里面
添加了几个新特性如Picker视图这将给您一个丰富的界面以及影片视图
因此 例如这里有三个带有你能够看到所有控制按钮的标准控件
它们是在interface builder内创建的
我们也有针对特定功能的自定义界面
一个是Glances它有更为具体的布局
另两个是用于通知的界面
一个用于静态通知另一个用于传送更为动态的
您在运行时提供的信息
因此正如我刚才所言您的扩展有四个功能
有个应用功能
当您的应用从主屏幕启动的时候我们调用您的扩展
它也被用于从时钟出现的单页glance
以及在您接收到通知的时候进行显示
而且现在也用于complications
对于其中的每一个都有个相关联的控件
对于Glances以及常规应用有WK Interface Controller
有一个专门的次级类
叫做WK User Notification Interface Controller
对于通知 您应该使用这个次级类
还有一个新的数据源对象
即WK Complication Data Source
关于complications我目前就讲这么多
今天稍后还有一个讲座环节对此进行更详细探讨
因此您的WK Interface Controller是与您的界面的主要连接工具
它所做的主要是自动创建界面属性
因此你会在界面设计中对一个界面元素贴上标签
并声称 类似这是我的标签
然后我们在控件上创建一个关联的对象并自动为您将其连接好
控件也支持菜单处理您可以自定义菜单或者使用静态菜单
我们提供对控件的导航推送等等或者调度
和模态显示
以及警告和action sheet
另外一个我们提供的内容是几个系统UI表单
文本输入 视频回放 音频录制
那么 比如说这里有个非常简单的界面控件类
它有一个插座变量app图标而我们在IB中加载它
当我们运行应用时 我们看到它提取了图标并将其显示在屏幕上
那么我想谈一下各种东西的位置
你的资源存放在哪里你从哪里提取数据
因为这个手表app分为两个部分
包括手表app本身以及WatchKit扩展
有两个地方存放数据
即WatchApp bundle 和WatchKit扩展bundle
而你必须确保记住它存放的位置
比如这里我创建了另一个对象
和以前一样它也有一个interface storyboard
和一个名为application image的图像文件
以及本地化的字符串文件
而扩展本身也包含同样的东西
它有另一个png文件和一个可本地化的字符串
那现在如果我们进行个容易理解的操作即创建两个插座变量
并使用IB插座变量将其连接起来表明这些是属性
并调用组图标
哦 我们没有扩展图标
原因是当你调用的组图标是在WK Interface Image上命名的时候
它并不在应用bundle内进行搜索
但是扩展图标并不存放在应用的bundle内
因此你要做的是直接从正在那个特定的bundle中运行的代码内提取它
因此在扩展代码内你调用UI图标的名称
而这将在本地提取图标
因为它知道如何在它自己的bundle内部进行搜索
然后你在系统内执行同样操作
你调用组图标而不是已被命名的组图标
那将传递图标并让两个图标都出现在您的应用内
那么现在你希望存储一些数据
您不会只希望提取一些静态图片你拥有一个极其动态的应用
因此有两个你感兴趣的文件夹
一个是文档文件夹
这是你存储更为持久的信息的地方
它是不可删除的就是说它在重启之间是一直运行的
但是需要注意的一点是它是不可恢复的
因此你必须检查手表是否被擦除否则你就要安装新的手表
还有一个缓存文件夹
这个是可以删除的因此如果系统认为需要更多空间
存储音乐 图片或其他 app
它将删除这些图片
因此你可以认为那些图片可能随时消失
这里有一个例子我们快速地看一下在哪里找到它
在这个例子中 主要调用的是document directory类
目录URL的文件管理器
它将请求第一个而那正是需要的 URL
因此我们创建一个包含我们的文件名的URL并向其写入一些数据
现在媒体出现了另一个有趣的问题
由于应用负责播放媒体
它也负责将音频录制在某个地方
因此当你的扩展请求播放一个影片或播放音频 或录制音频的时候
我们将其传送给应用
另一方面扩展负责
从互联网上下载或用其他操作生成媒体
它也负责获取你可能已经设置好的录制下来的音频文件
并将它们传送到你的服务器上
那么你需要做的就是设置所谓的共享容器
而那主要是为了让两个过程即应用和扩展一个能够共同访问的地方
因为出于安全因素
通常你不能从一个过程进入另一个存储区域
而你启用了这种Xcode
你使用了所谓的‘app群组’
将其用于扩展和你赋予了独特的识别符的应用
而那就是你的应用群组
那么这里你需要真正担心的唯一事情仍然是有一个函数
即文件管理器
你可以为安全应用群组识别符请求容器URL
并将其通过你创建的群组识别符进行传递
而那将把你的URL赋予到一共享的存储区域
因此从那里你可以存储app
能够从扩展读取或者提取的文件
这里我们有一个例子是当前的音频录制控件把URL从共享容器取出
那么它将把音频录制到那个文件内
因此现在我希望谈一下如何从手表提取数据
有两种方法可以实现
一种是NSURL Session它是在Foundation框架内的
另一种是通过一个新的Watch Connectivity框架
因此NSURL Session是你从互联网上获取资源的方法之一
如果你有一个聊天app或类似的东西你会希望与您的服务器对话
它让你直接通过HTTP和HTTPS访问互联网
而有多种配置方式
而且它支持以后台方式下载
原因是您的扩展经常不处于运行状态
您的手表屏幕是关闭的您的扩展是睡眠状态的
您的扩展甚至不运行的时候
而这都是下载数据所需要的
需要注意的一点是
一旦我们告诉您数据已经在那里一旦文件已被完全下载
您需要立刻拿到它因为否则的话它就会被从临时缓存删除
因此这里有一些代码一共有几页
一个简单的downloader类
我们首先要做的是释放NSURLSession 
我们慢慢做这件事以防我们永远不需要调用它
而这里的调用主要是创建会话
而且只有两行代码一行是为了对后台进行配置
那么你可以说这里是一个后台会话
而我们希望传入一个ID过一会儿我会谈到它
而我们使用那种配置创建URL会话
而且我们让downloader类本身成为delegate之后的实例
以便我们能够在文件进来时得到通知
然后为了开始URL下载
我们请求一个新的任务
并让其运行
而它将发出请求并开始下载
正如我刚才所言 通常你的扩展是关闭的或不处于唤醒状态
在它关闭的情况下
你将需要重新连接到已经设置好的所有下载任务
因此你要设置的是个在您的WK扩展中叫做restart的调用的函数
福李斯特之后将谈到那一点
启动调用函数并重新启动下载以便你能够知道它们会到来
实际上它们也会消失但是你不会知道它们已经结束了
而这里是实际的delegate方法
这就是你与NSURLSession连接的方法
当文件完成下载之后就会调用此方法
正如我刚才所言 我们需要立刻将文件复制以防它消失
以防系统将其删除
这种情况下我们将获取缓存目录
因为或许我们过一会可能会需要它
我们将生成一个URL
且我们用文件管理器复制从被传递进来的原始URL
即从位置URL到缓存目录的URL
我们已经将其复制并跟踪它以便以后使用
因此我们可以读取你下载的任何数据
此外还有WatchKit connectivity框架
它实际上存在于双方
比如你在它们之间共享数据
你可以在手表和iPhone之间建立个共享的字典 
它让你传输文件也是后台运行
它也让你从手表直接向作为父应用的手机app
向父设备iPhone上的父应用发送请求
明天将会有一个关于该话题的环节
我建议大家要去听因为它是新内容
而且是手表和iPhone上都有的
那么这里有几个迁移方面的幻灯片
对于已经开始开发watchOS 1 app的朋友
您多半已经见到过这个内容
watchOS 1的WatchKit扩展
是你们已经创建的东西或是你们的项目内一个目标
但是它使用了SDK中的iOS平台
因此它存在于iPhone内而不是在手表内
因此它让你在手机上共享一个框架
那么你可能有一些代码是两种扩展上通用的
比如从网络上获取你的信息
同样的代码在iPhone应用和手表应用中4都能运行
因为您无法直接读取手表存储器
我们为您提供了一种缓存图像的方法即一张图片和一个名称
之后当我说“已对上述图像命名”时
我们已把资源下载到了手表上而且速度将会快得多
因此我们为您提供了一种直接与应用对话的方法
显然是从手机到手机的过程因此它是非常迅速的
借助watchOS 2 我们已经添加了一种新的SDK
它是完全独立的与iPhone和OS 10 SDK类似
它确实为您提供了一套可用的iOS次级框架
虽然您不会获得和手机上一样完整的功能性
但是你也获得很多便利
你可以在你的项目中加入一个框架
正如你在iPhone watchOS 1 app上所做的一样 
但是这个框架是使用手表应用和手表扩展下载的
因此你不会在一个设备上共享代码
但是它确实让你仍然把网络访问代码分离到一个单独的
手表可以使用的框架内
现在当然 比如说手表对于你提供的手表框架
可能使用NSURLSession读取信息
因此如果您已经开发了一个WatchOS 1应用
您实际上已经做了很多准备以便接触watchOS 2
它们同样拥有有变化和添加的API 
但是您应该能够不做任何改动编译很大一部分
并且可以将资源复制转移
因此如果在您的 WatchOS 1扩展内有图像
您可将其添加到WatchOS2扩展的目标并将其复制到手表上
但是你必须确保它们的大小被调整到适合于手表
有几项新的改进
当然主要的一点是您的手表app运行于您的手表上
扩展也是如此
而那意味着UI的反应性好得多了
您点击一个按钮它立刻做出反应
当然现在你也可以独立操作而不必担心手机就在附近
你不必担心手机正在连接中或正在上网
我们也增加了几个UI元素以及一些新的系统UI表单
我们将在本节讲座或其他讲座上谈到它们
我们增加了动画
因此现在您可以让切换间的过渡实现动画效果
如图表或图形的大小
或是类似的东西
或字符串的不透明度你可以使其具有动画效果
就此内容明天会有一节专门讲座
因此我建议您也看一下那节讲座
那么对于控件API大体上是相同的
你有相同的界面控件你会使用glance
没有任何变化
而且通知也是一样的
你无须做出任何改动
有几个API已经不存在了
图像缓存和open parent已被
替代为直接读取图像和Watch Connectivity
福李斯特将提到两个新的元素是extension delegate 
及在表盘上显示被用来为complications提供图像和文本的数据源
最后对于那些目前有Xcode项目的朋友
您需要做的是增加一个新的目标
可以在使用WatchOS 1的同时
请求增加WatchOS 2并向其中添加文件
将文件标记为同一个目标的一部分
添加即将在手表上被编译并加载的框架
如果您愿意
您可以从Xcode开始启动一个全新的项目
而它将会自动创建iOS和WatchOS 2 app
因此您可以从那里启动填充内容
昨天有一节讲座我建议大家看一下视频
它们对这一过程的描述要详细得多
我就讲这么多
现在让福里斯特接替我继续更详细地讨论新课程
以及现有API上发生的变化
我叫福里斯特是一名WatchKit工程师
我将跟大家谈谈
我们在面向WatchOS 2的WatchKit中增加的新的API
首先我谈一下WK extension delegate
在iOS上我们有UI Application Delegate
作为众多方法之一它帮您跟踪您的app的生命周期
这包括诸如你的启动你变得活跃
以及你将停止活跃
我们已经添加了WK extension delegate
来跟踪您的应用的生命周期
首先我将从application Did Finish Launching开始
当程序完成启动及扩展完全未运行时它被调用一次
这可能是您的应用需要的初始化步骤
设置notification observer并预热任何今后可能需要的服务的地方
重要的一点是注意此时您的应用尚未进入活跃状态
接下来我们有application Did Become Active
每次你的应用被从后台转移到前台或在第一次启动之后
它都会被调用
这是个启动任何仅需在您应用实际活跃期间运行的代码的好时机
或激活任何您可能需要的定时器
尤其是更新在后台或根本未运行期间已经发生变化的状态
Application Will Resign Active
是在您的app停止活跃状态并被移动到后台之前调用的
您希望准备进入不活跃状态
如果您已经启动了任何定时器
这是一个使它们暂停的好时点
如果您选择在此时不将其暂停
它们将不会在后台运行你不会有后台运行时间
但是你将会失去对它们的精确运行周期的控制
因此如果您想进行控制
当你不活跃时暂停它们是个不错的主意
而当你真正变为活跃时再将其重启
而你希望在此时保存您的应用的状态
因为在此时间点之后系统中的另一进程需要那些内存
您的扩展将被强制终止
因此总的来说
WK extension delegate将跟踪您的应用的生命周期
需要注意的是
这与通知UI Glance UI或complication数据
毫无任何关系
这仅与跟踪应用的生命周期有关
接下来我讲一下handle User Activity
Handle User Activity是个来自于WatchOS 1的现有调用方法
在WatchOS 1中它被用于应用启动的时候
通过点击您的glance而导航到您的应用内的适当位置
那也从glance得到反映
我们将在watchOS 2内以两种方式构建它
首先它会在应用启动时被调用
通过点击您的complication启动应用
任何你在Complication中反映的状态将需要导航
到您的应用中该状态对应的适当位置
此外我们将把它移动到 WK extension delegate
而不是我们过去所做的root Interface Controller
这会给你提供更大的灵活性让你处理想做的事情从而实现状态维护
那么我们在一个名为WK extension的新对象上进行新的调用
新的调用是root Interface Controller
我必须警告你它将来自于将来的种子而不是在现有的种子内
因此为了暂时进行估算
您将不得不在您的界面控件的初建之时在其上进行节省
记住这一点后
你可能会暂时在WK extension delegate上
执行handle User Activity
我将通过新的调用取得新的根控件
并将跳转回到根部然后我将请求根控件继续运行并做出任何适当的操作
以恢复您的状态
注意 这里有很多你能做的其他事情
你可以建立模态警告或进行其他操作
以处理传递给你的用户活动
接下来在IOS上我们有UI application
它是一个单独的对象代表正在运行中的应用
所以在watchOS 2上我们添加类似WK extension的东西
其中这个是主要的界面用于打开标准的系统URL
因此 您将能够打开开放系统URL API 
而执行诸如打电话 发送文本消息或显示PassKit UI等操作
那就是开放系统URL 和WK extension
现在我将讲一下关于通知的内容
首先我要说的是远程通知
远程通知来自于互联网
而它们总是先到达你的手机
那时候你的手机将决定是否显示通知本身内容
或将其继续转发直至它被显示在手表上
现在手机使用了一套规则而做出决定
而这些规则中的标准包括是否
您的手机屏幕已被上锁
或是否您的手表被戴在您的手腕上并且已被解锁
因此诸如watchOS 1
您的WK用户通知界面控件在接收到发给不活跃app的通知时便会运行
当发生这种情况的时候
其中的一个调用确实会收到远程通知或者收到本地通知
它将会在您的控件上被调用
而您自行决定是否及时调用completion handler
如果您花费太长时间您的默认界面将被显示
它有点不太生动
因此这由您决定是否在合理的时间内进行这个操作
接下来我将讲一下本地通知
本地通知必须从手机上由您的iPhone app发出
但是你可以从WatchKit扩展向您的iPhone app发出消息
并请求它发出本地通知
同样的逻辑也适用于远程通知
对于远程通知手机将决定是否显示通知本身
或是否将其传回给手表并将其显示在那里
那么让我们来查看一个例子看你如何进行该操作
这里我将使用watch connectivity 消息调用从手表向手机app发送消息
当我的iPhone app收到那个消息时它可以发出本地通知
启动常规逻辑 确定在哪里显示该警告
这是相对简单的代码
那么现在我们可以在您的手表上看到警告
我要讲一下从您的通知UI启动您的应用
从这里可以用两种方式启动app
要么你可以从通知动作按钮启动
在这个例子里我已经通过回复按钮进行了设置
用户也可以通过点击左上角的应用图标来启动应用
当这些动作其中之一发生时
或者当用户做了这些事情之一时
在您的WK extension delegate上会进行这些调用其中的一个
两个handle action with identifier 调用之一将被执行发出远程或本地通知
您将会收到被启发的动作的识别符
如果它们点击了应用图标你将会收到一个 0
而对于远程通知的情况你将会收到一个含有通知负载的字典
在本地通知的情况下 您将收到一开始就创建的UI notification对象
目的是为了发出你的通知
那么 这就是如何从通知启动你的app
接下来我将谈一下内嵌通知的文本回复
在iOS 9和watchOS 2中为内嵌通知文本回复增加了第三方支持
在此例中 回复动作已被指定为发生文本输入行为
当用户启发此动作
而不是启动app时
或向您的iPhone app发回一个信号时
用户将被呈现一个文本输入UI
因此您在此UI中可以看到用户能够启动麦克风口述回复
他们可以点击表情符号图标
以便从表情符号选择器内输入或者从一个提示列表内进行选择
而你作为app开发者将可以提供这样的提示列表
而你实现这个的方式
就是通过执行这个
对suggestions For ResponseTo Action With Identifier的调用
它是在您的WK用户/通知界面控件上的
因此一旦用户选择了
或提供了他们的文本输入内容不管是通过您的选择之一
或是其他某种方法
您的应用将被启动
而你将收到这个handle Action With Identifier调用
它出现在您的WK或您的WK extension delegate上
您将注意到这个变量有一个新的参数即response Info
而response Info将包含
输入的文本
用户在UI User NotificationAction Response Typed Text Key内
那么我将要讲的另一个新特性是运行中的语言选择
这里您可以看到我们有标准的文本输入
不管何时用户启动了文本输入UI
他们都能选择通过力度触摸调出语言选择器
语言选择器将提供所有可用的语言
这些语言根据您在iPhone上提供的键盘而选择的
那么我将提供英语和西班牙语
那么我将继续进行切换到西班牙语
这将把文本输入UI切换到西班牙语
并可以填充一个西班牙语提示列表而不是英语提示列表
这就是运行中的语言选择
接下来我会谈一下如何通过另一种方式处理通知
在watchOS 1中 不管您的app活跃与否
我们总会将您的WK用户通知界面控件实例化
而系统将在屏幕的上方显示出来不管屏幕上是什么 包括您的app
在watchOS 2中如果您的app是活跃的 我们将不再那么做
相反WK extension delegate
将会收到Did Receive Notification调用
您的app将决定如何适当处理和显示通知的内容
比如说 如果你在编写一个聊天app
您可能会把内容附加到聊天记录的末尾
同样系统将不再为你显示警告
因此如果您希望用户了解出现了什么样的通知
您需要将其呈现在您的UI里面
这个就是我要说的通知内容
接下来我将讲一下模态警告
在WatchOS 1中
您可以取消隐藏群组的隐藏状态而显示警告
在watchOS 2中我们允许使用present Alert Controller With Title 
这会让对用户呈现模态警告的操作变得容易得多
在这个调用里面有三个变量第一个是警告
这是一个简单的调用告诉用户发生了某些事情
接下来我们有Side By Side Buttons Alert
这是当前在iOS中向用户呈现二选一选择的非常流行的方式
我们认为第三方开发者也希望在他们的应用中使用它
最后我们谈一下 action sheet
action sheet最多有四种动作外加一个可定制的取消动作
您可以看到Nevermind动作
我已经把Cancel动作定制为Nevermind
各种动作可被选择标记为“毁灭性的”
我是通过delete按钮实现的
目前那意味着它们将以红色显示
一旦用户从Cancel或四个主要动作中做出选择
您将会收到一个回调表明哪个按钮被选中
因此总的来说 我们在watchOS 2中有一个新的架构
我们增加了WK extension delegate
帮您管理您的应用的生命周期
我们有大量的新API
而且当然还会有更多的到来
如果您希望了解关于安德鲁和我刚才在此所谈内容的更多信息
请查阅文稿和示例代码
而如果你有具体的疑问
请联系Jake Behrens地址如下
而且会有大量的相关讲座
包括这里将进行的下一节讲座也就是我们的讲座的第二部分
那么非常感谢大家的莅临