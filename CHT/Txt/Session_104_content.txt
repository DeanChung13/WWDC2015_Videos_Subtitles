肯奧爾：早上好
Xcode 7是我們下一步推出的主要工具
是爲了開發 Mac、iPhone、iPad
和 AppleWatch app準備的
今天上午讓我們來看一看
Xcode 加了哪些新料
今年最大的變化是我們添加了
第三方平臺Watch OS的支持 當然了
你仍然可以用Xcode這款你已經熟悉的
同樣工具來開發 AppleWatch應用
Xcode 7同樣也包括Swift 2
後者是基於去年我們介紹的
新的編程語言
從整體上說 Swift 2速度更快
不僅是指你的app在Xcode中
運行和調試速度更快 
此外app在用戶的設備上也更快
Swift 2還有一些新的語言功能
比如錯誤處理 引入了顯式語法
這樣處理Swift中的錯誤就更快了
可及性 現在Swift對某些API的最低
OS需求有了深刻理解這樣採納新API
繼續支持現有的OS也都更加容易
可測試性
現在測試叢就可參閱內部API
你的測試覆蓋更廣而無需公開
任何其它源信息
協議擴展使得你能夠爲任何類添加方法，
以便實現某一協議
你可以藉助Xcode 7的Migrator
把所有的Swift代碼 轉換成Swift 2
它既適合項目 也適合playgrounds
我們還向Objective-C中添
加了新語言功能
這樣它和Swift就配合的更好
比如Generics讓你可以指定收集的...
類型信息
NullabilityAnnotations
能讓你指定你
何時期待零值 何時期待非零
這樣Objective-C
和Swift之間就真正實現了
無縫交互 這很棒
我們已經先行一步，在我們的SDK中
採用了這些特性
因此你現在就可以看到好處
如果你想用Swift 2
或者你昨天看到的新的API
在playground中做就再好不過了
去年 我們引入了playground
從那時起它們的進展很大
現在你不僅能探索擺弄代碼
還可以從一個playground中
解釋一個想法 一個概念
我們引入了像RichComments這樣的特性
你就可以用一個標示語法 
來解釋環境代碼中發生了什麼
它們的格式和字體都很漂亮
非常顯眼
你可以在這些評論中添加網頁鏈接列表
甚至添加圖像
我們還允許拉取結果並顯示在
快速瀏覽窗中 你可以把它們
拉取到源代碼中對應的那一行代碼下面
這對定位因果關係的作用非常大
這很棒
通過向新支持源文件夾中添加Swift代碼
你幾乎可以向playground
無限添加功能
這有助於幫助你
保持playground的整潔專注
同時 你也有地方去放支持功能
這裏 還有一項性能
因爲是配套代碼 
運行時不是交互式的就能對它們進行編譯
它們只是對playground
提供支持
所以可以運行的很快
我們最新的playground
特性是 Pages
這使你可以爲某一話題編寫內容
例如 如果你想製作一個與排序相關的
playground 你就可以添加
一個與排序原則相關的介紹頁
然後你可以添加涵蓋特定
排序算法、快速排序、
冒泡排序等事情的後續頁面
之後 如果你想添加頁面導航
你可以添加一些我們之前介紹的標示語法
Playgrounds是進行教導的得力方式
去年 我們把教程做成了playground
今年 我們又升級成了Pages
這就是Swift 2 和新playgrounds
除了iOS 9和OS 10El Capitan
我們還向Watch OS 2中 添加了新運動
新的WatchKit能幫助使你的app更具響應性
並且增強你作爲開發者的
控制能力和靈活性
如果你還沒看
“Watch OS 2中有什麼新料”
我建議你看看
有些東西很棒。
當然 你也可以使用Xcode中的故事板
來開發完整的watchapp 你還能快速展示
你的app如何在屏幕間轉換
你可以設計並完成glances
甚至新WatchKitcomplications
也可以
對於iOS來說使用新StackView等
事物來開發
改變屏幕方向適配不同屏幕
尺寸的app從未如此的簡單
有了新iPad多任務處理功能
你在界面構建器中定義的大小類
比以往任何時候都要重要
和iOS 9一起， 我們還引入了一項叫
App Thinning的新橫切特性
App Store可以量身定製你的app
爲每臺用戶設備
推送最佳、最小版本
這樣你就可以集中精力開發優秀的app
而不用擔心app的大小 
因爲你知道客戶不會下載到無用內容
當然 Xcode也會幫助你配置你的app
讓你的app瘦身
App Thinning由三個不同的部分組成
第一個部分就是Bitcode
當你存檔提交時Xcode會把你的app
編譯到一個叫做Bitcode的中間表述
然後再發送到store
稍後App Store會重新優化你的代碼 
幫助你進一步校對編譯器更新
新處理器性能等事情
你不需要做任何事情
就可以坐享Bitcode的益處
Xcode會替你搞定一切
其次就是Slicing
當App Store向用戶設備推送你的app時
它會只推送那臺需要的設備美術資源
舉例來說 如果你的app中有爲iPhone6
和iPhone6s準備的2x和3x的資源
那麼iPhone6只會收到2x資源
而iPhone6s只會收到3x資源
要利用Slicing 你只需要使用
Xcode中的 AssetCatalogs即可
最後是點播資源你可以控制
何時下載資源
例如 你可以在用戶通關
你的遊戲第4關時纔開始下載第5關
你可以控制很多東西
這很棒
約翰會給大家演示一下Watch OS 2
和 AppThinning
喬恩·赫斯：早上好
今天我會演示Xcode7中我最愛的兩項特色
即 nativewatch 擴展功能
和應用瘦身
讓我們通過一個小遊戲來展示
我們的小遊戲 已經爲WatchKit 1 
做好準備了
現在我想升級成Watch OS 2
Xcode好像和我心有靈犀
我在導航這裏看到一個現代項目的化序列已經放在隊列中了
我會選中它
開始把我的項目設置遷移到Watch OS 2
面板這裏 Xcode給了我一個總覽
讓我知道接下來會發生什麼
我想多向你們談談細節
像Watch OS 1一樣 Watch OS 2
應用是由一個app擴展功能和一個應用組成
你的代碼會進入app擴展功能
然後遠程驅動app
Watch OS 2就不一樣了
app擴展功能和app都會直接運行在watch上
這樣應用的響應性和獨立性都更好
聽起來很棒
我來試一下
發生了什麼？
Xcode幫我搞定了
所有遷移項目設置到Watch OS 2的細節
昨天它幫我配置了構建
我們發佈的新WatchOS SDK的
Watch目標
它幫我設置了WatchOS 2 最低部署目標
爲它還幫我配置Watchapp擴展功能
Watch app內部複製這樣當在Watch上安裝時
它們會一起移過去
好的 這就是升級項目設置到Watch OS 2的
全部內容
我們的Watch應用都很美觀、很輕便
但是我們的iOS應用卻比較笨重
這主要是因爲我的資源目錄中的圖片太多
我想讓資源變小但又不想去除任何內容
這就是新App Slicing特性
大顯身手的時候了
大家看到這些圖像有1，2，3x的不同表達了吧？
有了App SlicingXcode 7
就能和AppStore一起
確保每臺設備
僅僅獲取最最適合的單張圖像
這樣就可以降低30%到40%的應用大小
最妙的是這基本上是自動的
我只需在工作資源目錄中使用
Xcode 7就行了
但是如果你想把某些資源推送給全體設備怎麼辦？
我們擴展了Xcode 7的資源目錄
以便支持任意數據
你可以把任何數據放到這裏
我在目錄下面這裏
有一個天際線文件夾
裏面是世界各地城市的3D模型
我們把這些模型展示給用戶
讓他們猜是哪座城市
我想把舊金山的高質量模型
加到遊戲中
但是隻推送給最高端的設備
沒問題
圖像可以按照比例因子和尺寸變動
數據資產也可以根據設備的性能特徵變動，
比如設備的內存大小
GPU性能。
我想給2G內存的設備增加專用資源
那麼我只需要把高端資源
拖動到這裏來 就萬事大吉了
每臺設備都能得到最佳資源
而不用重付費
好的
現在我想向你展示點播資源
它使得我們可以在App Store中
遠程管理應用內容
通過用字符串做標記
我們把資源加進了點播資源中
字符串可以是任何內容
例如 如果我們是在開發遊戲
我們就可以根據關卡名稱標記構成某一個關卡的資源
運行時 我們使用NS Bundle
ResourceRequest 類
就可以把整個標籤的資源提取到遊戲中
<br/> 供本地快速訪問
我給你們展示一下如何使用點播資源
我先從目錄中選擇一個文件夾
與遊戲類型相關的問題都在這裏了
我要在監視窗中
使用新的點播資源標記
把問題部分給標記出來
我只需勾選它們爲點播資源託管即可
那麼你可以勾選目錄中的哪些東西呢？
你可以像我一樣標記整個文件夾
你也可以直接標記圖像和數據
你還可以標記資源目錄中的...
SpriteAtlases
Sprite Atlases是...
Xcode 7資源目錄中的一個新組件
把你的Sprite Atlases放到目錄中
就激活了我之前提到的Splicing 這一功能
你還可以在Xcode項目中標記鬆散文件
我可以通過監視窗對某一文件中的所有標籤進行總覽
如果我想看到某個標籤中的文件
或者所有標籤中的全部文件，該怎麼辦？
我可以到 ProjectEditor
選擇我們的
ApplicationTarget
然後再到 NewResource 標籤中
就可以看到我的全部標籤了
如你所見之前我標記了很多內容
這裏可以進行總覽 確保一致性不出問題
例如 我發現這個標籤和其它格式不一致
缺少問號後綴
沒問題
我一下子就編輯 更新好了
我們的內容在點播資源中有標籤
現在我演示下如何在代碼中調用
現在是新NS Bundle資源請求類大顯身手的時候了
遊戲分類中有兩個回調非常適合這種情景
啓用類和終止類
它們非常適用於點播資源 
有兩個原因 第一 它們會適時歸類， 
第二 它們發生在用戶啓動遊戲前
但是我們一知道用戶要玩遊戲
我們就可以對點播資源進行預取
我用一個實例變量來延遲
一個 NS Bundle資源請求
NS Bundle資源請求是由標籤證實的
別忘了 標籤就是簡單的字符串
我在類名後面附加批問題來構成標籤
然後我就可以通過標籤創建叢資源請求
最後 我要使用新的開始獲取資源
來完成處理程序方法來調用請求
這是一種在後臺運行的異步方法
它會從store中下載全部內容
下載完後會激發完成處理程序
只要它開始運行我不說資源請求不用了
所有內容的本地訪問一直會很快
我愛死這個了
我已經在用的相同API的內容都有了
NS Bundle、Path of
Resource、 UI Image、
Image Name、 Texture Name
這些方法的用法都和之前一模一樣
我的應用中其它的資源瞭望碼都沒有變
現在 所有的內容都可用
直到我說不用 NS Bundle資源請求
我是怎樣做的？
在終止類這一方法中
我會調用結束訪問 NSBundle 資源請求
我讀取到緩存中的內容都刪掉了
以後可以繼續訪問
並且當系統空間不足時
這裏會標記爲“可清除”
這樣我們就搞定了點播資源所需的代碼
我想構建並運行我們的遊戲
開始新遊戲
我要演示使用點播資源時的
一些調試功能
調試導航器這裏我要選擇磁盤
得到磁盤報告 瞭解應用在磁盤上的使用情況
我們已經在Xcode 7這裏添加了點播資源標籤
在“我的標籤”內 你可以看到它們的大小和當前狀態
現在標記爲“未下載”狀態的
都由Xcode扮演了app store的角色
我所有的資源都在Xcode還沒有到模擬器
但是 我點擊其中的一個類
我們在後臺運行的代碼就會下載內容
現在 “我的標籤”的狀態成了“使用中”
我換一個類
你就可以看到第一個內容從緩存中刪除了
“已下載”標記還在
現在正在使用的是“技術問題”
這就是Slicing 和點播資源
有了應用 Slicing 我們就能把iPhone 6
應用的大小從140多MB降到不足100MB
有了點播資源我們還能進一步
把初始安裝包的大小降到30MB
現在用戶啓動遊戲就更快了
又輪到你了 肯
肯奧爾：謝謝 喬恩
今年 爲了直接增強你的app品質
我們引入了很多新的特性
我們先來談談調試和剖析
Xcode 7我們給iOSapp引入了電量刻度
IOS 9會對比每進程消耗的電量
會在右邊的電量報告這裏顯示
Xcode中的量規能讓你
預期情況和現實情況...
進行對比
如果你發現電量使用中
有尖峯而應用又處於空閒狀態
這就提示你可能有問題了
當你遇到此類問題時
你就知道到底應該看哪處代碼
或者 你可以跳轉到Xcode 的各個報表的
Instruments那裏
從電量報告那裏我們可以跳轉到New Location
儀表那裏然後就可以知道
是否有效利用了核心位置API
我們可以知道是否過多請求了用戶位置？
是否請求的用戶位置的精度過高？
這些請求很耗電
我們就可以檢查一下
iOS中還有一個新...
Metal System Trace 工具
你可以瞭解你的代碼是如何影響幀頻的
硬件渲染顯卡驅動能讓你瞭解
整個 Graphic Stack 功能很強大
你或許還注意到Instruments
這裏有一個重新設計了的軌跡視圖
更清晰了 
並且用起來也更加順手
通過雙指縮放等手勢
在數據中導航也很容易
新Instruments 就介紹到這裏
我敢說
這裏的每個開發人員
都遇到過客戶報告崩潰了
但你就是沒法重現的問題
好的
總有那麼一兩次吧？
Xcode 7中的
AddressSanitizer
能助你一臂之力
AddressSanitizer
會把你的Objective-C
編譯成C代碼 
並捕獲類似緩衝區溢出的事件
一發生這種事件就可以捕獲
Xcode會停在造成這個問題的那行代碼那裏
這個新調試特性很厲害
凱特 會給大家演示一下
AddressSanitizer
凱特·斯通：謝謝 肯
我們的小遊戲很適合和朋友一起玩
但是有時啓動遊戲時會崩潰
崩潰很難預測這種故障也很難重現
很難弄清楚原因
你肯定遇到過類似情況 
因爲我聽說有人會使用指針來明確地管理內存
這個遊戲很美
我們可以開始新遊戲
選擇一個類
再選擇一些用戶好了
看起來很不錯 突然...
現在在關卡中 正好重現問題
故障不好找
我們看看這個
是在哪裏崩潰的呢？
我怎麼調試？
是主類崩潰了
我在那裏根本就沒寫代碼
Stack Trace裏面也沒有任何提示
這種故障最難處理了
幸虧Address Sanitizer能幫上忙
在Xcode中我們有很多此類診斷工具
你只需要在SchemeEditor中
運行你的app即可
當我在Scheme Editor中點擊Run時
<c.color000000><u> </u>我會按下選項這個快捷鍵
我可以對應用的運行方式進行配置
其中Diagnostics標記
能讓你選擇一些舊工具
以及AddressSanitizer這新工具
Address Sanitizer
會重新編譯應用 添加許多新工具
告訴我哪裏失效了
以及爲什麼失效了
這一點與衆不同
我們重新運行一下應用看看
現在我發現 當我選擇一個類
並移動到下個頁面時應用馬上停止了
就是這裏發生了內存崩潰
這樣我在應用急剎車之前
就能找到問題所在
此時我就知道具體
是停在了哪個堆棧上 是我調用的某個
Objective-C代碼有問題
並不是每個人都能全部用Swift寫代碼
事實上 這個遊戲就是用Objective-C
框架封裝C代碼寫成
我們的問題就出在這裏
我不熟悉這種代碼。
是我要看看調用的代碼
用Swift寫的
我正在調用一些登錄API
它告訴我到底哪裏出故障了
但沒說原因
再往偵錯導航欄下面看
我發現Address Sanitizer 
還告訴我我使用了已經釋放的內存
這就是問題的根源所在
我可以從偵錯導航欄中看到具體是哪個內存
我正在讀取一個50字節熱區的首個字節
而這裏已經分配出去了
我還可以再點擊下實際看下內存
它之前是用來保存日誌消息的
Address Sanitizer
用灰色告訴我 這個內存無效
我不應該再繼續讀取這個內存
它還給了我
內存初始分配調用堆棧
我就知道是我在創建有意義的使用日誌時
產生的更重要的是 告訴我當時內存分配到了哪裏
我能看出來 是我調用
終止登錄那個設計欠佳的API時發生的
我本來以爲它只會清除登錄
但它卻搞壞了關鍵資源
讓我們快速解決這個問題
我把這行代碼拿掉
每次錄入消息時不再調用它
而改成僅在銷燬時調用
連同工具 AddressSanitizer
重構了應用
仍然很好用 仍然能交互使用
但我還能更進一步
現在一切正常了除非再有問題
Address Sanitizer
不僅僅能提示已釋放的內存
它還能告訴我緩衝區溢出
並告訴我正在溢出的流
和堆棧內存
這是件非常強大的工具
你現在就應該把這件工具用在你的應用上 
找出所有潛藏的內存問題
我們儘量讓它容易上手
因爲Address Sanitizer不僅能以
這種交互方式運行，
你還能把它用在Xcode服務器中
這樣你就能用它做一系列測試
代碼出現問題時及時發現問題
你想盡量減少崩潰次數
但老實說 徹底杜絕崩潰是不可能的
所以我請板井給大家講講Xcode
如何能幫助你分析得到的
崩潰日誌
板井·羅姆：謝謝 凱特
大家早上好
Apple開發者項目成員可以讀取
Xcode中的新崩潰日誌
當你通過App Store
或者TestFlight分發你的app 
並把符號信息包含在內時
我們會從用戶那裏收集崩潰日誌
這些日誌會聚合成崩潰報告
下載到Xcode中 你就可以在配置窗口中
查看並分析這些日誌
這種集成是無縫的你可以很容易地
找出並修復關鍵問題
我來告訴你如何使用
去年 我們引入了TestFlight
TestFlight是一項便捷的服務
能夠分發你的apps測試版本
和Xcode中的崩潰日誌配合的很好
昨天我們剛剛分發了遊戲的一個測試版
用戶報告了一些崩潰
我想找出並修復
我先啓動Xcode
我已經在Xcode的Account
Preferences面板中輸入了
我的Apple ID 所以我只需要打開配置窗口
查看崩潰日誌就可以了
窗口左邊是Xcode下載的我的研發團隊通過
iTunes Connect 上傳到
App Store或TestFlight的
與apps相關的全部信息
我選擇好遊戲
我可以從右邊選擇想要的版本
列表最上面的55號版本
是昨天通過TestFlight分發的
我點擊它
Xcode會在下面下載全部最近的崩潰信息
它們會按照出現頻率排序 列表最上面的
當然就是測試者遇到最多的問題
在右邊我能看到崩潰的回溯跟蹤
Xcode會很貼心地以美麗的淺澄色
高亮其中的一個Stack框架 
這樣我就知道app 可能有問題
尤其是使用日誌和登錄方法中
app發生崩潰的地方
這與凱特剛纔使用Address 
Sanitizer捕獲並修復的崩潰很相似
我最喜歡這種故障報告因爲會自動修復
我看着就行
我會點擊窗口上面的這個按鈕
把它標記爲“已解決”。
通過點擊窗口下方的過濾器
我還能讓Xcode 過濾已經解決的崩潰
我可以集中精力解決尚未修復的崩潰
我們剛纔已經小試身手了
讓我們再來看看下個崩潰
這次是在啓動畫面視圖控制器內部崩潰的
即app漂亮的着陸頁那裏你可以在那裏看到
由你的朋友的圖像組成的網格
我們想編一個陣列索引
但是我們的索引可能超過了陣列界限
我想修復這個崩潰
我會點擊Open和Project按鈕
先點擊後者再點擊前者 回到代碼中
現在Xcode不僅打開了我的項目 
還神奇地把我剛剛在右邊整理器中
查看的崩潰報告傳送到了
偵錯導航器那裏我就可以點擊
Stack Frames，
並導航崩潰報告和源代碼
我們好像遇到了下一影像法
這看起來像是喬恩昨天
到我辦公室談到的他遇到的崩潰
我們正在給朋友圖像陣列
編索引並增加一個計數器
我們到達陣列邊緣時我們把計數器設回零
這裏有一個容易忽略的錯誤
這裏應該相等或者更大
我來修復它
如果你的朋友數量不是很多
你就很容易遇到這個崩潰
看來喬恩能發現這個問題不是沒有原因的
現在我回到整理器中修復更多崩潰
Xcode中的新崩潰日誌功能
和TestFlight配合的很好
能在你推送給客戶之前
幫助你發現並修復大多數關鍵問題
肯 ̆輪到你了
肯奧爾：謝謝你 板井
測試 過去幾年來 我們一直在向Xcode中
添加測試支持
讓你能測試應用中越來越多的部分
Xcode 5中我們添加了一個Test導航器
把這個和助理編輯器結合起來
我們的測試驅動開發工作流程就很完美了
我們已經介紹了XC Test單元測試框架
再加上Bots 你就可以自動在Xcode
服務器上跑單元測試實現持續集成
Xcode 6中我們引入了性能測試
讓你很快找出性能迴歸
併爲異步API添加測試
在Xcode 7中 我們還引入了用戶界面測試
UI測試使你能夠試app中用戶真正看到
觸摸的那一部分
此類測試非常重要因爲它們能夠幫助你
確保app運行時始終
和初始目的保持一致
即使你稍後做出變動改進也不影響
和我們添加到Xcode中的其它測試功能一樣
UI Tests也和code 服務器配合的很好
這對UI Test來說十分重要
因爲運行它們耗時比較久
在Xcode服務器上你還能使用
比你自己辦公桌上多的多設備
這樣你的測試覆蓋範圍更廣
頻率更高
說到覆蓋範圍爲了完善Xcode 7 
我們還添加了測試 CodeCoverage
你可以在Schemes Test action這裏
打開 CodeCoverage
當你打開後Xcode在編譯你的app時
會使用特殊工具
輕鬆跟蹤執行的各行代碼
你運行一系列測試後
你會注意到源代碼編輯器右邊這裏
有一個 New CodeCoverage 欄
你可以很快對調用的代碼
有一個直觀感受
更重要的是 你可以知道 哪行代碼未被調用
瓊會給大家演示下Xcode 7的UI測試
瓊威·福爾：謝謝 肯
使用Xcode中的UITesting 真的很容易
像這樣 你添加一個新UI Testing目標
如果你之前用過單元測試
你可以把它當做一個爲你創建的
測試用例子類別和方法
如果這是一個單元測試
你就需要徒手寫出測試方法
但現在 我們通過記錄應用
爲你寫好了測試方法
我們來看一下
我把光標放到TestMethod這裏
點擊窗口底部的
Record按鈕 開始記錄
記錄過程中我的應用收到的任何事件
都會把源代碼投射到我的Test Method中
我要配置一個新遊戲進行測試
我會點擊開始新遊戲按鈕
注意 我點擊按鈕後對應的那行代碼
就立即在源碼編輯器中顯示了出來
我要選一個類
這次測試我選擇sci-fi。
點擊下一步 我會邀請幾個玩家
愛麗絲 布蘭登 
我搜索一下史黛西
找到了
我點擊下
點擊下一步 最後點擊開關標記遊戲爲“準備就緒”
這樣我就搞定了想要記錄的內容
我們看看最後得到了什麼
第一行代碼中包含了
一條尋找標記爲開始新遊戲的按鈕的查詢
然後返回了一個元素
這個元素是應用中實際按鈕的代理
經由這個元素我現在就可以讀取按鈕屬性
併發送事件即一次屏幕觸摸
下面幾行代碼包含了選擇sci-fi類
點擊“下一步”按鈕的源代碼
UI Testing APIs設計的非常易讀
你能看到寫很容易
因此能幫你進行魯棒測試
既然是測試， 那就需要真的測試某些東西，
它也確實這麼做了
如果我原樣運行測試，它會隱性驗證
我交互的所有控件
同時 我還能繼續記錄
並且如果通不過測試就讓其失敗
除了這一隱性驗證
我還非常希望在測試中
在不同的點上
對我的應用的其它方面進行顯性驗證
在這個測試中 我選擇了一個特定類
並邀請了一組特定的玩家
我們再向測試中添加幾組聲明
確保我們得得到想要的結果
這些聲明驗證了應用中上一個屏幕中
UI有包含類名
以及玩家名稱的元素
有了這些聲明，我就可以運行測試
確保它如期工作
沒問題
測試通過了
瓊威·福爾：這是對Xcode 7中
測試的快速概覽
建議你們都試試
你會愛上它的
最重要的是你們的客戶會愛上它
又輪到你了 肯
肯奧爾：很好 謝謝你 瓊
今天上午
我們僅僅看了少數幾項特性
但願它們激起了你的興趣
本週你還會看到更多不錯的會話
讓你能夠更加深入瞭解
Xcode 7的細節內容
如果你還沒有下載新 Xcode 
我建議你去下載 並且告訴我你的意見
非常感謝