00:00:20.487 --> 00:00:21.321 
感謝您的蒞臨

00:00:22.289 --> 00:00:26.593 
歡迎進入第225章
《NS集合視圖的應用更新》

00:00:27.060 --> 00:00:30.430 
我的名字是特洛伊斯特芬
我是來自AppKit團隊的一名軟件工程師

00:00:30.731 --> 00:00:34.201 
我很高興今天可以
爲你們解答這個問題

00:00:34.635 --> 00:00:35.802 
有什麼更新呢？

00:00:36.003 --> 00:00:37.070 
讓我們來看看

00:00:38.505 --> 00:00:41.108 
NS集合視圖在10.5版本
的OS X裏

00:00:41.175 --> 00:00:42.209 
已經存在一段時間了

00:00:42.276 --> 00:00:43.877 
它提供了一個便捷的方法

00:00:43.944 --> 00:00:47.014 
來顯示格式的項目
在用戶的界面上

00:00:47.080 --> 00:00:48.115 
例如

00:00:48.282 --> 00:00:49.850 
在屏保的偏好設置面板上

00:00:50.918 --> 00:00:54.254 
我們有着不同格式的項目
來代表不同的屏保

00:00:54.321 --> 00:00:57.758 
集合視圖在這方面很擅長
它能夠顯示相似尺寸的項目

00:00:58.058 --> 00:01:00.127 
假如您給集合視圖一個原型

00:01:00.494 --> 00:01:04.063 
帶有您圖樣樹狀的子目錄

00:01:04.298 --> 00:01:06.433 
和共同負責管理它的視圖控制器

00:01:07.067 --> 00:01:09.169 
集合視圖將複製項目的...

00:01:09.670 --> 00:01:10.704 
原型

00:01:11.038 --> 00:01:14.208 
以自我繁殖來代表模型物

00:01:16.210 --> 00:01:18.679 
集合視圖支持選擇
拖動和放下該項目

00:01:18.745 --> 00:01:21.949 
動畫式重新全面佈局格式
這是一項非常便利的功能

00:01:22.783 --> 00:01:25.519 
現在進入iOS的UI集合視圖

00:01:25.652 --> 00:01:27.521 
這和NS集合視圖有莫大的關係

00:01:27.988 --> 00:01:29.089 
而且擁有多功能

00:01:29.156 --> 00:01:31.525 
我們可以在iPad的時鐘App裏

00:01:31.592 --> 00:01:33.727 
看到世界時鐘的部分

00:01:37.331 --> 00:01:39.233 
UI集合視圖 顧名思義

00:01:39.299 --> 00:01:41.568 
它用於顯示項目集

00:01:41.635 --> 00:01:43.103 
其中包括每個項目

00:01:43.370 --> 00:01:46.740 
都會有一個完全是自己設計的
樹狀子目錄爲代表

00:01:46.807 --> 00:01:49.376 
通常它運用UI集合視圖
來加載nib文件

00:01:50.611 --> 00:01:53.213 
UI集合視圖支持混合種類的項目

00:01:53.280 --> 00:01:55.749 
您可以擁有不同的nib文件
它們原型是不同的項目

00:01:55.816 --> 00:01:57.317 
所以您不是隻有一個選項

00:01:58.886 --> 00:02:00.420 
UI集合視圖支持

00:02:00.554 --> 00:02:01.788 
標頭及註腳的觀點

00:02:01.855 --> 00:02:04.691 
並把它們放在括號裏

00:02:05.158 --> 00:02:08.495 
如果您把它和將項目組
和成績格式的能力一起用

00:02:08.562 --> 00:02:10.564 
會顯得更方便好用

00:02:10.631 --> 00:02:13.267 
每個區段都可以擁有一個
標頭及註腳的觀點

00:02:15.335 --> 00:02:18.172 
佈局非常有柔性
而且可以由客戶自己定製

00:02:18.238 --> 00:02:21.241 
它會有一個處理大概90%的
內定流程佈局

00:02:21.308 --> 00:02:23.844 
來滿足您的需要
而且可以按客戶的要求來定製

00:02:23.911 --> 00:02:26.180 
您可以把它的參數

00:02:26.246 --> 00:02:27.581 
調到您滿意爲止

00:02:28.282 --> 00:02:30.284 
UI集合視圖也可以開啓於

00:02:30.350 --> 00:02:33.086 
任意自定義開發的列印格式

00:02:33.153 --> 00:02:35.155 
UI集合視圖可以運用任何

00:02:35.389 --> 00:02:36.790 
您可以實施的演算法列印格式

00:02:36.857 --> 00:02:38.892 
來應用在所顯示的項目上

00:02:40.661 --> 00:02:43.063 
最重要的是
UI集合視圖是可以被調整的

00:02:43.497 --> 00:02:44.865 
它的智能設計

00:02:44.932 --> 00:02:48.502 
讓它可以規劃大量有潛力的項目

00:02:48.569 --> 00:02:52.873 
而它的智能也能在視圖模型對象中
讓項目實例化

00:02:53.006 --> 00:02:55.876 
以及回收並重新使用
已滑出視線的項目

00:02:55.943 --> 00:02:58.679 
來呈現進入視線範圍的模型對象

00:02:58.745 --> 00:02:59.646 
這是很簡便的

00:03:01.348 --> 00:03:03.083 
像是在iOS的其他項目

00:03:03.150 --> 00:03:04.885 
UI集合視圖的設計讓
所有的屏幕

00:03:04.952 --> 00:03:06.987 
都由一個底層的
分層式系統來驅動

00:03:07.287 --> 00:03:10.991 
這也使整個高幀速率的動畫
流程很流暢

00:03:11.058 --> 00:03:14.094 
在全方面地操作集合視圖時

00:03:14.161 --> 00:03:16.463 
這可以給您一個
很優良的動畫般的效果

00:03:16.830 --> 00:03:18.732 
有了這些優良的特徵

00:03:19.132 --> 00:03:22.436 
和開發者都已經熟悉的API

00:03:23.237 --> 00:03:26.173 
還有對iOS Apps廣泛的
應用和使用

00:03:26.240 --> 00:03:29.276 
我們覺得UI集合視圖
將會形成一個

00:03:29.343 --> 00:03:30.611 
良好的基礎

00:03:30.811 --> 00:03:33.146 
於我們在El
Capitan所介紹的

00:03:33.213 --> 00:03:35.482 
全新且大大改良的
NS集合視圖中

00:03:36.149 --> 00:03:37.918 
這個全新的NS集合視圖

00:03:38.252 --> 00:03:40.153 
承受了所有的UI集合視圖

00:03:40.220 --> 00:03:41.321 
可擴縮性的形態

00:03:42.122 --> 00:03:44.925 
它將知道如何在需要的時候
啓動項目

00:03:45.125 --> 00:03:48.161 
以便只讓少數的項目進行着

00:03:48.395 --> 00:03:50.831 
以便讓它們可以
重新使用或是再循環

00:03:51.098 --> 00:03:52.332 
而不是重新啓動它們

00:03:52.399 --> 00:03:55.135 
這可以省下一些附加操作
您可以根據組別來規劃項目

00:03:55.302 --> 00:03:57.271 
您也可以爲那些組別
標上標頭及註腳觀點

00:03:57.337 --> 00:03:58.172 
由您所好

00:03:58.238 --> 00:03:59.439 
爲它們標上任何您想要的

00:04:00.274 --> 00:04:02.242 
列印格式完全是個人化的

00:04:02.309 --> 00:04:05.846 
所以NS集合視圖不再只是
硬佈線般認爲它只是網格

00:04:06.113 --> 00:04:08.482 
您可以插入任何您想要的佈局

00:04:09.850 --> 00:04:12.519 
我們可以處理不同大小的項目

00:04:12.586 --> 00:04:14.254 
項目可以以不同的種類出現

00:04:14.321 --> 00:04:16.723 
您也可以混合搭配流程式佈局

00:04:16.790 --> 00:04:19.625 
尤其是可以把它處理成恰當的

00:04:21.295 --> 00:04:23.664 
就像先前一樣
外貌格式也是個人化的

00:04:23.730 --> 00:04:25.866 
您可以定義出
您的子樹狀視圖

00:04:25.933 --> 00:04:27.334 
爲您想要的樣貌

00:04:28.068 --> 00:04:29.803 
集合視圖是您的空白畫板

00:04:29.870 --> 00:04:31.038 
它讓您可以規劃您想要的

00:04:32.105 --> 00:04:34.341 
當動畫在進行的時候

00:04:34.408 --> 00:04:37.277 
根據時間調製
您將擁有絕對的控制權

00:04:37.411 --> 00:04:38.712 
我們來看看這是怎樣做到的

00:04:39.813 --> 00:04:41.014 
當然我們不會只是把

00:04:41.081 --> 00:04:43.584 
UI集合視圖的功能
轉移到OS X

00:04:43.650 --> 00:04:46.453 
我們更想要讓全新的
NS集合視圖更適合

00:04:46.520 --> 00:04:48.055 
在家裏的平臺使用

00:04:48.322 --> 00:04:50.757 
其中一個
我們配備在平臺的科技是

00:04:50.824 --> 00:04:53.927 
NS集合視圖一直都
支持的拖拽及放下功能

00:04:54.494 --> 00:04:57.698 
但作爲把UI集合視圖
佈局API

00:04:58.031 --> 00:04:59.600 
輸送到平臺的一部分

00:04:59.867 --> 00:05:01.602 
我們在API上添加了幾個功能

00:05:01.668 --> 00:05:03.804 
我們在這場講座會結束之前
會再提到這些功能

00:05:04.104 --> 00:05:06.006 
這些功能基本上能讓任何佈局

00:05:06.139 --> 00:05:07.841 
包括您自定義的佈局

00:05:08.075 --> 00:05:08.909 
去...

00:05:09.610 --> 00:05:12.846 
執行識別候選放置目標
的命中測試

00:05:12.913 --> 00:05:14.414 
我們稍後會再談談
如何做到這一點

00:05:14.882 --> 00:05:17.818 
任何您設計的自定義佈局
都支持...

00:05:18.151 --> 00:05:19.019 
拖拽及放下的功能

00:05:19.286 --> 00:05:20.320 
就像是甲級佈局一樣

00:05:20.954 --> 00:05:22.689 
您運用Rubber Band
拖拽選擇

00:05:22.756 --> 00:05:23.991 
來拖拽各種項目

00:05:24.057 --> 00:05:25.993 
然後大批量地選擇項目羣

00:05:26.660 --> 00:05:28.529 
此選項像之前一樣
全面地支持這項功能

00:05:28.862 --> 00:05:30.731 
我們也修改了這個選項

00:05:30.797 --> 00:05:33.033 
並高亮了系統通知設備
和傳遞設備

00:05:33.100 --> 00:05:34.101 
以便處理那些

00:05:34.168 --> 00:05:35.002 
大量...

00:05:35.169 --> 00:05:38.505 
高亮項目功能的準確性

00:05:38.572 --> 00:05:39.439 
因爲有時候

00:05:39.506 --> 00:05:41.275 
會有很多想象不到的事情
在平臺上發生

00:05:41.341 --> 00:05:44.244 
您將使用全選功能
或是取消全選功能

00:05:44.344 --> 00:05:45.379 
或是大批量選擇

00:05:45.445 --> 00:05:47.481 
我們希望可以有效地把它處理好

00:05:47.714 --> 00:05:49.983 
API上有些許的調整

00:05:50.751 --> 00:05:52.085 
就像之前一樣

00:05:52.186 --> 00:05:55.489 
項目還是在平臺上
通過視圖控制器呈現

00:05:55.556 --> 00:05:57.791 
我們認爲這是很好的機會

00:05:57.858 --> 00:05:59.426 
它讓您能整齊地象限化

00:05:59.493 --> 00:06:00.594 
分割出您的代碼

00:06:00.861 --> 00:06:03.497 
好讓您的控制器代碼
和視圖代碼分開

00:06:04.097 --> 00:06:05.499 
以獲得更好的代碼整理

00:06:06.800 --> 00:06:08.802 
我們所加入的最後一個小修飾就是

00:06:08.869 --> 00:06:09.770 
讓集合視圖

00:06:09.937 --> 00:06:13.240 
可以自動尋找適合的nibs文件
來運用在項目上

00:06:13.307 --> 00:06:14.808 
如果您只是慣例式地命名

00:06:14.908 --> 00:06:17.477 
而您所選擇的nib文件名字
與您所命名的

00:06:17.544 --> 00:06:18.846 
相似於您所要求的項目種類

00:06:18.912 --> 00:06:20.013 
從集合視圖的角度看來

00:06:20.080 --> 00:06:24.218 
您根本不需要
去幫您的項目在集合視圖註冊了

00:06:24.318 --> 00:06:26.153 
這些小小的代碼
可以爲您省下不少時間

00:06:27.588 --> 00:06:29.156 
所以我們今天的目標就是

00:06:29.223 --> 00:06:30.557 
我想真正地深入這個話題

00:06:30.624 --> 00:06:33.126 
我想讓你們準備好
運用這個全新的集合視圖

00:06:33.193 --> 00:06:35.796 
我們來看看當我們開始
使用新的...

00:06:35.929 --> 00:06:37.231 
API 10.5版本時

00:06:37.297 --> 00:06:39.933 
是怎麼裝置其中一些全新的

00:06:40.267 --> 00:06:41.101 
NS集合視圖

00:06:41.301 --> 00:06:42.436 
我們會學習關於

00:06:42.669 --> 00:06:44.771 
OS X和在iOS上有什麼不同

00:06:44.938 --> 00:06:46.240 
我想 我們將會有小小的驚喜

00:06:46.306 --> 00:06:47.441 
給在座的各位

00:06:47.674 --> 00:06:49.910 
無論您是不是一個有經驗的
iOS開發者

00:06:50.143 --> 00:06:52.145 
把這個應用程式帶到OS X

00:06:52.212 --> 00:06:55.115 
您也許曾經用過UI集合視圖
您對API很熟悉

00:06:55.415 --> 00:06:57.851 
您將會傳遞一些知識
一些代碼

00:06:57.918 --> 00:06:58.785 
我們會...

00:06:58.852 --> 00:07:00.320 
給您實用的資料

00:07:01.255 --> 00:07:02.990 
也可能您是前OS X開發者

00:07:03.056 --> 00:07:04.992 
您曾經爲NS集合視圖工作

00:07:05.092 --> 00:07:08.095 
您想要學習一些新的API模式
並學習怎麼運用它

00:07:08.161 --> 00:07:09.730 
在這之前
我們將會給出足夠的介紹

00:07:09.796 --> 00:07:12.499 
讓您明白什麼是
UI集合視圖API

00:07:13.600 --> 00:07:16.069 
可是就算您從來都
沒有接觸過任何一個

00:07:16.136 --> 00:07:18.672 
我們會作充分介紹
深入實用的瞭解

00:07:18.739 --> 00:07:20.073 
還有代碼樣本

00:07:20.207 --> 00:07:21.742 
在今天的話題會提到

00:07:21.808 --> 00:07:23.377 
您將能快速地學習和認知

00:07:23.443 --> 00:07:25.712 
以便迅速瞭解
什麼是全新的集合視圖

00:07:26.513 --> 00:07:29.883 
在開始之前我們先對今天的概念
做一個快速的講解

00:07:29.950 --> 00:07:32.319 
我們需要知道關於
全新的API的基礎概念

00:07:32.386 --> 00:07:34.922 
然後我們會更深入地
瞭解API是怎麼操作的

00:07:34.988 --> 00:07:37.191 
哪個模式比較重要
怎麼啓動

00:07:37.257 --> 00:07:38.525 
之後我們會做個總結

00:07:38.859 --> 00:07:40.127 
現在說說大綱

00:07:41.295 --> 00:07:44.932 
在運用舊的
集合視圖 OS X 10.10

00:07:44.998 --> 00:07:46.733 
NS集合視圖或更早的版本時

00:07:47.234 --> 00:07:49.536 
您會設置您的
集合視圖的內容

00:07:49.670 --> 00:07:51.171 
以傳遞至陣列
或是陣列控制部件

00:07:51.238 --> 00:07:52.673 
從而讓您可以參考

00:07:52.873 --> 00:07:54.241 
怎麼設定您的項目

00:07:54.508 --> 00:07:56.009 
和讓您的項目
給予原型一個模範

00:07:56.109 --> 00:07:57.811 
這就是NS集合視圖的項目

00:07:57.878 --> 00:07:59.279 
那是視圖控制器的子類

00:07:59.346 --> 00:08:00.747 
您基本上擁有一個
視圖控制器

00:08:00.814 --> 00:08:02.850 
和一個關聯視圖的子樹

00:08:02.916 --> 00:08:05.719 
這將增加到您的集合視圖

00:08:06.386 --> 00:08:08.555 
最後
您的集合視圖也許會擁有一個委託

00:08:08.622 --> 00:08:10.190 
如果您需要拖拽及放下的功能

00:08:10.290 --> 00:08:12.159 
那就是這個委託的責任了

00:08:12.359 --> 00:08:14.161 
因此您需要裝置一個委託

00:08:15.562 --> 00:08:17.664 
在全新的API中
將會有一些變動

00:08:17.731 --> 00:08:19.733 
您不像往常般給予內容排列

00:08:20.334 --> 00:08:21.702 
您現在需要做的

00:08:22.002 --> 00:08:24.271 
是在El Capitan
安裝一個數據源

00:08:24.471 --> 00:08:27.407 
這個集合視圖數據源的規程
其實很簡單

00:08:27.474 --> 00:08:29.676 
在iOS裏只需要兩個做法

00:08:29.810 --> 00:08:31.445 
它將會是又快又簡單的

00:08:31.612 --> 00:08:33.714 
就像是您在集合視圖裏
裝置您的模型一樣

00:08:34.914 --> 00:08:36.549 
您還是需要一個委託
就像之前一樣

00:08:36.616 --> 00:08:38.818 
但是現在的委託將有機會擁有

00:08:38.885 --> 00:08:41.321 
參與選項和高亮度選擇項目的功能

00:08:41.388 --> 00:08:42.890 
我們等下會
詳細地討論這個話題

00:08:43.222 --> 00:08:44.825 
現在您需要的是給出一個

00:08:45.125 --> 00:08:46.894 
擁有的項目的nib文件

00:08:47.160 --> 00:08:49.329 
而不是隻有模範項目

00:08:49.396 --> 00:08:51.031 
和一個聯合視圖的子樹

00:08:51.265 --> 00:08:53.433 
您沒有侷限於一個項目
像我所說過的

00:08:53.500 --> 00:08:54.968 
您可以混搭任何類型的項目

00:08:55.035 --> 00:08:57.271 
您可以擁有衆多的nib文件
每種類型的項目裏

00:08:57.604 --> 00:09:00.407 
都可以選一個視圖子樹
可以跟這個完全不同

00:09:01.275 --> 00:09:03.243 
最後一項最重要的是

00:09:03.744 --> 00:09:05.479 
我們採取佈局功能

00:09:05.712 --> 00:09:06.547 
並把它分解

00:09:06.613 --> 00:09:08.749 
好讓集合視圖不會再硬佈線

00:09:08.815 --> 00:09:11.885 
我們現在擁有像在iOS上的
模組化的模型

00:09:12.219 --> 00:09:14.288 
所以您可以採取您原有的
集合視圖

00:09:14.421 --> 00:09:16.757 
分開原本鏈接住的佈局

00:09:16.957 --> 00:09:18.292 
再把不同的佈局附上

00:09:18.358 --> 00:09:19.626 
然而您的項目

00:09:19.760 --> 00:09:23.764 
將以不同佈局和大小擺列算法

00:09:23.964 --> 00:09:26.466 
而這些佈局是
可以被完全切換的

00:09:26.533 --> 00:09:28.669 
您還可以在佈局中

00:09:28.902 --> 00:09:31.972 
以動畫變遷的方式更換佈局
十分簡單

00:09:32.239 --> 00:09:33.440 
就像我們的代碼樣本一樣

00:09:34.975 --> 00:09:36.510 
在自定式的佈局裏

00:09:36.577 --> 00:09:39.346 
您的佈局可以被委託於您的集合視圖

00:09:39.413 --> 00:09:41.248 
您可以實施
幾個可以被調整的選項

00:09:41.381 --> 00:09:43.784 
讓您進行一對一的調整

00:09:43.851 --> 00:09:45.686 
如果您需要自定義
改變您的佈局的話

00:09:45.752 --> 00:09:47.387 
您也沒有必要擁有子類型

00:09:48.021 --> 00:09:49.723 
讓我們快速地
看看佈局的類別

00:09:49.790 --> 00:09:52.259 
在 iOS裏 它們很相似
但並非一模一樣

00:09:52.559 --> 00:09:54.561 
在iOS裏的
NS集合視圖佈局

00:09:54.628 --> 00:09:56.430 
它是一個可以定義所有

00:09:56.496 --> 00:09:59.399 
API平面佈局普遍形式的
基本類別

00:10:00.434 --> 00:10:01.869 
NS集合視圖網格佈局

00:10:01.935 --> 00:10:03.704 
對OS X來說不但新穎且獨特

00:10:03.837 --> 00:10:06.573 
而且它的功能其實是
囊括了NS集合視圖裏

00:10:06.640 --> 00:10:09.776 
本來的資料
就像是那種被調整的網格算法

00:10:09.943 --> 00:10:12.846 
萬一您需要用到全新的API

00:10:13.380 --> 00:10:15.182 
它將被給予被調整的網格

00:10:15.249 --> 00:10:17.784 
不但可以讓所有的項目大小一致

00:10:18.018 --> 00:10:20.888 
但是因爲它們
是有大小限制的

00:10:20.954 --> 00:10:23.891 
而且它們會將面積儘量填滿

00:10:24.458 --> 00:10:25.592 
有時候很有用處

00:10:25.659 --> 00:10:27.661 
但終究還是個傳統的佈局

00:10:27.728 --> 00:10:30.430 
它還沒有開始支持分區
或標頭及註腳視圖的功能

00:10:30.764 --> 00:10:33.200 
然而和流式佈局相比
還是比較有彈性

00:10:33.967 --> 00:10:35.736 
我們會建議您先運用流式佈局

00:10:35.802 --> 00:10:38.372 
在 iOS上
NS集合視圖流式佈局其實和

00:10:38.438 --> 00:10:40.908 
UI集合視圖流式佈局...
比較相似

00:10:40.974 --> 00:10:42.976 
它是一個強大的佈局算法

00:10:44.044 --> 00:10:45.679 
而這個算法更能讓

00:10:45.846 --> 00:10:49.583 
正文檔案或CSS框達到流暢

00:10:49.650 --> 00:10:51.518 
您可能有面對過這些問題

00:10:51.585 --> 00:10:53.921 
總體來說
您可以有不同大小的項目

00:10:54.121 --> 00:10:56.523 
而佈局算法可以把它處理好

00:10:56.690 --> 00:10:59.059 
根據您所給的校準

00:10:59.126 --> 00:11:01.395 
它會把它們以橫豎分配排列好

00:11:02.129 --> 00:11:03.630 
當它被橫豎地分配好後

00:11:03.697 --> 00:11:05.732 
它將會被更新
然後繼續下一個任務

00:11:06.333 --> 00:11:07.434 
流式佈局支持

00:11:07.634 --> 00:11:09.770 
有附加標題的分區
和註腳視圖的功能

00:11:10.003 --> 00:11:11.338 
概括來說它是很有用的

00:11:11.405 --> 00:11:13.740 
而且是可自定義的
如果您需要子類處理的話

00:11:15.042 --> 00:11:16.543 
通常您會在流式佈局開始

00:11:16.610 --> 00:11:18.378 
接着通過子類處理
去得到您想要的

00:11:18.445 --> 00:11:19.279 
然而

00:11:19.346 --> 00:11:22.115 
您始終可以自地在
NS集合視圖佈局裏做子類

00:11:22.649 --> 00:11:24.284 
去得到一個完全自定義的設計

00:11:24.351 --> 00:11:26.587 
我們今天的代碼例子
將會做出演示

00:11:28.388 --> 00:11:32.092 
佈局屬性對象
如果您是第一次看到它們

00:11:32.159 --> 00:11:34.127 
不是直接就能領會的

00:11:34.194 --> 00:11:36.964 
這是一個概念
和iOS一樣的概念

00:11:37.197 --> 00:11:39.466 
一旦您明白了它是什麼
一切就都非常簡單了

00:11:40.267 --> 00:11:41.602 
想象您可以用

00:11:41.869 --> 00:11:42.936 
視圖結構

00:11:43.237 --> 00:11:44.805 
還有其它各種各樣的屬性

00:11:44.872 --> 00:11:47.207 
然後它們從視圖中封裝開來

00:11:47.274 --> 00:11:49.776 
這就是佈局屬性的用處

00:11:49.843 --> 00:11:51.979 
這是一個直接的...
結構例子

00:11:52.045 --> 00:11:53.447 
這個很直白 對嗎？

00:11:53.514 --> 00:11:56.483 
您需要知道一個項目的位置和大小

00:11:56.750 --> 00:11:59.453 
但是它還帶有其它附屬的性質
例如Alpha值

00:11:59.520 --> 00:12:00.621 
透明度

00:12:00.821 --> 00:12:03.190 
即Zindex
用於從後到前排列

00:12:03.991 --> 00:12:05.459 
不管視圖是否被隱藏

00:12:05.526 --> 00:12:07.461 
它可以稱爲佈局狀態

00:12:07.528 --> 00:12:09.429 
當您在使用狀態
並且給它拍快照時

00:12:09.630 --> 00:12:10.664 
這會讓...

00:12:10.898 --> 00:12:13.667 
新的API導出那些還沒有

00:12:13.901 --> 00:12:15.702 
實例化的項目

00:12:15.769 --> 00:12:18.438 
記住
我們只是依賴程序去實例化

00:12:19.039 --> 00:12:21.608 
最終我們創造並分享了

00:12:21.675 --> 00:12:23.076 
這些佈局屬性的實例

00:12:23.277 --> 00:12:26.380 
佈局API就負責把它們傳播開來

00:12:26.547 --> 00:12:29.016 
最後他們會被應用到項目中

00:12:29.082 --> 00:12:30.250 
或者在佈局時間的視圖中

00:12:30.384 --> 00:12:31.318 
應用是爲了

00:12:31.451 --> 00:12:33.287 
獲得一個動畫對象

00:12:33.353 --> 00:12:35.055 
然後過渡去一個新的境界

00:12:35.422 --> 00:12:36.490 
這就是它們的用途了

00:12:38.792 --> 00:12:41.028 
是非常簡單地去歸類項目

00:12:41.094 --> 00:12:43.130 
您現在可以試着去歸類

00:12:43.330 --> 00:12:45.098 
每個組可以有...

00:12:45.465 --> 00:12:46.300 
標題

00:12:46.567 --> 00:12:47.401 
在上面

00:12:47.467 --> 00:12:48.335 
和一個頁腳在下面

00:12:48.435 --> 00:12:49.736 
您也可以把它們放在旁邊

00:12:49.803 --> 00:12:51.438 
如果您從這個方向去做

00:12:52.239 --> 00:12:54.575 
標題
頁腳和項目一起

00:12:54.641 --> 00:12:56.109 
組合成一個部分

00:12:56.176 --> 00:12:58.078 
第一個部分是
部分0

00:12:58.378 --> 00:13:01.815 
這個部分裏面的項目
被標記爲0, 1, 2...

00:13:02.516 --> 00:13:04.384 
這和iOS是一樣的

00:13:04.551 --> 00:13:06.520 
下一個部分有標題和頁腳

00:13:06.920 --> 00:13:09.122 
和項目放在一起
這是部分1

00:13:09.189 --> 00:13:11.458 
在裏面的項目也是被標記爲

00:13:11.592 --> 00:13:13.794 
從0開始1, 2... 數字

00:13:14.528 --> 00:13:17.664 
很明顯
我們需要幫項目改名

00:13:17.731 --> 00:13:19.933 
先開始修改項目
就像在iOS裏一樣

00:13:20.000 --> 00:13:21.835 
我們不止是需要知道項目索引

00:13:22.169 --> 00:13:23.370 
還要知道部門索引

00:13:23.737 --> 00:13:26.106 
這將影響現存的API

00:13:26.173 --> 00:13:28.842 
您會看到很多API
因此發生改變

00:13:29.343 --> 00:13:31.245 
以Item AtIndex方法爲例

00:13:31.311 --> 00:13:33.514 
它原來僅需要單個整數索引

00:13:33.580 --> 00:13:34.848 
但現在這麼做還不夠

00:13:35.182 --> 00:13:36.250 
我們還需要部分

00:13:36.316 --> 00:13:37.751 
我們還需要知道部分索引號

00:13:38.185 --> 00:13:41.321 
所以現在這樣的API
隨我們喜好被修改

00:13:41.388 --> 00:13:42.723 
以便適應新的參數

00:13:43.156 --> 00:13:44.324 
NS索引路徑

00:13:44.491 --> 00:13:45.959 
只是一個現存的值形

00:13:46.026 --> 00:13:48.095 
它讓我們可以非常方便地

00:13:48.228 --> 00:13:49.363 
封裝一個部分索引號

00:13:49.429 --> 00:13:52.299 
以及一個項目索引號
它們被一起封裝在一個值對象內

00:13:52.499 --> 00:13:54.935 
我們可以把它傳遞給
一個集合或其它

00:13:55.169 --> 00:13:57.704 
很多您將遇到的API變化

00:13:57.771 --> 00:13:59.373 
都屬於這種情況

00:13:59.439 --> 00:14:01.108 
僅僅是爲了適應多個索引的變化

00:14:01.408 --> 00:14:03.177 
您仍可使用原來的API

00:14:03.410 --> 00:14:05.512 
如果您的集合視圖
只有一個部分

00:14:05.579 --> 00:14:06.480 
這是默認的情況

00:14:06.813 --> 00:14:08.549 
但如果您應用多個部分

00:14:08.815 --> 00:14:10.484 
我們建議您使用新的API

00:14:12.686 --> 00:14:14.488 
顯然我們要開始進入細節內容了

00:14:14.555 --> 00:14:16.089 
我們將深入細節

00:14:16.423 --> 00:14:18.559 
並深入研讀我們的示例代碼

00:14:18.625 --> 00:14:20.827 
今天的示例是
Cocoa幻燈片集合

00:14:20.894 --> 00:14:22.496 
它基本上是一個圖像瀏覽器

00:14:22.663 --> 00:14:23.897 
它用一個集合視圖

00:14:24.097 --> 00:14:26.533 
來展現一個圖像文件的文件夾

00:14:26.800 --> 00:14:27.634 
以便您瀏覽

00:14:29.069 --> 00:14:30.537 
對於文件夾裏的每個圖像

00:14:30.604 --> 00:14:31.905 
我們將展示它的縮略圖

00:14:31.972 --> 00:14:34.208 
和圖像的各種信息

00:14:36.510 --> 00:14:39.079 
在佈局上我們應用流水佈局

00:14:39.146 --> 00:14:40.714 
這是系統自帶的佈局

00:14:40.781 --> 00:14:43.083 
並且我們將使用個性化的佈局
來展示如何應用它

00:14:45.185 --> 00:14:46.220 
我們認爲

00:14:46.286 --> 00:14:49.022 
我們的每個圖像
都有一個關聯的標籤

00:14:49.089 --> 00:14:50.224 
我們將以此爲由

00:14:50.290 --> 00:14:53.227 
來展示如何實現
具有頁眉和頁腳的部分

00:14:53.293 --> 00:14:55.495 
我們能夠根據
每個項目的標籤來分組

00:14:57.731 --> 00:14:59.199 
我們還支持選擇

00:14:59.366 --> 00:15:01.368 
拖動和放下項目

00:15:01.635 --> 00:15:03.837 
我們將應用今天討論的API
來實現這些功能

00:15:04.605 --> 00:15:07.741 
爲了把內容分成多個組成部分
我們要把內容分爲六個部分

00:15:08.141 --> 00:15:09.543 
以便一步一步演示

00:15:09.610 --> 00:15:12.646 
首先我們當然要把項目顯示出來
這總是好的

00:15:12.713 --> 00:15:13.714 
這是一個很大的障礙

00:15:13.780 --> 00:15:15.015 
只要您能顯示出東西

00:15:15.082 --> 00:15:17.184 
您就可以實現更高級的功能
我們將快速實現

00:15:17.818 --> 00:15:20.187 
然後我們看看如何把項目分組
放到各個部分裏

00:15:20.921 --> 00:15:22.923 
然後我們想看看如何處理它

00:15:22.990 --> 00:15:25.559 
當模型發生變化時
圖像也會相應增加或減少

00:15:25.626 --> 00:15:27.027 
我們應如何更新
集合視圖呢

00:15:27.094 --> 00:15:28.462 
我們看看如何正確實施

00:15:28.862 --> 00:15:31.798 
我們先看看如何處理部分
並重點看看

00:15:32.099 --> 00:15:33.233 
如何處理拖放的程序代碼

00:15:33.300 --> 00:15:35.035 
最後非常有趣的是

00:15:35.102 --> 00:15:37.337 
我們將看看
如何實現個性化的佈局

00:15:37.971 --> 00:15:39.473 
首先 爲了顯示項目

00:15:39.706 --> 00:15:41.074 
先要回到我們的這個模型

00:15:41.141 --> 00:15:42.409 
這又是一個新的API

00:15:42.910 --> 00:15:44.478 
我們還需要提供一個數據源

00:15:44.611 --> 00:15:46.547 
它將實現那兩個必須實現的功能

00:15:47.347 --> 00:15:49.149 
我們需要提供一個項目尖

00:15:49.449 --> 00:15:51.919 
這足夠簡單
然後是一個集合視圖佈局

00:15:53.120 --> 00:15:54.454 
這兩個必需的方法

00:15:54.521 --> 00:15:57.357 
將賦予集合視圖瞭解此部分...

00:15:57.758 --> 00:16:00.594 
有多少個項目的能力
默認條件下我們只有一個部分

00:16:00.661 --> 00:16:02.396 
我們將只傳遞一個0
作爲部分的索引值

00:16:02.462 --> 00:16:03.697 
它將返回項目的數量

00:16:04.231 --> 00:16:06.300 
第二個方法的任務是

00:16:06.366 --> 00:16:07.334 
把項目

00:16:07.835 --> 00:16:09.036 
初始化

00:16:09.102 --> 00:16:10.337 
或者它將...

00:16:10.537 --> 00:16:12.472 
直接利用回收的項目

00:16:12.739 --> 00:16:14.341 
通過集合視圖幕後的支持

00:16:14.408 --> 00:16:15.809 
並把它們返回到集合視圖

00:16:17.644 --> 00:16:19.279 
在Cocoa幻燈片集合當中

00:16:19.413 --> 00:16:22.082 
我們需要理解的
基本對象是圖像文件

00:16:22.783 --> 00:16:25.686 
一個圖像文件對象本質上
是關聯一個圖像文件的URL

00:16:25.819 --> 00:16:28.522 
這個圖像文件存在於
我們掃描的硬盤裏的文件夾中

00:16:28.589 --> 00:16:31.258 
它包含的信息有文件名
顯示於幻燈片的頂端

00:16:32.125 --> 00:16:32.960 
文件的類型

00:16:33.026 --> 00:16:35.796 
我們將以用戶
可閱讀的描述方式

00:16:36.096 --> 00:16:38.131 
來顯示原始圖像的尺寸

00:16:39.066 --> 00:16:40.701 
然後當然是縮略圖

00:16:42.336 --> 00:16:43.537 
您將在代碼中

00:16:43.904 --> 00:16:45.005 
看到它們

00:16:45.305 --> 00:16:48.075 
一個圖像集合
擁有一個圖像文件數組

00:16:48.141 --> 00:16:51.311 
一個圖像集合
還擁有一個標籤數組

00:16:51.378 --> 00:16:53.413 
每個標籤數組擁有一組圖像

00:16:53.480 --> 00:16:54.581 
這些圖像有同一個標籤

00:16:54.882 --> 00:16:57.117 
還有一個無標籤的
圖像文件數組同時存在

00:16:58.118 --> 00:17:00.120 
我們先來看看如何顯示項目

00:17:00.187 --> 00:17:01.655 
我們到這臺演示機器這兒來看看

00:17:02.623 --> 00:17:03.790 
讓我們先運行它

00:17:05.392 --> 00:17:07.027 
讓我們先打開
一個Xcode項目

00:17:10.696 --> 00:17:12.766 
正如您所知道的
東西已經基本齊全了

00:17:12.833 --> 00:17:14.501 
但我們窗口還沒有集合視圖

00:17:14.568 --> 00:17:15.569 
這是一個問題

00:17:15.636 --> 00:17:17.771 
我們看看...
如何獲得一個集合視圖

00:17:19.806 --> 00:17:21.241 
進入這個...

00:17:21.909 --> 00:17:22.976 
資源類型

00:17:23.042 --> 00:17:26.012 
我們有一個瀏覽器窗口nib
它關聯着主窗口

00:17:27.079 --> 00:17:28.147 
讓我們看看這個

00:17:29.449 --> 00:17:30.918 
我們進入這個庫

00:17:33.687 --> 00:17:35.355 
然後查找集合視圖

00:17:37.157 --> 00:17:38.091 
我們把它拖出來

00:17:42.529 --> 00:17:44.331 
我們調整它的尺寸
使填滿我們的窗口

00:17:45.832 --> 00:17:46.967 
對它運用約束

00:17:47.167 --> 00:17:49.403 
這將成爲窗口內的主體文件視圖

00:17:53.473 --> 00:17:54.308 
好

00:17:55.075 --> 00:17:57.110 
當我們拖出一個集合視圖的時候

00:17:57.177 --> 00:17:58.612 
我們實際得到了什麼呢

00:17:58.679 --> 00:18:00.547 
這很像是一個表視圖

00:18:00.747 --> 00:18:02.449 
或一個輪廓視圖

00:18:02.816 --> 00:18:04.351 
您實際上得到了一個
集合視圖

00:18:04.418 --> 00:18:06.453 
它內嵌在一個滾動視圖裏
不像在iOS裏

00:18:06.653 --> 00:18:08.388 
滾動視圖是一個分離的東西

00:18:08.622 --> 00:18:11.024 
它是一個可滾動的
文件視圖的組成部分

00:18:11.091 --> 00:18:12.526 
您不能繼承滾動行爲

00:18:12.593 --> 00:18:13.794 
它通過組合來實現

00:18:14.895 --> 00:18:16.997 
我們有一個滾動視圖 我說過

00:18:17.297 --> 00:18:19.433 
新的集合視圖是用於
底層運行的

00:18:19.499 --> 00:18:21.502 
我們將進入我們的檢視器

00:18:22.069 --> 00:18:25.138 
然後我們在滾動視圖上
設置一曾的屬性

00:18:25.205 --> 00:18:26.473 
來確定圖層置底

00:18:27.040 --> 00:18:29.576 
現在我們深入看看集合視圖本身

00:18:29.643 --> 00:18:31.378 
它是滾動視圖的文件視圖

00:18:32.312 --> 00:18:34.948 
在Xcode 7裏有一個
新的屬性檢視面板

00:18:35.015 --> 00:18:36.617 
它支持一些新的功能

00:18:36.683 --> 00:18:39.386 
我們選擇一個我們希望
使用的佈局 例如流動

00:18:39.453 --> 00:18:40.921 
同時我們甚至可以
設置它的屬性

00:18:41.121 --> 00:18:42.189 
在這個示例程序中

00:18:42.256 --> 00:18:44.391 
我們實際上將有規劃地
在不同的佈局之間切換

00:18:44.458 --> 00:18:46.560 
因此我們不需要用
我們從nib中反歸檔的那個

00:18:46.960 --> 00:18:48.262 
但我們仍可以設置它

00:18:48.495 --> 00:18:49.496 
您可以...

00:18:49.930 --> 00:18:52.199 
做一些簡單而有趣的東西
例如設置背景顏色

00:18:52.399 --> 00:18:54.101 
一旦我找到了顏色面板

00:18:59.540 --> 00:19:00.440 
更有趣的事情是

00:19:00.507 --> 00:19:02.142 
您將關聯那個數據源
是嗎

00:19:02.943 --> 00:19:05.913 
在此項目中我們的文件擁有者
是一個對象實例

00:19:06.780 --> 00:19:10.617 
它是API瀏覽器
窗口控制器的實例

00:19:10.684 --> 00:19:12.386 
我們通過一個窗口控制器
來管理窗口

00:19:12.452 --> 00:19:13.787 
它也將成爲我們的數據源

00:19:13.854 --> 00:19:15.489 
和集合視圖的委託

00:19:15.822 --> 00:19:17.124 
我們從集合視圖

00:19:17.824 --> 00:19:19.960 
關聯到文件的擁有者

00:19:20.027 --> 00:19:21.695 
它將成爲集合視圖的數據源

00:19:22.095 --> 00:19:24.598 
它也是它的委託
這樣我們就可以實現拖放

00:19:25.065 --> 00:19:27.734 
我們把文件擁有者關聯回
集合視圖

00:19:28.001 --> 00:19:30.037 
我們已定義了一個
圖像集合視圖的出口

00:19:30.103 --> 00:19:32.172 
以便更容易找到
集合視圖

00:19:33.473 --> 00:19:36.510 
這就是我們基本上
要對尖端做的事情

00:19:37.077 --> 00:19:39.313 
我們還創建了一個滑動尖端

00:19:40.881 --> 00:19:42.916 
它擁有一個容器視圖

00:19:42.983 --> 00:19:44.885 
這個容器被一個滑塊引用

00:19:45.219 --> 00:19:47.387 
我們的滑塊類是集合的一個子類

00:19:47.454 --> 00:19:49.122 
NS集合視圖項目類

00:19:49.189 --> 00:19:50.757 
通過這個子類我們可以添加功能

00:19:51.091 --> 00:19:53.727 
爲我們自己的個性化
控制器增加功能

00:19:54.228 --> 00:19:55.729 
根視圖只是一個容器

00:19:55.796 --> 00:19:59.099 
這個容器的尺寸
由集合視圖的佈局規則決定

00:19:59.466 --> 00:20:00.701 
然後 我們有控制器

00:20:00.767 --> 00:20:02.336 
文字字段...

00:20:04.371 --> 00:20:06.440 
有自動佈局約束來設置它們

00:20:06.507 --> 00:20:07.641 
這與它們的容器相關

00:20:07.708 --> 00:20:09.610 
此佈局將設置項目的框架

00:20:09.676 --> 00:20:11.111 
及此項目的根視圖

00:20:11.245 --> 00:20:13.814 
餘下的將由內置的
自動佈局來完成

00:20:14.882 --> 00:20:16.450 
我還使用了綁定

00:20:16.517 --> 00:20:17.351 
來...

00:20:17.851 --> 00:20:18.685 
連接...

00:20:19.019 --> 00:20:20.187 
一些數值

00:20:20.254 --> 00:20:22.055 
它們由這些文字域顯示

00:20:22.322 --> 00:20:23.757 
他們通過滑塊對象...

00:20:24.124 --> 00:20:25.125 
來顯示

00:20:25.192 --> 00:20:27.828 
請記住一個滑塊是
一個集合視圖項目

00:20:28.028 --> 00:20:29.229 
因此它也是一個
視圖控制器

00:20:29.296 --> 00:20:30.831 
視圖控制器有一個
可顯示的對象

00:20:30.898 --> 00:20:32.900 
這裏是我們連接項目的地方

00:20:33.100 --> 00:20:34.735 
連接它所顯示的模型對象

00:20:34.801 --> 00:20:36.336 
對圖像文件實例而言

00:20:36.637 --> 00:20:38.639 
我們可以讀到這個實例的屬性

00:20:38.906 --> 00:20:41.074 
我們只需要把我們的項目

00:20:41.141 --> 00:20:42.743 
關聯到顯示的對象

00:20:42.943 --> 00:20:44.611 
即它的圖像文件隨即所有的

00:20:44.678 --> 00:20:46.313 
這些控制器將自動顯示

00:20:46.380 --> 00:20:47.981 
包括圖像視圖

00:20:48.682 --> 00:20:51.451 
因爲我們將爲新的API

00:20:51.618 --> 00:20:53.954 
使用一個獨立的nib文件

00:20:54.188 --> 00:20:56.023 
爲了使用集合視圖
我們要刪除一些東西

00:20:56.089 --> 00:20:58.525 
這些東西是Xcode
默認放進來的

00:20:58.825 --> 00:21:01.628 
我們的圖像集合視圖
仍然有一個項目樣品

00:21:02.529 --> 00:21:03.497 
我們需要清除它

00:21:03.564 --> 00:21:04.631 
讓我們分離它

00:21:05.632 --> 00:21:07.234 
否則這將幹擾
我們正在做的事情

00:21:07.467 --> 00:21:08.802 
我們要刪除項目樣品

00:21:08.869 --> 00:21:10.671 
我們還要刪除與之關聯的視圖

00:21:10.737 --> 00:21:11.605 
我們不需要這些

00:21:12.005 --> 00:21:14.107 
我們可以編譯了
差不多好了

00:21:14.641 --> 00:21:16.577 
如果我們看看這個警告
我們發現一個提示

00:21:16.643 --> 00:21:19.513 
我們沒有應用必需的
數據源方法

00:21:19.580 --> 00:21:21.648 
只有兩個
我們很快地完成

00:21:22.649 --> 00:21:24.318 
我們進入瀏覽器窗口控制器

00:21:26.787 --> 00:21:28.856 
看這裏就是數據源方法
所在的地方

00:21:28.922 --> 00:21:30.958 
幸虧我提前標註了

00:21:33.727 --> 00:21:34.895 
我們把它拖進來

00:21:40.000 --> 00:21:41.935 
對於非部分的集合視圖
這非常簡單

00:21:42.002 --> 00:21:43.303 
我們實施集合視圖

00:21:43.370 --> 00:21:44.738 
定義這個部分裏的項目數量

00:21:44.805 --> 00:21:46.907 
集合視圖
默認只有一個部分

00:21:47.074 --> 00:21:48.942 
我們返回圖像文件的數量

00:21:49.142 --> 00:21:50.344 
它們在我們的圖像集合內

00:21:50.878 --> 00:21:52.179 
我們還需要做的事情是

00:21:52.246 --> 00:21:53.447 
按需求定義這些東西

00:21:53.514 --> 00:21:55.749 
集合視圖將傳遞
集合視圖項目

00:21:55.816 --> 00:21:57.551 
對於代表對象和索引路徑

00:21:58.218 --> 00:21:59.520 
一個需要澄清的重要事情是

00:21:59.586 --> 00:22:00.821 
當我們使用集合視圖時

00:22:00.888 --> 00:22:02.422 
也試圖根據標示符號
來構造項目

00:22:02.489 --> 00:22:04.625 
這令人費解
實際上我們只是想

00:22:04.691 --> 00:22:06.927 
構造或循環使用現存的索引路徑

00:22:07.828 --> 00:22:10.731 
我們只是把得到的
索引路徑傳入

00:22:10.797 --> 00:22:11.999 
但它標識了這個項目

00:22:12.866 --> 00:22:15.569 
正如我所說的
我們想關聯代表對象的項目

00:22:15.636 --> 00:22:17.504 
以便找到相應的屬性

00:22:17.571 --> 00:22:19.106 
針對這個項目實例

00:22:19.506 --> 00:22:21.375 
我們這裏有...
一個小方法

00:22:21.441 --> 00:22:23.277 
可以分解出索引目錄
和圖像文件

00:22:23.343 --> 00:22:24.444 
使我們得以非常容易地

00:22:24.511 --> 00:22:25.646 
深入我們的數據模型

00:22:25.712 --> 00:22:27.314 
並找出相應的...

00:22:27.548 --> 00:22:28.882 
那個圖像文件實例

00:22:29.316 --> 00:22:31.351 
這就是我們需要做的
只需要返回該項目

00:22:31.451 --> 00:22:32.352 
到集合視圖

00:22:33.086 --> 00:22:35.489 
如果我們足夠勇敢
我們可以試試編譯並運行

00:22:35.556 --> 00:22:36.823 
看看它是否可以運行了

00:22:37.257 --> 00:22:39.193 
然後 我們將看到
就是這個

00:22:39.259 --> 00:22:40.928 
默認條件下我們有一個窗口

00:22:40.994 --> 00:22:43.830 
指向並掃描庫
桌面 圖片裏的文件

00:22:44.765 --> 00:22:46.033 
它查找圖像文件

00:22:46.099 --> 00:22:47.868 
並把通過集合視圖項目
來呈現它們

00:22:47.935 --> 00:22:50.537 
當我們滾動時
那些移出視圖範圍以外的項目

00:22:50.604 --> 00:22:52.506 
實際上將按需要被初始化

00:22:52.573 --> 00:22:56.243 
甚至從那些從頂端移開的
項目處回收重用

00:22:57.010 --> 00:22:59.546 
您可以改變大小
使佈局重構

00:23:00.480 --> 00:23:02.416 
然後我們可以免費獲得很多東西

00:23:02.482 --> 00:23:04.518 
在此
我把它稱爲包圍佈局

00:23:04.618 --> 00:23:07.120 
這是流式佈局的
一個簡單的子類

00:23:07.521 --> 00:23:09.990 
我們還有一些
已經實現了的個性化佈局

00:23:11.258 --> 00:23:12.960 
我們可以設置佈局...
這些已經實現

00:23:13.026 --> 00:23:14.928 
通過導入一個不同的佈局對象

00:23:15.195 --> 00:23:16.496 
到集合視圖

00:23:17.764 --> 00:23:19.800 
我們可以通過標籤來分類

00:23:20.567 --> 00:23:21.702 
但這還沒有真正做什麼

00:23:21.768 --> 00:23:23.704 
讓我們回到幻燈片

00:23:23.770 --> 00:23:26.406 
看看需要做些什麼來實現它

00:23:30.210 --> 00:23:31.044 
謝謝

00:23:33.814 --> 00:23:35.916 
開場的最佳辦法是
運行第一個示例

00:23:37.017 --> 00:23:39.586 
現在我們希望按照標籤
給圖像文件分類

00:23:39.653 --> 00:23:41.922 
而不僅僅滿足於在
一個部分中顯示它們

00:23:41.989 --> 00:23:43.790 
我們希望看到
哪個圖與哪個標籤有關係

00:23:45.092 --> 00:23:46.627 
我們將要做的是每個標籤

00:23:46.827 --> 00:23:48.729 
都有一組圖像文件

00:23:49.129 --> 00:23:51.265 
它們按照某種規則排序

00:23:51.698 --> 00:23:53.233 
我們希望按照這個順序
顯示它們

00:23:53.600 --> 00:23:55.502 
一個圖像文件可以有多個標籤
這意味着

00:23:55.569 --> 00:23:57.504 
我們將在多個部分
顯示一個圖像文件

00:23:57.571 --> 00:23:58.405 
這完全沒有問題

00:23:58.972 --> 00:24:02.042 
也可能有些圖像文件
不會在任何部分顯示

00:24:02.409 --> 00:24:04.444 
因此我們會創建
一個無標籤的圖像部分

00:24:04.511 --> 00:24:05.979 
作爲最後一個額外的部分

00:24:06.046 --> 00:24:07.948 
在此我們顯示
所有沒有標籤的圖像文件

00:24:08.916 --> 00:24:11.385 
我們爲每個部分添加了
頁頭和頁腳視圖

00:24:11.451 --> 00:24:13.187 
因爲我們想演示我們可以這麼做

00:24:13.720 --> 00:24:14.922 
爲您演示如何做到這一步

00:24:15.155 --> 00:24:17.191 
與項目類型相似

00:24:17.558 --> 00:24:19.560 
實例化頁頭視圖和頁腳視圖

00:24:19.626 --> 00:24:21.028 
您會發現這非常容易

00:24:22.829 --> 00:24:27.000 
一般而言 一個頁頭或頁腳
實際是由一個集合視圖

00:24:27.067 --> 00:24:30.537 
調用一個補充視圖
它不代表一個項目

00:24:30.604 --> 00:24:32.072 
但它是一種擴增

00:24:32.139 --> 00:24:33.841 
或一種把項目括入括號的方式

00:24:33.907 --> 00:24:35.375 
例如 標題和頁腳

00:24:36.610 --> 00:24:39.580 
我們要把數據源
設爲可選集合視圖

00:24:39.646 --> 00:24:41.748 
補充元素的視圖種類

00:24:41.815 --> 00:24:43.317 
這是一種與衆不同的方式

00:24:43.383 --> 00:24:44.418 
通過索引路徑來...

00:24:44.718 --> 00:24:45.919 
調用頁頭和頁腳

00:24:47.621 --> 00:24:49.256 
我們將回到演示機器那裏

00:24:52.759 --> 00:24:54.494 
我們將把它們
很快地關聯起來

00:24:56.296 --> 00:24:59.166 
我們調用現成的數據源方法

00:25:00.801 --> 00:25:03.003 
並用更成熟的方法
來代替它們

00:25:03.070 --> 00:25:04.705 
這些方法更適用於
處理部分

00:25:06.940 --> 00:25:08.041 
它們就在這兒

00:25:08.108 --> 00:25:09.476 
我們將簡要地解釋一遍

00:25:10.010 --> 00:25:11.845 
現在我們需要告訴集合視圖

00:25:11.912 --> 00:25:13.514 
有多少部分在它裏面

00:25:14.381 --> 00:25:16.483 
如果標籤分組選項

00:25:16.550 --> 00:25:18.218 
被選中這個屬性
將被設爲開啓

00:25:18.352 --> 00:25:21.054 
我們返回標籤的數量

00:25:21.121 --> 00:25:22.122 
在圖像集合裏

00:25:22.389 --> 00:25:23.590 
這裏加1
因爲我們想要一個

00:25:23.657 --> 00:25:25.926 
額外的無標籤圖像文件集合部分

00:25:26.226 --> 00:25:27.995 
對不起
排在最後

00:25:29.096 --> 00:25:29.930 
非常簡單

00:25:30.931 --> 00:25:33.667 
報告一個部分裏面有多少個項目

00:25:33.800 --> 00:25:36.203 
以下兩種情況有些不同
如果我們以標籤分組

00:25:36.503 --> 00:25:37.738 
基本上我們想說

00:25:38.038 --> 00:25:40.574 
如果某個部分
與集合內的某個標籤有關係

00:25:40.641 --> 00:25:41.842 
我們將返回這個數值

00:25:41.909 --> 00:25:43.143 
即屬於這個標籤...

00:25:43.744 --> 00:25:44.745 
的圖像文件的數量

00:25:44.811 --> 00:25:45.879 
它與該部分相關

00:25:46.580 --> 00:25:48.982 
如果我們在無標籤圖像文件部分

00:25:49.049 --> 00:25:51.919 
最後我們會返回
無標籤圖和其它圖的數量

00:25:51.985 --> 00:25:53.220 
這非常直白

00:25:58.759 --> 00:25:59.626 
讓我們看看它們

00:25:59.693 --> 00:26:01.128 
對於對象索引路徑

00:26:01.195 --> 00:26:03.830 
這是同樣的應用與以前一樣
它之所以好用

00:26:03.897 --> 00:26:05.365 
是因爲我提取了

00:26:05.532 --> 00:26:07.935 
圖像文件索引路徑... 方法

00:26:08.101 --> 00:26:09.069 
這只是我個人使用的

00:26:10.103 --> 00:26:11.839 
實際上這並不適用

00:26:11.905 --> 00:26:13.574 
原因是它只看項目索引

00:26:13.941 --> 00:26:15.876 
而不是部分索引

00:26:15.943 --> 00:26:17.978 
讓我們替換一個更聰明的版本

00:26:19.413 --> 00:26:21.315 
它知道我們有時需要
通過標籤來分類

00:26:27.888 --> 00:26:29.556 
如果我們以標籤分組

00:26:29.623 --> 00:26:32.593 
假設此部分與我們的
其中一個標籤相同

00:26:32.893 --> 00:26:36.797 
我們就能在表裏找到
屬於這個標籤的圖像文件

00:26:36.864 --> 00:26:39.066 
根據項目索引和部分索引

00:26:39.600 --> 00:26:42.169 
它們告訴我們
哪個標籤是我們正在處理的

00:26:43.070 --> 00:26:45.606 
讓我們試着...
建造並使之運行

00:26:47.407 --> 00:26:49.209 
我們可以根據標籤來分組

00:26:49.676 --> 00:26:52.212 
現在我們已經根據
標籤來分組了

00:26:53.113 --> 00:26:55.048 
我擁有跟以前一樣的...

00:26:55.716 --> 00:26:56.550 
佈局

00:26:56.950 --> 00:26:58.018 
如果我們放大能看到

00:26:58.085 --> 00:26:58.919 
這是...

00:26:58.986 --> 00:27:01.221 
我們在一個nib裏定義的
頁首視圖

00:27:01.288 --> 00:27:02.589 
它基本上是一個容器

00:27:02.656 --> 00:27:04.091 
它有淺灰色的背景

00:27:04.157 --> 00:27:06.460 
並有一個可以讓您
輸入任何東西的文本框

00:27:06.527 --> 00:27:07.494 
按照您的需要...

00:27:07.761 --> 00:27:08.795 
在這裏

00:27:08.862 --> 00:27:11.498 
這是我們的頁腳視圖
這是一種更深的灰色

00:27:11.565 --> 00:27:12.399 
告訴我們

00:27:12.566 --> 00:27:13.867 
我們已經創建了一個文本框

00:27:13.934 --> 00:27:15.702 
以告訴我們一個組裏面
有多少個文件

00:27:16.303 --> 00:27:18.372 
這就是所有應用部分所需要的東西

00:27:18.438 --> 00:27:21.008 
這與iOS基本相同

00:27:21.341 --> 00:27:26.346 
我省去的一方面
啊 我省去了兩個方面

00:27:26.413 --> 00:27:29.950 
就是創建附屬視圖頁頭和頁腳

00:27:30.250 --> 00:27:31.351 
這裏有一點代碼

00:27:31.418 --> 00:27:33.153 
但這是平行的

00:27:33.387 --> 00:27:36.690 
最重要的是我們是否能調用

00:27:36.757 --> 00:27:38.759 
makeSupplementary
ElementView...

00:27:38.825 --> 00:27:40.861 
makeSupplementary
ViewOfKind

00:27:40.928 --> 00:27:42.896 
流式佈局的種類定義的是

00:27:43.130 --> 00:27:44.231 
部分頁頭

00:27:44.665 --> 00:27:45.499 
和部分頁腳

00:27:45.566 --> 00:27:46.867 
它將是其中之一

00:27:47.201 --> 00:27:48.702 
我們知道它是部分頁頭

00:27:48.936 --> 00:27:50.637 
我們將參考頁頭nib

00:27:50.704 --> 00:27:52.372 
我們將尋找頁腳nib
如果這是頁腳

00:27:52.539 --> 00:27:54.408 
我們傳入這個值作爲標識

00:27:54.842 --> 00:27:57.144 
一旦我們擁有了視圖
我們就有了一個視圖

00:27:57.211 --> 00:27:58.779 
而不是一個視圖控制器

00:28:00.214 --> 00:28:03.116 
我們已找到並建立文本框的值

00:28:03.183 --> 00:28:05.853 
做我們想做的任何事情
並把它返回給集合視圖

00:28:06.286 --> 00:28:08.722 
最後我們需要做的是
實現這些委託方法

00:28:08.789 --> 00:28:10.357 
佈局可以定

00:28:10.657 --> 00:28:12.092 
最適合的尺寸

00:28:12.359 --> 00:28:14.094 
基本是頁頭顯示的高度

00:28:14.161 --> 00:28:16.096 
以及頁腳顯示的高度

00:28:16.163 --> 00:28:18.232 
我們在每個案例中都有NSI

00:28:18.932 --> 00:28:21.602 
因爲我們有一個
垂直滾動的流式佈局

00:28:21.802 --> 00:28:24.004 
只有高度很重要
寬度會被自動裁切爲

00:28:24.071 --> 00:28:26.006 
滾動視圖的寬度

00:28:27.007 --> 00:28:28.575 
爲了頁頭和頁腳可以顯示

00:28:28.842 --> 00:28:30.344 
我們必須這麼做

00:28:31.545 --> 00:28:32.379 
就是這樣

00:28:34.214 --> 00:28:36.750 
現在我們可以開始學習
當我們的模型改變瞭如何更新

00:28:37.084 --> 00:28:40.053 
圖像文件在文件夾裏進進出出

00:28:40.220 --> 00:28:41.588 
我們需要告訴集合視圖

00:28:41.655 --> 00:28:42.756 
何時我們的模型改變了

00:28:42.990 --> 00:28:44.858 
以便更新對用戶所顯示的東西

00:28:46.159 --> 00:28:49.129 
這與OS X的輪廓視圖

00:28:49.530 --> 00:28:52.299 
被處理的方式很相似

00:28:52.499 --> 00:28:54.968 
基本上有四種運行模式

00:28:55.302 --> 00:28:56.603 
項目可以被插入

00:28:56.670 --> 00:28:57.638 
刪除

00:28:57.971 --> 00:28:59.173 
和移動

00:28:59.239 --> 00:29:00.374 
從一個地方到另一個地方

00:29:00.440 --> 00:29:01.808 
或者項目可以被重載

00:29:01.875 --> 00:29:03.510 
這意味着項目還在那裏

00:29:03.577 --> 00:29:06.547 
但屬性被改變了
您需要重新顯示它

00:29:06.613 --> 00:29:07.714 
您需要重新收集...

00:29:07.948 --> 00:29:08.782 
屬性信息

00:29:09.449 --> 00:29:12.619 
這些運行模式可以應用於
部分和項目

00:29:12.686 --> 00:29:15.255 
對於熟悉iOS的人來說
這是一樣的

00:29:15.589 --> 00:29:18.959 
也可以插入 刪除
移動和重載部分

00:29:21.061 --> 00:29:23.530 
就像我所說的
與基於視圖的輪廓視圖很相似

00:29:23.597 --> 00:29:26.133 
這意味着任何時候
當模型發生改變

00:29:26.366 --> 00:29:29.203 
您的數據源或您代碼的其它部分

00:29:29.269 --> 00:29:30.704 
凡是與模型有關的

00:29:30.904 --> 00:29:32.306 
必須去通知集合視圖

00:29:32.573 --> 00:29:35.008 
並準確表述所發生的變化

00:29:35.075 --> 00:29:37.678 
我在這些索引路徑裏
插入了項目

00:29:37.744 --> 00:29:39.646 
我把這些項目移除

00:29:39.713 --> 00:29:42.049 
以使它可以與模型同步

00:29:42.616 --> 00:29:44.184 
只要您做對了
這非常簡單

00:29:45.419 --> 00:29:48.188 
默認條件下
任何您通知集合視圖的變化

00:29:48.255 --> 00:29:51.291 
將馬上顯示 但您可以很容易
顯示一個動畫化的改變

00:29:51.592 --> 00:29:53.727 
通過集合視圖的動畫設計

00:29:53.794 --> 00:29:56.763 
這是視圖所擁有的
一個通用代理對象

00:29:56.830 --> 00:29:59.533 
您可以通過它來實現一個動畫化的更新

00:29:59.600 --> 00:30:01.869 
通常情況下
當您要設置一個參數

00:30:02.102 --> 00:30:05.105 
當它通知佈局動畫
那個項目已經被插入

00:30:05.372 --> 00:30:08.242 
這就我們在示範中所做的
也正因爲這樣我們可以看見

00:30:08.308 --> 00:30:12.212 
項目動來動去的畫面
項目被插入 其他項目被遷出

00:30:12.513 --> 00:30:13.580 
以一種栩栩如生的方式

00:30:13.981 --> 00:30:16.183 
在我們Cocoa幻燈片
集合的示範裏

00:30:16.383 --> 00:30:18.852 
我們將看到影像文件夾的變化

00:30:19.620 --> 00:30:21.722 
每當出現變化 我們都會通知...

00:30:21.788 --> 00:30:24.691 
首先 我們立即更新模型
然後在我們改變模型後

00:30:24.758 --> 00:30:27.394 
通知集合視圖
我們對模型所做的改變

00:30:28.762 --> 00:30:31.064 
圖片檔案可能會來來去去

00:30:31.932 --> 00:30:33.033 
它們可能被我們改變了

00:30:33.166 --> 00:30:35.369 
這些都是我們要
處理的更新類型

00:30:36.703 --> 00:30:38.172 
我們要使用一個小的特性裝置

00:30:38.238 --> 00:30:40.307 
一個基礎的特性裝置
叫鍵值對觀察

00:30:40.374 --> 00:30:43.777 
基本上就是提供一個方法
去觀察其它物件的特性

00:30:43.844 --> 00:30:45.812 
然後自動給予通知

00:30:45.879 --> 00:30:48.549 
這樣您就可以知道
自己該用什麼方法來應對

00:30:48.615 --> 00:30:50.817 
我們的示範
從頭到尾都是鍵值對觀察

00:30:51.385 --> 00:30:53.887 
讓我們馬上
回到我們的示範機器

00:30:54.521 --> 00:30:55.989 
我已經讓它開始運作

00:30:58.425 --> 00:31:01.295 
我們先運作我們的範例
看看它可以做些什麼

00:31:01.962 --> 00:31:04.398 
我現在準備開啓桌面上
度假圖片的文件夾

00:31:05.332 --> 00:31:09.403 
而不是看桌面的圖片文件夾

00:31:11.972 --> 00:31:14.842 
讓我們假設我在度假時
拍了些照片

00:31:16.076 --> 00:31:17.177 
去了些很棒的地方

00:31:17.511 --> 00:31:20.013 
在底下我有一個
尋撿器窗口

00:31:20.514 --> 00:31:21.982 
指向我的桌面照片

00:31:22.049 --> 00:31:23.717 
我現在要從桌面照片中複製些材料

00:31:23.784 --> 00:31:25.118 
假裝我去過這些地方

00:31:26.820 --> 00:31:29.189 
我會拖拽一些項目

00:31:29.890 --> 00:31:30.724 
到文件夾中

00:31:31.325 --> 00:31:33.393 
Cocoa幻燈片集合
正在監督這些檔案

00:31:33.460 --> 00:31:34.828 
它會發現當中的變化

00:31:35.662 --> 00:31:37.664 
並在它的模型中加入

00:31:37.731 --> 00:31:39.266 
項目和圖片檔案的例子

00:31:39.433 --> 00:31:41.368 
最後它會通知集合視圖

00:31:41.602 --> 00:31:44.271 
現在圖片檔案已經添加
讓我們顯示更多的項目

00:31:44.338 --> 00:31:47.407 
這種情況每次都
會在動畫方式中同步發生

00:31:47.574 --> 00:31:49.042 
我們可以拉出一個項目

00:31:49.443 --> 00:31:50.277 
取出檔案

00:31:50.444 --> 00:31:51.845 
然後當它消失的時候

00:31:52.012 --> 00:31:53.981 
做一個更新的文件系統
掃描時要注意變化

00:31:54.047 --> 00:31:55.549 
更新我們的模型
和相應的更新

00:31:55.616 --> 00:31:56.884 
集合視圖

00:31:57.951 --> 00:32:00.521 
這裏的鍵值對觀察技術
已經相當不錯了

00:32:00.587 --> 00:32:01.688 
使用運行軋機

00:32:01.889 --> 00:32:04.391 
最有趣的地方是您如何和
集合視圖對話

00:32:04.992 --> 00:32:07.194 
那麼我們省略早前的
只看最近的

00:32:08.195 --> 00:32:10.130 
您想看看這些
在窗口控制器類底層的方法

00:32:10.197 --> 00:32:11.732 
處理插入的圖片檔案

00:32:12.232 --> 00:32:15.302 
在指數的路徑
這只是一些我們定義給自己用的

00:32:15.369 --> 00:32:18.038 
還有這裏是我們和圖片集合視圖
對話的地方

00:32:18.372 --> 00:32:20.340 
並用這些插入項目

00:32:20.407 --> 00:32:23.377 
在指數路徑 API上
我們基本上要做的就是弄清楚

00:32:23.443 --> 00:32:24.845 
好的
到底什麼項目的指數路徑

00:32:24.912 --> 00:32:25.879 
會受到這個的影響？

00:32:25.946 --> 00:32:27.080 
哪裏我們可以插入項目？

00:32:27.347 --> 00:32:29.049 
我們傳遞消息給
集合視圖

00:32:29.116 --> 00:32:31.518 
由於我們透過動畫製作者通訊
我們會收到動畫的變化

00:32:31.585 --> 00:32:33.153 
其中重新佈局是
需要發生的

00:32:33.453 --> 00:32:35.789 
它會以平滑的方式出現
並非一瞬間

00:32:35.956 --> 00:32:38.392 
如果您想 也可以讓它即時發生
可以省略這裏

00:32:38.659 --> 00:32:39.493 
如果您想

00:32:39.560 --> 00:32:41.695 
要一個動畫的迴應
和動畫製作者的通訊

00:32:42.062 --> 00:32:43.597 
您甚至可以控制持續的時間

00:32:43.664 --> 00:32:45.966 
只要設定動畫內容的
持續時間便可

00:32:47.367 --> 00:32:49.069 
設定成和圖片檔案運轉
速度差不多

00:32:49.136 --> 00:32:51.672 
deleteItemsAt
IndexPaths

00:32:53.340 --> 00:32:56.677 
這樣就會有分類檔案
有插入部分 刪除的部分

00:32:56.743 --> 00:32:57.744 
還有其他關於API的

00:32:57.811 --> 00:32:59.446 
爲了要處理
各個分類檔案的來來去去

00:32:59.513 --> 00:33:00.547 
我們甚至有能力去

00:33:00.781 --> 00:33:01.882 
處理新添加的標籤

00:33:01.949 --> 00:33:03.050 
還有被移除的標籤

00:33:04.718 --> 00:33:06.053 
這大概就是這麼一回事

00:33:09.456 --> 00:33:12.292 
所以分類和高亮顯示
在要與用戶交流時是重要的

00:33:12.359 --> 00:33:13.827 
我們現在來更加仔細地分析它們

00:33:15.362 --> 00:33:17.297 
基本上分類和高亮顯示都是

00:33:17.364 --> 00:33:18.866 
可以在視覺上有指示標準的

00:33:19.132 --> 00:33:21.935 
特別是高亮顯示
其實是一種過渡的狀態

00:33:22.002 --> 00:33:25.439 
在途中令項目有可能成爲
被選擇的或不被選擇的

00:33:25.672 --> 00:33:27.140 
或用作放置目標

00:33:29.510 --> 00:33:31.712 
在這裏有一個圖示
我們有一個項目

00:33:31.778 --> 00:33:33.547 
那裏短暫地顯示橙色
當我不斷拉過它們

00:33:33.614 --> 00:33:35.916 
它們就是分類的候選人

00:33:35.983 --> 00:33:37.651 
當它們確定被選擇
而不是高亮顯示

00:33:37.918 --> 00:33:39.152 
我們可以從橙色邊框
來判斷

00:33:39.419 --> 00:33:41.655 
但是之後它們會變
成藍色

00:33:44.725 --> 00:33:47.394 
就是說 OS X 是有
高亮顯示的項目的

00:33:47.461 --> 00:33:48.896 
這裏和iOS是有點分別的

00:33:48.962 --> 00:33:50.731 
這裏只有布爾數學的
高亮顯示功能

00:33:50.964 --> 00:33:53.267 
在桌面上我們需要更多的靈活性

00:33:53.333 --> 00:33:55.235 
從而能夠形容不同的狀態

00:33:55.602 --> 00:33:57.070 
高亮顯示

00:33:58.672 --> 00:34:00.340 
有四種可能存在的價值

00:34:00.941 --> 00:34:04.211 
沒有系統默認值
意思就是不要高亮突出這些項目

00:34:04.311 --> 00:34:06.346 
您會想知道這些項目
被選擇了沒

00:34:06.413 --> 00:34:07.915 
然後決定如何呈現它們

00:34:08.581 --> 00:34:09.983 
如果它沒有被選擇或突出

00:34:10.217 --> 00:34:11.251 
您會正常地顯示它

00:34:12.485 --> 00:34:14.288 
如果項目是被高亮顯示的

00:34:14.353 --> 00:34:16.089 
這意味它現在並沒有被選擇

00:34:16.156 --> 00:34:18.158 
但是我們在考慮
要不要選擇它

00:34:18.225 --> 00:34:20.694 
這要看使用者想要有什麼用途
比如 拉過項目

00:34:20.994 --> 00:34:22.728 
然後您想把它透過

00:34:22.795 --> 00:34:25.199 
高亮指示來呈現
這完全是根據

00:34:25.331 --> 00:34:27.501 
您想怎樣來設計您的UI

00:34:27.568 --> 00:34:29.069 
我們用橙色門框

00:34:29.136 --> 00:34:30.904 
圍繞邊邊來顯示

00:34:30.971 --> 00:34:32.572 
將被選擇
可還沒有被選擇

00:34:33.841 --> 00:34:36.610 
項目可以爲了被取消選擇
而被高亮顯示出來

00:34:37.010 --> 00:34:39.980 
這可以以shift拉拖動作來實現

00:34:40.080 --> 00:34:42.516 
和在搜尋器圖標上的概觀一樣

00:34:43.784 --> 00:34:47.487 
基本上 這裏的竅門是
項目被選中

00:34:47.788 --> 00:34:49.822 
但您要壓制展示
通常選擇的狀態

00:34:49.889 --> 00:34:51.458 
您想要顯示一些不一樣的

00:34:51.525 --> 00:34:52.826 
爲了要告知使用者

00:34:53.126 --> 00:34:56.230 
這個項目被選擇了
但我們在看怎能取消選擇它

00:34:56.295 --> 00:34:57.598 
您想用平常的方法顯示

00:34:57.664 --> 00:34:59.166 
這其實完全是看您想怎樣

00:34:59.867 --> 00:35:01.401 
根據您的新iDesign

00:35:01.869 --> 00:35:03.737 
最後 一個項目可以被突出顯示

00:35:04.004 --> 00:35:05.806 
並暗示
它將是有可能被棄置的目標

00:35:05.873 --> 00:35:08.475 
雖然以我們今天的例子來說
是不合理的

00:35:08.542 --> 00:35:10.444 
因爲一個圖像
就是一個葉節點

00:35:10.511 --> 00:35:11.845 
我們真的沒有理由

00:35:12.112 --> 00:35:14.114 
去將圖像拉動到
另外一個圖像上

00:35:14.281 --> 00:35:16.283 
但是如果我們有一些東西
更像是容器

00:35:16.483 --> 00:35:19.086 
就會合理很多
我們會想指明那個容器

00:35:19.720 --> 00:35:20.854 
就是我要放置東西的容器

00:35:20.921 --> 00:35:23.423 
如果用戶讓鼠標
指向當前點

00:35:25.492 --> 00:35:27.160 
這些都是在不同的亮點狀態

00:35:27.361 --> 00:35:28.896 
正如我所說
要記住的一樣事情

00:35:28.962 --> 00:35:30.464 
現在所有的都有階層備份

00:35:30.531 --> 00:35:32.900 
以全新的集合視圖
的成就

00:35:33.200 --> 00:35:34.034 
因此

00:35:34.368 --> 00:35:38.472 
它給您機會去利用階層備份功能

00:35:38.772 --> 00:35:40.807 
一個更簡單的方法
去改變項目的外貌

00:35:40.874 --> 00:35:42.176 
無需做重繪

00:35:42.342 --> 00:35:43.177 
所以

00:35:43.243 --> 00:35:45.812 
CN階層功能
例如背景顏色 邊框顏色

00:35:45.879 --> 00:35:47.915 
邊框寬度 圓角半徑
您以前應該計算過這些

00:35:48.048 --> 00:35:49.249 
有了這個會很方便

00:35:49.449 --> 00:35:50.384 
因此 我們可以設置

00:35:50.617 --> 00:35:53.654 
一個項目的根源
來觀察階層的背景顏色

00:35:53.720 --> 00:35:54.555 
對一些顏色

00:35:54.788 --> 00:35:57.424 
然後給它一個圓角半徑
激增成兩行代碼

00:35:57.491 --> 00:35:59.526 
我們已經有了一個
快速的亮點指示

00:35:59.593 --> 00:36:00.594 
或選擇指示

00:36:00.894 --> 00:36:01.728 
又簡單又好

00:36:02.329 --> 00:36:03.697 
您不是必須用這個方法

00:36:03.764 --> 00:36:05.432 
這只是隨意的
要記着

00:36:05.499 --> 00:36:06.967 
我們現在
在階層備份的世界

00:36:07.835 --> 00:36:09.536 
什麼時候要使用亮顯？

00:36:09.736 --> 00:36:10.571 
很簡單

00:36:10.637 --> 00:36:12.773 
任何時候您的
亮點狀態有所改變

00:36:12.840 --> 00:36:14.141 
在Swift您能做到這點

00:36:14.208 --> 00:36:16.243 
一個
DidSetObserver條例

00:36:17.144 --> 00:36:18.579 
同樣您也會看到

00:36:18.645 --> 00:36:23.217 
當選項被選中後
布爾計算變爲是或者否

00:36:23.283 --> 00:36:27.054 
您會綜合考慮高亮顯示狀態
和選中狀態

00:36:27.187 --> 00:36:29.556 
然後決定如何在視覺上顯示選項

00:36:29.623 --> 00:36:31.258 
根據您的用戶界面風格

00:36:33.460 --> 00:36:35.195 
選中當然是我們要做的

00:36:35.262 --> 00:36:36.997 
我們希望用戶能選中選項

00:36:37.064 --> 00:36:39.900 
這樣他們才能通過拖放操作

00:36:39.967 --> 00:36:41.101 
或者用命令操作

00:36:42.069 --> 00:36:43.070 
在集合視圖中

00:36:43.136 --> 00:36:45.138 
選項是組成選擇的東西

00:36:45.205 --> 00:36:46.406 
它們可以被選中

00:36:47.274 --> 00:36:50.377 
Ns集合視圖支持單次
或者多次選中

00:36:50.444 --> 00:36:51.345 
就像以前一樣

00:36:51.612 --> 00:36:54.181 
關鍵的問題是
它是否可以被選中

00:36:55.315 --> 00:36:56.383 
如果您讓它可被選中

00:36:56.450 --> 00:36:57.985 
您可以允許多次選中

00:36:58.051 --> 00:37:00.821 
或者強制只能選中一次

00:37:00.888 --> 00:37:03.457 
您還可以拒絕空選

00:37:03.724 --> 00:37:05.492 
這樣集合視圖就可以

00:37:05.559 --> 00:37:07.160 
始終保持
至少有一個選項被選中

00:37:07.227 --> 00:37:08.395 
這些是比較標準的

00:37:08.662 --> 00:37:11.265 
它們也是在其它的Apple
KitCollection

00:37:11.331 --> 00:37:12.366 
視圖控制裏常見的

00:37:12.900 --> 00:37:14.401 
例如表格視圖
或大綱視圖

00:37:16.136 --> 00:37:19.406 
選中是由新的
選擇索引路徑屬性來追蹤

00:37:19.473 --> 00:37:20.974 
在視圖集合裏

00:37:21.041 --> 00:37:24.144 
這是權威 表示
在集合視圖中的選中

00:37:24.211 --> 00:37:26.180 
而我們使用索引路徑
而不是項目 對吧？

00:37:26.246 --> 00:37:27.381 
因爲項目來來去去

00:37:27.581 --> 00:37:28.949 
但該指數路徑固定不變

00:37:29.316 --> 00:37:31.652 
一個項目
如果它恰好被實例化

00:37:32.019 --> 00:37:33.654 
不知道是否是
在選擇的一部分

00:37:33.720 --> 00:37:34.555 
就像我提到過的

00:37:34.821 --> 00:37:36.590 
項目來來去去

00:37:36.723 --> 00:37:38.392 
集合視圖是永遠不變的

00:37:38.458 --> 00:37:41.128 
所以您總是要看項目索引路徑
看集合視圖

00:37:41.461 --> 00:37:44.398 
來進行操作
並且可以在索引路徑選中選項

00:37:44.698 --> 00:37:47.401 
還可以取消選中
或可以使用這些方法

00:37:47.467 --> 00:37:49.870 
您也可以直接設定
選擇索引路徑

00:37:50.404 --> 00:37:52.739 
當您在iOS索引路徑
中選擇項目時

00:37:52.806 --> 00:37:54.141 
您也可以讓集合視圖

00:37:54.274 --> 00:37:57.344 
以特定的對齊方式
滾動顯示選項

00:37:57.678 --> 00:37:58.512 
如果您想的話

00:37:59.913 --> 00:38:02.049 
我們經常要處理的
是用戶的選擇

00:38:03.217 --> 00:38:05.652 
在iOS裏
委託代表有機會

00:38:05.719 --> 00:38:07.154 
來批准選中
與取消選中

00:38:07.221 --> 00:38:08.956 
我們讓API有點不同

00:38:09.590 --> 00:38:10.824 
再次因爲我們希望

00:38:10.891 --> 00:38:13.527 
能夠在處理大量操作時更有效率

00:38:13.594 --> 00:38:16.597 
現在我們有集合視圖
應該可以選中項目在索引路徑

00:38:16.897 --> 00:38:19.499 
並且集合視圖應該可以
在索引路徑取消選中

00:38:19.766 --> 00:38:22.135 
每一步都要使用一套
索引路徑作爲參數

00:38:22.202 --> 00:38:23.504 
這些是計劃的索引路徑

00:38:23.570 --> 00:38:25.105 
就是我們要選中和取消選中

00:38:26.073 --> 00:38:28.575 
注意到這點是它們返回
一套索引路徑

00:38:28.642 --> 00:38:30.644 
而不是一個布爾

00:38:30.811 --> 00:38:32.613 
所以如果您想說
隨便做什麼

00:38:32.679 --> 00:38:35.249 
集合視圖會只發回我們已給您
的一套索引路徑

00:38:35.382 --> 00:38:37.117 
但是您在這裏也有機會

00:38:37.251 --> 00:38:39.286 
返回一套不同的
索引路徑

00:38:39.353 --> 00:38:41.788 
您也可以做一條線
如果您想的話

00:38:42.022 --> 00:38:43.457 
您也可以根據
您想要的標準

00:38:43.524 --> 00:38:46.727 
您可以把細顆粒控制
用於您選中的

00:38:46.793 --> 00:38:48.462 
或者某些情況下
取消選中的選項

00:38:48.929 --> 00:38:51.365 
也有DidSelect
和DeDeselect

00:38:51.698 --> 00:38:52.599 
選中委託方法

00:38:52.900 --> 00:38:56.069 
這樣您就在對選擇
做過改變之後 找出事實

00:38:57.204 --> 00:39:00.007 
同樣 對亮顯委託有辦法

00:39:00.641 --> 00:39:03.677 
批准並對這些
改變作出反映

00:39:03.744 --> 00:39:06.480 
所以在索引路徑對
突出顯示的狀態做出改變

00:39:06.547 --> 00:39:08.815 
您可以返回
一套索引路徑

00:39:09.049 --> 00:39:10.350 
您可以控制細顆粒程度

00:39:10.584 --> 00:39:12.452 
用在委託的突出強調上

00:39:14.354 --> 00:39:16.657 
我們再來快速
看一邊演示機

00:39:21.395 --> 00:39:22.262 
幸運的是 時間關係

00:39:22.329 --> 00:39:23.730 
我已經寫好了所有的
代碼並運行

00:39:23.797 --> 00:39:25.499 
我們現在只要到
nib文件裏去看

00:39:26.600 --> 00:39:28.802 
然後仔細
來看集合視圖

00:39:36.577 --> 00:39:38.579 
我們將確保它
被標記爲...

00:39:38.912 --> 00:39:39.746 
可選擇的

00:39:39.813 --> 00:39:41.281 
我們將讓空選擇

00:39:41.815 --> 00:39:43.584 
而且我們會允許多重性選擇

00:39:44.384 --> 00:39:46.687 
實施的其餘部分是相當直接簡單的

00:39:46.753 --> 00:39:48.889 
基於我們現在的理解

00:39:50.557 --> 00:39:52.125 
我們將停止構建和運行

00:39:56.530 --> 00:39:58.899 
現在我們可以點擊
項目和選擇它們

00:39:58.966 --> 00:40:01.802 
我們因爲想去展示
說明的用途而選擇

00:40:02.069 --> 00:40:04.171 
它們是可被選擇的候選人

00:40:04.238 --> 00:40:06.707 
它們在被選擇前以橙色去突出顯示

00:40:06.773 --> 00:40:08.642 
當我鬆開觸控板時

00:40:08.709 --> 00:40:10.143 
它變成藍色就代表已被選擇

00:40:10.210 --> 00:40:11.211 
而不再被突出

00:40:11.545 --> 00:40:12.913 
我們可以點擊背景

00:40:13.013 --> 00:40:13.981 
清除選擇

00:40:14.248 --> 00:40:15.883 
我可以單擊並拖動整個項目

00:40:15.949 --> 00:40:18.619 
再來我們展示項目作爲
突出顯示而成爲被選擇的

00:40:18.685 --> 00:40:19.620 
它們還沒有被選擇

00:40:19.887 --> 00:40:21.421 
但當我鬆開觸控板時

00:40:21.655 --> 00:40:22.756 
它們已不再被突出

00:40:22.956 --> 00:40:24.157 
現在它們已被選定

00:40:24.625 --> 00:40:27.995 
正如我提到的在搜尋器的圖案

00:40:28.061 --> 00:40:29.830 
如果您按住Shift鍵
然後拖動選擇

00:40:29.897 --> 00:40:31.431 
那便會變成反轉的選擇

00:40:31.498 --> 00:40:33.967 
這裏是一個項目中
選定的一個例子

00:40:34.334 --> 00:40:36.737 
然後這成爲突出的取消選擇

00:40:37.070 --> 00:40:38.372 
所以 儘管它們是被選擇的

00:40:38.438 --> 00:40:40.440 
我們仍在亮點狀態覆蓋它

00:40:40.507 --> 00:40:41.808 
及我們如何在
視覺上呈現出來

00:40:41.875 --> 00:40:42.843 
以及我們只是...

00:40:43.177 --> 00:40:44.745 
把它們以一般形式地呈現出來

00:40:44.811 --> 00:40:45.946 
與它們無邊框

00:40:46.013 --> 00:40:48.348 
然後 當我鬆手
該選擇已被待發

00:40:48.782 --> 00:40:51.418 
現在 因爲我可以選擇
我可以拖放東西

00:40:51.485 --> 00:40:52.586 
重新排序

00:40:52.920 --> 00:40:53.921 
這個很棒

00:40:54.221 --> 00:40:55.155 
一旦您有選中

00:40:55.222 --> 00:40:56.156 
就有很多...

00:40:56.690 --> 00:40:57.658 
整潔的事情可以做

00:40:59.059 --> 00:41:01.495 
由於這是所有實施
一個非常普遍的方式

00:41:01.562 --> 00:41:03.230 
所以是不可知的不同的佈局

00:41:03.297 --> 00:41:04.898 
大家可以去看看
我們的自定義佈局

00:41:05.232 --> 00:41:07.067 
因爲它們執行所需的方法

00:41:07.501 --> 00:41:11.038 
我們也可以在我們的
自定義佈局裏拖選整個項目

00:41:11.104 --> 00:41:11.939 
單擊選擇

00:41:12.239 --> 00:41:13.841 
並自動發生

00:41:13.907 --> 00:41:15.509 
因爲它們符合在標準

00:41:15.809 --> 00:41:18.178 
NS系列視圖佈局API

00:41:18.745 --> 00:41:20.581 
這是一種很好的免費東西

00:41:20.647 --> 00:41:22.382 
甚至當我們在此節模式

00:41:22.950 --> 00:41:24.885 
流式佈局讓我們跨節地...

00:41:25.285 --> 00:41:26.320 
拖選

00:41:26.486 --> 00:41:27.321 
如此類推

00:41:28.155 --> 00:41:28.989 
這還挺整潔

00:41:29.823 --> 00:41:30.724 
這個可行

00:41:35.028 --> 00:41:35.996 
還有兩樣事情

00:41:36.063 --> 00:41:38.265 
我們將快速談論拖拉及放置

00:41:38.532 --> 00:41:40.067 
這是很重要的支持點

00:41:40.133 --> 00:41:41.535 
由於老而被棄用的API

00:41:41.602 --> 00:41:42.736 
它並沒有從根本上改變

00:41:42.803 --> 00:41:44.638 
但也有一些新的東西要了解

00:41:46.507 --> 00:41:48.876 
現在我們可以拖動選擇的項目

00:41:48.942 --> 00:41:51.745 
然後如果您有一個集羣項的選擇
或只是一個單一的項

00:41:51.812 --> 00:41:53.647 
您可以拖動它並移動它

00:41:54.515 --> 00:41:56.183 
集合視圖
因爲您在拖動

00:41:56.817 --> 00:41:59.453 
計算候選目標
在哪裏放下

00:41:59.520 --> 00:42:01.822 
在此種情況下
我們不允許放置在物品上

00:42:01.889 --> 00:42:03.624 
因爲它們不代表容器

00:42:03.690 --> 00:42:05.759 
但我們允許項目之間的放置

00:42:05.826 --> 00:42:07.427 
這是我們要關注的新的東西

00:42:07.494 --> 00:42:09.329 
在OS X
而不是在iOS上

00:42:11.765 --> 00:42:13.600 
所以拖放和放置
和以前一樣

00:42:13.667 --> 00:42:15.903 
由NS集合視圖委託處理

00:42:15.969 --> 00:42:18.238 
它負責爲您
拖放和放置反應

00:42:18.805 --> 00:42:22.709 
該模型是很明顯地類似
NS大綱視圖的API

00:42:22.776 --> 00:42:24.878 
它並沒有基本原因
讓它變得很不一樣

00:42:25.145 --> 00:42:27.981 
如果您看過拖放及放置
大綱視圖的例子

00:42:28.048 --> 00:42:30.851 
您會看到很多的實現有相同的概念

00:42:31.118 --> 00:42:34.087 
它基本與NSCollection
View的概念是一樣的

00:42:34.821 --> 00:42:37.224 
如果您希望您的集合視圖
成爲拖動源

00:42:37.291 --> 00:42:39.193 
這意味着項目可以
被拖出來

00:42:40.260 --> 00:42:42.829 
您的基本職責是
項目放在粘貼板上時

00:42:42.896 --> 00:42:45.933 
能請求集合視圖

00:42:46.233 --> 00:42:47.534 
如果您想做一個
拖放的終點

00:42:47.601 --> 00:42:49.036 
如果您想接受拖放
您需要能夠

00:42:49.937 --> 00:42:53.507 
估量所計劃的拖放
集合視圖會呼叫您

00:42:53.574 --> 00:42:56.243 
說：我想... 我打算在這裏

00:42:56.310 --> 00:42:59.213 
放置這些東西
從粘貼板到目標位置

00:42:59.279 --> 00:43:02.649 
這是一個索引路徑
暗示一個空白

00:43:02.716 --> 00:43:05.485 
這個空白在選項之間
在已命名的選項

00:43:05.552 --> 00:43:08.622 
前或者一個位置
這個位置在已有的選項之上

00:43:08.722 --> 00:43:10.224 
如果您允許它
作爲一個容器

00:43:10.290 --> 00:43:11.225 
有一種操作

00:43:11.291 --> 00:43:13.260 
它們是標準的
拖放操作

00:43:13.327 --> 00:43:15.295 
例如拷貝 移動等

00:43:15.629 --> 00:43:19.533 
您可以看這個計劃
您可以選擇重寫

00:43:19.600 --> 00:43:21.134 
這些參數
比如我自己計劃的

00:43:21.201 --> 00:43:23.537 
您其實打算用這個位置來放置

00:43:23.604 --> 00:43:25.105 
或者拒絕放置

00:43:25.572 --> 00:43:27.774 
您需要能夠
安排接受放置

00:43:27.841 --> 00:43:30.611 
這很相似
但是用戶已經執行了放置

00:43:31.111 --> 00:43:32.479 
而您需要完成

00:43:32.546 --> 00:43:34.948 
並且來相應地
更改您的模型

00:43:35.015 --> 00:43:36.517 
並且來相應地
更新集合視圖

00:43:37.017 --> 00:43:38.352 
這個運作方式

00:43:39.019 --> 00:43:41.188 
歸結於這些API
您需要

00:43:41.255 --> 00:43:43.323 
像其他NS視圖一樣

00:43:43.557 --> 00:43:44.625 
您想註冊

00:43:44.691 --> 00:43:46.927 
您渴望能被接受的
拖放類型

00:43:47.027 --> 00:43:48.795 
因爲集合視圖
一般不能分辨

00:43:48.862 --> 00:43:50.130 
您處理類型的對象

00:43:50.597 --> 00:43:51.632 
就您的模組而言

00:43:51.999 --> 00:43:54.902 
集合視圖擁有拖放
原始動作掩飾

00:43:54.968 --> 00:43:56.904 
對於本地和非本地拖放

00:43:56.970 --> 00:43:59.039 
這僅僅是基本的
讓您預先設定的

00:43:59.239 --> 00:44:02.809 
我支援複製和移動
但不包括化名或類似的東西

00:44:03.343 --> 00:44:04.611 
您想預先設置

00:44:04.912 --> 00:44:06.847 
我們會在範例裏
示範

00:44:07.848 --> 00:44:10.350 
然後所需要的授權
方法對應於

00:44:10.417 --> 00:44:12.920 
我在上一個幻燈片
提到的責任

00:44:14.321 --> 00:44:16.423 
同樣 您需要能夠
在紙板上編寫物件

00:44:16.557 --> 00:44:18.959 
在現代的API上
您能提供一個紙板編輯器

00:44:19.026 --> 00:44:20.661 
給在索引路徑的物件

00:44:21.028 --> 00:44:22.663 
這允許您更得體地

00:44:22.729 --> 00:44:24.531 
處理多項目拖放

00:44:25.199 --> 00:44:27.534 
某些數據類型是
紙板作者

00:44:27.634 --> 00:44:29.203 
在這個例子中

00:44:29.436 --> 00:44:31.872 
NS路徑如果是絕對路徑

00:44:31.939 --> 00:44:34.441 
您只需要退回
路徑作爲紙板作者

00:44:34.942 --> 00:44:36.643 
它會自已
在紙板上編輯

00:44:36.844 --> 00:44:38.278 
您或者可以在索引路徑

00:44:38.412 --> 00:44:39.980 
實行編寫項目

00:44:40.080 --> 00:44:40.914 
向紙板二選一

00:44:41.148 --> 00:44:42.182 
您也能完成目標

00:44:42.749 --> 00:44:44.184 
現在 再次選擇拖放目的地

00:44:44.251 --> 00:44:46.386 
這裏有一個驗證授權放置方法

00:44:46.720 --> 00:44:47.621 
和接受...

00:44:47.955 --> 00:44:50.123 
授權放置方法
來進一步簡化它們

00:44:50.190 --> 00:44:52.693 
您會在代碼示例
看到那些被實踐的

00:44:54.461 --> 00:44:56.897 
我們沒有時間詳細地
去介紹那些代碼示例

00:44:56.964 --> 00:44:58.465 
因爲拖放在這
是相當地涉及了

00:44:58.532 --> 00:44:59.466 
它的設計是.̆..

00:44:59.933 --> 00:45:01.568 
使您可以拖動項目

00:45:01.802 --> 00:45:04.271 
從一個應用程式到另一個
有很多需要再做的

00:45:04.338 --> 00:45:07.941 
但有很多需要明白的基本技巧
一旦您明白了這些概念

00:45:08.342 --> 00:45:09.710 
剩下的只是運作方式

00:45:09.776 --> 00:45:12.179 
您就可以明白
今天的例子的全部

00:45:12.813 --> 00:45:14.047 
被多次討論的編碼內容

00:45:15.182 --> 00:45:16.650 
需要記住的一個重要的事情是

00:45:17.484 --> 00:45:19.553 
我們要弄清楚

00:45:19.620 --> 00:45:21.388 
並且處理好 

00:45:21.455 --> 00:45:23.924 
要在哪裏進行拖放
使用您的集合視圖

00:45:24.191 --> 00:45:25.492 
當您開始得到

00:45:25.893 --> 00:45:28.562 
拖放目的地的委託信息時

00:45:28.929 --> 00:45:30.697 
值得說的是 嘿

00:45:30.964 --> 00:45:33.300 
我知道這是
我自己發起的拖放

00:45:33.367 --> 00:45:35.869 
我知道哪個選項
哪個索引路徑會被拖放

00:45:36.036 --> 00:45:38.739 
這樣我就可以更容易地處理
相對於一般的情況

00:45:38.805 --> 00:45:40.774 
這個拖放可能來自
這個系統任何地方的情況

00:45:40.841 --> 00:45:43.544 
我必須從粘貼板取出東西
諸如此類

00:45:45.045 --> 00:45:47.714 
使用集合視圖
這讓您可以告訴集合視圖

00:45:47.781 --> 00:45:50.117 
您只是在從
索引路徑挪動東西

00:45:50.184 --> 00:45:53.020 
到這些新的索引路徑中
並且給您一個很好的動畫

00:45:53.320 --> 00:45:54.621 
作爲附加的好處

00:45:54.821 --> 00:45:57.457 
這樣更好 更精緻

00:45:57.791 --> 00:45:59.993 
相比與挪動那些選項
然後 哦

00:46:00.060 --> 00:46:02.396 
我還得到別處重新插入
一樣的東西

00:46:02.663 --> 00:46:03.564 
然後重建這些東西

00:46:04.064 --> 00:46:06.266 
在集合視圖中
一個好用之處

00:46:06.333 --> 00:46:08.135 
就是拖放期
開始於項目

00:46:08.368 --> 00:46:11.371 
在指引路徑委託方法時

00:46:11.471 --> 00:46:13.373 
這是個可選的方法
但是個好的地方

00:46:13.440 --> 00:46:17.110 
來獲取那些索引路徑
隱藏它們到私立的屬性

00:46:17.211 --> 00:46:19.279 
在您的... 數據源中

00:46:19.346 --> 00:46:21.448 
這樣您將來可以
找到它們並且說 哈

00:46:21.515 --> 00:46:23.350 
我可以更簡單地處理這個
並且您會發現

00:46:23.417 --> 00:46:24.952 
示例程序在那裏也這麼做

00:46:26.386 --> 00:46:27.821 
我想花點時間

00:46:28.155 --> 00:46:31.892 
向你們展示自定製界面
這個改變更加有趣

00:46:32.025 --> 00:46:33.460 
我們來看一下

00:46:34.361 --> 00:46:36.296 
這是我們最後的任務

00:46:36.730 --> 00:46:39.633 
我們會考慮您需要做什麼
去調整現有的佈局

00:46:39.700 --> 00:46:42.269 
比方說
流式幾乎滿足了您所有的需求

00:46:42.336 --> 00:46:44.505 
但您想稍微調整一下
讓一切看起來都很完美

00:46:44.872 --> 00:46:47.508 
我之前就聽過這種做法

00:46:48.141 --> 00:46:48.976 
或者

00:46:49.142 --> 00:46:52.012 
您想採用
一個全新的自定義佈局類型

00:46:52.079 --> 00:46:53.313 
就像我們現在

00:46:53.380 --> 00:46:55.115 
通過不同的

00:46:55.682 --> 00:46:56.917 
幻燈片佈局一樣

00:46:57.150 --> 00:46:58.986 
我們來看看要完成這個任務
需要什麼條件

00:46:59.486 --> 00:47:01.922 
調整現有的佈局
相對比較輕鬆

00:47:02.055 --> 00:47:03.056 
我們先看看這個變化

00:47:03.323 --> 00:47:05.759 
比方說您想
列入流程佈局級別

00:47:05.826 --> 00:47:07.160 
將項目的位置

00:47:07.528 --> 00:47:08.362 
稍微調整一下

00:47:08.428 --> 00:47:09.530 
把東西從這裏拉到那裏

00:47:09.963 --> 00:47:11.798 
您通過一個指令就可以做到
但我們假設

00:47:11.865 --> 00:47:14.101 
您希望做一些
您在現有的API基礎上

00:47:14.201 --> 00:47:15.335 
做不到的事

00:47:16.737 --> 00:47:18.338 
這就是主要的方法

00:47:18.605 --> 00:47:20.607 
需要大家去了解

00:47:20.908 --> 00:47:23.110 
目前爲止
它跟iOS是一樣的

00:47:23.443 --> 00:47:26.680 
矩形元素佈局屬性
是非常普遍的API

00:47:26.747 --> 00:47:27.814 
集合視圖的到來

00:47:28.248 --> 00:47:31.385 
爲您提供一個矩形
那是個矩形

00:47:31.618 --> 00:47:33.420 
在集合視圖的
內部座標系統中

00:47:33.487 --> 00:47:34.488 
從基本上來說

00:47:34.855 --> 00:47:35.989 
這個矩形裏面是什麼

00:47:36.490 --> 00:47:38.458 
您必須返回

00:47:38.592 --> 00:47:39.860 
佈局屬性對象的排列

00:47:39.927 --> 00:47:41.495 
記住那是我們的

00:47:41.828 --> 00:47:43.297 
項目描述的包裝

00:47:43.363 --> 00:47:47.034 
不依賴於真正的
實例化項目

00:47:47.401 --> 00:47:50.103 
您可以返回
項目的信息

00:47:50.170 --> 00:47:52.039 
如果您有... 頁眉
和頁腳視圖

00:47:52.105 --> 00:47:54.141 
或者其他附屬視圖
適用於該領域

00:47:54.508 --> 00:47:56.076 
您必須瞭解
那是什麼

00:47:56.143 --> 00:47:57.411 
並返回那些描述

00:47:57.544 --> 00:47:58.545 
這顯然

00:47:58.812 --> 00:48:01.481 
高度獨立於您的佈局算法

00:48:01.582 --> 00:48:02.783 
它可以是任何東西 對吧？

00:48:02.850 --> 00:48:04.751 
所以您穿梭於
您自己的內部數據結構中

00:48:04.818 --> 00:48:07.788 
您想要發現如何真正
高效地做到這個佈局

00:48:08.121 --> 00:48:09.823 
那就是這種方法的
責任所在

00:48:09.890 --> 00:48:11.825 
返回矩形中所有數據的描述

00:48:12.292 --> 00:48:14.194 
當集合視圖
第一次列出您定義的所有項目時

00:48:14.261 --> 00:48:15.529 
那就是核心部分

00:48:15.596 --> 00:48:16.597 
那就是它的來由

00:48:17.764 --> 00:48:19.933 
會出現這個說明
項目的佈局屬性

00:48:20.000 --> 00:48:21.768 
在索引路徑中
似乎有些多餘

00:48:21.835 --> 00:48:24.571 
但集合視圖需要
詢問某一項目時

00:48:25.239 --> 00:48:27.207 
比方說向我描述該項目

00:48:27.541 --> 00:48:29.109 
那就是
需要您做的地方

00:48:30.077 --> 00:48:32.412 
如果那個索引路徑中沒有項目
您就沒有返回

00:48:32.813 --> 00:48:34.615 
通常都會有
如果它詢問的話

00:48:34.915 --> 00:48:38.719 
這個功能會啓動
在您把東西從一個地方

00:48:38.819 --> 00:48:40.120 
移到另一個地方時

00:48:40.454 --> 00:48:42.556 
所以您也想要實現那個目標

00:48:42.623 --> 00:48:44.992 
結果需要跟第一種方法
保持一致

00:48:47.594 --> 00:48:50.297 
然後會出現上下文的無效佈局
這是一種

00:48:50.364 --> 00:48:54.368 
普通的無效方法
是由集合視圖在上下文中觸發的

00:48:54.568 --> 00:48:56.570 
如果
您查看它的屬性

00:48:56.637 --> 00:48:58.405 
檢查它
它跟iOS的情況一樣

00:48:58.639 --> 00:49:00.140 
它描述改變了的項目

00:49:00.207 --> 00:49:01.742 
插入或刪除的項目

00:49:01.808 --> 00:49:05.112 
可能集合視圖在調整大小
任何一種情況都可能發生

00:49:05.679 --> 00:49:08.715 
檢查上下文屬性
讓您有機會

00:49:08.949 --> 00:49:11.051 
嘗試變得聰明和高效

00:49:11.118 --> 00:49:12.252 
這是一種先進的優化

00:49:12.452 --> 00:49:13.754 
正如您希望的

00:49:13.921 --> 00:49:16.190 
您把佈局
按照自己的想法

00:49:16.256 --> 00:49:17.090 
設置好以後使用

00:49:17.291 --> 00:49:20.861 
這是您的機會
清除在佈局記錄的

00:49:21.662 --> 00:49:24.464 
內部狀態中的無效數據

00:49:24.531 --> 00:49:25.566 
以及有調整時

00:49:27.134 --> 00:49:28.602 
您自己對它的描述

00:49:29.870 --> 00:49:32.005 
所以我們剛剛看到了
流式佈局

00:49:32.072 --> 00:49:33.674 
接下來我們一起實施

00:49:33.740 --> 00:49:35.976 
前面兩種方法

00:49:36.043 --> 00:49:37.644 
佈局屬性返回方法

00:49:38.111 --> 00:49:39.413 
使用先進的方法

00:49:39.847 --> 00:49:42.482 
看看NS集合視圖
流式佈局的提議

00:49:42.716 --> 00:49:46.153 
我們可以檢查
佈局屬性成品的狀態

00:49:46.220 --> 00:49:47.221 
或者它們的排列

00:49:47.454 --> 00:49:49.056 
然後進行任何一種
我們希望的改變

00:49:49.122 --> 00:49:51.124 
返回一組新的
佈局屬性排列

00:49:51.191 --> 00:49:52.526 
或者單一的
佈局屬性排列

00:49:53.126 --> 00:49:54.628 
那就是關於
這個東西的介紹

00:49:54.695 --> 00:49:57.898 
只要您做出的改變
不改變佈局需要的空間

00:49:59.399 --> 00:50:01.134 
要是您想進行
全新的自定義佈局

00:50:01.201 --> 00:50:02.436 
就像我們所做的那樣？

00:50:02.970 --> 00:50:05.138 
您可以直接將
NS集合視圖佈局歸爲子集

00:50:05.205 --> 00:50:07.007 
將所有東西
重新開始

00:50:07.074 --> 00:50:09.810 
比方說 如果您的類型和
流式相似

00:50:10.444 --> 00:50:11.912 
您採用同樣的方法
就像我們剛

00:50:12.145 --> 00:50:13.647 
在上一張幻燈片中提到的那樣

00:50:14.481 --> 00:50:16.149 
此外 您要能夠

00:50:16.984 --> 00:50:18.819 
回答一下基本的問題
比如

00:50:19.052 --> 00:50:22.956 
您需要的大小 寬度和高度
去排列項目

00:50:23.023 --> 00:50:24.758 
是不是集合視圖
能夠提供的？

00:50:25.325 --> 00:50:27.561 
基本上您只需要告訴
集合視圖

00:50:27.661 --> 00:50:30.097 
我的文件視圖大小

00:50:30.163 --> 00:50:31.798 
這決定了您的滾動區域

00:50:33.734 --> 00:50:37.070 
要是邊界改變的無效佈局
返回一個布爾值

00:50:37.237 --> 00:50:38.505 
在調整大小的過程中

00:50:38.572 --> 00:50:39.873 
集合視圖將會
觸發這個功能

00:50:40.340 --> 00:50:43.810 
通常您會觀察
我的佈局算法是什麼？

00:50:43.911 --> 00:50:46.246 
我的佈局是否受到
重新調整大小的影響？

00:50:46.513 --> 00:50:49.049 
如果您是流式佈局
比方說 垂直界面

00:50:49.116 --> 00:50:50.651 
將所有東西排成行

00:50:51.151 --> 00:50:52.452 
或許您並不是非常在意

00:50:52.519 --> 00:50:55.022 
如果集合視圖的高度
發生改變 對吧？

00:50:55.088 --> 00:50:56.557 
那只是爲您提供了
空間而已

00:50:56.623 --> 00:50:58.926 
但是如果寬度發生改變
您必須重新排列

00:50:59.259 --> 00:51:01.295 
比方說您可能
在那種情況下返回是對的

00:51:01.562 --> 00:51:02.963 
這就是那種方法的作用

00:51:04.731 --> 00:51:07.234 
如果您修改流式佈局

00:51:07.301 --> 00:51:09.169 
來獲得您需要修改的空間

00:51:09.303 --> 00:51:11.538 
您真正需要進行那兩項修改

00:51:11.605 --> 00:51:13.307 
即使是細微的自定義排列

00:51:14.675 --> 00:51:16.844 
然而這些方法
在OS X上是全新的

00:51:16.910 --> 00:51:19.513 
我剛剛提到
我們有能力去進行測試

00:51:19.580 --> 00:51:20.414 
擁有一個...

00:51:20.881 --> 00:51:21.715 
抽象的佈局

00:51:21.782 --> 00:51:22.616 
去進行...

00:51:22.783 --> 00:51:24.017 
目標放置的測試

00:51:24.251 --> 00:51:25.853 
這是個很強大的新特性

00:51:26.253 --> 00:51:28.355 
您可以在
任何一種自定義佈局中進行設置

00:51:28.755 --> 00:51:31.491 
點擊目標放置的佈局屬性
是第一種方法

00:51:32.092 --> 00:51:34.928 
如果目標是一個項目
那就非常直接

00:51:34.995 --> 00:51:37.865 
您將會返回一個屬性
佈局屬性實例

00:51:38.465 --> 00:51:40.501 
其代表的
元素類型是項目

00:51:41.201 --> 00:51:43.337 
您在對一個項目
進行放置

00:51:43.971 --> 00:51:45.973 
您插入所發現的

00:51:46.039 --> 00:51:48.609 
需要放置的項目的索引路徑

00:51:49.743 --> 00:51:50.577 
然後您想

00:51:50.644 --> 00:51:52.713 
返回該項目的邊界框

00:51:52.779 --> 00:51:54.615 
作爲佈局屬性的框架

00:51:54.982 --> 00:51:56.016 
那非常簡單

00:51:56.617 --> 00:51:59.152 
現在更有趣的情況是
我們無需去處理

00:51:59.219 --> 00:52:01.154 
iOS中
項目之間的間隙

00:52:02.656 --> 00:52:05.425 
如果您決定這個點
應該進行測試

00:52:05.492 --> 00:52:07.861 
但它卻在項目之間
可您以通過

00:52:07.928 --> 00:52:11.532 
項目的序列號碼去辨別
間隙的位置 好的

00:52:11.598 --> 00:52:15.235 
這個介於
索引6和索引7

00:52:15.302 --> 00:52:17.037 
您想返回項目間隙

00:52:18.005 --> 00:52:21.141 
那樣用戶可以在佈局中
在項目之間放置目標

00:52:21.475 --> 00:52:24.311 
您返回的元素
類型是項目間隙

00:52:25.045 --> 00:52:26.346 
屬性的索引路徑是

00:52:26.813 --> 00:52:30.317 
間隙後的項目所在的索引路徑

00:52:30.517 --> 00:52:33.153 
如果您還是在6和7之間
您返回的索引路徑是

00:52:33.220 --> 00:52:35.189 
該部分項目7的位置

00:52:36.423 --> 00:52:39.826 
其次 您返回的
屬性框架

00:52:40.127 --> 00:52:40.961 
間隙的邊界框

00:52:41.361 --> 00:52:44.064 
集合視圖
將使用該邊界框

00:52:44.131 --> 00:52:46.733 
去定義如何
在那個矩形中規劃

00:52:46.800 --> 00:52:48.001 
標準的指標

00:52:51.471 --> 00:52:53.407 
接下來的一種方法
叫做索引路徑前

00:52:53.473 --> 00:52:55.576 
項目間隙的佈局屬性

00:52:55.642 --> 00:52:57.544 
集合視圖有時也需要
這種方法

00:52:57.611 --> 00:52:59.580 
它也會詢問特定的位置

00:53:00.013 --> 00:53:01.548 
要求您描述該間隙

00:53:02.115 --> 00:53:03.717 
所以這裏我們返回一種

00:53:03.784 --> 00:53:05.485 
元素類型的屬性
項目間隙

00:53:05.853 --> 00:53:08.589 
它代表的元素類型是
項目間隙指標

00:53:08.956 --> 00:53:12.259 
所以我們利用這個
建立一個補充視圖

00:53:12.326 --> 00:53:15.162 
那就是項目
間隙指標的應用

00:53:15.896 --> 00:53:17.931 
您只需插入您所給予的
索引路徑

00:53:18.599 --> 00:53:20.767 
返回的是
屬性框架

00:53:20.868 --> 00:53:22.102 
作爲該間隙的矩形

00:53:22.202 --> 00:53:23.804 
綜合這兩種方法

00:53:24.171 --> 00:53:25.439 
集合視圖支持...

00:53:26.907 --> 00:53:29.076 
項目之間目標放置的指示

00:53:29.142 --> 00:53:32.379 
即使是任意的
自定義佈局

00:53:32.446 --> 00:53:34.581 
您自己的設計
也可以做到相當整齊

00:53:35.582 --> 00:53:37.384 
我們簡單看一下
我們的自定義佈局

00:53:37.451 --> 00:53:38.552 
以及它們如何實施

00:53:39.086 --> 00:53:40.187 
請看我們最後一個短片

00:53:47.861 --> 00:53:49.596 
請看這裏左側邊欄

00:53:49.963 --> 00:53:51.298 
我們將代碼進行分類

00:53:51.365 --> 00:53:53.333 
我們有一個代碼組
您可能想看一下

00:53:53.734 --> 00:53:55.769 
今天我們看一個例子

00:53:56.203 --> 00:53:57.171 
圓形佈局

00:54:01.575 --> 00:54:03.277 
它很簡單

00:54:03.410 --> 00:54:06.346 
我們在索引路徑採用
項目佈局屬性

00:54:06.413 --> 00:54:08.248 
在這裏我們會詢問
某一特定的項目

00:54:08.815 --> 00:54:12.619 
這些是我們理論上能做的事
我們將項目索引

00:54:13.453 --> 00:54:14.922 
從索引路徑提取出來

00:54:15.189 --> 00:54:18.091 
那將定義我們距離
圓圈有多遠

00:54:18.425 --> 00:54:20.327 
我們利用那個想法去計算

0至2π弧度的角


00:54:23.931 --> 00:54:26.767 
那樣我們計算出一個幻燈片
理應的走向框架

00:54:27.701 --> 00:54:29.536 
那麼最重要的一部分是這裏

00:54:30.304 --> 00:54:31.805 
API是一個敏感的部分

00:54:31.872 --> 00:54:34.308 
您如何舉例說明
佈局屬性對象

00:54:34.374 --> 00:54:36.610 
獲得一個
與索引路徑相關的

00:54:36.677 --> 00:54:38.011 
正確索引

00:54:38.345 --> 00:54:39.913 
您想小心
用這種方式進行

00:54:40.681 --> 00:54:42.216 
我們會談及...

00:54:43.217 --> 00:54:44.985 
佈局的層次

00:54:45.352 --> 00:54:48.055 
獲得相應的
佈局屬性層次

00:54:48.121 --> 00:54:49.923 
基本上擁有這個API

00:54:50.123 --> 00:54:52.459 
可以讓佈局屬性

00:54:52.526 --> 00:54:54.728 
NS集合視圖
佈局屬性層次

00:54:54.962 --> 00:54:56.530 
得以歸類和延伸

00:54:56.797 --> 00:54:59.499 
或許您有一些真正的
在iOS的自定義佈局

00:54:59.800 --> 00:55:01.768 
需要與
其它屬性一起使用

00:55:01.835 --> 00:55:04.371 
或者記住其它信息
關於已經陳列的項目內容

00:55:04.571 --> 00:55:06.740 
您可以通過歸類
增加那些屬性

00:55:07.441 --> 00:55:09.309 
您推翻佈局屬性層次

00:55:09.376 --> 00:55:11.345 
返回您自己的分類

00:55:12.145 --> 00:55:14.915 
通過這個方法去確定
舉例說明這個分類

00:55:14.982 --> 00:55:15.816 
如果有需要的話

00:55:16.016 --> 00:55:16.850 
適合的那一個

00:55:17.451 --> 00:55:19.386 
我們啓動這個出廠模式

00:55:20.020 --> 00:55:21.255 
有索引路徑的項目的

00:55:21.321 --> 00:55:23.757 
佈局模式
我們往那個路徑傳輸獲得的東西

00:55:23.824 --> 00:55:26.159 
一旦我們獲得一個佈局
屬性對象

00:55:27.194 --> 00:55:29.563 
我們按照自己的想法設置
我們設置框架

00:55:29.630 --> 00:55:33.033 
前後顛倒的Z索引
層中的序號

00:55:33.634 --> 00:55:36.537 
然後我們返回那個特性對象
至集合視圖

00:55:37.171 --> 00:55:38.705 
我們擁有一個超級層

00:55:39.039 --> 00:55:41.608 
所有的自定義佈局
我們都採用

00:55:42.109 --> 00:55:43.944 
矩形方法

00:55:44.511 --> 00:55:46.547 
矩形元素
佈局屬性

00:55:46.613 --> 00:55:48.715 
我們可以做到那一點
因爲在這種情況下

00:55:48.782 --> 00:55:50.050 
特別的是這些所有的佈局

00:55:50.284 --> 00:55:53.020 
在這種情況下不單單是可以
滾動的佈局還能擴大至

00:55:53.086 --> 00:55:54.121 
它們需要的大小

00:55:54.354 --> 00:55:55.923 
去展示它們的項目

00:55:56.123 --> 00:55:57.691 
這些都選擇在可視化區域

00:55:57.958 --> 00:56:00.961 
展示集合視圖的
所有項目

00:56:01.361 --> 00:56:03.630 
所以採用這種方法

00:56:03.697 --> 00:56:04.831 
基本上是一樣的

00:56:05.232 --> 00:56:07.568 
我們看到一個矩形
我們會看到

00:56:07.634 --> 00:56:09.503 
我們所有的項目

00:56:09.970 --> 00:56:13.774 
我們返回這些描述
至集合視圖

00:56:14.074 --> 00:56:16.810 
所以我們實際上
利用了索引路徑項目的

00:56:16.877 --> 00:56:18.545 
佈局屬性方法

00:56:18.745 --> 00:56:20.547 
我們在分類中
採用這個方法

00:56:21.481 --> 00:56:23.817 
集合視圖內容
大小是一樣的

00:56:23.884 --> 00:56:25.519 
這些幻燈片的佈局
我們看到

00:56:25.586 --> 00:56:27.287 
省略視圖的大小

00:56:27.554 --> 00:56:28.822 
我們擁有的內容

00:56:28.889 --> 00:56:29.990 
是否讓用戶可見呢？

00:56:30.057 --> 00:56:31.692 
我們計劃陳列出
所有的東西

00:56:31.925 --> 00:56:32.993 
因爲我們在做那一點

00:56:33.594 --> 00:56:36.797 
我們努力在邊界改變時
讓佈局失效

00:56:36.864 --> 00:56:39.766 
無論如何改變
我們想重新佈局

00:56:39.900 --> 00:56:43.971 
這樣才能合理地
使用可用的空間

00:56:45.138 --> 00:56:48.075 
在iOS準備佈局
這只是個輕而易舉的事

00:56:48.141 --> 00:56:50.944 
當佈局參數發生改變時
您就處於

00:56:51.011 --> 00:56:52.546 
新佈局週期的開端

00:56:52.813 --> 00:56:55.282 
您可以做任何提前計算
您可以做任何事情

00:56:55.516 --> 00:56:57.684 
觸發功能
在週期的開端

00:56:58.652 --> 00:57:01.154 
我們可以看一下
這裏活動的佈局

00:57:07.861 --> 00:57:11.832 
在調整大小中遇到的
圓形佈局

00:57:11.899 --> 00:57:13.934 
佈局每次都會
失效

00:57:14.001 --> 00:57:14.835 
因爲我們想

00:57:15.202 --> 00:57:16.603 
獲得最大的圓形

00:57:16.870 --> 00:57:19.072 
在可用空間內預留邊界

00:57:21.175 --> 00:57:24.678 
通過採用那些
相對要求少的方法

00:57:25.045 --> 00:57:26.713 
我們獲得一個
完全自定義的佈局

00:57:26.780 --> 00:57:27.881 
另外 跟以往一樣

00:57:28.115 --> 00:57:30.150 
它支持交叉篩選

00:57:30.484 --> 00:57:32.119 
在這裏點擊篩選

00:57:32.586 --> 00:57:34.321 
它很通用

00:57:35.656 --> 00:57:38.492 
所以無需太多
就可以定義佈局

00:57:39.593 --> 00:57:41.495 
在NS集合視圖內的使用佈局

00:57:41.795 --> 00:57:43.964 
事實上佈局層次
以及您找到的API

00:57:44.198 --> 00:57:45.465 
除了特殊情況

00:57:45.532 --> 00:57:48.602 
我們增加了這些功能
去支持放置目標測試

00:57:48.969 --> 00:57:51.038 
API基本上跟iOS一樣

00:57:51.104 --> 00:57:53.106 
所以如果您有
在iOS使用的佈局

00:57:53.207 --> 00:57:55.642 
您會發現
遷移到OS X其實很簡單

00:57:57.311 --> 00:57:59.213 
今天我們講了
許多話題

00:57:59.279 --> 00:58:01.615 
我們現在推出測試版

00:58:01.682 --> 00:58:03.984 
您可以獲得完整的源代碼

00:58:04.051 --> 00:58:05.552 
我鼓勵您去研究它

00:58:05.719 --> 00:58:07.554 
它應該能幫助您開始

00:58:07.788 --> 00:58:11.091 
在El Capitan使用
全新的NS集合視圖

00:58:12.926 --> 00:58:15.429 
最後 我們擁有
極大提升了的

00:58:15.495 --> 00:58:17.931 
NS集合視圖
我希望您會喜歡El Capitan

00:58:17.998 --> 00:58:21.335 
它現已在市場推出
能夠處理大量的項目

00:58:21.735 --> 00:58:23.770 
能靈活進行隨意佈局

00:58:24.404 --> 00:58:27.274 
所有您希望看的最艱難的項目

00:58:27.341 --> 00:58:28.909 
我們鼓勵您這樣做

00:58:28.976 --> 00:58:31.812 
讓我們知道細節
讓我們知道您碰到的難處

00:58:32.679 --> 00:58:34.081 
如果您需要任何的幫助或指導

00:58:34.147 --> 00:58:37.551 
我們有一個專門的集合視圖實驗室
專注於未來發明

00:58:37.784 --> 00:58:41.121 
叫做Foundation實驗室B
Frameworks實驗室B不好意思

00:58:41.488 --> 00:58:42.656 
在這棟建築的底層

00:58:43.557 --> 00:58:46.660 
明早9:00我到時會和
團隊中的其他工程師一起

00:58:46.727 --> 00:58:48.028 
他們都很瞭解集合視圖

00:58:49.263 --> 00:58:53.100 
不要只看文件
還要看應用套裝發佈筆記

00:58:53.166 --> 00:58:56.537 
我會以個人名義將關於
集合視圖的使用筆記放到那裏

00:58:57.538 --> 00:58:59.173 
裏面關於如何建立的信息

00:59:00.007 --> 00:59:03.377 
而且您能看到
關於在10.11的AppKit中的

00:59:03.443 --> 00:59:05.846 
所有其它偉大發明的信息

00:59:06.880 --> 00:59:09.149 
如果您錯過了
Cocoa有什麼新內容

00:59:09.216 --> 00:59:12.386 
這是找尋其他
新添的特性的好地方

00:59:12.452 --> 00:59:14.721 
信息量很大
一個演講無法涵蓋所有內容

00:59:14.888 --> 00:59:18.358 
我鼓勵您去看一看會議視頻

00:59:18.692 --> 00:59:22.062 
最後我們有兩大自動佈局會議
在今天早些時候

00:59:22.129 --> 00:59:24.064 
如果您正在使用自動佈侷限制

00:59:24.298 --> 00:59:26.800 
來在項目中定位您的控制

00:59:27.034 --> 00:59:30.304 
對自動佈局的仔細瞭解
是很有幫助的

00:59:31.004 --> 00:59:33.640 
謝謝你們的出席
我很期待看到你們會創造出什麼

00:59:33.707 --> 00:59:36.844 
享受WWDC的衝擊吧！
我們明天實驗室見