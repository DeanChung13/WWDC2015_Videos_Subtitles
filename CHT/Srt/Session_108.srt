00:00:32.499 --> 00:00:33.400 
尼爾·德賽: 大家好

00:00:33.467 --> 00:00:35.035 
歡迎來到《構建Watch App》
講座

00:00:35.102 --> 00:00:37.004 
我是尼爾·德賽是位工程師

00:00:37.271 --> 00:00:38.906 
在watchOS項目工作

00:00:39.940 --> 00:00:43.210 
今天我給大家演示如何
從下到上構建watchOS app

00:00:44.778 --> 00:00:48.215 
我們要談談
Watch app的架構

00:00:48.282 --> 00:00:51.652 
我們正在全面瞭解
app的生命週期佈局模型

00:00:52.352 --> 00:00:54.888 
我們會使用不同的界面元素

00:00:54.955 --> 00:00:57.791 
以便爲用戶實現美好的體驗

00:00:58.792 --> 00:00:59.927 
我們會調試app

00:01:01.261 --> 00:01:04.897 
還將通過不同的watchOS 2
功能增強app的性能

00:01:05.966 --> 00:01:10.170 
那麼 在Apple Watch中
你有四個機會來展示信息

00:01:10.537 --> 00:01:12.339 
從Apple Watch的
Home屏幕 

00:01:12.439 --> 00:01:14.441 
到在Watch app中
可以手工啓動的位置

00:01:14.741 --> 00:01:17.678 
Watch app可以提供
深度用戶體驗

00:01:17.744 --> 00:01:20.080 
大家會主要集中進行開發方面的工作

00:01:21.448 --> 00:01:23.083 
可以選擇提供Glance

00:01:23.317 --> 00:01:26.887 
這可以從app給出最及時的相關數據

00:01:26.987 --> 00:01:28.255 
還是以縮略形式

00:01:30.090 --> 00:01:34.528 
可以爲app的遠程和
本地通知提供自定義UI

00:01:34.962 --> 00:01:36.163 
Apple Watch利用

00:01:36.230 --> 00:01:39.333 
iOS的現有互動通知支持允許

00:01:39.833 --> 00:01:42.936 
佩戴者對具體行動做出反應

00:01:43.203 --> 00:01:45.506 
將app轉移到指定區域

00:01:45.772 --> 00:01:48.375 
或是在Apple Watch的
Notification

00:01:48.442 --> 00:01:49.710 
Center 晚些查看通知

00:01:50.611 --> 00:01:54.915 
最後 可以添加
Complication

00:01:54.982 --> 00:01:56.884 
在錶盤顯示信息的這一功能

00:01:57.284 --> 00:01:59.052 
讓我非常興奮

00:01:59.186 --> 00:02:01.421 
對於少量信息條而言這一點非常棒

00:02:01.722 --> 00:02:04.091 
用戶可能會在查看時間時
希望瞭解這些信息

00:02:06.226 --> 00:02:09.997 
那麼我們現在瞭解了
用戶會與app交動的不同方式

00:02:10.163 --> 00:02:12.332 
我們來談談
Watch app的架構

00:02:14.401 --> 00:02:17.304 
現有的iPhone app
包括WatchKit擴展

00:02:17.371 --> 00:02:18.272 
和Watch app

00:02:18.739 --> 00:02:22.843 
經過用戶要求的初始配對後
這些都已經裝在了Watch 上

00:02:23.110 --> 00:02:25.879 
或是後來通過
Apple Watch app

00:02:25.946 --> 00:02:26.980 
用戶發起的安裝也可以

00:02:27.781 --> 00:02:29.816 
Watch app包括兩部分內容

00:02:30.250 --> 00:02:33.854 
首先是WatchKit擴展
這一擴展現在就在...

00:02:33.921 --> 00:02:35.856 
Apple Watch上運行

00:02:36.089 --> 00:02:38.125 
並根據用戶互動 執行代碼

00:02:38.492 --> 00:02:40.360 
第二部分是Watch app

00:02:40.661 --> 00:02:42.029 
Watch app的UI已經 

00:02:42.095 --> 00:02:46.900 
從包括故事板和靜態資源捆綁包中
得以加載例如圖像

00:02:48.769 --> 00:02:51.205 
因此 存在於 Watch app

00:02:51.605 --> 00:02:53.707 
的這個UI隨後
會與WatchKit擴展通話

00:02:53.841 --> 00:02:55.475 
可以將全部邏輯置於其中

00:02:56.210 --> 00:02:58.078 
現在 這個擴展程序就在Watch中

00:02:58.345 --> 00:03:00.480 
可以啓動各類新的能力

00:03:00.681 --> 00:03:01.748 
這部分稍後介紹

00:03:02.749 --> 00:03:05.619 
當Watch app需要
與iOS app

00:03:05.953 --> 00:03:09.256 
進行溝通時
WatchConnectivity

00:03:09.656 --> 00:03:12.025 
可用於卸載重型進程

00:03:12.226 --> 00:03:13.260 
或網絡任務它存在於

00:03:13.794 --> 00:03:16.230 
iOS和watchOS 2上

00:03:16.463 --> 00:03:19.433 
所以可以來回溝通

00:03:23.370 --> 00:03:28.108 
總之 故事板和所有靜態資源
存儲在Watch app捆綁包中 

00:03:28.976 --> 00:03:31.245 
Xcode提供的
Watch app已經包括

00:03:31.311 --> 00:03:34.481 
故事板在內在開發期間將會用到

00:03:35.382 --> 00:03:38.018 
因爲這些資源
是Watch app的一部分

00:03:38.352 --> 00:03:40.487 
在設計時必須全部明確

00:03:40.621 --> 00:03:43.090 
只有在運行時可以稍作調整

00:03:43.690 --> 00:03:45.392 
這意味着需要將可能用到的

00:03:45.559 --> 00:03:47.594 
所有UI元素併入

00:03:47.661 --> 00:03:49.263 
故事板的各個場景

00:03:50.230 --> 00:03:53.834 
運行時 對WatchKit
擴展進行編碼 

00:03:53.901 --> 00:03:56.470 
可以更新UI元素包括按照需要

00:03:56.537 --> 00:03:57.938 
對之隱藏 展示或動畫處理

00:03:58.405 --> 00:04:01.141 
此外 WatchKit擴展
可以發送動態

00:04:01.208 --> 00:04:03.844 
生成的內容
至Watch app便於顯示 

00:04:05.879 --> 00:04:09.082 
因此Interface
Controller對單個內容流

00:04:09.149 --> 00:04:10.450 
管理UI元素

00:04:10.918 --> 00:04:12.886 
會設置這些元素的初始值

00:04:13.120 --> 00:04:14.688 
對用戶交互做出反應

00:04:15.055 --> 00:04:16.923 
適度更新UI

00:04:17.791 --> 00:04:20.226 
創建Interface
Controller子類時

00:04:20.560 --> 00:04:23.463 
需要爲需要管理的每個UI添加輸出口

00:04:23.997 --> 00:04:26.400 
這些輸出口與故事板中的對象連接

00:04:26.667 --> 00:04:31.238 
並處理WatchKit擴展
和Watch app之間的信息傳送

00:04:32.139 --> 00:04:37.444 
除了輸出口還要爲故事板的
互動元素設置行動方法

00:04:37.845 --> 00:04:41.081 
對輸出口而言要將每個動作方法

00:04:41.381 --> 00:04:42.883 
和對應的UI元素

00:04:43.617 --> 00:04:46.520 
當佩戴者和Watch的元素交互時

00:04:46.987 --> 00:04:49.590 
WatchKit就會調用行動方法

00:04:50.791 --> 00:04:54.828 
因此我們先來考慮如何
調整現有iPhone app

00:04:56.563 --> 00:05:00.734 
在試運行WWDC時我忘記了

00:05:00.801 --> 00:05:03.303 
聯繫家人和朋友這方面的內容

00:05:03.904 --> 00:05:06.240 
所以我想創建個app可以提醒我

00:05:06.373 --> 00:05:08.075 
我聯繫過誰誰還沒有聯繫

00:05:08.475 --> 00:05:12.613 
這就是WWDC Call Me
Lately 並可以通知我 

00:05:12.679 --> 00:05:13.580 
何時該聯繫他們

00:05:14.214 --> 00:05:17.184 
所以我和服務器溝通

00:05:17.251 --> 00:05:19.820 
跟蹤我需要通過
NSURLSession 聯繫的人

00:05:20.254 --> 00:05:22.656 
這是我做的一個不錯的iOS 

00:05:23.023 --> 00:05:25.959 
不過它更像是Watch app

00:05:26.693 --> 00:05:30.564 
當我特別忙時 很快就可以
知道接下來該聯繫誰

00:05:31.431 --> 00:05:33.433 
現在就開始製作Watch app

00:05:34.968 --> 00:05:37.337 
我想做的是希望給大家展示

00:05:37.404 --> 00:05:40.040 
怎樣在現有的iOS app中
添加Watch app目標

00:05:40.941 --> 00:05:44.611 
接下來我們會涉及在哪裏開始設置界面

00:05:45.212 --> 00:05:46.980 
最後 我們要構建和運行

00:05:47.080 --> 00:05:48.749 
看看模擬器裏的狀況

00:05:50.117 --> 00:05:51.418 
說到模擬器

00:05:51.718 --> 00:05:55.055 
在watchOS 2 SDK中
實際上有個嶄新的模擬器

00:05:56.089 --> 00:05:59.193 
大家可能對iOS模擬器很熟悉

00:05:59.259 --> 00:06:00.460 
這個看起來是這個樣子

00:06:01.461 --> 00:06:03.597 
現在就有了新的Watch模擬器

00:06:04.331 --> 00:06:07.434 
特別棒的一點是
這是個全功能模擬器

00:06:07.868 --> 00:06:12.272 
可以輕鬆看到38毫米
和42毫米的大小

00:06:13.240 --> 00:06:14.942 
可以模擬觸控壓力

00:06:16.210 --> 00:06:18.111 
可以看到不同的錶盤

00:06:18.312 --> 00:06:20.781 
正如我之前所述
現在可以在watchOS 2中

00:06:21.114 --> 00:06:24.151 
支持Complication 
因此可以

00:06:24.751 --> 00:06:27.321 
看到Complication視圖

00:06:27.387 --> 00:06:29.489 
在模擬器不同錶盤的視圖效果

00:06:31.024 --> 00:06:33.393 
最後 同時可以安裝多個app

00:06:33.460 --> 00:06:36.230 
我們認爲這會令製作新項目

00:06:36.463 --> 00:06:38.866 
重複想法等變得非常容易

00:06:39.266 --> 00:06:42.636 
隨後可以快速在不同app之間往復

00:06:44.771 --> 00:06:47.941 
那麼 模擬觸控壓力
可以進入Simulator菜單 

00:06:48.008 --> 00:06:49.243 
來到 Hardware
Simulate

00:06:49.309 --> 00:06:50.511 
Touch Pressure

00:06:50.577 --> 00:06:52.212 
接着可以選擇
Deep Press

00:06:52.613 --> 00:06:55.315 
這對於想在模擬器中改變

00:06:55.382 --> 00:06:57.284 
錶盤這類問題非常有用

00:06:58.585 --> 00:07:02.256 
現在跳到Xcode 
來看怎麼添加Watch app

00:07:02.322 --> 00:07:03.857 
使用這個嶄新的模擬器

00:07:05.225 --> 00:07:06.326 
來看演示

00:07:18.572 --> 00:07:19.907 
非常棒 啓動Xcode

00:07:22.342 --> 00:07:23.644 
選擇app

00:07:24.978 --> 00:07:26.847 
這樣看起來更容易些

00:07:27.447 --> 00:07:28.115 
非常棒

00:07:29.349 --> 00:07:32.052 
現在如果想添加新的app

00:07:32.119 --> 00:07:33.854 
只需進入File New 
Target 接着就有了

00:07:33.921 --> 00:07:35.022 
新的WatchOS窗口

00:07:39.159 --> 00:07:41.395 
那麼 在庫裏就有了應用和框架

00:07:41.461 --> 00:07:43.764 
選擇Framework In 
Library就可以

00:07:44.298 --> 00:07:46.967 
添加Watch框架

00:07:47.034 --> 00:07:48.302 
或是Watch靜態庫

00:07:48.735 --> 00:07:51.538 
現在我來添加
WatchKit app

00:07:51.905 --> 00:07:54.708 
雙擊 加上產品名稱

00:07:56.743 --> 00:08:00.113 
主app總是默認啓動狀態

00:08:00.180 --> 00:08:02.316 
但我還要加入
Notification場景

00:08:02.482 --> 00:08:04.685 
Glance場景 
以及Complication

00:08:04.985 --> 00:08:06.019 
可以加在這裏

00:08:06.620 --> 00:08:08.322 
已經在這款app上加好了

00:08:08.822 --> 00:08:09.756 
按下Cancel

00:08:11.091 --> 00:08:12.793 
看看都有些什麼

00:08:13.994 --> 00:08:16.730 
這就是Watch app
以及WatchKit擴展

00:08:17.331 --> 00:08:20.601 
我剛纔說過Watch app 
包含故事板

00:08:20.667 --> 00:08:23.737 
所有的靜態資源以及資產目錄

00:08:24.004 --> 00:08:26.340 
WatchKit擴展包括所有界面

00:08:26.406 --> 00:08:28.842 
控件和可能會添加的任何其他代碼

00:08:31.845 --> 00:08:33.480 
進入故事板

00:08:37.217 --> 00:08:39.820 
大家都看到我有主界面

00:08:40.020 --> 00:08:45.058 
Glance界面接下來
還有通知的靜態和動態界面

00:08:46.293 --> 00:08:48.529 
進入實用工具檢測器

00:08:49.796 --> 00:08:51.365 
可以看到對象庫發現這裏有許多

00:08:51.565 --> 00:08:55.035 
可以使用的不同對象

00:08:55.169 --> 00:08:57.971 
還有所有的WatchKit界面元素

00:08:59.706 --> 00:09:02.476 
拖拽過一個界面控制器

00:09:04.811 --> 00:09:08.682 
例如 如果我只想製作一個頁面控制器

00:09:09.149 --> 00:09:11.351 
可以在鍵盤上選擇Control

00:09:11.818 --> 00:09:14.021 
再拖拽到新的界面控制器中

00:09:14.288 --> 00:09:15.989 
併爲下一個頁面創建引線

00:09:17.591 --> 00:09:20.294 
現在就可以處理掉這些
如果看下面的內容

00:09:22.429 --> 00:09:25.499 
有一個靜態界面和動態界面

00:09:25.699 --> 00:09:28.235 
因此動態界面實際上是與
Notification

00:09:28.302 --> 00:09:30.204 
Controller類相連接

00:09:30.671 --> 00:09:35.108 
所以當用戶收到通知
先擡起手腕時就會看到

00:09:35.576 --> 00:09:38.679 
Notification
+Controller類 就會調用

00:09:38.946 --> 00:09:41.448 
而且還可以提供非常豐富的UI

00:09:42.583 --> 00:09:46.653 
現在靜態界面通常會被調用

00:09:46.987 --> 00:09:49.356 
例如當用戶錯過了通知

00:09:49.423 --> 00:09:51.825 
想在Notification
Center再看一遍時

00:09:51.892 --> 00:09:54.027 
一般這種時候會看到靜態界面

00:09:56.396 --> 00:09:59.433 
因此 我這有My Category

00:10:00.834 --> 00:10:05.038 
針對不同的分類
我們發送不同的裝載模式

00:10:05.105 --> 00:10:08.242 
我們實際上可以創建
自定義UI和自定義通知

00:10:08.775 --> 00:10:10.277 
來針對不同的分類

00:10:10.544 --> 00:10:13.680 
而這並非一對一的界面

00:10:14.114 --> 00:10:16.383 
而是針對所發出的所有通知的界面

00:10:16.450 --> 00:10:19.520 
實際上可以調整並創建多個界面

00:10:20.754 --> 00:10:22.956 
我們再加一個新的通知控制器

00:10:27.561 --> 00:10:28.395 
放在這裏

00:10:29.196 --> 00:10:32.466 
如果我想的話可以拖拽一個界面控制器

00:10:32.533 --> 00:10:35.169 
接下來
和剛纔一樣點擊Control

00:10:35.536 --> 00:10:37.271 
在創建我新的動態界面

00:10:38.138 --> 00:10:41.441 
還可以進入這裏屬性檢測器

00:10:41.575 --> 00:10:43.677 
選擇Has Dynamic
Interface

00:10:44.044 --> 00:10:46.613 
現在我可以調整分類

00:10:46.680 --> 00:10:48.048 
並創建新的界面

00:10:48.482 --> 00:10:50.384 
然後可能我想...

00:10:50.450 --> 00:10:53.220 
創建新的Notification
Controller類

00:10:53.353 --> 00:10:54.688 
接着在做好連接

00:10:55.889 --> 00:10:57.991 
我們還有模板

00:10:58.292 --> 00:11:02.296 
推送通知裝載模式 .apns文件 

00:11:03.363 --> 00:11:04.398 
如果看這裏

00:11:04.464 --> 00:11:06.834 
看似是我們會有的普通裝載模式

00:11:07.167 --> 00:11:10.571 
其中有提醒 主體 題目 分類

00:11:11.205 --> 00:11:13.740 
最棒的部分是在模擬器中

00:11:13.907 --> 00:11:16.176 
可以使用這些不同的裝載模式文件

00:11:16.610 --> 00:11:18.145 
模擬不同界面

00:11:18.445 --> 00:11:21.849 
如果想要測試所有這些不同的通知

00:11:22.182 --> 00:11:23.584 
我們不必一定在設備上進行

00:11:24.017 --> 00:11:25.853 
可以使用模擬器

00:11:25.919 --> 00:11:29.389 
這些通知裝載模式
快速重複不同的想法

00:11:31.191 --> 00:11:32.793 
我們再回到故事板

00:11:33.393 --> 00:11:35.262 
現在我就想在模擬器中

00:11:35.662 --> 00:11:37.764 
構建 運行並查看主app

00:11:38.999 --> 00:11:40.334 
那我來打開我的計劃

00:11:40.801 --> 00:11:44.738 
我看到我有iOS計劃接下來
是WatchKit app計劃

00:11:45.606 --> 00:11:48.809 
我有兩個模擬器
這是iPhone 6 Plus

00:11:48.876 --> 00:11:49.810 
38毫米的

00:11:50.043 --> 00:11:52.579 
還有iPhone 6 Plus
42毫米的

00:11:52.980 --> 00:11:56.183 
我剛纔說過這實際
是個Watch的全功能模擬器

00:11:56.350 --> 00:11:58.919 
實際上需要和我的
iPhone模擬器相配對

00:12:00.087 --> 00:12:04.458 
我們來選擇 iPhone 6
計劃 構建並運行

00:12:06.460 --> 00:12:09.897 
現在打開了兩個模擬器

00:12:11.131 --> 00:12:15.802 
那麼我預計到主app會啓動

00:12:15.869 --> 00:12:17.771 
我會把它連在調試器上

00:12:18.572 --> 00:12:22.309 
非常棒按下Allow
因爲我確實要允許這麼做

00:12:22.910 --> 00:12:24.678 
現在是在連接調試器

00:12:24.878 --> 00:12:27.681 
這裏出現了一個小東西

00:12:27.748 --> 00:12:31.118 
是說“擴展收到請求 啓動
錶盤組件支持”

00:12:31.652 --> 00:12:34.488 
如果要執行
Complication

00:12:34.555 --> 00:12:35.989 
稍後這就會消失

00:12:37.491 --> 00:12:40.627 
現在來停止這個調試會話

00:12:41.261 --> 00:12:42.529 
返回Watch模擬器

00:12:43.830 --> 00:12:47.401 
現在就是新的模擬器
我有錶盤

00:12:47.701 --> 00:12:50.804 
現在如果我只想調整錶盤

00:12:50.871 --> 00:12:52.573 
可以打開Hardware
Simulate

00:12:52.639 --> 00:12:53.941 
Touch Pressure

00:12:55.042 --> 00:12:58.679 
現在可以模擬強壓接着返回

00:12:59.446 --> 00:13:02.749 
輕壓 接着調整錶盤

00:13:03.750 --> 00:13:06.019 
現在可以自定義模擬器上的時鐘

00:13:06.954 --> 00:13:09.756 
那麼如果在設備上進入這個屏幕

00:13:09.823 --> 00:13:11.158 
可以使用Digital
Crown

00:13:11.225 --> 00:13:12.726 
接着可以輕鬆改變顏色

00:13:13.060 --> 00:13:15.295 
那麼鼠標上
沒有Digital Crown

00:13:15.462 --> 00:13:17.865 
不過幸好我有滾輪

00:13:18.398 --> 00:13:20.968 
還可以使用觸控板
或Magic Mouse

00:13:21.869 --> 00:13:23.637 
我還可以調整顏色像這樣

00:13:23.704 --> 00:13:26.073 
現在就可以模擬
Digital Crown行爲

00:13:26.974 --> 00:13:29.376 
同樣 進入
Complication視圖時

00:13:29.676 --> 00:13:34.948 
手指劃過
就可以啓動Complication

00:13:35.215 --> 00:13:38.752 
這樣如果想在
Complication上重複想法

00:13:38.819 --> 00:13:41.855 
可以在不同錶盤構建新的
Complications

00:13:41.922 --> 00:13:44.658 
我可以像這樣
啓動這些Complication

00:13:45.959 --> 00:13:49.997 
現在 執行
Command-Shift-H

00:13:52.299 --> 00:13:54.968 
返回主頁 再次執行
Command-Shift-H 

00:13:55.669 --> 00:13:58.372 
現在回到了Home屏幕
於是有了Settings app

00:13:58.438 --> 00:14:00.140 
錶盤和已有的app 

00:14:02.042 --> 00:14:04.278 
然後啓動app也正常看到了

00:14:04.678 --> 00:14:05.579 
再回到主頁

00:14:09.149 --> 00:14:12.186 
現在 正如我所講這些模擬器實現配對

00:14:12.252 --> 00:14:14.421 
我有兩款不同的模擬器可供選擇

00:14:14.821 --> 00:14:17.257 
進入計劃看到兩款模擬器

00:14:17.691 --> 00:14:19.259 
可是如果是iPhone 5

00:14:19.693 --> 00:14:22.296 
42毫米模擬器會怎樣呢

00:14:22.796 --> 00:14:25.532 
我來做個新模擬器再實現配對

00:14:26.834 --> 00:14:31.538 
打開Xcode 
選擇Xcode 然後是Device

00:14:32.406 --> 00:14:35.509 
現在在側邊欄我有所有不同的模擬器

00:14:35.776 --> 00:14:39.413 
如果來到底部左側可以添加模擬器

00:14:40.447 --> 00:14:41.915 
可以稱之爲iPhone 5

00:14:43.717 --> 00:14:44.985 
改變設備類型

00:14:45.853 --> 00:14:47.254 
繼續保持iOS版本

00:14:47.921 --> 00:14:50.757 
我將會把配對的手錶改爲42毫米

00:14:51.158 --> 00:14:52.726 
很容易就可以創建

00:14:53.260 --> 00:14:57.197 
現在如果返回計劃這就是新的模擬器

00:14:59.199 --> 00:15:01.835 
那麼回到故事板

00:15:05.572 --> 00:15:08.642 
正如我說講有這些計劃

00:15:08.709 --> 00:15:11.278 
可供選擇這有個
Notification計劃

00:15:11.345 --> 00:15:13.780 
還有Glance計劃
以及Complication

00:15:13.847 --> 00:15:15.282 
那麼我可以選擇這些不同的計劃

00:15:15.682 --> 00:15:17.851 
並快速調試app的不同部件

00:15:18.619 --> 00:15:20.721 
例如 現在我想測試

00:15:20.787 --> 00:15:22.389 
Notification計劃

00:15:22.456 --> 00:15:24.391 
想看看在模擬器中是什麼樣子

00:15:24.858 --> 00:15:26.460 
我們已經講過了APNS文件

00:15:26.527 --> 00:15:28.529 
我想看看是否正確顯示

00:15:30.597 --> 00:15:33.500 
那就在動態界面添加標籤

00:15:34.801 --> 00:15:35.736 
拖動過來

00:15:36.436 --> 00:15:38.272 
直接改成Dynamic

00:15:40.641 --> 00:15:42.910 
現在我選擇了
Notification計劃

00:15:43.710 --> 00:15:46.246 
準備在模擬器上構建並運行

00:15:50.717 --> 00:15:53.554 
我希望在Watch
模擬器上看到這種情況

00:15:54.655 --> 00:15:57.357 
會出現通知接着是Dynamic

00:15:57.791 --> 00:15:59.459 
現在需要介紹的就是這些內容

00:16:04.064 --> 00:16:07.000 
這裏就是通知
上面寫着Test Message

00:16:07.634 --> 00:16:10.237 
我準備打開控制檯

00:16:11.004 --> 00:16:14.908 
上面寫着“用時過長
無法顯示自定義通知返回靜態”

00:16:15.742 --> 00:16:19.112 
好的再來看通知控制器

00:16:19.179 --> 00:16:20.647 
看看爲什麼會出現這種情況

00:16:21.481 --> 00:16:23.684 
這就是通知控制器的代碼

00:16:24.785 --> 00:16:27.554 
檢查一下

00:16:27.955 --> 00:16:29.923 
Did Receive
Remote

00:16:29.990 --> 00:16:33.193 
Notification有標註提示
我應該解決標註問題

00:16:37.364 --> 00:16:38.799 
現在再來構建和運行

00:16:40.734 --> 00:16:43.971 
希望現在經過取消舊的通知

00:16:45.072 --> 00:16:47.674 
就能看到新的正如我所願
上面寫着Dynamic

00:16:48.609 --> 00:16:52.646 
在設備上 如果是
這樣的情形並獲得通知

00:16:52.713 --> 00:16:54.681 
我可以選擇App圖標或按鈕

00:16:54.748 --> 00:16:56.149 
我就會回到這款app上

00:16:56.483 --> 00:16:59.019 
在模擬器中可以同樣這麼做

00:16:59.086 --> 00:17:01.321 
正如我所願回到了這款app中

00:17:08.362 --> 00:17:13.599 
現在可以完善代碼 在通知中添加

00:17:13.834 --> 00:17:16.270 
不錯的UI故事我還想測試

00:17:16.336 --> 00:17:18.137 
自己的靜態界面

00:17:18.204 --> 00:17:20.607 
想實現這些的唯一辦法是
需要在Did Receive

00:17:20.674 --> 00:17:23.844 
Remote
Notification標註提示

00:17:23.911 --> 00:17:26.180 
以獲得靜態界面
而我在重複編碼時

00:17:26.613 --> 00:17:28.214 
並不希望這樣做

00:17:28.882 --> 00:17:30.717 
那麼我可以有兩種辦法這麼做

00:17:31.018 --> 00:17:34.188 
第一 我可以將完成處理程序的自定義

00:17:34.421 --> 00:17:38.492 
改爲調用Default
或者實際上我可以進入計劃

00:17:39.660 --> 00:17:44.831 
可以編輯計劃
現在我可以選擇Watch界面

00:17:44.898 --> 00:17:48.268 
就可以把它改成靜態通知

00:17:48.335 --> 00:17:50.971 
而不是動態的大家可以看到

00:17:51.038 --> 00:17:52.773 
這裏是推送通知裝載模式

00:17:53.173 --> 00:17:55.409 
如果我有多個裝載模式這裏會有顯示

00:17:55.642 --> 00:17:59.079 
我可以快速調整我準備測試的裝載模式

00:18:00.981 --> 00:18:04.685 
我的目的是想保持靜態計劃

00:18:04.818 --> 00:18:07.821 
一陣子 那我就準備複製這個計劃

00:18:08.956 --> 00:18:11.458 
我們可以稱之爲Static
 Notification

00:18:14.461 --> 00:18:15.629 
接着打開Run

00:18:16.330 --> 00:18:18.165 
再來把Watch界面改成靜態

00:18:19.132 --> 00:18:20.367 
按下Close

00:18:21.134 --> 00:18:22.903 
現在靜態通知也有了

00:18:22.970 --> 00:18:25.072 
以及正常的動態通知

00:18:27.307 --> 00:18:29.309 
非常好 這就是模板項目的

00:18:29.376 --> 00:18:33.247 
開始部分但需要理解部分上下文

00:18:33.313 --> 00:18:35.516 
關於app生命週期
在watchOS上如何運行

00:18:43.357 --> 00:18:46.059 
來介紹一下watchOS app的
生命週期

00:18:47.995 --> 00:18:52.232 
我們來看Watch app界面
但是並沒有看到它的生命週期

00:18:52.666 --> 00:18:55.669 
很重要的一點 是需要
瞭解什麼時候擴展以及界面控制

00:18:56.069 --> 00:18:57.671 
器何時需要調用安裝和拆解

00:18:58.071 --> 00:19:01.141 
那麼需要在正確的時間配置UI元素

00:19:01.241 --> 00:19:04.444 
並進行清理操作或完成任務

00:19:04.545 --> 00:19:06.713 
這時佩戴者會停止
與Watch app進行交互

00:19:07.581 --> 00:19:08.815 
啓動Watch app時

00:19:08.882 --> 00:19:11.952 
擴展委託可以啓動get
 Application Did

00:19:12.019 --> 00:19:13.520 
Finish Launching

00:19:13.921 --> 00:19:17.591 
擴展委託和在iOS上的
UI應用委託類似

00:19:18.125 --> 00:19:21.128 
這樣 你也會收到
Did Become Active

00:19:21.195 --> 00:19:23.597 
回調 以便升級模型數據

00:19:24.865 --> 00:19:28.035 
接下來Watch app捆綁包的
故事板會裝載到

00:19:28.435 --> 00:19:30.571 
Apple Watch 初始
界面控制器即可生成

00:19:31.371 --> 00:19:32.906 
UI一旦生成

00:19:33.173 --> 00:19:36.276 
界面控制器就會收到Awake
 With Context

00:19:36.777 --> 00:19:39.079 
調用 使其有機會啓動狀態變量

00:19:39.446 --> 00:19:42.082 
並運用初始值配置UI元素

00:19:43.150 --> 00:19:45.586 
Watch app的UI正在屏幕上

00:19:45.652 --> 00:19:49.122 
顯示的過程中
將調用Will Activate

00:19:49.389 --> 00:19:51.859 
允許執行緊急任務

00:19:51.925 --> 00:19:53.894 
或最終的UI元素配置

00:19:54.695 --> 00:19:57.064 
現在 如果佩戴者與UI元素交互

00:19:57.231 --> 00:20:00.634 
WatchKit調用在界面
控制器上定義的動作方法

00:20:01.401 --> 00:20:04.538 
可以通過這些動作方法執行代碼

00:20:04.972 --> 00:20:06.340 
並更新app的UI

00:20:06.940 --> 00:20:09.209 
要記住交互時間很短

00:20:09.810 --> 00:20:13.247 
在iOS上　我們以往認爲
在用戶和app交互方面

00:20:13.313 --> 00:20:16.517 
都是按照分鐘計算
但是在watchOS上

00:20:16.650 --> 00:20:18.552 
我們是在以秒計算考慮問題

00:20:19.386 --> 00:20:22.623 
實際上要在佩戴者停止與app交互後

00:20:22.689 --> 00:20:24.992 
點擊
Did Deactivate調用

00:20:26.527 --> 00:20:30.063 
調用這種方法後在未來的某個點

00:20:30.130 --> 00:20:34.434 
界面控制器將會被釋放

00:20:36.503 --> 00:20:38.172 
現在擴展委託

00:20:38.338 --> 00:20:40.741 
在佩戴者完全停止和手錶交互後

00:20:40.841 --> 00:20:43.210 
例如可能會返回Home屏幕

00:20:43.644 --> 00:20:45.846 
你會收到
Application Will

00:20:45.913 --> 00:20:47.314 
Resign Active回調

00:20:47.514 --> 00:20:52.319 
藉此機會可以保存任何
app相關狀態信息

00:20:52.452 --> 00:20:53.854 
並關閉任何運行的任務

00:20:56.723 --> 00:20:59.293 
我們瞭解WatchKit
擴展的 生命週期

00:20:59.560 --> 00:21:01.061 
但是要談談另一個重要問題

00:21:01.128 --> 00:21:02.863 
是關於Watch app的佈局

00:21:05.299 --> 00:21:08.135 
watchOS中的WatchKit

00:21:08.702 --> 00:21:11.271 
模型不同於UIKit

00:21:11.338 --> 00:21:13.874 
及AppKit 因爲它是流式佈局

00:21:14.474 --> 00:21:18.378 
因此所有的元素都是連續出現

00:21:19.346 --> 00:21:20.547 
我們的UI主要是在...

00:21:20.614 --> 00:21:22.549 
Interface 
Builder中創建

00:21:23.584 --> 00:21:25.619 
因此具備界面控制器時

00:21:25.686 --> 00:21:28.689 
可以使用對象庫並拖拽圖像

00:21:29.022 --> 00:21:32.993 
或拖拽按鈕當我們需要...

00:21:33.427 --> 00:21:36.997 align:start position:10%
更爲相關聯的佈局時

00:21:37.497 --> 00:21:39.433 
我們會使用WK界面組

00:21:39.533 --> 00:21:42.669 
用於管理不同項的佈局

00:21:43.370 --> 00:21:46.073 
例如 我們可以在組中添加圖像和標籤

00:21:47.908 --> 00:21:50.377 
因此編程模型非常值得注意

00:21:50.878 --> 00:21:53.714 
不要使用WatchKit編寫
對象生成代碼

00:21:54.781 --> 00:21:57.050 
在Interface 
Builder有微調控制

00:21:57.851 --> 00:22:02.789 
處理位置和大小布局分層和動畫

00:22:05.459 --> 00:22:07.594 
我非常鼓勵大家參加週四的...

00:22:07.661 --> 00:22:11.265 
《WatchKit佈局和動畫技術》
講座

00:22:11.431 --> 00:22:15.802 
是有關如何爲用戶生成豐富UI的內容

00:22:16.803 --> 00:22:19.406 
我在考慮
怎樣最好地製作Watch app

00:22:19.473 --> 00:22:23.143 
回想一下 我的iOS app
是個簡單的UI表格視圖

00:22:24.077 --> 00:22:26.947 
我的第一個想法是羅列出

00:22:27.014 --> 00:22:29.683 
我需要呼叫的所有人
與iOS app非常類似

00:22:30.317 --> 00:22:31.919 
當我開始這麼考慮時

00:22:32.653 --> 00:22:35.689 
我意識到Watch app
並不需要所有這些信息

00:22:36.390 --> 00:22:38.592 
其實 我只需要了解下一個該聯繫誰

00:22:38.659 --> 00:22:41.128 
而不是要了解所有需要聯繫的人

00:22:41.562 --> 00:22:43.697 
所以UI可以是這個樣子

00:22:44.498 --> 00:22:46.733 
非常棒 現在我知道需要怎麼做了

00:22:47.401 --> 00:22:49.503 
我想開始生成UI

00:22:49.803 --> 00:22:53.106 
接下來講講怎樣爲主app 

00:22:53.173 --> 00:22:55.909 
Glance和
Notification生成UI

00:22:56.410 --> 00:22:58.779 
我們跳到Xcode來看我們有什麼

00:23:00.414 --> 00:23:02.115 
我們瞭解生命週期是什麼

00:23:02.182 --> 00:23:04.351 
一般而言佈局代表什麼

00:23:04.551 --> 00:23:05.919 
那我們打開故事板

00:23:07.387 --> 00:23:10.591 
我想在界面控制器添加圖像

00:23:10.958 --> 00:23:12.759 
先在對象庫裏選擇圖像

00:23:13.560 --> 00:23:16.697 
然後快速拖拽一個圖像過來

00:23:17.698 --> 00:23:19.466 
我還要添加一個標籤

00:23:19.967 --> 00:23:23.504 
那麼去找到標籤拖拽過來

00:23:24.304 --> 00:23:26.240 
如果發現出現了一條藍線

00:23:26.306 --> 00:23:30.110 
那麼在流式佈局中可以把標籤

00:23:30.210 --> 00:23:32.045 
放在圖像的前或後

00:23:32.513 --> 00:23:35.048 
那就把它放在後面

00:23:35.249 --> 00:23:40.153 
舉例來說 如果我想把
它們水平方向前後放置 

00:23:41.121 --> 00:23:43.857 
好吧 在Interface 
Builder中 其實無法實現

00:23:43.924 --> 00:23:45.959 
沒有藍線出現 幫不了我

00:23:46.827 --> 00:23:49.863 
我用WK界面組來實現

00:23:50.998 --> 00:23:55.402 
把這個拖拽過來重新調整圖像大小

00:23:56.803 --> 00:23:58.705 
把標籤加入組中

00:23:59.439 --> 00:24:02.109 
把圖像就加在標籤旁邊

00:24:02.242 --> 00:24:04.278 
這樣就可以在水平方向排布

00:24:05.312 --> 00:24:08.815 
現在把標籤和圖像取出

00:24:09.483 --> 00:24:10.551 
把組刪除

00:24:11.985 --> 00:24:13.687 
接着在屬性檢測器中

00:24:14.221 --> 00:24:15.455 
已經在資產目錄裏了

00:24:15.522 --> 00:24:17.024 
我有個圖像是朋友伊桑的

00:24:17.791 --> 00:24:20.961 
就以這張圖像作爲參考

00:24:21.328 --> 00:24:22.696 
伊桑好像有點走形

00:24:22.863 --> 00:24:25.165 
讓他看起來更開心點

00:24:26.600 --> 00:24:27.434 
就這樣

00:24:27.501 --> 00:24:28.368 
他開心多了

00:24:28.802 --> 00:24:32.139 
還要把標籤文字改成伊桑

00:24:33.106 --> 00:24:35.976 
現在佈局位置確定是左對齊

00:24:36.443 --> 00:24:39.112 
我其實是想讓它在屏幕居中

00:24:39.713 --> 00:24:41.815 
如果我選定了圖像

00:24:42.115 --> 00:24:43.684 
那麼打開屬性檢測器中

00:24:44.251 --> 00:24:46.987 
可以將位置調到中心

00:24:47.621 --> 00:24:51.024 
我還可以垂直方向調整位置

00:24:51.091 --> 00:24:53.327 
可以調大小改變視圖

00:24:53.393 --> 00:24:56.363 
針對這個圖像標籤也一樣

00:24:56.430 --> 00:24:58.365 
我只想它放在中間位置

00:24:59.867 --> 00:25:01.802 
那就來看Glance

00:25:02.002 --> 00:25:05.939 
如果仔細觀察會發現
Glance控制器不同於主app

00:25:06.206 --> 00:25:07.241 
有兩個組

00:25:07.674 --> 00:25:09.710 
是因爲Glance實際上是模板製成

00:25:10.277 --> 00:25:12.412 
我有上模板和下模板

00:25:12.746 --> 00:25:16.550 
如果選擇上模板的屬性檢測器

00:25:16.750 --> 00:25:18.886 
有一系列選項可供選擇

00:25:19.820 --> 00:25:23.257 
在這個具體案例中我們使用大號的文字

00:25:24.024 --> 00:25:25.893 
改成Call

00:25:28.428 --> 00:25:31.632 
接着在下模板中添加圖像

00:25:33.400 --> 00:25:35.102 
和剛纔做的一樣

00:25:35.169 --> 00:25:37.838 
只需要把圖像變爲伊桑即可

00:25:38.739 --> 00:25:41.742 
當我看着Glance時感覺app

00:25:41.808 --> 00:25:44.111 
是要對我發火
因爲調用伊桑這裏我做的極差

00:25:44.878 --> 00:25:46.380 
那麼app會幫我做

00:25:49.850 --> 00:25:54.354 
在通知界面也是同樣的做法

00:25:55.189 --> 00:25:58.992 
大部分情況下我可以找到新界面

00:25:59.459 --> 00:26:04.031 
現在通過選擇計劃來構建並運行界面

00:26:05.465 --> 00:26:07.668 
我們來構建和運行Watch模擬器

00:26:15.642 --> 00:26:18.812 
希望我的新界面會出現

00:26:20.848 --> 00:26:21.648 
好的 非常棒

00:26:21.715 --> 00:26:23.650 
好 在這裏 我再連上調試器

00:26:24.451 --> 00:26:27.888 
停止這個會話看看iOS模擬器

00:26:28.255 --> 00:26:30.524 
因爲 重要的是
需要注意這些是配對設備

00:26:32.059 --> 00:26:34.428 
那麼向上滾動向右搖

00:26:35.028 --> 00:26:37.531 
看到iOS app已經安裝到位

00:26:37.731 --> 00:26:40.501 
和設備上一樣
app只有通過這一種辦法

00:26:40.701 --> 00:26:43.637 
可以裝在用戶的Watch上

00:26:43.704 --> 00:26:45.105 
也就是裝在iOS設備上

00:26:45.706 --> 00:26:47.107 
那麼就是現在這樣

00:26:47.641 --> 00:26:51.044 
我們來選擇Apple
Watch app在模擬器裏

00:26:51.345 --> 00:26:53.080 
可以調整
Complication

00:26:53.714 --> 00:26:56.016 
那麼Call Me Lately
已經啓動了

00:26:57.384 --> 00:27:02.022 
我還可以卸載app再重新安裝

00:27:02.289 --> 00:27:05.592 
還可以關閉Glance再重新啓動

00:27:06.693 --> 00:27:08.195 
如果我想查看Glance

00:27:08.262 --> 00:27:11.832 
可以打開模擬器返回錶盤

00:27:12.266 --> 00:27:16.637 
就像在設備上一樣
劃動一下 接着Glance

00:27:17.037 --> 00:27:18.105 
那我們再重新啓動

00:27:18.939 --> 00:27:21.308 
哎呀 不好意思

00:27:22.309 --> 00:27:24.111 
我以爲會出現新的UI

00:27:24.444 --> 00:27:26.947 
結果沒成功不過我們還是繼續

00:27:28.782 --> 00:27:32.186 
我找到了新界面不過我需要了解

00:27:32.252 --> 00:27:34.254 
下一個該聯繫誰還需要了解

00:27:34.421 --> 00:27:36.056 
怎樣更新app實現這一點

00:27:37.457 --> 00:27:38.625 
回到幻燈片

00:27:42.496 --> 00:27:45.065 
iOS app主要是
通過NSURLSession

00:27:45.132 --> 00:27:48.268 
與服務器溝通獲取親愛的朋友們的名單

00:27:48.669 --> 00:27:51.138 
watchOS 2很出色的
一點是我可以使用

00:27:51.205 --> 00:27:54.208 
許多相同的NSURLSession
與服務器對話

00:27:55.275 --> 00:27:57.144 
不過 有時候當我需要確認

00:27:57.211 --> 00:28:00.347 
iOS app和watchOS
app 彼此在接觸

00:28:00.814 --> 00:28:03.317 
可以使用Watch-
Connectivity 來完成

00:28:03.584 --> 00:28:05.586 
我們花些時間

00:28:05.652 --> 00:28:07.788 
介紹一下新
WatchConnectivity

00:28:07.855 --> 00:28:10.390 
框架然後來看怎樣在
Call Me Lately中使用

00:28:11.792 --> 00:28:13.694 
那麼
WatchConnectivity

00:28:13.760 --> 00:28:15.662 
是iOS和watchOS

00:28:16.563 --> 00:28:19.333 
之間交流的四個核心用途框架

00:28:20.000 --> 00:28:22.536 
主要注意的是
WatchConnectivity 

00:28:22.603 --> 00:28:27.541 
在iOS和watchOS之中都有
在兩個平臺上均可使用API

00:28:27.941 --> 00:28:30.644 
不僅是Watch app
在與iOS app對話

00:28:30.944 --> 00:28:32.746 
有時還需要iOS app

00:28:32.813 --> 00:28:33.981 
來更新Watch app

00:28:34.982 --> 00:28:37.184 
第一個用途是允許iOS app

00:28:37.417 --> 00:28:39.720 
更新Watch app的應用上下文

00:28:39.786 --> 00:28:40.654 
反之亦然

00:28:41.255 --> 00:28:43.123 
這也許不是緊急的數據 

00:28:43.190 --> 00:28:45.158 
但是需要向用戶更新這些內容

00:28:45.792 --> 00:28:47.361 
第二個是Send Message

00:28:47.494 --> 00:28:49.696 
這是需要在iOS app
和Watch app之間

00:28:49.763 --> 00:28:51.465 
來回傳送的

00:28:51.798 --> 00:28:53.834 
小量信息和Watch app

00:28:54.768 --> 00:28:57.104 
第三個是簡易傳送文件API

00:28:57.871 --> 00:29:00.541 
最後是傳送用戶信息
API 可以和更多

00:29:00.607 --> 00:29:02.242 
Complications相連接

00:29:03.777 --> 00:29:06.280 
還有很多內容可以完成

00:29:06.346 --> 00:29:07.314 
我鼓勵大家和...

00:29:07.381 --> 00:29:10.617 
WatchConnectivity
對話發現更多信息

00:29:11.251 --> 00:29:14.888 
來看Call Me Lately 
來看怎麼充分利用

00:29:14.955 --> 00:29:16.657 
WatchConnectivity

00:29:17.090 --> 00:29:19.693 
我想在app上添加
WatchConnectivity 

00:29:20.360 --> 00:29:25.666 
還要進行調試最後我想
用Instrument進行調試

00:29:26.166 --> 00:29:28.635 
談到Instrument
有人可能還不知道

00:29:28.936 --> 00:29:31.371 
Instrument是非常強大的
調試工具

00:29:31.438 --> 00:29:33.407 
可以檢測app的性能

00:29:34.675 --> 00:29:36.610 
於是我獲得調試模板

00:29:36.910 --> 00:29:38.812 
先要啓動Instrument

00:29:39.313 --> 00:29:44.117 
然後可以從時間事件查看器
泄露 分配中進行選擇

00:29:45.819 --> 00:29:48.856 
然後大家會看到
如果我選擇時間事件查看器

00:29:48.922 --> 00:29:50.390 
例如 我要看這個視圖

00:29:50.457 --> 00:29:52.092 
可以輕鬆調試app

00:29:53.794 --> 00:29:55.262 
這一點很重要

00:29:55.762 --> 00:29:57.798 
Watch上 互動時間非常短

00:29:57.865 --> 00:30:00.133 
也就是說性能非常關鍵

00:30:00.734 --> 00:30:02.970 
我們希望使用
Instrument來確保

00:30:03.036 --> 00:30:06.740 
app在提供良好的用戶體驗

00:30:06.974 --> 00:30:09.376 
我們希望在
設備和模擬器上都進行檢測

00:30:10.143 --> 00:30:12.913 
現在我們瞭解了一些
WatchConnectivity

00:30:12.980 --> 00:30:15.115 
和Instrument
我們再來看演示

00:30:15.182 --> 00:30:16.483 
在app中

00:30:16.850 --> 00:30:20.821 
我可能有某種算法稱

00:30:20.921 --> 00:30:22.823 
下一個該聯繫這個人了

00:30:23.056 --> 00:30:25.993 
所以當得到這個數據時

00:30:26.059 --> 00:30:31.498 
我需要更新iOS app
瞭解這人是誰查看Watch 

00:30:31.565 --> 00:30:32.999 
就知道接下來該聯繫他了

00:30:33.500 --> 00:30:36.003 
也許我需要初始啓動app

00:30:36.069 --> 00:30:38.305 
只爲在iOS app上更新應用

00:30:38.572 --> 00:30:41.375 
上下文看看會出現什麼

00:30:42.576 --> 00:30:44.811 
我可能希望在擴展委託中

00:30:44.878 --> 00:30:48.282 
在Application Did
Become Active完成這些

00:30:49.483 --> 00:30:51.451 
我可以只在這裏放置代碼

00:30:51.518 --> 00:30:53.887 
我先來導入
WatchConnectivity

00:30:59.526 --> 00:31:02.429 
現在在Application
Did Become Active

00:31:02.796 --> 00:31:03.931 
我想添加部分代碼

00:31:04.264 --> 00:31:07.034 
生成上下文即名爲伊桑的字符串

00:31:07.267 --> 00:31:10.404 
接着在WC Session 這是
WatchConnectivity

00:31:10.470 --> 00:31:12.239 
我有默認的會話

00:31:12.306 --> 00:31:13.607 
並且調用方法
Update

00:31:13.674 --> 00:31:14.908 
Application
Context

00:31:14.975 --> 00:31:17.511 
連同主要WCApplication
Context

00:31:17.945 --> 00:31:19.646 
我將只發送上下文部分

00:31:19.980 --> 00:31:23.016 
結果卻更糟糕現在就來打印出我的錯誤

00:31:25.485 --> 00:31:26.453 
來看這個工作

00:31:27.788 --> 00:31:28.856 
我們來構建和運行

00:31:34.995 --> 00:31:36.296 
選擇Watch app...

00:31:37.798 --> 00:31:38.465 
app啓動

00:31:41.368 --> 00:31:45.973 
但我看到WC錯誤提示7004

00:31:46.440 --> 00:31:49.009 
根據以往的經驗我可以判斷

00:31:49.076 --> 00:31:50.811 
我的會話沒有激活

00:31:51.411 --> 00:31:52.646 
來看看代碼

00:31:53.947 --> 00:31:56.149 
我還沒有設置委託

00:31:56.383 --> 00:31:58.585 
我想設置WC會話委託然後在更新應用

00:32:01.121 --> 00:32:05.759 
上下文代碼之後或之前

00:32:07.561 --> 00:32:09.897 
我只想自己設置委託接着還要激活

00:32:10.330 --> 00:32:11.932 
會話部分

00:32:12.065 --> 00:32:13.667 
需要注意的是在激活會話前

00:32:13.734 --> 00:32:19.006 
需要設置委託因爲在激活會話時

00:32:19.273 --> 00:32:20.574 
可能有信息在等着

00:32:20.974 --> 00:32:23.944 
所以你需要收到適當的委託回調

00:32:25.045 --> 00:32:26.680 
我們現在再來構建和運行

00:32:30.150 --> 00:32:33.921 
需要確定錯誤代碼已經不存在

00:32:41.795 --> 00:32:42.563 
好了 非常棒

00:32:42.729 --> 00:32:44.064 
現在沒有錯誤了

00:32:44.531 --> 00:32:46.867 
這就是說正在將應用上下文

00:32:46.934 --> 00:32:49.002 
妥善發送至iOS app

00:32:49.303 --> 00:32:51.939 
但是我需要了解
iOS app確實收到了

00:32:52.439 --> 00:32:54.508 
所以要打開Scheme來查看

00:32:55.509 --> 00:32:56.777 
並選擇iOS計劃我會選擇

00:32:57.845 --> 00:33:02.382 
與Watch模擬器配對的相同模擬器

00:33:02.516 --> 00:33:04.885 
現在來選擇iPhone 6模擬器

00:33:05.452 --> 00:33:09.289 
如果點擊Control
再按下Build和Run

00:33:09.356 --> 00:33:10.924 
不必構建即可運行

00:33:11.191 --> 00:33:14.528 
這樣的話 如果app確實很大

00:33:14.595 --> 00:33:18.498 
我就不必等着它
一直編譯並安裝app等等

00:33:18.565 --> 00:33:22.202 
我們按下Control
然後無需構建直接運行

00:33:24.204 --> 00:33:27.174 
看似app啓動了在iOS app

00:33:27.241 --> 00:33:29.076 
點擊了app委託

00:33:29.276 --> 00:33:30.944 
點擊委託回調
Did Receive

00:33:31.011 --> 00:33:32.813 
Application
Context

00:33:33.080 --> 00:33:36.316 
然後可以在iOS app上更新UI

00:33:37.751 --> 00:33:38.986 
我們繼續

00:33:40.787 --> 00:33:44.558 
現在如果我在Watch
模擬器上我們返回主頁

00:33:46.093 --> 00:33:49.796 
調試對話還在iOS app中繼續

00:33:50.130 --> 00:33:53.433 
還有Watch app
激活狀態 不好意思

00:33:53.600 --> 00:33:56.737 
當它啓動時 將會更新應用上下文

00:33:58.105 --> 00:34:00.374 
可以在iOS app再次點擊

00:34:00.440 --> 00:34:01.775 
並點擊委託回調

00:34:02.342 --> 00:34:05.179 
這非常棒因爲現在可以同時

00:34:05.245 --> 00:34:07.314 
調試兩個模擬器

00:34:07.381 --> 00:34:09.183 
使用
WatchConnectivity

00:34:09.248 --> 00:34:10.050 
這一點非常棒

00:34:10.117 --> 00:34:12.553 
因此你必須確認所有的調用

00:34:12.652 --> 00:34:16.556 
都是按照在watchOS和iOS中
都需要的順序進行

00:34:21.228 --> 00:34:21.895 
謝謝大家

00:34:24.630 --> 00:34:27.201 
現在會話部分告一段落我想快速

00:34:27.467 --> 00:34:28.869 
調試一下Instrument

00:34:30.771 --> 00:34:32.773 
先來點擊Product
Profile 

00:34:33.607 --> 00:34:36.577 
會啓動Instrument
希望會出現模板

00:34:38.045 --> 00:34:39.513 
我的模板選擇

00:34:40.147 --> 00:34:41.748 
來看一下 好的

00:34:41.882 --> 00:34:43.483 
找到了時間事件查看器

00:34:44.117 --> 00:34:45.219 
就選擇這個

00:34:46.018 --> 00:34:49.690 
接下來不是iOS模擬器

00:34:49.989 --> 00:34:52.458 
我實際是想調試擴展

00:34:53.293 --> 00:34:54.328 
選擇這裏

00:34:54.661 --> 00:34:55.762 
可以按下Record

00:34:56.663 --> 00:34:58.498 
看似我點擊錯誤

00:34:58.565 --> 00:35:02.002 
打開Watch模擬器 把它放在這裏

00:35:03.370 --> 00:35:04.338 
按下Record

00:35:04.671 --> 00:35:07.341 
連上了現在可以調試app

00:35:08.442 --> 00:35:12.412 
在調用樹上還可以看到示例列表

00:35:12.479 --> 00:35:15.349 
和iOS app一樣
可以做同樣的事情

00:35:15.582 --> 00:35:17.251 
可以看到大部分代碼都在運行

00:35:17.317 --> 00:35:19.720 
在主線程這裏非常棒

00:35:20.187 --> 00:35:22.422 
接着可以返回調用樹

00:35:22.856 --> 00:35:26.393 
也就是說使用Instrument

00:35:26.593 --> 00:35:27.694 
可以輕鬆調試

00:35:28.729 --> 00:35:30.063 
停下這一段會話

00:35:32.666 --> 00:35:34.334 
現在我編寫好一個app

00:35:34.401 --> 00:35:37.137 
基本上是有着很簡單的界面

00:35:37.204 --> 00:35:38.705 
用到了
WatchConnectivity

00:35:38.772 --> 00:35:40.707 
並且用Instrument
調試了app

00:35:41.041 --> 00:35:43.143 
現在可以和設計師聊聊了

00:35:43.210 --> 00:35:44.444 
可以真正進行完善

00:35:45.779 --> 00:35:47.948 
我們來談談可以做些什麼

00:35:48.749 --> 00:35:51.752 
那麼我們在現有iPhone 
app上添加了Watch app

00:35:52.786 --> 00:35:54.955 
生成了app和Glance界面

00:35:55.923 --> 00:35:57.925 
用到了
WatchConnectivity

00:35:58.492 --> 00:36:01.762 
我們同時調試了
iOS和watchOS app

00:36:02.829 --> 00:36:04.731 
還使用Instrument
調試了app

00:36:07.234 --> 00:36:10.304 
還有幾個問題
需要大家運用WatchKit

00:36:10.838 --> 00:36:14.908 
另外還有很多
其他的watchOS 2功能 

00:36:14.975 --> 00:36:16.476 
令我非常興奮

00:36:16.977 --> 00:36:19.379 
正如我提到的
有Complication

00:36:19.746 --> 00:36:22.182 
昨天在專題講座中大家可能也見過

00:36:22.382 --> 00:36:24.017 
甚至可以實現Time Travel

00:36:24.084 --> 00:36:28.422 
我覺得不遠的將來就可以
大家就像是在來回往復

00:36:28.488 --> 00:36:29.690 
非常神奇 太酷了

00:36:29.957 --> 00:36:32.659 
大家還可以使用
Digital Crown

00:36:32.726 --> 00:36:34.828 
因此可以通過
Digital Crown

00:36:34.895 --> 00:36:37.364 
爲用戶創建非常直觀的體驗

00:36:38.632 --> 00:36:41.735 
還可以有簡易動畫來生成

00:36:42.035 --> 00:36:44.705 
真正的響應式app非常漂亮有趣

00:36:46.006 --> 00:36:47.708 
還可以使用心率傳感器

00:36:47.774 --> 00:36:50.410 
那麼如果在製作 Workout
app 或其他健身 app

00:36:50.611 --> 00:36:52.613 
可以通過HealthKit 
獲取數據

00:36:52.980 --> 00:36:56.750 
並以此爲客戶提供更好的體驗

00:36:57.784 --> 00:37:00.420 
還可以運用交互式
虛擬觸覺實現更棒的體驗

00:37:00.854 --> 00:37:04.224 
輕觸用戶並提供部分上下文

00:37:04.291 --> 00:37:06.994 
和在app中的做法一樣

00:37:08.262 --> 00:37:13.600 
還有媒體播放就和昨天在
專題講座中看到的一樣

00:37:16.436 --> 00:37:18.705 
大家也可以有音頻播放

00:37:18.772 --> 00:37:20.474 
可以在Watch上使用揚聲器

00:37:20.674 --> 00:37:22.776 
或是用戶可以配上藍牙耳機

00:37:23.043 --> 00:37:24.745 
接着還可以有路由

00:37:25.913 --> 00:37:28.782 
還可以錄製音頻首次實現

00:37:28.849 --> 00:37:31.919 
可以使用Watch本身的 麥克風

00:37:32.286 --> 00:37:33.654 
並提供絕妙體驗

00:37:35.455 --> 00:37:37.491 
現在來看 Keychain

00:37:37.558 --> 00:37:40.427 
這樣可以爲用戶實現非常安全的體驗

00:37:42.462 --> 00:37:46.967 
複習一下
我們可以探討app的架構

00:37:47.267 --> 00:37:49.903 
增添了Watch app

00:37:50.604 --> 00:37:52.406 
談到了app生命週期

00:37:53.006 --> 00:37:56.109 
我們用到了不同界面元素 製作app

00:37:56.543 --> 00:37:58.445 
和Glance 還談到了

00:37:58.512 --> 00:38:00.080 
通知界面以及怎樣輕鬆重複

00:38:00.314 --> 00:38:05.652 
不同的通知 並使用
不同的類別和不同的裝載模式

00:38:07.287 --> 00:38:09.857 
我們可以在新的模擬器中構建並運行

00:38:10.424 --> 00:38:11.692 
還調試了app

00:38:12.926 --> 00:38:15.863 
我們用到了不同的watchOS能力

00:38:17.464 --> 00:38:19.566 
網上還有部分更棒的資料

00:38:19.633 --> 00:38:22.135 
《watchOS 2轉換指南》
就非常不錯

00:38:22.202 --> 00:38:24.271 
我很希望大家都能看看

00:38:24.338 --> 00:38:25.639 
還有些不錯的技術支持

00:38:26.073 --> 00:38:28.742 
可以去論壇看看有些示例代碼

00:38:28.909 --> 00:38:31.645 
如果有一般性問題
可以聯繫傑克·貝倫斯

00:38:31.712 --> 00:38:33.413 
他是watchOS框架的開發顧問

00:38:34.481 --> 00:38:37.951 
本週還有很多有趣的講座

00:38:38.185 --> 00:38:40.921 
可以發現很多信息
WatchKit in Depth

00:38:41.421 --> 00:38:44.925 
Complications 
Layout等等

00:38:45.893 --> 00:38:49.263 
如果有任何問題如果有一般性問題

00:38:49.329 --> 00:38:51.064 
或是首次深入學習代碼

00:38:51.665 --> 00:38:54.268 
或是對WatchKit開發很有經驗

00:38:54.568 --> 00:38:56.537 
都歡迎過來 我們很高興
回答大家的任何問題

00:38:58.205 --> 00:38:59.306 
謝謝大家

00:39:00.641 --> 00:39:01.308 
謝謝