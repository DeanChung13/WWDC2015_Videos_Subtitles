尼爾·德賽: 大家好
歡迎來到《構建Watch App》講座
我是尼爾·德賽是位工程師
在watchOS項目工作
今天我給大家演示如何從下到上構建watchOS app
我們要談談Watch app的架構
我們正在全面瞭解app的生命週期佈局模型
我們會使用不同的界面元素
以便爲用戶實現美好的體驗
我們會調試app
還將通過不同的watchOS 2功能增強app的性能
那麼 在Apple Watch中你有四個機會來展示信息
從Apple Watch的Home屏幕 
到在Watch app中可以手工啓動的位置
Watch app可以提供深度用戶體驗
大家會主要集中進行開發方面的工作
可以選擇提供Glance
這可以從app給出最及時的相關數據
還是以縮略形式
可以爲app的遠程和本地通知提供自定義UI
Apple Watch利用
iOS的現有互動通知支持允許
佩戴者對具體行動做出反應
將app轉移到指定區域
或是在Apple Watch的Notification
Center 晚些查看通知
最後 可以添加Complication
在錶盤顯示信息的這一功能
讓我非常興奮
對於少量信息條而言這一點非常棒
用戶可能會在查看時間時希望瞭解這些信息
那麼我們現在瞭解了用戶會與app交動的不同方式
我們來談談Watch app的架構
現有的iPhone app包括WatchKit擴展
和Watch app
經過用戶要求的初始配對後這些都已經裝在了Watch 上
或是後來通過Apple Watch app
用戶發起的安裝也可以
Watch app包括兩部分內容
首先是WatchKit擴展這一擴展現在就在...
Apple Watch上運行
並根據用戶互動 執行代碼
第二部分是Watch app
Watch app的UI已經 
從包括故事板和靜態資源捆綁包中得以加載例如圖像
因此 存在於 Watch app
的這個UI隨後會與WatchKit擴展通話
可以將全部邏輯置於其中
現在 這個擴展程序就在Watch中
可以啓動各類新的能力
這部分稍後介紹
當Watch app需要與iOS app
進行溝通時WatchConnectivity
可用於卸載重型進程
或網絡任務它存在於
iOS和watchOS 2上
所以可以來回溝通
總之 故事板和所有靜態資源存儲在Watch app捆綁包中 
Xcode提供的Watch app已經包括
故事板在內在開發期間將會用到
因爲這些資源是Watch app的一部分
在設計時必須全部明確
只有在運行時可以稍作調整
這意味着需要將可能用到的
所有UI元素併入
故事板的各個場景
運行時 對WatchKit擴展進行編碼 
可以更新UI元素包括按照需要
對之隱藏 展示或動畫處理
此外 WatchKit擴展可以發送動態
生成的內容至Watch app便於顯示 
因此InterfaceController對單個內容流
管理UI元素
會設置這些元素的初始值
對用戶交互做出反應
適度更新UI
創建InterfaceController子類時
需要爲需要管理的每個UI添加輸出口
這些輸出口與故事板中的對象連接
並處理WatchKit擴展和Watch app之間的信息傳送
除了輸出口還要爲故事板的互動元素設置行動方法
對輸出口而言要將每個動作方法
和對應的UI元素
當佩戴者和Watch的元素交互時
WatchKit就會調用行動方法
因此我們先來考慮如何調整現有iPhone app
在試運行WWDC時我忘記了
聯繫家人和朋友這方面的內容
所以我想創建個app可以提醒我
我聯繫過誰誰還沒有聯繫
這就是WWDC Call MeLately 並可以通知我 
何時該聯繫他們
所以我和服務器溝通
跟蹤我需要通過NSURLSession 聯繫的人
這是我做的一個不錯的iOS 
不過它更像是Watch app
當我特別忙時 很快就可以知道接下來該聯繫誰
現在就開始製作Watch app
我想做的是希望給大家展示
怎樣在現有的iOS app中添加Watch app目標
接下來我們會涉及在哪裏開始設置界面
最後 我們要構建和運行
看看模擬器裏的狀況
說到模擬器
在watchOS 2 SDK中實際上有個嶄新的模擬器
大家可能對iOS模擬器很熟悉
這個看起來是這個樣子
現在就有了新的Watch模擬器
特別棒的一點是這是個全功能模擬器
可以輕鬆看到38毫米和42毫米的大小
可以模擬觸控壓力
可以看到不同的錶盤
正如我之前所述現在可以在watchOS 2中
支持Complication 因此可以
看到Complication視圖
在模擬器不同錶盤的視圖效果
最後 同時可以安裝多個app
我們認爲這會令製作新項目
重複想法等變得非常容易
隨後可以快速在不同app之間往復
那麼 模擬觸控壓力可以進入Simulator菜單 
來到 HardwareSimulate
Touch Pressure
接着可以選擇Deep Press
這對於想在模擬器中改變
錶盤這類問題非常有用
現在跳到Xcode 來看怎麼添加Watch app
使用這個嶄新的模擬器
來看演示
非常棒 啓動Xcode
選擇app
這樣看起來更容易些
非常棒
現在如果想添加新的app
只需進入File New Target 接着就有了
新的WatchOS窗口
那麼 在庫裏就有了應用和框架
選擇Framework In Library就可以
添加Watch框架
或是Watch靜態庫
現在我來添加WatchKit app
雙擊 加上產品名稱
主app總是默認啓動狀態
但我還要加入Notification場景
Glance場景 以及Complication
可以加在這裏
已經在這款app上加好了
按下Cancel
看看都有些什麼
這就是Watch app以及WatchKit擴展
我剛纔說過Watch app 包含故事板
所有的靜態資源以及資產目錄
WatchKit擴展包括所有界面
控件和可能會添加的任何其他代碼
進入故事板
大家都看到我有主界面
Glance界面接下來還有通知的靜態和動態界面
進入實用工具檢測器
可以看到對象庫發現這裏有許多
可以使用的不同對象
還有所有的WatchKit界面元素
拖拽過一個界面控制器
例如 如果我只想製作一個頁面控制器
可以在鍵盤上選擇Control
再拖拽到新的界面控制器中
併爲下一個頁面創建引線
現在就可以處理掉這些如果看下面的內容
有一個靜態界面和動態界面
因此動態界面實際上是與Notification
Controller類相連接
所以當用戶收到通知先擡起手腕時就會看到
Notification+Controller類 就會調用
而且還可以提供非常豐富的UI
現在靜態界面通常會被調用
例如當用戶錯過了通知
想在NotificationCenter再看一遍時
一般這種時候會看到靜態界面
因此 我這有My Category
針對不同的分類我們發送不同的裝載模式
我們實際上可以創建自定義UI和自定義通知
來針對不同的分類
而這並非一對一的界面
而是針對所發出的所有通知的界面
實際上可以調整並創建多個界面
我們再加一個新的通知控制器
放在這裏
如果我想的話可以拖拽一個界面控制器
接下來和剛纔一樣點擊Control
在創建我新的動態界面
還可以進入這裏屬性檢測器
選擇Has DynamicInterface
現在我可以調整分類
並創建新的界面
然後可能我想...
創建新的NotificationController類
接着在做好連接
我們還有模板
推送通知裝載模式 .apns文件 
如果看這裏
看似是我們會有的普通裝載模式
其中有提醒 主體 題目 分類
最棒的部分是在模擬器中
可以使用這些不同的裝載模式文件
模擬不同界面
如果想要測試所有這些不同的通知
我們不必一定在設備上進行
可以使用模擬器
這些通知裝載模式快速重複不同的想法
我們再回到故事板
現在我就想在模擬器中
構建 運行並查看主app
那我來打開我的計劃
我看到我有iOS計劃接下來是WatchKit app計劃
我有兩個模擬器這是iPhone 6 Plus
38毫米的
還有iPhone 6 Plus42毫米的
我剛纔說過這實際是個Watch的全功能模擬器
實際上需要和我的iPhone模擬器相配對
我們來選擇 iPhone 6計劃 構建並運行
現在打開了兩個模擬器
那麼我預計到主app會啓動
我會把它連在調試器上
非常棒按下Allow因爲我確實要允許這麼做
現在是在連接調試器
這裏出現了一個小東西
是說“擴展收到請求 啓動錶盤組件支持”
如果要執行Complication
稍後這就會消失
現在來停止這個調試會話
返回Watch模擬器
現在就是新的模擬器我有錶盤
現在如果我只想調整錶盤
可以打開HardwareSimulate
Touch Pressure
現在可以模擬強壓接着返回
輕壓 接着調整錶盤
現在可以自定義模擬器上的時鐘
那麼如果在設備上進入這個屏幕
可以使用DigitalCrown
接着可以輕鬆改變顏色
那麼鼠標上沒有Digital Crown
不過幸好我有滾輪
還可以使用觸控板或Magic Mouse
我還可以調整顏色像這樣
現在就可以模擬Digital Crown行爲
同樣 進入Complication視圖時
手指劃過就可以啓動Complication
這樣如果想在Complication上重複想法
可以在不同錶盤構建新的Complications
我可以像這樣啓動這些Complication
現在 執行Command-Shift-H
返回主頁 再次執行Command-Shift-H 
現在回到了Home屏幕於是有了Settings app
錶盤和已有的app 
然後啓動app也正常看到了
再回到主頁
現在 正如我所講這些模擬器實現配對
我有兩款不同的模擬器可供選擇
進入計劃看到兩款模擬器
可是如果是iPhone 5
42毫米模擬器會怎樣呢
我來做個新模擬器再實現配對
打開Xcode 選擇Xcode 然後是Device
現在在側邊欄我有所有不同的模擬器
如果來到底部左側可以添加模擬器
可以稱之爲iPhone 5
改變設備類型
繼續保持iOS版本
我將會把配對的手錶改爲42毫米
很容易就可以創建
現在如果返回計劃這就是新的模擬器
那麼回到故事板
正如我說講有這些計劃
可供選擇這有個Notification計劃
還有Glance計劃以及Complication
那麼我可以選擇這些不同的計劃
並快速調試app的不同部件
例如 現在我想測試
Notification計劃
想看看在模擬器中是什麼樣子
我們已經講過了APNS文件
我想看看是否正確顯示
那就在動態界面添加標籤
拖動過來
直接改成Dynamic
現在我選擇了Notification計劃
準備在模擬器上構建並運行
我希望在Watch模擬器上看到這種情況
會出現通知接着是Dynamic
現在需要介紹的就是這些內容
這裏就是通知上面寫着Test Message
我準備打開控制檯
上面寫着“用時過長無法顯示自定義通知返回靜態”
好的再來看通知控制器
看看爲什麼會出現這種情況
這就是通知控制器的代碼
檢查一下
Did ReceiveRemote
Notification有標註提示我應該解決標註問題
現在再來構建和運行
希望現在經過取消舊的通知
就能看到新的正如我所願上面寫着Dynamic
在設備上 如果是這樣的情形並獲得通知
我可以選擇App圖標或按鈕
我就會回到這款app上
在模擬器中可以同樣這麼做
正如我所願回到了這款app中
現在可以完善代碼 在通知中添加
不錯的UI故事我還想測試
自己的靜態界面
想實現這些的唯一辦法是需要在Did Receive
RemoteNotification標註提示
以獲得靜態界面而我在重複編碼時
並不希望這樣做
那麼我可以有兩種辦法這麼做
第一 我可以將完成處理程序的自定義
改爲調用Default或者實際上我可以進入計劃
可以編輯計劃現在我可以選擇Watch界面
就可以把它改成靜態通知
而不是動態的大家可以看到
這裏是推送通知裝載模式
如果我有多個裝載模式這裏會有顯示
我可以快速調整我準備測試的裝載模式
我的目的是想保持靜態計劃
一陣子 那我就準備複製這個計劃
我們可以稱之爲Static Notification
接着打開Run
再來把Watch界面改成靜態
按下Close
現在靜態通知也有了
以及正常的動態通知
非常好 這就是模板項目的
開始部分但需要理解部分上下文
關於app生命週期在watchOS上如何運行
來介紹一下watchOS app的生命週期
我們來看Watch app界面但是並沒有看到它的生命週期
很重要的一點 是需要瞭解什麼時候擴展以及界面控制
器何時需要調用安裝和拆解
那麼需要在正確的時間配置UI元素
並進行清理操作或完成任務
這時佩戴者會停止與Watch app進行交互
啓動Watch app時
擴展委託可以啓動get Application Did
Finish Launching
擴展委託和在iOS上的UI應用委託類似
這樣 你也會收到Did Become Active
回調 以便升級模型數據
接下來Watch app捆綁包的故事板會裝載到
Apple Watch 初始界面控制器即可生成
UI一旦生成
界面控制器就會收到Awake With Context
調用 使其有機會啓動狀態變量
並運用初始值配置UI元素
Watch app的UI正在屏幕上
顯示的過程中將調用Will Activate
允許執行緊急任務
或最終的UI元素配置
現在 如果佩戴者與UI元素交互
WatchKit調用在界面控制器上定義的動作方法
可以通過這些動作方法執行代碼
並更新app的UI
要記住交互時間很短
在iOS上　我們以往認爲在用戶和app交互方面
都是按照分鐘計算但是在watchOS上
我們是在以秒計算考慮問題
實際上要在佩戴者停止與app交互後
點擊Did Deactivate調用
調用這種方法後在未來的某個點
界面控制器將會被釋放
現在擴展委託
在佩戴者完全停止和手錶交互後
例如可能會返回Home屏幕
你會收到Application Will
Resign Active回調
藉此機會可以保存任何app相關狀態信息
並關閉任何運行的任務
我們瞭解WatchKit擴展的 生命週期
但是要談談另一個重要問題
是關於Watch app的佈局
watchOS中的WatchKit
模型不同於UIKit
及AppKit 因爲它是流式佈局
因此所有的元素都是連續出現
我們的UI主要是在...
Interface Builder中創建
因此具備界面控制器時
可以使用對象庫並拖拽圖像
或拖拽按鈕當我們需要...
更爲相關聯的佈局時
我們會使用WK界面組
用於管理不同項的佈局
例如 我們可以在組中添加圖像和標籤
因此編程模型非常值得注意
不要使用WatchKit編寫對象生成代碼
在Interface Builder有微調控制
處理位置和大小布局分層和動畫
我非常鼓勵大家參加週四的...
《WatchKit佈局和動畫技術》講座
是有關如何爲用戶生成豐富UI的內容
我在考慮怎樣最好地製作Watch app
回想一下 我的iOS app是個簡單的UI表格視圖
我的第一個想法是羅列出
我需要呼叫的所有人與iOS app非常類似
當我開始這麼考慮時
我意識到Watch app並不需要所有這些信息
其實 我只需要了解下一個該聯繫誰
而不是要了解所有需要聯繫的人
所以UI可以是這個樣子
非常棒 現在我知道需要怎麼做了
我想開始生成UI
接下來講講怎樣爲主app 
Glance和Notification生成UI
我們跳到Xcode來看我們有什麼
我們瞭解生命週期是什麼
一般而言佈局代表什麼
那我們打開故事板
我想在界面控制器添加圖像
先在對象庫裏選擇圖像
然後快速拖拽一個圖像過來
我還要添加一個標籤
那麼去找到標籤拖拽過來
如果發現出現了一條藍線
那麼在流式佈局中可以把標籤
放在圖像的前或後
那就把它放在後面
舉例來說 如果我想把它們水平方向前後放置 
好吧 在Interface Builder中 其實無法實現
沒有藍線出現 幫不了我
我用WK界面組來實現
把這個拖拽過來重新調整圖像大小
把標籤加入組中
把圖像就加在標籤旁邊
這樣就可以在水平方向排布
現在把標籤和圖像取出
把組刪除
接着在屬性檢測器中
已經在資產目錄裏了
我有個圖像是朋友伊桑的
就以這張圖像作爲參考
伊桑好像有點走形
讓他看起來更開心點
就這樣
他開心多了
還要把標籤文字改成伊桑
現在佈局位置確定是左對齊
我其實是想讓它在屏幕居中
如果我選定了圖像
那麼打開屬性檢測器中
可以將位置調到中心
我還可以垂直方向調整位置
可以調大小改變視圖
針對這個圖像標籤也一樣
我只想它放在中間位置
那就來看Glance
如果仔細觀察會發現Glance控制器不同於主app
有兩個組
是因爲Glance實際上是模板製成
我有上模板和下模板
如果選擇上模板的屬性檢測器
有一系列選項可供選擇
在這個具體案例中我們使用大號的文字
改成Call
接着在下模板中添加圖像
和剛纔做的一樣
只需要把圖像變爲伊桑即可
當我看着Glance時感覺app
是要對我發火因爲調用伊桑這裏我做的極差
那麼app會幫我做
在通知界面也是同樣的做法
大部分情況下我可以找到新界面
現在通過選擇計劃來構建並運行界面
我們來構建和運行Watch模擬器
希望我的新界面會出現
好的 非常棒
好 在這裏 我再連上調試器
停止這個會話看看iOS模擬器
因爲 重要的是需要注意這些是配對設備
那麼向上滾動向右搖
看到iOS app已經安裝到位
和設備上一樣app只有通過這一種辦法
可以裝在用戶的Watch上
也就是裝在iOS設備上
那麼就是現在這樣
我們來選擇AppleWatch app在模擬器裏
可以調整Complication
那麼Call Me Lately已經啓動了
我還可以卸載app再重新安裝
還可以關閉Glance再重新啓動
如果我想查看Glance
可以打開模擬器返回錶盤
就像在設備上一樣劃動一下 接着Glance
那我們再重新啓動
哎呀 不好意思
我以爲會出現新的UI
結果沒成功不過我們還是繼續
我找到了新界面不過我需要了解
下一個該聯繫誰還需要了解
怎樣更新app實現這一點
回到幻燈片
iOS app主要是通過NSURLSession
與服務器溝通獲取親愛的朋友們的名單
watchOS 2很出色的一點是我可以使用
許多相同的NSURLSession與服務器對話
不過 有時候當我需要確認
iOS app和watchOSapp 彼此在接觸
可以使用Watch-Connectivity 來完成
我們花些時間
介紹一下新WatchConnectivity
框架然後來看怎樣在Call Me Lately中使用
那麼WatchConnectivity
是iOS和watchOS
之間交流的四個核心用途框架
主要注意的是WatchConnectivity 
在iOS和watchOS之中都有在兩個平臺上均可使用API
不僅是Watch app在與iOS app對話
有時還需要iOS app
來更新Watch app
第一個用途是允許iOS app
更新Watch app的應用上下文
反之亦然
這也許不是緊急的數據 
但是需要向用戶更新這些內容
第二個是Send Message
這是需要在iOS app和Watch app之間
來回傳送的
小量信息和Watch app
第三個是簡易傳送文件API
最後是傳送用戶信息API 可以和更多
Complications相連接
還有很多內容可以完成
我鼓勵大家和...
WatchConnectivity對話發現更多信息
來看Call Me Lately 來看怎麼充分利用
WatchConnectivity
我想在app上添加WatchConnectivity 
還要進行調試最後我想用Instrument進行調試
談到Instrument有人可能還不知道
Instrument是非常強大的調試工具
可以檢測app的性能
於是我獲得調試模板
先要啓動Instrument
然後可以從時間事件查看器泄露 分配中進行選擇
然後大家會看到如果我選擇時間事件查看器
例如 我要看這個視圖
可以輕鬆調試app
這一點很重要
Watch上 互動時間非常短
也就是說性能非常關鍵
我們希望使用Instrument來確保
app在提供良好的用戶體驗
我們希望在設備和模擬器上都進行檢測
現在我們瞭解了一些WatchConnectivity
和Instrument我們再來看演示
在app中
我可能有某種算法稱
下一個該聯繫這個人了
所以當得到這個數據時
我需要更新iOS app瞭解這人是誰查看Watch 
就知道接下來該聯繫他了
也許我需要初始啓動app
只爲在iOS app上更新應用
上下文看看會出現什麼
我可能希望在擴展委託中
在Application DidBecome Active完成這些
我可以只在這裏放置代碼
我先來導入WatchConnectivity
現在在ApplicationDid Become Active
我想添加部分代碼
生成上下文即名爲伊桑的字符串
接着在WC Session 這是WatchConnectivity
我有默認的會話
並且調用方法Update
ApplicationContext
連同主要WCApplicationContext
我將只發送上下文部分
結果卻更糟糕現在就來打印出我的錯誤
來看這個工作
我們來構建和運行
選擇Watch app...
app啓動
但我看到WC錯誤提示7004
根據以往的經驗我可以判斷
我的會話沒有激活
來看看代碼
我還沒有設置委託
我想設置WC會話委託然後在更新應用
上下文代碼之後或之前
我只想自己設置委託接着還要激活
會話部分
需要注意的是在激活會話前
需要設置委託因爲在激活會話時
可能有信息在等着
所以你需要收到適當的委託回調
我們現在再來構建和運行
需要確定錯誤代碼已經不存在
好了 非常棒
現在沒有錯誤了
這就是說正在將應用上下文
妥善發送至iOS app
但是我需要了解iOS app確實收到了
所以要打開Scheme來查看
並選擇iOS計劃我會選擇
與Watch模擬器配對的相同模擬器
現在來選擇iPhone 6模擬器
如果點擊Control再按下Build和Run
不必構建即可運行
這樣的話 如果app確實很大
我就不必等着它一直編譯並安裝app等等
我們按下Control然後無需構建直接運行
看似app啓動了在iOS app
點擊了app委託
點擊委託回調Did Receive
ApplicationContext
然後可以在iOS app上更新UI
我們繼續
現在如果我在Watch模擬器上我們返回主頁
調試對話還在iOS app中繼續
還有Watch app激活狀態 不好意思
當它啓動時 將會更新應用上下文
可以在iOS app再次點擊
並點擊委託回調
這非常棒因爲現在可以同時
調試兩個模擬器
使用WatchConnectivity
這一點非常棒
因此你必須確認所有的調用
都是按照在watchOS和iOS中都需要的順序進行
謝謝大家
現在會話部分告一段落我想快速
調試一下Instrument
先來點擊ProductProfile 
會啓動Instrument希望會出現模板
我的模板選擇
來看一下 好的
找到了時間事件查看器
就選擇這個
接下來不是iOS模擬器
我實際是想調試擴展
選擇這裏
可以按下Record
看似我點擊錯誤
打開Watch模擬器 把它放在這裏
按下Record
連上了現在可以調試app
在調用樹上還可以看到示例列表
和iOS app一樣可以做同樣的事情
可以看到大部分代碼都在運行
在主線程這裏非常棒
接着可以返回調用樹
也就是說使用Instrument
可以輕鬆調試
停下這一段會話
現在我編寫好一個app
基本上是有着很簡單的界面
用到了WatchConnectivity
並且用Instrument調試了app
現在可以和設計師聊聊了
可以真正進行完善
我們來談談可以做些什麼
那麼我們在現有iPhone app上添加了Watch app
生成了app和Glance界面
用到了WatchConnectivity
我們同時調試了iOS和watchOS app
還使用Instrument調試了app
還有幾個問題需要大家運用WatchKit
另外還有很多其他的watchOS 2功能 
令我非常興奮
正如我提到的有Complication
昨天在專題講座中大家可能也見過
甚至可以實現Time Travel
我覺得不遠的將來就可以大家就像是在來回往復
非常神奇 太酷了
大家還可以使用Digital Crown
因此可以通過Digital Crown
爲用戶創建非常直觀的體驗
還可以有簡易動畫來生成
真正的響應式app非常漂亮有趣
還可以使用心率傳感器
那麼如果在製作 Workoutapp 或其他健身 app
可以通過HealthKit 獲取數據
並以此爲客戶提供更好的體驗
還可以運用交互式虛擬觸覺實現更棒的體驗
輕觸用戶並提供部分上下文
和在app中的做法一樣
還有媒體播放就和昨天在專題講座中看到的一樣
大家也可以有音頻播放
可以在Watch上使用揚聲器
或是用戶可以配上藍牙耳機
接着還可以有路由
還可以錄製音頻首次實現
可以使用Watch本身的 麥克風
並提供絕妙體驗
現在來看 Keychain
這樣可以爲用戶實現非常安全的體驗
複習一下我們可以探討app的架構
增添了Watch app
談到了app生命週期
我們用到了不同界面元素 製作app
和Glance 還談到了
通知界面以及怎樣輕鬆重複
不同的通知 並使用不同的類別和不同的裝載模式
我們可以在新的模擬器中構建並運行
還調試了app
我們用到了不同的watchOS能力
網上還有部分更棒的資料
《watchOS 2轉換指南》就非常不錯
我很希望大家都能看看
還有些不錯的技術支持
可以去論壇看看有些示例代碼
如果有一般性問題可以聯繫傑克·貝倫斯
他是watchOS框架的開發顧問
本週還有很多有趣的講座
可以發現很多信息WatchKit in Depth
Complications Layout等等
如果有任何問題如果有一般性問題
或是首次深入學習代碼
或是對WatchKit開發很有經驗
都歡迎過來 我們很高興回答大家的任何問題
謝謝大家
謝謝