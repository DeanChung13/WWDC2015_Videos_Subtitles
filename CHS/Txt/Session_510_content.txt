核心图像的新方面
大家早上好我的名字是大卫·海沃德
今天我很荣幸能给大家讲讲
iOS 9和Mac OS X ElCapitan “核心图像” 上
有什么新料
首先说一下我们今天要讲哪几件事
首先 我会给那些刚刚接触主题的人
简单介绍下 “核心图像”
我建议你们回去后
看看我们去年以来的演示
尤其是其中那个关于如何在 “核心图像” 中编写内核的
讨论 非常棒
接下来我们会讲一讲今年在 “核心图像” 上
有什么新料
我们在这里要讲的东西很多
我们今天会议剩下的三分之一时间会用来谈谈如何使用
“核心图像”如何把它与我们的平台上的
其它图形框架桥接起来
首先
来简单介绍下“核心图像”
在概念上
“核心图像” 的理念是指你可以在图像上使用滤镜
举个简单的例子你有一张输入图像
然后你通过一个滤镜增加了一种色彩效果 如棕黑色调
但是如果你不喜欢这个
棕黑色调 那么你就可以再改变一次色彩效果 把色调
改成偏蓝色调
你也可以使用 “核心图像”来增加类似几何扭曲这样的
事件效果
在这个例子中 我们使用的就是一种简单的转换
放大了图像的某一部分
你可以把这些想象成各个滤镜上都有一张
中间图像
但是我们实现滤镜的方法
它们实际上是非常简便的对象
生成时耗时极少
在它们之间并无中间缓冲区
存在的必要
还有一个概念也很重要和每个滤镜联系在一起的
是一个或者多个内核
CI内核是小的子例程这些子例程施加的效果
就是内核想要实现的效果
“核心图像” 的另一项特性是
我们把这些内核
连接到了一个程序
尽可能减少中间缓冲区的使用
以此来提高性能
“核心图像” 还有一项关键特性我们称之为
“兴趣域支持”
这个理念指的是如果你仅仅对某个图像的某一部分进行
渲染 这可能是因为你在某张较大的图象上进行了放大
或者是因为这些渲染是在图块上进行的
我们就可以问一下每个滤镜正在渲染的图块需要多大的
图像输入 这样我们就可以向源图像计算回
要生成想要的输出需要用到的图像的
精确区域
“核心图像” 还有一项很棒的特性 允许我们获得良好的
性能尤其是当我们处理
大图像时
当你使用 “核心图像” 时你需要注意其中的
四个主要类
第一个是CI内核
我之前已经提到了
它代表的是写在 “核心图像”内核语言的
程序或者例程
第二个关键的类是滤镜即CI滤镜
这是一个可变对象可以有多个输入
这些输入参数可以是数字、向量
或者其他图像
根据输入参数的当前状态滤镜会使用一个或者多个
内核来生成
一幅输出图像
一个CI图像就是一个不可变对象
表示根据已经使用的上一个内核
生成图像的“食谱”
最后是CIContext对象
这是一个非常重量级的对象
“核心图像” 就是通过这个对象来进行渲染的
建议你不要太过频繁地在你的应用程序中创建
这个CIContext对象 如果你处理的是快速动画
那么创建一次就够了
关于CIContext还有一点很棒
它们可以实现到我们的系统中各种不同的后端渲染器上
现在我想讲的下一件事就是我们后面的这个介绍讲的是
今年 “核心图像” 上有什么新料
我们今天要讲这么几件事情
我们会讲一下Metal讲一下新的滤镜
新的检测器 颜色管理支持以及内核类和语言的
某些改进
关于 “核心图像” 我要讲的最重要的事情
就是我们现在把它统一实现到了我们的各个平台上
因此只要我们不专门提起那么大多数情况下
“核心图像” 的行为在iOS和OS X上是完全一致的
是完全等价的
这是一个很棒的特性开发者就可以依赖这个
这个一致的行为
这些可能是一些小事比如
当你包含 “核心图像”头部时
无论你是在哪个平台你就可以包含 “核心图像”
包含“核心图像” H
这样如果你编写的是
跨平台的代码那就容易了很多
我们现在在两个平台之间
会进行API奇偶校验
因此
今天我们想说的一件主要的事情就是
“核心图像”对Metal的支持
我们稍后会在演示中展开讲更多的细节
不过现在我就想先向你们强调这一点
关键的一点在于
现在Metal Textures
既可以当做“核心图像” 的输入
又可以当做“核心图像” 的输出
从内部来说“核心图像” 环境可以把
Metal当作它们的内部渲染器
这就意味着如果你在CI的内核语言中
写好了一个内核那么它就会自动即时翻译成
Metal语言
还有一件事要记住我们的内置滤镜
尤其是 “高斯” 和 “卷积”滤镜
现在是构建在Metal性能材质的顶部
为的就是在支持的多个平台上获得尽可能好的性能
关于滤镜还有一些要说
就像我之前提到过的
我们现在有一个统一的“核心图像” 执行
这就意味着我们现在在各个平台上内置了二百种滤镜
也就是说
我们向iOS“核心图像” 执行中
添加了海量的滤镜
这次发版时添加了超过四十种滤镜
它们分别属于不同的类别
有些滤镜很有趣 比如喜剧效果、CMYK半色调、
德罗斯特以及卷页效果
还有一些卷积滤镜也很有用
比如中值滤镜、
边缘检测以及噪声抑制
我们还有一些对图像分析来说非常有用的简化滤镜
比如对一幅图像进行“区域最大化”
或者 “平均分布列”
为了让你们体验一下它
我想向你们展示我们的一个示例应用程序的最新
最新版本 名字叫“核心图像奇幻屋”
我们尽量每年都更新这个应用程序
我们现在已经有二百个滤镜
当你在这个应用程序中打开滤镜弹窗时
你可以看到我们现在把它们分成了不同的种类
你还可以看到我们用红色高亮显示了我们新加的
滤镜这里有一个API
可以帮助你确定某个滤镜是在哪次发版时加进去的
这个 当然了展示了 “CMYK半色调” 特效在
一台iPad上视网膜分辨率情况下的
良好性能
这是我们应大家要求
<br/>添加到各个平台的
“核心图像” 上的两个新的滤镜
这些滤镜可以用来
生成条形码
因此在这个实例中输入一个滤镜的就不是
一个数字或者另一幅图像而是一个文本串
我们添加了这两个滤镜以便生成PDF417条形码
以及code 128条形码
“核心图像” 还有一项特性我们称之为我们的
CI检测器类
这些是我们过去发布的类
它们可以用来做像检测图像中的人脸、
检测图像中的QR codes码、
检测图像中的矩形等事情
今年我们又新增了一个类
它可以用来检测图像中的文本区域
这个滤镜的理念是定位可能包含直立文本的
区域
我来在一台iPad上运行下简单给你们做个演示
我们已经把它连接到了“核心图像奇幻屋”
我的书架上有个旧盒子如果我们打开文本检测器
它就定位到了直立文本定位到了
文本的滚动以及单独的字符
当我们放大并且旋转摄像头
直立文本也检测到了成一个角度的
某些文本
这就是我们的新文本检测器开发者会用这个检测器来实现
什么好玩的功能我对此十分期待
随着我们现在在iOS上的“核心图像” 统一实现
我们还有了 “自动颜色管理”
这一很棒的
功能
自从 “核心图像” 出现后OS X上就可以使用
这项功能了 但是现在我们也把它弄到了iOS上
这就意味着现在 “核心图像” 完全支持
基于ICC的CGColorSpaceRefs了
这些可以被用到输入文本、输出文本上
甚至还可以被当做“核心图像” 的一个工作区
这是因为完成了在iOS上支持ColorSync这一
很棒的工作才实现的
对用户来说 这就意味着
你可以自动得到用色彩空间标记的TIFF或者JPG
正确渲染
很多图像是用sRGB标记的
在之前的iOS版本上它们已经可以正确渲染了
不过现在如何你的图像是用一个色彩空间而不是用sRGB
来标记的 那么你也可以得到正确的行为了
这里有一个例子是用Pro Photo色彩空间
标记的一幅图像
背景中的红色台子不饱色
肤色也很难看
当你在这个上面正确看到嵌入ICC轮廓时
图像就正确进行了渲染
这是你在 “核心图像” 上自动得到的
我们还对CI内核类做了一些新的支持
现在在OS X上已经可用了
当然它在iOS上早就可以用了
这是我们的统一执行的另外一项福利
举例来说 我们有两个类分别叫做CI颜色内核
以及CI扭曲内核
这些类背后的理念是让你能够更容易地
最常见的基础滤镜
之前在OS X上如果你想要写一个简单的融合滤镜
用给定的遮罩把这三个图像
融合到一起 那么你就需要
写几行代码对采样器
正确进行取样
然后你需要写好遮罩
把这三幅图形组合到一起
而如果你用CI颜色内核类
那么代码就简单的多了
现在内核的输入就是一个采样器 下划线
下划线采样参数那么内核的代码就只不过是
把三个结果混合到一起的数字游戏
对开发者来说这是件大好事 事情更简单了
“核心图像” 简化、连接项目的工作
就更加容易了
我们还对OS X上可用的CI内核语言
做了大量的优化
我们的统一执行当我们把CI内核语言
编译进目的环境语言时
我们会通过Apple的LLVM技术来实现
这样 我们的语言中就有了一项新的特性
比如If、For以及While这些之前都是不可用的
现有的apps中的CI内核应该不会受到影响
不过有了新的编译器我们的报警更严谨了
所以如果你的app链接到了
El Capitan或者稍后会链接它
请密切留意编译器报警
举例来说这是一个内核的简单示例
之前在OS X使用内核语言是不可能的
因为这个特定的滤镜有一个输入参数
这个参数是一个计数
我们想在这个内核中有一个For循环
会基于那个计数变量进行循环
在这个特定的例子中我们想要对n点进行
矢量动态模糊
现在写这个内核就很容易了
你可以更加天马行空你可以有一个
提前退出的For循环
在这个例子中我们会对那副图像进行采样
直到我们得到了图像上的一个不透明区域 然后我们
For循环仅仅返回图像中的
颜色的平均色
因此你要记住
我们的内核语言就是我们这个语言的整体目标
我们想实现的就是让你仅仅写一次内核
然后不管你的内核运行在什么样的设备上
你的内核就都可以运行
这样它就可以独立运行不管运行在什么样的系统中
不管是iOS还是OS X不管你的输入图像尺寸如何
内核语言也同样支持目的核心
以及采样器转变因此我们也支持图像自动镶嵌图案
此外CI内核语义和我们的
后端渲染器是独立工作的
因为无论我们用到是Metal
还是OpenCL，还是OpenGL
还是OpenGL ES你在CI内核语言中
写一次你的算法就可以了
这就是今年“核心图像”上有什么新料的重点内容
我们接下来的主题是要讲一讲如何
把 “核心图像”和其他框架桥接起来
具体来说 指的就是
我们的平台上可用的某些很棒的图形资源
我们的平台上有很棒的
成像框架
比如 “核心动画” 、
SceneKit、SpriteKit、Metal、
AV Foundation、
IOSurfaces以及多个视图类
我们今年花了大量的时间来让它们能够
和 “核心图像” 兼容
开始讨论前
我想介绍下托尼·朱他会展开讲一下
“核心图像”以及Metal
谢谢 大卫
早上好我的名字是托尼
首先我要告诉你们关于“核心图像”
以及Metal更多的信息
就像大卫之前提到的今年我们在 “核心图像” 中
添加了Metal渲染支持
我们这样做的一个原因是为了增加我们的
图像类型支持扩展套件
例如IOSurface以及CGImag
无论你的CIContext类型是什么
你都可以把它们用作
一个CI滤镜的输入或者输出
不过如果你有一个基于OpenGL的CIContext
你也可以渲染进、渲染出OpenGL纹理
今年 如果现在你有一个基于Metal的CIContext
那么你也可以渲染进、渲染出Metal纹理
之前没有这项支持时
你就必须把一个Metal纹理转换成某种现有的图像类型
这就有可能在CPU和GPU之间
造成 “昂贵的”数据复制
有了这项支持我们就可以高效
渲染进、渲染出这些资源
我们再来看看 “核心图像” 内用于Metal支持的
一些新的APIs
首先是一个允许你用一个输入Metal纹理对一个
CI图像进行初始化的API
以及一本你可以在其中
指定诸如纹理标记颜色空间
等事情的可选字典
这是一个使用高层框架的优点的
一个示例例如 “核心图像”
优点是它会自动帮你处理类似
颜色管理等等细节问题
要使用这些基于Metal的
资源进行渲染你需要通过给它你的
应用程序正在用的Metal设备
<br/>来创建一个基于Metal的
CIContext新的CIContext
再说一遍 你可以为中间缓冲器指定
类似工作颜色空间或者工作地垫的
选项字典
你甚至还可以说明
你想要使用某个次优GPU
无论是哪种情况
有了这个新的基于Metal的CIContext
我们就有了新的渲染API允许你把任何
CI图像渲染到一个输出Metal纹理
这个API有个很棒的特性我想要
专门提出来就是可以指定
任选命令缓冲区
如果你想又快又好地做事你可以指定为 “无”
此时 “核心图像” 就会在内部创建一个
然后把所有必要的命令编码到那里
然后在返回之前把它提交上去
这样就可以高效调度GPU上的渲染调用
不过你也可以给那个调用提高一个命令缓冲区
此时 “核心图像” 只会向它编码命令
然后不经过提交就把它返回回来
这样的话你就可以完全控制你对
命令缓冲区的调度以便在GPU上进行渲染
你也就有了在命令缓冲区的任何地方插入CI滤镜
灵活性
我来详细解释下这点
对于那些第一次使用Metal的
人来说 使用Metal进行渲染基本上就是向一个命令缓冲区
编码一系列的渲染命令
在这个例子中我们有两组命令
用我们刚才看到的那个新的API
你现在就可以向
这个命令缓冲区的任何地方
插入那个CI滤镜
比如在缓冲区的开头、
结尾
甚至可以是在那两个渲染命令的正中间
你想象一下这种情况你需要对某些纹理进行
某些绘制、引发或者渲染
然后把纹理送入一系列的CI滤镜
并由此生成一些输入纹理
在上面进行更多的渲染
然后 “核心图像” 会从内部为你的图像图表中可能有的
每个滤镜编码全部命令
实际上就像大卫之前提到过的
我们的某些内置滤镜也会使用Metal性能材质
来利用这些专门为
支持Metal的设备进行了调整的高度优化的
材质
最后我想提一下这种调用协定
完美地赋予了它自身使用CI、直接向一个
MetalKit视图进行渲染的能力
我想向你们演示一个
示例代码以便进一步向你们解释
这是一个示例代码如果你需要基于新的MetalKit
框架、创建一个新的应用程序
那么你就需要写这个代码了
你需要做的第一件事就是当你想要设置视图时
你要在这里做几件事
第一件关键的事
是把那个视图的 “仅帧缓存器” 属性设置为 “假”
这样 “核心图像” 就可以使用Metal计算着色器来向
那个视图的输出纹理进行渲染
你下一步要做的
就是使用一台Metal设备来把那个CIContext初始化
这样做的原因是在一个应用程序中
类似初始化一个CIContext这种事情 你只想做一次
然后在 “绘制和视图委托”功能中
要通过那个视图渲染某些CI滤镜
你就需要写这样的代码
让我来带领你们逐句通过这个代码
首先你要创建一个命令缓冲区
这个缓冲区最终会给到这个可绘制物
然后我们要用一些给定的输入Metal纹理
来对一个CI图像进行初始化
现在 这个CI图像可以通过其它方式出现 举例来说
我们有的某些其它图像类型比如一个CGImage
不过在这个例子中 我们只是向你们演示下如何使用新API
一旦你有了一张CI图像
你就可以把一系列的CI滤镜链接到它上面
在这个例子中 我们要使用一个CI高斯模糊滤镜
然后一旦你有了你想要渲染的CI图像
你就想要抓取当前绑定到那个视图的当前可绘制物上
的纹理然后使用我们在这里想用的
命令缓冲区 把CI图像渲染到那个纹理
最后 一旦我们编码好了这个渲染命令
你就还需要向命令缓冲区插入另外的一个Metal命令
目的是为了显示视图的当前可绘制物
然后你只需要在缓冲区调用提交即可
把一些 “核心图像” 滤镜
集成到一个MetalKit应用程序
就是这么简单
接下来我想谈一谈
如何桥接 “核心图像”以及AV Foundation
有了我们今年在这些框架中做的最新的变更
现在向你的AVFoundation应用程序添加 “核心图像”
滤镜就很容易了
这是因为现在 “核心图像”
已经方便地和AVVideoComposition类
集成到了一起
默认你会得到自动颜色管理
但是如果你不需要你也可以禁用它
我们来通过几个例子看看如何把CI滤镜
应用到视频上
首先是在导出视频的语境中其次是在实况回放
一个视频的语境中
要演示这些例子
我们要使用几年前我们在
苹果全球开发者大会上演示给你们的一个滤镜
在这个滤镜中对于视频图像的每一帧
我们都会首先在它上面应用一个棕黑色调滤镜以及
随机噪声最后是在它的顶部进行一些
垂直刮痕覆盖
你们中如果有人记得的话这是一个老电影滤镜
是几年前我们在苹果全球开发者大会上演示给你们的
第一个滤镜非常直接
它只需要一个单一的输入图像
以及一个输入时间参数你可以用这个参数来
以可重复的方式、可预见的结果
来向视频应用特效
我们回来看看导出那个视频时 我们应该怎样
应用这个滤镜
你首先需要做的 就是创建一个经过过滤的合成
赋予它你想要导出的音频视频资产以及一个回调块
你在这个回调块中可以指定渲染视频的每一帧时
应用的一个滤镜 “配方”
从这个回调块中 我们就可以得到一个请求对象
这个对象就是一个输入参数你就可以得到把你的
CI滤镜链接在一起的
合成时间以及源图像
一旦你有了自己的经过过滤的CI图像
你就可以调用请求对象上的Finish With图像
你可以向那个调用传递一个“无” 语境
然后AVVideoComposition
默认就会创建一个CIContext
就像我之前提到的
CIContext会自动得到颜色管理
如果你想禁用它那么你只需要创建一个
你自己的CIContext
指定一个空颜色工作区然后把它传递到那个
Finish With图像调用中
我们刚刚向你展示的滤镜是一个十分简单的滤镜
并不涉及卷积滤镜
但是在这个例子中你确实有了卷积滤镜
你要小心的一件事是不良的结果
即干净的像素渗透进了
那副图像的边缘
要解决这个问题我们有一个简单的方法
我们在很多类中都会用到这个方法 也包括那个类
你首先要做的
就是有了源图像 你就想把卷积滤镜应用到它上面
你想通过夹紧延伸来调用图像
它会无限边缘复制那个图像的全部像素
以及图像的边缘
这样的话当你应用这个滤镜时
你就不会再出现清晰的像素和图像融合这个问题了
因为如果那样做 你最后得到的就是一张无限大的图像
滤镜应用结束时你想要通过剪切矩形
来增加图像以便把那个图像剪切回到
源图像的范围
通过使用这个简单的方法你看到的图像就更简洁了
边缘边界也非常漂亮、明快、敏锐
因此一旦我们有了那个
AVVideoComposition
如果你想要创建一个导出会话以便导出一个视频
你就可以通过创建这个
音频视频导出会话并且指定你想要导出的
一个输出URL位置来实现
你也可以指定我们刚刚创建的视频组成的导出位置
要记住的一点是你可能想要...
你想要调用 “从URL删除项目”来删除任何可能已经存在于
那个导出位置的项目
一旦你完成后你就可以在导出会话上
调用ExportAsynchronously
这样就会开始一个进程导出那个
视频并且把CI滤镜应用到
你的视频的每一个单一的帧上
如果你想要更新你的UI上的某些进度
以便显示那个导出的进度
你就可以在你的调用块中使用 “合成时间” 参数
来更新这样的UI元素
现在它导出了
如果是回放一个音频视频资产你需要写的代码
实际上也非常类似
创建视频组成的代码和我们之前看到的一模一样
唯一的不同之处在于你不需要再创建一个
导出会话
你需要用那个音频视频资产以及我们刚刚创建的视频组成
来创建一个AVPlayerItem
然后再用那个播放器项目创建一个AVPlayer
之后在你的播放器内调用“播放”
现在我要向你们展示一个视频 让你们看看我们是如何
在回放时 把那个老电影滤镜应用到一个音频视频资产的
这里要注意的一件事是
当你清洗这个视频时
你可以看到同样的特效以可重复的方式、
可预期的结果应用到了这个视频上
因此 “核心图像”
和AV Foundation高效互操作在了一起
接下来我想请亚历克斯
来再给你们讲讲“核心图像” 提供程序
谢谢
谢谢 托尼
我的名字是亚历山大·纳曼我要讲讲 “核心图像”
提供程序然后我们再讲讲我们的
系统上的更多的API还有STKs
以及它们是如何和 “核心图像” 一起工作
创造有趣的应用程序
我们从
CIImageProvider开始吧
CIImageProvider是
我们在CI图像上的一个类型之前OS X上就有了
但是现在 作为我们的
统一执行的一部分现在iOS上也有了
对你来说你就可以把输入图像带入
你的系统 而如果没有它这就是不可能的
举例来说如果你有一个不被支持的
文件格式你想要创建一个基于
那个文件格式的CI图像
或者说 如果你有某些从某些站点流出的数据
而且你想创建一个CI图像
那么你就可以使用一个CIImageProvider
它们是通过回调实现的
你可以坐享其成当我们需要填写数据时
我们会通知你、告诉你你就可以得到自动镶嵌图案
而我们就会为你处理轻便性以及缓存
我们来看看它是怎样实现的
先说重要的你创建你自己的类
在这个例子中 我们创建一个叫做图块提供程序的类
然后我们用这个图块提供程序创建一个CI图像
除了这个我们让它的尺寸和我们试图
创建的图像尺寸一致无论我们想用什么样的格式
来创建这幅图像一个可选择的颜色空间
在这个例子中我们在选项字典中
给出图块尺寸
要把这个用起来
我们只需要实现一种叫做“提高图像资料” 的方法
“核心图像” 就会通知你、告诉你
填写这个信息
你必须在那个数据指针中填写这个信息
数据指针有给定的行字节值在X和Y轴上有确定的位置
有确定的宽度和高度如果你愿意的话
你还可以标记一些用户信息
要实现你自己的图像提供程序
你要做的就是这些
现在我们再来谈谈我们拥有的各种视图类
谈谈你可以在iOS和OS X上
和 “核心图像” 一起用的各种视图类
我们对使用 “核心图像”进行渲染就有了一个广谱
支持所处的系统可以是
非常高级的例如UIImageView
这样对应用了一种
“核心图像” 特效的图像进行渲染
就非常容易
也可以是非常低级的系统
或者可能是高级性能APIs比如GLKView
或者MTK视图你就可以对你所做的事情
有细粒度更高的控制
那么让我们来看看UIImageView
UIImageView可能是
在iOS上展示一幅CI图像的最简单的方式
你需要在你的UIImageView上
做的 就是把图像属性设置成一个UI图像...
在这个例子中是一个基于CI的图像
问题在于虽然使用这个方法非常简单
它并不是展示一幅CI图像的性能最高的方法
那么最后我们不得不做的
就是把它渲染回CPU
然后把它发送回GPU
效率不是尽可能地高
如果我们看一个简单的示例
在这个例子中
我们通过使用一个UIImageView
来运行一个像素化滤镜
我们可以看到应用了这种特性后
我们在视网膜尺寸图像上得到了大约每秒二十帧
如果我们改用OpenGL ES-based视图
并且应用同样的滤镜
我们就可以看到我们现在是每秒四十八帧
如果我们再进一步
进行一次基于Metal的查看
我们在这里还有些许提升
我们就是每秒五十二帧
虽然这并不特别了不起但是我们仅仅应用了一个滤镜
因此我们得到的优势并不那么明显
不像我们应用多个滤镜或者我们有一堆较小的
渲染时我们得到的优势那么明显
但是基本理念就是这个
现在让我们看看 “核心图像”以及 “核心动画”
看看我们怎样可以让它们一起工作
这是一个我们在iOS以及OS X上
有所不同的例子非常少见
在OS X上 我们只需要应用即可 要让 “核心图像”
以及 “核心动画” 一起工作我们只需要做两件事
先说重要的
在你的NSview你只需要说view.layer
使用 “核心图像” 滤镜把它设为
“真” 然后可选择地指定你想要应用到
你有的无论哪个层的滤镜
阵列
你需要做的就这些
而在iOS上
我们就没有这种支持了
因此你可以做的就是直接OpenGL
你可以通过衍生于GLKView来这么做
或者通过创建一个UIView确保你覆写了层类方法
并且返回了CA鹰layer.self
来这么做
当你这么做的时候你就会得到一个GL基于ES的对象
然后你就可以用它创建你自己的CIContext
那样就可以确保你获得最优性能
这些都很棒不过你需要牢记一件事
如果你想要获得很棒的性能
那么这就不仅仅是使用最好的API这么简单
更是要有效地使用最好的API
在这个例子中你要记住的第一件事就是
仅仅创建你的CIContext一次因为缓存就发生在那里
那里也保持了
一大堆的状态
因此
当你使用低层APIs时要记住这点
现在 我想谈谈
IOSurface上的“核心图像”
我们在 “核心图像” 执行的内部
大量使用IOSurface
作为一个API 我们超爱它因为它给我们提供了
一堆系统中其它API不存在的
功能性
因此大体上我们就有了很棒的轻便性
一些锁定语义因此我们就可以让数据在
IOSurfaces上进进出出非常适合用来把数据从CPU
搬到GPU或者从GPU搬到CPU
我们对不同格式的支持广谱
令人难以置信我们认为可能有些是
整个系统上最棒的
举例来说 我们有420、444、
RGBA半浮动以及很多其它的支持
现在在iOS上作为一个开发者
要直接使用IOSurface就比较难了 但是你可以通知 “核心图像”
你想要通过创建“像素缓冲区” 的方式
来使用IOSurface
IOSurface上KCV像素缓冲区
IOSurface属性键是指定了的
当你那样做的时候如果你从一个CV像素缓冲区
创建了一个CV图像并且图像有这个键
那么内部结束时就是
“核心图像” 知道它是一个
IOSurface支持的CV像素缓冲区
我们就可以尽可能高效地进行渲染
因此如果你想在iOS上享受IOSurface的全部好处
那么你就需要记住这个
接下来我想再谈几个其他的APIs
我们会仔细看几个例子 看看我们可以怎样实际一起使用
“核心图像” 以及STKs、非常容易地创建示例应用程序
那么我们从SpriteKit开始吧
如果我们在XCode中开始创建一个新的应用程序
我们选择 “游戏”然后选择一种
游戏技术SpriteKit
然后我们构建、运行我们就得到了这个应用程序
这样当你点击屏幕时新的飞船就会显示出来
你可以看到我们是每秒六十帧
我们现在可以用少量的代码把 “核心图像”
添加到这个应用程序
在这个例子中
我们会在GameScene.swift中修改
Touches Began方法那么一开始
每次点击后会发生的事情
就是会把那个子画面添加到根节点
我们再修改下
我们要使用一个SK特效节点
一个SK特效节点会把整个环境渲染进一个缓冲区
然后你就可以向它应用一系列的滤镜
因此我们添加一个SK特效节点
我们就不像之前那样把子画面增加到根
我们会把子画面添加到特效
我们说 我们想启用某些特效
我们要创建一个滤镜在这里例子中
我们要使用一个像素化滤镜
它和我们之前看到的滤镜是一模一样的
然后我们把那个特效
添加到根
我们需要做的就这些
如果你想要添加 “核心图像”到一个SpriteKit应用程序
那么你需要写的代码正是这个
如果我们现在运行我们有的同样的示例
并且开始点击
我们就在我们的应用程序内得到了
美丽的像素化子画面
而且运行的帧率也一样
现在
我们再谈谈SceneKit
理念是相同的我们通过 “开始”来创建一个应用程序
我们选择SceneKit作为一个游戏技术
如果我们直接构建、运行这个app
我们就得到了
这艘以交互速度旋转的宇宙飞船
以及驶离我们方向的宇宙飞船
如果我们想要向这个应用程序添加 “核心图像”
那么我们需要做的
就是到GameViewControllerswift中的
View DidLoad方法找到飞船
飞船在示例代码中是对齐的
然后我们就再次创建像素化滤镜
给飞船指定一个滤镜可选阵列
如果我们这么做了后运行app
就得到一艘美丽的像素化飞船
你可以把它应用到你的场景中的任何节点 并且
我们再次得到了很棒的帧率
同时使用SceneKit以及“核心 图像” 的一大优势在于
你可以使用 “核心动画”
来动画绘制属性
在这里例子中我们要创建一个
CA基础动画我们要动画绘制
输入规模因此我们会得到一个
变化的规模像素化特效随着时间推移
这个特效会被应用一个零到五十的值
在两秒内它会悄悄地来、悄悄地走
如果我们添加这个代码
我们的飞船就会有一个
美丽的
动画绘制像素化特效
并且 帧率仍然很棒
这个并不是一定需要应用到一个节点上
你可以把它应用到你的整个场景上
这里我们推出了一个示例
你可以下载它它叫 “香蕉”
和动画一起 我们应用了相同的特效
并且我们会在这里实时改变像素化规模
当它像素化后我可以比全分辨率更好地
玩这个游戏了这让我有点吃惊
不过除了创建游戏外你可以用这个
在游戏结尾添加一个特效
举例来说如果你想让你的资产的不同
版本被不同的
图像处理特效渲染
你就可以和这些APIs一起
来使用 “核心图像”完全没问题的
到现在为止 我们今天看了很多东西
看了怎样一起使用 “核心图像”
以及Metal和AVFoundation
为什么IOSurface对我们如此重要
我们还看了如果你仅仅创建了一幅图像一次
并且不需要频繁更新
那么使用UIImageView的最简单的方法是什么
仅仅应用一个特效一次是一种很棒的方法
我们也向你演示了如何使用“核心动画”
如何CIImageProvider带入定制数据
以及如何在游戏语境或者其他应用程序语境中使用它
你如何可以用SceneKit或者SpriteKit非常简单地创建它
要获取更多信息
我们在developer.apple.com有很多的资源
可以在线获取
如何你有任何其它咨询
你可以通过chick@apple.com
联系斯蒂芬·奇克
你可能想要参加其它会议
包括 “在AVFoundation 中编辑电影”
这场会议几天前已经举行过了不过你可以在线观看视频
还有昨天举行的“Metal中有什么新料第二部分”
如上所述谢谢你们来参会
希望你们会爱上在你们的应用程序中使用 “核心图像”
祝你们在会议剩余的时间里过得愉快  谢谢！