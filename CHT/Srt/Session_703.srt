00:00:20.554 --> 00:00:23.757 
隱私安全和App

00:00:31.765 --> 00:00:35.569 
大家好 我是姬蒂·斯金納
今天下午我將要和傑森·諾瓦克

00:00:36.136 --> 00:00:39.373 
一起談論一下
關於你們app中隱私安全的問題

00:00:40.374 --> 00:00:43.510 
我們都是蘋果產品
安全及隱私團隊中的成員

00:00:44.545 --> 00:00:47.581 
這意味着我們需要
和蘋果公司裏所有的團隊打交道

00:00:47.981 --> 00:00:50.684 
來在我們的app
和服務中實現隱私安全

00:00:51.885 --> 00:00:53.854 
在工作中和我聯繫最緊密的團隊包括

00:00:54.388 --> 00:00:58.358 
Apple Pay,Siri,Proactive 
Assistant,Health

00:00:59.359 --> 00:01:01.528 
以及我們最新發布的操作系統
watch OS

00:01:02.729 --> 00:01:08.335 
首先我想講一點關於隱私安全的
意義以及我們是如何看待它的

00:01:10.404 --> 00:01:14.508 
在蘋果我們把隱私
視作人的一項基本權利

00:01:15.475 --> 00:01:18.111 
這也是我們每天工作的首要原則

00:01:18.178 --> 00:01:23.584 
當我們在設計app
服務以及發行新版本

00:01:23.650 --> 00:01:26.720 
也就是IOS, OSX, watch OS的時候
我們會牢記這一點

00:01:28.188 --> 00:01:30.257 
用戶希望當他們使用我們的產品時

00:01:30.324 --> 00:01:33.861 
他們的隱私得到尊重而對所有的開發者

00:01:33.927 --> 00:01:36.230 
在座的每一個人來說
這是我們的共同責任

00:01:37.564 --> 00:01:38.932 
所以當你們在開發app時

00:01:39.032 --> 00:01:44.805 
要留心對用戶隱私的保護
並將其在你們的app中實現

00:01:46.740 --> 00:01:50.244 
在蘋果我們不僅致力於做出偉大的產品

00:01:50.611 --> 00:01:54.715 
也致力於做出偉大的工具

00:01:55.482 --> 00:01:58.552 
面向開發團隊爲你們提供更多的便利

00:01:58.619 --> 00:02:02.923 
讓你們尊重用戶隱私並在
你們的app和服務中實現隱私安全

00:02:04.591 --> 00:02:09.530 
到目前爲止我們所有的成功
都依賴於我們和用戶之間的良好關係

00:02:10.864 --> 00:02:14.168 
而信任是維繫這段關係的關鍵

00:02:15.636 --> 00:02:18.939 
我們都看過一些 關於違背隱私安全

00:02:19.740 --> 00:02:23.977 
泄露用戶信息的新聞
在座的各位都不想看到這種事情發生

00:02:24.044 --> 00:02:26.246 
不希望蘋果成爲下一個此類新聞的焦點

00:02:28.782 --> 00:02:31.018 
我們提供了這樣一個平臺

00:02:31.084 --> 00:02:33.120 
讓用戶爲新的體驗感到興奮

00:02:33.187 --> 00:02:35.756 
興奮於下載新的app

00:02:36.957 --> 00:02:41.261 
這些使得我們的app
生態系統得以運轉

00:02:41.461 --> 00:02:46.567 
並且繁榮而用戶對
你們的信賴是其中重要的一環

00:02:47.634 --> 00:02:49.703 
所以我們要值得讓用戶信賴

00:02:52.906 --> 00:02:56.677 
如今用戶因信任而提供了許多敏感數據

00:02:58.011 --> 00:03:00.414 
我們要成爲優秀的數據管家

00:03:01.348 --> 00:03:05.319 
隱私安全的構建是個好的入手點

00:03:06.820 --> 00:03:09.823 
現在所有的數據都需要一份保存策略

00:03:10.791 --> 00:03:12.993 
你們對此有什麼好的想法嗎？

00:03:13.493 --> 00:03:16.563 
我們可以從如何使用這些數據入手

00:03:17.764 --> 00:03:20.934 
對於一些你們再也用不到的數據

00:03:21.401 --> 00:03:23.337 
不會再用它們來爲用戶提供服務

00:03:24.238 --> 00:03:25.706 
那就應該把它們刪掉

00:03:27.708 --> 00:03:30.711 
對於你存儲的所有數據而言

00:03:30.777 --> 00:03:34.715 
你存儲的數據越多
你對攻擊者就越具有吸引力

00:03:35.282 --> 00:03:36.650 
就越有價值

00:03:37.951 --> 00:03:40.654 
所以要做到只保存你們需要的數據

00:03:42.523 --> 00:03:45.759 
我認爲我們收集到的
所有數據都具有風險

00:03:46.927 --> 00:03:51.398 
所以你需要在爲用戶提供的價值

00:03:52.065 --> 00:03:56.003 
和收集與存儲數據本身存
在的風險之間做出權衡

00:03:57.938 --> 00:04:03.010 
現在你可以通過把數據減到
最少的技術來降低這種風險

00:04:04.645 --> 00:04:08.782 
爲了學習這類技術以及具體應用的事例

00:04:08.849 --> 00:04:15.556 
你們可以找找去年的WWDC演講

00:04:15.656 --> 00:04:17.724 
看一下IOS和OS X中的
用戶隱私安全部分

00:04:19.726 --> 00:04:22.796 
如數據聚合 分辨率降低

00:04:23.297 --> 00:04:27.601 
這些都是減輕持有數據的風險的方法

00:04:29.002 --> 00:04:30.504 
但具體你應該選擇哪種方法呢？

00:04:32.105 --> 00:04:35.776 
爲了回答這個問題
我們可以從數據的用途入手

00:04:36.043 --> 00:04:37.344 
你將用這些數據來做些什麼？

00:04:37.945 --> 00:04:39.980 
你想解決一些什麼問題？

00:04:40.781 --> 00:04:42.816 
它們可以輔助做出什麼決策？

00:04:44.251 --> 00:04:48.322 
如果你回答不出以上問題
你就什麼都想不出來

00:04:48.789 --> 00:04:52.326 
那麼保存這些數據對你一點用都沒有

00:04:53.193 --> 00:04:57.097 
那可以使用列表中的
最後一項技術數據最小化

00:04:57.531 --> 00:04:59.967 
你根本就不需要收集和傳輸這些數據

00:05:02.269 --> 00:05:05.873 
如果你覺得可以用這些數據來做些什麼

00:05:06.707 --> 00:05:10.010 
那麼在轉出過程中
所有數據都應該得到保護

00:05:11.378 --> 00:05:14.147 
一會兒傑森將要講講關於
app傳輸安全的問題

00:05:14.481 --> 00:05:17.584 
這是我們在IOS 9中
採用的一個新方法

00:05:18.018 --> 00:05:21.588 
來改進服務過程中的安全傳輸

00:05:23.023 --> 00:05:26.527 
爲了降低風險
儘可能地避免在設備中輸出數據

00:05:26.593 --> 00:05:29.363 
尤其是對於敏感的數據類別

00:05:29.696 --> 00:05:31.565 
更要慎之又慎

00:05:32.099 --> 00:05:34.001 
這包括一些像健康情況的數據

00:05:35.269 --> 00:05:37.704 
舉個例子在
cycling Workout中

00:05:38.372 --> 00:05:42.442 
我們可以得到一些
諸如用戶的心率和運動距離的數據

00:05:42.709 --> 00:05:45.512 
而用戶的身高 體重和校正數據

00:05:46.146 --> 00:05:49.650 
都可能在配對設備中獲取

00:05:50.250 --> 00:05:52.719 
可以計算出在運動過程中
卡路里消耗的情況

00:05:53.787 --> 00:05:56.423 
這些數據都不會反饋到
服務器中處理分析

00:05:58.692 --> 00:06:02.262 
現在我們不僅需要
在傳輸過程中保護數據

00:06:02.462 --> 00:06:03.830 
在存儲過程中也是一樣

00:06:05.332 --> 00:06:08.535 
首先考慮一下是否需要存儲這些數據？

00:06:10.137 --> 00:06:11.305 
是否只是需要短期保存？

00:06:11.572 --> 00:06:13.574 
能不能只在內存中存儲呢？

00:06:14.174 --> 00:06:15.776 
或者說它需要被寫進盤裏嗎？

00:06:17.077 --> 00:06:19.980 
IOS和watch OS
平臺受益於數據保護

00:06:20.380 --> 00:06:22.282 
我將一會兒再談論這個

00:06:23.817 --> 00:06:25.385 
如果你在服務端存儲數據

00:06:25.485 --> 00:06:27.688 
要保證在空閒時段能對數據加密

00:06:28.455 --> 00:06:30.891 
使用CloudKit我們就
能很容易得實現這一點

00:06:32.392 --> 00:06:35.729 
思考一下在你的數據傳輸
和存儲時應該用什麼樣的標識符呢

00:06:36.163 --> 00:06:40.734 
一會兒傑森將會深入介紹一下
如何選擇合適的標識符的問題

00:06:43.170 --> 00:06:45.906 
現在你需要讓用戶明白

00:06:45.973 --> 00:06:48.809 
你將用你的這些數據
這些來源於用戶的數據做些什麼

00:06:48.876 --> 00:06:51.378 
你將如何使用它們
如果你將要和第三方分享數據

00:06:51.445 --> 00:06:53.180 
這些都需要保持透明

00:06:53.647 --> 00:06:55.883 
要確保用戶可以理解你在做什麼

00:06:56.917 --> 00:06:58.952 
避免用戶產生任何的恐慌

00:07:01.121 --> 00:07:03.757 
這裏有一種好的解決方式

00:07:04.224 --> 00:07:07.828 
讓用戶明白他們的數據
是如何被收集和存儲的

00:07:08.262 --> 00:07:10.264 
那就是給用戶檢查他們數據的權利

00:07:11.798 --> 00:07:14.501 
而且在你收集數據的時候

00:07:14.568 --> 00:07:18.539 
或者說當你提供給用戶選擇權時

00:07:18.605 --> 00:07:20.641 
你希望通過透露一些信息

00:07:21.108 --> 00:07:22.409 
來幫助用戶做出更好的選擇

00:07:23.143 --> 00:07:25.012 
你可以通過採用目的字符串等解決方案

00:07:25.612 --> 00:07:29.016 
當用戶在考慮他們是否要給你們
提供照片等信息的權限的同時

00:07:30.250 --> 00:07:32.052 
你也希望用戶能掌握主控權

00:07:32.886 --> 00:07:35.255 
要給他們更改決定的權利

00:07:35.422 --> 00:07:39.259 
如果稍後他們的決定變得和先前不同

00:07:39.860 --> 00:07:44.798 
那時要給他們一個機會
對你已經存儲的信息進行重置甚至刪除

00:07:47.935 --> 00:07:50.904 
現在我要談一些關於我們的平臺

00:07:50.971 --> 00:07:52.840 
在提高用戶隱私安全
方面做出的一些更新

00:07:54.908 --> 00:07:58.478 
我想講一下在IOS,OS X
平臺中發生的一些改變

00:07:59.279 --> 00:08:02.149 
還有一些在watch OS
平臺中的基礎的東西

00:08:03.750 --> 00:08:06.587 
首先說到IOS平臺的發展
我們可以追溯到去年

00:08:07.521 --> 00:08:11.225 
在去年我們開始配置加密的MAC地址

00:08:11.558 --> 00:08:13.460 
來應對幾種特定的wifi掃描方式

00:08:14.661 --> 00:08:17.331 
在ios 9平臺裏
我們增加了掃描方式的數目

00:08:17.598 --> 00:08:19.766 
對其MAC地址進行加密

00:08:20.601 --> 00:08:24.271 
值得注意的是
如果你的功能是基於外設的

00:08:24.338 --> 00:08:28.175 
一定要先在IOS 9中
對MAC地址做測試確認

00:08:28.942 --> 00:08:32.513 
因爲在正式使用之前
你不能保證MAC地址的可用性

00:08:34.948 --> 00:08:38.519 
簡單來說我們認爲想在手機上

00:08:38.919 --> 00:08:42.322 
安什麼軟件是由用戶決定的

00:08:43.890 --> 00:08:46.693 
用戶可以用他們的手機做許多事

00:08:47.628 --> 00:08:50.564 
他們也有各種各樣的理由
來安裝自己喜歡的app

00:08:51.398 --> 00:08:54.334 
健康養生 金融理財
居家生活等 不勝枚舉

00:08:55.569 --> 00:08:58.305 
就目前來說用戶安裝了哪些app

00:08:58.705 --> 00:09:01.875 
以及那些app從用戶身上獲取了些
什麼信息已經變成了非常敏感的事

00:09:03.143 --> 00:09:06.079 
所以要嘗試着檢測出
用戶安裝了什麼app

00:09:06.680 --> 00:09:10.717 
通過直接進行識別
或者收集相關信息來輔助判斷

00:09:10.951 --> 00:09:13.620 
來找出一些違反IOS的
安全模型的內容

00:09:15.656 --> 00:09:19.860 
最終IOS安全系統會對確定
出來的app進行建模分析

00:09:20.928 --> 00:09:23.530 
它們僅在自己的沙箱中存活

00:09:23.697 --> 00:09:25.599 
這可以保護它們不被
其他的app和進程侵害

00:09:27.100 --> 00:09:30.771 
嘗試確定用戶在手機上安裝了什麼app

00:09:31.638 --> 00:09:33.807 
是IOS安全模型的一項顛覆性成果

00:09:36.310 --> 00:09:40.414 
現在與之相伴的是
canOpenURL今年也在改變

00:09:43.050 --> 00:09:45.652 
canOpenURL存在的意義

00:09:45.886 --> 00:09:49.990 
是爲了確認一個app
能否打開指定的URL資源

00:09:51.158 --> 00:09:54.428 
這可以爲一些功能提供支持

00:09:54.828 --> 00:09:57.664 
比如當手機裏安裝一個新的app時

00:09:58.432 --> 00:10:00.234 
它會提示用戶可以實現
一些什麼新的操作

00:10:02.269 --> 00:10:07.741 
有兩個新方向你們可以瞭解一下

00:10:08.442 --> 00:10:09.610 
菜單和通用鏈接

00:10:09.910 --> 00:10:11.979 
他們支持一些和URL方案相同的功能

00:10:12.045 --> 00:10:13.680 
我希望你們可以多關注一下那些方面

00:10:14.481 --> 00:10:17.985 
但是如果你想繼續使用URL方案

00:10:18.051 --> 00:10:21.021 
在IOS 9裏開發你的app
並且想要調用URL方案

00:10:21.288 --> 00:10:24.758 
你需要知道的是你得先在app中的
Info.plist文件中聲明它們

00:10:25.359 --> 00:10:28.762 
這裏有個新增索引鍵叫
LSApplicationQueriesSchemes

00:10:29.363 --> 00:10:32.266 
在這裏你需要把canOpenURL

00:10:32.499 --> 00:10:35.435 
添加進方案列表

00:10:37.871 --> 00:10:40.707 
現在你不用改變對
canOpenURL的調用方式

00:10:41.074 --> 00:10:43.043 
當前API也不會發生改變

00:10:43.810 --> 00:10:46.346 
但是一旦你調用了
canOpenURL

00:10:46.713 --> 00:10:49.049 
它就會檢查你app中的
Info.plist文件

00:10:49.683 --> 00:10:54.087 
看看你所調用的方案是否已經被聲明

00:10:55.489 --> 00:10:58.859 
所以說你需要先對其進行聲明

00:10:59.026 --> 00:11:05.232 
當你在那個方案中調用
canOpenURL時 

00:11:05.699 --> 00:11:08.302 
如果安裝的app支持這個方案
那麼返回值爲真

00:11:09.303 --> 00:11:13.540 
如果並沒有安裝任何app
那麼返回值爲無

00:11:16.210 --> 00:11:18.745 
所以如果你沒有聲明URL方案
會發生些什麼呢

00:11:19.346 --> 00:11:22.149 
不管這裏是否有一個支持它的app

00:11:22.349 --> 00:11:25.085 
你收到的返回值始終爲無

00:11:28.255 --> 00:11:32.559 
所以對於那些在IOS 9
之前版本被鏈接

00:11:33.460 --> 00:11:35.362 
以及在IOS 9中運行的app來說

00:11:35.462 --> 00:11:39.566 
只給它們50個獨立的URL方案

00:11:41.101 --> 00:11:43.403 
一旦你連續調用到第51個方案的時候

00:11:43.937 --> 00:11:45.506 
你將會收到的返回值爲無

00:11:46.673 --> 00:11:49.576 
即使當用戶重啓手機的時候

00:11:49.643 --> 00:11:51.979 
這50個URL方案也不會被重啓

00:11:54.381 --> 00:11:58.252 
我之前提到的今年新出的
一種可替代方案是通用鏈接

00:11:58.886 --> 00:12:03.023 
通用鏈接的厲害之處就在於
如果用戶已安裝某個app

00:12:03.190 --> 00:12:04.258 
鏈接將會開啓

00:12:05.025 --> 00:12:06.960 
同時也會發送一個反饋信息

00:12:07.294 --> 00:12:11.098 
如果沒有安裝這個app
鏈接將只會在app的網頁端開啓

00:12:12.366 --> 00:12:15.335 
Sysctl命令今年
也發生了一些變化

00:12:16.270 --> 00:12:20.340 
Sysctl是一種低水平的API

00:12:20.607 --> 00:12:22.242 
用以詢問和設置系統信息

00:12:24.044 --> 00:12:28.115 
它涉及的初衷就是允許具
有合適權限的進程來瀏覽信息

00:12:29.750 --> 00:12:34.588 
但正如我之前所說

00:12:35.088 --> 00:12:38.759 
IOS中的app並沒有瀏覽
其他app的信息的權限

00:12:39.860 --> 00:12:43.130 
所以IOS沙箱今年發生了一個變化

00:12:44.598 --> 00:12:51.271 
那就是它再也不能通過調用kern.proc
kern.procargs

00:12:51.772 --> 00:12:56.243 
和kern.procargs2來看到

00:12:56.543 --> 00:12:58.779 
來自其他任何進程的數據

00:13:00.814 --> 00:13:04.484 
今年在IOS和OS X這兩個平臺上

00:13:06.053 --> 00:13:09.323 
我們即將引入內容過濾
方面的新的延伸點

00:13:11.124 --> 00:13:14.194 
你的分程序表將能適
用於Safari

00:13:15.028 --> 00:13:18.532 
以及所有使用
SafariViewController的app 

00:13:20.501 --> 00:13:23.070 
你應該去測試一下
非常受歡迎的擴展功能

00:13:23.136 --> 00:13:24.938 
來瞭解它將爲你的應用或網頁

00:13:25.205 --> 00:13:27.741 
帶來怎樣的影響

00:13:30.277 --> 00:13:33.380 
你應該時刻做好心理準備
你的頁面中的某一部分

00:13:33.447 --> 00:13:35.883 
會在加載和處理它時遇到些問題

00:13:38.852 --> 00:13:43.423 
接下來要說的是在OS X平臺上
我們正在嘗試改變cookie策略

00:13:45.125 --> 00:13:48.028 
自從產生了可以在所有應用和進程中

00:13:48.095 --> 00:13:50.297 
分享cookie的
Yosemite系統之後

00:13:51.064 --> 00:13:53.901 
Cookie如今已變成了本地所有

00:13:54.701 --> 00:13:57.371 
它們對於單一進程來說是
屬於本地的並且不可共享

00:13:58.172 --> 00:14:02.409 
注意如果你已經在
App Store中運行過你的應用

00:14:03.076 --> 00:14:04.478 
那對你來說就不會發生任何改變

00:14:05.312 --> 00:14:06.547 
因爲你已經在這種狀態中了

00:14:08.081 --> 00:14:11.485 
如果你使用了Web Clips
或者Dashboard小工具

00:14:11.785 --> 00:14:14.521 
請注意要在OS X
EI Capitan中進行測試

00:14:17.991 --> 00:14:20.494 
現在我要講一些關於
我們最新平臺的內容

00:14:21.962 --> 00:14:27.401 
在這些年裏我們看着IOS
和OS X系統一步步得發展成熟

00:14:28.368 --> 00:14:30.437 
正是這些經歷讓我們從一開始就確信

00:14:31.071 --> 00:14:35.375 
對於在新平臺中建設好隱私和安全問題

00:14:36.109 --> 00:14:38.679 
我們已經有不錯的基礎了

00:14:40.380 --> 00:14:42.249 
我們的優勢包括一些已有的技術

00:14:42.482 --> 00:14:45.352 
比如數據保護和我們的即時預警技術

00:14:46.320 --> 00:14:49.223 
我們認爲這些裝置是緊密相關的

00:14:50.524 --> 00:14:53.627 
對於用戶來說只需要與這
兩個裝置中的其一建立聯繫就行

00:14:54.428 --> 00:14:57.130 
這也是爲什麼許多設置可以通用的原因

00:14:58.465 --> 00:15:01.034 
這同時也包括

00:15:02.002 --> 00:15:03.770 
你在本地WatchKit app
中的隱私設置

00:15:03.837 --> 00:15:07.107 
所以不管用戶是和你的
IOS中的app進行交互

00:15:07.608 --> 00:15:12.212 
還是和Glance
或者其他第三方進行交互

00:15:13.213 --> 00:15:15.816 
在隱私安全方面的設置都是相同的

00:15:17.050 --> 00:15:21.088 
我們相信如果用戶對於
開發者是無條件信任的

00:15:22.089 --> 00:15:23.457 
他們就不會產生這樣一些異議

00:15:23.524 --> 00:15:26.627 
比如想“能不能給他們權限
來訪問我Glance中的照片呢？”

00:15:26.960 --> 00:15:28.662 
用戶有着很單一的信任方式

00:15:29.162 --> 00:15:33.433 
他們因信任而允許你訪問數據
並且對數據提供保護或者相反

00:15:36.270 --> 00:15:39.473 
所以我們認爲

00:15:39.940 --> 00:15:43.977 
從一開始就把關注點放在
做好隱私保護工作是非常重要的

00:15:44.711 --> 00:15:50.250 
因爲你的Glance可能成爲
用戶與你的app交互最多的一個地方

00:15:53.020 --> 00:15:57.057 
並且，在watchOS 2平臺上
把鑰匙串系統引進到Watch中

00:15:59.426 --> 00:16:03.397 
接下來將由Jason負責主講他將
涉及更多關於如何選擇標識符的問題

00:16:10.604 --> 00:16:13.173 
感謝姬蒂 現在我將講一下

00:16:13.340 --> 00:16:15.843 
關於在IOS和watchOS中的
標識符的問題

00:16:16.176 --> 00:16:18.145 
這是我們在之前的演講中

00:16:18.212 --> 00:16:19.546 
就談到過的一個問題

00:16:19.613 --> 00:16:22.616 
你們可以回顧一下去年的WWDC演講

00:16:22.683 --> 00:16:24.284 
來進行一下更加深入的瞭解

00:16:25.018 --> 00:16:27.654 
但是我認爲
在講watchOS中的標識符之前

00:16:27.721 --> 00:16:31.692 
回顧一下之前在IOS系統中
學過的一些知識也是非常必要的

00:16:33.126 --> 00:16:34.494 
標識符是具有很大作用的

00:16:34.928 --> 00:16:36.830 
它們的厲害之處就在於

00:16:36.897 --> 00:16:39.666 
如果你使用一些用戶
相關的內容來鑑別他們

00:16:39.900 --> 00:16:43.871 
比如用戶的姓名 電話號碼
郵箱等 可以從中披露出許多信息

00:16:45.072 --> 00:16:47.341 
你可以建立更注重隱私安全的標識符

00:16:47.474 --> 00:16:53.547 
通過生成隨機數來實現或者如果要求
隨機數的結構規整你可以使用UUID

00:16:54.515 --> 00:16:57.918 
當一個隨機數或者UUID
不能夠鑑別用戶

00:16:58.118 --> 00:16:59.653 
那就取決於你記錄了什麼信息

00:17:00.220 --> 00:17:01.922 
你以怎樣的頻率來切換標識符

00:17:01.989 --> 00:17:03.690 
以及用戶掌控着些什麼

00:17:03.857 --> 00:17:06.326 
超過規定時間標識符就會解除匿名

00:17:06.660 --> 00:17:08.962 
由於你記錄着許多種不同的信息

00:17:09.329 --> 00:17:12.499 
那些信息可能識別具體用戶
比如app動態

00:17:13.032 --> 00:17:16.537 
搜索詞條 消息或者位置信息

00:17:16.603 --> 00:17:19.106 
這些都取決於你的app的行爲

00:17:20.040 --> 00:17:22.542 
那就意味着所有標識符都攜帶有風險

00:17:23.042 --> 00:17:25.145 
即使標識符本身是可以匿名的

00:17:25.412 --> 00:17:27.047 
如果你持有的數據不能匿名

00:17:27.614 --> 00:17:30.050 
一旦其中一個數據違反了這一規則

00:17:30.117 --> 00:17:31.718 
你將擔起危害用戶隱私安全的後果

00:17:32.486 --> 00:17:34.087 
緊接着就是名譽受損

00:17:34.421 --> 00:17:35.822 
你會失去用戶的信任

00:17:36.490 --> 00:17:38.725 
當我提及數據泄露你可能會想到黑客

00:17:38.792 --> 00:17:40.727 
或者其他不法勢力

00:17:41.228 --> 00:17:45.032 
但那其實就像從把一個
未設密的筆記本從車的後備箱偷出來

00:17:45.199 --> 00:17:47.367 
或者備份文件從卡車上掉下來那麼簡單

00:17:48.702 --> 00:17:51.572 
正因爲標識符的力量是如此強大

00:17:51.638 --> 00:17:53.807 
蘋果花費了大量的時間
來研究標識符該如何運作

00:17:54.007 --> 00:17:55.209 
以及篩選一些最優方案

00:17:56.577 --> 00:17:59.146 
所以首先在你使用標識符之前

00:17:59.246 --> 00:18:01.215 
問一下你自己 你真的需要嗎?

00:18:01.715 --> 00:18:03.884 
你是否用以下方式收集數據呢？

00:18:04.251 --> 00:18:07.287 
通過一個存儲到服務器端的
數據庫或者字典值

00:18:07.354 --> 00:18:11.525 
由客戶端向服務器發送信息

00:18:11.992 --> 00:18:14.995 
而你只需記錄服務器的增量數據？

00:18:16.663 --> 00:18:18.899 
如果你確定了自己真的需要使用標識符

00:18:19.233 --> 00:18:20.801 
考慮一下你想用它來標識什麼

00:18:21.001 --> 00:18:22.870 
你需要使用多長時間

00:18:23.637 --> 00:18:25.739 
你只是想識別一個會話

00:18:25.806 --> 00:18:28.742 
通過簡單得在app中
發送標識符來爲不同進程取得關聯？

00:18:29.309 --> 00:18:30.244 
你是否在嘗試...

00:18:30.310 --> 00:18:33.080 
以及能不能在每次開啓和
關閉app的時候都切換標識符呢？

00:18:33.947 --> 00:18:35.716 
你是否只着眼於暫時性的活動

00:18:35.916 --> 00:18:39.820 
每隔5,10或者15分鐘
都會切換標識符？

00:18:40.854 --> 00:18:43.991 
我們知道切換標識符因其
可以降低數據相關性

00:18:44.057 --> 00:18:47.160 
而能起到隱私保護的作用

00:18:47.561 --> 00:18:49.563 
我們一會兒將要通過
一個例子來說明具體情況

00:18:50.864 --> 00:18:52.533 
如果你要標識一個用戶

00:18:53.400 --> 00:18:56.003 
你要怎樣同用戶解釋

00:18:56.170 --> 00:18:58.472 
爲何拒絕他們安裝一些
同樣需要標識用戶的應用呢？

00:18:59.206 --> 00:19:02.142 
你使他們通過你的服務建立了賬戶嗎？

00:19:02.242 --> 00:19:03.710 
你是否要求他們登錄？

00:19:04.211 --> 00:19:06.680 
你能在UI界面中用語言描述清楚

00:19:06.747 --> 00:19:09.149 
你之所以這樣做
是爲了讓他們獲得更好的用戶體驗嗎？

00:19:09.883 --> 00:19:13.353 
當你想清楚如何向用戶
解釋這些之後你真的考慮好

00:19:13.620 --> 00:19:19.560 
在收集數據的同時要承擔的
用戶標識方面的風險了嗎？

00:19:21.495 --> 00:19:24.164 
最後如果你想收集

00:19:24.331 --> 00:19:28.769 
關於手機上app安裝的信息在避免
觸及用戶的其他信息或者會話的情況下

00:19:29.369 --> 00:19:31.338 
你是否設計出了合適的度量方法

00:19:31.405 --> 00:19:34.074 
來統計計算用戶在
設備上的一些操作實例

00:19:34.141 --> 00:19:36.910 
比如用戶在第二個手機上
卸載或下載一個app

00:19:36.977 --> 00:19:40.714 
或者備份數據以及進行設備間存儲呢？

00:19:41.114 --> 00:19:45.419 
在那些過程中關於用戶的隱私保護方面

00:19:45.485 --> 00:19:49.957 
標識符的重置和不變是否能在你的
度量體系中有合理的解釋？

00:19:52.593 --> 00:19:55.062 
最後你該考慮一下關於
標識符範圍的問題

00:19:55.629 --> 00:19:56.930 
通過一個固定不變的標識符

00:19:56.997 --> 00:20:01.869 
利用它屬性上的特徵來
跟蹤用戶的一切行爲是非常容易的

00:20:02.503 --> 00:20:04.738 
但用戶的隱私安全也被極大降低了

00:20:05.072 --> 00:20:09.510 
許多數據是通過單一標識符被收集的
當環境發生變化

00:20:09.576 --> 00:20:11.778 
內容發生變化時標識符卻不會發生變化

00:20:12.880 --> 00:20:16.783 
而且用戶也不希望用同一個
標識被跟蹤所有的內容

00:20:17.284 --> 00:20:18.919 
審視標識符的作用域

00:20:18.986 --> 00:20:23.290 
你將會得到針對不同目的
針對和不同數據關聯的

00:20:23.357 --> 00:20:25.192 
針對不同存活期的不同標識符

00:20:26.894 --> 00:20:28.762 
現在我要舉一個例子

00:20:28.929 --> 00:20:32.933 
描述一種可以增加你
隱私安全的特殊的標識符

00:20:32.999 --> 00:20:34.601 
它把可能面臨的風險降到最低

00:20:35.002 --> 00:20:37.905 
設計出用同一標識符搜索
所有信息的服務是非常簡單的

00:20:37.971 --> 00:20:40.707 
可一旦發生了數據泄露

00:20:41.141 --> 00:20:43.110 
即使標識符是匿名的

00:20:43.777 --> 00:20:45.779 
也能通過已有信息來識別出用戶

00:20:46.079 --> 00:20:48.482 
因爲除了別的東西之外
用戶還會搜索與自己相關的內容

00:20:48.849 --> 00:20:51.852 
這種情況將會造成用戶對我們喪失信任

00:20:52.920 --> 00:20:55.556 
比如在這個例子中標識符是匿名的

00:20:55.622 --> 00:20:58.926 
它是123.但是我們可以
從中看出許多事實

00:20:59.359 --> 00:21:02.229 
用戶123正在考慮訂婚

00:21:02.596 --> 00:21:04.031 
可能在過去的週六

00:21:04.531 --> 00:21:06.867 
他們可能並不是來自聖弗朗西斯科

00:21:06.934 --> 00:21:08.735 
因爲他們在尋找來自
聖弗朗西斯科的航班

00:21:09.069 --> 00:21:10.237 
他們可能要去WWDC

00:21:10.404 --> 00:21:14.041 
他們可能是
John Appleseed

00:21:14.241 --> 00:21:16.143 
他們可能對
John Appleseed很感興趣

00:21:16.210 --> 00:21:19.012 
我們並不能確定但一旦知道了更多信息

00:21:19.079 --> 00:21:21.215 
我們能清晰得判斷出真相

00:21:21.648 --> 00:21:25.819 
另一方面如果你的搜索服務
使用了可切換標識符

00:21:26.119 --> 00:21:27.487 
即使數據泄露了

00:21:27.721 --> 00:21:30.424 
對用戶隱私安全的損害也被最小化

00:21:30.824 --> 00:21:32.392 
因爲標識符在不斷改變

00:21:32.860 --> 00:21:35.829 
在這個例子中
如果標識符每15分鐘變換一次

00:21:36.296 --> 00:21:40.167 
我們就不能確定用戶
123和用戶456或者用戶789

00:21:40.901 --> 00:21:42.069 
其實是同一個人

00:21:45.138 --> 00:21:47.474 
所以我要談論一下固定標識符

00:21:48.041 --> 00:21:51.144 
由於他們能對用戶提供長期跟蹤

00:21:51.211 --> 00:21:53.080 
危害了用戶隱私安全

00:21:53.714 --> 00:21:56.817 
所以它們在IOS和
watchOS中不再被設計使用

00:21:58.619 --> 00:22:00.721 
蘋果想爲用戶提供驚喜和愉悅的體驗

00:22:00.921 --> 00:22:03.557 
但如果不經過用戶的同意而追蹤他們
用戶不會感到開心

00:22:04.024 --> 00:22:05.859 
這並不符合用戶的心理預期

00:22:05.993 --> 00:22:08.629 
如果他們在同一標識符下
被一個app追蹤

00:22:09.229 --> 00:22:11.565 
即使當他們卸載了
app並進行重新配置

00:22:11.632 --> 00:22:13.267 
或者採用其它更具破壞力的操作行爲

00:22:13.734 --> 00:22:14.835 
比如擦除手機記錄

00:22:16.570 --> 00:22:19.306 
但最終因爲固定標識符是永久不變的

00:22:19.806 --> 00:22:21.341 
用戶並不能對此進行改變

00:22:21.942 --> 00:22:23.277 
就像姬蒂之前說過的

00:22:23.343 --> 00:22:26.580 
我們認爲讓用戶擁有更多的控制權
對隱私安全是非常重要的

00:22:29.016 --> 00:22:31.985 
爲了在開發者對標識數據的需求

00:22:32.519 --> 00:22:34.354 
同保護用戶隱私之間做權衡

00:22:34.788 --> 00:22:37.658 
我們在IOS平臺建立了
一系列有目的作用域的標識符

00:22:37.891 --> 00:22:39.993 
讓開發者可以收集他們需要的數據

00:22:40.294 --> 00:22:42.496 
投入進分析和智能廣告環境中

00:22:42.696 --> 00:22:46.600 
同時用戶也可以通過控制標識符的重置

00:22:46.900 --> 00:22:49.703 
來打破他們當前的行爲記錄

00:22:50.037 --> 00:22:51.338 
和被收集的歷史數據

00:22:51.839 --> 00:22:53.307 
之間的關聯

00:22:54.341 --> 00:22:55.876 
在app層級上

00:22:56.076 --> 00:22:59.079 
在用戶從某個給定
team ID卸載了所有app之後

00:22:59.513 --> 00:23:03.083 
我們可以通過重置vendor
標識符和IDFV來實現

00:23:04.284 --> 00:23:08.722 
在廣告環境中我們給用戶
重置廣告標識符的權利

00:23:09.156 --> 00:23:11.925 
可以通過依次選擇“Settings”
“Privacy”和“Advertising”

00:23:11.992 --> 00:23:14.995 
再點擊
“Reset Advertisement Identifier”

00:23:15.062 --> 00:23:18.632 
來重置廣告標識符
因此用戶可以輕易重置手機中的標識符

00:23:18.899 --> 00:23:23.904 
不用擦除任何數據就可以打破
和被收集的歷史數據之間的聯繫

00:23:25.739 --> 00:23:27.140 
在watchOS 1中

00:23:28.108 --> 00:23:30.177 
vendor ID和廣告ID

00:23:30.477 --> 00:23:35.182 
在iPhone中是作爲
WatchKit運行的擴展而存在的

00:23:35.782 --> 00:23:36.950 
在watchOS 2中

00:23:37.217 --> 00:23:41.121 
你需要從iPhone中
把vendor ID和廣告ID

00:23:41.555 --> 00:23:42.956 
同步到Watch上使用

00:23:43.323 --> 00:23:47.094 
你需要維持vendor ID
和廣告ID的同步更新

00:23:49.162 --> 00:23:50.797 
所以現在我將要回顧一些最佳方法

00:23:51.798 --> 00:23:53.400 
確定你需要一個標識符

00:23:53.934 --> 00:23:56.570 
你可以只發送一個值
然後在服務器端記錄增量嗎？

00:23:57.137 --> 00:24:00.307 
通過標識符來收集信息帶來責任的同時

00:24:00.374 --> 00:24:01.308 
也帶來了風險

00:24:01.875 --> 00:24:03.777 
如果你可以僅在增量數據中收集值

00:24:03.844 --> 00:24:06.113 
那麼就增加了用戶隱私安全

00:24:06.446 --> 00:24:08.081 
也爲你自己的數據收集降低了風險

00:24:09.316 --> 00:24:11.485 
使用合適的標識符作用範圍

00:24:11.985 --> 00:24:14.955 
確定當你真的需要
標識一個會話一個用戶

00:24:15.322 --> 00:24:19.193 
或者一個設備就根據你app的目的
來選擇標識符作用範圍

00:24:20.961 --> 00:24:22.996 
iOS 和 watchOS
提供了一些標識符

00:24:23.063 --> 00:24:25.532 
所以可以直接使用它們
不用新建你自己的標識符

00:24:26.333 --> 00:24:28.035 
試着建立一個永久標識符

00:24:28.535 --> 00:24:31.405 
它的值不因手機重置
或者其他毀滅性的操作

00:24:31.471 --> 00:24:32.439 
比如移除你的app

00:24:32.739 --> 00:24:35.409 
而改變這既不利於保護
用戶隱私也不利於你的app運行

00:24:35.809 --> 00:24:39.513 
如果你在使用私有API
來建立一個永久標識符

00:24:39.746 --> 00:24:41.615 
你已違反了APP Store的條例

00:24:41.748 --> 00:24:43.116 
這將帶來許多不良後果

00:24:44.551 --> 00:24:47.821 
最後要遵循設計標識符的基本原則

00:24:47.888 --> 00:24:51.825 
其中你該遵循的最重要的原則之一就是

00:24:52.192 --> 00:24:55.128 
在你調用廣告標識符之前

00:24:55.195 --> 00:24:57.865 
檢查一下Limit
Ad Tracking的值

00:24:57.931 --> 00:25:00.067 
同時要時刻跟蹤廣告標識符的當前值

00:25:00.834 --> 00:25:04.338 
用戶可以在任意時間
重置廣告標識符的值

00:25:04.771 --> 00:25:10.611 
此外授權廣告跟蹤的操作
也造成了廣告標識符的重置

00:25:11.245 --> 00:25:16.617 
正因爲這個你需要保證自己知曉當前值
並且不要把它存在cache裏

00:25:17.684 --> 00:25:19.419 
最後我們談一點報告相關的問題

00:25:19.953 --> 00:25:22.389 
我們知道在座許多都有
給合作伙伴提供報告的義務

00:25:22.623 --> 00:25:24.525 
但是我們認爲在給第三方提供報告時

00:25:24.591 --> 00:25:27.261 
維護用戶隱私是非常重要的

00:25:27.961 --> 00:25:30.063 
我們考慮了許多如何做
和用戶有關的報告的問題

00:25:30.130 --> 00:25:33.800 
你們也能看到我們把許多機器學習的
部分嵌入到了App Analytics中

00:25:34.935 --> 00:25:38.272 
在提供報告的過程中
主要有三種重要的思想

00:25:38.805 --> 00:25:40.908 
和用戶相關的報告所處的視野

00:25:41.074 --> 00:25:42.176 
報告的聚合

00:25:42.543 --> 00:25:43.377 
以及設定一個閾值

00:25:44.178 --> 00:25:45.812 
我所說的報告的視野是什麼意思呢？

00:25:46.513 --> 00:25:49.850 
對於合作伙伴來說比起想了解

00:25:50.417 --> 00:25:52.853 
是哪些人在頻繁得使用你的app

00:25:52.920 --> 00:25:56.690 
以及提供所有關於app
用量的數據來讓他們計算

00:25:57.157 --> 00:26:00.694 
他們更想在確定計算方式定義的基礎上

00:26:01.161 --> 00:26:03.897 
讓我們基於數據進行計算

00:26:04.398 --> 00:26:07.401 
提供計算結果而不是遞過去原始數據

00:26:08.569 --> 00:26:11.705 
保護用戶隱私的下一步是做聚合

00:26:12.072 --> 00:26:14.975 
比起說出哪些用戶是重度用戶

00:26:15.042 --> 00:26:17.177 
不如說出你有多少個重度用戶

00:26:17.244 --> 00:26:18.912 
他們在整個羣體中佔多大比例

00:26:19.646 --> 00:26:22.182 
最後報告中需要設定閾值

00:26:22.749 --> 00:26:25.052 
如果你要在報告中寫你有一個重度用戶

00:26:25.319 --> 00:26:27.087 
而你的app只有一個用戶

00:26:27.287 --> 00:26:29.389 
如果你以對待羣體用戶的
方式來提供用戶信息

00:26:29.456 --> 00:26:31.491 
比如提供郵政編碼

00:26:32.059 --> 00:26:34.027 
那你就暴露了你的用戶

00:26:34.194 --> 00:26:36.029 
在你提供用戶信息之前要設置一個閾值

00:26:36.597 --> 00:26:40.400 
確定你不會暴露用戶隱私
應該讓他們以羣體的形式出現

00:26:42.669 --> 00:26:46.507 
我將會講一些關於如何
提示用戶數據的最優方法

00:26:46.573 --> 00:26:51.178 
先講在Watch平臺的給大家提提神
再延伸到IOS和OS X中

00:26:51.512 --> 00:26:53.413 
當你想要接觸到數據類的時候

00:26:53.847 --> 00:26:56.316 
操作系統不會直接提供給你數據

00:26:56.717 --> 00:26:59.386 
直到用戶選擇了是否能

00:26:59.853 --> 00:27:01.622 
讓你的app獲取接收數據的權限才行

00:27:03.323 --> 00:27:06.293 
所以用戶可以知道
app用這些數據做些什麼

00:27:06.360 --> 00:27:09.329 
因此你對數據的收集和使用
對用戶來說就變成了透明的過程

00:27:09.663 --> 00:27:11.498 
因此我們在提示中提供了這樣一個空間

00:27:11.565 --> 00:27:12.966 
你可以在這裏向用戶解釋說明

00:27:13.667 --> 00:27:14.902 
這就叫做目的字符串

00:27:15.202 --> 00:27:17.538 
你可以針對多種受保護的數據類

00:27:17.604 --> 00:27:20.274 
把他們設置進你的app
和Info.plist中

00:27:20.340 --> 00:27:23.443 
我們認爲如果用戶理解
爲什麼你們想獲得數據訪問權限

00:27:23.710 --> 00:27:26.146 
他們就更有可能做出正確的選擇

00:27:28.916 --> 00:27:32.553 
就像姬蒂之前說過的那樣
提防着有限的“不動產”的可用性

00:27:33.120 --> 00:27:35.589 
讓我們的意圖變得透明增加用戶控制

00:27:36.023 --> 00:27:38.926 
我們考慮過Watch上的app
如何獲取用戶數據的問題

00:27:39.860 --> 00:27:42.829 
首先就像在IOS和OS X中那樣

00:27:43.597 --> 00:27:46.300 
watchOS上的app
並不能直接獲取用戶數據

00:27:46.600 --> 00:27:48.001 
直到獲得用戶的允許

00:27:49.536 --> 00:27:52.706 
然而和IOS和OS X
不同的是在watchOS上

00:27:52.773 --> 00:27:56.376 
用戶不能選擇接受
或拒絕設備本身發出的即時提示

00:27:57.244 --> 00:27:59.012 
或者說那些是指向iPhone的

00:27:59.379 --> 00:28:03.350 
正如姬蒂所說我們可以把
iPhone和與其配對的Watch

00:28:03.750 --> 00:28:07.020 
視作緊密相連的用戶
在其中一個平臺上做出的

00:28:07.087 --> 00:28:09.590 
關於隱私處理的決策將會
影響到另一個設備

00:28:10.190 --> 00:28:11.959 
在watch中限定“不動產”

00:28:12.092 --> 00:28:14.962 
我們認爲比起在
iPhone上面做要更有意義

00:28:15.729 --> 00:28:18.632 
在iPhone端用戶在更大的
屏幕上看到提示信息

00:28:18.932 --> 00:28:20.234 
其中包括目的字符串

00:28:20.300 --> 00:28:24.771 
它可以清楚得說明爲何你的iPhone app
和Watch app想要獲得訪問數據的權限

00:28:25.706 --> 00:28:27.908 
不像在IOS端你可以選擇是或者否

00:28:28.342 --> 00:28:30.244 
你可以選擇提示或者解散

00:28:30.377 --> 00:28:33.347 
當你做提示設置時
用戶不能在watch中做出選擇

00:28:33.614 --> 00:28:35.782 
因此會停留在一種未設置的狀態

00:28:36.517 --> 00:28:39.520 
在這種未設置的狀態
你將會稍後進行提示

00:28:40.654 --> 00:28:43.123 
舉一個未設置狀態的例子吧

00:28:43.557 --> 00:28:46.293 
用戶可以帶着Watch
去跑步而不是Phone

00:28:46.894 --> 00:28:48.595 
所以把你的app安裝在Watch上

00:28:48.962 --> 00:28:49.963 
你的app將會提示

00:28:50.464 --> 00:28:51.665 
這種提示將會被消除

00:28:52.032 --> 00:28:53.867 
而你的應用將會

00:28:54.101 --> 00:28:55.802 
在沒有數據訪問權限的
情況下繼續運行

00:28:56.336 --> 00:29:00.374 
但是在下一個時間節點
你的app將會再次提示

00:29:02.376 --> 00:29:06.547 
現在如姬蒂之前說的
這些設置包括你的隱私設置

00:29:07.080 --> 00:29:09.316 
都是在Watch和iPhone上共享的

00:29:10.117 --> 00:29:12.419 
我們認爲用戶和你的
應用之間有單一的聯繫

00:29:12.786 --> 00:29:14.621 
與iPhone之間有單一的聯繫

00:29:14.688 --> 00:29:16.256 
與Watch之間有單一的聯繫

00:29:16.323 --> 00:29:18.325 
因此我們可以把
這些單一的聯繫組合起來

00:29:18.392 --> 00:29:21.328 
變成一種在iPhone
在watch在你的app中的設置

00:29:22.229 --> 00:29:24.698 
而這存在於我們平臺裏的其他地方

00:29:24.898 --> 00:29:27.935 
在IOS端如果用戶對你的
app做出了關於隱私處理的決定

00:29:28.302 --> 00:29:30.637 
使得你的app的所有
進程都有獲取那些數據的權限

00:29:31.171 --> 00:29:32.673 
如果你在app中提示了地理位置

00:29:33.173 --> 00:29:36.844 
你的擴展應用也可以使用它

00:29:36.910 --> 00:29:40.480 
如果用戶是在app
擴展中首次進行提示

00:29:40.814 --> 00:29:42.950 
那麼整個app
也將獲得訪問數據的權限

00:29:44.384 --> 00:29:48.689 
在Watch平臺上用戶做出的決定

00:29:48.989 --> 00:29:52.659 
對所有的watch中的app
對原有app以及你的Glance

00:29:53.126 --> 00:29:54.728 
還有你的Complication
來說都是有效的

00:29:55.229 --> 00:29:57.631 
當用戶給你app的一部分提供許可

00:29:57.698 --> 00:29:59.900 
就相當於對你app的所有
部分都給予了許可

00:30:01.635 --> 00:30:05.772 
現在你知道在IOS,OS X和watchOS中
我們對什麼數據有訪問權限了

00:30:05.839 --> 00:30:07.975 
以及我們該如何提示它們

00:30:08.041 --> 00:30:11.345 
我們認爲一旦用戶在這些
平臺上提供了數據訪問權限

00:30:12.579 --> 00:30:14.648 
考慮如何保護它們是非常重要的

00:30:15.015 --> 00:30:17.484 
這裏有一些你應該利用
和清楚的一些新的安全功能

00:30:17.985 --> 00:30:20.521 
第一個就是App傳輸安全

00:30:20.988 --> 00:30:23.056 
爲了在默認情況下保證用戶交流的安全

00:30:23.457 --> 00:30:25.392 
我們引入了App傳輸安全體系

00:30:25.759 --> 00:30:28.295 
在IOS 9和OS X
EI Capitan平臺應用

00:30:28.896 --> 00:30:32.299 
在默認情況下你們在更高
層級的API中的交流

00:30:32.366 --> 00:30:35.669 
會需要用TLS 1.2版的
加密方式來實現保密性

00:30:36.170 --> 00:30:40.741 
如果你嘗試進行的連接違反了這些要求

00:30:41.175 --> 00:30:42.276 
將會出現報錯

00:30:43.877 --> 00:30:46.547 
如果你的app需要
向非安全域發送請求

00:30:46.780 --> 00:30:49.750 
你必須在你app中的
Info.plist中指定這個區域

00:30:50.384 --> 00:30:52.486 
如果想了解一下細節

00:30:52.553 --> 00:30:57.491 
可以關注一下明天上午9點的
NSURL會話與網絡方面的演講

00:30:57.558 --> 00:30:59.426 
或者關注今天下午的安全性演講

00:31:01.728 --> 00:31:04.031 
如果你真的想在APP
傳輸安全體系中聲明一個特例

00:31:04.097 --> 00:31:07.134 
你需要在你app中的
Info.plist中聲明然後隨意

00:31:07.201 --> 00:31:09.236 
設置一個或更多的這種密鑰

00:31:12.773 --> 00:31:15.142 
現在我要談論一下獎勵卡的問題

00:31:15.943 --> 00:31:19.713 
在IOS 9系統獎勵卡可以
出現在聯繫人列表中

00:31:20.047 --> 00:31:22.616 
我們知道有些獎勵卡使用了
用戶的電話號碼

00:31:22.683 --> 00:31:25.052 
郵箱地址或者其他
個人指向性明顯的數據

00:31:25.419 --> 00:31:27.221 
來作爲獎勵卡的標識符

00:31:27.821 --> 00:31:32.226 
所以爲了在獎勵卡以及聯繫
人列表的傳輸中保護用戶的隱私

00:31:33.060 --> 00:31:35.963 
我們給開發者提供了一種簡單的方式

00:31:36.230 --> 00:31:38.332 
在遍歷聯繫人列表時加密數據

00:31:39.333 --> 00:31:42.135 
你所要做的就是修改你的
pass.json

00:31:42.202 --> 00:31:45.806 
用這個新的nfc字典

00:31:46.340 --> 00:31:49.109 
你可以指定信息標識符和你的公鑰

00:31:49.576 --> 00:31:53.313 
從這開始當在非
接觸支付中用到獎勵卡時

00:31:53.614 --> 00:31:56.817 
IOS會謹慎得爲你加密信息

00:31:58.352 --> 00:32:01.622 
隨着IOS9中App搜索App歷史
記錄和App鏈接的應用

00:32:01.722 --> 00:32:05.292 
這意味着你可以存儲一些和你的app
有關以及在你app之外的信息

00:32:05.726 --> 00:32:07.861 
因此你需要做一個好管家

00:32:07.928 --> 00:32:11.598 
爲用戶保護好數據
這不僅包括位於你app裏的數據

00:32:12.032 --> 00:32:14.168 
還包括在你app之外存儲的數據

00:32:15.736 --> 00:32:18.672 
在星期三上午11點會有
一個很不錯的演講介紹這方面

00:32:18.739 --> 00:32:21.308 
到時候可以去聽一下
他們講的要比我更深入些

00:32:21.375 --> 00:32:23.744 
我將簡單得講一下
app的兩種數據索引方式

00:32:23.977 --> 00:32:26.413 
以及它們在隱私保護方面所起到的作用

00:32:28.015 --> 00:32:29.816 
第一個是
NSUserActivity

00:32:29.883 --> 00:32:32.886 
它是一個爲了支持
Handoff而被引入IOS8平臺中的API

00:32:33.420 --> 00:32:36.657 
在IOS 9中我們對其進行了擴展

00:32:36.757 --> 00:32:39.326 
所以你可以使用
NSUserActivity在你的app中

00:32:39.393 --> 00:32:41.295 
建立索引視圖讓用戶可以
回到那個地方搜索

00:32:41.662 --> 00:32:43.564 
比如在你的食譜app中

00:32:43.897 --> 00:32:47.301 
當用戶看到一個乾酪澆肉汁
土豆條的食譜時

00:32:47.367 --> 00:32:49.903 
你可以在視圖中建立一個
NSUserActivity並將其索引

00:32:49.970 --> 00:32:53.373 
然後用戶再次在手機裏
搜索乾酪澆肉汁土豆條的時候

00:32:53.640 --> 00:32:54.942 
顯示出來的結果就包括

00:32:55.008 --> 00:32:56.677 
他們曾經看到過的這個鏈接

00:32:57.511 --> 00:33:01.515 
在未來它可以幫助我們解放雙手
而不需要其他機器

00:33:03.817 --> 00:33:06.386 
我們從最開始就思考
如何讓搜索變得更注重保護隱私

00:33:07.588 --> 00:33:11.191 
我們之前所做的包括
把默認設置爲非索引數據

00:33:12.159 --> 00:33:12.993 
這是非常正確的

00:33:13.060 --> 00:33:16.330 
在默認情況下NSUserActivity
將繼續爲Handoff提供支持

00:33:16.396 --> 00:33:18.232 
如果你想製作可搜索的視圖

00:33:18.665 --> 00:33:21.802 
你必須得把eligibleForSearch
屬性設置爲真

00:33:22.469 --> 00:33:25.038 
如果你想把那個
視圖變成公開索引...

00:33:25.105 --> 00:33:26.507 
那個我們一會兒將要提到...

00:33:27.241 --> 00:33:31.345 
你需要做的也是把
eligibleForPublicIndexing

00:33:31.411 --> 00:33:32.246 
值設置爲真

00:33:33.413 --> 00:33:34.982 
此外還有一個你需要設置的值

00:33:35.048 --> 00:33:38.018 
如果你想把數據變成可變址的
需要用到expirationDate

00:33:38.085 --> 00:33:39.620 
正如姬蒂之前提到的那樣

00:33:40.153 --> 00:33:42.556 
保護用戶數據是保護
用戶隱私的重要組成部分

00:33:42.623 --> 00:33:45.459 
這可以通過刪除數據與用戶
之間的關聯來完成

00:33:49.663 --> 00:33:52.900 
現在我將要談一點關於
NSUserActivity和公開索引的問題

00:33:53.567 --> 00:33:56.270 
NSUserActivity
是一種很好用的簡單方式

00:33:56.336 --> 00:33:57.671 
它讓你的app變得可以搜索

00:33:58.205 --> 00:34:01.742 
我們提高索引方面的隱私安全
就是通過在默認情況下不進行索引

00:34:01.808 --> 00:34:06.647 
讓開發者來決定是否要在
特定視圖中添加索引

00:34:08.681 --> 00:34:12.719 
但是我們知道許多開發者想要添加一些

00:34:13.053 --> 00:34:15.289 
在所有設備中都能搜索到的公開內容

00:34:16.389 --> 00:34:19.126 
爲了實現這一點
我們想出了這樣一種方法

00:34:19.193 --> 00:34:22.161 
就是在保護用戶安全的同時
爲附加數據提供索引

00:34:23.597 --> 00:34:26.500 
當你創建了一個可搜索視圖

00:34:26.934 --> 00:34:28.969 
把它標記爲公共索引

00:34:29.335 --> 00:34:31.605 
如果它只包含可公開內容的話

00:34:32.505 --> 00:34:35.876 
然後當用戶搜索這一視圖並且使用它時

00:34:36.143 --> 00:34:38.011 
這一視圖的散表
就被髮送到Apple中

00:34:39.580 --> 00:34:41.181 
在經過多重設備之後

00:34:41.581 --> 00:34:44.217 
創建視圖的散表併發到Apple裏

00:34:45.252 --> 00:34:47.588 
最後當超過閾值時

00:34:48.889 --> 00:34:51.225 
真實視圖將會被髮送到Apple裏

00:34:51.958 --> 00:34:57.063 
正是因爲這個原因偶然被標記爲公開的
視圖並不會無意間被髮送出去

00:34:59.032 --> 00:35:00.300 
這就是NSUserActivity

00:35:00.367 --> 00:35:02.870 
現在我要講一點關於
CoreSpotlight的內容

00:35:03.036 --> 00:35:05.973 
CoreSpotlight是
IOS 9中新增的一種API

00:35:06.039 --> 00:35:08.308 
它使得你的app中的用戶內容可搜索

00:35:08.609 --> 00:35:10.978 
比如郵箱 聯繫人 日曆等

00:35:11.411 --> 00:35:12.980 
這些是派生數據

00:35:13.313 --> 00:35:16.884 
你需要像保護你app中的
基礎數據那樣保護它們

00:35:17.651 --> 00:35:20.187 
首先是要加入數據保護類

00:35:20.587 --> 00:35:22.389 
就像你對app中的數據所做的那樣

00:35:23.690 --> 00:35:27.060 
接下來要用索引中的派生數據

00:35:27.127 --> 00:35:28.795 
來實現數據管理

00:35:29.229 --> 00:35:31.865 
你可以存儲--首先你
應該存儲相關的用戶數據

00:35:32.232 --> 00:35:35.602 
比如有沒有人需要
看草稿或者刪除文檔？

00:35:37.738 --> 00:35:39.773 
當用戶在你的app中更新文檔的時候

00:35:39.840 --> 00:35:42.176 
你應該在索引中更新
這些文檔的拷貝文件

00:35:43.010 --> 00:35:44.811 
在用戶在你的app中
刪除文檔的時候

00:35:44.912 --> 00:35:46.747 
你應該在索引中也刪除文檔

00:35:46.813 --> 00:35:49.183 
由於用戶有多種在app中
刪除文檔的方式

00:35:49.249 --> 00:35:51.018 
像是刪除所有類型的文件

00:35:51.251 --> 00:35:53.987 
或者一個我們把它的
多種條目變得易於刪除的文件夾

00:35:54.054 --> 00:35:57.324 
直接刪除或者先搜索再刪除

00:35:58.425 --> 00:36:03.030 
這是一個簡要的概述
介紹了IOS 9中新的隱私保護特性

00:36:03.163 --> 00:36:05.199 
接下來再由姬蒂介紹

00:36:05.265 --> 00:36:08.368 
一些你們如果沒有用過
可以去嘗試一下的已有技術

00:36:15.442 --> 00:36:16.276 
感謝傑森

00:36:16.977 --> 00:36:19.413 
我想強調幾個已有的技術

00:36:19.479 --> 00:36:22.282 
它們讓保護用戶信息變得容易

00:36:22.616 --> 00:36:24.451 
你不需要自己去寫一些

00:36:24.952 --> 00:36:26.486 
基本的東西

00:36:28.989 --> 00:36:31.425 
Touch Id是用來保護你的
app的一種很好的方式

00:36:31.491 --> 00:36:33.393 
它也能保護你app中的數據

00:36:34.228 --> 00:36:38.165 
你可以使用app中的
Apple Pay來實現它

00:36:38.265 --> 00:36:40.367 
而不需要創建或者接收

00:36:40.434 --> 00:36:43.337 
用戶的一些基本信息以及信用卡信息

00:36:44.505 --> 00:36:46.073 
現在我要深入得講一下

00:36:46.340 --> 00:36:48.742 
隱私策略和數據保護方面的內容

00:36:49.610 --> 00:36:53.514 
在研究保護你的用戶信息的技術之外

00:36:54.047 --> 00:36:56.583 
向用戶解釋你對他們的數據做了什麼

00:36:56.650 --> 00:36:59.920 
也是非常重要的
如果你想和第三方分享數據的話

00:37:01.154 --> 00:37:04.958 
我們實際上需要對幾種固定
類型的應用實施隱私保護策略

00:37:05.526 --> 00:37:07.628 
其中包括和
HealthKit相連接的app

00:37:08.228 --> 00:37:11.331 
我們把引入隱私策略變得非常容易

00:37:12.165 --> 00:37:14.535 
在iTunes連接中你只需要輸入URL

00:37:14.835 --> 00:37:18.205 
它就會在你所有的
App Store中顯示

00:37:18.305 --> 00:37:20.908 
它給用戶一個在做購買決策之前

00:37:21.308 --> 00:37:23.010 
閱讀隱私策略的機會

00:37:23.544 --> 00:37:27.014 
你可以使用IOS中的創建數據保護類

00:37:27.181 --> 00:37:30.551 
來爲你的數據進行加密
其密鑰源於用戶的登錄密碼

00:37:31.585 --> 00:37:33.520 
這種加密技術有着驚人的力量

00:37:34.121 --> 00:37:38.091 
你可以輕鬆得利用它的優勢
不需要自己寫任何加密碼

00:37:39.893 --> 00:37:42.596 
現在 每個IOS設備

00:37:43.397 --> 00:37:48.001 
都通過密鑰層級管理來實施數據保護

00:37:49.002 --> 00:37:50.704 
它建立在硬件加密的基礎上

00:37:50.871 --> 00:37:53.841 
應用於所有的IOS
和watchOS設備

00:37:54.942 --> 00:37:57.744 
數據保護是由每個基礎文件來控制的

00:37:58.245 --> 00:38:00.113 
每個文件都被賦予一個類

00:38:01.348 --> 00:38:06.119 
這些類是否被解鎖
決定了訪問權限是否開啓

00:38:07.888 --> 00:38:11.291 
這裏有四種數據類我將依次進行介紹

00:38:11.892 --> 00:38:13.994 
但是你最要清楚的一點是

00:38:14.061 --> 00:38:17.998 
Ns文件保護直到出現
第一個認證時才完成

00:38:18.632 --> 00:38:19.967 
在IOS 7中

00:38:20.667 --> 00:38:24.404 
所有的第三方app
數據都默認成這種數據類

00:38:25.305 --> 00:38:29.243 
如今你的app
在啓動之前是不能運行的

00:38:29.309 --> 00:38:31.411 
直到用戶輸入他們的密碼

00:38:32.179 --> 00:38:35.115 
所以至少你的數據會
經過以上過程的保護

00:38:36.183 --> 00:38:39.353 
我們知道有些開發者
並沒有使用任何數據保護措施

00:38:39.753 --> 00:38:42.789 
因爲那樣做是沒有任何理由
也沒有任何價值的

00:38:45.792 --> 00:38:48.862 
所以我要迅速得介紹一下
這種模式中的幾種不同的數據類

00:38:48.962 --> 00:38:50.831 
正如你所見在沒有任何保護的情況下

00:38:51.265 --> 00:38:53.333 
即使用戶輸入了密碼或者沒有輸入

00:38:53.800 --> 00:38:56.904 
數據都是沒被上鎖的數據很容易被獲取

00:38:57.871 --> 00:39:01.775 
最後直到出現第一個認證
之前它們被保護的

00:39:02.209 --> 00:39:05.512 
這就是你的默認類

00:39:06.580 --> 00:39:09.149 
現在這在啓動中是不可訪問的

00:39:09.616 --> 00:39:11.785 
但是一旦用戶輸入密碼

00:39:12.085 --> 00:39:16.089 
所有數據都變得可用
即使設備加鎖了數據依舊可用

00:39:18.025 --> 00:39:20.227 
下一個數據就會一直
被保護只到開放爲止

00:39:20.594 --> 00:39:25.699 
這種設計面向的對象是
對設備上鎖敏感的數據

00:39:26.466 --> 00:39:30.003 
所以這裏有兩種操作類型讀和寫

00:39:30.771 --> 00:39:34.074 
一旦設備啓動了就關閉了數據訪問權限

00:39:34.441 --> 00:39:35.809 
用戶輸入了密碼後

00:39:36.243 --> 00:39:38.212 
你可以同時讀寫

00:39:38.846 --> 00:39:40.047 
當設備再次上鎖

00:39:40.681 --> 00:39:43.817 
你不能讀數據但你依舊可以寫數據

00:39:45.219 --> 00:39:46.987 
最後我們完成了保護工作

00:39:47.287 --> 00:39:49.590 
現在對於所有的敏感數據

00:39:49.890 --> 00:39:52.392 
包括健康數據金融信息

00:39:53.627 --> 00:39:56.930 
在設備啓動之後它們變得不可用

00:39:57.931 --> 00:40:01.235 
當用戶輸入了密碼數據就變得可用

00:40:02.202 --> 00:40:05.038 
當設備上鎖數據就不能用了

00:40:06.907 --> 00:40:08.842 
這將帶來一個很大的工作量

00:40:09.109 --> 00:40:11.912 
來思考你要應用哪種數據保護類

00:40:12.980 --> 00:40:15.782 
最後確認你已測試過數據保護是可用的

00:40:16.149 --> 00:40:19.620 
你可以通過這些內容來覈查
Settings, Touch ID和Passcode

00:40:19.820 --> 00:40:22.689 
向下滑動看看你是否啓動了數據保護

00:40:24.424 --> 00:40:27.127 
我們今天講了許多東西

00:40:27.528 --> 00:40:32.533 
你需要在IOS
和OS X上測試你的app

00:40:32.833 --> 00:40:34.935 
你希望理解這些改變所帶來的影響

00:40:35.202 --> 00:40:38.872 
來保證你依舊可以
爲用戶提供優秀的體驗

00:40:39.806 --> 00:40:40.974 
有目的地提示

00:40:42.276 --> 00:40:45.179 
確保讓數據最小化 保持更新

00:40:46.180 --> 00:40:49.216 
從一些我們今天講過的
平臺中的技術中獲益

00:40:50.184 --> 00:40:54.288 
最後用戶隱私安全是我們共同的責任

00:40:55.189 --> 00:40:58.625 
我們必須攜起手來

00:40:59.193 --> 00:41:02.996 
我們應該保護用戶的隱私權

00:41:04.031 --> 00:41:05.165 
謝謝大家