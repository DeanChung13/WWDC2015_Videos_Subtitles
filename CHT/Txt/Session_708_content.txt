調試能量的問題
你們好
嗨大家好
早上好
希望你們在蘋果全球開發者大會上愉快
我叫Abhinav Pathak
和我的同事Pai-Han Huang
將要談談調試能量的問題
我們將向你們顯示我們現有的工具
以及我們今年特意爲iOS構建的新的工具
使用這些工具你發現你的應用程序中的能量問題
另一方面就是了解決這些問題客戶就會真正喜歡你的程序
讓我們開始
紅色的電池圖標
當它出現的時候我們都很憎恨它
客戶也很憎恨它
具有良好的電池壽命對於精彩的用戶體驗是十分重要的
一次又一次證明人們所想要的最重要特色是電池的壽命
在Apple爲確保客戶獲得良好的電池壽命
我們做出了很大的努力
然而通常客戶運行的應用程序
是從它們的設備中吸走能量的主要原因
爲了幫助我們的客戶瞭解
哪個程序消耗電池能量哪個程序耗能最大
幾年前針對OS X側我們就有了活動監測能量影響工具
在這裏你可以看到
每個應用程序瞬間及一段時間內的影響
這樣用戶就可以瞭解他們的設備發生了什麼
在iSO 8我們引入了電池使用用戶界面
一個面向用戶的UI
在這裏他們可以看到最後24小時以及最後7天內
能量在他們所使用的不同的應用程序中的分解比例
排在前面的應用程序可能有正當的理由
“嗨 我喜歡這個應用程序所以我一直在用”
爲了使客戶更好地瞭解這裏的關鍵因素是什麼
今年我們在它的頂部包括了一個單獨觸發器
在這裏他們可以切換並且看到使用了多少應用程序
獲得多少屏幕時間
以及它在後臺運行使用了多少
然後他們就可以進行評估“嗨 我用它用的多”
或者“嗨 這個程序消耗了很多能量”
這個講座就是關於如果你的應用程序在列表中名列前茅
你怎樣把它降下來同時不影響用戶的使用的問題
這個講座也針對通常耗能很少的人們
如何才能耗能更少並且獲得完美的客戶體驗
爲了更好地進行概括
我們將快速介紹能量的基本原理和最佳範例
我們將對早晨的講座進行總結
我們將向你展示能量調試流程
以及我們用來調試能量的工具
我們將進行演示
我們爲這次講座專門構建的樣本程序中修復能量問題
向你展示修復能源問題是多麼簡單然後我們就將結束這次講座
就這麼簡單
每個人都知道能量101
能量等於功率乘以時間
我們現在看到這裏有個圖表
X軸是時間Y軸是功率
這是一個應用程序使用波形圖
發生了什麼
我們說一個用戶啓動一個應用程序一堆活動在後臺支持這個程序
然後該程序就懸停
最重要的一點是
圖表下面的整個區域都是這個特定的應用程序的能量消耗
能量是由功率和時間來決定的
爲了進一步說明這一點
我們在這裏取兩個長方形
它們消耗的功率是不同的消耗的時間也是不同的
但是他們的能量消耗是相同的
第二個概念
有些叫做固定成本的東西有些東西叫做動態成本
我們在系統中的許多的硬件組件
如果你要使用它們我們必須將它們引入一種
它們可以開始服務於你的請求的狀態
相比休眠轉態這些狀態消耗能量很大
一旦將它們引入它們就做你要求它做的工作
然後我們讓它們保持等待狀態
你知道的將會有更多的工作出現
一旦我們看到沒有出現工作出現
我們讓它們平靜下來進入睡眠
固定成本可以是非常非常昂貴
我們在整個的講座中都將追蹤這個固定成本
只要它開始影響你的應用程序
當說到降低能量的使用方法有三條非常簡單的你需要遵守的規則
第一個規則永遠不要做
客戶真的需要完成那個工作嗎？
如果你不做它固定成本 動態成本 能量功率時間
我們說到的所有的一切東西都是零
真了不起
如果你必須做就少做點
用最少的工作量來滿足客戶的需要
下一個就是在一個更好的時間去做
一個客戶在野外拍攝照片
我難道需要現在就把照片上傳到服務器上面
也許應該有些耐心等到用戶將電源插頭接上再說
第三點就是要高效地去做
什麼是最有效的算法或者我用最好的辦法來服務這個請求
我們可以看到這些不斷地在我們講座的不同部分中出現
這些問題需要插入我們所具有的能量調試流程和工具才能解決
讓我們來看看能量調試流程是什麼樣子
它與正常的軟件工程調試很相似
你都做些什麼你編寫代碼並構建它
你在一個非常簡單的調試器上運行代碼
該調試器將向你顯示你的代碼中的高級別問題是什麼
你可以很容易地識別 修復很多問題然後你再重新運行它
然而有些問題很難
你不斷進行修改並說，“給我一個集中調試器，好嗎？”
“嗨 我有內存問題”
讓我獲得一個針對內存的集中工具
可以直接針對我的程序代碼的確切行問題在哪？
一旦你用這個完成了調試
你將它發給你的客戶你的客戶就可以使用了
在OSX一側有Xcode在這裏你可以編寫和構建你的程序
作爲通用調試器的一部分在Xcode的內部有能量調試工具
我們馬上就要談到這種調試工具
這些說明最主要的是告訴你的應用程序是如何運轉的
作爲儀器的一部分我們有集中工具
一旦你識別
你會說“嗨 系統的這部分有問題讓我過來修復這個問題”
至於客戶會受到能量消耗的影響
他們可以過來看看
在我們進入到工具之前
讓我們來看看在OSX上的能量調試優先級
原因就是該工具非常關注能量調試優先級
因爲它們能向你指出你需要修復你的問題的確切位置
OSX上的優先級是CPU和GPU
它們有很高的固定成本
要將它轉入它們可以爲你服務或者你的請求在空閒轉態
消耗的功率是它們在休眠狀態下的十倍
一旦它們在空閒狀態
如果你使用了百分之一的CPU
那就是要比最高空閒功率消耗多百分之十
從那時起 指數增加
百分之十的CPU 2倍的空閒狀態百分之百的CPU 一百倍的空閒狀態
這裏的規則很簡單
如果你不需要 就不要驚醒CPU
讓這頭大熊睡去吧 不要去挑撥它
我們在Xcode中的工具我管它叫能量計量器
它打印出你的能量報告就像是這個樣子
你如何到達那兒
你如果在運行你的應用程序你點擊調試分析部分
你一點擊那兒你就會看到一羣計量器
點擊能量影響計量器
你就會看到那個報告
你在報告中看到什麼
最主要的是你會看到你是否是OSX中的壞公民
最根本的是是否你正在使用超高CPU
如果你在阻止
你的應用程序在後臺中且用戶看不到它
系統會嘗試讓你進入App Nap中這是一種後臺懸置狀態
而你正在阻止系統那樣做
你並沒有積極服務於任何請求
但是你消耗了很多的能量
空閒阻止你不讓CPU進入空閒狀態
如果它不能進入空閒狀態它就不能進行休眠狀態
一旦進入休眠狀態CPU喚醒開銷就會說
“嗨 負責把這個傢伙喚醒”
你一旦找出了最可能發生問題的地方
你能做的就只能在報告的下面
你有我們剛纔所描述的事情
但是你有這些可以跳入工具的按鈕
這些工具專門爲每個區域使用的
你知道的它們能夠幫助你定位哪行代碼正在導致很高的CPU的使用
哪行代碼正在導致喚醒開銷
你可以繼續調試你的程序
說到減少OSX上的能量
我們再次強調我們的三個簡單的規則永遠不要做 做得少一些
你想要合併所有的計時器
你不想不斷地喚醒系統
最小化CPU喚醒
在最佳時間喚醒
使用後臺活動調度程序API
在這個調度程序你可以指定許多的參數
並且可以讓系統來替你選擇最佳的時間
有效地去做
在工作隊列中設置最佳的工作優先級QoS工作優先級
編寫一個計算程序算法
我們接着說iOS
CPU仍然是主要的能量消耗
但是由於這些設備與OSX中的設備是不同的
其它的幾樣東西也在起作用
首先是兩個外圍定位和連網
它們與CPU一樣在一些情況下很費能量
接下來當一個應用程序在後臺中運行時
你的程序會消耗所有這三個硬件
它會消耗許多的能量
你並沒有顯示能量但是所有其它的組件消耗能量都很巨大
讓我們來一個個看一下
定位能量通常是這樣起作用的
它的功率並不很高
功率被你已經調用的API及你所調用程序的精確度的數據所消耗
時間組件很大那就導致了能量變得巨大
說到修復定位同樣的原則 從來不做
只有你真的需要它時只做連續定位
用戶就會真的請求它
請在完成時就立即停止
一旦你獲得了定位一旦你的請求獲得滿足 就停止
下面是是高效地去做
你需要的最精確是什麼
你需要知道三英尺之內的用戶在地球的位置嗎？
或者爲晴空萬裏城市預測氣候嗎？
你到底想要做些什麼
我們進入到定位網站
我們說“嗨這裏有一批人們想要使用範例”
每個使用範例我們都設計了API目的是更好地服務於開發者你
試着讀一下這些API什麼是你真正想要的
我們將爲你做好能源管理工作
說到連網
類似的原則從來不做 消減傳輸
你能緩存嗎？你能壓縮嗎？
你需要在最小的組成要素上最高質量的媒體嗎？
你能在更好的時間去做嗎？你考慮過容忍嗎？
什麼時候需要它？
你能將它標爲任意嗎？
你將它標爲任意的時刻就是系統接管的時刻
你可以規定在接下來的6小時或12個小時內
我需要將這個上載或下載
系統就會計算出什麼是最佳的時間來爲你做這個工作
一旦工作完成 系統就會告訴你嗨 工作幹完了
做的更加有效些
合併傳輸
讓我們來看個例子這個是什麼意思
我們說你有個同步數據到服務器的請求用戶在使用你的應用程序
因爲數據在設備上產生用戶只能週期性地同步
很簡單的解決方案
當數據正在設備上產生的時候只需要不斷地推送它
這會發生什麼
每推送一次你提供了數據
你發送你的10比特 100比特射頻停留了很長的時間
然後它睡着了
下一次推送相同的現象在重複
固定成本在那個階段是很高的
你如何來修復它呢
非常簡單
合併所有的傳輸
讓用戶與該設備進行互動構建一個狀態
然後偶爾將狀態發送到雲上
這樣你就只支付了一次固定價格的費用
下來討論後臺
首先 當你的應用程序在後臺運行時
它耗盡了用戶的能量
如果沒有必要不要在後臺中做任何事情
如果你需要去做它儘快調用你的任務完成處理器
這個任務完成處理器是在向系統表示說“嗨 我完成了
請懸置我吧請讓設備睡覺吧”
做得更有效率些
正如你所知有許多的後臺API可以幫系統忙
在你發現的最佳時間最佳的能量消耗週期
請替我做這個工作系統就會替你去做
讓我們回到iOS上的能量調試流程
我們目前只有Xcode在這裏你編寫和構建你的代碼
客戶擁有電池使用用戶UI他們可以看到程序是如何節約能量的
到目前爲止我們有開發的工具
叫做能量診斷工具
它可以對你的程序的行爲做初步診斷
讓我們來看看這個工具
你怎樣才能使能它呢
你進入到設置開發者來到記錄窗口
你打開這裏的能量觸發器
然後你就說“嗨 開始記錄”
一旦你開始記錄
就像你的用戶那樣使用你的應用程序
持續上幾個小時12個小時 24個小時 幾天
一旦你完成了只要點擊按鈕 結束記錄
下面將你的設備與Mac連接進入工具 選擇能量診斷
然後說“嗨 導入你剛纔的記錄數據”
你一旦那樣做你就獲得像這樣的圖片
這裏試圖想向你說明當你在使用時
那些佔用大量性能硬件的狀態
你會看到GPU的狀態你會看到Wi-Fi 藍牙
你會看到它們呆了多長時間什麼時候在上面 什麼時候離開等等
你將會看到有多少數據包從每個接口中發出
CPU的活動性是什麼
在頂部 你將會看到能量使用等級是20中的多少量
如果你是20中的20相信我 你有麻煩了
這是非常非常高的能量消耗
你希望靠近1
如果你想要做長期的實驗這個工具是很不錯的
但是它不能做的是它不能告訴你爲什麼硬件能量在上升
你請求它了嗎？你在哪兒請求它了？
它並沒有精確定位沒有細緻到進入你的代碼
爲解決這個問題
今年我們引入了
在iOS上的能量計量器以及一些工具
這可以用來精確定位產生問題的代碼
爲了進行詳細說明讓我們來進行演示
我的同事Pai-Han Huang將來談談這個
好 在這個演示中我將談談這個能量故障工具的主要特點
演示應用程序
向你展示如何使用這個新工具來識別和提高你的應用程序的能量效率
作爲一名開發者
我喜歡這些新的工具因爲它們易於使用 有效
因此在演示結束後
我希望你們和我一樣將這些新的工具用到項目設計中
演示主要有兩部分組成
一個是新工具箱另外一個是演示應用程序
首先讓我來向你們介紹新的工具箱
我們看到的是iOS能量計量器的屏幕截圖
是其它新能量調試工具的入口點
它在哪兒呢？
它實際上在Xcode調試導航器的內部
你可以在這兒看見
在你通過Xcode啓動了你的應用程序後
你就會自動地進入到這裏
當你點擊它的時候它就會將你帶到屏幕的右手側
能量計量器能將代碼的能量影響可視化
瞬間的和實例的平均的能量影響也可以實現
因此首先是你的代碼瞬間的能量影響可以在那裏的場計量器中看到
在這個圖表中有三個不同的區域
在里程錶中 最下面的一個當指針指向一個綠色區域
它表明你的代碼的能量影響實際上是合理的
祝賀你你是iOS生態系統的好公民
但是我仍然要建議你
去看看這些新的工具看看你如何能使你的客戶更加快樂
當指針向上移動時它就進入了黃色區域
在黃色區域中你的代碼的能量影響是很大的
很有可能你沒有仔細對待它
在電池使用用戶界面中你的應用程序會顯示很高能量消耗
因此請使用新的能量調試工具來看看如何提高你的代碼的能量效率
但是如果指針在繼續向上移動你進入了紅色區域
紅色區域表示代碼的能量影響是很大的
它意味着只要稍微使用你的應用程序
用戶會很明顯地感到設備上的電池有明顯地下降
所以請使用新的工具
請使用新的工具！
對不起 我表示道歉我那樣不太好 我總是抗議
那些不認真對待電池壽命的人
我向你承諾 我是個非常不錯的人
請來今天下午的最後一個講座我們來談談
好麼？
但是速度計能向你提供
應用程序的瞬間能量影響的整個信息
如果你想看到更多的分解信息
你應該看這兒
能量影響分段
這個圖表每秒鐘就要刷新一次
如果你的應用程序給CPU
定位或連網引入了任何的工作負載
你就會看到一個方塊顯示在對應的時隙中的頂部的三行中
正如前面的講座中所提到的
你的應用程序不只是在前臺能夠消耗掉大量的功率
在後臺也一樣
因此基於此次觀察我們有了第四條有關後臺規則
當你的應用程序呆在後臺不離開
你就會看到移動的方塊顯示在第四行上
在這個圖表的上面你就會看到一系列的彩色條
它們就像是這個
有兩種顏色
紅色表示開銷
用提供的系統資源如射頻模塊來進行你的應用程序的工作的能量
它也與早期的講座中硬件的固定成本相対映
對於藍條
它表示由你的應用程序引入用來服務工作負荷的能量
除了瞬間信息我們還提供平均信息
例如像這個 百分率的平均開銷
這個傢伙向你展示了平均的能量影響
在底部 你會看到一系列有關圖標
CPU、 定位、連網和後臺的說明
它還提供一些你如何優化它們的建議
但是請記住
iOS能量計量器的設計是爲了
使你迅速高層次地瞭解代碼的能量影響
如果你想要更詳細的信息 更加分解
那麼請在這個按鈕上點擊
在你點擊這個按鈕後它就會將你彈到對應的工具中
爲你的應用程序提供分解的能量信息
這是iOS能量計量器
讓我簡單地向你介紹工具
工具你們很多人都使用過它們
它看起來很相似
例如 你看這個在屏幕上的是定位工具
我們如何開始
我們以觸發這個按鈕來開始記錄它然後停止
在你記錄後你將會看到像這樣的系統活動
你就會明白爲什麼你看到這樣的活動性
例如在這裏你會看到定位服務它正在努力請求定位
如果你想要更多 更詳細的信息
到這兒 擴展細節
然後你將使用這個傢伙
代碼堆棧
這就是對工具的介紹
接下來讓我來簡單地說下演示程序
屏幕上你將會看到我們的演示程序的屏幕截圖
我們管它叫能量兄弟
因此作爲一名iOS能量軟件工程師
我迫切地想知道是否我能夠在每個地方提高我的能量效率
不只是我的電話而且是我的日常生活
能量兄弟可以很好地滿足我的需求
例如我可以用它拍攝一張圖片
它會從我拍攝的圖片中提取能量計的信息
它會詢問我的設備的定位
根據我的定位獲取氣象信息
將氣象信息與我的使用相關聯顯示在屏幕上
結構是這樣的有個集中數據管理器
如果我從那兒導入一張圖它就嘗試着對它進行採集
並且基於定位
它會嘗試着尋找一個連網服務來根據我的定位獲得天氣信息
然後數據管理器會將這個信息關聯作爲一個曲線顯示在屏幕上
然後我們試着給它一張圖片看一下這個新工具
是如何幫助我們識別和提高能量兄弟的能量效率的
在左側的屏幕上你將會看到Xcode
右側是我的測試設備的屏幕截圖
好 讓我們通過打開項目文件來啓動能量兄弟
它目前正在做的是在我點擊了這個圓形按鈕後
它就嘗試着構建 發送二進制文件
併爲我啓動它
一旦它被啓動，我們就會看到這個
它在這兒
讓我們來調試這裏的導航器
能量影響就在這兒
我們繼續
我們最想做的就是
看看這裏是否有活動的方塊
因爲我並沒有在用戶界面做任何事情
因此看起來沒有什麼活動的方塊
這是個好的現象
因爲在應用程序空閒的時候是不應該有過多的事情發生
這樣很好
讓我點擊“導入圖片”導入一張圖片
從我的相冊中選擇一張圖片
它將試着提取信息而我將設置採集
好了 我看到許多的活動出現了
包括CPU 連網和定位
但是從它們當中我立即注意到一件事
那就是定位一直都在進行中
這可不合情理
因爲能量兄弟可不是那種跟蹤你跑步鍛鍊的應用程序
那麼我爲什麼需要持續監控我的設備的定位呢
這太不合理了
因此來看看定位工具將會告訴我們什麼
以及我們如何來識別代碼行來改進這種情況
接下來我將要點擊定位工具
我說是重啓
然後你試着用這個工具爲我啓動這個應用程序
好了讓我來重新再次導入圖片
設置採集
繼續
好了在屏幕上你可以看到這個
這是定位活動率
它不停地在進行 沒有停止
但是它在哪兒
我們在哪兒導入的
看這個
進入到擴展細節
就是這部分請求定位
那是我們如何請求定位服務
讓我們停在這兒
回到Xcode
查找請求定位
好了它已經在這兒了
那麼請求想要做什麼呢
首先你想要設置確定視圖控制器
在這一片代碼中你想要建立創建一個定位管理器
然後你就要調用起始更新定位
在這一行之後
所發生的是定位服務通過那的一個回調
來週期性地向我們推送位置更新
那麼在回調中讓我們看看它做了些什麼
首要的事情是你想要看這裏是否有更新的任何東西
如果它是零那是無效的我們忽視它 返回
然後我們將它保存
我們說“是否定位是水平精度是實際符合我們的標準和期望”
如果沒有我們返回
如果有
那麼我們會試着處理確定視圖控制器內部的定位
然後返回
不斷地重複這種回調路徑
每當我們從定位服務中接收到一個回調就這樣
推送看起來並不好
那麼我們應該怎麼做呢？
我們應該做的就是當我們獲得了一個數值時就停止它
就像這一行
我們說當我們獲得了一個定位數值更新我們就將它停止
讓我們來看看再次啓動
看看能量計量器將會告訴我們什麼
我希望看到的是在我首次接收到一個成功的定位更新後
我應該將定位停止並且定位服務不應該永遠在進行
讓我們等待將它啓動
嗯
好 進入到iOS能量計量器
讓我再次試着導入一張圖片
從圖庫中選擇一張圖片
設置採集
好了 定位一秒 兩秒 三秒 四秒 它不見了
只是一行代碼就起到了立竿見影的效果
你可以仔細思考下這個場景
所以如果這個應用程序已經打開了很長時間
想象一下通過修改一行代碼你可以節約多少能量
真是令人驚歎
讓我們多嘗試幾次能量兄弟
看看當我們導入另一個下次會發生什麼
好了 我們導入了另一個
我看到定位出現了四秒
但是這次
我注意的大事件是連網服務
這看起來不太好
能量兄弟想要發現連網服務的原因是它想要獲得天氣信息
但是我兩分鐘之前剛查詢過
所以天氣不會在兩分鐘內甚至是一個小時內有很大變化
我可以說天氣也不會有多大變化
我們想重新連網的目的是什麼
儘管我們早在兩分鐘之前已經有過請求
因此讓我們直接到代碼看看我們如何來修復這個問題
我們實際上請求定位的地方就在天氣文件的內部
有個函數叫做獲取如果失蹤
讓我們來看看它在第一部分做些什麼
我們嘗試着設置一些參數
如日期 基於查詢的URL
基於設備定位的URL以及當前日期
以及我是否在今天之內進行過這種查詢
你將爲定位座標保留原點座標
你將要設置一個完全是一個小時的秒的數目的常數
所以我們應該首先嚐試去做的是
如果我們今天已經查詢過了
並且從兩分鐘前我們最後一次查詢起
數據管理器已經提取了天氣
那麼我們說我們就返回
下來是如果我們今天沒有做
並且數據管理器已經提取了天氣
那我們還是返回
如果這兩種情況都不滿足
那麼我們就嘗試着建立一個
基於定位 日期的任務我們將在這裏下載它
那有什麼錯麼
它出錯的原因實際上在這兒
計量器內部
因此我們將添加像這樣的另外一種情況
就是說如果我今天已經完成的了這個
並且先前的提取在一個小時之內
那我就不再做它
讓我們來再次啓動它
來看看如何在能量計量器的內部看到改進的地方
我們希望看到是這樣的
因爲我們在如五分鐘之前就完成了提取
當我們在下個小時內再次導入一張照片的時候
就不應該每次都看到任何的連網
讓我們來看看能量計量器是否同意我的理論
好
開始
我嘗試導入一張圖片
從相冊中選一張圖片設置採集
我看到了定位
它像以前呆了四秒鐘
但是神奇的是所有的連網都不見了
這正是我們所希望的
所以這是提高我們的能量兄弟的能量效率的又一種好辦法
除了前臺
能量兄弟還可以在後臺消耗大量的電池
讓我們看看當能量兄弟實際上在後臺時能量計量器能告訴我們什麼
我們通過點擊返回主頁按鈕將能量兄弟放入後臺
我們看到的是這兒
我們看到許多能量兄弟的後臺活動
那就意味着只要能量兄弟在後臺
設備就不能休眠
這樣就會消耗大量的能量因爲保持設備喚醒狀態要有固定成本
這並不合理因爲能量兄弟不需要在後臺做任何事情
這裏出什麼錯了嗎？
當我們真的要轉到後臺的時候讓我們進入到回調
這就是代碼
它做些什麼
它做以下事情你在設法設置後臺任務標示符
它們所做的就是爲數據管理器存檔
就是將所有更改都存入數據管理器中
它們會說等待輸入
如果真的要完成它我們就會在後臺任務中編寫代碼
聽起來合理嗎？
不合理爲什麼不合理？
因爲我們的應用程序一直會在後臺對不對？
那麼用戶如何能夠真的通過用戶界面與能量兄弟來進行互動呢
所以根本就沒有輸入
而我們一直在等
這看起來可不太好
我們應該做的就是我們不應該等
相反的
我們應該做這樣的事情
在我們將數據存檔到數據管理器後
我們將立即調用後臺任務使後臺任務標示符無效
讓我們再次啓動能量兄弟來看看能量計量器會告訴我們什麼
我們希望的是這樣
在我們進行數據管理器中的所有更改後
它就會直接退出它本身釋放控制給助手
它將不會像以前那樣一直呆在後臺中
好了 進入能量計量器
將能量兄弟放入後臺中
我們現在在後臺一秒 兩秒 它消失了
這次我們又贏了
所以要記住我剛纔做的一點點現場修復
你就會看到有顯著的改進
下來Abhinav將繼續向你們介紹
因爲我們持續幾個小時甚至一天都是在講
進行重大的電池改進的內容
我的演示就到這裏下來還是Abhinav
謝謝 Pai-Han
這是個很不錯的演示 回到幻燈片看看演示都發生了什麼並做個總結
我們開始使用能量兄弟無效率的代碼我們像用戶那樣運行
看看都發生了什麼
這所有的都亮了
糟糕 糟糕 真糟糕能量消耗太大了
你的應用程序在電池用戶界面上能量消耗很高
我們如何修復它？
我們來到定位 我們說“嗨 定位被啓動了 那麼停止”
改了一行代碼定位停止了
讓我們看看之前和之後它看起來是什麼樣子
如果你聚焦定位時間軸你就會看到定位一直在進行着
後來只是在每當有關一張圖片導入有實際請求的時候定位才進行
讓我們繼續說連網
之前每張新圖片導入我們就獲得天氣信息
那可不好我們想要消減傳輸
我們放入了一個很簡單的塊
嗨 如果這是最近調用的 不要管了
我們不再需要新的信息
那對能量計量器有什麼影響
還是兩張圖片之前和之後
如果你聚焦連網部分
連網在很長時間內都是高亮的
頂部的紅條一直在高亮着說明連網硬件消耗很大
在應用程序使用期間消耗了很多的能量
在底部我們只做了一次連網
那之後最近剛調用過的就不再做了
後臺對話怎麼樣
當我們進入後臺的時候我們將我們的狀態存入數據庫
然後說“嗨 讓我們等待用戶輸入”
不是等待用戶輸入的好地方目前用戶可能在輸入任何東西
非常簡單的修復
我們說不要等待用戶輸入了
只需要調用任務完成處理器
告訴系統“嗨 我完成了 懸置我吧讓系統休眠吧”
之前和之後能量計量器看起來是什麼樣子呢
讓我們集中於後臺行
頂部的後臺一直在運行
在底部一旦我們完成了數據庫的存檔
後臺的工作就完成了我們被懸置了
太神奇了
讓我們來看看之前和之後的整個的代碼
之前我們看到一切東西都在發亮
如果這發生在你的程序上這就是個問題
之後我們進行同樣的使用給用戶提供同樣的效能和體驗
但是硬件上的能量負載卻非常非常小
正如我們所承諾的這個幻燈片最重要的是在開始
如果你的應用程序是頂部的情況
請做些更改
你就會看到你的程序出現在用戶界面的底部
我們所做的就是拿了兩個新安裝的iPhone 6
在其中的一個安裝了無效率的代碼
在第二個安裝了經過修復的代碼
讓它們完成完全相同的工作量同時也在運行着其它的應用程序
對能量兄弟和其它的應用而言都是相同的負荷量
我們發現修復代碼要少消耗百分之五十的能量
包括顯示能量
兩個應用程序都是完全相同的
在右頂部你看到電池用戶界面百分之二十八
而優化過的代碼下降很多
用戶獲得了完全相同的東西
對這個講座做個總結
對於獲得完美的用戶體驗電池壽命確實很重要
設計應用程序時要記住三點
從來不做 儘量少做
更有效率地做
在良好的時間去做
後臺應用考慮得更加周全
請嘗試新的調試工具
我們有實驗室我現在就說的更加詳細些
離開時拿份我們的能量指南
它包含有我們這次講座的所有信息甚至更多
將你們的應用程序帶到能量實驗室
有關你在何處可找到能量指南的更多信息
請找這次講座的技術支持聯繫
最後與這些討論的相關講座
主要是我們說過的一些概念但是更加的詳細
謝謝大家來參加講座