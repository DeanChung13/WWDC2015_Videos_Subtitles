歡迎來到自動佈局迷宮 第二部分
大家好
感謝來參加講座我是傑西
負責AppKit中的
Auto Layout和Foundation框架部分的工作
佈局是我們設計應用時
最基礎的工作之一Auto Layout 
非常乾淨簡潔但是有時似乎
也有些神祕今天我來介紹
Auto Layout不爲人知的幾方面
並會做詳細解釋
這是兩部分講座的第二部分內容
這裏是我們
準備介紹的話題簡介
我希望先從佈局循環講起
大家可能都知道怎樣配置用戶界面
但是Auto Layout還是有些內容存在未知
可以進行配置
運行應用獲得佈局
希望這就是你想要的佈局 但如果不是
很難知道該從哪裏下手
我想了解中間這裏出了什麼問題
也就是怎樣從視圖中獲得約束
再到將框架安排到這些視圖中
這裏是整個流程的高度概述
先是應用高興地運行循壞 如此往復
直至約束改變使得計算出的
佈局需要有所不同
這會導致需要安排延遲佈局過程
當佈局過程最終出現時
我們經過層次
並且升級視圖的所有框架
這有點抽象我來舉個簡單例子
也就是說 當我們不勾選頂部的複選框時
我們將調整約束收縮窗口
並隱藏底部的複選框
開始時 框架是這樣的
調整約束時佈局引擎關於
每個內容的位置概念都已發生改變
但是UI還沒有更新
接着當佈局過程繼續時 
UI實際上的改變是與引擎認爲的方式相匹配
我們來談談約束改變
你所創造的約束變成了
數學表達式 保存在Layout Engine中
因此約束改變實際上是可以影響
這些表達式的任何內容這其中包部分
很明顯的內容例如激活或
關閉約束改變優先級
或約束的常數但是也有不那麼明顯的
例如操控視圖層次
或是重新配置部分控件
因爲這些可能會間接導致約束改變
那麼 約束改變時會發生什麼
首先會發生的是 
Layout Engine會重新計算佈局
表達式由這些變量構成以代表諸如
特定視圖的原點或大小尺寸
當我們重新計算佈局時
這些變量可能會收到新的值
出現這些情況時
它們所代表的視圖會得到通知
並將父視圖標爲需要佈局
這實際是導致安排延遲佈局過程
如果來看這裏的示例
大家會在這裏看到框架實際會在
Layout Engine發生改變但在視圖層次中尚未變化
當延遲佈局過程繼續時
目的當然是要將位置不對的視圖
進行重新排布
我們完成後所有內容都各就各位
過程一詞實際有些不太恰當
這裏出現的是兩個過程
第一個是爲了更新約束
其中的想法是要確保
約束是否有任何未決改變
在我們需要費力通過視圖層次 對所有視圖
重新定位之前 這些問題現在就出現了
接着 第二個過程發生在視圖重新定位的時候
我們來談談更新約束
視圖需要顯性請求
來調用升級約束方式
這和setNeedsDisplay的運作方式大體相同
調用setNeedsUpdateConstraints
不久之後 將會調用升級約束方式
的確 所有這些都是讓視圖爲
下一個佈局過程有機會
及時修改約束但實際上並不常常需要
所有的初始約束設置都應該理想地出現在
Interface Builder中
或者如果當真發現需要
在程序中分配約束
viewDidLoad這樣的位置則更好些
升級約束只是針對需要
定期重複的工作
而且還非常簡單
當發現有必要時相應修改約束即可
不過如果將邏輯從另一個
相關代碼中拿開 並將之移至
稍後會執行的不同的方式中
代碼就會很難繼續更難去
繼續維護更難以讓
其他人理解
那麼在應用中更新約束
最後 會影響到性能表現
如果發現單純相應改變約束
速度太慢的話
升級約束可能會幫你解決問題
結果就是在更新約束內部改變約束
實際要比
在其他時候改變約束快得多
原因在於引擎可以分批處理
在這一過程中發生的所有約束改變
通過調用整個數組約束 來激活約束
而不是單獨激活每個約束 
這樣會實現
同樣的性能優勢
如果有個視圖根據某種配置調整 
需要重建約束 我們所發現的
一個常見模式會非常有用
結果就是這對具有這類需要
配置視圖而不是 屬性的客戶端非常常見
這對視圖而言非常容易
最後是需要對約束多次重建
這會產生需要無用功
在這類情況下效率則要高很多即視圖要調用
setNeedsUpdateConstraints接着當升級
約束過程出現時 可以重建
一次約束以便與
當前配置相匹配
在任何情況下一旦這一過程完成
我們瞭解約束均已更新 我們可以
在重新定位後的視圖基礎上繼續
我們在這裏需要從上到下穿過
視圖層次我們將調用layoutSubviews
到標爲所需佈局的任何視圖上
在OS X上 這種方法稱之爲佈局
不過思路是一樣的
接收方的目的是重新定位子視圖
不是讓接收方重新定位自己
因此框架執行的工作是將通過
Layout Engine
讀出子視圖然後進行安排
在Mac上 我們用的是setFrame 在iOS
是setBounds和setCenter不過思路是一樣的
那麼如果再來看這個示例
你在這會看到UI升級與
Layout Engine的框架相匹配
還需要注意的是layoutSubviews:
很多人爲獲得某種自定義
佈局將之覆蓋如果需要這樣做<c.blue>的話
當然可以但是需要了解一些內容
因爲這裏所做的事情很容易給你
帶來麻煩
所以我想詳細介紹一下
如果需要某種佈局
不能使用約束來表達
那麼應該只是將layoutSubviews覆蓋
如果可以發現使用約束來實現的方法
那麼將非常強大而且不會有麻煩
如果選擇覆蓋需要牢記
我們此刻是處於佈局形式當中
部分視圖已經安排
部分視圖還沒有但是可能很快就會<c.blue>有
因此 這是個微妙的關頭
需要遵循一些特殊的規則
其一是需要<c.blue>觸出發超類執行
出於若干簿記目的我們都需要這麼做
而且可以關閉字樹中的
視圖佈局但是需要在調用
超類執行前完成這項工作
其二 若不想調用setNeedsUpdateConstraints
存在一個升級約束過程
我們走一遍
完成結果錯過了
如果還需要它時已經太晚了
同樣還要確保並未在子樹以外
關閉視圖佈局
如果這麼做很容易會導致
佈局反饋循環這樣執行
佈局的做法實際會導致佈局
再次變髒
那麼我們會周而復始 停不下來
這對誰都不好
大家會常常看到在layoutSubviews覆蓋內
需要調整約束以便將視圖
放在正確的位置 這樣也可以
但還是要非常小心才行
在調整約束時 
很難預料在層次中的其他視圖
會不會受到影響
因此 如果在修改約束 很容易偶然間
在子樹之外關閉了佈局
在任何情況下 假設一切順利
佈局循環在這裏完成 所有內容
都各就各位約束改變就已完全應用了
關於佈局循環需要記住幾點<c.blue> 首先
不要指望調整約束時 視圖框架
會立刻改變
我們所經過的全過程是關於
稍後會發生什麼
如果發現需要覆蓋layoutSubview
則要非常小心避免佈局反饋循環
因爲調試過程並不容易
接下來我會聊聊Auto Layout怎樣和
Legacy Layout系統互動
傳統而言我們通過設置框架定位視圖
然後就有了autoresizingMask
以規定視圖在父視圖改變大小時
應該怎樣調整大小
接着在Auto Layout用約束實現所有目的
實際上 子框架不會按照所預期
方式進行工作
你仍可以設置視圖框架 但是...
它可以移到所放置的位置
不過 如果佈局過程繼續
框架從Layout Engine複製框架內容
並在視圖中應用框架可能隨時被重寫
導致有時
需要設置框架
例如 如果覆蓋layoutSubview
可能會需要爲這些視圖設置框架
幸好 這裏有<c.blue>有個旗標
名爲translatesAutoResizingMaskIntoConstraints
是有點拗口不過功能也如文字所述
它可以使視圖按照Legacy Layout
的狀態下表現是在AutoLayout的環境下
因此 如果在有這個旗標的視圖中設置框架
框架實際上會生成約束
並在 Layout Engine中執行這一框架
這意味着你可以隨時按照自己的想法
設置框架還可以依賴Auto Layout
把視圖保留在所放置的位置
此外 這些約束實際上執行了
autoresizingMask的行爲
例如如果有部分應用
並未升級到Auto Layout 你需要
依賴自動重新調整大小的行爲
它應仍按照你所希望的方式行爲
最後 通過實際運用AutoLayout Engine 
來執行設置的框架使之可以使用
約束定位其他視圖相對與這個視圖的位置
因爲設置了框架你不可以在周圍
移動視圖但是如果沒有告知
Layout Engine這個視圖應該所處的位置
那麼一旦提供約束爲參考就會出現問題
你會看到尺寸大小或原點和零點衝突
如果不希望出現這種效果這類行爲會
<c.blue>會非常奇怪
那麼這裏需要注意的是當計劃
使用約束定位視圖時
你需要確保這是關閉狀態
如果是在InterfaceBuilder中
構建UI 它會處理得很好
並妥善設置這個旗標
但是如果是在用編碼分配UI
這會默認爲是開啓狀態
之所以這樣是因爲有許多代碼
會分配給視圖並希望按照
一定方式來執行
所以是默認開啓狀態如果通過編碼分配UI
並且忘記關閉這裏
這會導致一系列意想不到的問題
我們來看一下如果忘記會怎樣
這裏是個很簡單的代碼
我們分配一個按鈕並進行配置
然後生成兩個約束來
定位這個按鈕頂部10點
距離左邊10點
這非常簡單
但是運行一下結果卻是這樣
窗口太小沒有按照
預想來執行按鈕也不見了
會全都噴到控制檯上
實際上這說明存在問題
大家看到的是NSAutoresizingMaskLayoutConstraint
這是佈局約束類是框架
爲有需要設置
translatesAutoResizingMaskIntoConstraints 的視圖而生成的
這裏實際發生的情況是因爲我們忘記
清理旗標框架爲按鈕上的
初始框架生成約束
框架爲空 尺寸和原點也都是零值
所以沒什麼用不過當我們添加
約束 想把按鈕定位在10,10的位置
就會出現真正的問題

因此 Layout Engine突然無法滿足
約束的要求 就會導致出現意想不到的問題
如果返回代碼加上一行
清理旗標效果就會好得多
我們得到想要的佈局按鈕的位置
也沒問題窗口的表現也正常
需要記住的是
translatesAutoResizingMaskIntoConstraints 
通常都不會用到這個旗標
但是如果有視圖需要通過直接設置
框架來定位這就會很有用
而且 如果計劃用約束來定位
需要確定這是關閉狀態
如果你沒有使用InterfaceBuilder的話
接下來我會聊聊約束生成
我覺得這更容易只要看看
我們剛剛在屏幕上的代碼就明白
特別是結尾的那一段
我們構建的是這些約束
這和在AutoLayout開始之初我們就有的約束
工廠方法完全一樣
而且相當有效
但是用起來有點麻煩
代碼相當冗長
不是很好讀出來
我們這裏真正想表達的是
我們想把按鈕定位在距離頂部10點
距離左邊10點
但是爲了理解這一點需要仔細
瞭解代碼再把這些
都拼在一起
那麼在新版OS X和iOS中
我們介紹了更簡潔的新語句
來生成約束
大概是這樣
這個語句使用的對象叫做佈局錨點
謝謝很高興大家喜歡
佈局錨點代表具體視圖的
具體屬性錨點對象會
<c.blue>會面對多種工廠方式來生成不同的約束形式
本例中 我們是在約束上端錨點
使之等於視圖上端錨點再加10
如果你們還在用Objective-C
其中也有這些而且
差別會更爲顯著
從將近7行降到了僅僅兩行
這個新語句還遵守我們所有的
命名規範但讀起來更
像是表達式我感覺這樣
更容易看清代碼的意圖
約束的所有有效形式都可以運用這個語句
來創建 你實際上還會得到許多無效的
約束形式的編譯器錯誤
此刻 你只能得到Objective-C的錯誤 
但是這些也會變成Swift 
例如 視圖的左對齊邊緣應爲100
這樣就不合理因爲沒有上下文
可以詮釋這個100
因此錯誤在於這個方式在
位置錨點不存在
與之相似 視圖的左對齊邊緣
和不同視圖同寬這也不合理
位置和尺寸大小在Auto Layout基本上
是不兼容的類型因此得到的不兼容指針類型
以往 這些內容仍屬於錯誤
但是僅可以在運行時間出現
因此我覺得將確定編譯時間錯誤
將有助於我們一開始就把約束設置正確
並可以編寫更好讀更可維護的代碼
接下來我會聊聊約束負面空間
有幾種不同佈局會時常出現
具體實現方法卻不很明顯
這裏有兩個例子
在第一種情況中目標是讓
這些按鈕間的空間在重新調整
窗口大小時保持相同
在底部 我們有圖像和標籤
我們想把它們居中做成一組
而不是各自將每個內容居中
結果就是這些佈局問題的
解決方案都是相同的
也就是要用到虛擬視圖
實際上是分配空視圖把它們進行約束
填充到按鈕之間的空間中
一旦視圖位於這些點
我們可以使用等寬約束來確保其尺寸大小
在重新調整窗口大小時 保持相同
在底部 我們也是同樣
使用空視圖
對邊緣 圖像和標籤進行約束
然後我們可以在空視圖上安排
居中約束而不是
處理內容視圖本身
很有效 傳統上 我們就是這樣解決
這些視圖問題但是這種技巧
知道的人太少 對吧？
而且也不夠有效特別是在iOS上
這裏每個視圖都有相關的圖層
那麼在新版中
我們面對的是佈局指南的新的公共類 
佈局指南只代表Layout Engine中
的矩形
這很容易使用
只需要將之進行分配再加入
所屬視圖然後就可以將其
按照視圖處理方式來約束
它們面對的是錨點對象 因此可以
運用新約束生成語句
但是還可以將之
交給現有的約束工廠方法
這樣就可以和視覺格式語言配合使用是這樣的效果
我們把現有的佈局指南做轉換
把這些進行內部使用
這裏有很好的示例
大家可能注意到UIView針對邊距屬性
並未真正面對佈局錨點
相反 UI View有着新的佈局邊距指南
這一佈局指南代表邊距內
視圖的區域
如果需要對邊距進行約束
最簡單的做法是通過佈局指南
因此佈局指南並未從根本上啓動任何全新行爲
現在使用視圖可以實現所有這些功能
但是它們可以用更輕量級的方式
來解決這些問題而且不需
搞亂層次因爲那些視圖
並不需要真正拖動
接下來我請會卡西亞回到臺上 來介紹
Auto Layout出現問題的調試策略
大家好
上午我見過在座的部分聽衆
我是卡西亞
我在iOS KeyboardsTeam就職 我來這裏和大家
介紹如何調試佈局當出現問題時
該怎麼辦
以前用過Auto Layout的朋友
希望大部分都用過可能遇到像這樣的情況：
設計一個UI非常漂亮
然後準備在代碼中執行
你把所有約束都小心放入其中
也做了調整
構建和運行時出現了問題
完全都不對在調試器中
你看到這樣的內容
文本內容很多有點嚇人
但是這的確是相當有用的日誌
遇到不滿意的約束錯誤時就會出現這些
引擎在看所提供的約束設置
決定它無法解決佈局問題
因爲其中有部分內容彼此衝突
若要解決視圖問題需要打破
一個約束才行
於是拋出這個錯誤告訴你它做了什麼
你明白 接下來要繼續深入 找到那個
額外的競爭性約束才行
我們試着讀一下這個日誌
這裏是剛纔看的視圖以及我們的日誌
從上端移走部分內容
使之和屏幕吻合
但是要先從底部開始處理
大家看到的最後內容是實際上打破的約束
不一定必須是導致問題約束
引擎必須打破的約束是爲了解決
佈局問題因此從這裏入手很好
先檢查該視圖的translatesAutoResizingMaskIntoConstraints
在傑西的例子中大家看到 日誌中
也會出現但是確保你已經
事先完成這些內容肯定是沒錯的
本例中 我們打破的是
Saturn縱橫比約束
我們在日誌上提高一些 以示強調
在日誌本身中也會出現
接下來要做的是發現影響日誌中
出現的視圖的其他約束
本例中 我們接下來<c.blue>看按到父視圖約束的左對齊
和父視圖約束的右對齊以及上端的一個
還有下面標籤視圖的一個
這些都沒問題
沒有一個產生直接衝突
接下來要看相關的視圖
本例中 是標籤
因此這個標籤有着和Saturn底部
相同的關聯約束下一個約束
關聯到父視圖上端
因爲Saturn高度應該
超過100點約束告訴它應該如此
你會注意到標籤旁的約束
確實告訴你這個約束看似
非常像以往你可能用來
生成約束的視覺格式語言
我們看到從父視圖上端
是100點 還因爲Saturn需要比這個多
只能打破一個約束
才能解決佈局問題
所以其實並不難讀
現在我們讓問題更簡單些
因爲你可能習慣於看到這樣效果的
約束日誌其中有一組
內存地址和類名稱除非在視圖中
有導航文本 否則不會告知各自是什麼
如果是這樣的效果則會容易很多
爲實現這一點你只需要
在約束中增添標識符
那麼我可以有兩種方便的方法來實現
如果使用的是顯性約束
那只是一個屬性
建議命名標識符和命名約束的方法
相同 這樣如果之後需要找出
代碼的話則會容易很多
但是你可以把它任意命名 我們就這麼做
如果使用Visual FormatLanguage會得到數組
你不會獲得約束因此只能循環那個數組
在每個約束上設置標識符
可以在數組的每個約束上設置相同的
標識符這一般都很好
如果想找出單獨約束並設置標識符
之後還要在數組中做些改變
順序就要做調整
那麼需要返回同樣來改變
標識符的順序
此外 一旦看到了日誌中的短語
你一定會知道該怎麼找問題
因此不必當真把具體約束都擺着那裏
最後 在約束檢測器中的
Interface Builder有個標識符屬性
那麼就太簡單了
我們來看一下
我們來談談怎麼理解這個日誌
更容易瞭解目前發生的情況
首先 如果在視圖設置用戶友好標識符
這些標識符會在日誌中與相應視圖
成對出現因此就可以找到所需視圖
我就是這樣從剛纔看到的約束中
找到Saturn 它有用戶友好標識符名爲Saturn
還可以在新的佈局嚮導中設置標識符
這是個平鋪標識符屬性
沒有什麼特別的這會讓運用佈局指南
調試佈局變得非常簡單
因爲效果很棒我很確定大家遲早都會用上
加上它們再繼續
如果想試試現在就用很複雜的
視圖 把所有標識符都加進去 你可以完成的
但是需要些時間
因爲你可以以後讀這個日誌 所以也值得
但是如果你繼續的時候這麼做 以後就會少費工夫
因爲 你也拿不準什麼時候
會遇到這個問題所以有必要
先備着以供不時之需
最後 如果約束日誌不理想
其中包含信息太多
就會導致佈局非常複雜其中會有
數百行可以看看
底部的視圖 特別是你在看的其他視圖
並且實際上要查看在調試器中影響
這些視圖的約束
在iOS中 是constraintsAffectingLayoutForAxis
在OS X中 是constraintsAffectingLayoutForOrientation
這可以告知你哪些約束在
影響這個或那個座標軸的視圖
我們現在來看效果怎樣
這就是剛剛
在看的視圖
我們看到這裏是同樣的日誌
我們先擦去這些因爲我希望
給大家看看另外的內容
我設置了一個兩指雙擊來斷開這裏
所以現在不用內存地址
我用的是設置好的名稱
我們要進入調試器
讓它打印出Saturn的
constraintsAffectingLayoutForAxis以及垂直座標軸
垂直軸是1 水平軸是0
如果用錯了那就是另一種選項
返回這裏也相當簡單
現在我們看到視圖在上端有佈局嚮導
沒問題
那是視圖的約束
命名視圖中的約束還有
一個好處 就是說你會很快知道
在約束外設置了哪些
哪些是由你設置的
在Saturn的垂直佈局中我們瞭解到
它是和上端佈局指南關聯
非常好
它還表示Saturn和下面的標籤關聯
那麼在另一個影響Saturn的約束中
不過不是直接關聯Saturn
我們看到約束在視圖上端
關聯了標籤
因爲它並未在任何地方提及Saturn
這是很好的線索說明這就是問題所在
而且整個Saturn應該是
超過100多才行我碰巧知道
因爲是我做的編碼
現在我拿到了非常不錯的標籤
我可以搜索它找到我做的約束
好了
把它關聯到上端錨點定爲100點
來看看會在哪裏激活
刪掉
重新構建
這次好多了
我就是要這樣子
深入研究這些問題 其實
相當簡單
即便佈局相當複雜也是如此
如果使用標識符方法得當
有關日誌 我們講到哪裏了？
從底部開始
找到打破的約束從中瞭解到許多
它爲何會打破的相關信息
先來查看translatesAutoResizingMaskIntoConstraints
它是許多狀況的罪魁禍首
在約束和視圖上都設置標識符
最後 如果日誌太過複雜使用
constraintsAffectingLayoutForAxis來縮小範圍
好這就是引擎看到約束 瞭解自己
沒有解決方案後發生的一切
沒有辦法滿足所有的約束要求
可是如果有着不只一個解決方案會怎樣？
這就會出現歧義
這就是我們最後的謎題 祝賀大家
進行到這裏
此外再無其他更多內容
我們來看一下歧義佈局
造成歧義佈局的
兩個可能原因只能是約束太少
如果是在做這樣的行星佈局
希望將Saturn放在中間
但是水平方向的約束設置不當
視圖只能猜測該把它放在哪裏
再次提醒一下應該是在中心
引擎把它放得偏到了這邊
還有一個解決方案是把它偏到另一邊
可就是不能落在中間的位置
因爲如果不知道該放在哪裏 它就會
找個地方放 這就會是問題所在
因爲不是你想要的
需要返回 在視圖上加上約束
另一個歧義佈局的原因是屬性
存在衝突
在第一部分中我們談過一點
在視圖的底部我們剛做過調整
大家會看到結果會是文本域
按鈕的比例有問題
我希望它是這個樣子
文本域佔據視圖的主要部分
最後變成這個樣子是因爲引擎
在兩個佈局中替我做出選擇
它這麼做是因爲兩個視圖的內容
吸附性優先級相同
都是250我沒有其他方法
我也沒有告訴引擎用其他方法在水平方向
來確定這些視圖的大小
那它只能是猜所以猜測也許
我是想讓文本視圖吸附最近的內容
於是繼續還把輸出了標籤
但是我實際上希望它做的是
吸附靠近按鈕的內容
這部分要反覆強調
但是按鈕的內容吸附優先級
設置的低於文字域
視圖的邊緣會從內容中伸出一塊
因爲這不太重要它吸附了最近的內容
或者你在告知引擎這不太重要
視圖吸附附近的內容
與此同時 如果設置了以上文本視圖的
內容吸附性優先級按鈕吸附了靠近的內容
且文本域有所延伸
在這種特殊情況下引擎始終都會這樣
解決佈局問題
因此 如果妥當設置這些屬性
就可以解決這些遇到的歧義佈局
我們還有解決歧義的兩個工具
Interface Builder會很有用處
它在邊緣有這些小圖標 如果點擊
它會告訴你佈局出現了哪些它不明白的內容
在很多情況下它會告知
你遺漏了約束它無法解決
我需要Y點或者高度的約束
當你構建並運行的app存在這樣的問題時
最後這些視圖就會出現在
Y軸的某處這是引擎的決定所致
因爲它沒有從我們這裏獲得任何信息
這就讓它相當容易
當沒有使用InterfaceBuilder或者你解決問題後
仍然會遇到這樣的情況
我們還有一個很酷的方法叫做autolayoutTrace
可以在視圖中的調試器來使用
它會用全部大寫告訴你出現
歧義佈局的視圖你可以隨即去
查看該視圖的問題所在
在調試菜單中我們還有視圖調試器
可以幫你查看佈局引擎爲視圖
計算得出的框架和對齊矩形
效果就像這樣
它會將拽到正在看的視圖上
這裏你們可以看到Saturn 本應對齊矩形中
與內容十分靠近可是現在
被延伸得非常寬
這種狀況不是我想要的
可是這裏它的實際尺寸沒問題
只是被固定到邊上這不是我想要的
但是我知道這不是尺寸問題
而是應該與哪裏關聯的問題
另一個解決方案是來看視圖解調器
在所有的斷點導航旁邊
這裏有個小按鈕
按下這個的時候就會把佈局拉開
可以點擊並查看約束等內容
是視圖的線框圖還可以看3D效果
可以看到所有圖層的視圖 很清楚
還有很多視圖調試場景會很有幫助
最後 我們還有一種調試器方法
因爲我非常喜歡使用LLDB
名爲exerciseAmbiguityInLayout
如果有存在歧義的視圖
可以運行這個在調試器上查看再繼續
Layout Engine會顯示所具備的另外解決方案
當你想找到問題具體出在哪裏時
這會提供很大的幫助
我給大家展示這是什麼樣子
好現在我們回到這個視圖剛纔我們看到過
當處於正常佈局時Saturn跑到邊上
所以我再次用調試手勢
可以這麼用是因爲我需要簡單地插入
首先我來看看整個視圖在發生什麼
運行了自動佈局來跟蹤效果
大家看 都沒問題除了Saturn
存在歧義佈局
我會努力集中精力解決這個問題
這還是個Boolean逐個視圖告知
是否存在歧義佈局
這是個hasAmbiguousLayout
很容易記住在Saturn的這個例子中 是真
如果存在這種情況還還可以練習佈局歧義
並且繼續
它會給你提供 它爲此問題準備的另一個解決方案
我們再來運行一遍
哎呀
真不該再運行
現在又跑到一邊去了
在這種情況下看似出於某種原因
佈局指南放在Saturn的哪一側都不行
那我繼續找關聯行星
到特定區域的約束
它們在各邊都有佈局指南比率
以此來確定其位置
這裏找到了Saturn的那個
應該在各邊有着相同的佈局指南
應該是正好放在中間在對
問題好似我根本沒有把這個
加入爲視圖激活的約束數組中
如果我加入的話效果就會好得多
Saturn就會準確待在我希望它在的位置
在分析歧義問題時確實只需要
做這些即可
一旦開始用了這個功能就會覺得
非常簡單
來調試佈局
最重要的是要仔細考慮
引擎所需的信息
今天上午 我們談論了
許多爲Layout Engine提供所有信息
這樣可以在各種自適配場景中
妥善計算佈局
如果把所有這些彙總在一起遇到的問題
就會少很多而不是隻是
在這裏或那裏做兩個約束
再把它扔進來
但是如果遇到問題約束也不理想的話
可以使用日誌
它會提供很多有用信息
爲了充分利用日誌可以爲所有的約束
和視圖添加標識符
如果想經常性檢查歧義
在第一次運行時不一定會看到
可以加入比如單元測試
並在所有視圖上經常性運行
如果遇到歧義佈局可以在看到它之前進行分析
我們還有好幾種工具
可以幫助解決這類問題
Interface builder就很有用當然還有視圖調試器
以及lldb中的各種方法
好 今天講了很多內容
如果上午就聽了我們的講座
你會聽到用到堆棧視圖的可維護佈局
以及妥當改變約束
配合使用視圖大小和進行自適應調整
還有運用優先級和對齊安排
確保視圖在各種
自適配環境下完全符合要求
剛纔 我們深入探討了佈局循環
和舊佈局的互動用佈局錨點而不是
舊方法來生成約束
以及用佈局指南約束負面空間
我們還談到不理想的約束
和如何解決歧義這兩個問題
人們會在使用Auto Layout時
經常遇到
這就是所有的謎題內容
希望我們都爲大家解釋清楚了
如果還沒有聽過第一部分內容
建議大家找來看看因爲其中的很多
內容都非常有用相關視頻應該
很快就能做出來
或者大家可以回到11:00的時候
怎麼都行當然想要了解更多詳情
網站上有文檔資料我們還有行星代碼
很多是在第一部分中提到 不過我們
這裏也有用到
你們在這看到的行星代碼並沒有問題
實際上運行正常
如果希望使用這裏介紹的調試方法
可以人爲地破壞它
我們還有幾個相關講座
再說一下 第一部分講座是在今天早些時候
明天還有兩個大家可能會有興趣
在這之後 我們還要直接返回實驗室
如果大家對Auto Layout
和Interface Builder
有問題的話 我們可以回答
今天就是這些內容
希望大家過的愉快