嗨 大家好
我叫安东尼奥安东尼奥·卡瑞多尼
我是San Francisco字体设计小组的一名成员
很荣幸在此为大家介绍这种字体
在今天的介绍中我们将会了解到San Francisco字体
它们的设计过程及这些字体对我们的平台具有哪些意义
我们将会看到若干新功能
并学习如何利用这些功能让你所设计的app应用变得更出色
这种变化将体现在代码和设计两个层面上
最后我们会讲到在app应用中
加入这些新字体时可能会遇到的 API 隐患
现在开始进入正题
文字随处可见
而文字存在的前提则是字体
其实字体本身也具有表现力
好字体能让你的app应用内容和用户界面更加美观
它们看起来会更顺眼
你无时无刻不在阅读字体
在不同的屏幕上在不同的设备上
阅读不同磅值的字体
另外你在阅读时的视觉环境也不尽相同
有时是明亮环境有时是远距离环境
还有各种屏幕尺寸和分辨率
因此我们有必要改善平台上的字体样式
于是全新字体San Francisco便应运而生了
San Francisco是加州Apple公司设计的一款全新字体样式
外观风格简单而优美
San Francisco以其连续流畅的字形表现力和易读性
实现了整个平台的高度统一
这是它的外观
San Francisco在字体样式中属于grotesque
Grotesque也称为sans serif
请看字体分类图
San Francisco设计包含两个子类别
其中SF用于iOS和OS X
SF Compact用于苹果的手表系统
这两个类别又各自包含两种字体“文字”类和“显示”类
两者都属于视觉尺寸
稍后我会具体介绍
其中文字类字体共有6种字重
显示类字体共有9种字重
刚才我说过SF用于iOS和OS X
而SF Compact是用在苹果的手表系统
现在我们了解一下两者的不同之处
SF和SF Compact在设计上采用了孪生理念
也就是说它们相似而不相同
二者的主要区别在于对圆形部分的处理方式
SF字体是完全圆滑的SF Compact则略带扁平效果
这样的设计能达到双重目的
前者实现了风格化而更重要的是后者具备了功能性
这些扁平的侧面提供了更大的字母间距在文字较小时更容易阅读
当这个看似不起眼的功能在文字中一遍又一遍地重复时
就能带来明显的效果
现在我们来看比例问题
SF和SF Compact的比例区别并不明显
所以我就以SF为例解释一下
我会提到一些字体方面的专业的词汇大家可能对这些词汇已经很熟悉了
拉丁文的设计以基准线作为标准
小写字母的对齐标准叫做x height
即小写x的高度
大写字母以大写X作为对齐标准
此外还有一个概念叫“下伸部分”它是基准线以下小写字母的对齐位置
在比例问题上
SF字族可以兼容我们之前发布的所有UI字体量度
因此你的app应用不会出现明显的垂直回流问题
实际上垂直回流问题根本不会出现
在这些所兼容的垂直量度中我们进行了比例上的细微改动
比方说我们把大写字母变得短了一些
这样做是为了改善大小写混合设置的显示效果
与此同时我们还把x height的高度增加了一些
从而使小写字母和大写字母更接近
这样不但大小写混合设置的效果更好
还能让小写字母看起来更大一些
这就是大家平时看到的更加清晰易读的效果
最后一点数字是与大写字母对齐的
SF属于一种泛欧洲字体它包含了拉丁文
而拉丁文又包含着波兰语 冰岛语 匈牙利文语
甚至像越南语那样需要叠加音的语言
另外它还包含俄语里所使用的西里尔文以及希腊文
这就是San Francisco
这就是我们在加州Apple公司设计的一款全新字体
iOS和OS X采用的字体类别叫做 SF
苹果手表系统采用的是SF Compact
这两种字体类别有着不同的比例对不起 是相似的比例
但它们在设计上却有所不同
今天大家就可以下载到这两种字体
其实现在就可以
在Apple网站的字体页面上developer.apple.com/fonts
请注意这些字体目前还只是预览版
等到OS系统最终确定以后才会发布最终版本
在继续讲解
San Francisco字体的优秀创意 “视觉尺寸”之前
我想先为大家介绍一些设计领域的基本原理
视觉感知基本上属于错觉
在理解这句话的时候
请设想在你眼前有两个形状一个方形和一个圆形
为了让两个形状看起来高度相等
需要把它们并列排放上下准确对齐
但实际上圆形看起来很短
为了弥补这一缺陷就要使用一点迷惑性的手段
也就是说要让圆形更大些
在字体领域里我们会说用圆形“冲越”方形
换句话说 想让两个形状看起来相似通常要让它们相异
这个原理不仅适用于形状本身
还适用于形状周围的空间
我用刻度标记的方式让大家看得更清楚些
大家会看到在屏幕中间插入文字时
文字的位置看起来会很低
正如刚才所讲到的
想要形状看起来相似需要进行差异化处理
顺便普及一个小知识你们知道这个字符是什么吗？
它叫什么？
英镑符号还是井号？
意大利语叫cancelletto意思是“小门”
当然它属于数字符号
由四条线相交组成的数字符号
而这四条线的交汇处
中间的这部分区域当字体尺寸较小的时候
该区域会变得很暗甚至是一团黑
所以当字体较小时你很难看到它
这时还是需要调整一下
不必去动四条线的交汇处只要让中间的方块变大一点
这就是San Francisco字体的重磅值井字符
以上是我们在字体设计中经常采用方法
这就是刚才所说的视觉感知即与错觉相关
明白了这个道理我们再来讲视觉尺寸
在刚才看到的分类图中它在这个分支上
假设有一小段文字用两种不同的字体尺寸显示出来
顺便说一下这个单词没有任何实际意义
它只是字体设计人员用来查看字体及其组合样态
因为其中包含着一些扁形和圆形
当你看着它的时候你会发现这段文字在小字号状态下清晰度不好
这是因为对于grotesque这种字体样式
它的字母显示正常并且字母间距很小
如果我用模糊处理来模拟低清晰度效果的话
较小的字体...
在较小的这部分字母开始变得混淆不清了 对吗？
这种情况下我们想要的效果应该是这样的
也就是说要微调一下以便让小字体也能清晰显示
大家可能觉得我只不过是让它动了起来并稍微增加了一些宽度
其实我是在变换字体所呈现给你的整体印象
在解释“显示”和“文字”这两种字体的区别之前
请记住此处的“显示”并非指显示器屏幕
它在字形领域代表字体大小而“文字”是指文本的大小
所以“显示”字体用于较大的字号“文字”字体用于较小的字号
在解释两者区别之前我首先介绍负空间的概念
负空间是指字母内侧 周围
和轮廓内部的空间
负空间是分辨形状和阅读形状的关键之处
在刚才的示例下方区域中
对于文字来说 其周边空间的面积几乎是字体显示面积的两倍
因此包括San Francisco在内的grotesque字体样式
都面临着同一个问题
它们的形状在足够大时看起来确实漂亮
但在结构上却过于相似所以很容易造成混淆
如果将两者叠加起来
你会发现它们的整体形态是完全相同的
在顶部和底部都有弯曲部分
它们都含有两个这样的区域我们称之为反向对称区
反向对称区的位置基本大小基本一致
另外在中间位置还有这样的半横区
半横区的形状实际上是由这些圆圈所界定的
如果空气能够进入到字母里面的话那么气流就是从这些圆圈进去的
在改变显示字体时
文字字体和显示字体具体处理过程是这样的
我们举例说明
以小写字母a为例
其实要改变的是冲越部分
因为当字体尺寸较小时
我们要让圆边部分能够从x height上突显出来
同时还要打开此处的圆圈
对小写g的底部区域也采取同样的处理方式
小写s也是打开这里的圆圈
处理字母r时我们把它右上角的弯转部分加大
小写f和小写t也有类似的形状区域
因此处理方法相同但这两个字母更大 更高一些
小写i就比较有趣了
因为当字号很小时i头顶上的圆点看起来
好像和下半部分的竖线顶撞在一起
所以我们就把它调大 调高一些
SF和SF Compact有两种截然不同的字族
分别叫做“显示”和“字体”它们用于不同的字体磅值
系统能够在这两个字族之间自动转换所以不需要用户自己选择
这就是视觉尺寸
谢谢
San Francisco有两种视觉尺寸 文字和显示
系统会在20磅时自动切换文字和显示字体
这一点对平台的代码编写不会产生任何影响
不过对于app设计而言还是很有必要了解这一点
因为Photoshop Sketch或其他类似的软件程序
不会自动执行字体切换
这种情况下你就要自己更改字体
讲完了视觉尺寸
我想介绍一下和文字尺寸有关的另一个概念 字间距
字间距在字母的负空间里起到调节作用
看屏幕上的动画演示 大家可能会认为哦 原来是字符串的偶距变了
没错 基本上就是这样字间距和字偶距的区别很小
字间距是
正向或反向调节所有字符
而字偶距只是调节两字母之间的距离也就是相邻字母的距离
这就是两者的区别所在
字间距是普遍调整字偶距是局部调整
San Francisco的每种字体都内置一个字间距表
该字间距表带有具体的字符尺寸并且定义了磅值和字间距值
就是这种效果 对吧？
它能让较小的文字更宽松也能让较大的文字更紧凑
就像刚才我说的那样
若使用新San Francisco字体进行编码 可以不用了解上述原理
如果使用Photoshop绘制app应用的话
再次记住软件本身不会自动切换字体
这时就可以下载这样一份带有系统字体的字间距表
下载地址和我刚才给出的页面地址一样
以上是关于字间距的内容
接下来我要讲的是字重
字重这一概念用来描述字母笔画的粗细程度
在San Francisco和SF Compact字族里
两者的文字字体都有6种字重
另外再加上斜体就构成了9种显示字体
大家可能会问为什么显示字体字重比文字字体重更多
这是因为极粗字体其实只是为了标题而设计的
所以在20磅以下使用就没有多大意义可言了
有些字重是新增加到平台上的
以前几乎找不到它们
即便原有的字重也很难获取
现在我们提供了新的API大家可以从中获取所有字重和系统字体
它们都包含在UIKit和AppKit里
且已是systemFontOfSize里面的一个新参数
这些是它们使用的引数
有了这些字重接下来的问题的就是如何使用它们
我指的不是在编码方面而是在设计方面
通过使用字重可以实现三个主要目标
首先是差异化
你可以让一段文字产生差别并制作层级效果
第二个目标是相似性
第三个是实现风格化效果
这样文字就具备了表现力
请看屏幕
假设有一段文字
现在要将其中的某个单词突出显示
把它设成动态 链接或强调效果
这时字重就能派上用场了
另外 它还可以为列表制作层级效果
比如我想把第一行文字做成列表的标题而下面的部分是列表的具体内容
字重还有一个巧妙的功能制作相似效果
请看这个示例
Apple手表系统的Glances模拟界面
上面是一个较大的数字下面是几个较小的文字
如果把它们设成相同字重看起来会有头重脚轻的感觉
如果要制作相似效果让其产生平衡感
就需要使用不同的字重以此来达到相似的目的
所以我们下面的字体从light变成regular 效果就好多了
记住这个方法
字号大时 字重调重一些字号小时 字重调轻一些
这样一来就能达到相似而协调的理想效果
最后 字重还能帮助提高文字的表现力
为了解释这个问题我制作了一款新式app应用
叫做“蜜蜂天气预报”
一款蜜蜂风格的小软件
我想让它看起来简单粗犷一些
但我想说的是如果保持界面布局不变
在布局不变的情况下只改动字重
整个界面在风格上将会截然不同表现力完全不一样
如果你觉得哦 肯定是颜色的问题
没关系我还做了一个斑马版的
这个就完全能证明我是对的
虽然字重能改变风格和效果
但别忘了
文字是有字体的易读性最重要
你可以制作层级效果清晰连贯的层级效果
如果不喜欢自己做的话
可以使用iOS准备的一套现成系统
里面已经设置了层级以及字体尺寸和字重
它们就是文字样式API
主要用于功能很多的Dynamic Type
用户可以进入它的偏好设置
改变字体大小然后app应用就会做出相应改变
在使用字重时请记住
iOS和watchOS系统中都有一个设定选项
用于改变用户设备上的字重
如果你使用的字体很粗
那很可能已经达到了极限
相反 如果你使用的字体很细那么文字的易读性就会好一些
字重的使用没有固定的标准方法
但这些基本原理还是能起到一些抛砖引玉的作用
以上讲的是San Francisco字族的字重
还有更多的字重和包含字重的API供大家使用
刚才介绍的易读性层级和精细质量效果
等基本原理同样适用于这些字重和API
下面是San Francisco字族的另一个功能 字形功能
功能赋予字体生命力因为它们是嵌入字体内部的行为片段
其主要作用是用来表达复杂文字
同时也可以通过它们来获得字体的外延形状
对获取外延形状来说有时字形功能是唯一途径
有时字形功能是更加便捷的途径
我们通过示例来了解它们功能的实际作用
首先看分数的显示
比如在设计过程中需要把它加到app应用里
这时你会想
肯定可以在Unicode找到该符号
但不知道San Francisco里面有没有
于是你找了一下还真找到了直接把它打出来
很好
不过要是这种情况的话又该怎么办呢？
字体里面没有Unicode里也没有
你可以用迭代法用这个字符串来写代码
然后复制成其它形状
再把这些形状逐个排好位置
必要时调整一下字重让整体效果看起来更加相似 匀称
也许你会想到字体里面是有分号线的
那就到San Francisco里面去找一找找到了
直接放进去
就这样你写了一大堆代码其实根本不用这么麻烦
因为分数功能会自动执行这一操作
该功能适用于任意分数
就像这个数字
我不可能设计出一个65/324这么大的连字符
实际上它是由小号数字和分号线组成的系统能够根据实际字体
将数字和分号线组合在一起
这样做的好处在于它们都是独立的形状 可以调整字间距
功能的种类还有很多
大家可以在Typography面板里启用这些功能
该面板是OS X字体面板中的一个用户界面
另外也可以通过代码来启用功能毕竟在座各位使用代码的时候比较多
我用新的systemFontOfSize字重API实现了轻字重效果
这是字体描述符
找到以后就可以为它添加各种属性
某些属性本身就是字形功能
每次可以打开一个功能或者关闭一个功能
也可以批量处理多个功能
有了字体描述符就可以用它创建另一个UIFont
或者NSFont
此外还有其他功能供大家使用
比如高体字和上角标或者矮体字和下角表
或在数字和大写字母之间输入数学符号
或其它符号时所使用的大写形式
San Francisco字体的某些功能在设计上确实非常特殊
我来具体解释一下
首先是垂直居中冒号
默认状态下它是与小写字母对齐的所以顶靠在基准线上
但在对时间显示进行排版设计时我们希望它能垂直居中于数字之间
因此我们在iOS的表盘设计中全部采用了这种居中垂直法
既用在OS X的标题栏也用在啊Apple手表系统
还用在秒表程序上
后来我们决定把该功能设成自动生效这样能为UI设计的时间显示带来便利
当然必要时你也可以退出该功能
退出的功能代码和和启用代码基本是一样的
另外一个功能是6和9的替代形状
这两个形状当字体较大时看起来很漂亮采用的是grotesque字体
但是它们却存在视觉混淆问题
当它们以小字体并列显示或者与8并列示时就会变得混淆不清
因此我们在San Francisco字体中设计了6和9的替代形状
看起来更加平直化
这种设计被应用在Apple手表系统的小表盘上
以及Apple手表背面的序列号上
其实在任何序列号不易分辨的情况下你都可以使用这一功能
让6和9显示地更加清晰
因为使用时要取决其它数字的实际大小
所以我们没有把该功能设为自动开启
如果需要的话可以使用这段功能代码来启动它
接下来我要把两种理念结合起来
第一种是我们刚刚看到的字形功能
第二种是我们先前讲过的视觉尺寸
显示字体和文字字体在设计上的区别很大
因此我们不得不将磅值纳入到考虑范围内
在设计过程中如果用显示字体来表达分数
那么使用卷曲形的6不会有任何问题
但如果是文字字体的话最好能换成另一种形状
因为如果将磅值设为12
那么分数部分的磅值就应该是6对吧？
所以我们采取了不同的设计方式
并且让它们间隔更远一些
我们在 San Francisco字体中专门进行了很多这样形状的处理
目的就是将文本和显示区别开来从而让文字更加美观或者更加易读
这些就是字形功能
它们是被嵌入文字内部的行为作用
有些功能是由系统字体默认开启的
而其它功能则需要大家自己启用
接下来我们谈谈数字
不是app里面的数字而是字体里面的数字
字体设计人员花费大量时间去研究数字的形状
想让数字更加美观 实用更加完善
不过我想谈谈数字的间距
它们的宽度问题
默认状态下对于我们的平台而言
数字采用的是等宽式设计就是说它们的宽度完全相同
对于编排表格之类的设计非常适用
等宽数字简单方便因为它们很容易对齐
而且还可以用来制作多行样式
但它并非San Francisco字体中唯一的数字形式
我们还设计了一种比例数字
使每个数字都有其“自然”宽度
某些情况下我们的确需要等宽数字
比如像这样有小数的时候
会有摆动效果等宽数字能保持静止不动
当然有时也需要在静态标签里使用数字
比如说一条数据 一个电话号码
收件箱阅读提示或者Email地址以及URL网址
这时最好使用比例数字
现在我们用数字内容比较多的日历程序来做个演示
请看我们在这款应用中所使用的数字以及我们的编排设计方式
它们没有任何对齐标准只与文字保持一致
也就是说 我们可以使用应该使用 也确实使用了比例数字
了解这一点我们就能实现质的飞跃
就能改变我们的平台默认样式
为大家提供默认状态下的比例数字并将等宽数字设为可选功能
Apple手表已经率先采用了这种设计方式
系统默认使用比例数字
但这毕竟是一次重大变更可能会对布局产生影响
有鉴于此我们制定了一些规则
如果app应用未链接到iOS 10.11
对不起是OS X 10.11和iOS 9
默认使用的仍是等宽数字系统会自动启用等宽数字
但如果是重新编译则会使用比例数字
在AppKit中有款新的快捷API它提取了这一功能代码
就是刚才给大家看的那段代码所以用起来会更方便
最后我们来了解一下潜在隐患的问题
我们的字体API同时包含了新旧字体
细心的人可能会留意到
在预览版的OS X和iOS系统中
SF字体的名称前面有一个小点
这个小点是用来告诉大家该字体是Apple的独家字体
所以不要过于相信它的稳定性
我们曾经见过一些框架开发人员
使用他们自己的字体加载代码
比如游戏框架的开发人员就是这样
之所以这样做是因为
他们觉得字体就存放在文件系统中的某个具体位置上
这种想法是很危险的
我们希望大家在字体路径的处理方式上能宽泛一些
就是说可以通过Core text访问字体文件
而不必到文件系统里面查找
另外如果要通过名称来获取字体文件的话
可以使用fontWithName API里面全都是用户字体
如果你有自己的字体可以这样写出来完全没问题
但如果你对某个系统字体执行了实例化
然后再提取它的名称并尝试建立另外一个字体
这时会导致所有的系统自动设置完全退出
自动功能 字体大小行为自动间距等等都会退出
所以建议大家不要这样操作
其实我们可以调用字体描述符
用它来实现某个字体功能
这是使用字体对象的推荐方案
最后在视觉尺寸问题上
我们仍然在挑战一些字体显示方面的旧观念
比如在设计过程中把一个单词的磅值设为15
将其比例放大后再重新使用相同的字体对象
这时你可能在用比如说120磅来显示15磅的字体
那么就要对120磅的字体重新执行实例化
这样才能得到正确的字体行为
希望大家能把字体当作一种宽泛的对象并使用系统API来获取字体
具备了视觉属性字体便能够打破旧有观念
基于系统字体的API将会一直提供正确的字体行为
所以大家尽管放心使用
以上就是今天的全部内容
我们介绍了新的San Francisco字体
及San Francisco的优秀创意 视觉尺寸还有其它一些概念
介绍了自动字符间距和字体字重及San Francisco的各种功能
还有即将在平台上普及的数字显示方面的重大变更
这将使用比例数字作为默认显示
最后我们介绍了API的潜在隐患
如果您有任何问题可以联系 迈克 或 柯特
或者访问我们的开发者网站
稍后的演讲是手表设计的要诀和技巧
之后是文字与字体实验室届时会有答疑环节
谢谢大家