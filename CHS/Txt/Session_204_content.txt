Watch用户友好
大家好我是加西德·萨迪克
在苹果用户友好团队工作
欢迎参加《Watch用户友好》讲座
开始正题之前
我们先聊聊用户友好是什么
要知道有许多不同用户
可以想见
这些用户有着与世界互动的不同方式
不过针对本次讲座
我们主要关注这些用户的部分子集
例如存在视觉受损或听力障碍的用户
作为开发人员
这些用户为我们带来特别的机遇
这对我们而言非常特殊
这个机遇不仅伴随着这些个别的小组
而且还促使他们完成了
原本不可能完成的任务
现在 你们在这里是因为大家创造出
可以实现神奇功能的应用
那么 我们来让所有人都来实现这些神奇的功能
无论他们是谁
也不论他们是怎样与世界发生互动
现在Apple正致力于这一理念
例如通过 iOS和OS X的用户友好功能
如VoiceOverSwitch Control
Assistive TouchZoom
Guided Access等等 不胜枚举
Apple Watch也是如此
我们尽最大努力让设备对尽可能
多的用户都能用户友好
现在我们开始正题
首先 我们来谈谈Apple Watch的
用户友好 具体是怎样以及如何发挥作用
接下来 我会告诉大家作为开发人员
怎样让自己的WatchKitapp也具有用户友好性
大家也将会看到这些API是怎样运行
最后我们会总结几个诀窍和
技巧 以供大家
在设计自己的用户友好体验时进行参考
我们来谈谈用户友好功能
先从VoiceOver开始
首先 VoiceOver是针对盲人用户的替代界面
其背后的理念很简单
VoiceOver就是将用户手指触碰的任何内容都读出来
例如 如果我的手指放在Clock图标上
VoiceOver就会读出“钟表”二字
此外 我们还提供了一系列手势
便于VoiceOver用户
安全有效地在在界面导航
稍后我会具体演示
对于低视力用户我们有Zoom功能
正如大家所想Zoom可以将
界面放大
此外 我们还有两手指手势
这是受到iOS放大手势的启发并运用了Crown
真正实现无缝对接便于轻松
在放大界面导航
稍后我会进行演示
与Zoom类似还有X-Large表盘
这可以大声简单流畅读出时间
因此用户可以轻松抬起手腕
确定此刻的时间
现在Apple Watch有着简约的屏幕
虽然字体在很大程度上会影响到可读性
部分用户可能会需要加大字体
针对这些用户我们有字体大小滑块和设置
对于对具体光感或颜色敏感的用户
还有Grayscale开关可以过滤整个Watch的UI
使之成为完全黑白色调
对于这些特殊用户而言这就会更便于阅读
不会受到界面干扰
部分用户会感觉界面模糊
不便于阅读
可能是因为对比度不够
或是存在模糊或失真干扰
针对这些用户我们有ReduceTransparency开关
可以降低Notification Center
和Siri等屏幕的透明度
便于用户读取屏幕内容
接着还有Reduce Motion功能
这可以降低屏幕周围的运动效果
运动本身是绝对必要的
这与用户的动作直接关联
举例来说从表盘到
Home屏幕的过渡并非是要放大图标
我们是让它直接显示
这对部分用户而言是创建了更具方向性的体验
最后
存在听力问题的用户可以调节左右平衡
并通过蓝牙配套耳机设置AppleWatch的单声道音频
我们来看这些怎样发挥作用
好了我们先从VoiceOver开始
可以用三种方式打开VoiceOver
可以在iPhone上使用Apple Watch app
在Apple Watch上使用Setting app
如果在Apple Watchapp做了设置
还可以用Accessibility快捷方式
只需三次点击Crown就可以启动VoiceOver...
VoiceOver启动 天气
为了演示VoiceOver如何工作
我们先用VoiceOver做点什么
来看纽约现在几点
在此之前 我们先了解一下屏幕是什么样子
要想这么做最好是把
手指放在屏幕上让VoiceOver读出
手指所指的内容
那我继续这么做
日历
音乐 地图闹钟
那么现在我实际上了解
自己在屏幕的什么位置
我想通过这些元素来到 WorldClock app
图标 以便打开这个应用
现在 VoiceOver用户通过这些元素的方式
是右滑到下一个元素或左滑到
上一个元素
那我继续右滑
直到VoiceOver说出World Clock
表示它聚焦在World Clockapp图标上
世界时钟
世界时钟
停下来-世界时钟
现在VoiceOver讲到"World Clock"
这是指我聚焦在World Clock
现在实际上打开app我需要激活元素
要激活元素
双击屏幕上的任何位置即可
稍等 需要加载一会儿
World Clock
World Clock
返回库柏蒂诺
今天下午1:37
现在我想确定纽约此刻的时间
因为这是我的Watch
我知道纽约是在名单的最下方
所以只要滚到底部即可
VoiceOver用户可以把两个手指放在屏幕上
再朝着那个方向滚动
或者轻击滚动轮的那个方向
那么我要继续这么做直到到达底部
第4到7行
第6行到第7行
纽约今天下午4:38
加上3小时
我知道纽约现在几点了
这就是VoiceOver
我们继续来看Zoom
首先要把VoiceOver关掉
可以使用Accessibility快捷方式来关掉
点击Crown三次即可
VoiceOver关掉了
所有的Accessibility设置都在Setting里
Accessibility
Zoom
现在我想读出文字内容
实际上 文字太小
这里看似可以放大一些
那就用Zoom来放大
只需用两个手指双击屏幕即可
现在就可以放大了实际上需要
稍稍调整放大尺度
要想调整放大尺度
只需用两个手指双击并滚动即可
非常棒
现在还得调整焦距这样就可以读出文字内容了
现在可以用两个手指做拖拽手势 和iOS
Zoom拖拽手势非常相似在这里比划
不过还有个问题
这样有点慢
而且手指会挡住我要读的内容
针对这个问题
我们实际上运用了Crown来调整焦距
如果将Crown向前旋转
就可以从左到右
就像这样
一旦触及线条底部
就可以移到下一条线
同理 如果我反向旋转就会是相反的效果
好了
这就是Zoom
正如大家所见Apple Watch是个
相当用户友好的设备
但是在实现完全用户友好之前
还需要具备用户友好应用
大家就是为此而来的
大家也是为通过把自己的应用变得用户友好
成为用户友好的顶尖高手也是要成为
VoiceOver用户中的顶尖高手
可以通过WatchKitAccessibility API
把自己的应用变得用户友好
大部分情况下这实际上
都相当简单
这会涉及到在几个界面项中
设置两个属性
每个界面项都是WKInterface Object的分类
就是在这里需要对用户友好信息进行注释
这样 界面项就会具备用户友好性
只需这两个核心功能来将应用
变得用户友好我们继续介绍
这些内容先从Existence讲起
在开始之前VoiceOver需要了解
什么才是 什么不是这样的元素
用户友好元素是在演示中
我滑过的和触碰过的那些内容
在默认情况下 我们的框架可以提供许多这样的内容
比如 按钮 标签
开关 这些都是用户友好元素
但有时 你可能会用到默认设置之外的情况
例如 如果希望看到不是用户友好元素的图像
但是它可以向用户提供有价值的信息
或者如果想将若干可用性元素集合起来
便于VoiceOver用户在屏幕中导航
就像我们在Conversation组做的那样
我们把三个图标集成一组
这样VoiceOver用户就不必滑过三次
来进入一个Conversation
可以通过在界面项把
AccessibilityElement放入功能设置
VoiceOver用户看屏幕显示的方式
是通过对这个元素的简短描述实现
这个简短描述就是用户友好标签
正如AccessibilityElement
这里很多内容是取决于你
用户友好是指通过查看
界面项所包括的文本内容的标签 但是有时
所指得标签可能存在误导或不存在
Home屏幕就是这样的例子
这些app图标没有和
任何文本内容关联
在这些特殊情况下
需要自行设置Aaccessibility标签
可以通过将字符串
加入功能中
在界面项的Accessibility Label
现在这些app可以实现这些应用
或者是功能的90%的用户友好
不好意思
但是要真正实现用户友好体验
还应该尝试这三个功能
我们来具体谈谈
现在你可能还记得VoiceOver说过一些
诸如“按钮”或“可调整”或“未开启”
这里真实发生的情况是
每个用户友好元素都与
一系列特性相连接
这些特性让VoiceOver知道
如何将元素呈现给用户
在Conversation组具体怎么用
举个例子来说明我们把按钮特性加入其中
让VoiceOver了解可以双击
并激活这个元素
这样就可以在界面项的
SetAccessibilityTraits功能中加入遮罩效果
现在有时 标签和特性不足以向用户表示
这个元素是做什么用的
在这些具体情况下使用用户友好
提示可能会起作用在标签被读出后
字符串也会被读出
这样用户就会了解当聚焦于一个元素时
他们可以做些什么
可以通过在SetAccessibility Traits功能设置中
加入字符串设置用户
友好提示
现在部分元素与一个值相关联
在该元素的生命周期中这个值常会发生改变
以Timer app中的Minute Picker为例
其中的数值代表着
当前所选的分钟数
在这一特殊情况下
我们有一个Accessibility Value
在标签被读出后或数值改变后
可以读出的数值
可以通过将字符串加入界面项的...
Set AccessibilityValue
来设置这个值
因此这些是核心的用户友好功能
我们再来谈谈一些更复杂的内容
图像区
现在 这是Watch中的常用模式 将一系列
信息 放入图像中再呈现给
用户
以Weather app中的刻度天气为例
我们可以为其中加入用户友好注释标签
可是要想用简洁的几个字说明图像中发生了什么
很有难度
如大家所见有11个条件
每个都与一个时间关联还有当前的温度
我们所真正需要的是找到相关的区
把它们
分到不同的区之中
再关联上相关信息
例如 关联了一个Condition图标
是凌晨1点 多云
可以通过WK用户友好图像区的对象实现这个功能
这个区是CGRect框架
信息为字符串标签
可以运用这些对象数组将之加入界面项的
Set AccessibilityImage Regions功能
向用户呈现一系列用户友好元素
他们可以滑动或触碰这些元素
最后
在你设计
自己的用户友好应用用户体验时
可能会碰到的情况
是有时需要为VoiceOver用户稍稍调整UI
为此 你的应用需要了解
VoiceOver是否在运行
为此 我们添加了新的API
WK Accessibility中VoiceOver在运行
我们来看这些怎样发挥作用
那么 我创建一个应用可以在手腕上预订三明治
而且这相当简单
首先需要选择用什么材料
夹放 三明治
我选的是面包
再加些烤牛肉
也许还要点生菜
最后再放上面包
我返回的时候会看见三明治的视觉呈现
接着继续可以下单
我们希望看看这个应用是否对
所有用户都友好特别是VoiceOver用户
有一个很好的方式可以实现这一点
就是打开VoiceOver
尝试应用的效果
我们先用Accessibility快捷方式打开VoiceOver
VoiceOver启动制作三明治
按钮
好了
那么我们立刻会有个问题
我们可以看到三明治的图像显示
这可以为我们提供三明治
具体成分的有用信息
但是完全不具有用户友好性
因此我们应该为VoiceOver用户实现这一功能
制作三明治
下单按钮我按钮
现在虽然这对我们而言很明显
因为我们可以根据信息按钮提示看到
这是信息按钮VoiceOver用户只能听到
字母i 因此会很困惑不知道这是在做什么
我们应该添加用户友好标签
以便读出信息
而且 这个按钮看上去有些小
可以想见对于VoiceOver用户而言
要感知并发现这个
信息按钮可能有些难度
因此 在VoiceOver运行时 把这个
弄得大一些
我们继续讲
制作三明治
制作三明治
在三明治中点击自己想要的食材
一层烤牛肉 210c
两层
按钮
第一个问题VoiceOver读出210c
VoiceOver读出的内容不一定限制在
界面的屏幕空间内
我们应该使之讲出210卡路里
还要注意我们滑过了三次
来加入每一层的内容
假设 我当真非常饥饿
立刻就想拿到三明治不想要滑过
三次才加入来加入每一层的内容
我有个大三明治
我们这么解决问题把每一层都分组到一起
我们继续来解决这个问题
那么你其实可以通过Storyboard解决很多
这样的用户友好问题
我们来继续先在Make Sandwich屏幕
解决在Make Sandwich屏幕中的元素
分组问题因此VoiceOver用户
每层只需滑动一下
首先 我们要发现包括
这三个标签的组
就在这里
我们可以到侧边栏设置"Accessibility Enabled"
这就把它变为用户友好元素
此外 我们还加上一个按钮特性
这样用户就会知道可以双击
并激活这个元素
在屏幕上还有一个问题是卡路里标签
被读成“210 c”而不是“210卡路里”
我们来看卡路里数字
读出的位置就在这里
在Calories标签上
把文本内容设置成卡路里数和c
在SetAccessibilityLabel再加一行
我们在这里加上卡路里标签
调用功能设置Accessibility Label
再加上所用卡路里数的字符串
后面是字符串Calories
这样用户会听到“210卡路里”而不是“210 c”
我们再来解决MakeSandwich屏幕的用户友好问题
我们希望测试自己的改变
可以在Watch上构建但是为每个重复的改变
都在Watch上构建则会花费时间
相反 我们可以使用Simulator
那我继续在Simulator上运行
现在来测试Simulator上的用户友好改变
必须要用到AccessibilityInspector
可以通过Setting打开
AccessibilityInspector
GeneralAccessibility
AccessibilityInspector
这是只适用于Simulator的工具
可以通过点击检测元素的
用户友好性会把红框中所包含的
所有内容都显示出来并会看到该元素的
具体说明如标签 提示 值
相关特性等
因此当你要实现元素用户友好时
这一点相当有用
我们继续来看这些改变是否会发生
有了AccessibilityInspector
点击只能选中一个元素
激活元素需要双击
我们来点击这里
有几个问题需要注意
首先 整个层怎样成为一个元素
因此 现在VoiceOver用户只需每层滑动一次
这样制作三明治可以更快更方便
注意Calories标签现在可以读作是"210卡路里"
这样用户会更明确
这具体代表什么意思
最后是个按钮特性我们的用户现在了解
可以双击并激活这个元素
屏幕问题解决了
我们继续来解决开始屏幕的问题
实际上这是界面控制器的位置
首先是三明治图像显示
根本就无法
看到
这个三明治的图像显示实际上
可以为用户提供许多信息
因此 若只是在图像上
增加用户可用性标签很有难度
因为我们想表示的是每层的内容是什么
各层的顺序如何
因此似乎是用户友好图像区可以实现这个功能
我们先来看在哪里设置三明治图像
是在这里设置这里生成图像
我们来生成图像区
那我加上功能生成图像区
这个功能会在列出每层内容
创建用户友好图像区
设置图像区的标签使之成为该层或
三明治层的名称
在设置框架使之成为生成原始图像所用框架
最后我们把它加到数组再返回
我们继续把这个加到标题上
这样可以从界面控制器上调用
然后让我继续从界面控制器上调用
我们这样就得到了三明治的图像
我们调用Set AccessibilityImage Regions
或是生成图像区
现在 第二个问题是信息按钮
只读出了“i”
因为标签在信息按钮的整个生命周期
无法改变
我们可以只通过Storyboard设置
我们来选择信息按钮
我们继续 将标签设置为“信息”
像这样好了现在标签问题解决了
但是信息按钮还有一个问题
就是对VoiceOver用户而言不够大
在屏幕上不容易感知
我们需要根据VoiceOver是否运行重新调整大小
因此我加上一个功能来实现
现在做的是要检查VoiceOver是否和
WK AccessibilityVoiceOver Running
调用一起运行
如果是 则要把高度和宽度设置为40
否则就设成20
现在我们来调用Will Activate
以防万一有人打开了VoiceOver
在这个屏幕上 我们应该继续并注册通知
并要使之调用这个功能
通知具有WK用户友好性VoiceOver状态改变
现在我们来修复运行中的应用
进食
进食修复
进食修复
制作三明治
- 按钮- 刚才
我们可以看到信息按钮已经变大
信息按钮
标签读出方式也正确
我们继续来制作三明治
制作三明治
按钮点击想要的三明治
烤牛肉 210卡路里
按钮一层烤牛肉
面包 130卡路里
一层面包
一层烤牛肉210卡路里
按钮
好了 刚才你也看到卡路里标签的读出方式
正确这对用户更为清晰
每一层都是单独元素
使得导航更为方便
我们来继续看看三明治的图像显示
来看看现在用户友好性如何
制作三明治
烤牛肉
图像
面包 图像
现在 VoiceOver用户可以在滑过三明治
没问题
Home
如大家所知作为开发人员
现在可以制作自定义的表盘complication
和你的应用一样这些也需要具有用户友好性
我们的框架可以决定大部分表盘组件的
用户友好标签还有两种情况
用户友好标签可能表达不准确
或是不存在
来看 每个表盘Complication
都包括一组图像和文本供应方
虽然大部分供应方都有着明显的
相关客户友好标签有两个却没有
图像供应方和Simple Text供应方
对于这两个特殊的供应方
我们加上了属性Accessibility Label
其功能类似于用户友好标签
在普通WatchKit应用中的作用
实际上 这非常容易
我制作了表盘组件让预订三明治
更为简便以防你此刻当真
饿得发慌没空打开应用
只需要抬起手腕
即可就能拿到三明治
这里就是Complication就在这儿
因为这是个图像
并没有相关的用户友好性
那我们继续在上面设置用户友好标签
进入Complication生成的位置
或者是供应方生成的位置
我们来设置用户友好标签
没问题
非常简单
来看VoiceOver用户会听到什么
现在就拿到三明治
那么 如果没听到
标签会读出“现在就拿到三明治”
现在VoiceOver用户就可以
双击预订三明治了
正如大家所见非常简单就可以
让自己的应用和Complication具有用户友好性
来讲讲大家需要牢记的几点
以供设计自己的用户友好体验时作参考
首先 要让图像具有用户友好性
特别是如果它们可以为用户提供
重要信息时
应该在上面设置用户友好标签
或者当它们提供非常复杂的信息时
使用用户友好图像区API
当设计自己的应用时
考虑一下VoiceOver用户将在屏幕上怎样导航
如果不这么做VoiceOver用户
就不得不多次滑过才能加入逻辑项
因此通过Set As Accessibility Element
对用户友好元素进行分组
可能对非VoiceOver用户也是如此
但是应该避免使用过于小的界面项
这样VoiceOver用户会很难感知
在屏幕上很难找到太小的界面项
最后 也是最重要的一点
在自己的应用中尝试用户友好的效果
来看自己的应用字体变大的效果
或是看看应用在VoiceOver打开时的效果
你可能会被自己所见吓一跳
总之 Apple Watch是非常用户友好的设备
但是在实现完全用户友好之前
还需要具备用户友好app
这也是大家准备为VoiceOver用户
实现的这一功能
正如大家所见这其实非常容易
让我们为所有用户
都实现这些神奇的功能让应用物尽其用
无论他们是谁
也不论他们是怎样与世界发生互动
感谢大家
在《WatchKit编程指南》讲座中
大家还可以了解更多内容
大家还可以在开发人员论坛中提问
或者与开发顾问保罗·马科斯联系
感谢大家
非常感谢