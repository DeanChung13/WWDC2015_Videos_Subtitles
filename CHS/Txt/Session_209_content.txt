使用 ClockKit建立Complications
嗨大家好我是伊莉莎我旁边这位是保罗
我们将告诉你们什么是Complications以及您如何来制作他们
所谓的Complications是一些小信息件
就是在您的钟面上显示正确的时间
在您看到的这个钟面上
如果我们把时间从方程式中移出
剩下来的一切就叫做Complications
所以这儿您看到的都是建立OS系统但是
在Watch OS 2 里您可以开始为钟面创造属于您的 Complications
我们将会告诉您该怎么做
我将会举例来创建一个Complication
在一场足球比赛中
来显示即将到来的比赛
因此让我们看看...
你们已经建立的想象这样一个Complication
它看起来像会去选择它
那么聚焦于中间的钟面
如果您是在用力触摸屏幕
您可以定制钟面
向右滑动可以让您
开始打造出您独特的Complications
转到数字顶部
可以选出一个Complication
因此如果我们滚动到列表的结尾
我们会看到我们尚未建成的足球比赛Complication
我们可能选择它
我们能看到现场数据
显示在钟面上
您将如何提供数据
去安置这些Complications
正如您面对面看到的
我们所有的时钟都有一个一致的外观和感觉
正是这点
使得和钟表保持互动是愉快的这正是我们想要做的
在保持那种一致性时
那些正在手表上运行的扩展
将会以文本和图片的形式
为这些Complications提供数据
然后钟面实际上会以某种方式移动
以配合其他页面
因此如果我在
我的手表上安装了这种Complications
每次我举起手腕
我都会立马去看它
这是一个伟大的事情这是伟大的事情之一
关于建立Complications
同时它也呈现了一种挑战
因为随着时间的流逝
在Complications展示的信息需要更新
因为它是可见的
一旦您举起手腕
随着时间屏的打开
更新需求就已经发生了
如果您想一下
这个表可以有五个Complications
展示在这个单独的钟面上
我们不可能有时间把它们都开启
拉新数据
可能会涉及网络请求
或者让所有的人
都在屏幕上带着数据及时返回
来解决这个问题
我们正在进行的是提前以时间轴的形式
为您的Complications收集数据
因此你们要给我们一个时间轴的数据
时间线的多少取决于
您申请的数据密度
和我们一天内看手表的方式
每次我看它Complications就已经更新了
显示的是在那个时刻有意义的信息
现在时间轴真的是一个非常强大的概念
保罗待会将会和我们谈论这个话题
但是我想提及它带给我们的另一种形势
就是Time Travel的特点
Time Travel是一个我们在Watch OS2里介绍的新特点
使您能够正确地转换表冠
在钟面您能够看到您的Complications会是什么样子
它展示了一天当中的不同时间
因此您可以提前去看看下一场比赛什么时候会开始
或者一个小时以前我参加了什么会议诸如此类
因此为了看到手表是怎么和这个Complication工作的
这里没有多余的工作您不得不去
做到这一点
通过数据线的形式提供您的数据
我们可以免费使Time Travel成真
着手行动吧因此您可以在任何时候开始一个新的Xcode工程
或者把一个老工程转换成您可以选择的Watch OS 2
来加一个Complication
您可以检查下那个盒子那将成为Xcode的来源
以自动生成您需要的文本
和设置的东西超级容易
您不需要做其他的事情
如果您浏览到您的WatchkitApp推广的一般信息
♠您提供我们待会将会讨论到的数据来源课程
您也可以检验
那些您想支持的Complications家族
这些Complications家族到底是什么？
在WatchOs上的Complications 看起来是不同的方式
在不同的钟面上我们把它们
分为了五种不同的家族
你们可以分别选择是否支持每一个家族
因此
我想向你们演示这些家族的样子
这是模块画面
在它上面有两个Complications家族
小模块化家庭给您一些方形的小模块
小Complications大模块化家族
就是在模块中间的那个
可以展示清楚的效果和更多的数据
因此我们一直集中精力在这个例子上
很多类似模块也支持Complications
这些Complications在实用家族
有一种适用各种类似小角落的Utilitarian Small模块
还有一种UtilitarianLarge模板
能沿着底部展现整个区域
最后 在彩色模板有一个单独的家族
我们称它为小环形
这是它用代码的样子
正如您所期待的那样这是一个详细的介绍
好吧
因此当用户在某一方面启动您的Complications时
他们会选择将它作为一个特定的位置
只要那个Complication出现那个位置就会被连接
而且会出现一个特别的家族
您应该被告知您正在为这个家族提供数据
那是因为您需要这么做
去决定如何把那些数据展现出来
并且这里有一些方法可以为每一个家族
展现您的数据
另外我想要向您展示
我们的设计师已经创造和收集到的样板
对于小模块化的Complications家族
我们有这些样板
在整个不同的模板里
您可以有小文本、两个不同排的文本、一个图像和文本
您可以做一个大的文本或一个大的图片
这些填充在底部附近的一个环里
可以显示表格里一些事情的进展
这一个可以在0和1之间变化的浮点数字
您可以把文本或图像放在里面
最后有一个模板可以让您做类似的事情
显示一项体育成绩
Modular large也有很多不同的方式
可以让您布局您的数据
有一个简单的标准三行模板
可以使用一个可选图像
您可以做一个列样式模板
或两个不同的列样式模板
实际上 您可以做一个大的模板
这是一种适用于厨房定时或日期文本
以及许多其他您可以用它做到的事情
实用的小模板大多数都是平的
并且在边角处有一个可选的图像
但是您也可以用一个大一些的图像
您也可以用UtilitarianSmall做这个风格
Utilitarian Large仅有一个模板
一个可选图像和一些相近的文本
最后 CircularSmall的模板是相似的
对比ModularSmall的模板有一些尺寸方面的不同
所以 您在Watch OS 2进入模板
我要去看一下在代码中的意思
所以让我们缩小
我们的足球俱乐部的数字
Modular large模板
这有四块
有一个标题图像
您可以提供标题文本
然后两行正文文本
您可能已经注意到了那有很多Complication模板
所有这些对应子类
对于CLKComplication模板这是所有父类
您可以选择用哪一个
和如何填写它的各种性能
所以这很简单
因此这是CLKComplication模板之一
Modular Large标准模板有一点大
但是它能传递一个非常重要的
以名义命名的信息权
这个模板是为
Modular LargeComplication家族创建的
当您被问到的时候这个真的很关键
提供Complication特定家族数据
您提供的模板符合这个家族
这是我们为什么已经把家族姓名
建立到了班级名里
这里是为了消除这个困惑
看起来
像这样出现在环形面显然是不管用的
现在 您可能注意到了这里还有一些有点奇怪的地方
我们有一个图像和三个文本的特性
但是它们不是代码里的UI图像和NS串
我们有图像提供和文字提供业务
这里正在发生什么？
那么让我们进入下一个部分
您是如何提供文本和图像的？
我想解释下这些课程是为了什么
以及它们可以为您做什么
让我们从图像开始
这里在彩色编辑屏幕里是我们的Complications
因此用户能够定制他们想要看到的Complications
他们可以挑选Complications
在那个课程里
他们也可以定制界面的样子和感觉
包括改变颜色
当您给您的Complications提供图像
这些图像必须已参与同一个颜色主题
那是用户已经选择了的他们的界面
他们需要能够正如您看到的那样改变颜色
因此这里我们的足球服可以转变成
任何用户正在选择的颜色
因此一个图像提供程序是一类属性排序
它能够成功达到这样的效果
所以您可以提供一个背景图片
您也可以把它做为模板图像
一张图像只允许包含阿尔法信息
而没有属于它自身的颜色
它可能是像素也可以是任何您想要的颜色
但是我们将只关注阿尔法通道
它将会根据客户选择的颜色作出相应的转变
但是您可以稍微比这个多做一些
您可以选择
提供一个背景图像和一个前景图这些图像将被放在彼此的顶部
背景图将会根据界面的颜色而改变颜色
前景图将被浮于背景图上
您可以在您的图片上获得更多的细节
您也可以选择把您的前景图变黑
让我们看一看这样子的代码
您给我们背景图
您给我们一张可选择的前景图
您能够选择您背景图的颜色
对于大部分将要决定的颜色
那些用户已经选择好了
因此背景图代表了
您想要您的背景图是什么颜色如果您能够选择的话
另外还有一些背景将会被任命
但是只要它们出现在
被用户选择了颜色的界面上您的选择就是无效的
因此在这儿提供的颜色仅仅是一个选择的参考
好吧 这就是图像提供者
那么现在文本提供者又是什么呢？
这真是酷
能告诉您一些关于它们的信息我真的很激动
当我们开始构建Complications时
在Watch OS 1里
我们挑战了大部分
归咎于Complications的微不足道的事实
在其它UI中
您经常为您所有的平台创建
它们当中的一些甚至小到只有44像素我们正试图
找寻可以用到这个如此小的空间上的合适的信息
但是在没有把您的文本缩小的情况下
它是很有挑战性的
举一个很好的例子关于文本提供者的主意
因为空间非常有限
我们想借用一些我们已经做过的工作
来解决如何在小的空间里设计出一个合适的文本的问题
因此我们引荐文本提供者做为你们的一种思路
以此来向我们声明您的目的
而不是总是给我们一个格式化字符串
然后我们会处理格式细节
为您找出合适的字符串
拿日期格式来举例说明
这里有一个CLK日期格式提供商为您做的文本
我想要向您展示什么是对您有用的
假设您想要在您的Complications里
在一行内设置时间是：星期三 9月23日
现在空间非常拮据
但又有如此多的内容在您大多数的文本里
您显然不会喜欢看到类似这种
我们已经丢失了这一类的大批信息
这比截取更好
如果我们能够转而依靠持续增长的字符串
这一类仍然在增长的字符串
例如我们可以开始缩短一些字符串
您可以缩短更多的字符串
如果那样做仍然不奏效我们甚至可以开始丢弃一些字符串
而不是截取一些
我们更乐意看到9月23日而不是星期三点点点
最后 为了把日期显示出来我们可能只有更少的空间
来应对我们突然放下的内容
这是CLK日期文本编辑器可以为您做的事情
您有一个日期想要显示
或者您有一个单位想要完美地展示
正如这个例子当中的星期几、月和日
您创造了一个文本体编辑器从一些碎片中
那些文本编辑器
可以被粘贴到这些样本当中
并且使这些样本根据不同的内容看上去也不一样
因此这里我们要说的是
在Modular Large Complication里显示一个他们当中比较长的日期
这里有相同的文本编辑器
制造了非常相似的代码
显示了在进一步约束空间下不同级别的内容
另外这儿还有相同的文本编辑器编辑出日期
在这些Circular SmallComplications里
没有任何地方都有的截面字符串
没有不得不做的工作在您现在看到的代码范围之外
就是文本编辑器
同样也有其他类型的文本编辑器
您很有可能打不开编辑时间要用到的文本编辑器
会允许您随意编辑文本
但是它比NSString更好
因为除了能编辑出您想看到的内容
您也能够编辑出一个比较小的版本
在截取出理想的字符串之前我们通常会退一步选择编辑较小的文本
这里有一个时间编辑器
时间格式很好
您获得了很好的小写的代码与系统的其他部件都相匹配
如果没有足够的适合的空间
您会丢弃AM/PM
正如您在日出/日落Complication里看到的
正在底部使用的这类文档编辑器
也有一种时间间隔文本编辑器
这类编辑器对时间格式的文本很好
您在日期Complication会用到它
它也有一些很不错的格式特点
如果在第一天早上它看起来是这个样子
第二天下午的话会是这个样子
如果两天都是下午那就很灵活
丢掉多余的AM/PM符号
是为了使效果看起来更好
在一个有限的版本里它同样可能不好做
如果这种效果不合适
这种小版本的编辑器就是有用的我们鼓励你们用这个
还有一点我想告诉大家
在我说出它之前让我向您演示它解决的问题
这里您看到我们数字化的月亮相位
Modular LargeComplication
在这个相位底部第三行
在月亮相位Complication那里它告诉我们时间的总数
是截止到月落时 时和分的条款
因此今天月落在2:19
在三小时一分钟之前
从11:18开始
这个字符串在11:19时随着时间记号的改变
显示了3小时11:20时的内容也显示了2小时59分的内容
还有更多
现在 想像一下如果您正在创造一个时间轴
去放置这个Complication
您需要提供一个新的模板
对一整天的每一分钟
就需要很多个模板
也有可能更糟糕
因为月亮相位Complication记号
是随着分钟记录的
如果时间轴的记号随着秒数变化而记录会怎么样呢？
想象下得需要多少模板啊
这很可能远远超过我们合理的贮藏
造成难以置信的浪费
因为这些字符串
是可以从两条信息里推导出的
即您正在裁剪的日期和您正在用的日期
我们知道现在的日期
这就是我们正在做的
我们的手表
所以我们想要给您一种可以制造这种字符串的方法
它不用在您的时间轴放置大量
多余的信息
这就是相应的时间编辑器可以做的
这正是我们在尝试它代码时候的样子
去制造第三条您在这里看到的文本线
您将会从日落里获得时间
我们将会选择我们想要展示的单元
实际上我将会在下一个屏幕里显示很多不同的
您可以利用的单元
我们将选择一种风格另外 再一次
我将会向您展示可能的风格
现在您看到的是自然风格
您可以做一个这些元素的
相应的时间编辑器
然后您设置下文本编辑器
把您正文的文本编辑器作为您的模板
钟面在做其它工作的时候
它总是会展示相对的日期到日期
那是您在无需为您做进一步工作的每一刻
给予我们的
这就是一些我们可以提供的风格
正如您看到的如果看着自然风格和偏置式风格
您可以得到一个细分
相对日期或者非常课程相对日期
这取决于您想要看到的日期
取决您想要展示多久前的日期
我们显示星期几、时间、月、年等等
所有的方法分秒就可以做到
好吧这就是文本编辑器和图像编辑器
我要总结下它们是怎么用的
您把您的内容给我们
您从很多个可能模版当中
选择一个
与您被问道的Complication家族
相匹配
并提供数据给我们
然后您放置那些
图像编辑器和文本编辑器
然后您以时间轴的形式
将那些完整的字符串传递给我们
为了谈到更多如何形成时间轴的方面
我想要邀请保罗
这就是保罗
好极了！
掌声
大家好
像伊莉莎提到的为了您的Complication
我们将会以时间轴的形式聚集我们的数据
时间轴有益于两件事
崭新的Time Travel特色
和我们将向用户现时呈现的内容
毫无延迟的腕表功能
让我们看看关于如何考虑时间轴和Complications
我们现在开始通过在这创造一个天气Complication
在左下角 57度
因为现在手表显示10:00AM
我们的气象员说
在这个地方外面温度是57度
事实上 我们有今天一直到下午七点的
这个地方的天气预报
可以利用
对于时间轴我们并没有描述一个范围我们结合实际数据
我们想要展现时间上的一个点
因此让我们滑动到那边
随着一天时钟的前进
我们将会展示您提供到钟面时间轴上的
最近的数据
因此当过了11AM我们将会把天气预报更新到55度
随着时间慢慢接近中午11:59
接近59秒天气仍然是55度
一旦时间到了12点我们就会更新模板
这个和Time Travel工作的特色是相似的
由于可以为用户导航一整天的内容我们将会展示在您的时间轴上的
最近的节点的数据
因此当我们过了1:00PM我们将会把更新温度到54度
其它Complication是一些容易理解的例子
因为您的数据完美地匹配了
在时间轴上的流畅时间
让我们看一些比较复杂的内容
通过在这建立日期Complication
如果您是幸运的您的日期
会有很多间隔
今天我去吃了午餐
接着我将去理发
然后接下来我看到时间合适我就会去
跟我的朋友看一场电影
我们可以心无旁骛地做这些事情
我们接通我们想要展现的这些事件模板
来让它们开始
并让它们清楚事件结束的时间
让我们看看在实践中这是如何进行的
今天中午的时候我们会看到我们吃了午餐
而一旦午餐结束在1:00PM
我们就看不到腕表上显示吃午餐的内容了
这真是个糟糕的用户体验
更糟糕的是尽管越来越接近4:00PM
我却不知道
我需要开车去理发
您从来不想删除那个为您做头发的人
现在太晚了 我要去烫头发
手表也不好好工作了
让我们这样设置
第一个错误是
假设我们记录了那些
在时间轴上不用的时间框
所以让我们丢掉那些时间框
显示事件时不再有用
在一个日期Complication里
我们本应该把模板放置在前一个事件结束的时候
这样您就有充足的时间去设置您的下一个事件
事实上发生在这儿的第一件事
并没有前一事件因此它可能是有用的
为了获得充分的提醒
您在午夜标记出它
当您在早上醒来的时候
我们应该让我们的用户知道在接下来这一天
他们没有什么事情可担心
用我们的提示不会再有问题
这是如何工作的？
中午的时候我们像以前一样我们知道要吃午餐
而一旦午餐结束我们有充足的提示时间
来提示我们需要去理发
我们将会和朋友见面
因为我们没有错过任何一件事
当我们看完一场电影的时候
我们可以回家并且知道我们没有错过任何事情
因此您怎么让您的数据
成为您的代码
您将用到Complication时间轴入门
伊莉莎早先时候描述了生成模板
要用到本文编辑器和图片编辑器
以及我们需要用一个NSState连接的内容
我们将会把目标填充到
Conciliation时间轴的入口
当您递交信息到钟面的时候我们会校对日期
并且在时间轴上做下笔记从而知道
当时间到了那个点的时候要去展示相应的模板
您可以看到目标做成代码的样子
用时间属性和
Complication模板属性
那么您实际上是怎么和我们交流这些数据的呢？
在您的工程里您将会有一个目标
即实现CLKComplication数据源协议
这个目标
被注解在您的XcodeWatchKit扩展目标设定上
在您设置您的工程的时候正如伊莉莎向您展示的
您将会在您的目标上获得成串的指令
他们通常是每个Complication
另外我们会给您一个CLKComplication目标
那个目标包含一个您想要切换到的家族属性
这点上您得决定这个
是Modular large吗？我应该用哪一个模板？
是Modular Small吗？
哪一个文本编辑器需要和我选择的这个模板相匹配？
另外除了用Complication
这个您感兴趣的提供内容外
我们也会给您一个处理器
您将会用这个处理器给我们提供要求的数据
让我们知道您在做运行
这是非常重要的
因为您会想有机会更新您的背景内容
您想要知道什么时候做运行
因此让我们开始建设我们的时间轴
您可以看到钟面在您的左面
您的延展在右边
我们想要通过按钮建立时间轴
在您的延展内容里
您可以看到您的Complication控制对象
现在 这是Xcode为您创造的默认对象
去执行Complication数据源协议
这是我们将要沟通的对象
因此当我们开始的时候我们会询问您
现在应该展示哪一个时间轴入口
您需要打包好一个时间轴然后通过电缆和处理器
发送给我们
然后我们就会把它添加到正确的时间轴
在所有我们询问的问题列表里有个非常重要的提示
我们提出下一个问题是基于
上一个问题您已经提供给我们的信息
因此我们将逐渐把时间轴建立起来
我们需要非常精确的数据
您不要盲目地标注当前的NS日期为这一记录
但如果您需要10:00AM而预先数据是10:30AM
您就应该标注这个Complication
时间轴记录为10:00AM
因此这个功能
我们将会获取目前的时间轴记录为Complication
再次强调 我们将给您一个CLKComplication
这里有一个家庭属性您应该切换到
决定哪个模板、哪个文本和图像编辑器是您想要的
并提供一个需要时间轴记录的处理器
当您完成了复查您应该做好标记
现在我们有您的目前记录
我们需要更新您的时间轴
为未来和过去
我们开始看看未来吧过了特定的一天后
我们会一直问您的时间轴里有什么
这一天具体是哪天
取决于您之前交给我们的数码
而这些数码还在我们的高速缓存中
所以我们会把这个日期告诉你们然后你们
要整理好过了这个日期后的
一堆CLKComplication时间轴的数据
有一个好方法是把每一天的数据整理好
当您把这些数据交给我们时我们会把它们
加入您的时间轴而如果我们觉得
需要存储更多的数据我们会再通知您
如果您有更多的数据就能轻松愉快地把它们交给我们
如果我们一直跟您要数据
可是您已经没有数据可提供了
您可以交一个空的NSArray或无
我们就知道了
随着时间的流逝您的数据会逐渐过时
所以为了补充我们的数据我们在未来可能得再向您要数据
而这个未来就在
我们需要为Complication获得时间轴条目的时候
我们会把令我们感到好奇的Complication交给您
所以您可以看看它的家族性能
当然 之后我们会给您一个日期但这个日期当天并不被包括在内
您就要整理这个日期之后的时间轴行列
为了确保我们不会有过多的数据
我们会给您一个指定的数量
所以不要放超出数量的数据进去
如果您放了 我们会消除它们并且我们不能保证不会更改数据
而您也不会想了解发生了什么事
当然负责这些数据的人也不会想了解
我们有个日期功能它能把旧的数据分出来
而且根据您负责的Complication种类
Time Travel可能会不同
比如说预计未来的Complication
不能翻看过去的资料
再比如由于我们还没把股票Complication
给完美地完成
而只能查阅已有资料里的股票
因此我们会要求您设定好您支持的方向
比如天气预报Complication
我们会说我们只支持未来
我们的时间轴只看未来
如果那名用户查看过去的资料
我们就会把您的资料暗化
好让大家知道那里没东西可看
相对的股票Complication
可以说您只支持过去
我们就会把您未来的资料暗化
您可能不想使用Time Travel
但又还是想把资料放进钟面上
在这种情况下您可以不提供资料
我们还是会把您的资料呈现出来
但是一旦进入Time Travel我们就会把它们暗化
您或许
知道一些想在未来呈现的信息
我们可能向您要求对未来的咨询
即便您不改Time Travel
我们也绝对不会向您要求对过去的咨询因为时间不会倒流
而如果您想利用Time Travel
到过去和未来的话
要索取一个功能
就是为Complication获取支持Time Travel的指令
把这个Complication和可以克服这些指令的处理器
告诉我们
您支持的是过去还是未来
不是唯一需要Time TravelComplication处理的事
比如说我们的天气预报Complication
只能预报到7点的天气
但Time Travel可以做到更好
那我们来看看会发生什么事吧
我们Time Travel到4点时还有数据
所有的Complications都在更新
但一到7:09就是刚过7点
我们就不希望用户认为我们的温度数据还是有效的
所以我们要暗化它们并拿出您的Complication
而我们知道暗化的方法就是
在您时间轴的尾端或前面
向您发问
同时这又取决于您支持的方向
如果您支持未来我们会在建立时问您
是否支持未来
那您就得返还我们NS日期
相对的如果您是支持过去的Time Travel
您可以提供我们另一个NS日期
而我们也会对应地去调整
而我们用来了解该用Time Travel走多远的功能
是“为Complication获取时间轴和日期”
我们会把Complication和
能接受您时间轴尾端的NS日期的处理器交给您
相对的
我们有时间轴开始日期来确定您的时间轴该在哪里开始
所以如果用户在定制Complication和钟面
而他们想选您的Complication
他们会选择比如Modular Large
并使用表冠来
设定旧金山的足球Complication
在这里您会看见几样
有关定制的东西
您的Complication条目里
有您应用程序的名字
这是系统提供的
既然我们来到了ModularLarge插槽我们就能
提供一个Modular Large模板
这个模板会形容我们的用户希望看到什么
并给予他们正确的信息
好让他们选择我们的Complication
他们选好Complication后
就会回到切换器和实时钟面
我们会开始向您要求数据和填充时间轴
我们会把这些定制模板
称为占位符模板
我们会在安装和高速缓存时向您发问
以确保我们不需要在定制时
多次启动
因此安装时
我们会索取所有您负责的Complication占位符模板
然后您再把
时钟Complication模板交给我们
在我们使用这个的时候
底部没有时间轴
而我们在这里也不用时间轴条目
这只是个Complication模板
因为它和日期没有关联
所以这个功能是由Complication开启的
为Complication获取Placeholer功能
现在您已习惯这个方程式和处理器
既然您已经非常熟悉
如何建造自己的时间轴那我就把伊莉莎 布洛克带上台
告诉您如何用数码建造它
好的
我这里有个项目
我只做了一点
我们要做一个Complication
就是我们全程一直放照片给您看的那个Complication
我们来看看Xcode项目究竟怎么用
我创造了一个新的项目并把几个资源带进来
包括一个我曾设计的模拟
好让我们设计这个时间轴
我把它做得
可以在Complication里使用
所以如果我把它弄过来... 啊！
我的手表的常规设施
在那里
如果我放大您可以看到
上半部分有我的数据来源
现在在Xcode里看起来有点丑
但如果您点击它您会发现
它正指向我们的Complication
而我除了Modular Large外
暂时不用其他的家族
好让我们的演示看起来更简单
我们只专注于创作
Modular LargeComplication
我们建议您
学会支持越多的家族越好
因为您的用户会想要有
更多选择那么您支持的家族越多
他们就越有可能在手表里
使用您的作品
所以
当您创作这个Xcode
Xcode
而您想使用Complications
Xcode会做一个控制Complication的东西
它们有存根能让您用所有的方法
来执行控制
所以非常有用
我们可以看到它
然后利用它来提供我们需要的信息
所以我会从底部这里开始
我要多加点空行
才可以看见这个
为Complication获取Placeholder模板
我要从这里开始这样我们就可以
看到保罗在荧幕上展现的Complication的模样
我要拿掉Xcode提供的样板
然后
我们要做一个Complication模板
即Modular LargeStandard Body模板
我要给它一个图样一个足球的图样
我的图样是UI图样
我要用这个图样做一个图像提供
但我暂时不会管背景颜色
让我们来看看那个图像怎样
我把它放在XCode里
而我可以在Finder里开启它
这是预习
让我把它放大
在这里您可以发现这是个模板图像
它是单色的
它有个阿尔法一个阿尔法通道
您就是要这个格式的图像
才可以好好地上色
好的这就是我们的图像
我们得加点文字
我的标题是“比赛时间”
而我第一个文字提供会写
“2015女子比赛”
我不会再写第二个文字提供
因为这个模板让我有这个选择权
而我的目的是
把第一行字和第二行连起来
只要不用第二个文字提供这就会自动形成
我们只需要这一点数码就可以创建并运用这个
然后我们应该就可以在编辑那里拿到我们的
Complication了
所以我会转到模拟器那里
然后让我再次确保安装已经完成
好 这就是我们的应用程序这很好
我要按下模拟器
定制过去... 啊！
Complication那里
其实您知道吗？我想我还是先...
就如保罗刚才说的那样占位符模板只用一次
也就是当您的应用程序第一次被安装后
如果您要这么做
您就要先卸载才可以...啊 这是...
确保它被丢弃... 啊！
好了！所以要确保它已经卸载了
消失了
然后我们会让它再出现
这样我们的数码
才会再向您索取占位符模板我们再试一次
让它不在这里... 好的
我们会再加载回去
然后再试一次
耶！好了
好的
所以我们有了我们的模板
现在我们能选Complication了
那我就
直接出来
当然您可以看到这个Complication
并没有出现也没有呈现更新的讯息
因为我们
还没写好这方面的程序
所以
它会和占位符模板粘在一起
因为那就是它所有的信息
我们回到数码那里
然后加入能实行协议的部分
好 让我们来看看
我正在用的模型
我要切换到顶部这里
我有个模型这个模型是用Objective-C写的
您可以把Objective-C和Swift一起用
这样您就可以拿其他项目的数码
放到Watch OS2应用程序里
但要在您的Swift桥接报头
加个顶
就可以用了这很酷吧
所以这里是我的足球比赛模拟
而这些家伙有个日期信息也就是
比赛开始的日期
他们有个团队介绍所以能告诉您
哪个队员和哪个团队在比赛
它也能告诉我
第一场比赛和最后一场比赛什么时候开始
而在每一个比赛中都可以告诉我上一场和下一场比赛是什么
所以有了这个
我们就可以
开始写填充这个Complication的数码了
我会写两个辅助方法
来解决两个需要我们回答的问题
简单地说就是我们在这个Complication里
必须回答的两个设计问题
第一题是我们的模板看起来到底是什么样的？
对付这个我会写个方法
不仅能拿足球比赛
还可以
做出个CLKComplication模板的东西
所以它还蛮直接的
我们要做一个... 没事...
做个ModularLarge标准的模板
就像我们刚才做占位符一样
还有把刚才那个足球图像变成图像提供的
然后这个
我们得有三行字
所以顶部是比赛时间
我正用CLK 时间文字提供来弄这个
第一行字
则会告诉我们哪个团队在比赛
而我正在做一个简单的文字提供
和我的团队介绍
最后
第三行是组织描述
我们现在有个模板
我们也得决定
我们要怎样在我们的时间轴上安排这些模板
保罗刚才说的幼稚方法就是
把开始的日期和时间轴的日期
配在一起
但有个缺点
就是您将无法在您的Complication上
看到哪一场球赛即将开始
您只能看到过去有哪些比赛在什么时候开始
所以我们要和保罗一样对付日历
把这些条目移到更远的未来
我们要确保每一个条目的开始是
在上一场比赛结束时
因此我们要决定一场球赛要花多少时间
我觉得它大概有90分钟
所以我要用一个
我们一会儿可以更改的数据这样就算我们弄错了也可以轻易修改
我们决定了比赛时间长达90分钟
然后我们可以用时间轴条目
匹配日期这个方法
它会推算出每一场比赛究竟
要在时间轴的哪个地方出现
那我们现在要知道的是
某个比赛之前的比赛是什么？
如果之前还有一个比赛
那我们就会用那场比赛的尾端来当这场比赛的时间轴日期
所以如果有这个比赛
我们会把这个比赛的日期
加上我们设定的时间
如果我们不那么做那就表示这是时间轴上第一个比赛
而我已经决定
要把第一场比赛
在开场前六小时就显示出来
但很明显的您可以做其他的事
来匹配您的使用
以上就是
那两种方法
现在我们只需要阅读和实践
刚才保罗说的每一个协议方法
我们从头开始吧
我们这里有时间轴构造
而第一个方法就是
为Complication获取支持Time Travel的指令
默认的XCode模板
是能让您的时间轴前进和后退的
我们现在要的就是这个
所以我们不会碰它
我们下一个步骤
就是想好时间轴要在什么时候开始
由于我们已经写好了这些辅助方法所以能轻而易举地解决问题
我会用‘无’来拿掉处理器
然后我们要想好开始的日期
也就是第一场足球比赛的条目日期
还有别忘了要把处理器拿出来
我们下一步
是要想结束的日期
而这个日期应该是
最后一场比赛过后
这样我们才能拿到最后一场比赛的信息
我们要把这个日期加上比赛时间
这就是我们结束的日期
我们会用处理器来完成这个步骤
下一个方法是我们一整场演说都没提过的
但却非常重要的方法
尤其如果您的咨询有任何一点敏感性
如果用户的手表没被开启
您不会希望敏感的信息呈现在屏幕上
因为那就表示他们已经把手表摘下了
而别人很可能会找到它
如果您的Complication上有敏感信息
您可以使用这个方式
来确保手表被锁好时不会呈现信息
但足球比赛的时间轴并不是敏感信息
所以我放任它为之前的设定
让它即使在锁住的情况下也呈现信息
接下来
我们要填充
时间轴
这是非常重要的部分
我们得把现时的条目放进去
我们得告诉自己... 告诉手表
如何把时间轴往后移
也得告诉它如何往前移
我从往前移开始说
我们来到底下这里
我们想要做的是建造一个
从我们收到条目的第一天一直往前走
走到未来的条目数组
我的战略是做个数组
做好后再用处理器
我们要查看每一个比赛
然后找到一个在我们开始写数码后才开始的比赛
由那个比赛开始创建模板
然后把它们放到这个数组里
我会从
第一场比赛开始
而我也已经把它变成选项了
这并不是因为第一场比赛的结果可能是‘无’
而是因为我们要把它们
换成下一场比赛
直到所有比赛结束然后数据就会变成零
那我们就知道什么时候要停了
接下来 我们要... 啊！
虽然这里有场比赛
但我们得拿到显示比赛的日期
这个就是这场比赛的显示日期
现在我们要把这个日期和我们拿到的日期
也就是我们应该填充时间轴条目的日期
来做比较
如果它们的时间是往后退
那表示我们的日期对了
所以我们要开始把这些时间轴条目放回去
这里我们就要填充一个时间轴条目
这很直接
我们做个模板给这场比赛
那是我们的辅助方法
我们在开始的日期制造条目这条目是我们之前算出来的
然后制造那个模板
我们追加到我们的数组
然后要小心不要做太多个
我们已经超过极限了
我们要在极限之内
既然我们现在加了东西到数组里
就要检查数组看看它是否超过极限如果超过了 我们就停止
最后
为了启动这个循环
我们必须拿下一个又一个
我们刚刚处理的比赛
把它们填充在
时间轴里我们设定的日期过后的其他条目
我们也可以做另一件非常类似的事
来填充之前的数据
就是复制我们刚刚写好的数码
然后往上移到在日期前
为Complication获取时间轴条目
这个方法
把它复制在这里然后更改三样东西
我们要做一模一样的东西
但我们会从最后一个条目
开始往前移
或者说从最后一场比赛开始移到第一场比赛
我们从最后一个比赛开始
然后底下这里循环发生的地方
我们会拿前面的
最后 我们只在
它们还没超过我们的日期前用它们
所以必须让顺序倒过来
这就是我们的方法
我们最后要写的是获取现时时间轴条目的方法
我们可以很聪明地
利用我们之前写的方法
因为索取现时的条目基本上就是
要拿某个日期（现在）前的条目
就是我们现在要呈现的条目
所以我要采用在日期前为Complication
获取时间轴条目方法
就是我们刚写好的那个
我要把日期设为当下
我要把极限设为一
因为我们这里只需要一个
然后当我启动处理器后
我会拿数组里的第一个条目并把它放回
获取现时时间轴条目方法的处理器
所以我们可以放心启动这个
而我会启动它
然后迅速换到还在启动的模拟器那里
它还在呈现
我们之前填充的占位符模板
所以只要我启动这个它就会废止模拟器里的时间轴
然后重新询问
每一个方法我们现在都已经执行过了
所以我们可以拿到数据了好了 来吧
启动然后转移
现在我们应该
看到
我们的东西被填充
然后这里我们有实质的数据
这告诉我们...
这告诉我们比赛在11点开始
这是正确的行为 您记得吗？
我们就是要看
11点到12:30的比赛
90分钟后
如果我们把Time Travel往前
直到12:30
我们应该可以看到下一个比赛的更改
所以Time Travel到3点都还能发挥作用
我们应该可以开始看见再下一个比赛
啊 我超时了
我们的Time Travel有效
而我们主要要做的
是写好三个最重要的方法
这样就能有个实用的Complication
现在我会交给保罗来告诉我们
如何安排Complication
来实时更新世上的信息
谢谢伊莉莎
既然我们的Complication都弄好了
我们要确保的就是
我们显示的东西是正确的
所以Watch OS2里有很多方式
可以让您把世上每一个角落的信息
都收集到您的手表里
您可以使用新的WatchConnectivity APIs
来和其他iOS应用程序沟通并索取更多资料到您的手表里
或者直接使用NSURLSession和网站沟通
并把信息带进手表里
假设我们的Complication时间轴已经设立好了
而且我们和网站沟通了
并拿到了新的信息
如果那些信息已经废止了我们原有的信息
我们就要告诉钟面刷新时间轴
我们可以进入时钟Complications服务器
它是我们和钟面沟通的接口
我们可以
要求钟面刷新我们的数据
然后丢掉之前所有的信息
然后以寻找现时时间轴的方法
重新启动我们的沟通渠道
您可能已经发现
这是个毁灭性有点大的动作
如果您有个股票Complication
而您之前的数据还有用的话
钟面现在可不会向您二次确认了
那其实是您的责任
您必须告诉我们是要废止
还是延长您的信息
所以除了丢掉信息
您还可以要求延长信息
这样我们就不会要求您刷新所有东西
反而会在尾段附加最新的信息
那这些在数码里会是什么样的呢？
您可以进入Complication
我是说时钟Complication服务器共享实例
您可以在这里询问所有	活动的Complication
有一个活动Complication现在就能在
您的钟面上被看到
而任何一个Complication都会给予您
向服务器要求
延长或刷新时间轴的权利
所以很棒我们知道我们有责任告诉手表
我们需要更新信息但我们什么时候才有机会那么做？
其实只要您的程序在进行着
您就可以通过时钟Complication服务
和手表沟通
这会在几种时候发生比如当您手表里有最重要的应用程序时
但您还是有机会通过呼唤后台启动
甚至通过新表的
iOS伴侣应用程序的Connectivity APIs
来唤醒程序好让电话接收您传送的信息
但由于它们都是在后台启动程序的所以不能经常使用
如果您在后台加很多工您就会把钱花光
而在您把钱存回来前
您都无法更新您的Complication直到晚上
若想更了解Watch Connectivity APIs
请到介绍WatchConnectivity会话课
我们还在这手表里加了一个很酷的功能来支持Complication数据的使用
我们再来经由Complication数据来源协议来谈谈
如何利用后台功能
来更新Complication数据
您只需要让处理器给我们一个日期
我们就会把它运用在所有的Complication上
而不是其中一个Complication
拿到这个日期时我们会把它
当成提示所以如果有金钱资助
或系统的状况良好
我们就会在后台启动这时
您的数据会从WatchConnectivity和NSURL进入手表
而确保信息已被更新和要求让手表更新信息
是您的责任
我们的Complication课程已接近尾声了
我们希望您已经学会如何建造时间轴
及如何将模板和其他相关的内容提供给我们
还有如何利用Watch OS
来制造并输入信息到文字提供里
学会如何轻松地刷新数据
如果您是不常用后台更新的良好市民
您会有更多机会使用手表
若想得到更多资料请查看您的文件和示例代码
我们有良好的技术支持和老师
也有很多很棒的课让您更了解WatchKit
谢谢！